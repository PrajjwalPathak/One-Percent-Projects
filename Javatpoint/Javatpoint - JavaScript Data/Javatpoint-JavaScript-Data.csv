,main_headings,main_contents,links,image_urls,video_urls,sub_headings_h2,sub_headings_h3,sub_headings_h4,facts,definitions,explanations,codes,outputs,table_data,list_items
0,['Learn JavaScript Tutorial'],['Our JavaScript Tutorial is designed for beginners and professionals both. JavaScript is used to create client-side dynamic pages. '],"['https://www.javatpoint.com/javascript-example', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=hellojs', 'https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-example', 'https://www.javatpoint.com/external-javascript-file', 'https://www.javatpoint.com/javascript-comment', 'https://www.javatpoint.com/javascript-variable', 'https://www.javatpoint.com/javascript-global-variable', 'https://www.javatpoint.com/javascript-data-types', 'https://www.javatpoint.com/javascript-operators', 'https://www.javatpoint.com/javascript-if', 'https://www.javatpoint.com/javascript-switch', 'https://www.javatpoint.com/javascript-loop', 'https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/javascript-string', 'https://www.javatpoint.com/javascript-date', 'https://www.javatpoint.com/javascript-math', 'https://www.javatpoint.com/javascript-number', 'https://www.javatpoint.com/javascript-boolean', 'https://www.javatpoint.com/post/javascript-dataview', 'https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/javascript-handler', 'https://www.javatpoint.com/javascript-json', 'https://www.javatpoint.com/javascript-number', 'https://www.javatpoint.com/javascript-reflect', 'https://www.javatpoint.com/javascript-regexp', 'https://www.javatpoint.com/javascript-symbol', 'https://www.javatpoint.com/browser-object-model', 'https://www.javatpoint.com/window-object', 'https://www.javatpoint.com/javascript-history-object', 'https://www.javatpoint.com/javascript-navigator-object', 'https://www.javatpoint.com/javascript-screen', 'https://www.javatpoint.com/document-object-model', 'https://www.javatpoint.com/document-getElementById()-method', 'https://www.javatpoint.com/document-getElementsByName()-method', 'https://www.javatpoint.com/document-getElementsByTagName()-method', 'https://www.javatpoint.com/javascript-innerHTML', 'https://www.javatpoint.com/javascript-innerText', 'https://www.javatpoint.com/javascript-form-validation', 'https://www.javatpoint.com/javascript-form-validation#email', 'https://www.javatpoint.com/javascript-oops-classes', 'https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/javascript-oops-prototype-object', 'https://www.javatpoint.com/javascript-oops-constructor-method', 'https://www.javatpoint.com/javascript-oops-static-method', 'https://www.javatpoint.com/javascript-oops-encapsulation', 'https://www.javatpoint.com/javascript-oops-inheritance', 'https://www.javatpoint.com/javascript-oops-polymorphism', 'https://www.javatpoint.com/javascript-oops-abstraction', 'https://www.javatpoint.com/javascript-cookies', 'https://www.javatpoint.com/javascript-cookie-attributes', 'https://www.javatpoint.com/javascript-cookie-with-multiple-name', 'https://www.javatpoint.com/javascript-deleting-cookies', 'https://www.javatpoint.com/understanding-html-dom-events', 'https://www.javatpoint.com/javascript-this-keyword', 'https://www.javatpoint.com/javascript-debugging', 'https://www.javatpoint.com/javascript-hoisting', 'https://www.javatpoint.com/javascript-strict-mode', 'https://www.javatpoint.com/javascript-typedarray', 'https://www.javatpoint.com/javascript-set', 'https://www.javatpoint.com/javascript-map', 'https://www.javatpoint.com/javascript-weakset', 'https://www.javatpoint.com/javascript-weakmap', 'https://www.javatpoint.com/javascript-interview-questions', 'https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/javascript-array-concat-method', 'https://www.javatpoint.com/javascript-array-copywithin-method', 'https://www.javatpoint.com/javascript-array-every-method', 'https://www.javatpoint.com/javascript-array-fill-method', 'https://www.javatpoint.com/javascript-array-filter-method', 'https://www.javatpoint.com/javascript-array-find-method', 'https://www.javatpoint.com/javascript-array-findindex-method', 'https://www.javatpoint.com/javascript-array-foreach-method', 'https://www.javatpoint.com/javascript-array-includes-method', 'https://www.javatpoint.com/javascript-array-indexof-method', 'https://www.javatpoint.com/javascript-array-join-method', 'https://www.javatpoint.com/javascript-array-lastindexof-method', 'https://www.javatpoint.com/javascript-array-map-method', 'https://www.javatpoint.com/javascript-array-pop-method', 'https://www.javatpoint.com/javascript-array-push-method', 'https://www.javatpoint.com/javascript-array-reverse-method', 'https://www.javatpoint.com/javascript-array-shift-method', 'https://www.javatpoint.com/javascript-array-slice-method', 'https://www.javatpoint.com/javascript-array-sort-method', 'https://www.javatpoint.com/javascript-array-splice-method', 'https://www.javatpoint.com/javascript-array-unshift-method', 'https://www.javatpoint.com/post/javascript-dataview', 'https://www.javatpoint.com/post/javascript-dataview-getfloat32-method', 'https://www.javatpoint.com/post/javascript-dataview-getfloat64-method', 'https://www.javatpoint.com/post/javascript-dataview-getint8-method', 'https://www.javatpoint.com/post/javascript-dataview-getint16-method', 'https://www.javatpoint.com/post/javascript-dataview-getint32-method', 'https://www.javatpoint.com/post/javascript-dataview-getuint8-method', 'https://www.javatpoint.com/post/javascript-dataview-getuint16-method', 'https://www.javatpoint.com/post/javascript-dataview-getuint32-method', 'https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/javascript-function-apply-method', 'https://www.javatpoint.com/javascript-function-bind-method', 'https://www.javatpoint.com/javascript-function-call-method', 'https://www.javatpoint.com/javascript-function-tostring-method', 'https://www.javatpoint.com/javascript-date', 'https://www.javatpoint.com/javascript-date-getdate-method', 'https://www.javatpoint.com/javascript-date-getday-method', 'https://www.javatpoint.com/javascript-date-getfullyear-method', 'https://www.javatpoint.com/javascript-date-gethours-method', 'https://www.javatpoint.com/javascript-date-getmilliseconds-method', 'https://www.javatpoint.com/javascript-date-getminutes-method', 'https://www.javatpoint.com/javascript-date-getmonth-method', 'https://www.javatpoint.com/javascript-date-getseconds-method', 'https://www.javatpoint.com/javascript-date-getutcdate-method', 'https://www.javatpoint.com/javascript-date-getutcday-method', 'https://www.javatpoint.com/javascript-date-getutcfullyears-method', 'https://www.javatpoint.com/javascript-date-getutchours-method', 'https://www.javatpoint.com/javascript-date-getutcminutes-method', 'https://www.javatpoint.com/javascript-date-getutcmonth-method', 'https://www.javatpoint.com/javascript-date-getutcseconds-method', 'https://www.javatpoint.com/javascript-date-sethours-method', 'https://www.javatpoint.com/javascript-date-setmilliseconds-method', 'https://www.javatpoint.com/javascript-date-setminutes-method', 'https://www.javatpoint.com/javascript-date-setseconds-method', 'https://www.javatpoint.com/javascript-date-setutcdate-method', 'https://www.javatpoint.com/javascript-date-setutcfullyears-method', 'https://www.javatpoint.com/javascript-date-setutchours-method', 'https://www.javatpoint.com/javascript-date-setutcminutes-method', 'https://www.javatpoint.com/javascript-date-setutcmonth-method', 'https://www.javatpoint.com/javascript-date-setutcseconds-method', 'https://www.javatpoint.com/javascript-date-todatestring-method', 'https://www.javatpoint.com/javascript-date-toisostring-method', 'https://www.javatpoint.com/javascript-date-tojson-method', 'https://www.javatpoint.com/javascript-date-tostring-method', 'https://www.javatpoint.com/javascript-date-totimestring-method', 'https://www.javatpoint.com/javascript-date-toutcstring-method', 'https://www.javatpoint.com/javascript-date-valueof-method', 'https://www.javatpoint.com/javascript-handler', 'https://www.javatpoint.com/javascript-handler-apply-method', 'https://www.javatpoint.com/javascript-handler-construct-method', 'https://www.javatpoint.com/javascript-handler-defineproperty-method', 'https://www.javatpoint.com/javascript-handler-deleteproperty-method', 'https://www.javatpoint.com/javascript-handler-get-method', 'https://www.javatpoint.com/javascript-handler-getownpropertydescriptor-method', 'https://www.javatpoint.com/javascript-handler-getprototypeof-method', 'https://www.javatpoint.com/javascript-handler-has-method', 'https://www.javatpoint.com/javascript-handler-isextensible-method', 'https://www.javatpoint.com/javascript-handler-ownkeys-method', 'https://www.javatpoint.com/javascript-handler-preventextensions-method', 'https://www.javatpoint.com/javascript-handler-set-method', 'https://www.javatpoint.com/javascript-handler-setprototypeof-method', 'https://www.javatpoint.com/javascript-json', 'https://www.javatpoint.com/javascript-json-parse-method', 'https://www.javatpoint.com/javascript-json-stringify-method', 'https://www.javatpoint.com/javascript-map', 'https://www.javatpoint.com/javascript-map-clear-method', 'https://www.javatpoint.com/javascript-map-delete-method', 'https://www.javatpoint.com/javascript-map-entries-method', 'https://www.javatpoint.com/javascript-map-foreach-method', 'https://www.javatpoint.com/javascript-map-get-method', 'https://www.javatpoint.com/javascript-map-has-method', 'https://www.javatpoint.com/javascript-map-keys-method', 'https://www.javatpoint.com/javascript-map-set-method', 'https://www.javatpoint.com/javascript-map-values-method', 'https://www.javatpoint.com/javascript-math', 'https://www.javatpoint.com/javascript-math-abs-method', 'https://www.javatpoint.com/javascript-math-acos-method', 'https://www.javatpoint.com/javascript-math-asin-method', 'https://www.javatpoint.com/javascript-math-atan-method', 'https://www.javatpoint.com/javascript-math-cbrt-method', 'https://www.javatpoint.com/javascript-math-ceil-method', 'https://www.javatpoint.com/javascript-math-cos-method', 'https://www.javatpoint.com/javascript-math-cosh-method', 'https://www.javatpoint.com/javascript-math-exp-method', 'https://www.javatpoint.com/javascript-math-floor-method', 'https://www.javatpoint.com/javascript-math-hypot-method', 'https://www.javatpoint.com/javascript-math-log-method', 'https://www.javatpoint.com/javascript-math-max-method', 'https://www.javatpoint.com/javascript-math-min-method', 'https://www.javatpoint.com/javascript-math-pow-method', 'https://www.javatpoint.com/javascript-math-random-method', 'https://www.javatpoint.com/javascript-math-round-method', 'https://www.javatpoint.com/javascript-math-sign-method', 'https://www.javatpoint.com/javascript-math-sin-method', 'https://www.javatpoint.com/javascript-math-sinh-method', 'https://www.javatpoint.com/javascript-math-sqrt-method', 'https://www.javatpoint.com/javascript-math-tan-method', 'https://www.javatpoint.com/javascript-math-tanh-method', 'https://www.javatpoint.com/javascript-math-trunc-method', 'https://www.javatpoint.com/javascript-number', 'https://www.javatpoint.com/javascript-number-isfinite-method', 'https://www.javatpoint.com/javascript-number-isinteger-method', 'https://www.javatpoint.com/javascript-number-parsefloat-method', 'https://www.javatpoint.com/javascript-number-parseint-method', 'https://www.javatpoint.com/javascript-number-toexponential-method', 'https://www.javatpoint.com/javascript-number-tofixed-method', 'https://www.javatpoint.com/javascript-number-toprecision-method', 'https://www.javatpoint.com/javascript-number-tostring-method', 'https://www.javatpoint.com/javascript-regexp', 'https://www.javatpoint.com/javascript-regexp-exec-method', 'https://www.javatpoint.com/javascript-regexp-test-method', 'https://www.javatpoint.com/javascript-regexp-tostring-method', 'https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/javascript-object-assign-method', 'https://www.javatpoint.com/javascript-object-create-method', 'https://www.javatpoint.com/javascript-object-defineproperty-method', 'https://www.javatpoint.com/javascript-object-defineproperties-method', 'https://www.javatpoint.com/javascript-object-entries-method', 'https://www.javatpoint.com/javascript-object-freeze-method', 'https://www.javatpoint.com/javascript-object-getownpropertydescriptor-method', 'https://www.javatpoint.com/javascript-object-getownpropertydescriptors-method', 'https://www.javatpoint.com/javascript-object-getownpropertynames-method', 'https://www.javatpoint.com/javascript-object-getownpropertysymbols-method', 'https://www.javatpoint.com/javascript-object-getprototypeof-method', 'https://www.javatpoint.com/javascript-object-is-method', 'https://www.javatpoint.com/javascript-object-preventextensions-method', 'https://www.javatpoint.com/javascript-object-seal-method', 'https://www.javatpoint.com/javascript-object-setprototypeof-method', 'https://www.javatpoint.com/javascript-object-values-method', 'https://www.javatpoint.com/javascript-reflect', 'https://www.javatpoint.com/javascript-reflect-apply-method', 'https://www.javatpoint.com/javascript-reflect-construct-method', 'https://www.javatpoint.com/javascript-reflect-defineproperty-method', 'https://www.javatpoint.com/javascript-reflect-deleteproperty-method', 'https://www.javatpoint.com/javascript-reflect-get-method', 'https://www.javatpoint.com/javascript-reflect-getownpropertydescriptor-method', 'https://www.javatpoint.com/javascript-reflect-getprototypeof-method', 'https://www.javatpoint.com/javascript-reflect-has-method', 'https://www.javatpoint.com/javascript-reflect-isextensible-method', 'https://www.javatpoint.com/javascript-reflect-ownkeys-method', 'https://www.javatpoint.com/javascript-reflect-preventextensions-method', 'https://www.javatpoint.com/javascript-reflect-set-method', 'https://www.javatpoint.com/javascript-reflect-setprototypeof-method', 'https://www.javatpoint.com/javascript-set', 'https://www.javatpoint.com/javascript-set-add-method', 'https://www.javatpoint.com/javascript-set-clear-method', 'https://www.javatpoint.com/javascript-set-delete-method', 'https://www.javatpoint.com/javascript-set-entries-method', 'https://www.javatpoint.com/javascript-set-foreach-method', 'https://www.javatpoint.com/javascript-set-has-method', 'https://www.javatpoint.com/javascript-set-values-method', 'https://www.javatpoint.com/javascript-string', 'https://www.javatpoint.com/javascript-string-charat-method', 'https://www.javatpoint.com/javascript-string-charcodeat-method', 'https://www.javatpoint.com/javascript-string-concat-method', 'https://www.javatpoint.com/javascript-string-indexof-method', 'https://www.javatpoint.com/javascript-string-lastindexof-method', 'https://www.javatpoint.com/javascript-string-search-method', 'https://www.javatpoint.com/javascript-string-match-method', 'https://www.javatpoint.com/javascript-string-replace-method', 'https://www.javatpoint.com/javascript-string-substr-method', 'https://www.javatpoint.com/javascript-string-substring-method', 'https://www.javatpoint.com/javascript-string-slice-method', 'https://www.javatpoint.com/javascript-string-tolowercase-method', 'https://www.javatpoint.com/javascript-string-tolocalelowercase-method', 'https://www.javatpoint.com/javascript-string-touppercase-method', 'https://www.javatpoint.com/javascript-string-tolocaleuppercase-method', 'https://www.javatpoint.com/javascript-string-tostring-method', 'https://www.javatpoint.com/javascript-string-valueof-method', 'https://www.javatpoint.com/javascript-symbol', 'https://www.javatpoint.com/javascript-symbol-for-method', 'https://www.javatpoint.com/javascript-symbol-keyfor-method', 'https://www.javatpoint.com/javascript-symbol-tostring-method', 'https://www.javatpoint.com/javascript-symbol-hasinstance-property', 'https://www.javatpoint.com/javascript-symbol-isconcatspreadable-property', 'https://www.javatpoint.com/javascript-symbol-match-property', 'https://www.javatpoint.com/javascript-symbol-prototype-property', 'https://www.javatpoint.com/javascript-symbol-replace-property', 'https://www.javatpoint.com/javascript-symbol-search-property', 'https://www.javatpoint.com/javascript-symbol-split-property', 'https://www.javatpoint.com/javascript-symbol-tostringtag-property', 'https://www.javatpoint.com/javascript-symbol-unscopables-property', 'https://www.javatpoint.com/javascript-typedarray', 'https://www.javatpoint.com/javascript-typedarray-copywithin-method', 'https://www.javatpoint.com/javascript-typedarray-entries-method', 'https://www.javatpoint.com/javascript-typedarray-every-method', 'https://www.javatpoint.com/javascript-typedarray-fill-method', 'https://www.javatpoint.com/javascript-typedarray-filter-method', 'https://www.javatpoint.com/javascript-typedarray-find-method', 'https://www.javatpoint.com/javascript-typedarray-findindex-method', 'https://www.javatpoint.com/javascript-typedarray-foreach-method', 'https://www.javatpoint.com/javascript-typedarray-includes-method', 'https://www.javatpoint.com/javascript-typedarray-indexof-method', 'https://www.javatpoint.com/javascript-typedarray-join-method', 'https://www.javatpoint.com/javascript-typedarray-keys-method', 'https://www.javatpoint.com/javascript-typedarray-lastindexof-method', 'https://www.javatpoint.com/javascript-typedarray-map-method', 'https://www.javatpoint.com/javascript-typedarray-reduce-method', 'https://www.javatpoint.com/javascript-typedarray-reduceright-method', 'https://www.javatpoint.com/javascript-typedarray-reverse-method', 'https://www.javatpoint.com/javascript-typedarray-set-method', 'https://www.javatpoint.com/javascript-typedarray-slice-method', 'https://www.javatpoint.com/javascript-typedarray-some-method', 'https://www.javatpoint.com/javascript-typedarray-sort-method', 'https://www.javatpoint.com/javascript-typedarray-subarray-method', 'https://www.javatpoint.com/javascript-typedarray-values-method', 'https://www.javatpoint.com/javascript-typedarray-tolocalestring-method', 'https://www.javatpoint.com/javascript-typedarray-tostring-method', 'https://www.javatpoint.com/javascript-weakmap', 'https://www.javatpoint.com/javascript-weakmap-delete-method', 'https://www.javatpoint.com/javascript-weakmap-get-method', 'https://www.javatpoint.com/javascript-weakmap-has-method', 'https://www.javatpoint.com/javascript-weakmap-set-method', 'https://www.javatpoint.com/javascript-weakset', 'https://www.javatpoint.com/javascript-weakset-add-method', 'https://www.javatpoint.com/javascript-weakset-delete-method', 'https://www.javatpoint.com/javascript-weakset-has-method', 'https://www.javatpoint.com/javascript-example', 'https://www.javatpoint.com/javascript-example']",['https://static.javatpoint.com/images/javascript/javascript_logo.png'],[],"['What is JavaScript', 'Features of JavaScript', 'History of JavaScript', 'Application of JavaScript', 'JavaScript Index', 'Prerequisite', 'Audience', 'Problem']",['JavaScript Example'],[],"['JavaScript is an object-based scripting language which is lightweight and cross-platform.', 'There are following features of JavaScript:', 'JavaScript is used to create interactive websites. It is mainly used for:', 'A detailed explanation of first JavaScript example is given in next chapter.', 'JavaScript Tutorial', 'JavaScript Basics', 'JavaScript Objects', 'JavaScript BOM', 'JavaScript DOM', 'JavaScript Validation', 'JavaScript OOPs', 'JavaScript Cookies', 'JavaScript Events', 'JavaScript Misc', 'JavaScript Advance', 'Interview Questions', 'JavaScript Methods', 'JavaScript Array Object', 'JavaScript DataView Object', 'JavaScript Function Object', 'JavaScript Date Object', 'JavaScript handler Object', 'JavaScript JSON Object', 'JavaScript Map Object', 'JavaScript Math Object', 'JavaScript Number Object', 'JavaScript RegExp Object', 'JavaScript Object', 'JavaScript Reflect Object', 'JavaScript Set Object', 'JavaScript String Object', 'JavaScript Symbol Object', 'Symbol Property', 'JavaScript TypedArray Object', 'JavaScript WeakMap Object', 'JavaScript WeakSet Object', 'Before learning JavaScript in depth, you must have the basic knowledge of HTML.', 'We assure you that you will not find any problem in our JavaScript tutorial. But, if you find any mistake, you can post it in our comment section.']","['JavaScript is not a compiled language, but it is a translated language. The JavaScript Translator (embedded in the browser) is responsible for translating the JavaScript code for the web browser.', 'We have developed this JavaScript tutorial for beginners and professionals both. There are given a lot of examples with JavaScript editor. So, you can easily edit your JavaScript code which will help you to learn JavaScript easily. ']","['JavaScript (js) is a light-weight object-oriented programming language which is used by several websites for scripting the webpages. It is an interpreted, full-fledged programming language that enables dynamic interactivity on websites when applied to an HTML document. It was introduced in the year 1995 for adding programs to the webpages in the Netscape Navigator browser. Since then, it has been adopted by all other graphical web browsers. With JavaScript, users can build modern web applications to interact directly without reloading the page every time. The traditional website uses js to provide several forms of interactivity and simplicity.', 'Although, JavaScript has no connectivity with Java programming language. The name was suggested and provided in the times when Java was gaining popularity in the market. In addition to web browsers, databases such as CouchDB and MongoDB uses JavaScript as their scripting and query language.', ""In 1993, Mosaic, the first popular web browser, came into existence. In the year 1994, Netscape was founded by Marc Andreessen. He realized that the web needed to become more dynamic. Thus, a 'glue language' was believed to be provided to HTML to make web designing easy for designers and part-time programmers. Consequently, in 1995, the company recruited Brendan Eich intending to implement and embed Scheme programming language to the browser. But, before Brendan could start, the company merged with Sun Microsystems for adding Java into its Navigator so that it could compete with Microsoft over the web technologies and platforms. Now, two languages were there: Java and the scripting language. Further, Netscape decided to give a similar name to the scripting language as Java's. It led to 'Javascript'. Finally, in May 1995, Marc Andreessen coined the first code of Javascript named 'Mocha'. Later, the marketing team replaced the name with 'LiveScript'. But, due to trademark reasons and certain other reasons, in December 1995, the language was finally renamed to 'JavaScript'. From then, JavaScript came into existence.""]","['<script>', 'document.write(""Hello JavaScript by JavaScript"");', '</script>']",[],[],"['|||Client-side validation,|||Dynamic drop-down menus,|||Displaying date and time,|||Displaying pop-up windows and dialog boxes (like an alert dialog box, confirm dialog box and prompt dialog box),|||Displaying clocks etc.||||||JavaScript Introduction|||JavaScript Example|||External JavaScript||||||JavaScript Comment|||JavaScript Variable|||JavaScript Global Variable|||JavaScript Data Types|||JavaScript Operators|||JavaScript If Statement|||JavaScript Switch|||JavaScript Loop|||JavaScript Function||||||JavaScript Object|||JavaScript Array|||JavaScript String|||JavaScript Date|||JavaScript Math|||JavaScript Number|||JavaScript Boolean|||JavaScript DataView|||JavaScript Function|||JavaScript handler|||JavaScript JSON|||JavaScript Number|||JavaScript Reflect|||JavaScript RegExp|||JavaScript Symbol||||||Browser Objects|||1) Window Object|||2) History Object|||3) Navigator Object|||4) Screen Object||||||5) Document Object|||getElementById|||getElementsByName|||getElementsByTagName|||JavaScript innerHTML property|||JavaScript innerText property||||||JavaScript form validation|||JavaScript email validation||||||JavaScript Class|||JavaScript Object|||JavaScript Prototype|||JavaScript constructor Method|||JavaScript static Method|||JavaScript Encapsulation|||JavaScript Inheritance|||JavaScript Polymorphism|||JavaScript Abstraction||||||JavaScript Cookies|||Cookie Attributes|||Cookie with multiple Name|||Deleting Cookies||||||HTML/DOM Events||||||JavaScript this Keyword|||JavaScript Debugging|||JavaScript Hoisting|||JavaScript Strict Mode||||||JavaScript TypedArray|||JavaScript Set|||JavaScript Map|||JavaScript WeakSet|||JavaScript WeakMap||||||JavaScript Interview Questions||||||JavaScript Array|||Array concat() method|||Array copywithin() method|||Array every() method|||Array fill() method|||Array filter() method|||Array find() method|||Array findIndex() method|||Array forEach() method|||Array includes() method|||Array indexOf() method|||Array join() method|||Array lastIndexOf() method|||Array map() method|||Array pop() method|||Array push() method|||Array reverse() method|||Array shift() method|||Array slice() method|||Array sort() method|||Array splice() method|||Array unshift() method||||||JavaScript DataView|||DataView getFloat32() method|||DataView getFloat64() method|||DataView getInt8() method|||DataView getInt16() method|||DataView getInt32() method|||DataView getUint8() method|||DataView getUint16() method|||DataView getUint32() method||||||JavaScript Function|||Function apply() method|||Function bind() method|||Function call() method|||Function toString() method||||||JavaScript Date|||date getDate() method|||date getDay() method|||date getFullYears() method|||date getHours() method|||date getMilliseconds() method|||date getMinutes() method|||date getMonth() method|||date getSeconds() method|||date getUTCDate() method|||date getUTCDay() method|||date getUTCFullYears() method|||date getUTCHours() method|||date getUTCMinutes() method|||date getUTCMonth() method|||date getUTCSeconds() method|||date setDate() method|||date setDay() method|||date setFullYears() method|||date setHours() method|||date setMilliseconds() method|||date setMinutes() method|||date setMonth() method|||date setSeconds() method|||date setUTCDate() method|||date setUTCDay() method|||date setUTCFullYears() method|||date setUTCHours() method|||date setUTCMilliseconds() method|||date setUTCMinutes() method|||date setUTCMonth() method|||date setUTCSeconds() method|||date toDateString() method|||date toISOString() method|||date toJSON() method|||date toString() method|||date toTimeString() method|||date toUTCString() method|||date valueOf() method||||||JavaScript handler|||handler apply() method|||handler construct() method|||handler defineProperty() method|||handler deleteProperty() method|||handler get() method|||handler getOwnPropertyDescriptor() method|||handler getPrototypeOf() method|||handler has() method|||handler isExtensible() method|||handler ownKeys() method|||handler preventExtensions() method|||handler set() method|||handler setPrototypeOf() method||||||JavaScript JSON|||JSON.parse() method|||JSON.stringify() method||||||JavaScript Map|||Map clear() method|||Map delete() method|||Map entries() method|||Map forEach() method|||Map get() method|||Map has() method|||Map keys() method|||Map set() method|||Map values() method||||||JavaScript Math|||Math abs() method|||Math acos() method|||Math asin() method|||Math atan() method|||Math cbrt() method|||Math ceil() method|||Math cos() method|||Math cosh() method|||Math exp() method|||Math floor() method|||Math hypot() method|||Math log() method|||Math max() method|||Math min() method|||Math pow() method|||Math random() method|||Math round() method|||Math sign() method|||Math sin() method|||Math sinh() method|||Math sqrt() method|||Math tan() method|||Math tanh() method|||Math trunc() method||||||JavaScript Number|||Number isFinite() method|||Number isInteger() method|||Number parseFloat() method|||Number parseInt() method|||Number toExponential() method|||Number toFixed() method|||Number toPrecision() method|||Number toString() method||||||JavaScript RegExp|||RegExp.exec() method|||RegExp.test() method|||RegExp.toString() method||||||JavaScript Object|||Object.assign() method|||Object.create() method|||Object.defineProperty() method|||Object.defineProperties() method|||Object.entries() method|||Object.freeze() method|||getOwnPropertyDescriptor() method|||getOwnPropertyDescriptors() method|||getOwnPropertyNames() method|||getOwnPropertySymbols() method|||Object.getPrototypeOf() method|||Object.is() method|||preventExtensions() method|||Object.seal() method|||Object.setPrototypeOf() method|||Object.values() method||||||JavaScript Reflect|||Reflect.apply() method|||Reflect.construct() method|||Reflect.defineProperty() method|||Reflect.deleteProperty() method|||Reflect.get() method|||getOwnPropertyDescriptor() method|||Reflect.getPrototypeOf() method|||Reflect.has() method|||Reflect.isExtensible() method|||Reflect.ownKeys() method|||preventExtensions() method|||Reflect.set() method|||Reflect.setPrototypeOf() method||||||JavaScript Set|||Set add() method|||Set clear() method|||Set delete() method|||Set entries() method|||Set forEach() method|||Set has() method|||Set values() method||||||String charAt() method|||String charAt() method|||String charCodeAt() method|||String concat() method|||String indexOf() method|||String lastIndexOf() method|||String search() method|||String match()|||String replace() method|||String substr() method|||String substring() method|||String slice() method|||String toLowerCase() method|||toLocaleLowerCase() method|||String toUpperCase() method|||toLocaleUpperCase() method|||String toString() method|||String valueOf() method||||||JavaScript Symbol|||Symbol.for() method|||Symbol.keyFor() method|||Symbol.toString() method||||||Symbol.hasInstance Property|||isConcatSpreadable Property|||Symbol.match Property|||Symbol.prototype Property|||Symbol.replace Property|||Symbol.search Property|||Symbol.split Property|||Symbol.toStringTag Property|||Symbol.unscopables Property||||||JavaScript TypedArray|||TypedArray copyWithin() method|||TypedArray entries() method|||TypedArray every() method|||TypedArray fill() method|||TypedArray filter() method|||TypedArray find() method|||TypedArray findIndex() method|||TypedArray forEach() method|||TypedArray includes() method|||TypedArray indexof() method|||TypedArray join() method|||TypedArray Keys() method|||TypedArray lastIndexof() method|||TypedArray map() method|||TypedArray reduce() method|||TypedArray reduceRight() method|||TypedArray reverse() method|||TypedArray set() method|||TypedArray Slice() method|||TypedArray some() method|||TypedArray sort() method|||TypedArray subarray() method|||TypedArray values() method|||toLocaleString() method|||TypedArray toString() method||||||JavaScript WeakMap|||WeakMap delete() method|||WeakMap get() method|||WeakMap has() method|||WeakMap set() method||||||JavaScript WeakSet|||WeakSet add() method|||WeakSet delete() method|||WeakSet has() method|||&&&|||All popular web browsers support JavaScript as they provide built-in execution environments.|||JavaScript follows the syntax and structure of the C programming language. Thus, it is a structured programming language.|||JavaScript is a weakly typed language, where certain types are implicitly cast (depending on the operation).|||JavaScript is an object-oriented programming language that uses prototypes rather than using classes for inheritance.|||It is a light-weighted and interpreted language.|||It is a case-sensitive language.|||JavaScript is supportable in several operating systems including, Windows, macOS, etc.|||It provides good control to the users over the web browsers.|||']"
1,['JavaScript Example'],"['Javascript example is easy to code. JavaScript provides 3 places to put the JavaScript code: within body tag, within head tag and external JavaScript file.']","['https://www.javatpoint.com/external-javascript-file', 'https://www.javatpoint.com/understanding-html-dom-events', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=example1js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=example2js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=example3js', 'https://www.javatpoint.com/external-javascript-file', 'https://www.javatpoint.com/understanding-html-dom-events', 'https://www.javatpoint.com/external-javascript-file']",[],[],"['3 Places to put JavaScript code', '1) JavaScript Example : code between the body tag', '2) JavaScript Example : code between the head tag']",[],[],"['Let’s create the first JavaScript example.', 'The script tag specifies that we are using JavaScript.', 'The text/javascript is the content type that provides information to the browser about the data.', 'The document.write() function is used to display dynamic content through JavaScript. We will learn about document object in detail later.', 'Let’s see the same example of displaying alert dialog box of JavaScript that is contained inside the head tag.', 'In this example, we are creating a function msg(). To create function in JavaScript, you need to write function with function_name as given below.', 'To call function, you need to work on event. Here we are using onclick event to call msg() function.']","['In the above example, we have displayed the dynamic content using JavaScript. Let’s see the simple example of JavaScript that displays alert dialog box.']",[],"['<script type=""text/javascript"">', 'document.write(""JavaScript is a simple language for javatpoint learners"");', '</script>', '<script type=""text/javascript"">', 'alert(""Hello Javatpoint"");', '</script>', '<script type=""text/javascript"">', 'function msg(){', 'alert(""Hello Javatpoint"");', '</script>', '<p>Welcome to JavaScript</p>', '<input type=""button"" value=""click"" onclick=""msg()""/>']",[],[],['|||Between the body tag of html|||Between the head tag of html|||In .js file (external javaScript)|||']
2,['External JavaScript file'],['We can create external JavaScript file and embed it in many html page. '],"['https://www.javatpoint.com/javascript-comment', 'https://www.javatpoint.com/javascript-example', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/javascript-comment', 'https://www.javatpoint.com/javascript-example', 'https://www.javatpoint.com/javascript-comment']",[],[],[],[],[],"['It provides code re usability because single JavaScript file can be used in several html pages.', ""Let's create an external JavaScript file that prints Hello Javatpoint in a alert dialog box."", 'message.js', ""Let's include the JavaScript file into html page. It calls the JavaScript function on button click."", 'index.html', 'There will be following benefits if a user creates an external javascript:', 'There are the following disadvantages of external files:']",['An external JavaScript file must be saved by .js extension. It is recommended to embed all JavaScript files into a single file. It increases the speed of the webpage.'],[],"['function msg(){', 'alert(""Hello Javatpoint"");', '<script type=""text/javascript"" src=""message.js""></script>', '<p>Welcome to JavaScript</p>', '<input type=""button"" value=""click"" onclick=""msg()""/>']",[],[],"[""|||It helps in the reusability of code in more than one HTML file.|||It allows easy code readability.|||It is time-efficient as web browsers cache the external js files, which further reduces the page loading time.|||It enables both web designers and coders to work with html and js files parallelly and separately, i.e., without facing any code conflictions.|||The length of the code reduces as only we need to specify the location of the js file.||||||The stealer may download the coder's code using the url of the js file.|||If two js files are dependent on one another, then a failure in one file may affect the execution of the other dependent file.|||The web browser needs to make an additional http request to get the js code.|||A tiny to a large change in the js code may cause unexpected results in all its dependent files.|||We need to check each file that depends on the commonly created external javascript file.|||If it is a few lines of code, then better to implement the internal javascript code.|||""]"
3,['JavaScript Comment'],"['The JavaScript comments are meaningful way to deliver message. It is used to add information about the code, warnings or suggestions so that end user can easily interpret the code.\nThe JavaScript comment is ignored by the JavaScript engine i.e. embedded in the browser.\nAdvantages of JavaScript comments\nThere are mainly two advantages of JavaScript comments.\n\nTo make code easy to understand It can be used to elaborate the code so that end user can easily understand the code.\nTo avoid the unnecessary code It can also be used to avoid the code being executed. Sometimes, we add the code to perform some action. But after sometime, there may be need to disable the code. In such case, it is better to use comments.\n\n\nTypes of JavaScript Comments\nThere are two types of comments in JavaScript.\n\nSingle-line Comment\nMulti-line Comment\n\n\n\n\n\nJavaScript Single line Comment\nIt is represented by double forward slashes (//). It can be used before and after the statement.\nLet’s see the example of single-line comment i.e. added before the statement.\n\n<script>\n// It is single line comment\ndocument.write(""hello javascript"");\n</script>\n\nTest it Now\nLet’s see the example of single-line comment i.e. added after the statement.\n\n<script>\nvar a=10;\nvar b=20;\nvar c=a+b;//It adds values of a and b variable\ndocument.write(c);//prints sum of 10 and 20\n</script>\n\nTest it Now\n\nJavaScript Multi line Comment\nIt can be used to add single as well as multi line comments. So, it is more convenient.\nIt is represented by forward slash with asterisk then asterisk with forward slash. For example:\n\n/* your code here  */\n\nIt can be used before, after and middle of the statement.\n\n<script>\n/* It is multi line comment.\nIt will not be displayed */\ndocument.write(""example of javascript multiline comment"");\n</script>\n\nTest it Now\n\nNext TopicJavaScript Variable\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/javascript-variable', 'https://www.javatpoint.com/external-javascript-file', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=comment1js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=comment2js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=comment3js', 'https://www.javatpoint.com/javascript-variable', 'https://www.javatpoint.com/external-javascript-file', 'https://www.javatpoint.com/javascript-variable']",[],[],"['Types of JavaScript Comments', 'JavaScript Single line Comment', 'JavaScript Multi line Comment']",[],['Advantages of JavaScript comments'],"['The JavaScript comment is ignored by the JavaScript engine i.e. embedded in the browser.', 'There are mainly two advantages of JavaScript comments.', 'There are two types of comments in JavaScript.', 'It is represented by double forward slashes (//). It can be used before and after the statement.', 'Let’s see the example of single-line comment i.e. added before the statement.', 'Let’s see the example of single-line comment i.e. added after the statement.', 'It can be used to add single as well as multi line comments. So, it is more convenient.', 'It is represented by forward slash with asterisk then asterisk with forward slash. For example:', 'It can be used before, after and middle of the statement.']",[],"['\nThe JavaScript comment is ignored by the JavaScript engine i.e. embedded in the browser.\nAdvantages of JavaScript comments\nThere are mainly two advantages of JavaScript comments.\n\nTo make code easy to understand It can be used to elaborate the code so that end user can easily understand the code.\nTo avoid the unnecessary code It can also be used to avoid the code being executed. Sometimes, we add the code to perform some action. But after sometime, there may be need to disable the code. In such case, it is better to use comments.\n\n\nTypes of JavaScript Comments\nThere are two types of comments in JavaScript.\n\nSingle-line Comment\nMulti-line Comment\n\n\n\n\n\nJavaScript Single line Comment\nIt is represented by double forward slashes (//). It can be used before and after the statement.\nLet’s see the example of single-line comment i.e. added before the statement.\n\n<script>\n// It is single line comment\ndocument.write(""hello javascript"");\n</script>\n\nTest it Now\nLet’s see the example of single-line comment i.e. added after the statement.\n\n<script>\nvar a=10;\nvar b=20;\nvar c=a+b;//It adds values of a and b variable\ndocument.write(c);//prints sum of 10 and 20\n</script>\n\nTest it Now\n\nJavaScript Multi line Comment\nIt can be used to add single as well as multi line comments. So, it is more convenient.\nIt is represented by forward slash with asterisk then asterisk with forward slash. For example:\n\n/* your code here  */\n\nIt can be used before, after and middle of the statement.\n\n<script>\n/* It is multi line comment.\nIt will not be displayed */\ndocument.write(""example of javascript multiline comment"");\n</script>\n\nTest it Now\n\nNext TopicJavaScript Variable\n\n\n\n← prev\nnext →\n\n\n']","['<script>', 'document.write(""hello javascript"");', '</script>', '<script>', 'var a=10;', 'var b=20;', 'var c=a+b;//It adds values of a and b variable', 'document.write(c);//prints sum of 10 and 20', '</script>', '/* your code here  */', '<script>', '/* It is multi line comment.', 'It will not be displayed */', 'document.write(""example of javascript multiline comment"");', '</script>']",[],[],['|||Single-line Comment|||Multi-line Comment|||']
4,['JavaScript Variable'],"['A JavaScript variable is simply a name of storage location. There are two types of variables in JavaScript : local variable and global variable.\nThere are some rules while declaring a JavaScript variable (also known as identifiers).\n\nName must start with a letter (a to z or A to Z), underscore( _ ), or dollar( $ ) sign.\nAfter first letter we can use digits (0 to 9), for example value1.\nJavaScript variables are case sensitive, for example x and X are different variables.\n\n\nCorrect JavaScript variables\n\nvar x = 10;\nvar _value=""sonoo"";\n\n\nIncorrect JavaScript variables\n\nvar  123=30;\nvar *aa=320;\n\n\nExample of JavaScript variable\nLet’s see a simple example of JavaScript variable.\n\n<script>\nvar x = 10;\nvar y = 20;\nvar z=x+y;\ndocument.write(z);\n</script>\n\nTest it Now\nOutput of the above example\n\n\n\n\n\n\n\n\nJavaScript local variable\nA JavaScript local variable is declared inside block or function. It is accessible within the function or block only. For example:\n\n<script>\nfunction abc(){\nvar x=10;//local variable\n}\n</script>\n\nOr,\n\n<script>\nIf(10<13){\nvar y=20;//JavaScript local variable\n}\n</script>\n\n\n\nJavaScript global variable\nA JavaScript global variable is accessible from any function. A variable i.e. declared outside the function or declared with window object is known as global variable. For example:\n\n<script>\nvar data=200;//gloabal variable\nfunction a(){\ndocument.writeln(data);\n}\nfunction b(){\ndocument.writeln(data);\n}\na();//calling JavaScript function\nb();\n</script>\n\nTest it Now\nTo know more about global variable (e.g. how global variable is executed by JavaScript execution engine), visit next page.\n\nNext TopicJavaScript Global Variable\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/javascript-global-variable', 'https://www.javatpoint.com/javascript-comment', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#local', 'https://www.javatpoint.com/#gloabl', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvariable1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvariable2', 'https://www.javatpoint.com/javascript-global-variable', 'https://www.javatpoint.com/javascript-comment', 'https://www.javatpoint.com/javascript-global-variable']",[],[],"['Example of JavaScript variable', 'JavaScript local variable', 'JavaScript global variable']",[],"['Output of the above example', 'To know more about global variable (e.g. how global variable is executed by JavaScript execution engine), visit next page.']","['There are some rules while declaring a JavaScript variable (also known as identifiers).', 'Let’s see a simple example of JavaScript variable.', 'A JavaScript local variable is declared inside block or function. It is accessible within the function or block only. For example:']",['A JavaScript global variable is accessible from any function. A variable i.e. declared outside the function or declared with window object is known as global variable. For example:'],"['\nThere are some rules while declaring a JavaScript variable (also known as identifiers).\n\nName must start with a letter (a to z or A to Z), underscore( _ ), or dollar( $ ) sign.\nAfter first letter we can use digits (0 to 9), for example value1.\nJavaScript variables are case sensitive, for example x and X are different variables.\n\n\nCorrect JavaScript variables\n\nvar x = 10;\nvar _value=""sonoo"";\n\n\nIncorrect JavaScript variables\n\nvar  123=30;\nvar *aa=320;\n\n\nExample of JavaScript variable\nLet’s see a simple example of JavaScript variable.\n\n<script>\nvar x = 10;\nvar y = 20;\nvar z=x+y;\ndocument.write(z);\n</script>\n\nTest it Now\nOutput of the above example\n\n\n\n\n\n\n\n\nJavaScript local variable\nA JavaScript local variable is declared inside block or function. It is accessible within the function or block only. For example:\n\n<script>\nfunction abc(){\nvar x=10;//local variable\n}\n</script>\n\nOr,\n\n<script>\nIf(10<13){\nvar y=20;//JavaScript local variable\n}\n</script>\n\n\n\nJavaScript global variable\nA JavaScript global variable is accessible from any function. A variable i.e. declared outside the function or declared with window object is known as global variable. For example:\n\n<script>\nvar data=200;//gloabal variable\nfunction a(){\ndocument.writeln(data);\n}\nfunction b(){\ndocument.writeln(data);\n}\na();//calling JavaScript function\nb();\n</script>\n\nTest it Now\nTo know more about global variable (e.g. how global variable is executed by JavaScript execution engine), visit next page.\n\nNext TopicJavaScript Global Variable\n\n\n\n← prev\nnext →\n\n\n']","['var x = 10;', 'var _value=""sonoo"";', 'var  123=30;', 'var *aa=320;', '<script>', 'var x = 10;', 'var y = 20;', 'var z=x+y;', 'document.write(z);', '</script>', '<script>', 'function abc(){', 'var x=10;//local variable', '</script>', '<script>', 'If(10<13){', 'var y=20;//JavaScript local variable', '</script>', '<script>', 'var data=200;//gloabal variable', 'function a(){', 'document.writeln(data);', 'function b(){', 'document.writeln(data);', 'a();//calling JavaScript function', '</script>']",[],[],[]
5,['JavaScript Global Variable'],"['A JavaScript global variable is declared outside the function or declared with window object. It can be accessed from any function.\nLet’s see the simple example of global variable in JavaScript.\n\n<script>\nvar value=50;//global variable\nfunction a(){\nalert(value);\n}\nfunction b(){\nalert(value);\n}\n</script>\n\nTest it Now\nDeclaring JavaScript global variable within function\nTo declare JavaScript global variables inside function, you need to use window object. For example:\n\nwindow.value=90;\n\nNow it can be declared inside any function and can be accessed from any function. For example:\n\nfunction m(){\nwindow.value=100;//declaring global variable by window object\n}\nfunction n(){\nalert(window.value);//accessing global variable from other function\n}\n\nTest it Now\n\n\n\n\nInternals of global variable in JavaScript\nWhen you declare a variable outside the function, it is added in the window object internally. You can access it through window object also. For example:\n\nvar value=50;\nfunction a(){\nalert(window.value);//accessing global variable \n}\n\n\nNext TopicJavaScript Data Types\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/javascript-data-types', 'https://www.javatpoint.com/javascript-variable', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsglobalvariable1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsglobalvariable2', 'https://www.javatpoint.com/javascript-data-types', 'https://www.javatpoint.com/javascript-variable', 'https://www.javatpoint.com/javascript-data-types']",[],[],['Internals of global variable in JavaScript'],[],['Declaring JavaScript global variable within function'],"['Let’s see the simple example of global variable in JavaScript.', 'To declare JavaScript global variables inside function, you need to use window object. For example:', 'Now it can be declared inside any function and can be accessed from any function. For example:']","['When you declare a variable outside the function, it is added in the window object internally. You can access it through window object also. For example:']","['\nLet’s see the simple example of global variable in JavaScript.\n\n<script>\nvar value=50;//global variable\nfunction a(){\nalert(value);\n}\nfunction b(){\nalert(value);\n}\n</script>\n\nTest it Now\nDeclaring JavaScript global variable within function\nTo declare JavaScript global variables inside function, you need to use window object. For example:\n\nwindow.value=90;\n\nNow it can be declared inside any function and can be accessed from any function. For example:\n\nfunction m(){\nwindow.value=100;//declaring global variable by window object\n}\nfunction n(){\nalert(window.value);//accessing global variable from other function\n}\n\nTest it Now\n\n\n\n\nInternals of global variable in JavaScript\nWhen you declare a variable outside the function, it is added in the window object internally. You can access it through window object also. For example:\n\nvar value=50;\nfunction a(){\nalert(window.value);//accessing global variable \n}\n\n\nNext TopicJavaScript Data Types\n\n\n\n← prev\nnext →\n\n\n']","['<script>', 'var value=50;//global variable', 'function a(){', 'alert(value);', 'function b(){', 'alert(value);', '</script>', 'window.value=90;', 'function m(){', 'window.value=100;//declaring global variable by window object', 'function n(){', 'alert(window.value);//accessing global variable from other function', 'var value=50;', 'function a(){', 'alert(window.value);//accessing global variable']",[],[],[]
6,['Javascript Data Types'],['JavaScript provides different data types to hold different types of values. There are two types of data types in JavaScript.'],"['https://www.javatpoint.com/javascript-operators', 'https://www.javatpoint.com/javascript-global-variable', 'https://www.javatpoint.com/javascript-operators', 'https://www.javatpoint.com/javascript-global-variable', 'https://www.javatpoint.com/javascript-operators']",[],[],"['JavaScript primitive data types', 'JavaScript non-primitive data types']",[],[],"['There are five types of primitive data types in JavaScript. They are as follows:', 'The non-primitive data types are as follows:', 'We will have great discussion on each data type later.']",[],"[""JavaScript is a dynamic type language, means you don't need to specify type of the variable because it is dynamically used by JavaScript engine. You need to use var here to specify the data type. It can hold any type of values such as numbers, strings etc. For example:""]","['var a=40;//holding number', 'var b=""Rahul"";//holding string']",[],"['ata TypeDescriptio&&&tringrepresents sequence of characters e.g. ""hello&&&umberrepresents numeric values e.g. 10&&&ooleanrepresents boolean value either false or tru&&&ndefinedrepresents undefined valu&&&ullrepresents null i.e. no value at al', 'ata TypeDescriptio&&&bjectrepresents instance through which we can access member&&&rrayrepresents group of similar value&&&egExprepresents regular expressio']",[]
7,['JavaScript Operators'],['JavaScript operators are symbols that are used to perform operations on operands. For example:'],"['https://www.javatpoint.com/javascript-if', 'https://www.javatpoint.com/javascript-data-types', 'https://www.javatpoint.com/javascript-if', 'https://www.javatpoint.com/javascript-data-types', 'https://www.javatpoint.com/javascript-if']",[],[],"['JavaScript Arithmetic Operators', 'JavaScript Comparison Operators', 'JavaScript Bitwise Operators', 'JavaScript Logical Operators', 'JavaScript Assignment Operators', 'JavaScript Special Operators']",[],[],"['Here, + is the arithmetic operator and = is the assignment operator.', 'There are following types of operators in JavaScript.', 'Arithmetic operators are used to perform arithmetic operations on the operands. The following operators are known as JavaScript arithmetic operators.', 'The JavaScript comparison operator compares the two operands. The comparison operators are as follows:', 'The bitwise operators perform bitwise operations on operands. The bitwise operators are as follows:', 'The following operators are known as JavaScript logical operators.', 'The following operators are known as JavaScript assignment operators.', 'The following operators are known as JavaScript special operators.']",[],[],['var sum=10+20;'],[],"['peratorDescriptionExampl&&&Addition10+20 = 3&&&Subtraction20-10 = 1&&&Multiplication10*20 = 20&&&Division 20/10 = &&&Modulus (Remainder)20%10 = &&&+Incrementvar a=10; a++; Now a = 1&&&-Decrementvar a=10; a--; Now a = ', 'peratorDescriptionExampl&&&=Is equal to10==20 = fals&&&==Identical (equal and of same type)10==20 = fals&&&=Not equal to10!=20 = tru&&&==Not Identical 20!==20 = fals&&&Greater than20>10 = tru&&&=Greater than or equal to20>=10 = tru&&&Less than20<10 = fals&&&=Less than or equal to20<=10 = fals', 'peratorDescriptionExampl&&&Bitwise AND(10==20 & 20==33) = fals&&&Bitwise OR(10==20 | 20==33) = fals&&&Bitwise XOR(10==20 ^ 20==33) = fals&&&Bitwise NOT (~10) = -1&&&<Bitwise Left Shift(10<<2) = 4&&&>Bitwise Right Shift(10>>2) = &&&>>Bitwise Right Shift with Zero(10>>>2) = ', 'peratorDescriptionExampl&&&&Logical AND(10==20 && 20==33) = fals&&&|Logical OR(10==20 || 20==33) = fals&&&Logical Not!(10==20) = tru', 'peratorDescriptionExampl&&&Assign10+10 = 2&&&=Add and assignvar a=10; a+=20; Now a = 3&&&=Subtract and assignvar a=20; a-=10; Now a = 1&&&=Multiply and assignvar a=10; a*=20; Now a = 20&&&=Divide and assignvar a=10; a/=2; Now a = &&&=Modulus and assignvar a=10; a%=2; Now a = ', ""peratorDescriptio&&&?:)Conditional Operator returns value based on the condition. It is like if-else&&&Comma Operator allows multiple expressions to be evaluated as single statement&&&eleteDelete Operator deletes a property from the object&&&nIn Operator checks if object has the given propert&&&nstanceofchecks if the object is an instance of given typ&&&ewcreates an instance (object&&&ypeofchecks the type of object&&&oidit discards the expression's return value&&&ieldchecks what is returned in a generator by the generator's iterator""]",[]
8,['JavaScript If-else'],['The JavaScript if-else statement is used to execute the code whether condition is true or false. There are three forms of if statement in JavaScript.'],"['https://www.javatpoint.com/javascript-switch', 'https://www.javatpoint.com/javascript-operators', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsif1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsif2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsif3', 'https://www.javatpoint.com/javascript-switch', 'https://www.javatpoint.com/javascript-operators', 'https://www.javatpoint.com/javascript-switch']","['images/core/if1.png', 'images/core/if2.png']",[],[],"['JavaScript If statement', 'Flowchart of JavaScript If statement', 'JavaScript If...else Statement', 'Flowchart of JavaScript If...else statement', 'JavaScript If...else if statement']","['Output of the above example', 'Output of the above example', 'Output of the above example']","['It evaluates the content only if expression is true. The signature of JavaScript if statement is given below.', 'Let’s see the simple example of if statement in javascript.', 'It evaluates the content whether condition is true of false. The syntax of JavaScript if-else statement is given below.', 'Let’s see the example of if-else statement in JavaScript to find out the even or odd number.', 'It evaluates the content only if expression is true from several expressions. The signature of JavaScript if else if statement is given below.', 'Let’s see the simple example of if else if statement in javascript.']",[],[],"['if(expression){', '<script>', 'var a=20;', 'if(a>10){', 'document.write(""value of a is greater than 10"");', '</script>', 'if(expression){', '<script>', 'var a=20;', 'if(a%2==0){', 'document.write(""a is even number"");', 'document.write(""a is odd number"");', '</script>', 'if(expression1){', 'else if(expression2){', 'else if(expression3){', '<script>', 'var a=20;', 'if(a==10){', 'document.write(""a is equal to 10"");', 'else if(a==15){', 'document.write(""a is equal to 15"");', 'else if(a==20){', 'document.write(""a is equal to 20"");', 'document.write(""a is not equal to 10, 15 or 20"");', '</script>']",[],[],[]
9,['JavaScript Switch'],"['The JavaScript switch statement is used to execute one code from multiple expressions. It is just like else if statement that we have learned in previous page. But it is convenient than if..else..if because it can be used with numbers, characters etc.']","['https://www.javatpoint.com/javascript-loop', 'https://www.javatpoint.com/javascript-if', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsswitch', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsswitch2', 'https://www.javatpoint.com/javascript-loop', 'https://www.javatpoint.com/javascript-if', 'https://www.javatpoint.com/javascript-loop']",[],[],[],[],"['Output of the above example', ""The switch statement is fall-through i.e. all the cases will be evaluated if you don't use break statement."", 'Output of the above example']","['The signature of JavaScript switch statement is given below.', 'Let’s see the simple example of switch statement in javascript.', 'Let’s understand the behaviour of switch statement in JavaScript.']",[],[],"['switch(expression){', 'case value1:', 'code to be executed;', 'case value2:', 'code to be executed;', 'default:', 'code to be executed if above values are not matched;', '<script>', ""var grade='B';"", 'var result;', 'switch(grade){', ""case 'A':"", 'result=""A Grade"";', ""case 'B':"", 'result=""B Grade"";', ""case 'C':"", 'result=""C Grade"";', 'default:', 'result=""No Grade"";', 'document.write(result);', '</script>', '<script>', ""var grade='B';"", 'var result;', 'switch(grade){', ""case 'A':"", 'result+="" A Grade"";', ""case 'B':"", 'result+="" B Grade"";', ""case 'C':"", 'result+="" C Grade"";', 'default:', 'result+="" No Grade"";', 'document.write(result);', '</script>']",[],[],[]
10,['JavaScript Loops'],"['The JavaScript loops are used to iterate the piece of code using for, while, do while or for-in loops. It makes the code compact. It is mostly used in array.']","['https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/javascript-switch', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsloop1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsloop2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsloop3', 'https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/javascript-switch', 'https://www.javatpoint.com/javascript-function']",[],[],"['1) JavaScript For loop', '2) JavaScript while loop', '3) JavaScript do while loop', '4) JavaScript for in loop']",[],[],"['There are four types of loops in JavaScript.', 'Let’s see the simple example of for loop in javascript.', 'Let’s see the simple example of while loop in javascript.', 'Let’s see the simple example of do while loop in javascript.', 'The JavaScript for in loop is used to iterate the properties of an object. We will discuss about it later.']","['The JavaScript for loop iterates the elements for the fixed number of times. It should be used if number of iteration is known. The syntax of for loop is given below.', 'The JavaScript while loop iterates the elements for the infinite number of times. It should be used if number of iteration is not known. The syntax of while loop is given below.', 'The JavaScript do while loop iterates the elements for the infinite number of times like while loop. But, code is executed at least once whether condition is true or false. The syntax of do while loop is given below.']",[],"['for (initialization; condition; increment)', 'code to be executed', '<script>', 'for (i=1; i<=5; i++)', 'document.write(i + """")', '</script>', 'while (condition)', 'code to be executed', '<script>', 'var i=11;', 'while (i<=15)', 'document.write(i + """");', '</script>', 'code to be executed', '}while (condition);', '<script>', 'var i=21;', 'document.write(i + """");', '}while (i<=25);', '</script>']",[],[],['|||for loop|||while loop|||do-while loop|||for-in loop|||']
11,['JavaScript Functions'],['JavaScript functions are used to perform operations. We can call JavaScript function many times to reuse the code.'],"['https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/javascript-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=function1js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=function2js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=function3js', 'https://www.javatpoint.com/javascript-function-apply-method', 'https://www.javatpoint.com/javascript-function-bind-method', 'https://www.javatpoint.com/javascript-function-call-method', 'https://www.javatpoint.com/javascript-function-tostring-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptFunctionObjectExample1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptFunctionObjectExample2', 'https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/javascript-loop', 'https://www.javatpoint.com/javascript-objects']",[],[],"['JavaScript Function Syntax', 'JavaScript Function Example', 'JavaScript Function Arguments', 'Function with Return Value', 'JavaScript Function Object', 'Syntax', 'Parameter', 'JavaScript Function Methods', 'JavaScript Function Object Examples']","['Example 1', 'Example 2']","['Advantage of JavaScript function', 'Output of the above example', 'Output of the above example', 'Output of the above example']","['There are mainly two advantages of JavaScript functions.', 'The syntax of declaring function is given below.', 'JavaScript Functions can have 0 or more arguments.', 'Let’s see the simple example of function in JavaScript that does not has arguments.', 'We can call function by passing arguments. Let’s see the example of function that has one argument.', 'We can call function that returns a value and use it in our program. Let’s see the example of function that returns value.', 'arg1, arg2, .... , argn - It represents the argument used by function.', 'functionBody - It represents the function definition.', ""Let's see function methods with description."", ""Let's see an example to display the sum of given numbers."", ""Let's see an example to display the power of provided value.""]","['In JavaScript, the purpose of Function constructor is to create a new Function object. It executes the code globally. However, if we call the constructor directly, a function is created dynamically but in an unsecured way.']",[],"['function functionName([arg1, arg2, ...argN]){', '<script>', 'function msg(){', 'alert(""hello! this is message"");', '</script>', '<script>', 'function getcube(number){', 'alert(number*number*number);', '</script>', '<script>', 'function getInfo(){', 'return ""hello javatpoint! How r u?"";', '</script>', '<script>', 'document.write(getInfo());', '</script>', 'new Function ([arg1[, arg2[, ....argn]],] functionBody)', '<script>', 'var add=new Function(""num1"",""num2"",""return num1+num2"");', 'document.writeln(add(2,5));', '</script>', '<script>', 'var pow=new Function(""num1"",""num2"",""return Math.pow(num1,num2)"");', 'document.writeln(pow(2,3));', '</script>']","['7', '8']",['Method|||Description&&&apply()|||It is used to call a function contains this value and a single array of arguments.&&&bind()|||It is used to create a new function.&&&call()|||It is used to call a function contains this value and an argument list.&&&toString()|||It returns the result in a form of a string.'],[]
12,['JavaScript Objects'],"['A javaScript object is an entity having state and behavior (properties and method). For example: car, pen, bike, chair, glass, keyboard, monitor etc.']","['https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=object1js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=object2js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=object3js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=object4js', 'https://www.javatpoint.com/javascript-object-assign-method', 'https://www.javatpoint.com/javascript-object-create-method', 'https://www.javatpoint.com/javascript-object-defineproperty-method', 'https://www.javatpoint.com/javascript-object-defineproperties-method', 'https://www.javatpoint.com/javascript-object-entries-method', 'https://www.javatpoint.com/javascript-object-freeze-method', 'https://www.javatpoint.com/javascript-object-getownpropertydescriptor-method', 'https://www.javatpoint.com/javascript-object-getownpropertydescriptors-method', 'https://www.javatpoint.com/javascript-object-getownpropertynames-method', 'https://www.javatpoint.com/javascript-object-getownpropertysymbols-method', 'https://www.javatpoint.com/javascript-object-getprototypeof-method', 'https://www.javatpoint.com/javascript-object-is-method', 'https://www.javatpoint.com/', 'https://www.javatpoint.com/', 'https://www.javatpoint.com/', 'https://www.javatpoint.com/', 'https://www.javatpoint.com/javascript-object-preventextensions-method', 'https://www.javatpoint.com/javascript-object-seal-method', 'https://www.javatpoint.com/javascript-object-setprototypeof-method', 'https://www.javatpoint.com/javascript-object-values-method', 'https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/javascript-array']",[],[],"['Creating Objects in JavaScript', '1) JavaScript Object by object literal', '2) By creating instance of Object', '3) By using an Object constructor', 'Defining method in JavaScript Object', 'JavaScript Object Methods']",[],"['Output of the above example', 'Output of the above example', 'Output of the above example', 'Output of the above example']","['JavaScript is an object-based language. Everything is an object in JavaScript.', ""JavaScript is template based not class based. Here, we don't create class to get the object. But, we direct create objects."", 'There are 3 ways to create objects.', 'The syntax of creating object using object literal is given below:', 'As you can see, property and value is separated by : (colon).', 'Let’s see the simple example of creating object in JavaScript.', 'The syntax of creating object directly is given below:', 'Here, new keyword is used to create object.', 'Let’s see the example of creating object directly.', 'Here, you need to create function with arguments. Each argument value can be assigned in the current object by using this keyword.', 'The this keyword refers to the current object.', 'The example of creating object by object constructor is given below.', 'We can define method in JavaScript object. But before defining method, we need to add property in the function with same name as method.', 'The example of defining method in object is given below.', 'The various methods of Object are as follows: ']",[],"['Let’s see the simple example of creating object in JavaScript.\n\n<script>\nemp={id:102,name:""Shyam Kumar"",salary:40000}\ndocument.write(emp.id+"" ""+emp.name+"" ""+emp.salary);\n</script>\n\nTest it Now\nOutput of the above example\n\n\n\n\n\n\n\n2) By creating instance of Object\nThe syntax of creating object directly is given below:\n\nvar objectname=new Object();\n\nHere, new keyword is used to create object.\nLet’s see the example of creating object directly.\n\n<script>\nvar emp=new Object();\nemp.id=101;\nemp.name=""Ravi Malik"";\nemp.salary=50000;\ndocument.write(emp.id+"" ""+emp.name+"" ""+emp.salary);\n</script>\n\nTest it Now\nOutput of the above example\n\n\n\n\n3) By using an Object constructor\nHere, you need to create function with arguments. Each argument value can be assigned in the current object by using this keyword.\nThe this keyword refers to the current object.\nThe example of creating object by object constructor is given below.\n\n<script>\nfunction emp(id,name,salary){\nthis.id=id;\nthis.name=name;\nthis.salary=salary;\n}\ne=new emp(103,""Vimal Jaiswal"",30000);\n\ndocument.write(e.id+"" ""+e.name+"" ""+e.salary);\n</script>\n\nTest it Now\nOutput of the above example\n\n\n\n\nDefining method in JavaScript Object\nWe can define method in JavaScript object. But before defining method, we need to add property in the function with same name as method.\nThe example of defining method in object is given below.\n\n<script>\nfunction emp(id,name,salary){\nthis.id=id;\nthis.name=name;\nthis.salary=salary;\n\nthis.changeSalary=changeSalary;\nfunction changeSalary(otherSalary){\nthis.salary=otherSalary;\n}\n}\ne=new emp(103,""Sonoo Jaiswal"",30000);\ndocument.write(e.id+"" ""+e.name+"" ""+e.salary);\ne.changeSalary(45000);\ndocument.write(""""+e.id+"" ""+e.name+"" ""+e.salary);\n</script>\n\nTest it Now\nOutput of the above example\n\n\n\nJavaScript Object Methods\nThe various methods of Object are as follows: \n\n\nS.No\nMethods\nDescription\n\n\n1\nObject.assign()\nThis method is used to copy enumerable and own properties from a source object to a target object\n\n\n2\nObject.create()\nThis method is used to create a new object with the specified prototype object and properties.\n\n\n3\nObject.defineProperty()\nThis method is used to describe some behavioral attributes of the property.\n\n\n4\nObject.defineProperties()\nThis method is used to create or configure multiple object properties.\n\n\n5\nObject.entries()\nThis method returns an array with arrays of the key, value pairs.\n\n\n6\nObject.freeze()\nThis method prevents existing properties from being removed.\n\n\n7\nObject.getOwnPropertyDescriptor()\nThis method returns a property descriptor for the specified property of the specified object.\n\n\n8\nObject.getOwnPropertyDescriptors()\nThis method returns all own property descriptors of a given object.\n\n\n9\nObject.getOwnPropertyNames()\n This method returns an array of all properties (enumerable or not) found.\n\n\n10\nObject.getOwnPropertySymbols()\nThis method returns an array of all own symbol key properties.\n\n\n11\nObject.getPrototypeOf()\nThis method returns the prototype of the specified object.\n\n\n12\nObject.is()\nThis method determines whether two values are the same value.\n\n\n13\nObject.isExtensible()\nThis method determines if an object is extensible\n\n\n14\nObject.isFrozen()\nThis method determines if an object was frozen.\n\n\n15\nObject.isSealed()\nThis method determines if an object is sealed.\n\n\n16\nObject.keys()\nThis method returns an array of a given object\'s own property names.\n\n\n17\nObject.preventExtensions()\nThis method is used to prevent any extensions of an object.\n\n\n18\nObject.seal()\nThis method prevents new properties from being added and marks all existing properties as non-configurable.\n\n\n19\nObject.setPrototypeOf()\nThis method sets the prototype of a specified object to another object.\n\n\n20\nObject.values()\nThis method returns an array of values.\n\n\n\nNext TopicJavascript Array\n\n\n\n← prev\nnext →\n\n\n']","['object={property1:value1,property2:value2.....propertyN:valueN}', '<script>', 'emp={id:102,name:""Shyam Kumar"",salary:40000}', 'document.write(emp.id+"" ""+emp.name+"" ""+emp.salary);', '</script>', 'var objectname=new Object();', '<script>', 'var emp=new Object();', 'emp.id=101;', 'emp.name=""Ravi Malik"";', 'emp.salary=50000;', 'document.write(emp.id+"" ""+emp.name+"" ""+emp.salary);', '</script>', '<script>', 'function emp(id,name,salary){', 'this.id=id;', 'this.name=name;', 'this.salary=salary;', 'e=new emp(103,""Vimal Jaiswal"",30000);', 'document.write(e.id+"" ""+e.name+"" ""+e.salary);', '</script>', '<script>', 'function emp(id,name,salary){', 'this.id=id;', 'this.name=name;', 'this.salary=salary;', 'this.changeSalary=changeSalary;', 'function changeSalary(otherSalary){', 'this.salary=otherSalary;', 'e=new emp(103,""Sonoo Jaiswal"",30000);', 'document.write(e.id+"" ""+e.name+"" ""+e.salary);', 'e.changeSalary(45000);', 'document.write(""""+e.id+"" ""+e.name+"" ""+e.salary);', '</script>']",[],"[""S.No|||Methods|||Description&&&1|||Object.assign()|||This method is used to copy enumerable and own properties from a source object to a target object&&&2|||Object.create()|||This method is used to create a new object with the specified prototype object and properties.&&&3|||Object.defineProperty()|||This method is used to describe some behavioral attributes of the property.&&&4|||Object.defineProperties()|||This method is used to create or configure multiple object properties.&&&5|||Object.entries()|||This method returns an array with arrays of the key, value pairs.&&&6|||Object.freeze()|||This method prevents existing properties from being removed.&&&7|||Object.getOwnPropertyDescriptor()|||This method returns a property descriptor for the specified property of the specified object.&&&8|||Object.getOwnPropertyDescriptors()|||This method returns all own property descriptors of a given object.&&&9|||Object.getOwnPropertyNames()||| This method returns an array of all properties (enumerable or not) found.&&&10|||Object.getOwnPropertySymbols()|||This method returns an array of all own symbol key properties.&&&11|||Object.getPrototypeOf()|||This method returns the prototype of the specified object.&&&12|||Object.is()|||This method determines whether two values are the same value.&&&13|||Object.isExtensible()|||This method determines if an object is extensible&&&14|||Object.isFrozen()|||This method determines if an object was frozen.&&&15|||Object.isSealed()|||This method determines if an object is sealed.&&&16|||Object.keys()|||This method returns an array of a given object's own property names.&&&17|||Object.preventExtensions()|||This method is used to prevent any extensions of an object.&&&18|||Object.seal()|||This method prevents new properties from being added and marks all existing properties as non-configurable.&&&19|||Object.setPrototypeOf()|||This method sets the prototype of a specified object to another object.&&&20|||Object.values()|||This method returns an array of values.""]",[]
13,['JavaScript Array'],['JavaScript array is an object that represents a collection of similar type of elements.'],"['https://www.javatpoint.com/javascript-string', 'https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=array1js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=array2js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=array3js', 'https://www.javatpoint.com/javascript-array-concat-method', 'https://www.javatpoint.com/javascript-array-copywithin-method', 'https://www.javatpoint.com/javascript-array-entries-method', 'https://www.javatpoint.com/javascript-array-every-method', 'https://www.javatpoint.com/javascript-array-flat-method', 'https://www.javatpoint.com/javascript-array-flatmap-method', 'https://www.javatpoint.com/javascript-array-fill-method', 'https://www.javatpoint.com/javascript-array-from-method', 'https://www.javatpoint.com/javascript-array-filter-method', 'https://www.javatpoint.com/javascript-array-find-method', 'https://www.javatpoint.com/javascript-array-findindex-method', 'https://www.javatpoint.com/javascript-array-foreach-method', 'https://www.javatpoint.com/javascript-array-includes-method', 'https://www.javatpoint.com/javascript-array-indexof-method', 'https://www.javatpoint.com/javascript-array-isarray-method', 'https://www.javatpoint.com/javascript-array-join-method', 'https://www.javatpoint.com/javascript-array-keys-method', 'https://www.javatpoint.com/javascript-array-lastindexof-method', 'https://www.javatpoint.com/javascript-array-map-method', 'https://www.javatpoint.com/javascript-array-of-method', 'https://www.javatpoint.com/javascript-array-pop-method', 'https://www.javatpoint.com/javascript-array-push-method', 'https://www.javatpoint.com/javascript-array-reverse-method', 'https://www.javatpoint.com/javascript-array-reduce-method', 'https://www.javatpoint.com/javascript-array-reduceright-method', 'https://www.javatpoint.com/javascript-array-some-method', 'https://www.javatpoint.com/javascript-array-shift-method', 'https://www.javatpoint.com/javascript-array-slice-method', 'https://www.javatpoint.com/javascript-array-sort-method', 'https://www.javatpoint.com/javascript-array-splice-method', 'https://www.javatpoint.com/javascript-array-tolocalestring-method', 'https://www.javatpoint.com/javascript-array-tostring-method', 'https://www.javatpoint.com/javascript-array-unshift-method', 'https://www.javatpoint.com/javascript-array-values-method', 'https://www.javatpoint.com/javascript-string', 'https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/javascript-string']",[],[],"['1) JavaScript array literal', '2) JavaScript Array directly (new keyword)', '3) JavaScript array constructor (new keyword)', 'JavaScript Array Methods']",[],[],"['There are 3 ways to construct array in JavaScript', 'The syntax of creating array using array literal is given below:', 'As you can see, values are contained inside [ ] and separated by , (comma).', ""Let's see the simple example of creating and using array in JavaScript."", 'The .length property returns the length of an array.', 'Output of the above example', 'The syntax of creating array directly is given below:', 'Here, new keyword is used to create instance of array.', ""Let's see the example of creating array directly."", 'Output of the above example', ""Here, you need to create instance of array by passing arguments in constructor so that we don't have to provide value explicitly."", 'The example of creating object by array constructor is given below.', 'Output of the above example', ""Let's see the list of JavaScript array methods with their description.""]",[],[],"['var arrayname=[value1,value2.....valueN];', '<script>', 'var emp=[""Sonoo"",""Vimal"",""Ratan""];', 'for (i=0;i<emp.length;i++){', 'document.write(emp[i] + ""<br/>"");', '</script>', 'var arrayname=new Array();', '<script>', 'var emp = new Array();', 'emp[0] = ""Arun"";', 'emp[1] = ""Varun"";', 'emp[2] = ""John"";', 'for (i=0;i<emp.length;i++){', 'document.write(emp[i] + ""<br>"");', '</script>', '<script>', 'var emp=new Array(""Jai"",""Vijay"",""Smith"");', 'for (i=0;i<emp.length;i++){', 'document.write(emp[i] + ""<br>"");', '</script>']",[],"['Methods|||Description&&&concat()|||It returns a new array object that contains two or more merged arrays.&&&copywithin()|||It copies the part of the given array with its own elements and returns the modified array.&&&entries()|||It creates an iterator object and a loop that iterates over each key/value pair.&&&every()|||It determines whether all the elements of an array are satisfying the provided function conditions.&&&flat()|||It creates a new array carrying sub-array elements concatenated recursively till the specified depth.&&&flatMap()|||It maps all array elements via mapping function, then flattens the result into a new array.&&&fill()|||It fills elements into an array with static values.&&&from()|||It creates a new array carrying the exact copy of another array element.&&&filter()|||It returns the new array containing the elements that pass the provided function conditions.&&&find()|||It returns the value of the first element in the given array that satisfies the specified condition.&&&findIndex()|||It returns the index value of the first element in the given array that satisfies the specified condition.&&&forEach()|||It invokes the provided function once for each element of an array.&&&includes()|||It checks whether the given array contains the specified element.&&&indexOf()|||It searches the specified element in the given array and returns the index of the first match.&&&isArray()|||It tests if the passed value ia an array.&&&join()|||It joins the elements of an array as a string.&&&keys()|||It creates an iterator object that contains only the keys of the array, then loops through these keys.&&&lastIndexOf()|||It searches the specified element in the given array and returns the index of the last match.&&&map()|||It calls the specified function for every array element and returns the new array&&&of()|||It creates a new array from a variable number of arguments, holding any type of argument.&&&pop()|||It removes and returns the last element of an array.&&&push()|||It adds one or more elements to the end of an array. &&&reverse()|||It reverses the elements of given array.&&&reduce(function, initial)|||It executes a provided function for each value from left to right and reduces the array to a single value. &&&reduceRight()|||It executes a provided function for each value from right to left and reduces the array to a single value.&&&some()|||It determines if any element of the array passes the test of the implemented function.&&&shift()|||It removes and returns the first element of an array.&&&slice()|||It returns a new array containing the copy of the part of the given array.&&&sort()|||It returns the element of the given array in a sorted order.&&&splice()|||It add/remove elements to/from the given array.&&&toLocaleString()|||It returns a string containing all the elements of a specified array.&&&toString()|||It converts the elements of a specified array into string form, without affecting the original array.&&&unshift()|||It adds one or more elements in the beginning of the given array.&&&values()|||It creates a new iterator object carrying values for each index in the array.']",['|||By array literal|||By creating instance of Array directly (using new keyword)|||By using an Array constructor (using new keyword)|||']
14,['JavaScript String'],['The JavaScript string is an object that represents a sequence of characters.'],"['https://www.javatpoint.com/javascript-date', 'https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsstring1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsstring2', 'https://www.javatpoint.com/javascript-string-charat-method', 'https://www.javatpoint.com/javascript-string-charcodeat-method', 'https://www.javatpoint.com/javascript-string-concat-method', 'https://www.javatpoint.com/javascript-string-indexof-method', 'https://www.javatpoint.com/javascript-string-lastindexof-method', 'https://www.javatpoint.com/javascript-string-search-method', 'https://www.javatpoint.com/javascript-string-match-method', 'https://www.javatpoint.com/javascript-string-replace-method', 'https://www.javatpoint.com/javascript-string-substr-method', 'https://www.javatpoint.com/javascript-string-substring-method', 'https://www.javatpoint.com/javascript-string-slice-method', 'https://www.javatpoint.com/javascript-string-tolowercase-method', 'https://www.javatpoint.com/javascript-string-tolocalelowercase-method', 'https://www.javatpoint.com/javascript-string-touppercase-method', 'https://www.javatpoint.com/javascript-string-tolocaleuppercase-method', 'https://www.javatpoint.com/javascript-string-tostring-method', 'https://www.javatpoint.com/javascript-string-valueof-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsstringmethod1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsstringmethod2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsstringmethod3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsstringmethod4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsstringmethod5', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsstringmethod6', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsstringmethod7', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsstringmethod8', 'https://www.javatpoint.com/javascript-date', 'https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/javascript-date']",[],[],['JavaScript String Methods'],['9) JavaScript String split() Method'],[],"['There are 2 ways to create string in JavaScript', 'The string literal is created using double quotes. The syntax of creating string using string literal is given below:', ""Let's see the simple example of creating string literal."", 'The syntax of creating string object using new keyword is given below:', 'Here, new keyword is used to create instance of string.', ""Let's see the example of creating string in JavaScript by new keyword."", ""Let's see the list of JavaScript string methods with examples."", 'The JavaScript String charAt() method returns the character at the given index.', 'The JavaScript String concat(str) method concatenates or joins two strings.', 'The JavaScript String indexOf(str) method returns the index position of the given string.', 'The JavaScript String lastIndexOf(str) method returns the last index position of the given string.', 'The JavaScript String toLowerCase() method returns the given string in lowercase letters.', 'The JavaScript String toUpperCase() method returns the given string in uppercase letters.', 'The JavaScript String trim() method removes leading and trailing whitespaces from the string.']","['The JavaScript String slice(beginIndex, endIndex) method returns the parts of string from given beginIndex to endIndex. In slice() method, beginIndex is inclusive and endIndex is exclusive.']",[],"['var stringname=""string value"";', '<script>', 'var str=""This is string literal"";', 'document.write(str);', '</script>', 'var stringname=new String(""string literal"");', '<script>', 'var stringname=new String(""hello javascript string"");', 'document.write(stringname);', '</script>', '<script>', 'var str=""javascript"";', 'document.write(str.charAt(2));', '</script>', '<script>', 'var s1=""javascript "";', 'var s2=""concat example"";', 'var s3=s1.concat(s2);', 'document.write(s3);', '</script>', '<script>', 'var s1=""javascript from javatpoint indexof"";', 'var n=s1.indexOf(""from"");', 'document.write(n);', '</script>', '<script>', 'var s1=""javascript from javatpoint indexof"";', 'var n=s1.lastIndexOf(""java"");', 'document.write(n);', '</script>', '<script>', 'var s1=""JavaScript toLowerCase Example"";', 'var s2=s1.toLowerCase();', 'document.write(s2);', '</script>', '<script>', 'var s1=""JavaScript toUpperCase Example"";', 'var s2=s1.toUpperCase();', 'document.write(s2);', '</script>', '<script>', 'var s1=""abcdefgh"";', 'var s2=s1.slice(2,5);', 'document.write(s2);', '</script>', '<script>', 'var s1=""     javascript trim    "";', 'var s2=s1.trim();', 'document.write(s2);', '</script>', '<script>', 'var str=""This is JavaTpoint website"";', 'document.write(str.split("" "")); //splits the given string.', '</script>']","['This is string literal', 'hello javascript string', 'v', 'javascript concat example', '11', '16', 'javascript tolowercase example', 'JAVASCRIPT TOUPPERCASE EXAMPLE', '<script>\nvar s1=""abcdefgh"";\nvar s2=s1.slice(2,5);\ndocument.write(s2);\n</script>', 'cde', 'javascript trim']","['Methods|||Description&&&charAt()|||It provides the char value present at the specified index.&&&charCodeAt()|||It provides the Unicode value of a character present at the specified index.&&&concat()|||It provides a combination of two or more strings.&&&indexOf()|||It provides the position of a char value present in the given string.&&&lastIndexOf()|||It provides the position of a char value present in the given string by searching a character from the last position.&&&search()|||It searches a specified regular expression in a given string and returns its position if a match occurs.&&&match()|||It searches a specified regular expression in a given string and returns that regular expression if a match occurs.&&&replace()|||It replaces a given string with the specified replacement.&&&substr()|||It is used to fetch the part of the given string on the basis of the specified starting position and length.&&&substring()|||It is used to fetch the part of the given string on the basis of the specified index.&&&slice()|||It is used to fetch the part of the given string. It allows us to assign positive as well negative index.&&&toLowerCase()|||It converts the given string into lowercase letter.&&&toLocaleLowerCase()|||It converts the given string into lowercase letter on the basis of host?s current locale.&&&toUpperCase()|||It converts the given string into uppercase letter.&&&toLocaleUpperCase()|||It converts the given string into uppercase letter on the basis of host?s current locale.&&&toString()|||It provides a string representing the particular object.&&&valueOf()|||It provides the primitive value of string object.&&&split()|||It splits a string into substring array, then returns that newly created array.&&&trim()|||It trims the white space from the left and right side of the string.']",[]
15,['JavaScript Date Object'],"['The JavaScript date object can be used to get year, month and day. You can display a timer on the webpage by the help of JavaScript date object.']","['https://www.javatpoint.com/javascript-math', 'https://www.javatpoint.com/window-object', 'https://www.javatpoint.com/javascript-date-getdate-method', 'https://www.javatpoint.com/javascript-date-getday-method', 'https://www.javatpoint.com/javascript-date-getutcfullyear-method', 'https://www.javatpoint.com/javascript-date-gethours-method', 'https://www.javatpoint.com/javascript-date-getmilliseconds-method', 'https://www.javatpoint.com/javascript-date-getminutes-method', 'https://www.javatpoint.com/javascript-date-getmonth-method', 'https://www.javatpoint.com/javascript-date-getseconds-method', 'https://www.javatpoint.com/javascript-date-getutcdate-method', 'https://www.javatpoint.com/javascript-date-getutcday-method', 'https://www.javatpoint.com/javascript-date-getutcfullyears-method', 'https://www.javatpoint.com/javascript-date-getutchours-method', 'https://www.javatpoint.com/javascript-date-getutcminutes-method', 'https://www.javatpoint.com/javascript-date-getutcmonth-method', 'https://www.javatpoint.com/javascript-date-getutcseconds-method', 'https://www.javatpoint.com/javascript-date-sethours-method', 'https://www.javatpoint.com/javascript-date-setmilliseconds-method', 'https://www.javatpoint.com/javascript-date-setminutes-method', 'https://www.javatpoint.com/javascript-date-setseconds-method', 'https://www.javatpoint.com/javascript-date-setutcdate-method', 'https://www.javatpoint.com/javascript-date-setutcfullyear-method', 'https://www.javatpoint.com/javascript-date-setutchours-method', 'https://www.javatpoint.com/javascript-date-setutcminutes-method', 'https://www.javatpoint.com/javascript-date-setutcmonth-method', 'https://www.javatpoint.com/javascript-date-setutcseconds-method', 'https://www.javatpoint.com/javascript-date-todatestring-method', 'https://www.javatpoint.com/javascript-date-toisostring-method', 'https://www.javatpoint.com/javascript-date-tojson-method', 'https://www.javatpoint.com/javascript-date-tostring-method', 'https://www.javatpoint.com/javascript-date-totimestring-method', 'https://www.javatpoint.com/javascript-date-toutcstring-method', 'https://www.javatpoint.com/javascript-date-valueof-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsdate3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsdate1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsdate2', 'https://www.javatpoint.com/javascript-math', 'https://www.javatpoint.com/window-object', 'https://www.javatpoint.com/javascript-math']",[],[],"['Constructor', 'JavaScript Date Methods']","['JavaScript Date Example', 'JavaScript Current Time Example', 'JavaScript Digital Clock Example']",[],"['You can use different Date constructors to create date object. It provides methods to get and set day, month, year, hour, minute and seconds.', 'You can use 4 variant of Date constructor to create date object.', ""Let's see the list of JavaScript date methods with their description."", ""Let's see the simple example to print date object. It prints date and time both."", ""Let's see another code to print date/month/year."", ""Let's see the simple example to print current time of system."", ""Let's see the simple example to display digital clock using JavaScript date object."", 'There are two ways to set interval in JavaScript: by setTimeout() or setInterval() method.']",[],[],"['Current Date and Time: <span id=""txt""></span>', '<script>', 'var today=new Date();', ""document.getElementById('txt').innerHTML=today;"", '</script>', 'Current Time: <span id=""txt""></span>', '<script>', 'var today=new Date();', 'var h=today.getHours();', 'var m=today.getMinutes();', 'var s=today.getSeconds();', 'document.getElementById(\'txt\').innerHTML=h+"":""+m+"":""+s;', '</script>', 'Current Time: <span id=""txt""></span>', '<script>', 'window.onload=function(){getTime();}', 'function getTime(){', 'var today=new Date();', 'var h=today.getHours();', 'var m=today.getMinutes();', 'var s=today.getSeconds();', 'm=checkTime(m);', 's=checkTime(s);', 'document.getElementById(\'txt\').innerHTML=h+"":""+m+"":""+s;', 'setTimeout(function(){getTime()},1000);', 'function checkTime(i){', 'if (i<10){', 'i=""0"" + i;', 'return i;', '</script>']","['Current Date and Time:', '', 'Current Time:', 'Current Time:']",['Methods|||Description&&&getDate()|||It returns the integer value between 1 and 31 that represents the day for the specified date on the basis of local time.&&&getDay()|||It returns the integer value between 0 and 6 that represents the day of the week on the basis of local time.&&&getFullYears()|||It returns the integer value that represents the year on the basis of local time.&&&getHours()|||It returns the integer value between 0 and 23 that represents the hours on the basis of local time.&&&getMilliseconds()|||It returns the integer value between 0 and 999 that represents the milliseconds on the basis of local time.&&&getMinutes()|||It returns the integer value between 0 and 59 that represents the minutes on the basis of local time.&&&getMonth()|||It returns the integer value between 0 and 11 that represents the month on the basis of local time.&&&getSeconds()|||It returns the integer value between 0 and 60 that represents the seconds on the basis of local time.&&&getUTCDate()|||It returns the integer value between 1 and 31 that represents the day for the specified date on the basis of universal time.&&&getUTCDay()|||It returns the integer value between 0 and 6 that represents the day of the week on the basis of universal time.&&&getUTCFullYears()|||It returns the integer value that represents the year on the basis of universal time.&&&getUTCHours()|||It returns the integer value between 0 and 23 that represents the hours on the basis of universal time.&&&getUTCMinutes()|||It returns the integer value between 0 and 59 that represents the minutes on the basis of universal time.&&&getUTCMonth()|||It returns the integer value between 0 and 11 that represents the month on the basis of universal time.&&&getUTCSeconds()|||It returns the integer value between 0 and 60 that represents the seconds on the basis of universal time.&&&setDate()|||It sets the day value for the specified date on the basis of local time.&&&setDay()|||It sets the particular day of the week on the basis of local time.&&&setFullYears()|||It sets the year value for the specified date on the basis of local time.&&&setHours()|||It sets the hour value for the specified date on the basis of local time.&&&setMilliseconds()|||It sets the millisecond value for the specified date on the basis of local time.&&&setMinutes()|||It sets the minute value for the specified date on the basis of local time.&&&setMonth()|||It sets the month value for the specified date on the basis of local time.&&&setSeconds()|||It sets the second value for the specified date on the basis of local time.&&&setUTCDate()|||It sets the day value for the specified date on the basis of universal time.&&&setUTCDay()|||It sets the particular day of the week on the basis of universal time.&&&setUTCFullYears()|||It sets the year value for the specified date on the basis of universal time.&&&setUTCHours()|||It sets the hour value for the specified date on the basis of universal time.&&&setUTCMilliseconds()|||It sets the millisecond value for the specified date on the basis of universal time.&&&setUTCMinutes()|||It sets the minute value for the specified date on the basis of universal time.&&&setUTCMonth()|||It sets the month value for the specified date on the basis of universal time.&&&setUTCSeconds()|||It sets the second value for the specified date on the basis of universal time.&&&toDateString()|||It returns the date portion of a Date object.&&&toISOString()|||It returns the date in the form ISO format string.&&&toJSON()|||It returns a string representing the Date object. It also serializes the Date object during JSON serialization.&&&toString()|||It returns the date in the form of string.&&&toTimeString()|||It returns the time portion of a Date object.&&&toUTCString()|||It converts the specified date in the form of string using UTC time zone.&&&valueOf()|||It returns the primitive value of a Date object.'],"['|||Date()|||Date(milliseconds)|||Date(dateString)|||Date(year, month, day, hours, minutes, seconds, milliseconds)|||']"
16,['JavaScript Math'],"[""The JavaScript math object provides several constants and methods to perform mathematical operation. Unlike date object, it doesn't have constructors.""]","['https://www.javatpoint.com/javascript-number', 'https://www.javatpoint.com/window-object', 'https://www.javatpoint.com/javascript-math-abs-method', 'https://www.javatpoint.com/javascript-math-acos-method', 'https://www.javatpoint.com/javascript-math-asin-method', 'https://www.javatpoint.com/javascript-math-atan-method', 'https://www.javatpoint.com/javascript-math-cbrt-method', 'https://www.javatpoint.com/javascript-math-ceil-method', 'https://www.javatpoint.com/javascript-math-cos-method', 'https://www.javatpoint.com/javascript-math-cosh-method', 'https://www.javatpoint.com/javascript-math-exp-method', 'https://www.javatpoint.com/javascript-math-floor-method', 'https://www.javatpoint.com/javascript-math-hypot-method', 'https://www.javatpoint.com/javascript-math-log-method', 'https://www.javatpoint.com/javascript-math-max-method', 'https://www.javatpoint.com/javascript-math-min-method', 'https://www.javatpoint.com/javascript-math-pow-method', 'https://www.javatpoint.com/javascript-math-random-method', 'https://www.javatpoint.com/javascript-math-round-method', 'https://www.javatpoint.com/javascript-math-sign-method', 'https://www.javatpoint.com/javascript-math-sin-method', 'https://www.javatpoint.com/javascript-math-sinh-method', 'https://www.javatpoint.com/javascript-math-sqrt-method', 'https://www.javatpoint.com/javascript-math-tan-method', 'https://www.javatpoint.com/javascript-math-tanh-method', 'https://www.javatpoint.com/javascript-math-trunc-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsmath1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsmath2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsmath3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsmath4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsmath5', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsmath6', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsmath7', 'https://www.javatpoint.com/javascript-number', 'https://www.javatpoint.com/window-object', 'https://www.javatpoint.com/javascript-number']",[],[],"['JavaScript Math Methods', 'Math.sqrt(n)', 'Math.random()', 'Math.pow(m,n)', 'Math.floor(n)', 'Math.ceil(n)', 'Math.round(n)', 'Math.abs(n)']",[],[],"[""Let's see the list of JavaScript Math methods with description."", 'The JavaScript math.sqrt(n) method returns the square root of the given number.', 'The JavaScript math.random() method returns the random number between 0 to 1.', 'The JavaScript math.pow(m,n) method returns the m to the power of n that is mn.', 'The JavaScript math.floor(n) method returns the lowest integer for the given number. For example 3 for 3.7, 5 for 5.9 etc.', 'The JavaScript math.ceil(n) method returns the largest integer for the given number. For example 4 for 3.7, 6 for 5.9 etc.', 'The JavaScript math.abs(n) method returns the absolute value for the given number. For example 4 for -4, 6.6 for -6.6 etc.']","['The JavaScript math.round(n) method returns the rounded integer nearest for the given number. If fractional part is equal or greater than 0.5, it goes to upper value 1 otherwise lower value 0. For example 4 for 3.7, 3 for 3.3, 6 for 5.9 etc.']",[],"['Square Root of 17 is: <span id=""p1""></span>', '<script>', ""document.getElementById('p1').innerHTML=Math.sqrt(17);"", '</script>', 'Random Number is: <span id=""p2""></span>', '<script>', ""document.getElementById('p2').innerHTML=Math.random();"", '</script>', '3 to the power of 4 is: <span id=""p3""></span>', '<script>', ""document.getElementById('p3').innerHTML=Math.pow(3,4);"", '</script>', 'Floor of 4.6 is: <span id=""p4""></span>', '<script>', ""document.getElementById('p4').innerHTML=Math.floor(4.6);"", '</script>', 'Ceil of 4.6 is: <span id=""p5""></span>', '<script>', ""document.getElementById('p5').innerHTML=Math.ceil(4.6);"", '</script>', 'Round of 4.3 is: <span id=""p6""></span><br>', 'Round of 4.7 is: <span id=""p7""></span>', '<script>', ""document.getElementById('p6').innerHTML=Math.round(4.3);"", ""document.getElementById('p7').innerHTML=Math.round(4.7);"", '</script>', 'Absolute value of -4 is: <span id=""p8""></span>', '<script>', ""document.getElementById('p8').innerHTML=Math.abs(-4);"", '</script>']",[],"['Methods|||Description&&&abs()|||It returns the absolute value of the given number.&&&acos()|||It returns the arccosine of the given number in radians.&&&asin()|||It returns the arcsine of the given number in radians.&&&atan()|||It returns the arc-tangent of the given number in radians.&&&cbrt()|||It returns the cube root of the given number.&&&ceil()|||It returns a smallest integer value, greater than or equal to the given number.&&&cos()|||It returns the cosine of the given number.&&&cosh()|||It returns the hyperbolic cosine of the given number.&&&exp()|||It returns the exponential form of the given number.&&&floor()|||It returns largest integer value, lower than or equal to the given number.&&&hypot()|||It returns square root of sum of the squares of given numbers.&&&log()|||It returns natural logarithm of a number.&&&max()|||It returns maximum value of the given numbers.&&&min()|||It returns minimum value of the given numbers.&&&pow()|||It returns value of base to the power of exponent.&&&random()|||It returns random number between 0 (inclusive) and 1 (exclusive).&&&round()|||It returns closest integer value of the given number.&&&sign()|||It returns the sign of the given number&&&sin()|||It returns the sine of the given number.&&&sinh()|||It returns the hyperbolic sine of the given number.&&&sqrt()|||It returns the square root of the given number&&&tan()|||It returns the tangent of the given number.&&&tanh()|||It returns the hyperbolic tangent of the given number.&&&trunc()|||It returns an integer part of the given number.']",[]
17,['JavaScript Number Object'],['The JavaScript number object enables you to represent a numeric value. It may be integer or floating-point. JavaScript number object follows IEEE standard to represent the floating-point numbers.'],"['https://www.javatpoint.com/javascript-boolean', 'https://www.javatpoint.com/window-object', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsnumber1', 'https://www.javatpoint.com/javascript-number-isfinite-method', 'https://www.javatpoint.com/javascript-number-isinteger-method', 'https://www.javatpoint.com/javascript-number-parsefloat-method', 'https://www.javatpoint.com/javascript-number-parseint-method', 'https://www.javatpoint.com/javascript-number-toexponential-method', 'https://www.javatpoint.com/javascript-number-tofixed-method', 'https://www.javatpoint.com/javascript-number-toprecision-method', 'https://www.javatpoint.com/javascript-number-tostring-method', 'https://www.javatpoint.com/javascript-boolean', 'https://www.javatpoint.com/window-object', 'https://www.javatpoint.com/javascript-boolean']",[],[],"['JavaScript Number Constants', 'JavaScript Number Methods']",[],[],"['By the help of Number() constructor, you can create number object in JavaScript. For example:', ""If value can't be converted to number, it returns NaN(Not a Number) that can be checked by isNaN() method."", 'You can direct assign a number to a variable also. For example:', ""Let's see the list of JavaScript number constants with description."", ""Let's see the list of JavaScript number methods with their description.""]",[],[],"['var n=new Number(value);', 'var x=102;//integer value', 'var y=102.7;//floating point value', 'var z=13e4;//exponent value, output: 130000', 'var n=new Number(16);//integer value by number object']",['102 102.7 130000 16'],"['onstantDescriptio&&&IN_VALUEreturns the largest minimum value&&&AX_VALUEreturns the largest maximum value&&&OSITIVE_INFINITYreturns positive infinity, overflow value&&&EGATIVE_INFINITYreturns negative infinity, overflow value&&&aNrepresents ""Not a Number"" value', 'Methods|||Description&&&isFinite()|||It determines whether the given value is a finite number.&&&isInteger()|||It determines whether the given value is an integer.&&&parseFloat()|||It converts the given string into a floating point number.&&&parseInt()|||It converts the given string into an integer number.&&&toExponential()|||It returns the string that represents exponential notation of the given number.&&&toFixed()|||It returns the string that represents a number with exact digits after a decimal point.&&&toPrecision()|||It returns the string representing a number of specified precision.&&&toString()|||It returns the given number in the form of string.']",[]
18,['JavaScript Boolean'],['JavaScript Boolean is an object that represents value in two states: true or false. You can create the JavaScript Boolean object by Boolean() constructor as given below. '],"['https://www.javatpoint.com/browser-object-model', 'https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/browser-object-model', 'https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/browser-object-model']",[],[],"['JavaScript Boolean Example', 'JavaScript Boolean Properties', 'JavaScript Boolean Methods']",[],[],['The default value of JavaScript Boolean object is false.'],[],[],"['Boolean b=new Boolean(value);', '<script>', 'document.write(10<20);//true', 'document.write(10<5);//false', '</script>']",[],"['ropertyDescriptio&&&onstructorreturns the reference of Boolean function that created Boolean object&&&rototypeenables you to add properties and methods in Boolean prototype', 'ethodDescriptio&&&oSource()returns the source of Boolean object as a string&&&oString()converts Boolean into String&&&alueOf()converts other type into Boolean']",[]
19,['Browser Object Model'],['The Browser Object Model (BOM) is used to interact with the browser.'],"['https://www.javatpoint.com/window-object', 'https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/window-object', 'https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/window-object']",['https://static.javatpoint.com/images/javascript/bom.jpg'],[],[],[],['Note: The document object represents an html document. It forms DOM (Document Object Model).'],"['The default object of browser is window means you can call all the functions of window by specifying window or directly. For example:', 'is same as:', 'Visit the next page to learn about window object fully with example.']","['You can use a lot of properties (other objects) defined underneath the window object like document, history, screen, navigator, location, innerHeight, innerWidth, ']",[],"['window.alert(""hello javatpoint"");', 'alert(""hello javatpoint"");']",[],[],[]
20,['Window Object'],['The window object represents a window in browser. An object of window is created automatically by the browser.'],"['https://www.javatpoint.com/javascript-history-object', 'https://www.javatpoint.com/browser-object-model', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/javascript-history-object', 'https://www.javatpoint.com/browser-object-model', 'https://www.javatpoint.com/javascript-history-object']",[],[],['Methods of window object'],[],"['Note: if html document contains frame or iframe, browser creates additional window objects for each frame.', 'Example of alert() in javascript', 'Output of the above example', 'Example of confirm() in javascript', 'Output of the above example', 'Example of prompt() in javascript', 'Output of the above example', 'Example of open() in javascript', 'Output of the above example', 'Example of setTimeout() in javascript', 'Output of the above example']","['Window is the object of browser, it is not the object of javascript. The javascript objects are string, array, date etc.', 'The important methods of window object are as follows:', 'It displays alert dialog box. It has message and ok button.', 'It displays the confirm dialog box. It has message with ok and cancel buttons.', 'It displays prompt dialog box for input. It has message and textfield.', 'It displays the content in a new window.', 'It performs its task after the given milliseconds.']",[],[],"['<script type=""text/javascript"">', 'function msg(){', 'alert(""Hello Alert Box"");', '</script>', '<input type=""button"" value=""click"" onclick=""msg()""/>', '<script type=""text/javascript"">', 'function msg(){', 'var v= confirm(""Are u sure?"");', 'if(v==true){', 'alert(""ok"");', 'alert(""cancel"");', '</script>', '<input type=""button"" value=""delete record"" onclick=""msg()""/>', '<script type=""text/javascript"">', 'function msg(){', 'var v= prompt(""Who are you?"");', 'alert(""I am ""+v);', '</script>', '<input type=""button"" value=""click"" onclick=""msg()""/>', '<script type=""text/javascript"">', 'function msg(){', 'open(""http://www.javatpoint.com"");', '</script>', '<input type=""button"" value=""javatpoint"" onclick=""msg()""/>', '<script type=""text/javascript"">', 'function msg(){', 'setTimeout(', 'function(){', 'alert(""Welcome to Javatpoint after 2 seconds"")', '},2000);', '</script>', '<input type=""button"" value=""click"" onclick=""msg()""/>']",[],"['ethodDescriptio&&&lert()displays the alert box containing message with ok button&&&onfirm()displays the confirm dialog box containing message with ok and cancel button&&&rompt()displays a dialog box to get input from the user&&&pen()opens the new window&&&lose()closes the current window&&&etTimeout()performs action after specified time like calling function, evaluating expressions etc']",[]
21,['JavaScript History Object'],"['The JavaScript history object represents an array of URLs visited by the user. By using this object, you can load previous, forward or any particular page.']","['https://www.javatpoint.com/javascript-navigator-object', 'https://www.javatpoint.com/window-object', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/javascript-navigator-object', 'https://www.javatpoint.com/window-object', 'https://www.javatpoint.com/javascript-navigator-object']",[],[],"['Property of JavaScript history object', 'Methods of JavaScript history object', 'Example of history object']",[],[],"['The history object is the window property, so it can be accessed by:', 'There are only 1 property of history object.', 'There are only 3 methods of history object.', 'Let’s see the different usage of history object.']",[],[],"['window.history', 'history.back();//for previous page', 'history.forward();//for next page', 'history.go(2);//for next 2nd page', 'history.go(-2);//for previous 2nd page']",[],"['o.PropertyDescriptio&&&lengthreturns the length of the history URLs', 'o.MethodDescriptio&&&forward()loads the next page&&&back()loads the previous page&&&go()loads the given page number']",[]
22,['JavaScript Navigator Object'],"['The JavaScript navigator object is used for browser detection. It can be used to get browser information such as appName, appCodeName, userAgent etc.']","['https://www.javatpoint.com/javascript-screen', 'https://www.javatpoint.com/javascript-history-object', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsnavigator', 'https://www.javatpoint.com/javascript-screen', 'https://www.javatpoint.com/javascript-history-object', 'https://www.javatpoint.com/javascript-screen']",[],[],"['Property of JavaScript navigator object', 'Methods of JavaScript navigator object']",[],['Example of navigator object'],"['The navigator object is the window property, so it can be accessed by:', 'There are many properties of navigator object that returns information of the browser.', 'The methods of navigator object are given below.', 'Let’s see the different usage of history object.']",[],[],"['window.navigator', 'navigator', '<script>', 'document.writeln(""<br/>navigator.appCodeName: ""+navigator.appCodeName);', 'document.writeln(""<br/>navigator.appName: ""+navigator.appName);', 'document.writeln(""<br/>navigator.appVersion: ""+navigator.appVersion);', 'document.writeln(""<br/>navigator.cookieEnabled: ""+navigator.cookieEnabled);', 'document.writeln(""<br/>navigator.language: ""+navigator.language);', 'document.writeln(""<br/>navigator.userAgent: ""+navigator.userAgent);', 'document.writeln(""<br/>navigator.platform: ""+navigator.platform);', 'document.writeln(""<br/>navigator.onLine: ""+navigator.onLine);', '</script>']","['navigator.appCodeName: Mozilla \nnavigator.appName: Netscape \nnavigator.appVersion: 5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 \n(KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36 \nnavigator.cookieEnabled: true \nnavigator.language: en-US \nnavigator.userAgent: Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 \n(KHTML, like Gecko) Chrome/37.0.2062.124 Safari/537.36 \nnavigator.platform: Win32 \nnavigator.onLine: true']","['o.PropertyDescriptio&&&appNamereturns the nam&&&appVersionreturns the versio&&&appCodeNamereturns the code nam&&&cookieEnabledreturns true if cookie is enabled otherwise fals&&&userAgentreturns the user agen&&&languagereturns the language. It is supported in Netscape and Firefox only&&&userLanguagereturns the user language. It is supported in IE only&&&pluginsreturns the plugins. It is supported in Netscape and Firefox only&&&systemLanguagereturns the system language. It is supported in IE only&&&0mimeTypes[]returns the array of mime type. It is supported in Netscape and Firefox only&&&1platformreturns the platform e.g. Win32&&&2onlinereturns true if browser is online otherwise false', 'o.MethodDescriptio&&&javaEnabled()checks if java is enabled&&&taintEnabled()checks if taint is enabled. It is deprecated since JavaScript 1.2']",[]
23,['JavaScript Screen Object'],"['The JavaScript screen object holds information of browser screen. It can be used to display screen width, height, colorDepth, pixelDepth etc.']","['https://www.javatpoint.com/document-object-model', 'https://www.javatpoint.com/javascript-navigator-object', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsscreen', 'https://www.javatpoint.com/document-object-model', 'https://www.javatpoint.com/javascript-navigator-object', 'https://www.javatpoint.com/document-object-model']",[],[],['Property of JavaScript Screen Object'],[],['Example of JavaScript Screen Object'],"['The navigator object is the window property, so it can be accessed by:', 'There are many properties of screen object that returns information of the browser.', 'Let’s see the different usage of screen object.']",[],[],"['window.screen', '<script>', 'document.writeln(""<br/>screen.width: ""+screen.width);', 'document.writeln(""<br/>screen.height: ""+screen.height);', 'document.writeln(""<br/>screen.availWidth: ""+screen.availWidth);', 'document.writeln(""<br/>screen.availHeight: ""+screen.availHeight);', 'document.writeln(""<br/>screen.colorDepth: ""+screen.colorDepth);', 'document.writeln(""<br/>screen.pixelDepth: ""+screen.pixelDepth);', '</script>']",['screen.width: 1366 \nscreen.height: 768 \nscreen.availWidth: 1366 \nscreen.availHeight: 728 \nscreen.colorDepth: 24 \nscreen.pixelDepth: 24'],['o.PropertyDescriptio&&&widthreturns the width of the scree&&&heightreturns the height of the scree&&&availWidthreturns the available widt&&&availHeightreturns the available heigh&&&colorDepthreturns the color dept&&&pixelDepthreturns the pixel depth'],[]
24,['Document Object Model '],['The document object represents the whole html document.'],"['https://www.javatpoint.com/document-getElementById()-method', 'https://www.javatpoint.com/javascript-screen', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/document-getElementById()-method', 'https://www.javatpoint.com/javascript-screen', 'https://www.javatpoint.com/document-getElementById()-method']",['https://static.javatpoint.com/images/javascript/dom.jpg'],[],"['Properties of document object', 'Methods of document object']",['Accessing field value by document object'],['Output of the above example'],"['As mentioned earlier, it is the object of window. So ', 'Is same as', 'We can access and change the contents of document by its methods.', 'The important methods of document object are as follows:', 'In this example, we are going to get the value of input text by user. Here, we are using document.form1.name.value to get the value of name field.', 'Here, document is the root element that represents the html document.', 'form1 is the name of the form.', 'name is the attribute name of the input text.', 'value is the property, that returns the value of the input text.', ""Let's see the simple example of document object that prints name with welcome message.""]","['When html document is loaded in the browser, it becomes a document object. It is the root element that represents the html document. It has properties and methods. By the help of document object, we can add dynamic content to our web page.', 'According to W3C - ""The W3C Document Object Model (DOM) is a platform and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of a document.""']","['Let\'s see the properties of document object that can be accessed and modified by the document object.\n\n\n\n\n\nMethods of document object\nWe can access and change the contents of document by its methods.\nThe important methods of document object are as follows:\n\nMethodDescription\nwrite(""string"")writes the given string on the doucment.\nwriteln(""string"")writes the given string on the doucment with newline character at the end.\ngetElementById()returns the element having the given id value.\ngetElementsByName()returns all the elements having the given name value.\ngetElementsByTagName()returns all the elements having the given tag name.\ngetElementsByClassName()returns all the elements having the given class name.\n\n\nAccessing field value by document object\nIn this example, we are going to get the value of input text by user. Here, we are using document.form1.name.value to get the value of name field.\nHere, document is the root element that represents the html document.\nform1 is the name of the form.\nname is the attribute name of the input text.\nvalue is the property, that returns the value of the input text.\nLet\'s see the simple example of document object that prints name with welcome message.\n\n<script type=""text/javascript"">\nfunction printvalue(){\nvar name=document.form1.name.value;\nalert(""Welcome: ""+name);\n}\n</script>\n\n<form name=""form1"">\nEnter Name:<input type=""text"" name=""name""/>\n<input type=""button"" onclick=""printvalue()"" value=""print name""/>\n</form>\n\n\n\nOutput of the above example\n\n\n\nEnter Name:\n\n\n\n\nNext TopicDocument getElementById() Method\n\n\n\n← prev\nnext →\n\n\n']","['window.document', 'document', '<script type=""text/javascript"">', 'function printvalue(){', 'var name=document.form1.name.value;', 'alert(""Welcome: ""+name);', '</script>', '<form name=""form1"">', 'Enter Name:<input type=""text"" name=""name""/>', '<input type=""button"" onclick=""printvalue()"" value=""print name""/>']",[],"['ethodDescriptio&&&rite(""string"")writes the given string on the doucment&&&riteln(""string"")writes the given string on the doucment with newline character at the end&&&etElementById()returns the element having the given id value&&&etElementsByName()returns all the elements having the given name value&&&etElementsByTagName()returns all the elements having the given tag name&&&etElementsByClassName()returns all the elements having the given class name']",[]
25,['Javascript - document.getElementById() method'],"['The document.getElementById() method returns the element of specified id.\nIn the previous page, we have used document.form1.name.value to get the value of the input value. Instead of this, we can use document.getElementById() method to get value of the input text. But we need to define id for the input field.\nLet\'s see the simple example of document.getElementById() method that prints cube of the given number.\n\n<script type=""text/javascript"">\nfunction getcube(){\nvar number=document.getElementById(""number"").value;\nalert(number*number*number);\n}\n</script>\n<form>\nEnter No:<input type=""text"" id=""number"" name=""number""/><br/>\n<input type=""button"" value=""cube"" onclick=""getcube()""/>\n</form>\n\n\nOutput of the above example\n\n\n\nEnter No:\n\n\n\n\n\n\n\nNext TopicDocument getElementsByName() Method\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/document-getElementsByName()-method', 'https://www.javatpoint.com/document-object-model', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/document-getElementsByName()-method', 'https://www.javatpoint.com/document-object-model', 'https://www.javatpoint.com/document-getElementsByName()-method']",[],[],[],[],['Output of the above example'],"[""Let's see the simple example of document.getElementById() method that prints cube of the given number.""]","['In the previous page, we have used document.form1.name.value to get the value of the input value. Instead of this, we can use document.getElementById() method to get value of the input text. But we need to define id for the input field.']","['\nIn the previous page, we have used document.form1.name.value to get the value of the input value. Instead of this, we can use document.getElementById() method to get value of the input text. But we need to define id for the input field.\nLet\'s see the simple example of document.getElementById() method that prints cube of the given number.\n\n<script type=""text/javascript"">\nfunction getcube(){\nvar number=document.getElementById(""number"").value;\nalert(number*number*number);\n}\n</script>\n<form>\nEnter No:<input type=""text"" id=""number"" name=""number""/><br/>\n<input type=""button"" value=""cube"" onclick=""getcube()""/>\n</form>\n\n\nOutput of the above example\n\n\n\nEnter No:\n\n\n\n\n\n\n\nNext TopicDocument getElementsByName() Method\n\n\n\n← prev\nnext →\n\n\n']","['<script type=""text/javascript"">', 'function getcube(){', 'var number=document.getElementById(""number"").value;', 'alert(number*number*number);', '</script>', 'Enter No:<input type=""text"" id=""number"" name=""number""/><br/>', '<input type=""button"" value=""cube"" onclick=""getcube()""/>']",[],[],[]
26,['GetElementsByClassName()'],"['The getElementsByClassName() method is used for selecting or getting the elements through their class name value. This DOM method returns an array-like object that consists of all the elements having the specified classname. On calling the getElementsByClassName() method on any particular element, it will search the whole document and will return only those elements which match the specified or given class name.']","['https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-tutorial']",['https://static.javatpoint.com/javascriptpages/images/getelementsbyclassname.png'],[],[],"['Syntax', 'Difference between getElementsByClassName(), querySelector() and querySelectorAll() Methods']",[],"['Here, name is the mandatory argument to be passed. It is the string that specifies either a single classname or multiple class names to match.', ""Let's look at some examples to know and understand the practical implementation of the method."", 'It is a simple class implementation that returns an array-like object on invoking the variable x.', 'Similarly, we can implement the getElementsByClassName() method for returning collections of elements for multiple classes.', 'querySelector(): It returns only a single element that matches the specified classname. If it does not find any matching element, it returns null.']","['The main point to understand is that all the above-described methods return either one element or a list, but the getELementsByClassName() method serves the dynamic updation, and the other two methods serve for the static.']","['getElementsByClassName(): It matches the elements with the specified class name, and returns a set of the matched elements. The returned elements are live HTML collection of elements. These live elements can be further updated if any changes are made in the Document Object Model.']","[""var ele=document.getELementsByClassName('name');"", '<head> <h5>DOM Methods </h5> </head>', '<div class=""Class"">', 'This is a simple class implementation', '<script type=""text/javascript"">', ""var x=document.getElementsByClassName('Class');"", 'document.write(""On calling x, it will return an arrsy-like object: <br>""+x);', '</script>', '</body>', '</html>']",[],[],[]
27,['Javascript - document.getElementsByName() method'],"['The document.getElementsByName() method returns all the element of specified name.\nThe syntax of the getElementsByName() method is given below:\n\ndocument.getElementsByName(""name"")\n\nHere, name is required.\nExample of document.getElementsByName() method\nIn this example, we going to count total number of genders. Here, we are using getElementsByName() method to get all the genders.\n\n<script type=""text/javascript"">\nfunction totalelements()\n{\nvar allgenders=document.getElementsByName(""gender"");\nalert(""Total Genders:""+allgenders.length);\n}\n</script>\n<form>\nMale:<input type=""radio"" name=""gender"" value=""male"">\nFemale:<input type=""radio"" name=""gender"" value=""female"">\n\n<input type=""button"" onclick=""totalelements()"" value=""Total Genders"">\n</form>\n\n\n\nOutput of the above example\n\n\n\nMale:\nFemale:\n\n\n\n\n\n\n\nNext TopicDocument getElementsByTagName() Method\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/document-getElementsByTagName()-method', 'https://www.javatpoint.com/document-getElementById()-method', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/document-getElementsByTagName()-method', 'https://www.javatpoint.com/document-getElementById()-method', 'https://www.javatpoint.com/document-getElementsByTagName()-method']",[],[],[],['Example of document.getElementsByName() method'],['Output of the above example'],"['The syntax of the getElementsByName() method is given below:', 'Here, name is required.', 'In this example, we going to count total number of genders. Here, we are using getElementsByName() method to get all the genders.']",[],"['\nThe syntax of the getElementsByName() method is given below:\n\ndocument.getElementsByName(""name"")\n\nHere, name is required.\nExample of document.getElementsByName() method\nIn this example, we going to count total number of genders. Here, we are using getElementsByName() method to get all the genders.\n\n<script type=""text/javascript"">\nfunction totalelements()\n{\nvar allgenders=document.getElementsByName(""gender"");\nalert(""Total Genders:""+allgenders.length);\n}\n</script>\n<form>\nMale:<input type=""radio"" name=""gender"" value=""male"">\nFemale:<input type=""radio"" name=""gender"" value=""female"">\n\n<input type=""button"" onclick=""totalelements()"" value=""Total Genders"">\n</form>\n\n\n\nOutput of the above example\n\n\n\nMale:\nFemale:\n\n\n\n\n\n\n\nNext TopicDocument getElementsByTagName() Method\n\n\n\n← prev\nnext →\n\n\n']","['document.getElementsByName(""name"")', '<script type=""text/javascript"">', 'function totalelements()', 'var allgenders=document.getElementsByName(""gender"");', 'alert(""Total Genders:""+allgenders.length);', '</script>', 'Male:<input type=""radio"" name=""gender"" value=""male"">', 'Female:<input type=""radio"" name=""gender"" value=""female"">', '<input type=""button"" onclick=""totalelements()"" value=""Total Genders"">']",[],[],[]
28,['Javascript - document.getElementsByTagName() method'],"['The document.getElementsByTagName() method returns all the element of specified tag name.\nThe syntax of the getElementsByTagName() method is given below:\n\ndocument.getElementsByTagName(""name"")\n\nHere, name is required.\nExample of document.getElementsByTagName() method\nIn this example, we going to count total number of paragraphs used in the document. To do this, we have called the document.getElementsByTagName(""p"") method that returns the total paragraphs.\n\n<script type=""text/javascript"">\nfunction countpara(){\nvar totalpara=document.getElementsByTagName(""p"");\nalert(""total p tags are: ""+totalpara.length);\n\n}\n</script>\n<p>This is a pragraph</p>\n<p>Here we are going to count total number of paragraphs by getElementByTagName() method.</p>\n<p>Let\'s see the simple example</p>\n<button onclick=""countpara()"">count paragraph</button>\n\n\nOutput of the above example\n\n\nThis is a pragraph\nHere we are going to count total number of paragraphs by getElementByTagName() method.\nLet\'s see the simple example\ncount paragraph\n\n\n\n\nAnother example of document.getElementsByTagName() method\nIn this example, we going to count total number of h2 and h3 tags used in the document.\n\n<script type=""text/javascript"">\nfunction counth2(){\nvar totalh2=document.getElementsByTagName(""h2"");\nalert(""total h2 tags are: ""+totalh2.length);\n}\nfunction counth3(){\nvar totalh3=document.getElementsByTagName(""h3"");\nalert(""total h3 tags are: ""+totalh3.length);\n}\n</script>\n<h2>This is h2 tag</h2>\n<h2>This is h2 tag</h2>\n<h3>This is h3 tag</h3>\n<h3>This is h3 tag</h3>\n<h3>This is h3 tag</h3>\n<button onclick=""counth2()"">count h2</button>\n<button onclick=""counth3()"">count h3</button>\n\n\n\nOutput of the above example\n\n\nThis is h2 tag\nThis is h2 tag\nThis is h3 tag\nThis is h3 tag\nThis is h3 tag\ncount h2\ncount h3\n\nNote: Output of the given examples may differ on this page because it will count the total number of para , total number of h2 and total number of h3 tags used in this document.\n\nNext TopicJavascript innerHTML\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/javascript-innerHTML', 'https://www.javatpoint.com/document-getElementsByName()-method', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/javascript-innerHTML', 'https://www.javatpoint.com/document-getElementsByName()-method', 'https://www.javatpoint.com/javascript-innerHTML']",[],[],[],"['Example of document.getElementsByTagName() method', 'Another example of document.getElementsByTagName() method', 'This is h3 tag', 'This is h3 tag', 'This is h3 tag']","['Output of the above example', 'Output of the above example', 'Note: Output of the given examples may differ on this page because it will count the total number of para , total number of h2 and total number of h3 tags used in this document.']","['The syntax of the getElementsByTagName() method is given below:', 'Here, name is required.', 'This is a pragraph', 'Here we are going to count total number of paragraphs by getElementByTagName() method.', ""Let's see the simple example"", 'In this example, we going to count total number of h2 and h3 tags used in the document.']","['In this example, we going to count total number of paragraphs used in the document. To do this, we have called the document.getElementsByTagName(""p"") method that returns the total paragraphs.']","['\nThe syntax of the getElementsByTagName() method is given below:\n\ndocument.getElementsByTagName(""name"")\n\nHere, name is required.\nExample of document.getElementsByTagName() method\nIn this example, we going to count total number of paragraphs used in the document. To do this, we have called the document.getElementsByTagName(""p"") method that returns the total paragraphs.\n\n<script type=""text/javascript"">\nfunction countpara(){\nvar totalpara=document.getElementsByTagName(""p"");\nalert(""total p tags are: ""+totalpara.length);\n\n}\n</script>\n<p>This is a pragraph</p>\n<p>Here we are going to count total number of paragraphs by getElementByTagName() method.</p>\n<p>Let\'s see the simple example</p>\n<button onclick=""countpara()"">count paragraph</button>\n\n\nOutput of the above example\n\n\nThis is a pragraph\nHere we are going to count total number of paragraphs by getElementByTagName() method.\nLet\'s see the simple example\ncount paragraph\n\n\n\n\nAnother example of document.getElementsByTagName() method\nIn this example, we going to count total number of h2 and h3 tags used in the document.\n\n<script type=""text/javascript"">\nfunction counth2(){\nvar totalh2=document.getElementsByTagName(""h2"");\nalert(""total h2 tags are: ""+totalh2.length);\n}\nfunction counth3(){\nvar totalh3=document.getElementsByTagName(""h3"");\nalert(""total h3 tags are: ""+totalh3.length);\n}\n</script>\n<h2>This is h2 tag</h2>\n<h2>This is h2 tag</h2>\n<h3>This is h3 tag</h3>\n<h3>This is h3 tag</h3>\n<h3>This is h3 tag</h3>\n<button onclick=""counth2()"">count h2</button>\n<button onclick=""counth3()"">count h3</button>\n\n\n\nOutput of the above example\n\n\nThis is h2 tag\nThis is h2 tag\nThis is h3 tag\nThis is h3 tag\nThis is h3 tag\ncount h2\ncount h3\n\nNote: Output of the given examples may differ on this page because it will count the total number of para , total number of h2 and total number of h3 tags used in this document.\n\nNext TopicJavascript innerHTML\n\n\n\n← prev\nnext →\n\n\n']","['document.getElementsByTagName(""name"")', '<script type=""text/javascript"">', 'function countpara(){', 'var totalpara=document.getElementsByTagName(""p"");', 'alert(""total p tags are: ""+totalpara.length);', '</script>', '<p>This is a pragraph</p>', '<p>Here we are going to count total number of paragraphs by getElementByTagName() method.</p>', ""<p>Let's see the simple example</p>"", '<button onclick=""countpara()"">count paragraph</button>', '<script type=""text/javascript"">', 'function counth2(){', 'var totalh2=document.getElementsByTagName(""h2"");', 'alert(""total h2 tags are: ""+totalh2.length);', 'function counth3(){', 'var totalh3=document.getElementsByTagName(""h3"");', 'alert(""total h3 tags are: ""+totalh3.length);', '</script>', '<h2>This is h2 tag</h2>', '<h2>This is h2 tag</h2>', '<h3>This is h3 tag</h3>', '<h3>This is h3 tag</h3>', '<h3>This is h3 tag</h3>', '<button onclick=""counth2()"">count h2</button>', '<button onclick=""counth3()"">count h3</button>']",[],[],[]
29,['Javascript - innerHTML'],"['The innerHTML property can be used to write the dynamic html on the html document.\nIt is used mostly in the web pages to generate the dynamic html such as registration form, comment form, links etc.\nExample of innerHTML property\nIn this example, we are going to create the html form when user clicks on the button.\nIn this example, we are dynamically writing the html form inside the div name having the id mylocation. We are identifing this position by calling the document.getElementById() method.\n\n<script type=""text/javascript"" >\nfunction showcommentform() {\nvar data=""Name:<input type=\'text\' name=\'name\'><br>Comment:<br><textarea rows=\'5\' cols=\'80\'></textarea>\n<br><input type=\'submit\' value=\'Post Comment\'>"";\ndocument.getElementById(\'mylocation\').innerHTML=data;\n}\n</script>\n<form name=""myForm"">\n<input type=""button"" value=""comment"" onclick=""showcommentform()"">\n<div id=""mylocation""></div>\n</form>\n\nTest it Now\n\nOutput of the above example\n\n\n\n\n\n\n\n\n\nShow/Hide Comment Form Example using innerHTML\n\n<!DOCTYPE html>\n<html>\n<head>\n<title>First JS</title>\n<script>\nvar flag=true;\nfunction commentform(){\nvar cform=""<form action=\'Comment\'>Enter Name:<br><input type=\'text\' name=\'name\'/><br/>\nEnter Email:<br><input type=\'email\' name=\'email\'/><br>Enter Comment:<br/>\n<textarea rows=\'5\' cols=\'70\'></textarea><br><input type=\'submit\' value=\'Post Comment\'/></form>"";\nif(flag){\ndocument.getElementById(""mylocation"").innerHTML=cform;\nflag=false;\n}else{\ndocument.getElementById(""mylocation"").innerHTML="""";\nflag=true;\n}\n}\n</script>\n</head>\n<body>\n<button onclick=""commentform()"">Comment</button>\n<div id=""mylocation""></div>\n</body>\n</html>\n\nOutput of the above example\n\nComment\n\n\nNext TopicJavascript innerText\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/javascript-innerText', 'https://www.javatpoint.com/document-getElementsByTagName()-method', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsinnerhtml', 'https://www.javatpoint.com/javascript-innerText', 'https://www.javatpoint.com/document-getElementsByTagName()-method', 'https://www.javatpoint.com/javascript-innerText']",[],[],[],"['Example of innerHTML property', 'Show/Hide Comment Form Example using innerHTML']","['Output of the above example', 'Output of the above example']","['It is used mostly in the web pages to generate the dynamic html such as registration form, comment form, links etc.', 'In this example, we are going to create the html form when user clicks on the button.']","['In this example, we are dynamically writing the html form inside the div name having the id mylocation. We are identifing this position by calling the document.getElementById() method.']","['\nIt is used mostly in the web pages to generate the dynamic html such as registration form, comment form, links etc.\nExample of innerHTML property\nIn this example, we are going to create the html form when user clicks on the button.\nIn this example, we are dynamically writing the html form inside the div name having the id mylocation. We are identifing this position by calling the document.getElementById() method.\n\n<script type=""text/javascript"" >\nfunction showcommentform() {\nvar data=""Name:<input type=\'text\' name=\'name\'><br>Comment:<br><textarea rows=\'5\' cols=\'80\'></textarea>\n<br><input type=\'submit\' value=\'Post Comment\'>"";\ndocument.getElementById(\'mylocation\').innerHTML=data;\n}\n</script>\n<form name=""myForm"">\n<input type=""button"" value=""comment"" onclick=""showcommentform()"">\n<div id=""mylocation""></div>\n</form>\n\nTest it Now\n\nOutput of the above example\n\n\n\n\n\n\n\n\n\nShow/Hide Comment Form Example using innerHTML\n\n<!DOCTYPE html>\n<html>\n<head>\n<title>First JS</title>\n<script>\nvar flag=true;\nfunction commentform(){\nvar cform=""<form action=\'Comment\'>Enter Name:<br><input type=\'text\' name=\'name\'/><br/>\nEnter Email:<br><input type=\'email\' name=\'email\'/><br>Enter Comment:<br/>\n<textarea rows=\'5\' cols=\'70\'></textarea><br><input type=\'submit\' value=\'Post Comment\'/></form>"";\nif(flag){\ndocument.getElementById(""mylocation"").innerHTML=cform;\nflag=false;\n}else{\ndocument.getElementById(""mylocation"").innerHTML="""";\nflag=true;\n}\n}\n</script>\n</head>\n<body>\n<button onclick=""commentform()"">Comment</button>\n<div id=""mylocation""></div>\n</body>\n</html>\n\nOutput of the above example\n\nComment\n\n\nNext TopicJavascript innerText\n\n\n\n← prev\nnext →\n\n\n']","['<script type=""text/javascript"" >', 'function showcommentform() {', 'var data=""Name:<input type=\'text\' name=\'name\'><br>Comment:<br><textarea rows=\'5\' cols=\'80\'></textarea>', '<br><input type=\'submit\' value=\'Post Comment\'>"";', ""document.getElementById('mylocation').innerHTML=data;"", '</script>', '<form name=""myForm"">', '<input type=""button"" value=""comment"" onclick=""showcommentform()"">', '<div id=""mylocation""></div>', '<!DOCTYPE html>', '<title>First JS</title>', '<script>', 'var flag=true;', 'function commentform(){', 'var cform=""<form action=\'Comment\'>Enter Name:<br><input type=\'text\' name=\'name\'/><br/>', ""Enter Email:<br><input type='email' name='email'/><br>Enter Comment:<br/>"", '<textarea rows=\'5\' cols=\'70\'></textarea><br><input type=\'submit\' value=\'Post Comment\'/></form>"";', 'if(flag){', 'document.getElementById(""mylocation"").innerHTML=cform;', 'flag=false;', 'document.getElementById(""mylocation"").innerHTML="""";', 'flag=true;', '</script>', '<button onclick=""commentform()"">Comment</button>', '<div id=""mylocation""></div>']",[],[],[]
30,['Javascript - innerText'],"['The innerText property can be used to write the dynamic text on the html document. Here, text will not be interpreted as html text but a normal text.\nIt is used mostly in the web pages to generate the dynamic content such as writing the validation message, password strength etc.\nJavascript innerText Example\nIn this example, we are going to display the password strength when releases the key after press.\n\n<script type=""text/javascript"" >\nfunction validate() {\nvar msg;\nif(document.myForm.userPass.value.length>5){\nmsg=""good"";\n}\nelse{\nmsg=""poor"";\n}\ndocument.getElementById(\'mylocation\').innerText=msg;\n }\n\n</script>\n<form name=""myForm"">\n<input type=""password"" value="""" name=""userPass"" onkeyup=""validate()"">\nStrength:<span id=""mylocation"">no strength</span>\n</form>\n\nTest it Now\n\nOutput of the above example\n\n\n\n\nStrength:no strength\n\n\n\n\n\n\nNext TopicJavascript Form Validation\n\n\n\n← prev\nnext →\n\n\n']","['https://www.javatpoint.com/javascript-form-validation', 'https://www.javatpoint.com/javascript-innerHTML', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsinnertext', 'https://www.javatpoint.com/javascript-form-validation', 'https://www.javatpoint.com/javascript-innerHTML', 'https://www.javatpoint.com/javascript-form-validation']",[],[],['Javascript innerText Example'],[],['Output of the above example'],"['It is used mostly in the web pages to generate the dynamic content such as writing the validation message, password strength etc.', 'In this example, we are going to display the password strength when releases the key after press.']",[],"['\nIt is used mostly in the web pages to generate the dynamic content such as writing the validation message, password strength etc.\nJavascript innerText Example\nIn this example, we are going to display the password strength when releases the key after press.\n\n<script type=""text/javascript"" >\nfunction validate() {\nvar msg;\nif(document.myForm.userPass.value.length>5){\nmsg=""good"";\n}\nelse{\nmsg=""poor"";\n}\ndocument.getElementById(\'mylocation\').innerText=msg;\n }\n\n</script>\n<form name=""myForm"">\n<input type=""password"" value="""" name=""userPass"" onkeyup=""validate()"">\nStrength:<span id=""mylocation"">no strength</span>\n</form>\n\nTest it Now\n\nOutput of the above example\n\n\n\n\nStrength:no strength\n\n\n\n\n\n\nNext TopicJavascript Form Validation\n\n\n\n← prev\nnext →\n\n\n']","['<script type=""text/javascript"" >', 'function validate() {', 'var msg;', 'if(document.myForm.userPass.value.length>5){', 'msg=""good"";', 'msg=""poor"";', ""document.getElementById('mylocation').innerText=msg;"", '</script>', '<form name=""myForm"">', '<input type=""password"" value="""" name=""userPass"" onkeyup=""validate()"">', 'Strength:<span id=""mylocation"">no strength</span>']",[],[],[]
31,['JavaScript Form Validation'],"['It is important to validate the form submitted by the user because it can have inappropriate values. So, validation is must to authenticate user.']","['https://www.javatpoint.com/javascript-oops-classes', 'https://www.javatpoint.com/javascript-innerText', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#email', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvalidation1', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvalidation4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvalidation5', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvalidation2', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvalidation3', 'https://www.javatpoint.com/javascript-oops-classes', 'https://www.javatpoint.com/javascript-innerHTML', 'https://www.javatpoint.com/javascript-oops-classes']",[],[],"['JavaScript Form Validation Example', 'JavaScript Retype Password Validation', 'JavaScript Number Validation', 'JavaScript validation with image', 'JavaScript email validation']",[],[],"['Through JavaScript, we can validate name, password, email, date, mobile numbers and more fields.', 'In this example, we are going to validate the name and password. The name can’t be empty and password can’t be less than 6 characters long.', 'Here, we are validating the form on form submit. The user will not be forwarded to the next page until given values are correct.', ""Let's validate the textfield for numeric value only. Here, we are using isNaN() function."", 'Let’s see an interactive JavaScript form validation example that displays correct and incorrect image if input is correct or incorrect.', 'We can validate the email by the help of JavaScript.', 'There are many criteria that need to be follow to validate the email id such as:', ""Let's see the simple example to validate the email field.""]",['JavaScript provides facility to validate the form on the client-side so data processing will be faster than server-side validation. Most of the web developers prefer JavaScript form validation.'],[],"['<script>', 'function validateform(){', 'var name=document.myform.name.value;', 'var password=document.myform.password.value;', 'if (name==null || name==""""){', 'alert(""Name can\'t be blank"");', 'return false;', '}else if(password.length<6){', 'alert(""Password must be at least 6 characters long."");', 'return false;', '</script>', '<form name=""myform"" method=""post"" action=""abc.jsp"" onsubmit=""return validateform()"" >', 'Name: <input type=""text"" name=""name""><br/>', 'Password: <input type=""password"" name=""password""><br/>', '<input type=""submit"" value=""register"">', '<script type=""text/javascript"">', 'function matchpass(){', 'var firstpassword=document.f1.password.value;', 'var secondpassword=document.f1.password2.value;', 'if(firstpassword==secondpassword){', 'return true;', 'alert(""password must be same!"");', 'return false;', '</script>', '<form name=""f1"" action=""register.jsp"" onsubmit=""return matchpass()"">', 'Password:<input type=""password"" name=""password"" /><br/>', 'Re-enter Password:<input type=""password"" name=""password2""/><br/>', '<input type=""submit"">', '<script>', 'function validate(){', 'var num=document.myform.num.value;', 'if (isNaN(num)){', 'document.getElementById(""numloc"").innerHTML=""Enter Numeric value only"";', 'return false;', 'return true;', '</script>', '<form name=""myform"" onsubmit=""return validate()"" >', 'Number: <input type=""text"" name=""num""><span id=""numloc""></span><br/>', '<input type=""submit"" value=""submit"">', '<script>', 'function validate(){', 'var name=document.f1.name.value;', 'var password=document.f1.password.value;', 'var status=false;', 'if(name.length<1){', 'document.getElementById(""nameloc"").innerHTML=', '"" <img src=\'unchecked.gif\'/> Please enter your name"";', 'status=false;', 'document.getElementById(""nameloc"").innerHTML="" <img src=\'checked.gif\'/>"";', 'status=true;', 'if(password.length<6){', 'document.getElementById(""passwordloc"").innerHTML=', '"" <img src=\'unchecked.gif\'/> Password must be at least 6 char long"";', 'status=false;', 'document.getElementById(""passwordloc"").innerHTML="" <img src=\'checked.gif\'/>"";', 'return status;', '</script>', '<form name=""f1"" action=""#"" onsubmit=""return validate()"">', '<tr><td>Enter Name:</td><td><input type=""text"" name=""name""/>', '<span id=""nameloc""></span></td></tr>', '<tr><td>Enter Password:</td><td><input type=""password"" name=""password""/>', '<span id=""passwordloc""></span></td></tr>', '<tr><td colspan=""2""><input type=""submit"" value=""register""/></td></tr>', '</table>', '<script>', 'function validateemail()', 'var x=document.myform.email.value;', 'var atposition=x.indexOf(""@"");', 'var dotposition=x.lastIndexOf(""."");', 'if (atposition<1 || dotposition<atposition+2 || dotposition+2>=x.length){', 'alert(""Please enter a valid e-mail address \\n atpostion:""+atposition+""\\n dotposition:""+dotposition);', 'return false;', '</script>', '<form name=""myform""  method=""post"" action=""#"" onsubmit=""return validateemail();"">', 'Email: <input type=""text"" name=""email""><br/>', '<input type=""submit"" value=""register"">']",[],[],[]
32,['JavaScript Form Validation'],"['It is important to validate the form submitted by the user because it can have inappropriate values. So, validation is must to authenticate user.']","['https://www.javatpoint.com/javascript-oops-classes', 'https://www.javatpoint.com/javascript-innerText', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/#email', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvalidation1', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvalidation4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvalidation5', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvalidation2', 'https://www.javatpoint.com/None', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=jsvalidation3', 'https://www.javatpoint.com/javascript-oops-classes', 'https://www.javatpoint.com/javascript-innerHTML', 'https://www.javatpoint.com/javascript-oops-classes']",[],[],"['JavaScript Form Validation Example', 'JavaScript Retype Password Validation', 'JavaScript Number Validation', 'JavaScript validation with image', 'JavaScript email validation']",[],[],"['Through JavaScript, we can validate name, password, email, date, mobile numbers and more fields.', 'In this example, we are going to validate the name and password. The name can’t be empty and password can’t be less than 6 characters long.', 'Here, we are validating the form on form submit. The user will not be forwarded to the next page until given values are correct.', ""Let's validate the textfield for numeric value only. Here, we are using isNaN() function."", 'Let’s see an interactive JavaScript form validation example that displays correct and incorrect image if input is correct or incorrect.', 'We can validate the email by the help of JavaScript.', 'There are many criteria that need to be follow to validate the email id such as:', ""Let's see the simple example to validate the email field.""]",['JavaScript provides facility to validate the form on the client-side so data processing will be faster than server-side validation. Most of the web developers prefer JavaScript form validation.'],[],"['<script>', 'function validateform(){', 'var name=document.myform.name.value;', 'var password=document.myform.password.value;', 'if (name==null || name==""""){', 'alert(""Name can\'t be blank"");', 'return false;', '}else if(password.length<6){', 'alert(""Password must be at least 6 characters long."");', 'return false;', '</script>', '<form name=""myform"" method=""post"" action=""abc.jsp"" onsubmit=""return validateform()"" >', 'Name: <input type=""text"" name=""name""><br/>', 'Password: <input type=""password"" name=""password""><br/>', '<input type=""submit"" value=""register"">', '<script type=""text/javascript"">', 'function matchpass(){', 'var firstpassword=document.f1.password.value;', 'var secondpassword=document.f1.password2.value;', 'if(firstpassword==secondpassword){', 'return true;', 'alert(""password must be same!"");', 'return false;', '</script>', '<form name=""f1"" action=""register.jsp"" onsubmit=""return matchpass()"">', 'Password:<input type=""password"" name=""password"" /><br/>', 'Re-enter Password:<input type=""password"" name=""password2""/><br/>', '<input type=""submit"">', '<script>', 'function validate(){', 'var num=document.myform.num.value;', 'if (isNaN(num)){', 'document.getElementById(""numloc"").innerHTML=""Enter Numeric value only"";', 'return false;', 'return true;', '</script>', '<form name=""myform"" onsubmit=""return validate()"" >', 'Number: <input type=""text"" name=""num""><span id=""numloc""></span><br/>', '<input type=""submit"" value=""submit"">', '<script>', 'function validate(){', 'var name=document.f1.name.value;', 'var password=document.f1.password.value;', 'var status=false;', 'if(name.length<1){', 'document.getElementById(""nameloc"").innerHTML=', '"" <img src=\'unchecked.gif\'/> Please enter your name"";', 'status=false;', 'document.getElementById(""nameloc"").innerHTML="" <img src=\'checked.gif\'/>"";', 'status=true;', 'if(password.length<6){', 'document.getElementById(""passwordloc"").innerHTML=', '"" <img src=\'unchecked.gif\'/> Password must be at least 6 char long"";', 'status=false;', 'document.getElementById(""passwordloc"").innerHTML="" <img src=\'checked.gif\'/>"";', 'return status;', '</script>', '<form name=""f1"" action=""#"" onsubmit=""return validate()"">', '<tr><td>Enter Name:</td><td><input type=""text"" name=""name""/>', '<span id=""nameloc""></span></td></tr>', '<tr><td>Enter Password:</td><td><input type=""password"" name=""password""/>', '<span id=""passwordloc""></span></td></tr>', '<tr><td colspan=""2""><input type=""submit"" value=""register""/></td></tr>', '</table>', '<script>', 'function validateemail()', 'var x=document.myform.email.value;', 'var atposition=x.indexOf(""@"");', 'var dotposition=x.lastIndexOf(""."");', 'if (atposition<1 || dotposition<atposition+2 || dotposition+2>=x.length){', 'alert(""Please enter a valid e-mail address \\n atpostion:""+atposition+""\\n dotposition:""+dotposition);', 'return false;', '</script>', '<form name=""myform""  method=""post"" action=""#"" onsubmit=""return validateemail();"">', 'Email: <input type=""text"" name=""email""><br/>', '<input type=""submit"" value=""register"">']",[],[],[]
33,['JavaScript Classes'],"['In JavaScript, classes are the special type of functions. We can define the class just like function declarations and function expressions. ']","['https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptClassDeclarationsExample', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptClassDeclarationsHoistingExample', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptClassDeclarationsRedeclaringClassExample', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptUnnamedClassExpressionExample', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptClassExpressionRedeclaringClassExample', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptNamedClassExpressionExample', 'https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/javascript-objects']","['https://static.javatpoint.com/javascriptpages/images/javascript-oops-classes1.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-oops-classes2.png']",[],"['Class Declarations', 'Class expressions']","['Class Declarations Example', 'Class Declarations Example: Hoisting', 'Class Declarations Example: Re-declaring Class', 'Unnamed Class Expression', 'Class Expression Example: Re-declaring Class', 'Named Class Expression Example']",[],"['The class syntax contains two components:', ""Let's see a simple example of declaring the class."", 'Unlike function declaration, the class declaration is not a part of JavaScript hoisting. So, it is required to declare the class before invoking it.', ""Let's see an example."", 'A class can be declared once only. If we try to declare class more than one time, it throws an error.', ""Let's see an example."", 'The class can be expressed without assigning any name to it.', ""Let's see an example.""]","['The JavaScript class contains various class members within a body including methods or constructor. The class is executed in strict mode. So, the code containing the silent error or mistake throws an error.', 'A class can be defined by using a class declaration. A class keyword is used to declare a class with any particular name. According to JavaScript naming conventions, the name of the class always starts with an uppercase letter.', 'Unlike class declaration, the class expression allows us to re-declare the same class. So, if we try to declare the class more than one time, it throws an error. ', 'We can express the class with the particular name. Here, the scope of the class name is up to the class body. The class is retrieved using class.name property.']","['Another way to define a class is by using a class expression. Here, it is not mandatory to assign the name of the class. So, the class expression can be named or unnamed. The class expression allows us to fetch the class name. However, this will not be possible with class declaration.']","['<script>', 'class Employee', 'constructor(id,name)', 'this.id=id;', 'this.name=name;', 'detail()', 'document.writeln(this.id+"" ""+this.name+""<br>"")', 'var e1=new Employee(101,""Martin Roy"");', 'var e2=new Employee(102,""Duke William"");', 'e1.detail(); //calling method', 'e2.detail();', '</script>', '<script>', 'var e1=new Employee(101,""Martin Roy"");', 'var e2=new Employee(102,""Duke William"");', 'e1.detail(); //calling method', 'e2.detail();', 'class Employee', 'constructor(id,name)', 'this.id=id;', 'this.name=name;', 'detail()', 'document.writeln(this.id+"" ""+this.name+""<br>"")', '</script>', '<script>', 'class Employee', 'constructor(id,name)', 'this.id=id;', 'this.name=name;', 'detail()', 'document.writeln(this.id+"" ""+this.name+""<br>"")', 'var e1=new Employee(101,""Martin Roy"");', 'var e2=new Employee(102,""Duke William"");', 'e1.detail(); //calling method', 'e2.detail();', 'class Employee', '</script>', '<script>', 'var emp = class {', 'constructor(id, name) {', 'this.id = id;', 'this.name = name;', 'document.writeln(emp.name);', '</script>', '<script>', 'var emp=class', 'constructor(id,name)', 'this.id=id;', 'this.name=name;', 'detail()', 'document.writeln(this.id+"" ""+this.name+""<br>"")', 'var e1=new emp(101,""Martin Roy"");', 'var e2=new emp(102,""Duke William"");', 'e1.detail(); //calling method', 'e2.detail();', 'var emp=class', 'constructor(id,name)', 'this.id=id;', 'this.name=name;', 'detail()', 'document.writeln(this.id+"" ""+this.name+""<br>"")', 'var e1=new emp(103,""James Bella"");', 'var e2=new emp(104,""Nick Johnson"");', 'e1.detail(); //calling method', 'e2.detail();', '</script>', '<script>', 'var emp = class Employee {', 'constructor(id, name) {', 'this.id = id;', 'this.name = name;', 'document.writeln(emp.name);', '/*document.writeln(Employee.name);', 'Error occurs on console:', '""ReferenceError: Employee is not defined', '</script>']","['101 Martin Roy', '102 Duke William', 'emp', '101 Martin Roy', '102 Duke William', '103 James Bella', '104 Nick Johnson', 'Employee']",[],['|||Class declarations|||Class expressions|||']
34,['JavaScript Objects'],"['A javaScript object is an entity having state and behavior (properties and method). For example: car, pen, bike, chair, glass, keyboard, monitor etc.']","['https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=object1js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=object2js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=object3js', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=object4js', 'https://www.javatpoint.com/javascript-object-assign-method', 'https://www.javatpoint.com/javascript-object-create-method', 'https://www.javatpoint.com/javascript-object-defineproperty-method', 'https://www.javatpoint.com/javascript-object-defineproperties-method', 'https://www.javatpoint.com/javascript-object-entries-method', 'https://www.javatpoint.com/javascript-object-freeze-method', 'https://www.javatpoint.com/javascript-object-getownpropertydescriptor-method', 'https://www.javatpoint.com/javascript-object-getownpropertydescriptors-method', 'https://www.javatpoint.com/javascript-object-getownpropertynames-method', 'https://www.javatpoint.com/javascript-object-getownpropertysymbols-method', 'https://www.javatpoint.com/javascript-object-getprototypeof-method', 'https://www.javatpoint.com/javascript-object-is-method', 'https://www.javatpoint.com/', 'https://www.javatpoint.com/', 'https://www.javatpoint.com/', 'https://www.javatpoint.com/', 'https://www.javatpoint.com/javascript-object-preventextensions-method', 'https://www.javatpoint.com/javascript-object-seal-method', 'https://www.javatpoint.com/javascript-object-setprototypeof-method', 'https://www.javatpoint.com/javascript-object-values-method', 'https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/javascript-array']",[],[],"['Creating Objects in JavaScript', '1) JavaScript Object by object literal', '2) By creating instance of Object', '3) By using an Object constructor', 'Defining method in JavaScript Object', 'JavaScript Object Methods']",[],"['Output of the above example', 'Output of the above example', 'Output of the above example', 'Output of the above example']","['JavaScript is an object-based language. Everything is an object in JavaScript.', ""JavaScript is template based not class based. Here, we don't create class to get the object. But, we direct create objects."", 'There are 3 ways to create objects.', 'The syntax of creating object using object literal is given below:', 'As you can see, property and value is separated by : (colon).', 'Let’s see the simple example of creating object in JavaScript.', 'The syntax of creating object directly is given below:', 'Here, new keyword is used to create object.', 'Let’s see the example of creating object directly.', 'Here, you need to create function with arguments. Each argument value can be assigned in the current object by using this keyword.', 'The this keyword refers to the current object.', 'The example of creating object by object constructor is given below.', 'We can define method in JavaScript object. But before defining method, we need to add property in the function with same name as method.', 'The example of defining method in object is given below.', 'The various methods of Object are as follows: ']",[],"['Let’s see the simple example of creating object in JavaScript.\n\n<script>\nemp={id:102,name:""Shyam Kumar"",salary:40000}\ndocument.write(emp.id+"" ""+emp.name+"" ""+emp.salary);\n</script>\n\nTest it Now\nOutput of the above example\n\n\n\n\n\n\n\n2) By creating instance of Object\nThe syntax of creating object directly is given below:\n\nvar objectname=new Object();\n\nHere, new keyword is used to create object.\nLet’s see the example of creating object directly.\n\n<script>\nvar emp=new Object();\nemp.id=101;\nemp.name=""Ravi Malik"";\nemp.salary=50000;\ndocument.write(emp.id+"" ""+emp.name+"" ""+emp.salary);\n</script>\n\nTest it Now\nOutput of the above example\n\n\n\n\n3) By using an Object constructor\nHere, you need to create function with arguments. Each argument value can be assigned in the current object by using this keyword.\nThe this keyword refers to the current object.\nThe example of creating object by object constructor is given below.\n\n<script>\nfunction emp(id,name,salary){\nthis.id=id;\nthis.name=name;\nthis.salary=salary;\n}\ne=new emp(103,""Vimal Jaiswal"",30000);\n\ndocument.write(e.id+"" ""+e.name+"" ""+e.salary);\n</script>\n\nTest it Now\nOutput of the above example\n\n\n\n\nDefining method in JavaScript Object\nWe can define method in JavaScript object. But before defining method, we need to add property in the function with same name as method.\nThe example of defining method in object is given below.\n\n<script>\nfunction emp(id,name,salary){\nthis.id=id;\nthis.name=name;\nthis.salary=salary;\n\nthis.changeSalary=changeSalary;\nfunction changeSalary(otherSalary){\nthis.salary=otherSalary;\n}\n}\ne=new emp(103,""Sonoo Jaiswal"",30000);\ndocument.write(e.id+"" ""+e.name+"" ""+e.salary);\ne.changeSalary(45000);\ndocument.write(""""+e.id+"" ""+e.name+"" ""+e.salary);\n</script>\n\nTest it Now\nOutput of the above example\n\n\n\nJavaScript Object Methods\nThe various methods of Object are as follows: \n\n\nS.No\nMethods\nDescription\n\n\n1\nObject.assign()\nThis method is used to copy enumerable and own properties from a source object to a target object\n\n\n2\nObject.create()\nThis method is used to create a new object with the specified prototype object and properties.\n\n\n3\nObject.defineProperty()\nThis method is used to describe some behavioral attributes of the property.\n\n\n4\nObject.defineProperties()\nThis method is used to create or configure multiple object properties.\n\n\n5\nObject.entries()\nThis method returns an array with arrays of the key, value pairs.\n\n\n6\nObject.freeze()\nThis method prevents existing properties from being removed.\n\n\n7\nObject.getOwnPropertyDescriptor()\nThis method returns a property descriptor for the specified property of the specified object.\n\n\n8\nObject.getOwnPropertyDescriptors()\nThis method returns all own property descriptors of a given object.\n\n\n9\nObject.getOwnPropertyNames()\n This method returns an array of all properties (enumerable or not) found.\n\n\n10\nObject.getOwnPropertySymbols()\nThis method returns an array of all own symbol key properties.\n\n\n11\nObject.getPrototypeOf()\nThis method returns the prototype of the specified object.\n\n\n12\nObject.is()\nThis method determines whether two values are the same value.\n\n\n13\nObject.isExtensible()\nThis method determines if an object is extensible\n\n\n14\nObject.isFrozen()\nThis method determines if an object was frozen.\n\n\n15\nObject.isSealed()\nThis method determines if an object is sealed.\n\n\n16\nObject.keys()\nThis method returns an array of a given object\'s own property names.\n\n\n17\nObject.preventExtensions()\nThis method is used to prevent any extensions of an object.\n\n\n18\nObject.seal()\nThis method prevents new properties from being added and marks all existing properties as non-configurable.\n\n\n19\nObject.setPrototypeOf()\nThis method sets the prototype of a specified object to another object.\n\n\n20\nObject.values()\nThis method returns an array of values.\n\n\n\nNext TopicJavascript Array\n\n\n\n← prev\nnext →\n\n\n']","['object={property1:value1,property2:value2.....propertyN:valueN}', '<script>', 'emp={id:102,name:""Shyam Kumar"",salary:40000}', 'document.write(emp.id+"" ""+emp.name+"" ""+emp.salary);', '</script>', 'var objectname=new Object();', '<script>', 'var emp=new Object();', 'emp.id=101;', 'emp.name=""Ravi Malik"";', 'emp.salary=50000;', 'document.write(emp.id+"" ""+emp.name+"" ""+emp.salary);', '</script>', '<script>', 'function emp(id,name,salary){', 'this.id=id;', 'this.name=name;', 'this.salary=salary;', 'e=new emp(103,""Vimal Jaiswal"",30000);', 'document.write(e.id+"" ""+e.name+"" ""+e.salary);', '</script>', '<script>', 'function emp(id,name,salary){', 'this.id=id;', 'this.name=name;', 'this.salary=salary;', 'this.changeSalary=changeSalary;', 'function changeSalary(otherSalary){', 'this.salary=otherSalary;', 'e=new emp(103,""Sonoo Jaiswal"",30000);', 'document.write(e.id+"" ""+e.name+"" ""+e.salary);', 'e.changeSalary(45000);', 'document.write(""""+e.id+"" ""+e.name+"" ""+e.salary);', '</script>']",[],"[""S.No|||Methods|||Description&&&1|||Object.assign()|||This method is used to copy enumerable and own properties from a source object to a target object&&&2|||Object.create()|||This method is used to create a new object with the specified prototype object and properties.&&&3|||Object.defineProperty()|||This method is used to describe some behavioral attributes of the property.&&&4|||Object.defineProperties()|||This method is used to create or configure multiple object properties.&&&5|||Object.entries()|||This method returns an array with arrays of the key, value pairs.&&&6|||Object.freeze()|||This method prevents existing properties from being removed.&&&7|||Object.getOwnPropertyDescriptor()|||This method returns a property descriptor for the specified property of the specified object.&&&8|||Object.getOwnPropertyDescriptors()|||This method returns all own property descriptors of a given object.&&&9|||Object.getOwnPropertyNames()||| This method returns an array of all properties (enumerable or not) found.&&&10|||Object.getOwnPropertySymbols()|||This method returns an array of all own symbol key properties.&&&11|||Object.getPrototypeOf()|||This method returns the prototype of the specified object.&&&12|||Object.is()|||This method determines whether two values are the same value.&&&13|||Object.isExtensible()|||This method determines if an object is extensible&&&14|||Object.isFrozen()|||This method determines if an object was frozen.&&&15|||Object.isSealed()|||This method determines if an object is sealed.&&&16|||Object.keys()|||This method returns an array of a given object's own property names.&&&17|||Object.preventExtensions()|||This method is used to prevent any extensions of an object.&&&18|||Object.seal()|||This method prevents new properties from being added and marks all existing properties as non-configurable.&&&19|||Object.setPrototypeOf()|||This method sets the prototype of a specified object to another object.&&&20|||Object.values()|||This method returns an array of values.""]",[]
35,['JavaScript Prototype Object'],"['JavaScript is a prototype-based language that facilitates the objects to acquire properties and features from one another. Here, each object contains a prototype object.']","['https://www.javatpoint.com/javascript-oops-constructor-method', 'https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptPrototypeObjectExample1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptPrototypeObjectExample2', 'https://www.javatpoint.com/javascript-oops-constructor-method', 'https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/javascript-oops-constructor-method']",['https://static.javatpoint.com/javascriptpages/images/javascript-oops-prototype-object.png'],[],"['Syntax:', 'What is the requirement of a prototype object?', 'Prototype Chaining']","['JavaScript Prototype Object Example 1', 'Example 2']",[],"[""Let's see an example to add a new method to the constructor function."", ""Let's see an example to add a new property to the constructor function.""]","['In JavaScript, whenever a function is created the prototype property is added to that function automatically. This property is a prototype object that holds a constructor property.', 'Whenever an object is created in JavaScript, its corresponding functions are loaded into memory. So, a new copy of the function is created on each object creation.', 'In a prototype-based approach, all the objects share the same function. This ignores the requirement of creating a new copy of function for each object. Thus, the functions are loaded once into the memory.']","[""In JavaScript, each object contains a prototype object that acquires properties and methods from it. Again an object's prototype object may contain a prototype object that also acquires properties and methods, and so on. It can be seen as prototype chaining.""]","['ClassName.prototype.methodName', '<script>', 'function Employee(firstName,lastName)', 'this.firstName=firstName;', 'this.lastName=lastName;', 'Employee.prototype.fullName=function()', 'return this.firstName+"" ""+this.lastName;', 'var employee1=new Employee(""Martin"",""Roy"");', 'var employee2=new Employee(""Duke"", ""William"");', 'document.writeln(employee1.fullName()+""<br>"");', 'document.writeln(employee2.fullName());', '</script>', '<script>', 'function Employee(firstName,lastName)', 'this.firstName=firstName;', 'this.lastName=lastName;', 'Employee.prototype.company=""Javatpoint""', 'var employee1=new Employee(""Martin"",""Roy"");', 'var employee2=new Employee(""Duke"", ""William"");', 'document.writeln(employee1.firstName+"" ""+employee1.lastName+"" ""+employee1.company+""<br>"");', 'document.writeln(employee2.firstName+"" ""+employee2.lastName+"" ""+employee2.company);', '</script>']","['Martin Roy', 'Duke William', 'Martin Roy Javatpoint', 'Duke William Javatpoint']",[],[]
36,['JavaScript Constructor Method'],['A JavaScript constructor method is a special type of method which is used to initialize and create an object. It is called when memory is allocated for an object.'],"['https://www.javatpoint.com/javascript-oops-static-method', 'https://www.javatpoint.com/javascript-oops-prototype-object', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptConstructorMethodExample', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptConstructorMethodsuperkeywordExample', 'https://www.javatpoint.com/javascript-oops-static-method', 'https://www.javatpoint.com/javascript-oops-prototype-object', 'https://www.javatpoint.com/javascript-oops-static-method']",[],[],['Points to remember'],"['Constructor Method Example', 'Constructor Method Example: super keyword']","[""Note - If we didn't specify any constructor method, JavaScript use default constructor method.""]","[""Let's see a simple example of a constructor method."", ""The super keyword is used to call the parent class constructor. Let's see an example.""]",[],[],"['<script>', 'class Employee {', 'constructor() {', 'this.id=101;', 'this.name = ""Martin Roy"";', 'var emp = new Employee();', 'document.writeln(emp.id+"" ""+emp.name);', '</script>', '<script>', 'class CompanyName', 'constructor()', 'this.company=""Javatpoint"";', 'class Employee extends CompanyName {', 'constructor(id,name) {', 'super();', 'this.id=id;', 'this.name=name;', 'var emp = new Employee(1,""John"");', 'document.writeln(emp.id+"" ""+emp.name+"" ""+emp.company);', '</script>']","['101 Martin Roy', '1 John Javatpoint']",[],['|||The constructor keyword is used to declare a constructor method.|||The class can contain one constructor method only.|||JavaScript allows us to use parent class constructor through super keyword.|||']
37,['JavaScript static Method'],"['The JavaScript provides static methods that belong to the class instead of an instance of that class. So, an instance is not required to call the static method. These methods are called directly on the class itself.']","['https://www.javatpoint.com/javascript-oops-encapsulation', 'https://www.javatpoint.com/javascript-oops-constructor-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptstaticMethodExample1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptstaticMethodExample2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptstaticMethodExample3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptstaticMethodExample4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptstaticMethodExample5', 'https://www.javatpoint.com/javascript-oops-encapsulation', 'https://www.javatpoint.com/javascript-oops-constructor-method', 'https://www.javatpoint.com/javascript-oops-encapsulation']",[],[],['Points to remember'],"['JavaScript static Method Example 1', 'Example 2', 'Example 3', 'Example 4', 'Example 5']",[],"[""Let's see a simple example of a static method."", ""Le's see an example to invoke more than one static method."", ""Let's see an example to invoke more than one static method with similar names."", ""Let's see an example to invoke a static method within the constructor."", ""Let's see an example to invoke a static method within the non-static method.""]",[],[],"['<script>', 'class Test', 'static display()', 'return ""static method is invoked""', 'document.writeln(Test.display());', '</script>', '<script>', 'class Test', 'static display1()', 'return ""static method is invoked""', 'static display2()', 'return ""static method is invoked again""', 'document.writeln(Test.display1()+""<br>"");', 'document.writeln(Test.display2());', '</script>', '<script>', 'class Test', 'static display()', 'return ""static method is invoked""', 'static display()', 'return ""static method is invoked again""', 'document.writeln(Test.display());', '</script>', '<script>', 'class Test {', 'constructor() {', 'document.writeln(Test.display()+""<br>"");', 'document.writeln(this.constructor.display());', 'static display() {', 'return ""static method is invoked""', 'var t=new Test();', '</script>', '<script>', 'class Test {', 'static display() {', 'return ""static method is invoked""', 'show() {', 'document.writeln(Test.display()+""<br>"");', 'var t=new Test();', 't.show();', '</script>']","['static method is invoked', 'static method is invoked', 'static method is invoked again', 'static method is invoked again', 'static method is invoked', 'static method is invoked', 'static method is invoked']",[],"['|||The static keyword is used to declare a static method.|||The static method can be of any name.|||A class can contain more than one static method.|||If we declare more than one static method with a similar name, the JavaScript always invokes the last one.|||The static method can be used to create utility functions.|||We can use this keyword to call a static method within another static method.|||We cannot use this keyword directly to call a static method within the non-static method. In such case, we can call the static method either using the class name or as the property of the constructor.|||']"
38,['JavaScript Encapsulation'],['The JavaScript Encapsulation is a process of binding the data (i.e. variables) with the functions acting on that data. It allows us to control the data and validate it. To achieve an encapsulation in JavaScript: -'],"['https://www.javatpoint.com/javascript-oops-inheritance', 'https://www.javatpoint.com/javascript-oops-static-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptEncapsulationExample', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptEncapsulationValidateExample', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptEncapsulationPrototypebasedapproachExample', 'https://www.javatpoint.com/javascript-oops-inheritance', 'https://www.javatpoint.com/javascript-oops-static-method', 'https://www.javatpoint.com/javascript-oops-inheritance']",[],[],[],"['JavaScript Encapsulation Example', 'JavaScript Encapsulation Example: Validate', 'JavaScript Encapsulation Example: Prototype-based approach']",[],"['The encapsulation allows us to handle an object using the following properties:', 'Read/Write - Here, we use setter methods to write the data and getter methods read that data.', 'Read Only - In this case, we use getter methods only.', 'Write Only - In this case, we use setter methods only.', ""Let's see a simple example of encapsulation that contains two data members with its setter and getter methods. "", 'In this example, we validate the marks of the student.', 'Here, we perform prototype-based encapsulation.']",[],[],"['<script>', 'class Student', 'constructor()', 'var name;', 'var marks;', 'getName()', '{', 'return this.name;', '}', 'setName(name)', '{', 'this.name=name;', '}', 'getMarks()', '{', 'return this.marks;', '}', 'setMarks(marks)', 'this.marks=marks;', 'var stud=new Student();', 'stud.setName(""John"");', 'stud.setMarks(80);', 'document.writeln(stud.getName()+"" ""+stud.getMarks());', '</script>', '<script>', 'class Student', 'constructor()', 'var name;', 'var marks;', 'getName()', '{', 'return this.name;', '}', 'setName(name)', '{', 'this.name=name;', '}', 'getMarks()', '{', 'return this.marks;', '}', 'setMarks(marks)', 'if(marks<0||marks>100)', '{', 'alert(""Invalid Marks"");', '}', 'else', '{', 'this.marks=marks;', '}', 'var stud=new Student();', 'stud.setName(""John"");', 'stud.setMarks(110);//alert() invokes', 'document.writeln(stud.getName()+"" ""+stud.getMarks());', '</script>', '<script>', 'function Student(name,marks)', 'var s_name=name;', 'var s_marks=marks;', 'Object.defineProperty(this,""name"",{', 'get:function()', 'return s_name;', 'set:function(s_name)', 'this.s_name=s_name;', 'Object.defineProperty(this,""marks"",{', 'get:function()', 'return s_marks;', 'set:function(s_marks)', 'this.s_marks=s_marks;', 'var stud=new Student(""John"",80);', 'document.writeln(stud.name+"" ""+stud.marks);', '</script>']","['John 80', 'John undefined', 'John 80']",[],['|||Use var keyword to make data members private.|||Use setter methods to set the data and getter methods to get that data.|||']
39,['JavaScript Inheritance'],['The JavaScript inheritance is a mechanism that allows us to create new classes on the basis of already existing classes. It provides flexibility to the child class to reuse the methods and variables of a parent class.'],"['https://www.javatpoint.com/javascript-oops-polymorphism', 'https://www.javatpoint.com/javascript-oops-encapsulation', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptextendsinbuiltobjectExample1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptextendsinbuiltobjectExample2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptextendsCustomclassExample', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptextendsaPrototypebasedapproachExample1', 'https://www.javatpoint.com/javascript-oops-encapsulation', 'https://www.javatpoint.com/javascript-oops-encapsulation', 'https://www.javatpoint.com/javascript-oops-polymorphism']",[],[],['Points to remember'],"['JavaScript extends Example: inbuilt object', 'JavaScript extends Example: Custom class', 'JavaScript extends Example: a Prototype-based approach']",[],"[""In this example, we extends Date object to display today's date."", ""Let's see one more example to display the year value from the given date."", 'In this example, we declare sub-class that extends the properties of its parent class.', 'Here, we perform prototype-based inheritance. In this approach, there is no need to use class and extends keywords.']",['The JavaScript extends keyword is used to create a child class on the basis of a parent class. It facilitates child class to acquire all the properties and behavior of its parent class.'],[],"['<script>', 'class Moment extends Date {', 'constructor() {', 'super();', 'var m=new Moment();', 'document.writeln(""Current date:"")', 'document.writeln(m.getDate()+""-""+(m.getMonth()+1)+""-""+m.getFullYear());', '</script>', '<script>', 'class Moment extends Date {', 'constructor(year) {', 'super(year);', 'var m=new Moment(""August 15, 1947 20:22:10"");', 'document.writeln(""Year value:"")', 'document.writeln(m.getFullYear());', '</script>', '<script>', 'class Bike', 'constructor()', 'this.company=""Honda"";', 'class Vehicle extends Bike {', 'constructor(name,price) {', 'super();', 'this.name=name;', 'this.price=price;', 'var v = new Vehicle(""Shine"",""70000"");', 'document.writeln(v.company+"" ""+v.name+"" ""+v.price);', '</script>', '<script>', 'function Bike(company)', 'this.company=company;', 'Bike.prototype.getCompany=function()', 'return this.company;', 'function Vehicle(name,price) {', 'this.name=name;', 'this.price=price;', 'var bike = new Bike(""Honda"");', 'Vehicle.prototype=bike; //Now Bike treats as a parent of Vehicle.', 'var vehicle=new Vehicle(""Shine"",70000);', 'document.writeln(vehicle.getCompany()+"" ""+vehicle.name+"" ""+vehicle.price);', '</script>']","['Current date: 31-8-2018', 'Year value: 1947', 'Honda Shine 70000', 'Honda Shine 70000']",[],"['|||It maintains an IS-A relationship.|||The extends keyword is used in class expressions or class declarations.|||Using extends keyword, we can acquire all the properties and behavior of the inbuilt object as well as custom classes.|||We can also use a prototype-based approach to achieve inheritance. |||']"
40,['JavaScript Polymorphism'],"['The polymorphism is a core concept of an object-oriented paradigm that provides a way to perform a single action in different forms. It provides an ability to call the same method on different JavaScript objects. As JavaScript is not a type-safe language, we can pass any type of data members with the methods. ']","['https://www.javatpoint.com/javascript-oops-abstraction', 'https://www.javatpoint.com/javascript-oops-inheritance', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptPolymorphismExample1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptPolymorphismExample2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptPolymorphismExample3', 'https://www.javatpoint.com/javascript-oops-abstraction', 'https://www.javatpoint.com/javascript-oops-inheritance', 'https://www.javatpoint.com/javascript-oops-abstraction']",[],[],[],"['JavaScript Polymorphism Example 1', 'Example 2', 'Example 3']",[],"[""Let's see an example where a child class object invokes the parent class method."", ""Let's see an example where a child and parent class contains the same method. Here, the object of child class invokes both classes method."", ""Let's see the same example with prototype-based approach.""]",[],[],"['<script>', 'class A', 'display()', 'document.writeln(""A is invoked"");', 'class B extends A', 'var b=new B();', 'b.display();', '</script>', '<script>', 'class A', 'display()', 'document.writeln(""A is invoked<br>"");', 'class B extends A', 'display()', 'document.writeln(""B is invoked"");', 'var a=[new A(), new B()]', 'a.forEach(function(msg)', 'msg.display();', '</script>', '<script>', 'function A()', 'A.prototype.display=function()', 'return ""A is invoked"";', 'function B()', 'B.prototype=Object.create(A.prototype);', 'var a=[new A(), new B()]', 'a.forEach(function(msg)', 'document.writeln(msg.display()+""<br>"");', '<script>']","['A is invoked', 'A is invoked', 'B is invoked', 'A is invoked', 'B is invoked']",[],[]
41,['JavaScript Abstraction'],"['An abstraction is a way of hiding the implementation details and showing only the functionality to the users. In other words, it ignores the irrelevant details and shows only the required one. ']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/javascript-oops-polymorphism', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptAbstractionExample2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptAbstractionExample3', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/javascript-oops-polymorphism', 'https://www.javatpoint.com/#']",['https://static.javatpoint.com/javascriptpages/images/javascript-oops-abstraction1.png'],[],"['Points to remember', 'JavaScript Abstraction Example']","['Example 1', 'Example 2', 'Example 3']",[],"[""Let's check whether we can create an instance of Abstract class or not."", ""Let's see an example to achieve abstraction."", 'In this example, we use instanceof operator to test whether the object refers to the corresponding class.']",[],[],"['<script>', 'function Vehicle()', 'this.vehicleName= vehicleName;', 'throw new Error(""You cannot create an instance of Abstract class"");', 'Vehicle.prototype.display=function()', 'return this.vehicleName;', 'var vehicle=new Vehicle();', '</script>', '<script>', 'function Vehicle()', 'this.vehicleName=""vehicleName"";', 'throw new Error(""You cannot create an instance of Abstract Class"");', 'Vehicle.prototype.display=function()', 'return ""Vehicle is: ""+this.vehicleName;', 'function Bike(vehicleName)', 'this.vehicleName=vehicleName;', 'Bike.prototype=Object.create(Vehicle.prototype);', 'var bike=new Bike(""Honda"");', 'document.writeln(bike.display());', '</script>', '<script>', 'function Vehicle()', 'this.vehicleName=vehicleName;', 'throw new Error(""You cannot create an instance of Abstract class"");', 'function Bike(vehicleName)', 'this.vehicleName=vehicleName;', 'Bike.prototype=Object.create(Vehicle.prototype);', 'var bike=new Bike(""Honda"");', 'document.writeln(bike instanceof Vehicle);', 'document.writeln(bike instanceof Bike);', '</script>']","['Vehicle is: Honda', 'true true']",[],['|||We cannot create an instance of Abstract Class.|||It reduces the duplication of code.|||']
42,['JavaScript Cookies'],['A cookie is an amount of information that persists between a server-side and a client-side. A web browser stores this information at the time of browsing.'],"['https://www.javatpoint.com/javascript-cookie-attributes', 'https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-cookie-attributes', 'https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-cookie-attributes']",['https://static.javatpoint.com/javascriptpages/images/javascript-cookies.png'],[],"['How Cookies Works?', 'How to create a Cookie in JavaScript?', 'JavaScript Cookie Example']","['Example 1', 'Example 2', 'Example 3']",[],"['In JavaScript, we can create, read, update and delete a cookie by using document.cookie property.', 'The following syntax is used to create a cookie:', ""Let's see an example to set and get a cookie."", ""Here, we display the cookie's name-value pair separately.""]","[""A cookie contains the information as a string generally in the form of a name-value pair separated by semi-colons. It maintains the state of a user and remembers the user's information among all the web pages."", ""In this example, we provide choices of color and pass the selected color value to the cookie. Now, cookie stores the last choice of a user in a browser. So, on reloading the web page, the user's last choice will be shown on the screen.""]",[],"['document.cookie=""name=value"";', '<!DOCTYPE html>', '</head>', '<input type=""button"" value=""setCookie"" onclick=""setCookie()"">', '<input type=""button"" value=""getCookie"" onclick=""getCookie()"">', '<script>', 'function setCookie()', 'document.cookie=""username=Duke Martin"";', 'function getCookie()', 'if(document.cookie.length!=0)', '{', 'alert(document.cookie);', '}', 'else', '{', 'alert(""Cookie not available"");', '}', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<input type=""button"" value=""setCookie"" onclick=""setCookie()"">', '<input type=""button"" value=""getCookie"" onclick=""getCookie()"">', '<script>', 'function setCookie()', 'document.cookie=""username=Duke Martin"";', 'function getCookie()', 'if(document.cookie.length!=0)', '{', 'var array=document.cookie.split(""="");', 'alert(""Name=""+array[0]+"" ""+""Value=""+array[1]);', '}', 'else', '{', 'alert(""Cookie not available"");', '}', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<select id=""color"" onchange=""display()"">', '<option value=""Select Color"">Select Color</option>', '<option value=""yellow"">Yellow</option>', '<option value=""green"">Green</option>', '<option value=""red"">Red</option>', '</select>', '<script type=""text/javascript"">', 'function display()', '{', 'var value = document.getElementById(""color"").value;', 'if (value != ""Select Color"")', '{', 'document.bgColor = value;', 'document.cookie = ""color="" + value;', '}', '}', 'window.onload = function ()', '{', 'if (document.cookie.length != 0)', '{', 'var array = document.cookie.split(""="");', 'document.getElementById(""color"").value = array[1];', 'document.bgColor = array[1];', '}', '}', '', '', '</script>', '</body>', '</html>']",[],[],"['|||When a user sends a request to the server, then each of that request is treated as a new request sent by the different user.|||So, to recognize the old user, we need to add the cookie with the response from the server. |||browser at the client-side.|||Now, whenever a user sends a request to the server, the cookie is added with that request automatically. Due to the cookie, the server recognizes the users.|||']"
43,['Cookie Attributes'],"['JavaScript provides some optional attributes that enhance the functionality of cookies. Here, is the list of some attributes with their description.']","['https://www.javatpoint.com/javascript-cookie-with-multiple-name', 'https://www.javatpoint.com/javascript-cookies', 'https://www.javatpoint.com/javascript-cookie-with-multiple-name', 'https://www.javatpoint.com/javascript-cookies', 'https://www.javatpoint.com/javascript-cookie-with-multiple-name']",['https://static.javatpoint.com/javascriptpages/images/javascript-cookie-attributes.png'],[],"['Cookie expires attribute', 'Cookie max-age attribute', 'Cookie path attribute', 'Cookie path attribute Example', 'Cookie domain attribute']",[],[],"[""Let's see an example of cookie expires attribute."", ""Let's see an example of cookie max-age attribute."", ""Let's understand the path attribute with the help of an example."", 'Here, the cookie is valid for the given domain and all its sub-domains.', 'However, if we provide any sub-domain to the attribute such like:', ""Here, the cookie is valid only for the given sub-domain. So, it's a better approach to provide domain name instead of sub-domain.""]","['The cookie expires attribute provides one of the ways to create a persistent cookie. Here, a date and time are declared that represents the active period of a cookie. Once the declared time is passed, a cookie is deleted automatically.', 'The cookie max-age attribute provides another way to create a persistent cookie. Here, time is declared in seconds. A cookie is valid up to the declared time only. ', 'If a cookie is created for a webpage, by default, it is valid only for the current directory and sub-directory. JavaScript provides a path attribute to expand the scope of cookie up to all the pages of a website.', 'Here, if we create a cookie for webpage2.html, it is valid only for itself and its sub-directory (i.e., webpage3.html). It is not valid for webpage1.html file.', ""A JavaScript domain attribute specifies the domain for which the cookie is valid. Let's suppose if we provide any domain name to the attribute such like:""]","['In this example, we use path attribute to enhance the visibility of cookies up to all the pages. Here, you all just need to do is to maintain the above directory structure and put the below program in all three web pages. Now, the cookie is valid for each web page.']","['<!DOCTYPE html>', '</head>', '<input type=""button"" value=""setCookie"" onclick=""setCookie()"">', '<input type=""button"" value=""getCookie"" onclick=""getCookie()"">', '<script>', 'function setCookie()', 'document.cookie=""username=Duke Martin;expires=Sun, 20 Aug 2030 12:00:00 UTC"";', 'function getCookie()', 'if(document.cookie.length!=0)', '{', 'var array=document.cookie.split(""="");', 'alert(""Name=""+array[0]+"" ""+""Value=""+array[1]);', '}', 'else', '{', 'alert(""Cookie not available"");', '}', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<input type=""button"" value=""setCookie"" onclick=""setCookie()"">', '<input type=""button"" value=""getCookie"" onclick=""getCookie()"">', '<script>', 'function setCookie()', 'document.cookie=""username=Duke Martin;max-age="" + (60 * 60 * 24 * 365) + "";""', 'function getCookie()', 'if(document.cookie.length!=0)', '{', 'var array=document.cookie.split(""="");', 'alert(""Name=""+array[0]+"" ""+""Value=""+array[1]);', '}', 'else', '{', 'alert(""Cookie not available"");', '}', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<input type=""button"" value=""setCookie"" onclick=""setCookie()"">', '<input type=""button"" value=""getCookie"" onclick=""getCookie()"">', '<script>', 'function setCookie()', 'document.cookie=""username=Duke Martin;max-age="" + (60 * 60 * 24 * 365) + "";path=/;""', 'function getCookie()', 'if(document.cookie.length!=0)', '{', 'var array=document.cookie.split(""="");', 'alert(""Name=""+array[0]+"" ""+""Value=""+array[1]);', '}', 'else', '{', 'alert(""Cookie not available"");', '}', '</script>', '</body>', '</html>', 'domain=javatpoint.com', 'omain=training.javatpoint.com']",[],"['Attributes|||Description&&&expires|||It maintains the state of a cookie up to the specified date and time.&&&max-age|||It maintains the state of a cookie up to the specified time. Here, time is given in seconds.&&&path|||It expands the scope of the cookie to all the pages of a website.&&&domain|||It is used to specify the domain for which the cookie is valid.']",[]
44,['Cookie with multiple Name-Value pairs'],"['In JavaScript, a cookie can contain only a single name-value pair. However, to store more than one name-value pair, we can use the following approach: -']","['https://www.javatpoint.com/javascript-deleting-cookies', 'https://www.javatpoint.com/javascript-cookie-attributes', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptCookiewithmultipleNameExample1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptCookiewithmultipleNameExample2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptCookiewithmultipleNameExample3', 'https://www.javatpoint.com/javascript-deleting-cookies', 'https://www.javatpoint.com/javascript-cookie-attributes', 'https://www.javatpoint.com/javascript-deleting-cookies']","['https://static.javatpoint.com/javascriptpages/images/javascript-cookie-with-multiple-name.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-cookie-with-multiple-name2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-cookie-with-multiple-name3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-cookie-with-multiple-name4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-cookie-with-multiple-name5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-cookie-with-multiple-name6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-cookie-with-multiple-name7.png']",[],['Examples to Store Name-Value pair in a Cookie'],"['Example 1', 'Example 2', 'Example 3']",[],"[""Let's see an example to check whether a cookie contains more than one name-value pair."", 'On clicking Get Cookie button, the below dialog box appears.', 'Here, we can see that only a single name-value is displayed.', 'However, if you click, Get Cookie without filling the form, the below dialog box appears.', ""Let's see an example to store different name-value pairs in a cookie using JSON."", 'On clicking Get Cookie button, the below dialog box appears.', 'Here, we can see that all the stored name-value pairs are displayed.', ""Let's see an example to store each name-value pair in a different cookie."", 'On clicking Get Cookie button, the below dialog box appears.', 'Here, also we can see that all the stored name-value pairs are displayed.']",[],[],"['<!DOCTYPE html>', '</head>', 'Name: <input type=""text"" id=""name""><br>', 'Email: <input type=""email"" id=""email""><br>', 'Course: <input type=""text"" id=""course""><br>', '<input type=""button"" value=""Set Cookie"" onclick=""setCookie()"">', '<input type=""button"" value=""Get Cookie"" onclick=""getCookie()"">', '<script>', 'function setCookie()', 'var info=""Name=""+ document.getElementById(""name"").value+"";Email=""+document.getElementById(""email"").value+"";Course=""+document.getElementById(""course"").value;', 'document.cookie=info;', 'function getCookie()', 'if(document.cookie.length!=0)', '{', 'alert(document.cookie);', '}', 'else', '{', 'alert(""Cookie not available"")', '}', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', 'Name: <input type=""text"" id=""name""><br>', 'Email: <input type=""email"" id=""email""><br>', 'Course: <input type=""text"" id=""course""><br>', '<input type=""button"" value=""Set Cookie"" onclick=""setCookie()"">', '<input type=""button"" value=""Get Cookie"" onclick=""getCookie()"">', '<script>', 'function setCookie()', 'var obj = {};//Creating custom object', 'obj.name = document.getElementById(""name"").value;', 'obj.email = document.getElementById(""email"").value;', 'obj.course = document.getElementById(""course"").value;', 'var jsonString = JSON.stringify(obj);', 'document.cookie = jsonString;', 'function getCookie()', 'if( document.cookie.length!=0)', 'var obj = JSON.parse(document.cookie);', 'alert(""Name=""+obj.name+"" ""+""Email=""+obj.email+"" ""+""Course=""+obj.course);', 'else', 'alert(""Cookie not available"");', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', 'Name: <input type=""text"" id=""name""><br>', 'Email: <input type=""email"" id=""email""><br>', 'Course: <input type=""text"" id=""course""><br>', '<input type=""button"" value=""Set Cookie"" onclick=""setCookie()"">', '<input type=""button"" value=""Get Cookie"" onclick=""getCookie()"">', '<script>', 'function setCookie()', 'document.cookie = ""name="" + document.getElementById(""name"").value;', 'document.cookie = ""email="" + document.getElementById(""email"").value;', 'document.cookie = ""course="" + document.getElementById(""course"").value;', 'function getCookie()', 'if (document.cookie.length != 0)', 'alert(""Name=""+document.getElementById(""name"").value+"" Email=""+document.getElementById(""email"").value+"" Course=""+document.getElementById(""course"").value);', '}', 'else', 'alert(""Cookie not available"");', '</script>', '</body>', '</html>']",[],[],"['|||Serialize the custom object in a JSON string, parse it and then store in a cookie.|||For each name-value pair, use a separate cookie.|||']"
45,['Deleting a Cookie in JavaScript'],"['In the previous section, we learned the different ways to set and update a cookie in JavaScript. Apart from that, JavaScript also allows us to delete a cookie. Here, we see all the possible ways to delete a cookie.']","['https://www.javatpoint.com/javascript-events', 'https://www.javatpoint.com/javascript-cookie-with-multiple-name', 'https://www.javatpoint.com/javascript-Events', 'https://www.javatpoint.com/javascript-cookie-with-multiple-name', 'https://www.javatpoint.com/javascript-events']","['https://static.javatpoint.com/javascriptpages/images/javascript-deleting-a-cookie.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-deleting-a-cookie2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-deleting-a-cookie3.png']",[],"['Different ways to delete a Cookie', 'Examples to delete a Cookie']","['Example 1', 'Example 2', 'Example 3', 'Example 4']",[],"['These are the following ways to delete a cookie:', 'In this example, we use expire attribute to delete a cookie by providing expiry date (i.e. any past date) to it.', 'In this example, we use max-age attribute to delete a cookie by providing zero or negative number (that represents seconds) to it.', ""Let's see an example to set, get and delete multiple cookies."", ""Let's see an example to delete a cookie explicitly."", 'After clicking Set Cookie once, whenever we click Get Cookie, the cookies key and value is displayed on the screen.', 'To delete a cookie explicitly, follow the following steps:', 'Now, on clicking Get Cookie, the below dialog box appears.', 'Here, we can see that the cookies are deleted.']",[],[],"['<!DOCTYPE html>', '<input type=""button"" value=""Set Cookie"" onclick=""setCookie()"">', '<input type=""button"" value=""Get Cookie"" onclick=""getCookie()"">', '<script>', 'function setCookie()', 'document.cookie=""name=Martin Roy; expires=Sun, 20 Aug 2000 12:00:00 UTC"";', 'function getCookie()', 'if(document.cookie.length!=0)', 'alert(document.cookie);', 'else', 'alert(""Cookie not avaliable"");', '</script>', '<!DOCTYPE html>', '<input type=""button"" value=""Set Cookie"" onclick=""setCookie()"">', '<input type=""button"" value=""Get Cookie"" onclick=""getCookie()"">', '<script>', 'function setCookie()', 'document.cookie=""name=Martin Roy;max-age=0"";', 'function getCookie()', 'if(document.cookie.length!=0)', 'alert(document.cookie);', 'else', 'alert(""Cookie not avaliable"");', '</script>', '<!DOCTYPE html>', '<input type=""button"" value=""Set Cookie1"" onclick=""setCookie1()"">', '<input type=""button"" value=""Get Cookie1"" onclick=""getCookie1()"">', '<input type=""button"" value=""Delete Cookie1"" onclick=""deleteCookie1()"">', '<input type=""button"" value=""Set Cookie2"" onclick=""setCookie2()"">', '<input type=""button"" value=""Get Cookie2"" onclick=""getCookie2()"">', '<input type=""button"" value=""Delete Cookie2"" onclick=""deleteCookie2()"">', '<input type=""button"" value=""Display all cookies"" onclick=""displayCookie()"">', '<script>', 'function setCookie1()', 'document.cookie=""name=Martin Roy"";', 'cookie1=  document.cookie;', 'function setCookie2()', 'document.cookie=""name=Duke William"";', 'cookie2=  document.cookie;', 'function getCookie1()', 'if(cookie1.length!=0)', 'alert(cookie1);', 'else', 'alert(""Cookie not available"");', 'function getCookie2()', 'if(cookie2.length!=0)', 'alert(cookie2);', 'else', 'alert(""Cookie not available"");', 'function deleteCookie1()', 'document.cookie=cookie1+"";max-age=0"";', 'cookie1=document.cookie;', 'alert(""Cookie1 is deleted"");', 'function deleteCookie2()', 'document.cookie=cookie2+"";max-age=0"";', 'cookie2=document.cookie;', 'alert(""Cookie2 is deleted"");', 'function displayCookie()', 'if(cookie1!=0&&cookie2!=0)', 'alert(cookie1+"" ""+cookie2);', 'else if(cookie1!=0)', 'alert(cookie1);', 'else if(cookie2!=0)', 'alert(cookie2);', 'alert(""Cookie not available"");', '</script>', '<!DOCTYPE html>', '<input type=""button"" value=""Set Cookie"" onclick=""setCookie()"">', '<input type=""button"" value=""Get Cookie"" onclick=""getCookie()"">', '<script>', 'function setCookie()', 'document.cookie=""name=Martin Roy"";', 'function getCookie()', 'if(document.cookie.length!=0)', 'alert(document.cookie);', 'else', 'alert(""Cookie not avaliable"");', '</script>']",[],[],"['|||A cookie can be deleted by using expire attribute.|||A cookie can also be deleted by using max-age attribute.|||We can delete a cookie explicitly, by using a web browser.||||||Open Mozilla Firefox.|||Click Open menu - Library - History - Clear Recent History - Details.||||||Here we can see a Cookies checkbox which is already marked. Now, click Clear Now to delete the cookies explicitly.|||']"
46,['JavaScript Events'],"['The change in the state of an object is known as an Event. In html, there are various events which represents that some activity is performed by the user or by the browser. When javascript code is included in HTML, js react over these events and allow the execution. This process of reacting over the events is called Event Handling. Thus, js handles the HTML events via Event Handlers.']","['https://www.javatpoint.com/javascript-addeventlistener', 'https://www.javatpoint.com/javascript-deleting-cookies', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptClickEvent', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptMouseOverEvent', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptFocusEvent', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptKeydownEvent', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptLoadEvent', 'https://www.javatpoint.com/javascript-addeventlistener', 'https://www.javatpoint.com/javascript-deleting-cookies', 'https://www.javatpoint.com/javascript-addeventlistener']",[],[],[],[],[],"['For example, when a user clicks over the browser, add js code, which will execute the task to be performed on the event.', 'Some of the HTML events and their event handlers are:', ""Let's discuss some examples over events and their handlers.""]",[],[],"['<head> Javascript Events </head>', '<script language=""Javascript"" type=""text/Javascript"">', 'function clickevent()', 'document.write(""This is JavaTpoint"");', '</script>', '<input type=""button"" onclick=""clickevent()"" value=""Who\'s this?""/>', '</form>', '</body>', '</html>', '<head>', '<h1> Javascript Events </h1>', '</head>', '<script language=""Javascript"" type=""text/Javascript"">', 'function mouseoverevent()', 'alert(""This is JavaTpoint"");', '</script>', '<p onmouseover=""mouseoverevent()""> Keep cursor over me</p>', '</body>', '</html>', '<head> Javascript Events</head>', '<h2> Enter something here</h2>', '<input type=""text"" id=""input1"" onfocus=""focusevent()""/>', '<script>', 'function focusevent()', 'document.getElementById(""input1"").style.background="" aqua"";', '</script>', '</body>', '</html>', '<head> Javascript Events</head>', '<h2> Enter something here</h2>', '<input type=""text"" id=""input1"" onkeydown=""keydownevent()""/>', '<script>', 'function keydownevent()', 'document.getElementById(""input1"");', 'alert(""Pressed a key"");', '</script>', '</body>', '</html>', '<head>Javascript Events</head>', '<body onload=""window.alert(\'Page successfully loaded\');"">', '<script>', 'document.write(""The page is loaded successfully"");', '</script>', '</body>', '</html>']",[],"['Event Performed|||Event Handler|||Description&&&click|||onclick|||When mouse click on an element&&&mouseover|||onmouseover|||When the cursor of the mouse comes over the element&&&mouseout|||onmouseout|||When the cursor of the mouse leaves an element&&&mousedown|||onmousedown|||When the mouse button is pressed over the element&&&mouseup|||onmouseup|||When the mouse button is released over the element&&&mousemove|||onmousemove|||When the mouse movement takes place.', 'Event Performed|||Event Handler|||Description&&&Keydown & Keyup|||onkeydown & onkeyup|||When the user press and then release the key', 'Event Performed|||Event Handler|||Description&&&focus|||onfocus|||When the user focuses on an element&&&submit|||onsubmit|||When the user submits the form&&&blur|||onblur|||When the focus is away from a form element&&&change|||onchange|||When the user modifies or changes the value of a form element', 'Event Performed|||Event Handler|||Description&&&load|||onload|||When the browser finishes the loading of the page&&&unload|||onunload|||When the visitor leaves the current webpage, the browser unloads it&&&resize|||onresize|||When the visitor resizes the window of the browser']",[]
47,['JavaScript addEventListener()'],"[""The addEventListener() method is used to attach an event handler to a particular element. It does not override the existing event handlers. Events are said to be an essential part of the JavaScript. A web page responds according to the event that occurred. Events can be user-generated or generated by API's. An event listener is a JavaScript's procedure that waits for the occurrence of an event.""]","['https://www.javatpoint.com/javascript-onclick-event', 'https://www.javatpoint.com/javascript-events', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-addeventlistener1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-addeventlistener2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-addeventlistener3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-addeventlistener4', 'https://www.javatpoint.com/javascript-onclick-event', 'https://www.javatpoint.com/javascript-events', 'https://www.javatpoint.com/javascript-onclick-event']","['https://static.javatpoint.com/javascriptpages/images/javascript-addeventlistener1.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-addeventlistener2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-addeventlistener3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-addeventlistener4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-addeventlistener5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-addeventlistener6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-addeventlistener7.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-addeventlistener8.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-addeventlistener9.png']",[],['Event Bubbling or Event Capturing'],"['Syntax', 'Parameter Values', 'Example', 'Example', 'Example', 'Example']","['Note: Do not use any prefix such as ""on"" with the parameter value. For example, Use ""click"" instead of using ""onclick"".']","[""event: It is a required parameter. It can be defined as a string that specifies the event's name."", 'function: It is also a required parameter. It is a JavaScript function which responds to the event occur.', ""Let's see some of the illustrations of using the addEventListener() method."", 'It is a simple example of using the addEventListener() method. We have to click the given HTML button to see the effect.', 'After clicking the given HTML button, the output will be -', 'Now, in the next example we will see how to add many events to the same element without overwriting the existing events.', 'In this example, we are adding multiple events to the same element.', 'Now, when we click the button, an alert will be displayed. After clicking the given HTML button, the output will be -', 'When we exit the alert, the output is -', 'In this example, we are adding multiple events of a different type to the same element.', 'When we move the cursor over the button, the output will be -', 'After clicking the button and leave the cursor, the output will be -', ""Now, we understand the use of the third parameter of JavaScript's addEventListener(), i.e., useCapture."", 'In HTML DOM, Bubbling and Capturing are the two ways of event propagation. We can understand these ways by taking an example.', 'We can understand the bubbling and capturing using an illustration.', 'We have to double click the specific elements to see the effect.']","['The addEventListener() method is an inbuilt function of JavaScript. We can add multiple event handlers to a particular element without overwriting the existing event handlers.', 'Although it has three parameters, the parameters event and function are widely used. The third parameter is optional to define. The values of this function are defined as follows.', ""So, in Bubbling, the event of paragraph element is handled first, and then the div element's event is handled. It means that in bubbling, the inner element's event is handled first, and then the outermost element's event will be handled."", ""In Capturing the event of div element is handled first, and then the paragraph element's event is handled. It means that in capturing the outer element's event is handled first, and then the innermost element's event will be handled."", 'We can specify the propagation using the useCapture parameter. When it is set to false (which is its default value), then the event uses bubbling propagation, and when it is set to true, there is the capturing propagation.', 'In this example, there are two div elements. We can see the bubbling effect on the first div element and the capturing effect on the second div element.', ""When we double click the span element of the first div element, then the span element's event is handled first than the div element. It is called bubbling."", ""But when we double click the span element of the second div element, then the div element's event is handled first than the span element. It is called capturing.""]","['useCapture: It is an optional parameter. It is a Boolean type value that specifies whether the event is executed in the bubbling or capturing phase. Its possible values are true and false. When it is set to true, the event handler executes in the capturing phase. When it is set to false, the handler executes in the bubbling phase. Its default value is false.', 'Suppose we have a div element and a paragraph element inside it, and we are applying the ""click"" event to both of them using the addEventListener() method. Now the question is on clicking the paragraph element, which element\'s click event is handled first.']","['element.addEventListener(event, function, useCapture);', '<!DOCTYPE html>', '<p> Example of the addEventListener() method. </p>', '<p> Click the following button to see the effect. </p>', '<button id = ""btn""> Click me </button>', '<p id = ""para""></p>', '<script>', 'document.getElementById(""btn"").addEventListener(""click"", fun);', 'function fun() {', 'document.getElementById(""para"").innerHTML = ""Hello World"" + ""<br>"" + ""Welcome to the  javaTpoint.com"";', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<p> This is an example of adding multiple events to the same element. </p>', '<p> Click the following button to see the effect. </p>', '<button id = ""btn""> Click me </button>', '<p id = ""para""></p>', '<p id = ""para1""></p>', '<script>', 'function fun() {', 'alert(""Welcome to the javaTpoint.com"");', 'function fun1() {', 'document.getElementById(""para"").innerHTML =  ""This is second function"";', 'function fun2() {', 'document.getElementById(""para1"").innerHTML =  ""This is third function"";', 'var mybtn = document.getElementById(""btn"");', 'mybtn.addEventListener(""click"", fun);', 'mybtn.addEventListener(""click"", fun1);', 'mybtn.addEventListener(""click"", fun2);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<p> This is an example of adding multiple events of different type to the same element. </p>', '<p> Click the following button to see the effect. </p>', '<button id = ""btn""> Click me </button>', '<p id = ""para""></p>', '<script>', 'function fun() {', 'btn.style.width = ""50px"";', 'btn.style.height = ""50px"";', 'btn.style.background = ""yellow"";', 'btn.style.color = ""blue"";', 'function fun1() {', 'document.getElementById(""para"").innerHTML =  ""This is second function"";', 'function fun2() {', 'btn.style.width = """";', 'btn.style.height = """";', 'btn.style.background = """";', 'btn.style.color = """";', 'var mybtn = document.getElementById(""btn"");', 'mybtn.addEventListener(""mouseover"", fun);', 'mybtn.addEventListener(""click"", fun1);', 'mybtn.addEventListener(""mouseout"", fun2);', '</script>', '</body>', '</html>', 'addEventListener(event, function, useCapture);', '<!DOCTYPE html>', '<style>', 'background-color: lightblue;', 'border: 2px solid red;', 'font-size: 25px;', 'text-align: center;', 'border: 2px solid blue;', '</style>', '</head>', '<h1> Bubbling </h1>', '<div id = ""d1"">', 'This is a div element.', '<br><br>', '<span id = ""s1""> This is a span element. </span>', '<h1> Capturing </h1>', '<div id = ""d2""> This is a div element.', '<br><br>', '<span id = ""s2""> This is a span element. </span>', '<script>', 'document.getElementById(""d1"").addEventListener(""dblclick"", function() {alert(\'You have double clicked on div element\')}, false);', 'document.getElementById(""s1"").addEventListener(""dblclick"", function() {alert(\'You have double clicked on span element\')}, false);', 'document.getElementById(""d2"").addEventListener(""dblclick"", function() {alert(\'You have double clicked on div element\')}, true);', 'document.getElementById(""s2"").addEventListener(""dblclick"", function() {alert(\'You have double clicked on span element\')}, true);', '</script>', '</body>', '</html>']",[],[],[]
48,['JavaScript onclick event'],"[""The onclick event generally occurs when the user clicks on an element. It allows the programmer to execute a JavaScript's function when an element gets clicked. This event can be used for validating a form, warning messages and many more.""]","['https://www.javatpoint.com/javascript-dblclick-event', 'https://www.javatpoint.com/javascript-addeventlistener', 'https://www.javatpoint.com/https://www.javatpoint.com/html-html-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-head', 'https://www.javatpoint.com/https://www.javatpoint.com/html-title', 'https://www.javatpoint.com/https://www.javatpoint.com/html-style', 'https://www.javatpoint.com/https://www.javatpoint.com/html-script-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-base-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-iframes', 'https://www.javatpoint.com/https://www.javatpoint.com/html-bdo-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-br-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-meta-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-param-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-onclick', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-onclick-event1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-paragraph', 'https://www.javatpoint.com/https://www.javatpoint.com/html-background-color', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-onclick-event2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-onclick-event3', 'https://www.javatpoint.com/javascript-dblclick-event', 'https://www.javatpoint.com/javascript-addeventlistener', 'https://www.javatpoint.com/javascript-dblclick-event']","['https://static.javatpoint.com/javascriptpages/images/javascript-onclick-event.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onclick-event2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onclick-event3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onclick-event4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onclick-event5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onclick-event6.png']",[],[],"['Syntax', 'In HTML', 'In JavaScript', 'In JavaScript by using the addEventListener() method', 'Example1 - Using onclick attribute in HTML', 'Example2 - Using JavaScript', 'Example3 - Using addEventListener() method']",[],"[""Let's see how to use onclick event by using some illustrations. Now, we will see the examples of using the onclick event in HTML, and in JavaScript."", 'After clicking the given button, the output will be -', ""In this example, we are using JavaScript's onclick event. Here we are using the onclick event with the paragraph element."", 'After clicking the text Click me, the output will be -', 'On clicking the paragraph, the background color and font-size of elements will also change.', 'On clicking the text Click me, the output will be -']","[""In HTML, we can use the onclick attribute and assign a JavaScript function to it. We can also use the JavaScript's addEventListener() method and pass a click event to it for greater flexibility."", 'Now, we see the syntax of using the onclick event in HTML and in javascript (without addEventListener() method or by using the addEventListener() method).', ""In this example, we are using the HTML onclick attribute and assigning a JavaScript's function to it. When the user clicks the given button, the corresponding function will get executed, and an alert dialog box will be displayed on the screen."", 'When the user clicks on the paragraph element, the corresponding function will get executed, and the text of the paragraph gets changed. On clicking the <p> element, the background color, size, border, and color of the text will also get change.', ""In this example, we are using JavaScript's addEventListener() method to attach a click event to the paragraph element. When the user clicks the paragraph element, the text of the paragraph gets changed.""]","['Using JavaScript, this event can be dynamically added to any element. It supports all HTML elements except <html>, <head>, <title>, <style>, <script>, <base>, <iframe>, <bdo>, <br>, <meta>, and <param>. It means we cannot apply the onclick event on the given tags.']","['<element onclick = ""fun()"">', 'object.onclick = function() { myScript };', 'object.addEventListener(""click"", myScript);', '<!DOCTYPE html>', '<script>', 'function fun() {', 'alert(""Welcome to the javaTpoint.com"");', '</script>', '</head>', '<h3> This is an example of using onclick attribute in HTML. </h3>', '<p> Click the following button to see the effect. </p>', '<button onclick = ""fun()"">Click me</button>', '</body>', '</html>', '<!DOCTYPE html>', '<title> onclick event </title>', '</head>', '<h3> This is an example of using onclick event. </h3>', '<p> Click the following text to see the effect. </p>', '<p id = ""para"">Click me</p>', '<script>', 'document.getElementById(""para"").onclick = function() {', 'function fun() {', 'document.getElementById(""para"").innerHTML = ""Welcome to the javaTpoint.com"";', 'document.getElementById(""para"").style.color = ""blue"";', 'document.getElementById(""para"").style.backgroundColor = ""yellow"";', 'document.getElementById(""para"").style.fontSize = ""25px"";', 'document.getElementById(""para"").style.border = ""4px solid red"";', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<h3> This is an example of using click event. </h3>', '<p> Click the following text to see the effect. </p>', '<p id = ""para"">Click me</p>', '<script>', 'document.getElementById(""para"").onclick = function() {', 'function fun() {', 'document.getElementById(""para"").innerHTML = ""Welcome to the javaTpoint.com"";', 'document.getElementsByTagName(""body"")[0].style.color = ""blue"";', 'document.getElementsByTagName(""body"")[0].style.backgroundColor = ""lightgreen"";', 'document.getElementsByTagName(""body"")[0].style.fontSize = ""25px"";', 'document.getElementById(""para"").style.border = ""4px solid red"";', '</script>', '</body>', '</html>']",[],[],[]
49,['JavaScript dblclick event'],"[""The dblclick event generates an event on double click the element. The event fires when an element is clicked twice in a very short span of time. We can also use the JavaScript's addEventListener() method to fire the double click event.""]","['https://www.javatpoint.com/javascript-onload', 'https://www.javatpoint.com/javascript-onclick-event', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-dblclick-event1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-dblclick-event2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-dblclick-event3', 'https://www.javatpoint.com/javascript-onload', 'https://www.javatpoint.com/javascript-onclick-event', 'https://www.javatpoint.com/javascript-onload']","['https://static.javatpoint.com/javascriptpages/images/javascript-dblclick-event.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-dblclick-event2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-dblclick-event3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-dblclick-event4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-dblclick-event5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-dblclick-event6.png']",[],[],"['Syntax', 'In HTML', 'In JavaScript', 'In JavaScript by using the addEventListener() method', 'Example - Using ondblclick attribute in HTML', 'Example - Using JavaScript', ""Example - Using JavaScript's addEventListener() method""]",[],"['In HTML, we can use the ondblclick attribute to create a double click event.', ""Let's see some of the illustrations to understand the double click event."", 'In this example, we are creating the double click event using the HTML ondblclick attribute.', 'After the execution of the above code, the output will be -', 'After double-clicking the text ""Hello world"", the output will be -', 'Now, we will see how to create double click event using JavaScript.', 'After double-clicking the text ""Hello world"", the output will be -', 'After double-clicking the text ""Hello world"", the output will be -']","['Now, we see the syntax of creating double click event in HTML and in javascript (without using addEventListener() method or by using the addEventListener() method).']",[],"['<element ondblclick = ""fun()"">', 'object.ondblclick = function() { myScript };', 'object.addEventListener(""dblclick"", myScript);', '<!DOCTYPE html>', '</head>', '<h1 id = ""heading"" ondblclick = ""fun()""> Hello world :):) </h1>', '<h2> Double Click the text ""Hello world"" to see the effect. </h2>', '<p> This is an example of using the <b> ondblclick </b> attribute. </p>', '<script>', 'function fun() {', 'document.getElementById(""heading"").innerHTML = "" Welcome to the javaTpoint.com "";', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<h1 id = ""heading""> Hello world :):) </h1>', '<h2> Double Click the text ""Hello world"" to see the effect. </h2>', '<p> This is an example of creating the double click event using JavaScript. </p>', '<script>', 'document.getElementById(""heading"").ondblclick = function() { fun() };', 'function fun() {', 'document.getElementById(""heading"").innerHTML = "" Welcome to the javaTpoint.com "";', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<h1 id = ""heading""> Hello world :):) </h1>', '<h2> Double Click the text ""Hello world"" to see the effect. </h2>', '<p> This is an example of creating the double click event using the <b> addEventListener() method </b>. </p>', '<script>', 'document.getElementById(""heading"").addEventListener(""dblclick"", fun);', 'function fun() {', 'document.getElementById(""heading"").innerHTML = "" Welcome to the javaTpoint.com "";', '</script>', '</body>', '</html>']",[],[],[]
50,['JavaScript onload'],"[""In JavaScript, this event can apply to launch a particular function when the page is fully displayed. It can also be used to verify the type and version of the visitor's browser. We can check what cookies a page uses by using the onload attribute.""]","['https://www.javatpoint.com/javascript-onresize-event', 'https://www.javatpoint.com/javascript-dblclick-event', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-body-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-change-background-color-in-html', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-onload1', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/https://www.javatpoint.com/document-getElementById()-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-onload2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-onload3', 'https://www.javatpoint.com/javascript-onresize-event', 'https://www.javatpoint.com/javascript-dblclick-event', 'https://www.javatpoint.com/javascript-onresize-event']","['https://static.javatpoint.com/javascriptpages/images/javascript-onload.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onload2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onload3.png']",[],[],"['Syntax', 'Example1', 'Example2', 'Example3']",[],"[""Let's understand this event by using some examples."", ""The background color is set to 'red', and width and height are set to 300px each."", 'After the execution of the code and loading of the page, the output will be -', 'After the successful execution of the above code, the output will be -', 'Now, there is an example in which we will use the HTML onload attribute and the JavaScript functions.', 'After the execution of the above code, the output will be -']","['In HTML, the onload attribute fires when an object has been loaded. The purpose of this attribute is to execute a script when the associated element loads.', 'In this example, there is a div element with a height of 200px and a width of 200px. Here, we are using the window.onload() to change the background color, width, and height of the div element after loading the web page.', 'It is a simple example of using the HTML onload attribute with the function defined in JavaScript. In this example, the alert() function gets called whenever the document refresh.']","['In HTML, the onload attribute is generally used with the <body> element to execute a script once the content (including CSS files, images, scripts, etc.) of the webpage is completely loaded. It is not necessary to use it only with <body> tag, as it can be used with other HTML elements.', 'The difference between the document.onload and window.onload is: document.onload triggers before the loading of images and other external content. It is fired before the window.onload. While the window.onload triggers when the entire page loads, including CSS files, script files, images, etc.', 'In this example, we are implementing a simple animation by using the properties of the DOM object and functions of javascript. We use the JavaScript function getElementById() for getting the DOM object and then assign that object into a global variable.']","['window.onload = fun()', '<!DOCTYPE html>', '<meta charset = "" utf-8"">', '<title> window.onload() </title>', '<style type = ""text/css"">', 'width: 200px;', 'height: 200px;', 'border: 4px solid blue;', '</style>', '<script type = ""text/javascript"">', 'window.onload = function(){', 'document.getElementById(""bg"").style.backgroundColor = ""red"";', 'document.getElementById(""bg"").style.width = ""300px"";', 'document.getElementById(""bg"").style.height = ""300px"";', '</script>', '</head>', '<h2> This is an example of window.onload() </h2>', '<div id = ""bg""></div>', '</body>', '</html>', '<html>', '<head>', '<script type = ""text/javascript"">', 'var img = null;', 'function init(){', ""img = document.getElementById('myimg');"", ""img.style.position = 'relative';"", ""img.style.left = '50px';"", '}', 'function moveRight(){', 'img.style.left = parseInt(', ""img.style.left) + 100 + 'px';"", '}', 'window.onload = init;', '</script>', '</head>', '<body>', '<form>', '<img id = ""myimg"" src = ""train1.png"" />', '<center>', '<p>Click the below button to move the image right</p>', '<input type = ""button"" value = ""Click Me"" onclick = ""moveRight();"" />', '</center>', '</form>', '</body>', '</html>', '<!DOCTYPE html>', '<style>', '</style>', '<script>', 'function fun() {', 'alert(""Hello World!!, Welcome to the javaTpoint.com"");', '</script>', '</head>', '<body onload = ""fun()"">', '<h1> Example of the HTML onload attribute </h1>', '<p> Try to refresh the document to see the effect. </p>', '</body>', '</html>']",[],[],[]
51,['JavaScript onresize event'],"[""The onresize event in JavaScript generally occurs when the window has been resized. To get the size of the window, we can use the JavaScript's window.outerWidth and window.outerHeight events. We can also use the JavaScript's properties such as innerWidth, innerHeight, clientWidth, ClientHeight, offsetWidth, offsetHeight to get the size of an element.""]","['https://www.javatpoint.com/exception-handling-in-javascript', 'https://www.javatpoint.com/javascript-onload', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-addeventlistener', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-onresize-event1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-onresize-event2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-onresize-event3', 'https://www.javatpoint.com/exception-handling-in-javascript', 'https://www.javatpoint.com/javascript-onload', 'https://www.javatpoint.com/exception-handling-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-onresize-event.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onresize-event2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onresize-event3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onresize-event4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onresize-event5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-onresize-event6.png']",[],[],"['Syntax', 'In HTML', 'In JavaScript', 'In JavaScript by using the addEventListener() method', 'Example', 'Example - Using JavaScript', 'Example - Using addEventListener() method']",[],"[""Let's see some of the illustrations to understand the onresize event."", 'After the execution of the above code, the output will be -', 'When we try to resize the window, the output will be -', ""In this example, we are using JavaScript's onresize event."", 'After the execution of the above code, the output will be -', 'When we try to resize the window, the output will be -', ""In this example, we are using JavaScript's addEventListener() method."", 'After the execution of the above code, the output will be -', 'When we try to resize the window, the output will be -']","[""In HTML, we can use the onresize attribute and assign a JavaScript function to it. We can also use the JavaScript's addEventListener() method and pass a resize event to it for greater flexibility."", 'Now, we see the syntax of using the onresize event in HTML and in javascript (without addEventListener() method or by using the addEventListener() method).', 'In this example, we are using the HTML onresize attribute. Here, we are using the window.outerWidth and window.outerHeight events of JavaScript to get the height and width of the window.']","['When the user resizes the window, the updated width and height of the window will be displayed on the screen. It will also display how many times the user tried to resize the window. When we change the height of the window, the updated height will change accordingly. Similarly, when we change the width of the window, the updated width will change accordingly.']","['<element onresize = ""fun()"">', 'object.onresize = function() { myScript };', 'object.addEventListener(""resize"", myScript);', '<!DOCTYPE html>', '<script>', 'var i = 0;', 'function fun() {', 'var res = ""Width = "" + window.outerWidth + ""<br>"" + ""Height = "" + window.outerHeight;', 'document.getElementById(""para"").innerHTML = res;', 'var res1 = i += 1;', 'document.getElementById(""s1"").innerHTML = res1;', '</script>', '</head>', '<body onresize = ""fun()"">', '<h3> This is an example of using onresize attribute. </h3>', ""<p> Try to resize the browser's window to see the effect. </p>"", '<p id = ""para""> </p>', '<p> You have resized the window <span id = ""s1""> 0 </span> times.</p>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', ""<h3> This is an example of using JavaScript's onresize event. </h3>"", ""<p> Try to resize the browser's window to see the effect. </p>"", '<p id = ""para""> </p>', '<p> You have resized the window <span id = ""s1""> 0 </span> times.</p>', '<script>', 'document.getElementsByTagName(""BODY"")[0].onresize = function() {fun()};', 'var i = 0;', 'function fun() {', 'var res = ""Width = "" + window.outerWidth + ""<br>"" + ""Height = "" + window.outerHeight;', 'document.getElementById(""para"").innerHTML = res;', 'var res1 = i += 1;', 'document.getElementById(""s1"").innerHTML = res1;', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', ""<h3> This is an example of using JavaScript's addEventListener() method. </h3>"", ""<p> Try to resize the browser's window to see the effect. </p>"", '<p id = ""para""> </p>', '<p> You have resized the window <span id = ""s1""> 0 </span> times.</p>', '<script>', 'window.addEventListener(""resize"", fun);', 'var i = 0;', 'function fun() {', 'var res = ""Width = "" + window.outerWidth + ""<br>"" + ""Height = "" + window.outerHeight;', 'document.getElementById(""para"").innerHTML = res;', 'var res1 = i += 1;', 'document.getElementById(""s1"").innerHTML = res1;', '</script>', '</body>', '</html>']",[],[],[]
52,['Exception Handling in JavaScript'],"['An exception signifies the presence of an abnormal condition which requires special operable techniques. In programming terms, an exception is the anomalous code that breaks the normal flow of the code. Such exceptions require specialized programming constructs for its execution.']","['https://www.javatpoint.com/javascript-try-catch', 'https://www.javatpoint.com/javascript-onresize-event', 'https://www.javatpoint.com/javascript-try-catch', 'https://www.javatpoint.com/javascript-onresize-event', 'https://www.javatpoint.com/javascript-try-catch']",[],[],"['What is Exception Handling', 'Exception Handling Statements']",['Error Object'],[],"['In exception handling:', 'A throw statement is used to raise an exception. It means when an abnormal condition occurs, an exception is thrown using throw.', 'Thus, in a programming language, there can be different types of errors which may disturb the proper execution of the program.', 'While coding, there can be three types of errors in the code:', 'Although Error is a generic constructor, there are following standard built-in error types or error constructors beside it:', 'There are following statements that handle if any exception occurs:', 'These exception handling statements are discussed in the next section.']","['The thrown exception is handled by wrapping the code into the try…catch block. If an error is present, the catch block will execute, else only the try block statements will get executed.', 'When a runtime error occurs, it creates and throws an Error object. Such an object can be used as a base for the user-defined exceptions too. An error object has two properties:']","['In programming, exception handling is a process or method used for handling the abnormal statements in the code and executing them. It also enables to handle the flow control of the code/program. For handling the code, various handlers are used that process the exception and execute the code. For example, the Division of a non-zero value with zero will result into infinity always, and it is an exception. Thus, with the help of exception handling, it can be executed and handled.']",[],[],[],"['|||throw statements|||try…catch statements|||try…catch…finally statements.|||&&&|||Syntax Error: When a user makes a mistake in the pre-defined syntax of a programming language, a syntax error may appear.|||Runtime Error: When an error occurs during the execution of the program, such an error is known as Runtime error. The codes which create runtime errors are known as Exceptions. Thus, exception handlers are used for handling runtime errors.|||Logical Error: An error which occurs when there is any logical mistake in the program that may not produce the desired output, and may terminate abnormally. Such an error is known as Logical error.||||||name: This is an object property that sets or returns an error name.|||message: This property returns an error message in the string form.||||||EvalError: It creates an instance for the error that occurred in the eval(), which is a global function used for evaluating the js string code.|||InternalError: It creates an instance when the js engine throws an internal error.|||RangeError: It creates an instance for the error that occurs when a numeric variable or parameter is out of its valid range.|||ReferenceError: It creates an instance for the error that occurs when an invalid reference is de-referenced.|||SyntaxError: An instance is created for the syntax error that may occur while parsing the eval().|||TypeError: When a variable is not a valid type, an instance is created for such an error.|||URIError: An instance is created for the error that occurs when invalid parameters are passed in encodeURI() or decodeURI().|||']"
53,['JavaScript try…catch'],"['A try…catch is a commonly used statement in various programming languages. Basically, it is used to handle the error-prone part of the code. It initially tests the code for all possible errors it may contain, then it implements actions to tackle those errors (if occur). A good programming approach is to keep the complex code within the try…catch statements.']","['https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/exception-handling-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=Javascripttry-catch', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=Javascripttry-catch2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=Javascripttry-catch3', 'https://www.javatpoint.com/javascript-this-keyword', 'https://www.javatpoint.com/exception-handling-in-javascript', 'https://www.javatpoint.com/javascript-this-keyword']",[],[],"['Throw Statement', 'try…catch…finally statements']","['Syntax:', 'try…catch example', 'Syntax:', 'try…catch…throw syntax', 'throw example with try…catch', 'Syntax:', 'try…catch…finally example']","['Note: catch {} statement executes only after the execution of the try {} statement. Also, one try block can contain one or more catch blocks.']","[""Let's discuss each block of statement individually:"", 'The exception can be a string, number, object, or boolean value.\t', 'With the help of throw statement, users can create their own errors.', 'Therefore, we can also use try/catch/throw/finally keyword together for handling complex code.']","['Throw statements are used for throwing user-defined errors. User can define and throw their own custom errors. When throw statement is executed, the statements present after it will not execute. The control will directly pass to the catch block.']","['try{} statement: Here, the code which needs possible error testing is kept within the try block. In case any error occur, it passes to the catch{} block for taking suitable actions and handle the error. Otherwise, it executes the code written within.', 'catch{} statement: This block handles the error of the code by executing the set of statements written within the block. This block contains either the user-defined exception handler or the built-in handler. This block executes only when any error-prone code needs to be handled in the try block. Otherwise, the catch block is skipped.', 'Finally is an optional block of statements which is executed after the execution of try and catch statements. Finally block does not hold for the exception to be thrown. Any exception is thrown or not, finally block code, if present, will definitely execute. It does not care for the output too.']","['expression; } //code to be written.', 'catch(error){', 'expression; } // code for handling the error.', '<head> Exception Handling</br></head>', '<script>', 'var a= [""34"",""32"",""5"",""31"",""24"",""44"",""67""]; //a is an array', 'document.write(a);    // displays elements of a', 'document.write(b); //b is undefined but still trying to fetch its value. Thus catch block will be invoked', '}catch(e){', 'alert(""There is error which shows ""+e.message); //Handling error', '</script>', 'throw exception;', 'throw exception; // user can define their own exception', 'catch(error){', 'expression; }  // code for handling exception.', '<head>Exception Handling</head>', '<script>', ""throw new Error('This is the throw keyword'); //user-defined throw statement."", 'catch (e) {', 'document.write(e.message); // This will generate an error message', '</script>', 'expression;', 'catch(error){', 'expression;', 'finally{', 'expression; } //Executable code', '<head>Exception Handling</head>', '<script>', 'var a=2;', 'if(a==2)', 'document.write(""ok"");', 'catch(Error){', 'document.write(""Error found""+e.message);', 'finally{', 'document.write(""Value of a is 2 "");', '</script>', '</html>']",[],[],[]
54,['JavaScript this keyword'],"['The this keyword is a reference variable that refers to the current object. Here, we will learn about this keyword with help of different examples.']","['https://www.javatpoint.com/javascript-debugging', 'https://www.javatpoint.com/javascript-try-catch', 'https://www.javatpoint.com/javascript-debugging', 'https://www.javatpoint.com/javascript-try-catch', 'https://www.javatpoint.com/javascript-debugging']",[],[],[],[],[],"[""Let's see a simple example of this keyword."", 'The following ways can be used to know which object is referred by this keyword.', 'In global context, variables are declared outside the function. Here, this keyword refers to the window object.', 'The call() and apply() method allows us to write a method that can be used on different objects.']","['The bind() method was introduced in ECMAScript 5. It creates a new function whose this keyword refers to the provided value, with a given sequence of arguments. ']",[],"['<script>', 'var address=', 'company:""Javatpoint"",', 'city:""Noida"",', 'state:""UP"",', 'fullAddress:function()', 'return this.company+"" ""+this.city+"" ""+this.state;', 'var fetch=address.fullAddress();', 'document.writeln(fetch);', '</script>', '<script>', 'var website=""Javatpoint"";', 'function web()', 'document.write(this.website);', '</script>', '<script>', 'var emp_address = {', 'fullAddress: function() {', 'return this.company + "" "" + this.city+"" ""+this.state;', 'var address = {', 'company:""Javatpoint"",', 'city:""Noida"",', 'state:""UP"",', 'document.writeln(emp_address.fullAddress.call(address));', 'document.writeln(emp_address.fullAddress.apply(address));</script>', '<script>', 'var lang=""Java"";', 'function lang_name(call)', 'call();', 'var obj={', 'lang:""JavaScript"",', 'language:function()', 'document.writeln(this.lang+ "" is a popular programming language."");', 'lang_name(obj.language);', 'lang_name(obj.language.bind(obj));', '</script>']",['Javatpoint Noida UP'],[],[]
55,['JavaScript Debugging'],"[""Sometimes a code may contain certain mistakes. Being a scripting language, JavaScript didn't show any error message in a browser. But these mistakes can affect the output.""]","['https://www.javatpoint.com/javascript-hoisting', 'https://www.javatpoint.com/javascript-this-keyword', 'https://www.javatpoint.com/javascript-hoisting', 'https://www.javatpoint.com/javascript-this-keyword', 'https://www.javatpoint.com/javascript-hoisting']","['https://static.javatpoint.com/javascriptpages/images/javascript-debugging.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-debugging-using-debugger-keyword.png']",[],[],"['Using console.log() method', 'Using debugger keyword']",[],"['Here, we will find out errors using built-in web browser debugger. To perform debugging, we can use any of the following approaches: ', 'The console.log() method displays the result in the console of the browser. If there is any mistake in the code, it generates the error message.', ""Let's see the simple example to print the result on console."", 'To open the console on browser, press F12 key.']","['The best practice to find out the error is to debug the code. The code can be debugged easily by using web browsers like Google Chrome, Mozilla Firebox. ', 'In debugging, generally we set breakpoints to examine each line of code step by step. There is no requirement to perform this task manually in JavaScript. ']","['JavaScript provides debugger keyword to set the breakpoint through the code itself. The debugger stops the execution of the program at the position it is applied. Now, we can start the flow of execution manually. If an exception occurs, the execution will stop again on that particular line.']","['<script>', 'z = x + y;', 'console.log(z);', 'console.log(a);//a is not intialized', '</script>', '<script>', 'z = x + y;', 'debugger;', 'document.write(z);', 'document.write(a);', '</script>']",[],[],['|||Using console.log() method|||Using debugger keyword|||']
56,['JavaScript Hoisting'],"['Hoisting is a mechanism in JavaScript that moves the declaration of variables and functions at the top. So, in JavaScript we can use variables and functions before declaring them. ']","['https://www.javatpoint.com/javascript-strict-mode', 'https://www.javatpoint.com/javascript-debugging', 'https://www.javatpoint.com/javascript-strict-mode', 'https://www.javatpoint.com/javascript-debugging', 'https://www.javatpoint.com/javascript-strict-mode']",[],[],['JavaScript Hoisting Example'],"['JavaScript Variable Hoisting', 'JavaScript Function Hoisting']",[],"['Here, we will use the variable and function before declaring them.', ""Let's see the simple example of variable hoisting."", ""Let's see the simple example of variable hoisting.""]",['JavaScript hoisting is applicable only for declaration not initialization. It is required to initialize the variables and functions before using their values.'],[],"['<script>', 'document.write(x);', '</script>', '<script>', 'document.write(sum(10,20));', 'function sum(a,b)', 'return a+b;', '</script>']",[],[],[]
57,['JavaScript Strict Mode'],"['Being a scripting language, sometimes the JavaScript code displays the correct result even it has some errors. To overcome this problem we can use the JavaScript strict mode.']","['https://www.javatpoint.com/javascript-promise', 'https://www.javatpoint.com/javascript-hoisting', 'https://www.javatpoint.com/javascript-promise', 'https://www.javatpoint.com/javascript-hoisting', 'https://www.javatpoint.com/javascript-promise']","['https://static.javatpoint.com/javascriptpages/images/javascript-strict-mode.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-strict-mode2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-strict-mode3.png']",[],['JavaScript use strict Example'],"['Example 1', 'Example 2']","['Note - The ""use strict""; expression can only be placed as the first statement in a script or in a function.']","['The JavaScript provides ""use strict""; expression to enable the strict mode. If there is any silent error or mistake in the code, it throws an error. ', ""Let's see the example without using strict mode."", ""Here, we didn't provide the type of variable. Still we are getting an output."", ""Let's see the same example by enabling the strict mode."", 'Now, it will throw an error as the type of x is not defined.', ""Let's see one more example to print sum of two numbers."", 'Here, an error occurs as we use duplicate elements.']",[],[],"['<script>', 'console.log(x);', '</script>', '<script>', '""use strict"";', 'console.log(x);', '</script>', '<script>', 'console.log(sum(10,20));', 'function sum(a,a)', '""use strict"";', 'return a+a;', '</script>']",[],[],[]
58,['JavaScript Promise'],"['Promises in real-life express a trust between two or more persons and an assurance that a particular thing will surely happen. In javascript, a Promise is an object which ensures to produce a single value in the future (when required). Promise in javascript is used for managing and tackling asynchronous operations. ']","['https://www.javatpoint.com/javascript-compare-dates', 'https://www.javatpoint.com/javascript-strict-mode', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavaScriptPromise', 'https://www.javatpoint.com/javascript-compare-dates', 'https://www.javatpoint.com/javascript-strict-mode', 'https://www.javatpoint.com/javascript-compare-dates']",[],[],[],[],[],"['There are two possible differences between Promise and Event Handlers:', 'A promise can be present in one of the following states:', 'A JavaScript Promise promises that:', 'The functions of Promise are executable almost on every trending web browsers such as Chrome, Mozilla, Opera, etc. The methods list is:']","['In the above Promise implementation, the Promise constructor takes an argument that callbacks the function. This callback function takes two arguments, i.e.,', 'It means either resolve is called or reject is called. Here, then() has taken one argument which will execute, if the promise is resolved. Otherwise, catch() will be called with the rejection of the promise.']","['Till now, we learned about events and callback functions for handling the data. But, its scope is limited. It is because events were not able to manage and operate asynchronous operations. Thus, Promise is the simplest and better approach for handling asynchronous operations efficiently.', 'Thus, a promise represents the completion of an asynchronous operation with its result. It can be either successful completion of the promise, or its failure, but eventually completed. Promise uses a then() which is executed only after the completion of the promise resolve.']","['<h2> Javascript Promise</h2>', '</br> </head>', '<script>', 'var p=new Promise(function(resolve, reject){', 'var x= 2+3;', 'if(x==5)', 'resolve("" executed and resolved successfully"");', 'reject(""rejected"");', 'p.then(function(fromResolve){', 'document.write(""Promise is""+fromResolve);', '}).catch(function(fromReject){', 'document.write(""Promise is ""+fromReject);', '</script>', '</body>', '</html>']",[],"['Method Name|||Summary&&&Promise.resolve(promise)|||This method returns promise only if promise.constructor==Promise.&&&Promise.resolve(thenable)|||Makes a new promise from thenable containing then().&&&Promise.resolve(obj)|||Makes a promise resolved for an object.&&&Promise.reject(obj)|||Makes a promise rejection for the object.&&&Promise.all(array)|||Makes a promise resolved when each item in an array is fulfilled or rejects when items in the array are not fulfilled.&&&Promise.race(array)|||If any item in the array is fulfilled as soon, it resolves the promise, or if any item is rejected as soon, it rejects the promise.', 'new Promise(function(resolve, reject){});|||Here, resolve(thenable) denotes that the promise will be resolved with then().|||Resolve(obj) denotes promise will be fulfilled with the object|||Reject(obj) denotes promise rejected with the object.']","['|||A Promise can never fail or succeed twice or more. This can happen only once.|||A Promise can neither switch from success to failure, or failure to success. If a Promise has either succeeded or failed, and after sometime, if any success/failure callback is added, the correct callback will be invoked, no matter the event happened earlier.||||||pending: The pending promise is neither rejected nor fulfilled yet.|||fulfilled: The related promise action is fulfilled successfully.|||rejected: The related promise action is failed to be fulfilled.|||settled: Either the action is fulfilled or rejected.||||||Unless the current execution of the js event loop is not completed (success or failure), callbacks will never be called before it.|||Even if the callbacks with then() are present, but they will be called only after the execution of the asynchronous operations completely.|||When multiple callbacks can be included by invoking then() many times, each of them will be executed in a chain, i.e., one after the other, following the sequence in which they were inserted.||||||Resolve: When the promise is executed successfully, the resolve argument is invoked, which provides the result.|||Reject: When the promise is rejected, the reject argument is invoked, which results in an error.||||||A better option to deal with asynchronous operations.|||Provides easy error handling and better code readability.|||']"
59,['Javascript Compare dates'],"['In the previous section, we discussed the date methods as well as the constructors. ']","['https://www.javatpoint.com/javascript-array-length-property', 'https://www.javatpoint.com/javascript-promise', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavascriptComparedates', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavascriptComparedates2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavascriptComparedates3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavascriptComparedates4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavascriptComparedates5', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavascriptComparedates6', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=JavascriptComparedates7', 'https://www.javatpoint.com/javascript-array-length-property', 'https://www.javatpoint.com/javascript-promise', 'https://www.javatpoint.com/javascript-array-length-property']",[],[],['Changing Date Format'],[],[],"['Here, with the help of those methods, we will learn to compare dates.', 'Basically, there are different ways by which we can compare dates, such as:', 'Example 1: Comparing different dates with different timings', 'Example2: Comparing same dates with disimilar timings', 'Example1: Comparing current date and time with a given date and time.', 'Example2: Comparing two different dates with different timings.', 'Thus, we can compare dates in many possible ways.', ""Example1: Changing the date format to 'yyyy-mm-dd'."", 'We can also set the date and time format according to our need.', ""Example2: Changing the datetime format to 'yyyy-dd-mm hh:mm:ss'.""]","['A better approach to make comparison between dates is to use getTime() function. This function lets converting date into numeric value to directly compare them. ', 'We can also change or set the format through JavaScript code. The function getFullYear(), GetMonth(), and getDate() allows to set the format of date accordingly.']",[],"['<head> Comparing Dates</br></head>', '<script>', 'function compare()', ""var d1=new Date('2020-01-23'); //yyyy-mm-dd"", ""var d2=new Date('2020-01-21'); //yyyy-mm-dd"", 'if(d1>d2)', 'document.write(""True, First date is greater than second date"");', 'else if(d1<d2)', 'document.write(""False, Second date is smaller than the first"");', 'document.write(""Both date are same and equal"");', 'compare(); //invoking compare()', '</script>', '</body>', '</html>', '<head> Comparing Date and time</br></head>', '<script>', 'var d1=new Date(""Apr 17, 2019 12:10:10""); //mm dd, yyyy hh:mm:ss', 'var d2=new Date(""Dec 1, 2019 12:10:30""); //mm dd, yyyy hh:mm:ss', 'if(d1>d2)', 'document.write(""False, d1 date and time is smaller than d2 date and time"");', 'else if(d1<d2)', 'document.write(""True, d2 is greater in terms of both time and date"");', 'document.write(""Both date and time are same and equal"");', '</script>', '</body>', '</html>', '<head> Comparing same date but different time</br></head>', '<script>', 'var d1=new Date(""2018-01-10, 12:10:10""); //yyyy-mm-dd hh:mm:ss', 'var d2=new Date(""2018-01-10, 12:10:50""); //yyyy-mm-dd hh:mm:ss', 'if(d1>d2)', 'document.write(""False, d1 & d2 dates are same but d2 time is greater than d1 time"");', 'else if(d1<d2)', 'document.write(""True, d2 time is greater than d1 time."");', 'document.write(""Both date and time are same and equal"");', '</script>', '</body>', '</html>', '<head> Comparing Dates</br></head>', '<script>', 'var d1=new Date(""2019-10-10, 10:10:10""); //yyyy-mm-dd hh:mm:ss', 'var currentdate=new Date(); //fetch the current date value', 'if(d1.getTime()<currentdate.getTime())', 'document.write(""True, currentdate and time are greater than d1"");', 'else if(d1.getTime()>currentdate.getTime())', 'document.write(""False"");', 'document.write(""True, equal"");', '</script>', '</body>', '</html>', '<head> Comparing Dates</br></head>', '<script>', 'var d1=new Date(""2019-10-10, 10:10:10"");', 'var d2=new Date(""2019-11-02, 14:19:05"");', 'if(d1.getTime()<d2.getTime())', 'document.write(""True, d1 date and time are smaller than d2 date and time"");', 'else if(d1.getTime()>d2.getTime())', 'document.write(""False, d2 date and time are greater than d1"");', 'document.write(""True, d1 and d2 have same time and date"");', '</script>', '</body>', '</html>', '<head> <h3>Changing date format</h3></br></head>', '<script>', 'var current_date=new Date(); //fetches current date', 'var set_to=current_date.getFullYear()+""-""+(current_date.getMonth()+1)+""-""+current_date.getDate();', 'document.write(""The format followed is yyyy-dd-mm:  ""+set_to);', '</script>', '</body>', '</html>', '<head> <h3>Changing date format</h3></br></head>', '<script>', 'var current_datetime=new Date(); //fetches current date and time', 'var set_to=current_datetime.getFullYear()+""-""+(current_datetime.getMonth()+1)+""-""+current_datetime.getDate()+""  ""+current_datetime.getHours()+"":""+current_datetime.getMinutes()+"":""+current_datetime.getSeconds();', 'document.write(""The format followed is yyyy-dd-mm hh:mm:ss :  ""+set_to);', '</script>', '</body>', '</html>']",[],[],['|||Comparing two dates with one another.|||Comparing date with time.|||Comparing dates using getTime()|||']
60,['JavaScript array.length property'],['The length property returns the number of elements in an array in the form of a 32-bit unsigned integer. We can also say that the length property returns a number that represents the number of array elements. The return value is always larger than the highest array index.'],"['https://www.javatpoint.com/javascript-alert', 'https://www.javatpoint.com/javascript-compare-dates', 'https://www.javatpoint.com/https://www.javatpoint.com/jquery-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-array-length-property1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-array-length-property2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-array-length-property3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-array-length-property4', 'https://www.javatpoint.com/javascript-alert', 'https://www.javatpoint.com/javascript-compare-dates', 'https://www.javatpoint.com/javascript-alert']","['https://static.javatpoint.com/javascriptpages/images/javascript-array-length-property.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-array-length-property2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-array-length-property3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-array-length-property4.png']",[],[],"['Syntax', 'Example1', 'Example2', 'Example3', 'Example4']",[],"['The following syntax is used to return the length of an array ', 'The following syntax is used to set the length of an array ', ""For better understanding, let's see some of the illustrations of using array.length property."", 'It is a simple example to understand how to calculate the length of an array using the array.length property.', 'In the next example, we will test the length property on the array with the non-numeric index.', 'In the output, we can see that the length of the array is displayed 0. After the execution of the above code output will be -', ""We can also use the length property to find out the number of words in the string. Let's understand it with an example.""]","[""The length property can also be used to set the number of elements in an array. We have to use the assignment operator in conjunction with the length property to set an array's length."", 'The array.length property in JavaScript is same as the array.size() method in jQuery. In JavaScript, it is invalid to use array.size() method so, we use array.length property to calculate the size of an array.', ""In the output, we can see that length of the array is six, which is greater than the value of array's highest index. The highest index of the specified array in the above example is 5."", 'In this example, we are setting the length of an array by using the array.length property. Initially, the array contains two elements, so at the beginning, the length is 2. Then we increase the length of the array to 9.', 'If we direct apply the length property on the string, then it gives us the number of characters in the string. But in this example, we will understand how to calculate the number of words in the string.']","['In the output, the values of the array are separated by commas. After increasing the length, the array contains two defined and seven undefined values separated by a comma. Then we insert five array elements and print them. Now, the array contains seven defined and two undefined values.', ""In this example, the index of the array is non-numeric. Here, the array contains five elements with the non-numeric index. We are applying the length property on the given array to see the effect. Now let's see how the array.length property works on the non-numeric index of the array."", 'In this example, we are using the length property to display the number of words present in the string. Here, we are creating an array and use the split() function for the array elements. We are splitting the string from the whitespace ("" "") character.']","['array.length', 'array.length = number', '<title> array.length </title>', '</head>', '<h3> Here, we are finding the length of an array. </h3>', '<script>', 'var arr = new Array( 100, 200, 300, 400, 500, 600 );', 'document.write("" The elements of array are: "" + arr);', 'document.write("" <br>The length of the array is: "" + arr.length);', '</script>', '</body>', '</html>', '<title> array.length </title>', '</head>', '<h3> Here, we are setting the length of an array. </h3>', '<script>', 'var arr = [100, 200];', 'document.write("" Before setting the length, the array elements are: "" + arr);', 'arr.length = 9;', 'document.write(""<br><br> After setting the length, the array elements are: "" + arr);', 'arr[2] = 300;', 'arr[3] = 400;', 'arr[4] = 500;', 'arr[5] = 600;', 'document.write(""<br><br> After inserting some array elements: "" + arr);', '</script>', '</body>', '</html>', '<title> array.length </title>', '</head>', '<h3> There are five array elements but the index of the array is non numeric. </h3>', '<script>', 'var arr = new Array();', ""arr['a'] = 100;"", ""arr['b'] = 200;"", ""arr['c'] = 300;"", ""arr['d'] = 400;"", ""arr['e'] = 500;"", 'document.write(""The length of array is: "" + arr.length);', '</script>', '</body>', '</html>', '<head>', '<title> array.length </title>', '</head>', '<body>', '<script>', 'var str = ""Welcome to the javaTpoint.com"";', 'var arr = new Array();', 'arr = str.split("" "");', 'document.write("" The given string is: "" + str);', 'document.write(""<br><br> Number Of Words: ""+ arr.length);', 'document.write(""<br><br> Number of characters in the string: "" + str.length);', '</script>', '</body>', '</html>']",[],[],[]
61,['JavaScript alert()'],"['The alert() method in JavaScript is used to display a virtual alert box. It is mostly used to give a warning message to the users. It displays an alert dialog box that consists of some specified message (which is optional) and an OK button. When the dialog box pops up, we have to click ""OK"" to proceed.']","['https://www.javatpoint.com/javascript-eval-function', 'https://www.javatpoint.com/javascript-array-length-property', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-alert1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-alert2', 'https://www.javatpoint.com/https://www.javatpoint.com/url-full-form', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-alert3', 'https://www.javatpoint.com/javascript-eval-function', 'https://www.javatpoint.com/javascript-array-length-property', 'https://www.javatpoint.com/javascript-eval-function']","['https://static.javatpoint.com/javascriptpages/images/javascript-alert.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-alert2.png']",[],[],"['Syntax', 'Values', 'Example1', 'Example2', 'Example']",[],"[""Rather than showing the warnings or errors, the alert dialog box can be used for normal messages such as 'welcome back', 'Hello XYZ', etc."", ""Let's see some examples of the JavaScript alert() method."", 'After clicking the button, the output will be - ', 'After clicking the button, the output will be - ']","['The alert dialog box takes the focus and forces the user to read the specified message. So, we should avoid overusing this method because it stops the user from accessing the other parts of the webpage until the box is closed.', 'message: It is an optional string that specifies the text to display in the alert box. It consists of the information that we want to show to the users.', 'In this example, there is an alert dialog box with a message and an OK button. Here, the alert box displays the URL of the corresponding page. The URL is defined by using the alert(location.hostname); statement.']","[""We can understand the usefulness of the alert method using an example. Suppose we have to fill a form for an identity card. It asks about the date of birth for the eligibility criteria of the identity card. If the age is 18 years or above, then the process will continue. Otherwise, it will show a warning message that the age is below 18 years. This warning message is the 'Alert Box'."", 'Another example is suppose a user is required to fill the form in which some mandatory fields are required to enter some text, but the user forgets to provide the input. As the part of the validation, we can use the alert dialog box to show a warning message related to fill the textfield.', 'In this example, there is a simple alert dialog box with a message and an OK button. Here, there is an HTML button which is used for displaying the alert box. We are using the onclick attribute and call the fun() function where the alert() is defined.', ""In this example, there is an alert dialog box with a message and an OK button. Here, we are using the line-breaks in the message of the alert box. The line breaks are defined by using the '\\n'. The line breaks make the message readable and clear. We have to click the given button to see the effect.""]","['alert(message)', '<head>', '<script type = ""text/javascript"">', 'function fun() {', 'alert (""This is an alert dialog box"");', '}', '</script>', '</head>', '<body>', '<p> Click the following button to see the effect </p>', '<form>', '<input type = ""button"" value = ""Click me"" onclick = ""fun();"" />', '</form>', '</body>', '</html>', '<head>', '<script type = ""text/javascript"">', 'function fun() {', 'alert ("" Hello World \\n Welcome to the javaTpoint.com \\n This is an alert dialog box "");', '}', '</script>', '</head>', '<body>', '<p> Click the following button to see the effect </p>', '<form>', '<input type = ""button"" value = ""Click me"" onclick = ""fun();"" />', '</form>', '</body>', '</html>', '<head>', '<script type = ""text/javascript"">', 'function fun() {', 'alert(location.hostname);', '}', '</script>', '</head>', '<body>', '<p> Click the following button to see the effect </p>', '<form>', '<input type = ""button"" value = ""Click me"" onclick = ""fun();"" />', '</form>', '</body>', '</html>']",[],[],[]
62,['JavaScript eval() function'],"[""The eval() function in JavaScript is used to evaluate the expression. It is JavaScirpt's global function, which evaluates the specified string as JavaScript code and executes it.""]","['https://www.javatpoint.com/javascript-closest', 'https://www.javatpoint.com/javascript-alert', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-eval-function1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-eval-function2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-eval-function3', 'https://www.javatpoint.com/https://www.javatpoint.com/json-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-eval-function4', 'https://www.javatpoint.com/javascript-closest', 'https://www.javatpoint.com/javascript-alert', 'https://www.javatpoint.com/javascript-closest']",[],[],[],"['Syntax', 'Values', 'Example1', 'Example2', 'Example3 - Evaluate the string with JavaScript statements', 'Example - convert string to JavaScript Objects']",[],"['It accepts a single parameter, which is defined as follows.', ""Let's understand the JavaScript eval() function by using illustrations."", 'After the execution of the above code, the output will be - ', 'We are calling the function in the eval() function, and storing the result in the res variable.', 'After the execution of code, the output will be - ', 'After the execution of code, the output will be - ', 'Here, we are using the object obj to represent the data.', 'After the execution of code, the output will be - ']","['There are some limitations of using the eval() function, such as the eval() function is not recommended to use because of the security reasons. It is not suggested to use because it is slower and makes code unreadable.', 'string: It represents a JavaScript expression, single statement, or the sequence of statements. It can be a variable, statement, or a JavaScript expression.', 'It is a simple example of evaluating an expression using the eval() function. In this example, there are some variables. We are applying the eval() function on variables a, b, and c to calculate the sum, multiplication, and subtraction.', 'In this example, we are calling a function using the eval() function. Here there is a function fun() having two arguments and returns the multiplication of both parameters.', 'In this example, we are converting the string to JSON object. Here, the string str contains the data as opposed to the code. We have to switch the data to JSON that allows the string to use a subset of JavaScript syntax for representing the data.']","['The parameter of the eval() function is a string. If the parameter represents the statements, eval() evaluates the statements. If the parameter is an expression, eval() evaluates the expression. If the parameter of eval() is not a string, the function returns the parameter unchanged.', ""In this example, we are using the eval() function to evaluate the string with JavaScript statements. Here, there is string str, having JavaScript conditional if-else statement. We are matching the value of the variable 'x', if the value of x is 0, the output will be 'SUNDAY', else the output will be 'MONDAY'.""]","['eval(string)', '<script>', 'var a = 10, b = 20, c = 30, sum, mul, sub;', 'sum = eval("" a + b + c "");', 'mul = eval("" a  * b * c"");', 'sub = eval("" a  - b"");', 'document.write(sum + ""<br>"");', 'document.write(mul + ""<br>"");', 'document.write(sub);', '</script>', '</head>', '</body>', '</html>', '<script>', 'var res;', 'function fun(a, b)', 'return a * b;', 'eval(""res = fun(50, 50);"");', 'document.write(res);', '</script>', '</head>', '</body>', '</html>', '<script>', 'var x = 0;', 'var str = ""if(x == 0) {\'SUNDAY\'} else \'MONDAY\';"";', ""document.write('The output is : ', eval(str));"", '</script>', '</head>', '</body>', '</html>', '<script>', 'var str = \'({""fname"" : ""Harry"", ""lname"" : ""Rickman""})\';', 'var obj = eval(str);', 'document.write(obj.fname + "" "" + obj.lname);', '</script>', '</head>', '</body>', '</html>']","['60', '6000', '-10', '2500', 'The output is : SUNDAY', 'Harry Rickman']",[],[]
63,['JavaScript closest()'],"['The closest() method in JavaScript is used to retrieve the closest ancestor, or parent of the element matches the selectors. If there is no ancestor found, the method returns null.']","['https://www.javatpoint.com/javascript-continue-statement', 'https://www.javatpoint.com/javascript-eval-function', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-closest1', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-closest2', 'https://www.javatpoint.com/javascript-continue-statement', 'https://www.javatpoint.com/javascript-eval-function', 'https://www.javatpoint.com/javascript-continue-statement']","['https://static.javatpoint.com/javascriptpages/images/javascript-closest.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-closest2.png']",[],[],"['Syntax', 'Example1', 'Example2']",[],"['In the above syntax, selectors is a string containing a selector (like p:hover, etc.) used to find a node.', ""Let's understand this method by using some illustrations."", 'After the execution of the above code, the output will be -', ""This is another example of using JavaScript's closest() method."", 'After the execution of the above code, the output will be -']","['This method traverses the element and its parents in the document tree, and the traversing continues until the first node is found that matches the provided selector string.', 'In this example, there are three div elements and a heading on which we are applying the closest() method. Here, the selectors that we are using are the id selector, descendant selector, child selector, and :not selector.']",[],"['targetElement.closest(selectors);', '<!DOCTYPE html>', '<html>', '<head>', '</head>', '<div id = ""div1""> This is the first div element.', '<h3 id = ""h""> This is a heading inside the div. </h3>', '<div id = ""div2""> This is the div inside the div element.', '<div id = ""div3""> This is the div element inside the second div element. </div>', '</div>', '</div>', '<script>', 'var val1 = document.getElementById(""div3"");', 'var o1 = val1.closest(""#div1"");', 'var o2 = val1.closest(""div div"");', 'var o3 = val1.closest(""div > div"");', 'var o4 = val1.closest("":not(#div3)"");', 'console.log(o1);', 'console.log(o2);', 'console.log(o3);', 'console.log(o4);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<div id = ""div1""> This is the div element.', '<p id = ""p1""> This is the paragraph element inside the div element.', '<h3 id = ""h""> This is the child of the paragraph element.', '<p id = ""p2""> This is the child of heading element of the paragraph element. </p>', '<script>', 'var val1 = document.getElementById(""p2"");', 'var o1 = val1.closest(""p"");', 'var o2 = val1.closest(""h3"");', 'var o3 = val1.closest(""div"");', 'console.log(o1);', 'console.log(o2);', 'console.log(o3);', '</script>', '</body>', '</html>']",[],[],[]
64,['JavaScript continue statement'],"[""There is full control to handle loop statements in JavaScript. Sometimes, a situation occurs when we require to skip some code of the loop and move to the next iteration. It can be achieved by using JavaScript's continue statement.""]","['https://www.javatpoint.com/javascript-getattribute-method', 'https://www.javatpoint.com/javascript-closest', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-loop', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-continue-statement1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-continue-statement2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-continue-statement3', 'https://www.javatpoint.com/javascript-getattribute-method', 'https://www.javatpoint.com/javascript-closest', 'https://www.javatpoint.com/javascript-getattribute-method']","['https://static.javatpoint.com/javascriptpages/images/javascript-continue-statement.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-continue-statement2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-continue-statement3.png']",[],[],"['Syntax', 'Example1', 'Example2', 'Example3']",[],"['It can be used with or without the label reference. The label is an identifier name for a statement. It is optional.', ""Let's understand the continue statement using some examples."", 'After the execution of the above code, the output will be -', 'After the execution of the above, the output will be -', 'After the execution, the output is -']","[""When we apply the continue statement, the program's flow immediately moves to the conditional expression, and if the condition is true, then the next iteration will be started; otherwise, the control exits the loop."", ""In this example, we are using a label with the continue statement. There is a nested for loop in which the outer loop is labeled as 'label1' and the inner loop is labeled as 'label2'.""]","['The continue statement in JavaScript is used to jumps over an iteration of the loop. Unlike the break statement, the continue statement breaks the current iteration and continues the execution of next iteration of the loop. It can be used in for loop, while loop, and do-while loop. When it is used in a while loop, then it jumps back to the condition. If it is used in for loop, the flow moves to the update expression.', 'In this example, we are using the continue statement in the for loop. Here the iteration of the loop begins with 1 and ends at 7. There is a conditional statement that checks when the iteration reaches at 4. When it is reached to 4, the iteration is skipped due to the continue statement and moves to the next iteration.', 'In this example, we are using the continue statement in the while loop. Here, we are defining an array \'rainbow\'. The iteration of the loop begins with 0 and ends at the length of the array. There is a conditional statement using the OR (||) operator, which checks when the iteration reaches to the values \'Magenta\' and \'Skyblue"". When it is reached to the appropriate values, the iteration is skipped due to the continue statement and moves to the next iteration.']","['continue;', 'continue[label];  // Using the label reference', '<!DOCTYPE html>', '<html>', '<head>', '</head>', '<body>', '<h1> Example of the continue statement in JavaScript</h1>', '<h3> Here, you can see that ""a == 4"" is skipped. </h3>', '<p id = ""para"">', '<script>', 'var res = """";', 'for (a = 1; a <=7; a++) {', 'if (a == 4) {', 'continue;', 'res += ""The value of a is : "" + a + ""<br>"";', 'document.getElementById(""para"").innerHTML = res;', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<title> JavaScript Continue Statement </title>', '</head>', '<h1> Example of the JavaScript Continue Statement </h1>', '<h3> You can see that the arrray values ""Magenta"" and ""Skyblue"" are skipped. </h3>', '<script>', 'var rainbow = [""Violet"", ""Indigo"", ""Magenta"", ""Blue"", ""Skyblue"", ""Green"", ""Yellow"", ""Orange"", ""Red""];', 'var i = 0;', 'var res = """";', 'while(i < rainbow.length){', 'if (rainbow[i] == ""Magenta"" || rainbow[i] == ""Skyblue"") {', 'i++;', 'continue;', 'res = """";', 'res += rainbow[i] + ""<br>"";', 'document.write(res);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<p> This is an example of the continue statement with the label </p>', '<p id=""para""></p>', '<script>', 'var res = """";', 'var i, j;', 'label1:     // This loop is labeled as ""label1""', 'for (i = 1; i <=5; i++) {', 'res += ""<br>"" + ""i = "" + i + "", j = "";', 'label2:    // This loop is labeled as ""label2""', 'for (j = 1; j <= 4; j++) {', 'if (j == 2) {', 'continue label2;', '}', 'document.getElementById(""para"").innerHTML = res += j + "" "";', '</script>', '</body>', '</html>']",[],[],[]
65,['JavaScript getAttribute() method'],"['The getAttribute() method is used to get the value of an attribute of the particular element. If the attribute exists, it returns the string representing the value of the corresponding attribute. If the corresponding attribute does not exist, it will return an empty string or null.']","['https://www.javatpoint.com/javascript-hide-elements', 'https://www.javatpoint.com/javascript-continue-statement', 'https://www.javatpoint.com/https://www.javatpoint.com/html-style', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-getattribute-method1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-getattribute-method2', 'https://www.javatpoint.com/javascript-hide-elements', 'https://www.javatpoint.com/javascript-continue-statement', 'https://www.javatpoint.com/javascript-hide-elements']","['https://static.javatpoint.com/javascriptpages/images/javascript-getattribute-method.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-getattribute-method2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-getattribute-method3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-getattribute-method4.png']",[],[],"['Syntax', 'Parameter Values', 'Example1', 'Example2']",[],"['It is different from the getAttributeNode() method. The getAttributeNode() method returns the attribute as an Attr object.', 'attributename: It is the required parameter. It is the name of the attribute we want to get the value from.', 'Let us understand it by using some examples.', 'We have to click the given button to get the value of the style attribute of given div elements.', 'After the execution, the output is -', 'After clicking the button, the output will be -', 'After the execution, the output will be -', 'After clicking the button, the output is -']","['In this example, there are two div elements with id div1 and div2, each having style attribute. We are getting the value of style attribute by using the getAttribute() method.']","[""We can also get the value of onclick attribute of the button element. In this example, we are extracting the value of onclick attribute and the value of href attribute. There is an anchor element with the href attribute; we are getting this attribute's value using the getAttribute() method.""]","['element.getAttribute(attributename)', '<!DOCTYPE html>', '<title>', 'The getAttribute Method', '</title>', '</head>', 'Welcome to the javaTpoint.com', 'Example of the getAttribute() Method', '<div id = ""div1"" style = ""background-color: yellow; font-size: 25px; color: red; border: 2px solid red;"">', 'This is first div element.', '<div id = ""div2"" style = ""background-color: lightblue; font-size: 25px; color: blue; border: 2px solid blue;"">', 'This is second div element.', '<button onclick = ""fun()"">', 'Click me!', '</button>', '<p id = ""p""></p>', '<p id = ""p1""></p>', '<script>', 'function fun() {', 'var val = document.getElementById(""div1"").getAttribute(""style"");', 'document.getElementById(""p"").innerHTML = val;', 'var val1 = document.getElementById(""div2"").getAttribute(""style"");', 'document.getElementById(""p1"").innerHTML = val1;', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<title>', 'The getAttribute Method', '</title>', '</head>', 'Welcome to the javaTpoint.com', 'Example of the getAttribute() Method', '<div id = ""div1"" style = ""background-color: yellow; font-size: 25px; color: red; border: 2px solid red;"">', 'This is the div element.', '<a href = ""http://www.javatpoint.com/"" id = ""link""> javaTpoint.com </a>', '<br><br>', '<button onclick = ""fun()"" id = ""btn"">', 'Click me!', '</button>', '<p id = ""p""></p>', '<p id = ""p1""></p>', '<script>', 'function fun() {', 'var val = document.getElementById(""btn"").getAttribute(""onclick"");', 'document.getElementById(""p"").innerHTML = val;', 'var val1 = document.getElementById(""link"").getAttribute(""href"");', 'document.getElementById(""p1"").innerHTML = val1;', '</script>', '</body>', '</html>']",[],[],[]
66,['JavaScript hide elements'],"['In JavaScript, we can hide the elements using the style.display or by using the style.visibility. The visibility property in JavaScript is also used to hide an element. The difference between the style.display and style.visibility is when using visibility: hidden, the tag is not visible, but space is allocated. Using display: none, the tag is also not visible, but there is no space allocated on the page.']","['https://www.javatpoint.com/javascript-prompt-dialog-box', 'https://www.javatpoint.com/javascript-getattribute-method', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-hide-elements1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-hide-elements2', 'https://www.javatpoint.com/https://www.javatpoint.com/html-heading', 'https://www.javatpoint.com/https://www.javatpoint.com/html-div-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-hide-elements3', 'https://www.javatpoint.com/javascript-prompt-dialog-box', 'https://www.javatpoint.com/javascript-getattribute-method', 'https://www.javatpoint.com/javascript-prompt-dialog-box']","['https://static.javatpoint.com/javascriptpages/images/javascript-hide-elements.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-hide-elements2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-hide-elements3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-hide-elements4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-hide-elements5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-hide-elements6.png']",[],[],"['Syntax', 'Example1', 'Example2', 'Example3']",[],"['The general syntax to hide an element using style.hidden and style.visibility is given as follows.', 'Using style.hidden', 'Using style.visibility', ""Now, let's see some examples to understand the hiding of elements in javascript."", 'After the execution, the output will be -', 'On clicking the button, the output will be -', ""We have to click the 'Click me!' button to see the effect."", 'After the execution of the above code, the output is -', 'On clicking the button, the output will be -', ""We have to click the 'Click me!' button to see the effect."", 'After clicking the button, the result will be -']","['In HTML, we can use the hidden attribute to hide the specified element. When the hidden attribute in HTML sets to true, the element is hidden, or when the value is false, the element is visible.', ""In this example, we will see how to hide elements by using JavaScript's style.visibliity property. Here, a div element and a paragraph element get hidden, but their space is still allocated."", 'In the output, we can see that the div element (on which we have applied style.visibility property) is hiding but still allocating the space. But the heading (on which we have applied style.display property) is hiding and not allocating any space.']","[""In this example, we will see how to remove elements by using JavaScript's style.display property. Here, there is a div element and a paragraph element that gets hide on clicking the given HTML button. We have to click the 'Click me!' button to see the effect."", 'In this example, we are using both style.display and style.visibility JavaScript properties to see the difference between both of them. Here, there is a div element and <h3> heading element on which we are applying the properties. We are hiding the div element by applying the style.display property, and hiding the <h3> element by applying the style.visibility property.']","['document.getElementById(""element"").style.display = ""none"";', 'document.getElementById(""element"").style.visibility = ""none"";', '<!DOCTYPE html>', '<title>', 'style.display', '</title>', '</head>', 'Welcome to the javaTpoint.com', ""Example of the JavaScript's style.display property"", '<div id = ""div"" style = ""background-color: yellow; font-size: 25px; color: red; border: 2px solid red;"">', 'This is the div element.', '<p id = ""p""> This is a paragraph element. </p>', '<button onclick = ""fun()"" id = ""btn"">', 'Click me!', '</button>', '<script>', 'function fun() {', 'document.getElementById(""div"").style.display = ""none"";', 'document.getElementById(""p"").style.display = ""none"";', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<title>', 'style.visibility', '</title>', '</head>', 'Welcome to the javaTpoint.com', ""Example of the JavaScript's style.visibility property"", '<div id = ""div"" style = ""background-color: yellow; font-size: 25px; color: red; border: 2px solid red;"">', 'This is the div element.', '<p id = ""p""> This is a paragraph element. </p>', '<button onclick = ""fun()"" id = ""btn"">', 'Click me!', '</button>', '<script>', 'function fun() {', 'document.getElementById(""div"").style.visibility = ""hidden"";', 'document.getElementById(""p"").style.visibility = ""hidden"";', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<title>', 'JavaScript hide elements', '</title>', '</head>', 'Welcome to the javaTpoint.com', 'Using both style.visibility and style.display properties', '<div id = ""div"" style = ""background-color: yellow; font-size: 25px; color: red; border: 2px solid red;"">', 'This is the div element.', '<p> This is a paragraph element. </p>', '<h3 id = ""heading""> This is the heading after the paragraph element. </h3>', '<button onclick = ""fun()"" id = ""btn"">', 'Click me!', '</button>', '<script>', 'function fun() {', 'document.getElementById(""div"").style.visibility = ""hidden"";', 'document.getElementById(""heading"").style.display = ""none"";', '</script>', '</body>', '</html>']",[],[],[]
67,['JavaScript prompt() dialog box'],"['The prompt() method in JavaScript is used to display a prompt box that prompts the user for the input. It is generally used to take the input from the user before entering the page. It can be written without using the window prefix. When the prompt box pops up, we have to click ""OK"" or ""Cancel"" to proceed.']","['https://www.javatpoint.com/javascript-removeattribute-method', 'https://www.javatpoint.com/javascript-hide-elements', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-prompt-dialog-box1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-prompt-dialog-box2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-prompt-dialog-box3', 'https://www.javatpoint.com/javascript-removeattribute-method', 'https://www.javatpoint.com/javascript-hide-elements', 'https://www.javatpoint.com/javascript-removeattribute-method']","['https://static.javatpoint.com/javascriptpages/images/javascript-prompt-dialog-box2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-prompt-dialog-box3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-prompt-dialog-box4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-prompt-dialog-box5.png']",[],[],"['Syntax', 'Values', 'Example1', 'Example2', 'Example3']",[],"['The parameter values of this function are defined as follows.', ""message: It is an optional parameter. It is the text displays to the user. We can omit this value if we don't require to show anything in the prompt."", 'default: It is also an optional parameter. It is a string that contains the default value displayed in the textbox.', ""Let's see some examples of the JavaScript prompt() method."", 'After the execution of the above code and clicking the Click me button, the output will be -', 'It is another example of using the prompt() method.', 'After the execution of the above code, the output will be -', 'On clicking the Click me button, the output will be -', 'After clicking the OK button, the output will be -', 'After the execution of the above code and clicking the Click me button, the output will be -']","['The prompt box takes the focus and forces the user to read the specified message. So, it should avoid overusing this method because it stops the user from accessing the other parts of the webpage until the box is closed.']","['The box is displayed using the prompt() method, which takes two arguments: The first argument is the label which displays in the text box, and the second argument is the default string, which displays in the textbox. The prompt box consists of two buttons, OK and Cancel. It returns null or the string entered by the user. When the user clicks ""OK,"" the box returns the input value. Otherwise, it returns null on clicking ""Cancel"".', 'In this example, there is a simple prompt box with a message and two buttons (OK and Cancel). Here, there is an HTML button which is used for displaying the prompt box. We are using the onclick attribute and call the fun() function where the prompt() is defined.', ""In this example, there is a prompt box with a message and buttons. Here, we are using the line-breaks in the message of the box. The line breaks are defined by using the '\\n'. The line breaks make the message readable and clear. We have to click the given button to see the effect.""]","['prompt(message, default)', '<script type = ""text/javascript"">', 'function fun() {', 'prompt (""This is a prompt box"", ""Hello world"");', '</script>', '</head>', '<p> Click the following button to see the effect </p>', '<input type = ""button"" value = ""Click me"" onclick = ""fun();"" />', '</form>', '</body>', '</html>', '<!DOCTYPE html>', '<title>', 'JavaScript prompt() method', '</title>', '<script>', 'function fun() {', 'var a = prompt(""Enter some text"", ""the javatpoint.com"");', 'if (a != null) {', 'document.getElementById(""para"").innerHTML = ""Welcome to "" + a;', '</script>', '</head>', '<body style = ""text-align: center;"">', '<h1 style = ""color: red;"">', 'Hello World', 'Example of the JavaScript prompt() method', '<button onclick = ""fun()"">', 'Click me', '</button>', '<p id = ""para""></p>', '</body>', '</html>', '<head>', '<script type = ""text/javascript"">', 'function fun() {', 'prompt("" Hello World \\n Welcome to the javaTpoint.com \\n This is a prompt box "");', '}', '</script>', '</head>', '<body>', '<p> Click the following button to see the effect </p>', '<form>', '<input type = ""button"" value = ""Click me"" onclick = ""fun();"" />', '</form>', '</body>', '</html>']",[],[],[]
68,['JavaScript removeAttribute() method'],"['This method is used to remove the specified attribute from the element. It is different from the removeAttributeNode() method. The removeAttributeNode() method removes the particular Attr object, but the removeAttribute() method removes the attribute with the specified name.']","['https://www.javatpoint.com/javascript-reset', 'https://www.javatpoint.com/javascript-prompt-dialog-box', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-removeattribute-method1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-removeattribute-method2', 'https://www.javatpoint.com/javascript-reset', 'https://www.javatpoint.com/javascript-prompt-dialog-box', 'https://www.javatpoint.com/javascript-reset']","['https://static.javatpoint.com/javascriptpages/images/javascript-removeattribute-method.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-removeattribute-method2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-removeattribute-method3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-removeattribute-method4.png']",[],[],"['Syntax', 'Parameter Values', 'Example1', 'Example2']",[],"['Let us understand it by using some examples.', 'After the execution of the above code, the output will be -', 'After clicking the given button, we will see the following output -', 'In this example, there are two div elements with id div1 and div2. We are applying the style attribute to these div elements.', 'Here, we are removing the style attribute of these div elements. We have to click the given HTML button to see the effect.', 'After the execution, the output will be -', 'After clicking the button, the output will be -', 'Similarly, we can use the removeAttribute() method to remove the target attribute, align attribute, readonly attribute, and many more.']","[""attributename: It is the required parameter that specifies the attribute's name to remove from the element. If the attribute doesn't exist, the method doesn't create any error."", 'In this example, there are two paragraph elements with id para, and para1 belongs to the same class jtp. Here, we are removing the class attribute of these paragraph elements. We have to click the given HTML button to see the effect.']",[],"['element.removeAttribute(attributename)', '<!DOCTYPE html>', '<title>', 'The removeAttribute Method', '</title>', '<style>', 'color: red;', 'background-color: yellow;', '</style>', '</head>', 'Welcome to the javaTpoint.com', 'Example of the removeAttribute() Method', '<p id = ""para"" class = ""jtp"">', 'This is a paragraph element.', '<p id = ""para1"" class = ""jtp"">', 'This is second paragraph element.', '<button onclick = ""fun()"">', 'Click me!', '</button>', '<script>', 'function fun() {', 'document.getElementById(""para"").removeAttribute(""class"");', 'document.getElementById(""para1"").removeAttribute(""class"");', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<title>', 'The removeAttribute Method', '</title>', '<style>', 'color: red;', 'background-color: yellow;', '</style>', '</head>', 'Welcome to the javaTpoint.com', 'Example of the removeAttribute() Method', '<div id = ""div1"" style = ""background-color: yellow; font-size: 25px; color: red; border: 2px solid red;"">', 'This is first div element.', '<div id = ""div2"" style = ""background-color: lightblue; font-size: 25px; color: blue; border: 2px solid blue;"">', 'This is second div element.', '<button onclick = ""fun()"">', 'Click me!', '</button>', '<script>', 'function fun() {', 'document.getElementById(""div1"").removeAttribute(""style"");', 'document.getElementById(""div2"").removeAttribute(""style"");', '</script>', '</body>', '</html>']",[],[],[]
69,['JavaScript reset'],"['In HTML, we can use the reset button to reset the form. In this article, we are discussing how to reset the form using JavaScript.']","['https://www.javatpoint.com/javascript-return', 'https://www.javatpoint.com/javascript-removeattribute-method', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-reset1', 'https://www.javatpoint.com/javascript-return', 'https://www.javatpoint.com/javascript-removeattribute-method', 'https://www.javatpoint.com/javascript-return']","['https://static.javatpoint.com/javascriptpages/images/javascript-reset.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-reset2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-reset3.png']",[],[],"['Syntax', 'Example']",[],"['After the execution of the above code, the output will be -', ""Now, let's fill the textfield values -"", 'Finally, on clicking the Reset data button, the values will be restored -']","[""In the function fun(), we are first taking the reference of the form required to reset, and then we are applying the reset() method over it. Now, let's see the code for the same.""]","['In JavaScript, the reset() method does the same thing as the HTML reset button. It is used to clear all the values of the form elements. It can be used to set the values to default. It does not require any parameter values and also does not return any value.', 'To illustrate the use of reset() method in JavaScript, we are creating a simple HTML document into which we have created a form with the id = ""myForm"". In this form, there are four text fields: ""First Name"", ""Last Name"", ""Age"", and ""E-mail Id"". There are two buttons that are ""Submit"", and ""Reset data"". When we click the Reset data button, it calls the function fun(), where we have defined the JavaScript\'s reset() method.']","['formElement.reset()', '<!DOCTYPE html>', '<head>', '<title> reset() method </title>', '</head>', '<body style = ""text-align: center;"">', '<div style = ""background: pink;"">', '<font color = ""red"" size = ""6px"">', '<b> Example of the reset() method </b>', '</font>', '</div>', '<div style = ""background: lightblue;"">', '<form id = ""myForm"" action = ""#"" style = ""font-size: 20px;"" >', '<p> First Name: <input type = ""text"" id = ""fname"" /></p>', '<p> Last Name: <input type = ""text"" id = ""lname"" /></p>', '<p> E-mail Id: \xa0 <input type = ""email"" id = ""email"" /></p>', '<p> Age: \xa0\xa0\xa0\xa0\xa0\xa0\xa0 <input type = ""number"" id = ""age"" /></p>', '<input type = ""submit"">', '<input type = ""button"" value = ""Reset data"" onClick = ""fun()""/>', '</form>', '</div>', '<script>', 'function fun(){', 'document.getElementById(""myForm"").reset();', '</script>', '</body>', '</html>']",[],[],[]
70,['JavaScript return'],['The return statement is used to return a particular value from the function to the function caller. The function will stop executing when the return statement is called. The return statement should be the last statement in a function because the code after the return statement will be unreachable.'],"['https://www.javatpoint.com/javascript-string-split', 'https://www.javatpoint.com/javascript-reset', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-return1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-return2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-return3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-return4', 'https://www.javatpoint.com/javascript-string-split', 'https://www.javatpoint.com/javascript-reset', 'https://www.javatpoint.com/javascript-string-split']","['https://static.javatpoint.com/javascriptpages/images/javascript-return.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-return2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-return3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-return4.png']",[],[],"['Syntax', 'Example1', 'Example2', 'Example3 - Returning multiple values using Array', 'Example4 - Returning multiple values using object']",[],"['Then, it will be transformed into -', 'We can use parentheses to prevent this problem. It can be written as -', ""Now, let's see some examples of using the return statement in JavaScript."", 'After the execution of the above code, the output is -', 'Here, we are interrupting a function using the return statement. The function stops executing immediately when the return statement is called.', 'Here, the return statement is without using the expression, so it returns undefined.', 'After the execution of the above code, the output will be -']","['We can return primitive values (such as Boolean, number, string, etc.) and Object types (such as functions, objects, arrays, etc.) by using the return statement.', 'We can also return multiple values using the return statement. It cannot be done directly. We have to use an Array or Object to return multiple values from a function.', 'The expression in the above syntax is the value returned to the function caller. It is optional. If the expression is not specified, the function returns undefined.', 'It is not allowed to use a line terminator between the return keyword and value. We can understand it by using the following lines. Suppose we are writing the return statement as follows:', 'There is the automatic insertion of the semicolon after the return statement. The code written after the return statement (x + y;) will be considered as the unreachable code.', 'This is a simple example of using the return statement. Here, we are returning the result of the product of two numbers and returned back the value to the function caller.', 'The variable res is the function caller; it is calling the function fun() and passing two integers as the arguments of the function. The result will be stored in the res variable. In the output, the value 360 is the product of arguments 12 and 30.', 'In this example, we are returning multiple values by using the Array. Here, we are using the ES6 Array destructuring syntax to unpack the values of array.', 'In this example, we are returning multiple values by using the Object. Here, we are using the ES6 Object destructuring syntax to unpack the values of the object.']","[""There is an infinite while loop and variable i, which is initialized to 1. The loop continues until the value of i reached to 4. When the variable's value will be 4, the loop stops its execution because of the return statement. The statement after the loop will never get executed."", ""Now, we will see how to return multiple values using the return statement. Usually, the JavaScript functions returns a single value, but we can return multiple values by using the array or object. To return multiple values, we can pack the values as the object's properties or array elements.""]","['return expression;', 'return;', 'return (', '<!DOCTYPE html>', '<html>', '<head>', '</head>', '<h2> Welcome to the javaTpoint.com </h2>', ""<h3> Example of the JavaScript's return statement </h3>"", '<script>', 'var res = fun(12, 30);', 'function fun(x, y)', 'return x * y;', 'document.write(res);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<html>', '<head>', '</head>', '<h2> Welcome to the javaTpoint.com </h2>', ""<h3> Example of the JavaScript's return statement </h3>"", '<script>', 'var x = fun();', 'function fun() {', 'var i = 1;', 'while(i) {', ""document.write(i + '<br>');"", 'if (i == 4) {', 'return;', '}', ""document.write(i + '<br>');"", 'i++;', ""document.write('Hello world');"", '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<title> JavaScript return </title>', '</head>', '<h1> Welcome to the javaTpoint.com </h1>', '<h3> This is an example of returning multiple values using array </h3>', '<script>', 'function getData() {', ""let fname = 'John',"", ""lname = 'Rickman',"", ""age = '25',"", ""occupation = 'Private Employee';"", 'return [fname, lname, age, occupation];', 'const [fname, lname, age, occupation] = getData();', 'document.write(""Name = "" + fname + "" "" + lname + ""<br>"");', 'document.write(""Age = "" + age + ""<br>"");', 'document.write(""Occupation = "" + occupation);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<title> JavaScript return </title>', '</head>', '<h1> Welcome to the javaTpoint.com </h1>', '<h3> This is an example of returning multiple values using object </h3>', '<script>', 'function getData() {', ""let fname = 'John',"", ""lname = 'Rickman',"", ""age = '25',"", ""occupation = 'Private Employee';"", 'return {', 'occupation', 'let {fname, lname, age, occupation} = getData();', 'document.write(""Name = "" + fname + "" "" + lname + ""<br>"");', 'document.write(""Age = "" + age + ""<br>"");', 'document.write(""Occupation = "" + occupation);', '</script>', '</body>', '</html>']",[],[],[]
71,['JavaScript String split()'],"['As the name implies, the split() method in JavaScript splits the string into the array of substrings, puts these substrings into an array, and returns the new array. It does not change the original string.']","['https://www.javatpoint.com/javascript-typeof-operator', 'https://www.javatpoint.com/javascript-return', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-split1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-split2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-split3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-split4', 'https://www.javatpoint.com/javascript-typeof-operator', 'https://www.javatpoint.com/javascript-return', 'https://www.javatpoint.com/javascript-typeof-operator']",[],[],[],"['Syntax', 'Example1', 'Example2', 'Example3', 'Example4']",[],"['The function arguments are discussed as follows.', 'separator: It is an optional parameter. It can be a regular expression or a simple string. It specifies the point where the split should take place.', 'If it has multiple characters, then the sequence of the entire character must be found to split.', 'An array can contain fewer entries than the given limit. It happens when the end of the string is reached before the limit is reached.', ""Let's understand the split() method using some examples."", 'Here, we are not specifying the limit argument.']","['When the string is empty, rather than returning an empty array, the split() method returns the array with an empty string. The empty array is returned when both string and separator are empty strings.', 'If the separator is not present in the given string, or if it is omitted, then the entire string becomes a single array element. In these cases, the returned array contains a single element consisting of the entire string.', 'If the separator is present at the beginning or the end of the string, then it still has the effect of splitting. The returned array consists of an empty string of zero length that appears at the beginning or the last position of the returned array.', 'In this example, the split() function splits the string str wherever the whitespace ("" "") occurs and returns an array of strings. Here, we are using the limit argument and providing the value of the limit argument to 3.', ""In this example, we are using the letter 't' as the separator of the given string. The split() function will make an array of strings by splitting the given string at each occurrence of the letter 't'."", 'In this example, we are omitting the separator parameter. In the output, we can see that the returned array contains a single element consists of the given string.', 'The limit parameter limits the number of splits to 2 because we are defining 2 as the value of the limit. In the output, we can see that the splitting only happens twice.']","['limit: It is also an optional parameter. It is a non-negative integer that specifies the number of limits. It defines the higher limit on the number of splits to be found in the given string. If it is given, it splits the string at each occurrence of the specified separator. It stops when the limit entries have been placed in the array.', ""Here, we are defining the limit parameter and using the letter 'o' as the separator of the given string. The split() function will create an array of strings by splitting the given string wherever the given letter 'o' occurs until the limit is reached.""]","['string.split(separator, limit)', '<!DOCTYPE html>', '<script>', ""var str = 'Welcome to the javaTpoint.com'"", 'var arr = str.split("" "", 3);', 'document.write(arr);', '</script>', '</head>', '</body>', '</html>', '<!DOCTYPE html>', '<script>', ""var str = 'Welcome to the javaTpoint.com'"", 'var arr = str.split(""t"");', 'document.write(arr);', '</script>', '</head>', '</body>', '</html>', '<!DOCTYPE html>', '<script>', ""var str = 'Welcome to the javaTpoint.com'"", 'var arr = str.split();', 'document.write(arr);', '</script>', '</head>', '</body>', '</html>', '<!DOCTYPE html>', '<script>', ""var str = 'Welcome to the javaTpoint.com'"", 'var arr = str.split(""o"", 2);', 'document.write(arr);', '</script>', '</head>', '</body>', '</html>']","['Welcome,to,the', 'Welcome ,o ,he javaTpoin,.com', 'Welcome to the javaTpoint.com', 'Welc,me t']",[],[]
72,['JavaScript typeof operator'],"['The JavaScript typeof operator is used to return a string that represents the type of JavaScript for a given value. It returns the data type of the operand in the form of a string. The operand can be a literal or a data structure like a function, an object, or a variable.']","['https://www.javatpoint.com/javascript-ternary-operator', 'https://www.javatpoint.com/javascript-string-split', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-typeof-operator1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-typeof-operator2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-typeof-operator3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-typeof-operator4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-typeof-operator5', 'https://www.javatpoint.com/javascript-ternary-operator', 'https://www.javatpoint.com/javascript-string-split', 'https://www.javatpoint.com/javascript-ternary-operator']",[],[],[],"['Syntax', 'Values', 'Example1', 'Example2', 'Example3', 'Example4', 'Example5']",[],"['There are following two ways of using the typeof operator.', 'operand: It is an expression that represents the object or primitive whose type is to be returned.', 'The possible return values of the typeof operator are tabulated as follows:', ""Let's understand this operator by using some examples."", 'After the execution of the above code, the output will be -', 'After the execution of the above code, the output will be -', 'After the execution of the above code, the output will be - ', 'After the execution of the above code, the output will be - ', 'After the execution of the above code, the output will be - ']","['In this example, the operands are of number type. The typeof operator will print the ""number"" as the type of the operand, whether the operand is a negative interger, floating-point number, infinity, NaN, zero, or any integer.', 'In this example, the operands are of string type. The typeof operator will print the ""string"" as the type of the operand, whether the operand is an empty string, collection of characters, number written in quotes.', 'In this example, the operands are of Boolean type. The typeof operator will print the ""boolean"", as the type of the operand, if the operand is true, or false.', 'In this example, the operands are of Object and Function type. The typeof operator will print the ""object"" and ""function"", according to the type of the operand.']","['In this example, the operands are of undefined type. The typeof operator will print the ""undefined"" as the type of the operand. Here, the type of Null is undefined, it is because it is written as Null instead of null. If we write it as null, the type of it will be object.']","['typeof operand', 'typeof (operand)', '<script>', 'document.write(typeof (45) + ""<br>"");  // results: ""number""', 'document.write(typeof (-90) + ""<br>"");  // results: ""number""', 'document.write(typeof (0) + ""<br>"");  // results: ""number""', 'document.write(typeof (22.6) + ""<br>"");  // results: ""number""', 'document.write(typeof (Infinity) + ""<br>"");  // results: ""number""', 'document.write(typeof (NaN));  // results: ""number"". Although NaN is ""Not-A-Number""', '</script>', '</head>', '</body>', '</html>', '<script>', 'document.write(typeof ("""") + ""<br>"");  // results: ""string""', 'document.write(typeof (""javaTpoint.com"") + ""<br>"");  // results: ""string""', 'document.write(typeof (""20"") + ""<br>"");  // results: ""string""', 'document.write(typeof (typeof 1) + ""<br>"");  // results: ""string""', 'document.write(typeof String(12));  // wrapping in String function will results: ""string""', '</script>', '</head>', '</body>', '</html>', '<script>', 'document.write(typeof (true) + ""<br>"");  // results: ""boolean""', 'document.write(typeof (false) + ""<br>"");  // results: ""boolean""', 'document.write(typeof Boolean(20) + ""<br>"");   // wrapping in Boolean function will results: ""boolean""', '</script>', '</head>', '</body>', '</html>', '<script>', 'document.write(typeof Null + ""<br>"");  // results: ""undefined""', 'document.write(typeof undefined + ""<br>"");  // results: ""undefined""', 'document.write(typeof a + ""<br>"");   // results: ""undefined""', '</script>', '</head>', '</body>', '</html>', '<script>', 'document.write(typeof null + ""<br>"");  // results: ""object""', 'document.write(typeof [1, 2, \'hello\'] + ""<br>"");  // results: ""object""', 'document.write(typeof {a: \'hello\'} + ""<br>"");   // results: ""object""', 'document.write(typeof [1, 2, 3, 4] + ""<br>"");   // results: ""object""', 'document.write(typeof function(){} + ""<br>"");   // results: ""function""', 'document.write(typeof class hello{} + ""<br>"");   // results: ""function""', '</script>', '</head>', '</body>', '</html>']","['number', 'number', 'number', 'number', 'number', 'number', 'string', 'string', 'string', 'string', 'string', 'boolean', 'boolean', 'boolean', 'undefined', 'undefined', 'undefined', 'object', 'object', 'object', 'object', 'function', 'function']","['Type of the operand|||Result&&&object|||""object""&&&number|||""number""&&&string|||""string""&&&boolean|||""boolean""&&&function|||""function""&&&undefined|||""undefined""']",[]
73,['JavaScript ternary operator'],"['During coding in any language, we use various ways to handle conditional situations. The common one is the use of if statement; instead of using the if statement, we can use the ternary operator in JavaScript. The ternary operator assigns a value to the variable based on a condition provided to it.']","['https://www.javatpoint.com/javascript-reload-method', 'https://www.javatpoint.com/javascript-typeof-operator', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-operators', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-ternary-operator1', 'https://www.javatpoint.com/javascript-reload-method', 'https://www.javatpoint.com/javascript-typeof-operator', 'https://www.javatpoint.com/javascript-reload-method']",['https://static.javatpoint.com/javascriptpages/images/javascript-ternary-operator.png'],[],[],"['Syntax', 'Example']",[],"[""Let's see an example of using the ternary operator in JavaScript."", 'After the execution, the output will be -']","['It is the only operator in JavaScript that takes three operands. The working of this operator is the same as the if-else conditional statement. We can say that it is the shortcut of the if-else.', 'This is a simple example of checking whether the number is odd or even using the ternary operator. The result will display using the alert() dialog box.']","['This operator includes three operands: a condition followed by a question mark (?) sign, and two expressions separated by the colon (:). The first expression is executed when the condition is true, and the second expression is executed when the condition is false.', ""In the above syntax, condition, expr1, and expr2 are the three operands used in the ternary operator. The value is assigned to the variable 'a' based on the provided condition. The condition is evaluated as a Boolean value; based on its result, the operator assigns the result to the variable. It assigns the first expression on the true value of the condition and assigns the second expression on the false value of the condition.""]","['var a = (condition) ? expr1 : expr2;', '<!DOCTYPE html>', '<script>', 'let a = 358;', ""let val = ( a % 2 == 0) ? 'Even Number' : 'Odd Number';"", 'alert(val);', '</script>', '</head>', '<h1> Welcome to the javaTpoint.com </h1>', '<h3> This is an example of ternary operator.  </h3>', '</body>', '</html>']",[],[],[]
74,['JavaScript reload() method'],"['In JavaScript, the reload() method is used to reload a webpage. It is similar to the refresh button of the browser. This method does not return any value.']","['https://www.javatpoint.com/javascript-setattribute', 'https://www.javatpoint.com/javascript-ternary-operator', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-reload-method1', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-setattribute', 'https://www.javatpoint.com/javascript-ternary-operator', 'https://www.javatpoint.com/javascript-setattribute']",['https://static.javatpoint.com/javascriptpages/images/javascript-reload-method.png'],[],[],"['Syntax', 'Example']",[],"[""Let's see an example of using the location.reload() method."", 'Using the above syntax, we do not require creating any JavaScript function to reload the page.']","['This method can have optional parameters true and false. The true keyword force to reload the page from the server, while the false keyword reloads the page from the cache.', ""The false is the default parameter of this method, so if we omitted the parameter's value, the reload() method reloads the page from the cache. It means that the object.reload() is same as the object.reload(false)."", 'In the above example, instead of calling the fun() function, we can also attach the location.reload() method to the button markup. It can be done as given below:']","[""Here, the function fun() contains the location.reload() method. We are calling the function fun() using the onclick attribute of the button element. So, we have to click the given HTML 'Reload' button to see the effect. After clicking the button, the page will reload.""]","['location.reload()', '<!DOCTYPE html>', '<title>', 'location.reload() method', '</title>', '<script>', 'function fun() {', 'location.reload();', '</script>', '</head>', '<h1> Welcome to the javaTpoint.com </h1>', '<h2> This is an example of location.reload() method </h2>', ""<p> Click the following 'Reload' button to see the effect. </p>"", '<button onclick = ""fun()""> Reload </button>', '</body>', '</html>', '<button onclick = ""location.reload()""> Reload </button>']",[],[],[]
75,['JavaScript setAttribute()'],"[""The setAttribute() method is used to set or add an attribute to a particular element and provides a value to it. If the attribute already exists, it only set or changes the value of the attribute. So, we can also use the setAttribute() method to update the existing attribute's value. If the corresponding attribute does not exist, it will create a new attribute with the specified name and value. This method does not return any value. The attribute name automatically converts into lowercase when we use it on an HTML element.""]","['https://www.javatpoint.com/javascript-setinterval-method', 'https://www.javatpoint.com/javascript-reload-method', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-removeattribute-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-setattribute1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-setattribute2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-setattribute3', 'https://www.javatpoint.com/javascript-setinterval-method', 'https://www.javatpoint.com/javascript-reload-method', 'https://www.javatpoint.com/javascript-setinterval-method']","['https://static.javatpoint.com/javascriptpages/images/javascript-setattribute.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-setattribute2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-setattribute3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-setattribute4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-setattribute5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-setattribute6.png']",[],[],"['Syntax', 'Parameter Values', 'Example1', 'Example2', 'Example3']",[],"['Incorrect way', 'It is recommended not to use it to change the style.', 'Correct way', 'The correct way to change the style is given below.', 'attributeName: It is the name of the attribute that we want to add to an element. It cannot be left empty; i.e., it is not optional.', 'attributeValue: It is the value of the attribute that we are adding to an element. It is also not an optional value.', ""Let's understand how to use setAttribute() method by using some illustrations."", 'In this example, we are adding a href attribute with a value of ""https://www.javatpoint.com/"" to the <a> tag with id = ""link"".', 'After the execution of the above code, the output will be - ', 'We can see that before clicking the given button, the link is not created. After clicking the button, the output will be -', 'Now, we can see that the link is created.', 'We have to click the specified button to see the effect.', 'After the execution of the above code, the output will be -', 'After clicking the button, the output will be -', 'After the execution of the above code, the output will be -', 'After clicking the button, the output will be -']","['To get the value of an attribute, we can use the getAttribute() method, and to remove a specific attribute from an element, we can use the removeAtrribute() method.', 'The arguments of this method are not optional. Both parameters must be included when using this method. The parameter values of this method are defined as follows.', 'In this example we are updating the value of a existing attribute using the setAttribute() method. Here, we are converting a textfield to a button by changing the value of type attribute from text to button.', 'Here, we are adding a Boolean attribute disabled to disable the specified button. If we set the value of the disabled attribute to an empty string, then it is automatically sets to true which causes the button to be disabled.']","['Although we can add the style attribute using the setAttribute() method, but it is recommended not to use this method for styling. For adding styles, we can use the properties of the style object that will effectively change the style. It can be clear with the following code.', 'If we are adding a Boolean attribute such as disabled, then whatever the value it has, it is always considered as true. If we require to set the value of the Boolean attribute to false, we have to remove the entire attribute using the removeAttribute() method.']","['element.setAttribute(""style"", ""background-color: blue;"");', 'element.setAttribute.backgroundColor = ""blue"";', 'element.setAttribute(attributeName, attributeValue)', '<title> JavaScript setAttribute() method </title>', '<script>', 'function fun() {', 'document.getElementById(""link"").setAttribute(""href"", ""https://www.javatpoint.com/"");', '</script>', '</head>', '<body style = ""text-align: center;"">', '<h2> It is an example of adding an attribute using the setAttribute() method. </h2>', '<a id = ""link""> javaTpoint.com </a>', '<p> Click the follwing button to see the effect. </p>', '<button onclick = ""fun()""> Add attribute </button>', '</body>', '</html>', '<title> JavaScript setAttribute() method </title>', '<script>', 'function fun() {', 'document.getElementById(""change"").setAttribute(""type"", ""button"");', '</script>', '</head>', '<body style = ""text-align: center;"">', ""<h2> It is an example to update an attribute's value using the setAttribute() method. </h2>"", '<input id = ""change""  type = ""text"" value = ""javaTpoint""/>', '<p> Click the follwing button to see the effect. </p>', '<button onclick = ""fun()""> Change </button>', '</body>', '</html>', '<html>', '<head>', '<title> JavaScript setAttribute() method </title>', '<script>', 'function fun() {', 'document.getElementById(""btn"").setAttribute(""disabled"", """");', '}', '</script>', '</head>', '<body style = ""text-align: center;"">', '<h2> Example of the setAttribute() method. </h2>', '<p> Click the following button to see the effect </p>', '<button onclick = ""fun()"" id = ""btn""> Click me </button>', '</body>', '</html>']",[],[],[]
76,['JavaScript setInterval() method'],['The setInterval() method in JavaScript is used to repeat a specified function at every given time-interval. It evaluates an expression or calls a function at given intervals. This method continues the calling of function until the window is closed or the clearInterval() method is called. This method returns a numeric value or a non-zero number that identifies the created timer.'],"['https://www.javatpoint.com/javascript-settimeout-method', 'https://www.javatpoint.com/javascript-setattribute', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-setinterval-method1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-setinterval-method2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-setinterval-method3', 'https://www.javatpoint.com/javascript-settimeout-method', 'https://www.javatpoint.com/javascript-setattribute', 'https://www.javatpoint.com/javascript-settimeout-method']","['https://static.javatpoint.com/javascriptpages/images/javascript-setinterval-method.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-setinterval-method2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-setinterval-method3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-setinterval-method4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-setinterval-method5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-setinterval-method6.png']",[],['How to stop the execution?'],"['Syntax', 'Parameter values', 'Example1', 'Example2', 'Example3']",[],"['The commonly used syntax of setInterval() method is given below:', 'This method takes two parameter values function and milliseconds that are defined as follows.', 'function: It is the function containing the block of code that will be executed.', ""Let's understand the use of setInterval() method by using some illustrations."", 'After the time interval of three seconds, the output will be -', 'Now, there is another example of using the setInterval() method.', 'The background will keep changing from lightgreen to lightblue on an interval of 200 milliseconds. After 200 milliseconds, the output will be -', 'We have to click the specified stop button to see the effect.']","['Unlike the setTimeout() method, the setInterval() method invokes the function multiple times. This method can be written with or without the window prefix.', 'milliseconds: This parameter represents the length of the time interval between each execution. The interval is in milliseconds. It defines how often the code will be executed. If its value is less than 10, the value 10 is used.', 'We can use the clearInterval() method to stop the execution of the function specified in setInterval() method. The value returned by the setInterval() method can be used as the argument of clearInterval() method to cancel the timeout.', 'Here, the background color will change on every 200 milliseconds. We are not using any method to stop the execution of the function specified in setInterval() method. So the method continues the execution of the function until the window is closed.', 'In the above example, we have not used any method to stop the toggling between the colors. Here, we are using the clearInterval() method to stop the toggling of colors in the previous example.', 'The color of the background will start changing after 200 milliseconds. On clicking the specified stop button, the toggling between the colors will be stopped on the corresponding background color. The output after clicking the button will be -']","['This is a simple example of using the setInterval() method. Here, an alert dialog box displays at an interval of 3 seconds. We are not using any method to stop the execution of the function specified in setInterval() method. So the method continues the execution of the function until the window is closed.']","['window.setInterval(function, milliseconds);', '<title> setInterval() method </title>', '</head>', '<h1> Hello World :) :) </h1>', '<h3> This is an example of using the setInterval() method </h3>', '<p> Here, an alert dialog box displays on every three seconds. </p>', '<script>', 'a = setInterval(fun, 3000);', 'function fun() {', 'alert("" Welcome to the javaTpoint.com "");', '}</script>', '</body>', '</html>', '<title> setInterval() method </title>', '</head>', '<h1> Hello World :) :) </h1>', '<h3> This is an example of using the setInterval() method </h3>', '<p> Here, the background color changes on every 200 milliseconds. </p>', '<script>', 'var var1 = setInterval(color, 200);', 'function color() {', 'var var2 = document.body;', 'var2.style.backgroundColor = var2.style.backgroundColor == ""lightblue"" ? ""lightgreen"" : ""lightblue"";', '</script>', '</body>', '</html>', '<title> setInterval() method </title>', '</head>', '<h1> Hello World :) :) </h1>', '<h3> This is an example of using the setInterval() method </h3>', '<p> Here, the background color changes on every 200 milliseconds. </p>', '<button onclick = ""stop()""> Stop </button>', '<script>', 'var var1 = setInterval(color, 200);', 'function color() {', 'var var2 = document.body;', 'var2.style.backgroundColor = var2.style.backgroundColor == ""lightblue"" ? ""lightgreen"" : ""lightblue"";', 'function stop() {', 'clearInterval(var1);', '</script>', '</body>', '</html>']",[],[],[]
77,['JavaScript setTimeout() method'],['The setTimeout() method in JavaScript is used to execute a function after waiting for the specified time interval. This method returns a numeric value that represents the ID value of the timer.'],"['https://www.javatpoint.com/javascript-string-includes', 'https://www.javatpoint.com/javascript-setinterval-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-settimeout-method1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-settimeout-method2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-settimeout-method3', 'https://www.javatpoint.com/javascript-string-includes', 'https://www.javatpoint.com/javascript-setinterval-method', 'https://www.javatpoint.com/javascript-string-includes']","['https://static.javatpoint.com/javascriptpages/images/javascript-settimeout-method.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-settimeout-method2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-settimeout-method3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-settimeout-method3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-settimeout-method4.png']",[],[],"['Syntax', 'Parameter values', 'Example1', 'Example2', 'Example3']",[],"['The commonly used syntax of the setTimeout() method is given below.', 'This method takes two parameter values function and milliseconds that are defined as follows.', 'function: It is the function containing the block of code that will be executed.', ""Let's understand the use of setTimeout() method by using some illustrations."", 'After an interval of two seconds, the output will be -', 'After two seconds, a new tab will open as follows -', 'The new tab is closed after the interval of two seconds.', 'We have to click the given stop button before two seconds to see the effect.']","['Unlike the setInterval() method, the setTimeout() method executes the function only once. This method can be written with or without the window prefix.', 'Because we are not using any method to prevent the execution of the function specified in setTimeout() method. So the function gets execute only once, after the given time interval.', ""In the above examples, we have not used any method to prevent the execution of function specified in setTimeout(). Here, we are using the clearTimeout() method to stop the function's execution."", 'The output will remain same if the user clicks the stop button before two seconds. Otherwise, a new tab will open after two seconds and close after two seconds of opening.']","['We can use the clearTimeout() method to stop the timeout or to prevent the execution of the function specified in the setTimeout() method. The value returned by the setTimeout() method can be used as the argument of the clearTimeout() method to cancel the timer.', 'milliseconds: This parameter represents the time-interval after which the execution of the function takes place. The interval is in milliseconds. Its default value is 0. It defines how often the code will be executed. If it is not specified, the value 0 is used.', 'This is a simple example of using the setTimeout() method. Here, an alert dialog box will display at an interval of two seconds. We are not using any method to prevent the execution of the function specified in setTimeout() method. So the setTimeout() method executes the specified function only once, after the given time interval.', 'It is another example of using the setTimeout() method. Here, a new tab opens after a time interval of two seconds and gets close after two seconds of opening. We are using the window.open() method to open a new tab and window.close() method to close the opened tab.']","['window.setTimeout(function, milliseconds);', '<title> setTimeout() method </title>', '</head>', '<h1> Hello World :) :) </h1>', '<h3> This is an example of using the setTimeout() method </h3>', '<p> Here, an alert dialog box will display after two seconds. </p>', '<script>', 'a = setTimeout(fun, 2000);', 'function fun() {', 'alert("" Welcome to the javaTpoint.com "");', '</script>', '</body>', '</html>', '<title> setTimeout() method </title>', '</head>', '<h1> Hello World :) :) </h1>', '<h3> This is an example of using the setTimeout() method </h3>', '<p> Here, a new tab will open after 2 seconds and close after 2 seconds. </p>', '<script>', 'var a = setTimeout(fun1, 2000);', 'function fun1()', 'var win1 = window.open();', 'win1.document.write("" <h2> Welcome to the javaTpoint.com </h2>"");', 'setTimeout(function(){win1.close()}, 2000);', '</script>', '</body>', '</html>', '<title> setTimeout() method </title>', '</head>', '<h1> Hello World :) :) </h1>', '<h3> This is an example of using the setTimeout() method </h3>', '<p> Click the following button before 2 seconds to see the effect. </p>', '<button onclick = ""stop()""> Stop </button>', '<script>', 'var a = setTimeout(fun1, 2000);', 'function fun1()', 'var win1 = window.open();', 'win1.document.write("" <h2> Welcome to the javaTpoint.com </h2>"");', 'setTimeout(function(){win1.close()}, 2000);', 'function stop() {', 'clearTimeout(a);', '</script>', '</body>', '</html>']",[],[],[]
78,['JavaScript string includes()'],"['The JavaScript string includes() method is used to determine whether or not the specified substring is present in the given string. It is a case-sensitive method. It returns the Boolean value, either true or false. It returns true if the string contains the specified substring and returns false if not.']","['https://www.javatpoint.com/javascript-typedarray', 'https://www.javatpoint.com/javascript-settimeout-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-includes1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-includes2', 'https://www.javatpoint.com/javascript-typedarray', 'https://www.javatpoint.com/javascript-settimeout-method', 'https://www.javatpoint.com/javascript-typedarray']","['https://static.javatpoint.com/javascriptpages/images/javascript-string-includes.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-string-includes2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-string-includes3.png']",[],[],"['Syntax', 'Parameter values', 'Example1', 'Example2', 'Example3']",[],"['It does not change the value of the original string.', 'The following syntax represents the includes() method:', 'The parameter values of this method are defined as follows:', 'searchValue: It is a required parameter. It is the substring to search for.', ""Let's understand the includes() method using some examples."", 'Here, we are not defining the position to start the search. So, the search will begin from the initial position of the string.', ""Although the word 'to' is present in the given string, but the method is case-sensitive so, it will return the Boolean value false."", 'In this example, we are defining the position to start the search. So, the searching will start from the specified position.']","['start: It is an optional parameter. It represents the position where to start the searching in the string. Its default value is 0. When it is omitted, the search will begin from the initial position of the string, i.e., from 0.', ""In this example, we are determining whether the includes() method is case-sensitive or not. The given string is 'Welcome to the javaTpoint.com'. We are searching for the substring 'TO' in the given string.""]","[""It is a simple example to determine whether the given string contains the specified substring. Here, we are declaring a variable str and assigning a string value 'Welcome to the javaTpoint.com' to it. Then we use the includes() method for determining whether the given substring ('to') is present or not.""]","['string.includes(searchValue, start);', '<!DOCTYPE html>', '</head>', '<h1> Hello world :):) </h1>', ""<h3> This is an example of using the JavaScript's string includes() method. </h3>"", '<script>', 'let str = ""Welcome to the javaTpoint.com"";', 'document.write("" <b> The given string is: </b>"", str);', 'document.write(""<br>"");', ""let res = str.includes('tO');"", 'document.write("" <b> The result is: </b> "", res);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<h1> Hello world :):) </h1>', ""<h3> This is an example of using the JavaScript's string includes() method. </h3>"", ""<p> Here, we are searching for the substring <b> 'TO' </b> in the given string. </p>"", '<script>', 'let str = ""Welcome to the javaTpoint.com"";', 'document.write("" <b> The given string is: </b>"", str);', 'document.write(""<br>"");', ""let res = str.includes('TO');"", 'document.write("" <b> The result is: </b> "", res);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<h1> Hello world :):) </h1>', '<h3> This is an example of using the JavaScript string includes() method. </h3>', '<script>', 'let str = ""Welcome to the javaTpoint.com"";', 'document.write("" <b> The given string is: </b>"", str);', 'document.write(""<br>"");', ""let res = str.includes('the', 10);"", 'document.write("" <b> The result of str.includes(\'the\', 10) is : </b> "", res);', '</script>', '</body>', '</html>']",[],[],[]
79,['Calculate current week number in JavaScript'],"['Sometimes we need to calculate the current week number or the week number for a given date. This problem can be solved using the JavaScript programming language. JavaScript offers several date functions, such as getDays(), getMonth(), getTime(), to solve date-related tasks. Along with that, the math functions Math.floor() and Math.ceil() also help to calculate the week number.']","['https://www.javatpoint.com/calculate-days-between-two-dates-in-javascript', 'https://www.javatpoint.com/what-are-the-uses-of-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-math-floor-method', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-math-ceil-method', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=calculate-of-current-week-number-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=calculate-of-current-week-number-in-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/html-form', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=calculate-of-current-week-number-in-javascript3', 'https://www.javatpoint.com/calculate-days-between-two-dates-in-javascript', 'https://www.javatpoint.com/what-are-the-uses-of-javascript', 'https://www.javatpoint.com/calculate-days-between-two-dates-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/calculate-of-current-week-number-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-of-current-week-number-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-of-current-week-number-in-javascript3.png']",[],['Calculate Week Number by entering a date using HTML form'],"['Approach 1: Calculate Week Number of current date', 'Approach 2: Calculate the week number for a predefined date']",[],"[""Let's suppose today is Monday and the week number is 1. So, if we calculate the week number after 25 days, the week number will be 4th."", 'According to the week number calculation:', 'The following formula mentioned below is used to calculate the week number after p days:', 'We can use this concept in our JavaScript example to calculate the week number. We will calculate the week number in two ways:', 'Now, we will convert these steps into actual implementation. See the code below:', 'Screenshot', 'This approach will help to calculate the week number by providing a date in code. Follow the below step:', 'Now, we will convert these steps into actual implementation. See the code below:', 'Screenshot', 'See the code below:', 'Screenshot']","['We will discuss both the methods in detail with examples. Along with that, we will calculate the weekdays dynamically by taking date input from the user using a dynamic HTML form.', 'In this approach, we will find the week number of current date means the date will be taken from the system. It is a static way to calculate the week number. Follow each step for calculating weekdays:', 'Look at the below screenshot where the HTML form having an input field of Calendar type and one submit button to perform all the calculations and one more field to display calculated results.']","['In this approach, we will assign a number to each day of the week, e.g., 1 for Sunday, 2 for Monday, 3 for Tuesday, and so on. Similarly, we will assign the number to other days in the week. Note that weekday starts with Sunday and ends with Saturday.', 'In this approach, we will find the week number by providing a date using a dynamic HTML form. The user can choose the date from the calendar and enter to input field in HTML form. It is a dynamic way for calculating the week number in which a user can provide the input by itself on the web instead of providing the dates input in code by the programmer.']","['25 days = 7 + 7 + 7 + 4 days', 'Week Number = least integer [ p / 7 ]', '<title>Calculate week number of current date</title>', '</head>', '<script>', '', 'todaydate = new Date();', 'var oneJan =  new Date(todaydate.getFullYear(), 0, 1);', 'var numberOfDays =  Math.floor((todaydate - oneJan) / (24 * 60 * 60 * 1000));', 'var result = Math.ceil(( todaydate.getDay() + 1 + numberOfDays) / 7);', 'document.write(""Week Numbers of current date ("" + todaydate +', '"") is: <br>"" + result);', '</script>', '</body>', '</html>', '<title>Calculate week number of predefined date</title>', '</head>', '<script>', '', 'var date1 = new Date(""11/27/2019"");', 'var oneJan =  new Date(date1.getFullYear(), 0, 1);', 'var numberOfDays =  Math.floor((date1 - oneJan) / (24 * 60 * 60 * 1000));', 'var result = Math.ceil(( date1.getDay() + 1 + numberOfDays) / 7);', 'document.write(""Week Numbers of date ("" + date1 +', '"") is: <br>"" + result);', '</script>', '</body>', '</html>', '<html>', '<head>', '<title> Calculate week number by user input </title>', '<script>', 'function weekNumber() {', 'var dateinput = document.getElementById(""dateInput1"").value;', 'var date1 = new Date(dateinput);', 'var oneJan =  new Date(date1.getFullYear(), 0, 1);', 'var numberOfDays =  Math.floor((date1 - oneJan) / (24 * 60 * 60 * 1000));', 'var result = Math.ceil(( date1.getDay() + 1 + numberOfDays) / 7);', 'return document.getElementById(""result"").innerHTML =  ""Week number of given date is: "" + result;', '}', '</script>', '</head>', '<body>', '<h2 style=""color: 32A80F"" align=""Center"">', 'Javatpoint: Calculate Week Number using user input', '<br> <br> </h2>', '<p align=""Center""> <b> Enter date \xa0 </b>', '<input type=""date"" id=""dateInput1"">', '<br> <br>', '<button onclick=""weekNumber()"">', 'Calculate Week Number', '</button>', '</p>', '<h3 style=""color:32A80F"" id=""result"" align=""center""></h3>', '</body>', '</html>']","['Week number of current date (Tue Sep 29 2020 15:32:19 GMT+0530 (India Standard Time)) is:', '40', 'Week number of date Wed Nov 27 2019 00:00:00 GMT+0530 (India Standard Time):', '48']",[],"[""|||Calculate the week number of the current date|||Calculate the week number for a predefined date||||||Calculate the week number by taking date input dynamic HTML form|||&&&|||Define a date variable todaydate and oneJan in JavaScript.|||Initialize the todaydate variable by creating the date object using new Date(), which will take system date by default.|||Initialize another variable oneJan by creating date object using new Date() but this time getFullYear() method inside it.|||The getFullYear() function will return the year of current date along with first date of the year, e.g., 1 Jan 2020.|||After getting the current date and year, now calculate the number of days using the Math.floor() method. So, calculate the difference of current date and current year date and divide it by total milliseconds in a day (1000*60*60*24).|||Now, add 1 and numberofdays calculated in previous result to the day of current date and divide them by 7, i.e., (this.getDay() + 1 + numberofdays) / 7. Don't forget to put this whole calculation of step 6 inside Math.ceil() method.|||Finally, display the calculated weekday on the web using document.write().||||||Define a date variable in JavaScript, i.e., date1|||Initialize it by creating the date objects using new Date() and provide date inside it.|||After defining the date, calculate the time difference between them by subtracting one date from another date using date2.getTime() - date1.getTime();|||Now next step is to calculate the days between the dates. So, we will divide the time difference of both dates by the milliseconds in a day, i.e., 1000*60*60*24|||At last, print the result calculated using the document.write() method.|||""]"
80,['Calculate days between two dates in JavaScript'],"['Sometimes we need to calculate the number of days between two dates. This can be done using the JavaScript programming language. JavaScript provides a math function Math.floor() method to calculate the days between two dates. In JavaScript, we have to use the date object for any calculation to define the date using new Date().']","['https://www.javatpoint.com/javascript-string-trim', 'https://www.javatpoint.com/calculate-current-week-number-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-math', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-math-floor-method', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=calculate-days-between-two-dates-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=calculate-days-between-two-dates-in-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=calculate-days-between-two-dates-in-javascript3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=calculate-days-between-two-dates-in-javascript4', 'https://www.javatpoint.com/javascript-string-trim', 'https://www.javatpoint.com/calculate-current-week-number-in-javascript', 'https://www.javatpoint.com/javascript-string-trim']","['https://static.javatpoint.com/javascriptpages/images/calculate-days-between-two-dates-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-days-between-two-dates-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-days-between-two-dates-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-days-between-two-dates-in-javascript4.png']",[],['Calculate days using dynamic HTML form'],"['Approach 1: Calculate the days by entering two dates', 'Approach 2: Calculate the days from current date', 'Example 3: Calculate the days remaining in Christmas day from the current date']",[],"['To learn more about JavaScript in detail step by step follow our JavaScript tutorial.', 'We will calculate the number of days in two ways:', 'This approach will help to calculate the days between two dates by providing two different dates in code. Follow the below step:', 'Now, we will convert these steps into actual implementation. See the code below:', 'Screenshot', 'In this approach, we will use the math function Math.floor() to calculate the days. Follow the below step:', 'Now, we will convert these steps into actual implementation. See the code below:', 'Screenshot', 'We have one more example in which we will calculate the days till Christmas Day means for a specific date. Follow the below steps:', 'Screenshot']","['We will discuss both the methods in detail with examples. Along with that, we will calculate the days remaining in Christmas day from today (date will be taken from the system).', 'Look at the screenshot below having two calendar input fields, one submit button to perform all the calculation and one more field to display calculated result.', 'Now, convert these steps into actual implement to calculate the days remaining in Christmas. The implementation is as easy as the steps are. See the below code:', 'So, here was all the necessary examples (static and dynamic both) in JavaScript for calculating the days difference. To learn more about JavaScript in detail step by step follow our JavaScript tutorial.']",['It is a dynamic JavaScript example in which a user can provide the input by itself on web instead of providing the dates input in code by the programmer. The user will dynamically choose the dates from the calendar and enter the two dates in input field and calculate the number of days between two dates by clicking on a button. See the code below:'],"['<head>', '<title>Calculate days by entering two dates</title>', '</head>', '<body>', '<script>', 'var date1, date2;', 'date1 = new Date(""07/15/2015"");', 'date2 = new Date(""11/28/2016"");', 'var time_difference = date2.getTime() - date1.getTime();', 'var days_difference = time_difference / (1000 * 60 * 60 * 24);', '', 'document.write(""Number of days between dates <br>"" +', 'date1 + "" and <br>"" + date2 + "" are: <br>""', '+ days_difference + "" days"");', '</script>', '</body>', '</html>', '<html>', '<head>', '<title> Calculate days between dates </title>', '<script>', 'function daysDifference() {', 'var dateI1 = document.getElementById(""dateInput1"").value;', 'var dateI2 = document.getElementById(""dateInput2"").value;', 'var date1 = new Date(dateI1);', 'var date2 = new Date(dateI2);', 'var time_difference = date2.getTime() - date1.getTime();', 'var result = time_difference / (1000 * 60 * 60 * 24);', 'return document.getElementById(""result"").innerHTML =', 'result + "" days between both dates. "";', '}', '</script>', '</head>', '<body>', '<h2 style=""color: 32A80F"" align=""Center"">', 'Javatpoint : Calculate days between dates', '<br> <br> </h2>', '<p align=""Center""> <b> Enter date1 \xa0 </b>', '<input type=""date"" id=""dateInput1"">', '<br> <br>', '', '<p align=""Center""> <b> Enter date2 \xa0 </b>', '<input type=""date"" id=""dateInput2"">', '<br> <br>', '<button onclick=""daysDifference()"">', 'Calculate number of days', '</button>', '</p>', '<h3 style=""color:32A80F"" id=""result"" align=""center""></h3>', '</body>', '</html>', '<head>', '<title>Calculate days between the dates using default system dates</title>', '</head>', '<body>', '<script>', 'var date1, date2;', 'date1 = new Date();', 'date2 = new Date (""Dec 15, 2021, 21:45:10"");', 'var total_seconds = Math.abs(date2 - date1) / 1000;', 'var days_difference = Math.floor (total_seconds / (60 * 60 * 24));', '', 'document.write(""Number of days between dates from current date <br>"" +', 'date1 + "" and <br>"" + date2 + "" are: <br>""', '+ days_difference + "" days"");', '</script>', '</body>', '</html>', '<head>', '<title>Calculate days remaining in Christmas</title>', '</head>', '<body>', '<script>', 'var current_date, christmas_day;', 'var one_day_ms = 1000 * 60 * 60 * 24;', 'current_date = new Date();', 'christmas_day= new Date(current_date.getFullYear(), 11, 25);', 'if (current_date.getMonth() == 11 && current_date.getdate() > 25)', '{', 'christmas_day.setFullYear(christmas_day.getFullYear() + 1);', '}', 'var res = Math.round(christmas_day.getTime() - current_date.getTime()) / (one_day_ms);', 'var FinalResult = res.toFixed (0);', 'document.write(""Number of days remaining in Christmas day: <br>"" +', 'current_date + "" and <br>"" + christmas_day + "" are: <br>""  +  FinalResult + "" days"");', '</script>', '</body>', '</html>']","['Number of days between dates', 'Mon Jul 20 2015 00:00:00 GMT+0530 (India Standard Time) and', 'Tue Sep 20 2016 00:00:00 GMT+0530 (India Standard Time) are:', '502 days', 'Number of days between dates', 'Sun Sep 27 2020 19:42:13 GMT+0530 (India Standard Time) and', 'Tue Dec 15 2021 21:45:10 GMT+0530 (India Standard Time) are:', '444 days', 'Number of days remaining in Christmas day:', 'Mon Sep 28 2020 14:32:50 GMT+0530 (India Standard Time) and', 'Fri Dec 25 2021 00:00:00 GMT+0530 (India Standard Time) are:', '87 days']",[],"['|||Calculate days by entering two dates|||Calculate days from current dates||||||Find the number of days remaining in Christmas from the current date|||&&&|||Define two date variables in JavaScript|||Initialize them by creating the date objects using new Date()|||After defining the dates, calculate the time difference between them by subtracting one date from another date using date2.getTime() - date1.getTime();|||Now next step is to calculate the days between the dates. So, we will divide the time difference of both dates by the milliseconds in a day, i.e., 1000*60*60*24|||At last, print the result calculated using the document.write() method.||||||Define two date variables, i.e., date1 and date2|||Initialize the date1 variables by creating the date objects using new Date(), which will take system date by default.|||Initialize the date2 variables by creating the date objects using new Date() and provide a date in it.|||Now use the Math.abs() method to calculate the total seconds between two dates. So, divide the difference of dates by the milliseconds in one second Math.abs(date2-date1) / 1000;|||Now next step is to calculate the number of days using the Math.floor() method. So, divide the calculated result from previous steps (total seconds between two dates) by 60*60*24|||At last, print the result calculated using the document.write() method.||||||Define the current date (system date) by creating a date object using the new Date().|||Define one more date using new Date() class method and fetch the Christmas date by date.getFullYear() method in it. The date.getFullYear() method will return the year (0-11 months in JavaScript).|||In case Christmas has been already passed away this year, it will return the number of days remaining in Christmas of next year from the current date.|||Now, its time to use Math.round() function to calculate the result in milliseconds and then convert this result into days. So, divide the Math.round(Christmas() - present_date.getTime()) by the total milliseconds in a day, i.e., 1000*60*60*24.|||Remove the decimal value from the result and display it to the web using document.write() method.|||']"
81,['JavaScript String trim()'],"['The trim() is a built-in string function in JavaScript, which is used to trim a string. This function removes the whitespace from both the ends, i.e., start and end of the string. As the trim() is a string method, so it is invoked by an instance of the String class. We have to create an instance of String class with which the trim() method will be used.']","['https://www.javatpoint.com/javascript-timer', 'https://www.javatpoint.com/calculate-days-between-two-dates-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-string', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-trim1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-trim2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-trim3', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-trim4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-trim5', 'https://www.javatpoint.com/javascript-timer', 'https://www.javatpoint.com/calculate-days-between-two-dates-in-javascript', 'https://www.javatpoint.com/javascript-timer']",[],[],[],"['Syntax', 'Parameters', 'Return Value', 'Examples', 'trimLeft()', 'trimRight()']",['Note - The trim() method does not change the original string; it just removes the leading and trailing whitespace character.'],"['The syntax of trim() method is as follows:', 'Here, str is a String class of object that will contain the string to be trimmed.', 'The trim() method does not have any arguments or parameters inside it.', 'The string.trim() function returns the string after removing whitespace character from that string from the beginning and end of the string.', 'In this example, we will pass a string containing whitespace at both ends.', 'This will return the below string after removing whitespace.', 'In this example, we will pass a string containing whitespace only at the end.', 'This will remove the whitespace from the end and return the string as given below.', 'In this example, we will pass a string containing whitespace only in the beginning.', 'This will remove the whitespace from the beginning and return the string as given below.', 'See the example below -', 'This will remove the whitespace only from the beginning and trailing whitespace will remain the same. See the output below:', 'See the example below -', 'This will remove the whitespace only from the end and leading whitespace will remain the same. See the output below:']","['Below are some examples, which are using trim() function to remove the elements from it. In these examples, you will see how to use this JavaScript function. So, here are a few examples -', 'The trimLeft() method removes the whitespace only from the left of the string. To understand better, we can say that it removes whitespace only from the start and returns the string back without any leading whitespace character.', 'On the other hand, the trimRight() method removes the whitespace only from the right of the string. To understand better, we can say that it removes whitespace only from the end and returns the string back without any trailing whitespace character.']","['JavaScript offers two more functions similar to the trim() method. They also used to trim the string but only from the one end, either left or right. Remember that both the functions do not change the original string; they just remove the whitespaces.']","['str.trim()', '<script>', 'function func_trim() {', 'var str = ""     javatpoint tutorial website     "";', 'var trimmedstr = str.trim();', 'document.write(trimmedstr);', 'func_trim();', '</script>', '</html>', '</body>', '<script>', 'function func_trim() {', 'var str = ""javatpoint tutorial website      "";', 'var trimmedstr = str.trim();', 'document.write(trimmedstr);', 'func_trim();', '</script>', '</html>', '</body>', '<script>', 'function func_trim() {', 'var str = ""        javatpoint tutorial website"";', 'var trimmedstr = str.trim();', 'document.write(trimmedstr);', 'func_trim();', '</script>', '</html>', '</body>', 'str.trimLeft()', '<script>', 'function func_trim() {', 'var str = ""     javatpoint tutorial website    "";', 'var trimmedstr = str.trimLeft();', 'document.write(trimmedstr);', 'func_trim();', '</script>', '</html>', '</body>', 'str.trimRight()', '<script>', 'function func_trim() {', 'var str = ""      javatpoint tutorial website       "";', 'var trimmedstr = str.trimRight();', 'document.write(trimmedstr);', 'func_trim();', '</script>', '</html>', '</body>']","['Javatpoint tutorial website', 'Javatpoint tutorial website', 'Javatpoint tutorial website', 'Javatpoint tutorial website', 'Javatpoint tutorial website']",[],['|||trimLeft()|||trimRight()|||']
82,['JavaScript timer'],"[""In JavaScript, a timer is created to execute a task or any function at a particular time. Basically, the timer is used to delay the execution of the program or to execute the JavaScript code in a regular time interval. With the help of timer, we can delay the execution of the code. So, the code does not complete it's execution at the same time when an event triggers or page loads.""]","['https://www.javatpoint.com/remove-elements-from-array-in-javascript', 'https://www.javatpoint.com/javascript-string-trim', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-timer1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-timer2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-timer3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-timer4', 'https://www.javatpoint.com/remove-elements-from-array-in-javascript', 'https://www.javatpoint.com/javascript-string-trim', 'https://www.javatpoint.com/remove-elements-from-array-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-timer.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-timer2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-timer3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-timer4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-timer5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-timer6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-timer7.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-timer8.png']",[],"['Examples', 'Cancel or Stop the timer']","['setTimeout()', 'setInterval()', 'Example', 'Disable the regular interval']",[],"['Below are some examples of JavaScript timer using these functions.', 'The basic syntax of setTimeout() is:', 'Execution of code after a delay', 'The basic syntax of setInterval() is:', 'Execution of code at a regular interval', 'On executing the above code, the response will be a simple HTML statement without any time string like below output:', 'One more example of setInterval() methods for displaying a message string after every 4 seconds continuously.', 'On executing the above code, a message with a button will show on the browser. Click on this button to process more and see what happens next.']","[""We will use the setTimeout() function to delay the printing of message for 3 seconds. The message will display on the web after 3 seconds of code execution rather than immediately. Now, let's look at the code below to see how it works:"", 'The above code will execute in two sections. Firstly, the HTML part of the code will execute, where by clicking on Click Here button the remaining JavaScript code will execute after 3 seconds. See the output below:', 'On clicking the Click Here button, the remaining code will execute after 3 seconds. A message Welcome to javaTpoint will display on the web after 3 seconds (3000 milliseconds).', 'After 4 seconds, the JavaScript function will call and start displaying the time. This will repeatedly display your system time in every four seconds.', 'By clicking on this Click Here button, the waitAndshow() will start printing the message Welcome to Javatpoint repeatedly on the web in every 4 seconds.', 'You have seen how to create timer or set time interval. Sometimes, we need to cancel these timers. JavaScript offers the in-built function to clear the timer, which are as follows:', 'In this example, we will use clearTimeout() to clear the timer set by with setTimeout() function. Look at the example how clearInterval() work with setInterval().', 'By executing the above code, the current system time will start showing on the web with 3 seconds of regular interval. This page also has a button to disable this timer.', 'The timer will show the updated time after every three seconds. If you click on this Stop Clock button, the timer will be disabled and stop showing the updated time.']","['The best example of the timer is advertisement banners on websites, which change after every 2-3 seconds. These advertising banners are changed at a regular interval on the websites like Amazon. We set a time interval to change them. In this chapter, we will show you how to create a timer.', 'JavaScript offers two timer functions setInterval() and setTimeout(), which helps to delay in execution of code and also allows to perform one or more operations repeatedly. We will discuss both the timer functions in detail as well as their examples.', 'The setTimeout() function helps the users to delay the execution of code. The setTimeout() method accepts two parameters in which one is a user-defined function, and another is the time parameter to delay the execution. The time parameter holds the time in milliseconds (1 second = 1000 milliseconds), which is optional to pass.', 'The setInterval method is a bit similar to the setTimeout() function. It executes the specified function repeatedly after a time interval. Or we can simply say that a function is executed repeatedly after a specific amount of time provided by the user in this function. For example - Display updated time in every five seconds.', 'Similar to setTimeout() method, it also accepts two parameters in which one is a user-defined function, and another is a time-interval parameter to wait before executing the function. The time-interval parameter holds the amount of time in milliseconds (1 second = 1000 milliseconds), which is optional to pass. Now, see the code below how this function works:', 'JavaScript offers two functions clearTimeout() and clearInterval() to cancel or stop the timer and halt the execution of code. The setTimeout() and setInterval() both return a unique IDs. These IDs are used by the clearTimeout() and clearInterval() to clear the timer and stop the code execution beforehand. They both take only one parameter, i.e., ID.']","['setTimeout(function, milliseconds)', '<script>', 'function delayFunction() {', ""document.write('<h3> Welcome to JavaTpoint <h3>');"", '</script>', '<h4> Example of delay the execution of function <h4>', '<!?button for calling of user-defined delayFunction having 3 seconds of delay -->', '<button onclick = ""setTimeout(delayFunction, 3000)""> Click Here </button>', '</body>', '</html>', 'setInterval(function, milliseconds)', '<script>', 'function waitAndshow() {', 'var systemdate = new Date();', 'document.getElementById(""clock"").innerHTML = systemdate.toLocaleTimeString();', 'setInterval(waitAndshow, 4000);', '</script>', '<h3> Updated time will show in every 4 seconds </h3>', '<h3> The current time on your computer is: <br>', '<span id=""clock""></span> </h3>', '</body>', '</html>', '<script>', 'function waitAndshow() {', ""document.write('<h3> Welcome to JavaTpoint <h3>');"", '</script>', '<h3> A string will show in every 4 seconds </h3>', '<!-- call user-defined delayFunction after 4 seconds -->', '<button onclick = ""setInterval(waitAndshow, 4000)""> Click Here </button>', '</body>', '</html>', '<script>', 'function waitAndshow() {', 'var systemdate = new Date();', 'document.getElementById(""clock"").innerHTML = systemdate.toLocaleTimeString();', 'function stopClock() {', 'clearInterval(intervalID);', 'var intervalID = setInterval(waitAndshow, 3000);', '</script>', '<p>Current system time: <span id=""clock""> </span> </p>', '<!-- button to stop showing time in a regular interval -->', '<button onclick = ""stopClock();"" > Stop Clock </button>', '</body>', '</html>']",[],[],[]
83,['Remove elements from array in JavaScript'],"['An array is a variable used to store one or more elements of the same data type. Basically, it stores multiple elements of the same type. Sometimes we need to remove these elements from an array. JavaScript offers several built-in array methods to add or remove the elements from an array easily. Using these methods, you can remove an element from start, end, or as well as from a specific index.']","['https://www.javatpoint.com/javascript-localstorage', 'https://www.javatpoint.com/javascript-timer', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-elements-from-array-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-elements-from-array-in-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-elements-from-array-in-javascript3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-elements-from-array-in-javascript4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-elements-from-array-in-javascript5', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-elements-from-array-in-javascript6', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-elements-from-array-in-javascript7', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-elements-from-array-in-javascript8', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-elements-from-array-in-javascript9', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-elements-from-array-in-javascript10', 'https://www.javatpoint.com/javascript-localstorage', 'https://www.javatpoint.com/javascript-timer', 'https://www.javatpoint.com/javascript-localstorage']",[],[],"['Remove elements from the end of the array - pop()', 'Remove elements from the start of the array - shift()', 'Remove elements from a specific index in an array - splice()', 'Remove elements from the array using filter()']","['Example 1', 'Example 2', 'Example 1', 'Example 2', 'Example 1', 'Example 2', 'Example 1', 'Remove elements using delete operator', 'Example', 'Remove elements using clear and reset operator', 'Example 1', 'Example 2']",[],"['These JavaScript array methods are as follows:', 'All the above methods are array functions offered by JavaScript. These methods are discussed below in detail with examples.', 'By putting the above code in a loop (for, while, or do-while), we can delete all elements one by one from the end of the array. See how it will work:', 'In this example, we will delete three elements, starts from index 1, i.e., a[1] to a[3].', 'You can even remove all elements from the array. See the below code:', 'See that all elements have been deleted.', 'See the output below that only even elements have remained in the modified array:', 'Now, with the help of an example, let us see how it works:', 'Other than this, we can remove all elements of the array by setting its length to 0. See the example below:', 'By setting the array length to 0, all elements of the array have been disabled or removed. See the empty array:']","['Initially, there are four elements in the array. One element from the last will be removed using the pop() function and three elements will remain in that array.', 'Initially, there are four elements in the array. One element from the start will remove using the shift() function, and three elements will remain in that array.', 'Like the pop() method, we can delete all elements one by one from the start of the array by putting the above code in a loop (for, while, or do-while). In this example, we will put this code in a while loop. See how it will work:', 'To remove the element from a specific index position, the splice() method is used. It removes the element from a specific position and returns that removed element. It also allows the users to remove one or more elements from the array.', 'In the below response, you can see that three elements from the array have been removed, and only two elements (Nike and Bata) have remained in the array.', 'In this example, we will put the above code inside a for loop to remove all occurrences of a specific element from the array. It will trace the whole array and remove the matching element one by one from the array.', 'You can see that element named (Gucci) has been removed twice from the array in the below output, and only two elements (Chanel, Zara) have remained in the array.', 'This method basically removes the element based on the given condition provided by the user. It removes the elements and creates a new array of remaining elements. See the code and output below how it works:', 'The delete operator helps to remove specific index element directly from the array. Now, with the help of an example, let us see how this delete operator works:', 'In this output, you can see that if the returned value is true after performing the remove operation, the element presents at index 1 has been deleted successfully.', 'JavaScript provides the clear and reset operator to remove the elements from the array. Usually, they do not delete the array elements; they just shift them to another array and clear the original array.', 'In this output, you can see that the original array elements have been shifted to a new array. The initially declared array has been empty, which means no element present in array now.']","['JavaScript provides the pop() method to remove the elements from the end of the array. It removes the last element of the array and returns the removed element. When an element removes from the array, the length of the array is reduced by 1. See the code and output below to understand:', 'JavaScript provides the shift() method, which is used to remove the element from the start of the array. It removes the first element from an array and returns the removed element. When an element removes from the array, the array length is reduced by 1. See the code and output below how this function works:', 'The splice() method accepts mainly two arguments: initial index position and number of items to be removed. Array index count starts from 0, i.e., a[0]. When the elements remove from an array, the array length is reduced. See the below example and its output how the splice() function works:', 'In this example, we will check the even-odd values in an array and filter them. The filter() method will check for the even values and return to add them to the modified array. The odd values will remove from the array, and only modified array will be displayed.', 'Apart from all these functions, JavaScript offers a delete operator. It helps to remove the element from a specific index position in an array. This operator is used with array name and index number, which you want to remove, e.g., delete arrayname[3]. It returns true after successfully removing an element.']","['<script>', 'function removeLastElement() {', 'var shoeBrand = [""Nike"", "" Adidas"", "" Sparks"", "" RedTape""];', 'document.write(""Elements in array before removing: <br>"" + shoeBrand + ""<br> <br>"");', 'var poppedElement = shoeBrand.pop();', 'document.write(""Removed element from array: "" + poppedElement + ""<br> <br>"");', 'document.write(""Elements present in array: <br>"" + shoeBrand);', 'removeLastElement();', '</script>', '</body>', '</html>', '<script>', 'function removeElement() {', 'var shoeBrand = [""Nike"", "" Adidas"", "" Sparks"", "" RedTape""];', 'document.write(""Elements in array before removing: <br>"" + shoeBrand + ""<br> <br>"");', 'document.write(""Array length before removing elements is:"" + shoeBrand.length + ""<br> <br>"");', 'while (shoeBrand.length) {', 'var poppedElement = shoeBrand.pop();', 'document.write(""Removed element from array: "" + poppedElement + "" <br>"");', 'document.write(""<br> Array length after removing elements is:"" + shoeBrand.length);', 'removeElement();', '</script>', '</body>', '</html>', '<script>', 'function removeFirstElement() {', 'var shoeBrand = [""Nike"", "" Adidas"", "" Sparks"", "" RedTape""];', 'document.write(""Elements in array before removing: <br>"" + shoeBrand + ""<br> <br>"");', 'var poppedElement = shoeBrand.shift();', 'document.write(""Removed element from array: "" + poppedElement + ""<br> <br>"");', 'document.write(""Elements present in array: <br>"" + shoeBrand);', 'removeFirstElement();', '</script>', '</body>', '</html>', '<script>', 'function removeElement() {', 'var shoeBrand = [""Nike"", "" Adidas"", "" Sparks"", "" RedTape""];', 'document.write(""Elements in array before removing: <br>"" + shoeBrand + ""<br> <br>"");', 'document.write(""Array length before removing elements is:"" + shoeBrand.length + ""<br> <br>"");', 'while (shoeBrand.length) {', 'var poppedElement = shoeBrand.shift();', 'document.write(""Removed element from array: "" + poppedElement + "" <br>"");', 'document.write(""<br> Array length after removing elements is:"" + shoeBrand.length);', 'removeElement();', '</script>', '</body>', '</html>', '<script>', 'function removeElement() {', 'var shoeBrand = [""Nike"", "" Adidas"", "" Sparks"", "" RedTape"", "" Bata""];', 'document.write(""Elements in array before removing: <br>"" + shoeBrand + ""<br> <br>"");', 'var poppedElement = shoeBrand.splice(1, 3);', 'document.write(""Removed element from array: "" + poppedElement + ""<br> <br>"");', 'document.write(""Elements present in array: <br>"" + shoeBrand);', 'removeElement();', '</script>', '</body>', '</html>', '<script>', 'function removeElement() {', 'var clothingBrand = [""Gucci"", "" Chanel"", ""Gucci"", "" Zara""];', 'for (var i = 0; i < clothingBrand.length; i++) {', '', 'if (clothingBrand[i] === ""Gucci"") {', 'var delEle = clothingBrand.splice(i, 1);', '', 'document.write(""<br> Removed element: "" + delEle);', 'document.write(""<br> Remaining elements: "" + clothingBrand);', 'document.write(""<br>"");        }', 'removeElement();', '</script>', '</body>', '</html>', '<script>', 'var clothingBrand = [""Gucci"", "" Chanel"", "" Calvin Klein"", "" Zara""];', 'document.write(""Elements in array: "" + clothingBrand);', 'clothingBrand.splice(0, clothingBrand.length);', 'document.write(""<br> Remaining elements: "" + clothingBrand);', '</script>', '<script>', 'function isEven( value ) {', 'if(value%2 == 0)', 'return value;', 'var ary = [43, 243, 56, 24, 1021, 348].filter( isEven );', 'document.write(""Even elements in array: "" + ary);', '</script>', '</body>', '</html>', '<script>', 'var clothingBrand = [""Gucci"", "" Calvin Klein"", "" Chanel"", "" Zara""];', 'document.write(""Elements in array: "" + clothingBrand);', 'var result = delete clothingBrand[1];', 'document.write(""<br> Removed successfully: "" + result + ""<br>"");', 'document.write(""Remaining elements in array: "" + clothingBrand);', '</script>', '</body>', '</html>', '<script>', 'var originalArray = [""Gucci"", "" Calvin Klein"", "" Chanel"", "" Zara""];', 'document.write(""Initially elements in array: "" + originalArray);', 'var newArray = originalArray', 'originalArray = [ ]', 'document.write(""<br> <br> Array after removing elements: "" + originalArray);', 'document.write(""<br> <br> Elements in new array: "" + newArray);', '</script>', '</body>', '</html>', '<script>', 'var array1 = [""Gucci"", "" Calvin Klein"", "" Chanel"", "" Zara""];', 'document.write(""Initially elements in array: "" + array1);', 'array1.length = 0;', 'document.write(""<br> <br> Array after removing elements: "" + array1);', '</script>', '</body>', '</html>']","['Elements in array before removing:', 'Nike, Adidas, Sparks, RedTape', 'Removed element from array: RedTape', 'Elements present in array:', 'Nike, Adidas, Sparks', 'Elements in array before removing:', 'Nike, Adidas, Sparks, RedTape', 'Array Length after removing elements is: 4', 'Removed element from array: RedTape', 'Removed element from array: Sparks', 'Removed element from array: Adidas', 'Removed element from array: Nike', 'Array Length after removing elements is: 0', 'Elements in array before removing:', 'Nike, Adidas, Sparks, RedTape', 'Removed element from array: Nike', 'Elements present in array:', 'Adidas, Sparks, RedTape', 'Elements in array before removing:', 'Nike, Adidas, Sparks, RedTape', 'Array Length after removing elements is: 4', 'Removed element from array: Nike', 'Removed element from array: Adidas', 'Removed element from array: Sparks', 'Removed element from array: RedTape', 'Array Length after removing elements is: 0', 'Elements in array before removing:', 'Nike, Adidas, Sparks, RedTape, Bata', 'Removed element from array: Adidas, Sparks, RedTape,', 'Elements present in array:', 'Nike, Bata', 'Removed element: Gucci', 'Remaining Element: Chanel, Gucci, Zara', 'Removed element: Gucci', 'Remaining Element: Chanel, Zara', 'Elements in array: Gucci, Chanel, Calvin Klein, Zara', 'Remaining Element:', 'Even elements in array:  56, 24, 348', 'Elements in array:  Gucci, Calvin Klein, Chanel, Zara', 'Removed successfully: true', 'Remaining elements in array: Gucci,, Chanel, Zara', 'Initially elements in array:  Gucci, Calvin Klein, Chanel, Zara', 'Array after removing elements:', 'Elements in new array: Gucci, Calvin Klein, Chanel, Zara', 'Initially elements in array:  Gucci, Calvin Klein, Chanel, Zara', 'Array after removing elements:']","['Method|||Description&&&pop()|||This method removes the elements from the end of the array.&&&shift()|||Like the pop() method, it also removes the elements but from the start of the array.&&&filter()|||The filter() method removes the elements from an array in a programmatically way.&&&splice()|||This method removes the elements from a specific index.']",[]
84,['JavaScript localStorage'],"['LocalStorage is a data storage type of web storage. This allows the JavaScript sites and apps to store and access the data without any expiration date. This means that the data will always be persisted and will not expire. So, data stored in the browser will be available even after closing the browser window.']","['https://www.javatpoint.com/javascript-offsetheight', 'https://www.javatpoint.com/remove-elements-from-array-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/computer-network-http', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-localstorage1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-localstorage2', 'https://www.javatpoint.com/javascript-offsetheight', 'https://www.javatpoint.com/calculate', 'https://www.javatpoint.com/javascript-offsetheight']","['https://static.javatpoint.com/htmlpages/images/chrome_browser.png', 'https://static.javatpoint.com/htmlpages/images/ie_browser.png', 'https://static.javatpoint.com/htmlpages/images/firefox_browser.png', 'https://static.javatpoint.com/htmlpages/images/opera_browser.png', 'https://static.javatpoint.com/htmlpages/images/safari_browser.png', 'https://static.javatpoint.com/javascriptpages/images/edge_browser.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-localstorage.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-localstorage2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-localstorage3.png']",[],"['localStorage Methods', 'Limitation of localStorage', 'Advantage of localStorage', 'JavaScript code to check browser compatibility', 'More Examples', 'Clear all records', 'Check localStorage']","['Browser compatibility', 'Example']",[],"['Each of these methods is used with localStorage keyword connecting with dot(.) character. For Example: localStorage.setItem().', 'To add the data in localStorage, both key and value are required to pass in setItem() function.', 'Retrieve data', 'It requires only the key to retrieve the data from storage and a JavaScript variable to store the returned data.', 'Remove data', 'It also requires only the key to remove the value attached with it.', 'Clear localStorage', 'It is a simple clear() function of localStorage, which is used to remove all the localStorage data:', 'It is a basic example of adding a key and value to localStorage and retrieving back by the key. See the code below how localStorage methods work:', 'In the below output, you can see that we have clicked the Click to Count button 9 times.', 'Now close the window tab and reopen to run the code again. Again, click on the Click to Count button, it will start counting from 10 where you left.', 'Now, click the Clear Count button to clear the stored data. When you again click on the Click to Count button, it will again start with 1.', 'We will use this clear code in below example.']","['The localStorage offers some methods to use it. We will discuss all these localStorage methods with examples. Before that, a basic overview of these methods are as follows:', 'As the localStorage allows to store temporary, local data, which remains even after closing the browser window, but it also has few limitations. Below are some limitations of localStorage are given:', 'The localStorage has come with several advantages. First and essential advantage of localStorage is that it can store temporary but useful data in the browser, which remains even after the browser window closed. Below is a list of some advantages:', 'The localStorage has specified in HTML 5, which is supported by several browsers, like Chrome. Below is a list of different browsers and their versions that supports JavaScript localStorage.', 'With the help of below code example, you can check the browser compatibility. Use this code in your every localStorage program to check the browser compatibility before adding or deleting something from localStorage.', 'It is an example to count the button clicks means that it will count how many times a user clicks the button. In this example, we will create two buttons, one for counting the user clicks and another for clear the that clicks data.', 'Clear() method of localStorage is used to clear the entire storage data. When this method invokes, it clears all the records for that domain from the storage. It does not contain any parameters. See the syntax to clear the localStorage:', 'On the JavaScript console, you can check what is in local storage by typing localStorage command on it. Even if there nothing in localStorage, it has length = 0 inside it.']","['In short, all we can say is that the localStorage holds the data with no expiry date, which is available to the user even after closing the browser window. It is useful in various ways, such as remembering the shopping cart data or user login on any website.', 'In the past days, cookies were the only option to remember this type of temporary and local information, but now we have localStorage as well. Local storage comes with a higher storage limit than cookies (5MB vs 4MB). It also does not get sent with every HTTP request. So, it is a better choice now for client-side storage. Some essential points of localStorage need to be noted:', 'Following some codes given, which are used to add, retrieve, remove, and clear the data in localStorage. Use them in your code accordingly whenever needed. You need a key-value pair to add some data in localStorage. So, let key is city and its value is Noida, i.e., key: value = city: Noida.']","['Remember that localStorage property is read-only.', 'localStorage.setItem(""city"", ""Noida"");', 'const res = localStorage.getItem(""city"");', 'localStorage.removeItem(""city"");', 'localStorage.clear()', '<script>', 'if (typeof(Storage) !== ""undefined"") {', '} else {', '</script>', '<div id=""result""></div>', '<script>', 'if (typeof(Storage) !== ""undefined"") {', 'localStorage.setItem(""firstname"", ""Alen"");', 'document.getElementById(""result"").innerHTML = localStorage.getItem(""firstname"");', '} else {', 'document.getElementById(""result"").innerHTML = ""Sorry, your browser does not support Web Storage."";', '</script>', '</body>', '</html>', '<script>', 'function clickCounting() {', 'if(typeof(Storage) !== ""undefined"") {', 'if (localStorage.clickcount) {', 'localStorage.clickcount = Number(localStorage.clickcount)+1;', '} else {', 'localStorage.clickcount = 1;', 'document.getElementById(""result"").innerHTML = ""You have clicked the button "" + localStorage.clickcount + "" time(s)."";', 'else {', 'document.getElementById(""result"").innerHTML = ""Your browser does not support web storage."";', 'function clearCounting() {', 'window.localStorage.clear();', '</script>', '</head>', '<h3> Click the button to see the counter increase.</h3>', '<p> <button onclick=""clickCounting()"" type=""button"">Click to Count</button></p>', '<div id=""result""> </div>', '<h4> Now close the browser tab or browser window and execute the code again on the browser. <h4>', '<h3>Note: The counter will start counting from where you leave and is not reset.</h3>', '<p> <button onclick=""clearCounting()"" type=""button"">Clear Count</button></p>', '</body>', '</html>', 'window.localStorage.clear();', 'localStorage.clear();', 'LocalStorage']","['Undefined', 'Alen', 'Storage {length: 0}']","['Methods|||Description&&&setItem()|||This method is used to add the data through key and value to localStorage.&&&getItem()|||It is used to fetch or retrieve the value from the storage using the key.&&&removeItem()|||It removes an item from storage by using the key.&&&clear()|||It is used to gets clear all the storage.', 'rowser Chrome Internet Explorer Firefox Opera Safari Edg&&&ersion support4.08.03.511.541']","['|||localStorage is not secure to store sensitive data and can be accessed using any code. So, it is quite insecure.|||It is an advantage of localStorage over cookies that it can store more data than cookies. You can store 5MB data on the browser using localStorage.|||localStorage stores the information only on browser instead in database. Thereby the localStorage is not a substitute for a server-based database.|||localStorage is synchronous, which means that each operation executes one after another.||||||Do not store sensitive information like username and password in localStorage.|||localStorage has no data protection and can be accessed using any code. So, it is quite insecure.|||You can store only maximum 5MB data on the browser using localStorage.|||localStorage stores the information only on browser not in server-based database.|||localStorage is synchronous, which means that each operation executes one after another.||||||The data collected by localStorage is stored in the browser. You can store 5 MB data in the browser.|||There is no expiry date of data stored by localStorage.|||You can remove all the localStorage item by a single line code, i.e., clear().|||The localStorage data persist even after closing the browser window, like items in shopping cart.|||It also has advantages over cookies because it can store more data than cookies.|||']"
85,['JavaScript offsetHeight'],"['The offsetHeight is an HTML DOM property, which is used by JavaScript programming language. It returns the visible height of an element in pixels that includes the height of visible content, border, padding, and scrollbar if present. The offsetHeight is often used with offsetWidth property. The offsetWidth is one more property of HTML DOM, which is almost same as the offsetHeight. These properties are used by JavaScript to find the visible height and width of the HTML elements.']","['https://www.javatpoint.com/confirm-password-validation-in-javascript', 'https://www.javatpoint.com/javascript-localstorage', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/browsers', 'https://www.javatpoint.com/https://www.javatpoint.com/google-chrome', 'https://www.javatpoint.com/https://www.javatpoint.com/internet-explorer', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/confirm-password-validation-in-javascript', 'https://www.javatpoint.com/javascript-localstorage', 'https://www.javatpoint.com/confirm-password-validation-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-offsetheight.png', 'https://static.javatpoint.com/htmlpages/images/chrome_browser.png', 'https://static.javatpoint.com/htmlpages/images/ie_browser.png', 'https://static.javatpoint.com/htmlpages/images/firefox_browser.png', 'https://static.javatpoint.com/htmlpages/images/opera_browser.png', 'https://static.javatpoint.com/htmlpages/images/safari_browser.png', 'https://static.javatpoint.com/javascriptpages/images/edge_browser.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-offsetheight2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-offsetheight3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-offsetheight4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-offsetheight5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-offsetheight6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-offsetheight7.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-offsetheight8.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-offsetheight9.png']",[],[],"['Browser support', 'Syntax', 'Return Values', 'Examples', 'Example 1', 'Example 2', 'Example 3 without CSS styling', 'Calculate both offsetHeight and offsetWidth']",[],"['The offsetHeight is a combination of following HTML elements:', 'On the other hand, the offsetWidth includes the following elements:', 'With the help of below diagram you can understand offsetHeight and offsetWidth much better:', 'Below is a simple syntax of offsetHeight:', 'Here, element is a variable created in JavaScript to hold the CSS properties values or HTML text paragraph.', 'The offsetHeight and offsetWidth return the calculated height and width of the HTML elements in pixels, respectively.', 'Below is a list of some examples. With the help of which we will see how offsetHeight property is used and works.', 'Output before clicking on Submit button', 'Output after clicking on Submit button', 'The calculated offsetHeight will display inside this yellow highlighted area.', 'Output before clicking on Calculate offsetHeight button', 'Output after clicking on Calculate offsetHeight button', 'Before clicking on Calculate offsetHeight button', 'After clicking on Calculate offsetHeight button', 'In the below screenshot, you can see that offsetHeight for the given paragraph is 88px.', 'Copy and run the below code on your system to understand better.', 'Output before clicking on Submit button', 'Output after clicking on Submit button']","['Remember one thing that offsetHeight and offsetWidth do not include margin, neither top margin nor bottom margin. These DOM properties are used by JavaScript programming language to calculate the dimension of HTML elements in pixels.', 'The offsetHeight DOM property is supported by several web browsers, like Chrome, and Internet Explorer. Following are some browsers that support offsetHeight and offsetWidth property.', 'See the below output containing a paragraph in yellow highlighted color, and a submit button. Click on this Submit button and calculate the offsetHeight of this paragraph.', 'In this example, we will calculate the offsetHeight for a paragraph provided in this example along with CSS styling. Remember that the offsetHeight will not include margin.', 'See the below output containing a paragraph in pink highlighted color and a submit button. Click on this Calculate offsetHeight button and calculate the offsetHeight of this paragraph.', 'The calculated offsetHeight will display inside this pink highlighted area. In the below screenshot, you can see that offsetHeight for the given paragraph is 230px.', 'See another example of calculating the offsetHeight. We have not included any CSS style like height, width, margin, padding, etc., expect background color. So, the paragraph will be a simple paragraph with no styling.', 'See the below output containing a paragraph in orange highlighted color and a submit button to calculate the offsetHeight. Click on this Calculate offsetHeight button and calculate the offsetHeight of this paragraph.', 'See the below output containing a paragraph in lightblue highlighted color area and a submit button. Click on this Submit button and calculate the offsetHeight and offsetWidth of this paragraph.', 'After clicking on the Submit button, the calculated offsetHeight is 210px, and offsetWidth is 430px displaying inside this lightblue highlighted area. See the output below.', 'You have seen several examples having different calculating parameters. In these various examples, we have passed the text paragraph with or also without CSS style and then separately calculated the offsetHeight and offsetWidth. ']","['In this example, we will calculate both offsetHeight and offsetWidth for a paragraph inside a div tab. So, you can understand how differently they calculated. Here, we will use CSS and pass the height, width, margin, padding, etc. for styling in this example.']","['offsetHeight = height + border + padding + horizontal scrollbar', 'offsetWidth = width + border + padding + vertical scrollbar', 'element.offsetHeight', '<title>', 'HTML DOM offsetHeight Property example', '</title>', '<style>', 'height: 120px;', 'width: 250px;', 'margin: 20px;', 'padding: 15px;', 'background-color: yellow;', '</style>', '</head>', '<script>', 'function getInfo() {', 'var eleValue = document.getElementById(""JTP"");', 'var txt = ""Height of the elements paragraph along with padding and border in pixels is: "" + eleValue.offsetHeight + ""px"";', 'document.getElementById(""sudo"").innerHTML = txt;', '</script>', '<h2> HTML DOM offsetHeight Property example </h2>', '<div id= ""JTP"">', '<b> A basic information about this div tab: </b>', '<p id= ""sudo""> </p>', '<button type=""JTP"" onclick=""getInfo()""> Submit </button>', '</body>', '</html>', '<title>', 'HTML DOM offsetHeight Property example', '</title>', '<style>', '#PStyle {', 'height: 220px;', 'width: 320px;', 'margin: 20px;', 'padding: 15px;', 'background-color: pink;', '</style>', '</head>', '<script>', 'function getInfo() {', 'var eleValue = document.getElementById(""PStyle"");', 'var txt = ""Height of the elements paragraph along with padding and border in pixels is: "" + eleValue.offsetHeight + ""px"";', 'document.getElementById(""sudo"").innerHTML = txt;', '</script>', '<h3> HTML DOM offsetHeight Property Example 2 </h3>', '<div id= ""PStyle"">', '<p> In this example, we will calculate the offset height for this paragraph. We have also provided CSS styling to this paragraph. This offsetHeight will include the height of text, padding, border except margin taken by this paragraph. </p>', '<b> OffsetHeight of this div tab paragraph: </b>', '<p id= ""sudo""> </p>', '<button type= ""button"" onclick = ""getInfo()""> Calculate offsetHeight </button>', '</body>', '</html>', '<title>', 'HTML DOM offsetHeight Property example', '</title>', '<style>', '#PStyle {', 'background-color: orange;', '</style>', '</head>', '<script>', 'function getInfo() {', 'var eleValue = document.getElementById(""PStyle"");', 'var txt = ""Height of the elements in paragraph calculated as pixels is: "" + eleValue.offsetHeight + ""px"";', 'document.getElementById(""sudo"").innerHTML = txt;', '</script>', '<h3> HTML DOM offsetHeight Property Example 3 </h3>', '<div id= ""PStyle"">', '<p> In this example, we will calculate the offset height of this given paragraph. We have jusr included background color in CSS styling not height, width, margin, or padding to this paragraph. So, the offsetHeight will be calculted for the height of text taken by this paragraph. </p>', '<b> OffsetHeight of this div tab paragraph: </b>', '<p id= ""sudo""> </p>', '<button type= ""submit"" onclick = ""getInfo()""> Calculate offsetHeight </button>', '</body>', '</html>', '<title>', 'HTML DOM offsetHeight Property example', '</title>', '<style>', '#PStyle {', 'height: 180px;', 'width: 400px;', 'margin: 20px;', 'padding: 15px;', 'background-color: lightblue;', '</style>', '</head>', '<script>', 'function getInfo() {', 'var eleValue = document.getElementById(""PStyle"");', 'var txt1 = ""OffsetHeight of the paragraph along with padding and border in pixels is: "" + eleValue.offsetHeight + ""px"";', 'var txt2 = ""OffsetWidth of the paragraph along with padding and border in pixels is: "" + eleValue.offsetWidth + ""px"";', 'document.getElementById(""sudo1"").innerHTML = txt1;', 'document.getElementById(""sudo2"").innerHTML = txt2;', '</script>', '<h2> Calculation of offsetHeight and offsetWidth </h2>', '<div id= ""PStyle"">', '<b> A basic information about this div tab: </b>', '<p id= ""sudo1""> </p>', '<p id= ""sudo2""> </p>', '<button type=""button"" onclick=""getInfo()""> Submit </button>', '</body>', '</html>']",[],['rowser Chrome Internet Explorer Firefox Opera Safari Edg&&&ffsetHeight supportYesYesYesYesYesYe'],[]
86,['Confirm password validation in JavaScript'],"['In this chapter, we will discuss password validation using JavaScript. We need to validate a password every time whenever a user creates an account on any website or app. So, we have to verify a valid password as well as put the confirm password validation. For a valid password, the following parameters must be contained by it to be valid -']","['https://www.javatpoint.com/static-vs-const-in-javascript', 'https://www.javatpoint.com/javascript-offsetheight', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=confirm-password-validation-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-form', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=confirm-password-validation-in-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=confirm-password-validation-in-javascript3', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/static-vs-const-in-javascript', 'https://www.javatpoint.com/javascript-offsetheight', 'https://www.javatpoint.com/static-vs-const-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/confirm-password-validation-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/confirm-password-validation-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/confirm-password-validation-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/confirm-password-validation-in-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/confirm-password-validation-in-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/confirm-password-validation-in-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/confirm-password-validation-in-javascript7.png']",[],"['Valid password Validation', 'Confirm Password Validation', 'A complete form with password validation']",['Output on providing wrong entries'],"['Note: In the above screenshots, you may have noticed that password is visible to everyone because we have used input type=text. If you want that the password will not be visible while entering, use input type=password in your HTML form.', ""Note that we have used one more button (Reset) in this form to clear the field's data entered by the user.""]","['First one, we will check for a valid password and then confirm password validation checks.', 'Output on leaving the password field blank.', 'Output on entering a valid password.', 'Screenshot 1', 'Screenshot 2', 'To check that all the validations are working correctly or not, copy the code and execute it in your JavaScript compiler.']","['In this example, we will check that the password created by the user is valid or not and match with all the parameter discussed above. See the code below for password verification.', 'In this example, we will validate the password by verifying both the password entered by the user are same. This process will be done at the client site using JavaScript before the form loading.', 'Firstly, we will enter different values in the password and confirm password fields. An alert box will pop up with a message: Passwords did not match. See the output below:', 'In this turn, we will enter the same values in the password and confirm password fields to verify that the validation code is working properly. An alert box will pop up with a message: Password created successfully. See the output below:', 'In the above examples, you have learned to verify a valid password and confirm password validation. Now, we will keep both the validations in a single form to complete the password validation process.', ""Apart from that, we have also put a Reset button to clear the field's data in the form. When you click on this reset button, all the data provided by the user in fields will get clear. Now, see the code below:"", 'When you click on the OK button inside the alert box, it will move to a simple HTML output where it will display a message Form data has been submitted successfully.']","['Whenever a user creates a password, there is always one more field of confirm password. It checks that the password entered by the user is same as this confirm password fields. To create a valid password, both the password and confirm password fields value must be matched.', 'For this, we will create a simple basic signup form that will contain some fields, such as first name, last name, create password, and confirm password. The fields with a star (*) are required fields in which the user must have to provide some value. We will put the following validation in this form to validate a password:', 'An HTML form will appear on the web by executing the above code. Here, provide the data in text fields and click on the Submit button to process. According to validations, if data is correct, an alert box will pop up with a message: Your Password created successfully. Here when you click on the OK button, it will take to another output.', 'In case you entered a wrong value or left any required field empty, it will display an error at the right of the input box. These errors will show one by one after the validation check with each click on the Submit button. See the errors in below screenshot:']","['<title> Verification of valid Password </title>', '</head>', '<script>', 'function verifyPassword() {', 'var pw = document.getElementById(""pswd"").value;', 'if(pw == """") {', 'document.getElementById(""message"").innerHTML = ""**Fill the password please!"";', 'return false;', 'if(pw.length < 8) {', 'document.getElementById(""message"").innerHTML = ""**Password length must be atleast 8 characters"";', 'return false;', 'if(pw.length > 15) {', 'document.getElementById(""message"").innerHTML = ""**Password length must not exceed 15 characters"";', 'return false;', '} else {', 'alert(""Password is correct"");', '</script>', '<center>', '<h1 style=""color:green"">Javatpoint</h1>', '<h3> Verify valid password Example </h3>', '<form onsubmit =""return verifyPassword()"">', '<!-- Enter Password -->', '<td> Enter Password </td>', '<input type = ""password"" id = ""pswd"" value = """">', '<span id = ""message"" style=""color:red""> </span> <br><br>', '<!-- Click to verify valid password -->', '<input type = ""submit"" value = ""Submit"">', '<!-- Click to reset fields -->', '<button type = ""reset"" value = ""Reset"" >Reset</button>', '</form>', '</center>', '</body>', '</html>', '<title> Password Matching Validation </title>', '</head>', '<script>', 'function matchPassword() {', 'var pw1 = document.getElementById(""pswd1"");', 'var pw2 = document.getElementById(""pswd2"");', 'if(pw1 != pw2)', 'alert(""Passwords did not match"");', '} else {', 'alert(""Password created successfully"");', '</script>', '<center>', '<h1 style=""color:green"">Javatpoint</h1>', '<h3> Confirm password Validation Example </h3>', '<!-- Enter Password -->', '<td> Enter Password </td>', '<input type = ""password"" name = ""pswd1""> <br><br>', '<!-- Enter Confirm password -->', '<td> Confirm Password </td>', '<input type = ""password"" name = ""pswd2""> <br><br>', '<!?Click to validate confirm password -->', '<button type = ""submit"" onclick=""matchPassword()"">Submit</button>', '<!-- Click to reset fields -->', '<button type = ""reset"" value = ""Reset"" >Reset</button>', '</form>', '</center>', '</body>', '</html>', '<title> Validate the Password </title>', '</head>', '<script>', 'function validateForm() {', 'var pw1 = document.getElementById(""pswd1"").value;', 'var pw2 = document.getElementById(""pswd2"").value;', 'var name1 = document.getElementById(""fname"").value;', 'var name2 = document.getElementById(""lname"").value;', 'if(name1 == """") {', 'document.getElementById(""blankMsg"").innerHTML = ""**Fill the first name"";', 'return false;', 'if(!isNaN(name1)){', 'document.getElementById(""blankMsg"").innerHTML = ""**Only characters are allowed"";', 'return false;', 'if(!isNaN(name2)){', 'document.getElementById(""charMsg"").innerHTML = ""**Only characters are allowed"";', 'return false;', 'if(pw1 == """") {', 'document.getElementById(""message1"").innerHTML = ""**Fill the password please!"";', 'return false;', 'if(pw2 == """") {', 'document.getElementById(""message2"").innerHTML = ""**Enter the password please!"";', 'return false;', 'if(pw1.length < 8) {', 'document.getElementById(""message1"").innerHTML = ""**Password length must be atleast 8 characters"";', 'return false;', 'if(pw1.length > 15) {', 'document.getElementById(""message1"").innerHTML = ""**Password length must not exceed 15 characters"";', 'return false;', 'if(pw1 != pw2) {', 'document.getElementById(""message2"").innerHTML = ""**Passwords are not same"";', 'return false;', '} else {', 'alert (""Your password created successfully"");', 'document.write(""JavaScript form has been submitted successfully"");', '</script>', '<h1 style=""color:green"">Javatpoint</h1>', '<h3> Verify valid password Example </h3>', '<form onsubmit =""return validateForm()"">', '<!-- Enter first name -->', '<td> Full Name* </td>', '<input type = ""text"" id = ""fname"" value = """">', '<span id = ""blankMsg"" style=""color:red""> </span> <br><br>', '<!-- Enter last name -->', '<td> Last Name </td>', '<input type = ""text"" id = ""lname"" value = """">', '<span id = ""charMsg"" style=""color:red""> </span> <br><br>', '<!-- Create a new password -->', '<td> Create Password* </td>', '<input type = ""password"" id = ""pswd1"" value = """">', '<span id = ""message1"" style=""color:red""> </span> <br><br>', '<!?Enter confirm password -->', '<td> Confirm Password* </td>', '<input type = ""password"" id = ""pswd2"" value = """">', '<span id = ""message2"" style=""color:red""> </span> <br><br>', '<!-- Click to verify valid password -->', '<input type = ""submit"" value = ""Submit"">', '<!-- Click to reset fields -->', '<button type = ""reset"" value = ""Reset"" >Reset</button>', '</form>', '</body>', '</html>']",[],[],"['|||A password should be alphanumeric.|||First letter of the password should be capital.|||Password must contain a special character (@, $, !, &, etc).|||Password length must be greater than 8 characters.|||One of the most important that the password fields should not be empty.||||||Empty field validation|||Minimum password length validation, i.e., > 8|||Maximum password length validation, i.e., <15|||Confirm password validation|||']"
87,['Difference Between Static and Const in JavaScript'],"[""We make use of both static and const variables in different languages. In this section, we will describe the difference points between both variables. Let's discuss.""]","['https://www.javatpoint.com/how-to-convert-comma-separated-string-into-an-array-in-javascript', 'https://www.javatpoint.com/confirm-password-validation-in-javascript', 'https://www.javatpoint.com/how-to-convert-comma-separated-string-into-an-array-in-javascript', 'https://www.javatpoint.com/confirm-password-validation-in-javascript', 'https://www.javatpoint.com/how-to-convert-comma-separated-string-into-an-array-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/static-vs-const-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/static-vs-const-in-javascript2.png']",[],['Static vs. Const in JavaScript'],"['What is a Static variable in JavaScript', 'What is a Const variable in JavaScript', 'Using JavaScript Static', 'Using Javascript const']",[],"['There are the following difference points which will let us understand the difference between the two:', 'Below is a practical implementation of using JavaScript static keyword within a class:', 'Below is a practical implementation of using JavaScript const keyword:']","['In the above program code, we can see that a static method is created within a class and when it is invoked, it calls the statement within the static method of the class. The output of the following is shown below:', 'In the above code, it is seen that the const variable is assigned with a value but when we try to re-assign another value, an error is thrown which tells that the value described as const cannot be changed. Hence, the output of the above code is:']","['A static variable is a class property that is used in a class and not on the instance of the class. The variable is stored on the data segment area of the memory, and the same value is shared among every instance created in a class. To use a static variable, we use the static keyword. We can use the static keyword for making a static value, a static function, with classes, operators, properties and work as a utility function for the application or websites. The value of a static variable is set at the run time and is a kind of global value that can be used for the instance of the specified class.', ""A const variable is a variable that has a fixed value and remains the same throughout the program. A property of the const variable is that we cannot change or modify its value throughout the program. It is because as soon as we make a const value, the compiler gets informed that the value is fixed and should be prevented from the programmer. Thus, whenever the programmer tries to modify a const value, an error gets displayed that the const value cannot be changed. To use a const variable, we use a 'const' keyword and input value."", ""Above are some difference points that will make us understand the working of both JavaScript keywords. Apart from these theoretical difference descriptions, let's have a look over an example of both through which we can understand the use and working of the static and const variable."", 'In this section, we understood that static as well as const variable have different roles and are used for different purposes where a static variable can be used for a class method or property and a const variable is used for initializing a const value for an array, variable or an object.']","['<title> JavaScript Static</title>', '</head>', '<script>', 'class A {', 'static staticMethod() {', 'return ""Calling Static method."";', '}', '}', 'document.write(A.staticMethod());', '</script>', '</body>', '</html>', '<title> JavaScript Static</title>', '</head>', '<script>', 'const value= 8;', 'value= 10;', 'catch (e) {', 'document.write(e);', '} //will display a TypeError', 'document.write(value);', '</script>', '</body>', '</html>']",[],"[""Static|||Const&&&The static keyword is used for defining static properties and methods in a javascript class program.|||The const keyword is used for defining constant value for a variable.&&&The static keyword can be accessed on the class definition only. In order to access the static keyword for non-static methods, one needs to invoke them using the class name. However, for calling a static method within another static method, we can make use of this keyword.|||A const value can be accessed globally or locally, but a global constant can never be window object properties. &&&The static methods are the utility functions that are used for creating or cloning the objects.|||The const variable is used for declaring a constant or fixed value whose value cannot be changed.&&&JavaScript static is labeled by a keyword known as the 'static' keyword.|||JavaScript const is labeled by a keyword known as the 'const' keyword, where we declare a const variable and initialize it with a constant value.&&&JavaScript static can be used with classes and methods also.|||JavaScript const can be used with objects and arrays also.&&&The value for a static variable can be reassigned.|||The value for a const variable cannot be reassigned. However, we can re-declare the const variable in different block scope as it is allowed.""]",[]
88,['How to Convert Comma Separated String into an Array in JavaScript'],"['A comma-separated valuation (CSV) file is a demarcated file format that uses a comma to isolate the values. The data record is comprised of one or more than one field, separated by the commas. The name root for this file format is the comma-separated file format, is the use of the comma as a field extractor.']","['https://www.javatpoint.com/calculate-age-using-javascript', 'https://www.javatpoint.com/static-vs-const-in-javascript', 'https://www.javatpoint.com/calculate-age-using-javascript', 'https://www.javatpoint.com/static-vs-const-in-javascript', 'https://www.javatpoint.com/calculate-age-using-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-convert-comma-separated-string-into-an-array-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-convert-comma-separated-string-into-an-array-in-javascript2.png']",[],"['By using the split () method', 'Append through the list and put track of each comma you find to generate a new sequence with different strings']",[],[],"['You can convert the comma-separated string into an array by using the two following methods.', 'Here, an illustration is given below for the same.', 'After the successful execution of the output, we got the following output.', 'Here, an illustration is given below for the same.', 'You get the following snippet after the execution of the code. ']",['The split () method is used to partition a sequence based on an extractor. This separator can be delineated as a comma to differentiate the string if a comma is encountered. This procedure returns an array of distinct strings.'],"['This method helps you to iterate the characters of the string and analyze for the comma. The Previous index variable can be determined, which keeps records of the first character of the next string. The slice method is used to remove the part of the string between the prior index and the specific position of the comma found. This string is driven to a new array. This procedure is iterated for the entire length of the string. The final segment comprises all the separate strings.']","[""string.split(' , ')"", '<!DOCTYPE html>', '<html>', '<head>', '<title>', 'Conversion of comma separated', 'string to array in JavaScript', '</title>', '</head>', '<body>', '<h2 style=""color: green"">', 'JavaTpoint', '<b>Conversion of comma separated string', 'to array in JavaScript</b>', '<p>Original string is', '""Twenty, Thirty, Fourty, Fifty, Sixty""</p>', 'The values of the Separated Array is: <span class=""output""></span>', '</p>', '<button onclick=""separateString()"">', 'Remove Text', '</button>', '<script type=""text/javascript"">', 'function separateString() {', 'originalString = ""Twenty, Thirty, Fourty, Fifty, Sixty"";', ""separatedArray = originalString.split(', ');"", 'console.log(separatedArray);', ""document.querySelector('.output').textContent ="", 'separatedArray;', '</script>', '</body>', '</html>', 'originalString = "" Twenty, Thirty, Fourty, Fifty, Sixty "";', 'separatedArray = [];', 'let previousIndex = 0;                       // index of end of the last string', 'for(i = 0; i < originalString.length; i++)', ""if (originalString[i] == ', ') {                                      // check the character for a comma"", 'separated = originalString.slice(previousIndex, i);', 'separatedArray.push(separated);', '', 'previousIndex = i + 1;              // update the index of the last string', 'separatedArray.push(originalString.slice(previousIndex, i));', '<!DOCTYPE html>', '<head>', '<title>Conversion of comma separated string to array in JavaScript', '</title>', '</head>', '<body>', '<h1 style=""color: green"">', 'JavaTpoint', '<b>Conversion of comma separated string', 'to array in JavaScript</b>', '<p>Original string is', '""Twenty, Thirty, Fourty, Fifty, Sixty""</p>', 'Separated Array is: <span class=""output""></span>', '<button onclick=""separateString()"">', 'Remove Text', '</button>', '<script type=""text/javascript"">', '', 'function separateString()', '{', 'originalString =', '""Twenty, Thirty, Fourty, Fifty, Sixty"";', 'separatedArray = [];', '', 'let previousIndex = 0;       // index of end of the last string', 'for (i = 0; i < originalString.length; i++)', ""if (originalString[i] == ', ')     // check the character for a comma"", '{', 'separated =        // split the string from the last index to the comma', 'originalString.slice(previousIndex, i);', 'separatedArray.push(separated);', 'previousIndex = i + 1;                 // update the index of the last string', '}', '}', 'separatedArray.push(          // push the last string into the array', 'originalString.slice(previousIndex, i));', 'console.log(separatedArray);', 'document.querySelector(', ""'.output').textContent = separatedArray;"", '}', '</script>', '</body>', '</html>']",[],[],['|||By using the split () method|||Append through the list and put track of each comma you find to generate a new sequence with different strings.|||']
89,['Calculate age using JavaScript'],"['JavaScript offers some built-in date and time functions, which helps to calculate the age from the date (Date of Birth). Using these JavaScript methods, you can easily find the age of anyone. For this, we require a date input from the user and the current system date. We need to track the following conditions in mind while calculating the difference between them:']","['https://www.javatpoint.com/javascript-label-statement', 'https://www.javatpoint.com/how-to-convert-comma-separated-string-into-an-array-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=calculate-age-using-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-form', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=calculate-age-using-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=calculate-age-using-javascript3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=calculate-age-using-javascript4', 'https://www.javatpoint.com/javascript-label-statement', 'https://www.javatpoint.com/how-to-convert-comma-separated-string-into-an-array-in-javascript', 'https://www.javatpoint.com/javascript-label-statement']","['https://static.javatpoint.com/javascriptpages/images/calculate-age-using-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-age-using-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-age-using-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-age-using-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-age-using-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-age-using-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-age-using-javascript7.png', 'https://static.javatpoint.com/javascriptpages/images/calculate-age-using-javascript8.png']",[],[],"['Example 1: Predefined date input', 'Example 2: dynamic date input', 'Example 2: Calculate age in year, month and days', 'Example 4']","['Note: While testing this program, keep the thing in mind that the date should be less than the current system date.', 'Important Note:\nNote that we have calculated age only in years like 8 years, 9 years, but not like 8-year 5 months 23 days. So, we will calculate in detail now.']","['Now, we will convert this process to actual implementation.', 'In this example, we have provided a date (DOB) in code instead of taking input from the user.', 'If you click on Calculate age with choosing a date, it will show an error.', 'In this screenshot, you can see that we have provided a date ""12-06-2012"" in the input field and get the result 8 years after calculating the age.', 'If you click on Calculate age with choosing a date, it will show an error.', 'Output when you enter a random date', 'Output on entering a date having the same birth month and date', ""Output when you entered today's date (current date)"", 'There are various ways of calculating age. It is one more example to calculate age in year, month, and days format.', 'In this example, we are calculating the age by converting dates difference in milliseconds. It is also an easy way to calculate age.', 'See in the below output, the age for a given date of birth 15-05-1986 is 34 years 5 months and 17 days.', ""By entering a date of birth greater than today's, it will show an error Invalid date input. See the output below:""]","['There are various ways to calculate the age from date of birth. We will discuss simple and easily understandable methods to calculate the age using JavaScript.', 'In this example, we will create an HTML form to take the date input from the user and then calculate the age using JavaScript. It will take dynamic input from the user. This HTML form will use the calendar to choose date input.', 'By executing the above code, an HTML form will appear. Here, choose a date (date of birth) from the calendar and click on the Calculate Age button to calculate the age from the provided date of birth.', 'This example will calculate and display the age in year, month, and days rather than only in years. E.g., for a DOB 27 Dec 2015, the person will be 4 years, 9 months, and 23 days old.', 'By executing the above code, an HTML form will appear. Here, choose a date (date of birth) from the calendar and click on the Calculate Age button to calculate the age from the provided date of birth.', 'We will show you different outputs for different date input values. You will see the response will be returned in the form of year, month, and days. See the output one by one:']",[],"['<script>', 'var dob = new Date(""06/24/2008"");', 'var month_diff = Date.now() - dob.getTime();', 'var age_dt = new Date(month_diff);', 'var year = age_dt.getUTCFullYear();', 'var age = Math.abs(year - 1970);', 'document.write(""Age of the date entered: "" + age + "" years"");', '</script>', '<script>', 'function ageCalculator() {', 'var userinput = document.getElementById(""DOB"").value;', 'var dob = new Date(userinput);', ""if(userinput==null || userinput=='') {"", 'document.getElementById(""message"").innerHTML = ""**Choose a date please!"";', 'return false;', '} else {', 'var month_diff = Date.now() - dob.getTime();', 'var age_dt = new Date(month_diff);', 'var year = age_dt.getUTCFullYear();', 'var age = Math.abs(year - 1970);', 'return document.getElementById(""result"").innerHTML =', '""Age is: "" + age + "" years. "";', '</script>', '</head>', '<center>', '<h2 style=""color: 32A80F"" align=""center""> Calculate Age from Date of Birth <br> <br> </h2>', '<!-- Choose a date and enter in input field -->', '<b> Enter Date of Birth: <input type=date id = DOB> </b>', '<span id = ""message"" style=""color:red""> </span> <br><br>', '<!-- Choose a date and enter in input field -->', '<button type=""submit"" onclick = ""ageCalculator()""> Calculate age </button> <br><br>', '<h3 style=""color:32A80F"" id=""result"" align=""center""></h3>', '</center>', '</body>', '</html>', '<script>', 'function ageCalculator() {', 'var userinput = document.getElementById(""DOB"").value;', 'var dob = new Date(userinput);', ""if(userinput==null || userinput==''){"", 'document.getElementById(""message"").innerHTML = ""**Choose a date please!"";', 'return false;', 'else {', 'var dobYear = dob.getYear();', 'var dobMonth = dob.getMonth();', 'var dobDate = dob.getDate();', 'var now = new Date();', 'var currentYear = now.getYear();', 'var currentMonth = now.getMonth();', 'var currentDate = now.getDate();', 'var age = {};', 'var ageString = """";', 'yearAge = currentYear - dobYear;', 'if (currentMonth >= dobMonth)', 'var monthAge = currentMonth - dobMonth;', 'else {', 'yearAge--;', 'var monthAge = 12 + currentMonth - dobMonth;', 'if (currentDate >= dobDate)', 'var dateAge = currentDate - dobDate;', 'else {', 'monthAge--;', 'var dateAge = 31 + currentDate - dobDate;', 'if (monthAge < 0) {', 'monthAge = 11;', 'yearAge--;', '}', 'age = {', 'years: yearAge,', 'months: monthAge,', 'days: dateAge', 'if ( (age.years > 0) && (age.months > 0) && (age.days > 0) )', 'ageString = age.years + "" years, "" + age.months + "" months, and "" + age.days + "" days old."";', 'else if ( (age.years == 0) && (age.months == 0) && (age.days > 0) )', 'ageString = ""Only "" + age.days + "" days old!"";', 'else if ( (age.years > 0) && (age.months == 0) && (age.days == 0) )', 'ageString = age.years +  "" years old. Happy Birthday!!"";', 'else if ( (age.years > 0) && (age.months > 0) && (age.days == 0) )', 'ageString = age.years + "" years and "" + age.months + "" months old."";', 'else if ( (age.years == 0) && (age.months > 0) && (age.days > 0) )', 'ageString = age.months + "" months and "" + age.days + "" days old."";', 'else if ( (age.years > 0) && (age.months == 0) && (age.days > 0) )', 'ageString = age.years + "" years, and"" + age.days + "" days old."";', 'else if ( (age.years == 0) && (age.months > 0) && (age.days == 0) )', 'ageString = age.months + "" months old."";', 'else ageString = ""Welcome to Earth! <br> It\'s first day on Earth!"";', 'return document.getElementById(""result"").innerHTML = ageString;', '', '</script>', '</head>', '<center>', '<h2 style=""color: 32A80F"" align=""center""> Calculate Age from Date of Birth <br> <br> </h2>', '<b> Enter Date of Birth: <input type=date id = DOB>  </b>', '<span id = ""message"" style=""color:red""> </span> <br><br>', '<button type=""submit"" onclick = ""ageCalculator()""> Calculate age </button> <br><br>', '<h3 style=""color:32A80F"" id=""result"" align=""center""></h3>', '</center>', '</body>', '</html>', '<script>', 'function ageCalculator() {', 'var userinput = document.getElementById(""DOB"").value;', 'var dob = new Date(userinput);', ""if(userinput==null || userinput==''){"", 'document.getElementById(""message"").innerHTML = ""**Choose a date please!"";', 'return false;', 'else {', 'var mdate = userinput.toString();', 'var dobYear = parseInt(mdate.substring(0,4), 10);', 'var dobMonth = parseInt(mdate.substring(5,7), 10);', 'var dobDate = parseInt(mdate.substring(8,10), 10);', 'var today = new Date();', 'var birthday = new Date(dobYear, dobMonth-1, dobDate);', 'var diffInMillisecond = today.valueOf() - birthday.valueOf();', 'var year_age = Math.floor(diffInMillisecond / 31536000000);', 'var day_age = Math.floor((diffInMillisecond % 31536000000) / 86400000);', 'if ((today.getMonth() == birthday.getMonth()) && (today.getDate() == birthday.getDate())) {', 'alert(""Happy Birthday!"");', '}', '', 'var month_age = Math.floor(day_age/30);', 'day_age = day_age % 30;', '', 'var tMnt= (month_age + (year_age*12));', 'var tDays =(tMnt*30) + day_age;', 'if (dob>today) {', 'document.getElementById(""result"").innerHTML = (""Invalid date input - Please try again!"");', '}', 'else {', 'document.getElementById(""result"").innerHTML = year_age + "" years "" + month_age + "" months "" + day_age + "" days""', '}', '</script>', '</head>', '<center>', '<h2 style=""color: #008CBA"" align=""center""> Calculate Age from Date of Birth <br> <br> </h2>', '<b> Enter Date of Birth: <input type=date id = DOB>  </b>', '<span id = ""message"" style=""color:red""> </span> <br><br>', '<button type=""submit"" onclick = ""ageCalculator()""> Calculate age </button> <br><br>', '<h3 style=""color:#008CBA"" id=""result"" align=""center""></h3>', '</center>', '</body>', '</html>']",['Age of the date entered: 12 years'],[],"[""|||If the current date is less than the date (birthdate) entered by the user, that month will not be counted as the month is not completed. Otherwise, we will add the number of month days (30 or 31) to the current date to get the difference between them.|||If the current month is less than the birth month, the current year will not be counted. To get the month's difference, we will subtract by adding the total number of months (12) to the current month.|||Finally, we just need to subtract the date, month and year after satisfying the above two conditions.|||""]"
90,['JavaScript label statement'],['JavaScript label is a statement used to prefix a label as an identifier. You can specify the label by any name other than the reserved words. It is simply used with a colon (:) in code.'],"['https://www.javatpoint.com/javascript-string-with-quotes', 'https://www.javatpoint.com/calculate-age-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-label-statement1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-label-statement2', 'https://www.javatpoint.com/javascript-string-with-quotes', 'https://www.javatpoint.com/calculate-age-using-javascript', 'https://www.javatpoint.com/javascript-string-with-quotes']",[],[],[],"['Syntax', 'Parameters', 'Examples', 'Example: Label with for loop to break', 'Example: Label with for loop to continue']",[],"['Using some examples, we will learn how to define and use the label statement in JavaScript.', 'label: It is a JavaScript identifier. Define it by any name that is not a reserved keyword.', 'Statements: It is a JavaScript statement, where break is simply used with the labelled statement and continue with looping labelled statement.', 'Basically, a label statement in JavaScript controls the flow of the program. JavaScript programmers use labels rarely now. ']","['A label can be used with a break or continue statement to control the flow of the code more precisely. The label is applied to a block of code or a statement.', ""Let's understand the JavaScript label that how it works and helps to break or continue with the looping statement with the help of different examples."", 'In this example, we will define two labels by the name innerloop and outerloop, which is used with for loop to break the execution of the loop for a specified condition.', 'In this example, we will again define two labels by the name innerloop and outerloop. But now they are used with for loop to continue the execution of the loop when the specified condition occurs.']",[],"['label: statements', '<script>', 'var i, j;', 'document.write(""Entering the loop!<br /> "");', 'outerloop:      // This is the label name for the below loop', 'for (i = 0; i < 5; i++) {', 'document.write(""<b> Outerloop i: </b>"" + i + ""</br>"");', 'innerloop:  //another label', 'for (j = 0; j <= 4; j++) {', 'if (j > 3 ) {', 'document.write(""<b> Break innermost loop when j>3 </b></br>"");', 'break ;', '}', 'if (i == 2) {', 'document.write(""<b> Break innerloop when i=2 </b></br>"");', 'break innerloop;', '}', 'if (i == 4) {', 'document.write(""<b> Break outerloop when i=4 </b></br>"");', 'break outerloop;', '}', 'document.write(""Innerloop execution j: "" + j + "" <br />"");', 'document.write(""Exit from all loops! </br> "");', '</script>', '</body>', '</html>', '<script>', 'var i,j;', 'document.write(""Entering the loop! </br> "");', 'outerloop: // This is the label name', 'for (i = 0; i < 4; i++) {', 'document.write(""<b> Outerloop: </b>"" + i + ""</br>"");', 'innerloop:', 'for (j = 0; j < 4; j++) {', 'if (i > 2) {', 'document.write(""<b> Continue Innerloop when i>2 </b></br>"");', 'continue innerloop;', '', 'if (j == 3) {', 'document.write(""<b> Continue Outerloop when j=3 </b></br>"");', 'continue outerloop;', 'document.write(""Innerloop execution: "" + j + ""<br />"");', 'document.write(""Exit from all loops!<br /> "");', '</script>', '</body>', '</html>']","['Entering the loop!', 'Outerloop i: 0', 'Innerloop execution j: 0', 'Innerloop execution j: 1', 'Innerloop execution j: 2', 'Innerloop execution j: 3', 'Break innermost loop when j>3', 'Outerloop i: 1', 'Innerloop execution j: 0', 'Innerloop execution j: 1', 'Innerloop execution j: 2', 'Innerloop execution j: 3', 'Break innermost loop when j>3', 'Outerloop i: 2', 'Break Innerloop when i=2', 'Outerloop i: 3', 'Innerloop execution j: 0', 'Innerloop execution j: 1', 'Innerloop execution j: 2', 'Innerloop execution j: 3', 'Break Innerloop when j>3', 'Outerloop i: 4', 'Break Outerloop when i=4', 'Exit from all loops!', 'Entering the loop!', 'Outerloop i: 0', 'Innerloop execution j: 0', 'Innerloop execution j: 1', 'Innerloop execution j: 2', 'Continue Outerloop when j=3', 'Outerloop i: 1', 'Innerloop execution j: 0', 'Innerloop execution j: 1', 'Innerloop execution j: 2', 'Continue Outerloop when j=3', 'Outerloop i: 2', 'Innerloop execution j: 0', 'Innerloop execution j: 1', 'Innerloop execution j: 2', 'Continue Outerloop when j=3', 'Outerloop i: 3', 'Continue Innerloop when i>2', 'Continue Innerloop when i>2', 'Continue Innerloop when i>2', 'Continue Innerloop when i>2', 'Exit from all loops!']",[],[]
91,['JavaScript String with quotes'],"['The strings are usually used to store and manipulate the text data. However, you can also store special characters and numeric data in strings as well. E.g., address or email id, which contains multitype data.']","['https://www.javatpoint.com/how-to-create-dropdown-list-using-javascript', 'https://www.javatpoint.com/javascript-label-statement', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-with-quotes1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-with-quotes2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-with-quotes3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-with-quotes4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-with-quotes5', 'https://www.javatpoint.com/how-to-create-dropdown-list-using-javascript', 'https://www.javatpoint.com/javascript-label-statement', 'https://www.javatpoint.com/how-to-create-dropdown-list-using-javascript']",[],[],['Enclosing quotation marks'],"['For example', 'Example: String without quotes', 'Example: Print quotes using backslash (\\)', 'Example: Print quotes using alternative String syntax', 'Example: Use apostrophe to print single quote', 'Example: Use &quot to print double quote']","['Note: Do not forget to insert a backslash while escaping the quotation mark, especially when outside and inside quotes are the same.']","['See the simple example of printing the strings without the single and double-quotes.', 'Here, you can see that both strings have been printed without quotes.', ""Let's see how it will be done in JavaScript."", 'In this example, we will use the backslash (\\) to escape the quotation mark.', 'JavaScript misunderstand the string if you write it as the below string:', 'Other than all these methods, there is one more way to display the single quote and double quote on the web browser.', 'In this example, we will use apostrophe in the middle of the single-quote string. See the below example, how it will be done:']","['Strings are created by putting data inside the quotes. JavaScript and other programming languages allow the users to keep the data either in double quotes ("" "") or single quotes (\' \'). This chapter will show you how to print string with quotes.', 'In this example, we will use alternative quotation mark inside and outside of a string. This means the same thing can be done with it. See the below example, how it will be done:', 'In JavaScript, you can use &quot with a string to display string with double quotation mark. With &quot, you can use any quote. See the below example:']","[""These single quotes and double quotes do not print with string on the web browser. But sometimes we need to print the quotes with the string as well. Some words like it's, b'day, seven o'clock, can't, and etc. Firstly, see how a string simply display on the web."", 'You can use a backslash (\\) with the particular word or string to escape the quotation mark. Remember one thing; if you do not want to use the backslash (\\), you have to use the quotation mark alternatively inside and outside of a string. This means that if you try to use a single quote inside a string, the outside quotes should be double quotes. Similarly, if you try to use a double quote inside a string, the outside quotes must be single quotes.']","['<script>', ""var pat1 = 'A string inside single quote';"", 'var pat2 = ""A string inside double quote"";', 'document.write(pat1 + ""</br>"");', 'document.write(pat2);', '</script>', '<script>', ""var singleQ = 'It\\'s nine o\\' clock in the morning.';"", 'var doubleQ = ""Mukesh Ambani is \\""the richest man\\"" of India."";', 'document.write(singleQ + ""</br>"");', 'document.write(doubleQ + ""</br>"");', '</script>', '</body>', '</html>', 'var dq = ""Mukesh Ambani is ""the richest man"" of India."";', '<script>', 'var singleQ = ""It\'s nine o\' clock in the morning."";', 'var doubleQ = \'Always say ""Thank you"" when anyone helps you.\';', 'document.write(singleQ + ""</br>"");', 'document.write(doubleQ + ""</br>"");', '</script>', '</body>', '</html>', '<script>', ""var sq = 'It's an example of printing the single quote with string.';"", 'document.write(sq);', '</script>', '</body>', '</html>', '<script>', 'var dq1 = ""Always say "" Thank you "" when anyone helps you."";', 'var dq2 = \'Always say "" Thank you "" when anyone helps you.\';', 'document.write(dq1 + ""</br>"");', 'document.write(dq2);', '</script>', '</body>', '</html>']","['A string inside single quote', 'A string inside double quote', ""It's nine o' clock in the morning."", 'Mukesh Ambani is ""the richest man"" of India.', ""It's nine o' clock in the morning."", 'Always say ""Thank you"" when anyone helps you.', ""It's an example of printing the single quote with string."", 'Always say ""Thank you"" when anyone helps you.', 'Always say ""Thank you"" when anyone helps you.']","['Quotes|||Example&&&Single Quote (\' \')|||\'This is a string inside single quotes.\'&&&Double Quote ("" "")|||""This is a string inside double quotes.""']",[]
92,['How to create dropdown list using JavaScript?'],"['Before starts creating a dropdown list, it is important to know what is a dropdown list. A dropdown list is a toggleable menu that allows the user to choose one option from multiple ones. The options in this list are defined in coding, which is associated with a function. When you click or choose this option, that function triggers and starts performing.']","['https://www.javatpoint.com/how-to-disable-radio-button-using-javascript', 'https://www.javatpoint.com/javascript-string-with-quotes', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-create-dropdown-list-using-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-create-dropdown-list-using-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/php-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/mysql-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-create-dropdown-list-using-javascript3', 'https://www.javatpoint.com/https://www.javatpoint.com/mongodb-tutorial', 'https://www.javatpoint.com/how-to-disable-radio-button-using-javascript', 'https://www.javatpoint.com/javascript-string-with-quotes', 'https://www.javatpoint.com/how-to-disable-radio-button-using-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-create-dropdown-list-using-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-create-dropdown-list-using-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-create-dropdown-list-using-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-create-dropdown-list-using-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-create-dropdown-list-using-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-create-dropdown-list-using-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-create-dropdown-list-using-javascript7.png']",[],[],"['Important points to create a dropdown list', 'Examples', 'Simple dropdown list using <select> tab', 'Dropdown list using button and div tab', 'Multiple dropdown list Example']","['Note: if you click outside the dropdown window, the dropdown list will be disappeared.']","['See the below examples to create a dropdown list using different methods.', 'It is a simple example of creating a simple and easy dropdown list without using any complicated JavaScript code and CSS stylesheet.', 'By running the above code, you will get the response same as the given screenshot. It will contain a dropdown menu having a list of tutorial sites.', 'Select one item from the dropdown list by clicking on it.', 'See in the below screenshot that the selected item has been displayed in the output field.', 'A dropdown list can be created using some other ways; see some more below examples.', 'In this example, we will create a dropdown list with a button having a list of items as a dropdown menu.', 'By clicking on this dropdown button, you will get a list of items in which you have to select one item from that list. See the screenshot below:', 'Click on the Dropdown List button and hide the list.', 'See the below example how to do it:', 'On executing the above code, a form with three dropdown buttons will appear. Each dropdown button has a list of items.', 'Click on any of the dropdown button to see the list of items.', 'Let you click on MongoDB under database tutorial, it will redirect you to our javatpoint MongoDB tutorial. See the output below:']","['You have seen a dropdown list most of the time on registration forms to select the state or city from the dropdown menu. A dropdown list allows us to choose only one from the list of items. See the below screenshot how the dropdown list looks like-', 'Usually, a dropdown menu is created to categories the items of the same type. Means the list of similar type of items. It is much similar to the tutorial website, which has several lists of our javatpoint subject tutorials.']","['In the above examples, we have created a single dropdown list. We will now create a form with multiple dropdown menu of various online technical subject tutorials lists like C, C++, PHP, MySQL, and Java, categorised into several categories. When the user clicks on a particular dropdown button, their respective dropdown list will open up to you.']","['<title>dropdown menu using select tab</title>', '</head>', '<script>', 'function favTutorial() {', 'var mylist = document.getElementById(""myList"");', 'document.getElementById(""favourite"").value = mylist.options[mylist.selectedIndex].text;', '</script>', '<b> Select you favourite tutorial site using dropdown list </b>', '<select id = ""myList"" onchange = ""favTutorial()"" >', '<option> ---Choose tutorial--- </option>', '<option> w3schools </option>', '<option> Javatpoint </option>', '<option> tutorialspoint </option>', '<option> geeksforgeeks </option>', '</select>', '<p> Your selected tutorial site is:', '<input type = ""text"" id = ""favourite"" size = ""20"" </p>', '</form>', '</body>', '</html>', '<title>dropdown menu using button</title>', '</head>', '<style>', '/* set the position of dropdown */', '.dropdown {', 'position: relative;', 'display: inline-block;', '/* set the size and position of button on web */', '.button {', 'padding: 10px 30px;', 'font-size: 15px;', '/* provide css to background of list items */', '#list-items {', 'display: none;', 'position: absolute;', 'background-color: white;', 'min-width: 185px;', '/* provide css to list items */', '#list-items a {', 'display: block;', 'font-size: 18px;', 'background-color: #ddd;', 'color: black;', 'text-decoration: none;', 'padding: 10px;', '</style>', '<script>', 'function show_hide() {', 'var click = document.getElementById(""list-items"");', 'if(click.style.display ===""none"") {', 'click.style.display =""block"";', '} else {', 'click.style.display =""none"";', '}', '}', '</script>', '<div class=""dropdown"">', '<button onclick=""show_hide()"" class=""button"">Choose Language</button>', '<center>', '<!-- dropdown list items will show when we click the drop button -->', '<div id=""list-items"">', '<a href=""#""> Hindi </a>', '<a href=""#""> English </a>', '<a href=""#""> Spanish </a>', '<a href=""#""> Chinese </a>', '<a href=""#""> Japanese </a>', '</div>', '</center>', '</body>', '</html>', '<style>', '.dropbtn {', 'background-color: green;', 'color: white;', 'padding: 14px;', 'font-size: 16px;', 'cursor: pointer;', '.dropbtn:hover {', 'background-color: brown;', '.dropdown {', 'position: relative;', 'display: inline-block;', '.dropdown-content {', 'display: none;', 'position: absolute;', 'background-color: white;', 'min-width: 140px;', 'overflow: auto;', 'box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);', '.dropdown-content a {', 'color: black;', 'padding: 12px 16px;', 'text-decoration: none;', 'display: block;', '.dropdown a:hover {', 'background-color: #ddd;', '.show {', 'display: block;', '</style>', '</head>', '<h2>List of tutorials using Dropdown menu</h2>', '<p>Click on the button to open the tutorial dropdown menu.</p>', '<div class=""dropdown"">', '<button onclick=""programmingList()"" class=""dropbtn"">Programming</button>', '<div id=""myDropdown1"" class=""dropdown-content"">', '<a href=""#java"" onclick=""java()"">Java</a>', '<a href=""#python"" onclick=""python()"">Python</a>', '<a href=""#c++"" onclick=""cpp()"">C++</a>', '<a href=""#c"" onclick=""c()"">C</a>', '</div>', '<div class=""dropdown"">', '<button onclick=""databaseList()"" class=""dropbtn"">Database</button>', '<div id=""myDropdown2"" class=""dropdown-content"">', '<a href=""#mysql"" onclick=""mysql()"">MySQL</a>', '<a href=""#mdb"" onclick=""mDB()"">MongoDB</a>', '<a href=""#cass"" onclick=""cassandra()"">Cassandra</a>', '</div>', '<div class=""dropdown"">', '<button onclick=""WebTechList()"" class=""dropbtn"">Web Technology</button>', '<div id=""myDropdown3"" class=""dropdown-content"">', '<a href=""#php"" onclick=""php()"">PHP</a>', '<a href=""#css"" onclick=""css()"">CSS</a>', '<a href=""#js"" onclick=""js()"">JavaScript</a>', '</div>', '<script>', '/* methods to hide and show the dropdown content */', 'function programmingList() {', 'document.getElementById(""myDropdown1"").classList.toggle(""show"");', 'function databaseList() {', 'document.getElementById(""myDropdown2"").classList.toggle(""show"");', 'function WebTechList() {', 'document.getElementById(""myDropdown3"").classList.toggle(""show"");', '/* methods to redirect to tutorial page that user will select from dropdown list */', 'function java() {', 'window.location.replace(""https://www.javatpoint.com/java-tutorial"");', 'function python() {', 'window.location.replace(""https://www.javatpoint.com/python-tutorial"");', 'function cpp() {', 'window.location.replace(""https://www.javatpoint.com/cpp-tutorial"");', 'function c() {', 'window.location.replace(""https://www.javatpoint.com/c-programming-language-tutorial"");', 'function mysql() {', 'window.location.replace(""https://www.javatpoint.com/mysql-tutorial"");', 'function mDB() {', 'window.location.replace(""https://www.javatpoint.com/mongodb-tutorial"");', 'function cassandra() {', 'window.location.replace(""https://www.javatpoint.com/cassandra-tutorial"");', 'function php() {', 'window.location.replace(""https://www.javatpoint.com/php-tutorial"");', 'function css() {', 'window.location.replace(""https://www.javatpoint.com/css-tutorial"");', 'function js() {', 'window.location.replace(""https://www.javatpoint.com/javascript-tutorial"");', 'window.onclick = function(event) {', ""if (!event.target.matches('.dropbtn')) {"", 'var dropdowns = document.getElementsByClassName(""dropdown-content"");', 'var i;', 'for (i = 0; i < dropdowns.length; i++) {', 'var openDropdown = dropdowns[i];', ""if (openDropdown.classList.contains('show')) {"", ""openDropdown.classList.remove('show');"", '}', '</script>', '</body>', '</html>']",[],[],"['|||The <select> tab is used with <option> tab to create the simple dropdown list in HTML. After that JavaScript helps to perform operation with this list.|||Other than this, you can use the container tab <div> to create the dropdown list. Add the dropdown items and links inside it. We will discuss each method with an example in this chapter.|||You can use any element such as <button>, <a>, or <p> to open the dropdown menu.|||']"
93,['How to disable radio button using JavaScript?'],"['Radio button is an input type that is used to get input from the user by selecting one value from multiple choices. You have seen the radio buttons to choose gender between male and female. We select only one entry, either male or female and leave the other entries are unselected.']","['https://www.javatpoint.com/how-to-get-all-checked-checkbox-value-in-javascript', 'https://www.javatpoint.com/how-to-create-dropdown-list-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-disable-radio-button-using-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-disable-radio-button-using-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-disable-radio-button-using-javascript3', 'https://www.javatpoint.com/how-to-get-all-checked-checkbox-value-in-javascript', 'https://www.javatpoint.com/how-to-create-dropdown-list-using-javascript', 'https://www.javatpoint.com/how-to-get-all-checked-checkbox-value-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-disable-radio-button-using-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-disable-radio-button-using-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-disable-radio-button-using-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-disable-radio-button-using-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-disable-radio-button-using-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-disable-radio-button-using-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-disable-radio-button-using-javascript7.png']",[],[],"['Disable the radio button', 'Disable radio button using dropdown', 'Disable radio button using checkbox', 'A simple radio button example']",['Note that you can use the checkbox as well instead of a dropdown list.'],"['In the below examples, we will learn how to disable the radio button:', 'You will get the output same as the given below by running the above code. Here, first choose either Yes or No from the dropdown list.', 'Now we will use a checkbox to disable the radio button.', 'Uncheck the checkbox if you are not a developer. The radio buttons will get disabled by unchecking the checkbox.', 'So, these are the different methods to disable the radio button.', 'After selecting the radio button values, click on the Show Selected Values button, and you will get the selected values have displayed on the web.']","['Sometimes, we need to disable the radio button for a specific condition. These are special conditions when we disable the radio button. When the radio buttons get disabled, their color changed to grey.', 'Here, we will use a dropdown list having Yes and No as values to enable or disable the radio buttons. If you choose No, all the radio buttons will be disabled. On the other hand, all the radio buttons will be enabled if you select Yes.', 'By selecting No from the dropdown list, all radio buttons will get disabled, and you will not be allowed to choose any of the programming languages. See the screenshot below:', 'By selecting Yes from the dropdown list, all radio buttons will get enabled again. So, you will be able to choose one programming language. See the screenshot below:', 'You will get the output same as the given below by running the above code. Here, checkbox is already checked, you just need to choose one programming language by clicking on radio button.', 'It is a simple example of radio button created. In this example, we will create set of radio button for gender and language selection. The input will be taken using the HTML form and calculated by JavaScript. See the code below:', 'See the below screenshot for radio button. Here, selects one value from each set of radio buttons. We have selected gender = female and language = hindi.']",['There might be some cases when we need to disable the other entries based on some conditions. You can enable and disable the radio button by using the disabled property of HTML DOM. Set this property to true (disable=true) to disable the radio button in JavaScript.'],"['<script>', 'function verifyAnswer() {', 'var mylist = document.getElementById(""myAns"");', 'var result = mylist.options[mylist.selectedIndex].text;', ""if (result == 'No') {"", 'document.getElementById(""csharp"").disabled = true;', 'document.getElementById(""js"").disabled = true;', 'document.getElementById(""angular"").disabled = true;', '} else {', 'document.getElementById(""csharp"").disabled = false;', 'document.getElementById(""js"").disabled = false;', 'document.getElementById(""angular"").disabled = false;', '</script>', '<h2> Disable radio Button using dropdown </h2>', '<!-- create a dropdown list -->', '<h3> Are you a developer? </h3>', '<select id = ""myAns"" onchange = ""verifyAnswer()"" >', '<option value=""choose""> --choose -- </option>', '<option value=""yes""> Yes </option>', '<option value=""no""> No </option>', '</select>', '</form>', '<p> <b> If Yes, Choose language your preferred programming Language</b> </p>', '<!-- create a set of radio buttons -->', '<label> <input type=""radio"" name=""programming"" id=""csharp"" value= ""csharp""> C# </label>', '<label> <input type=""radio"" name=""programming"" id=""js"" value= ""js""> JavaScript </label>', '<label> <input type=""radio"" name=""programming"" id=""angular"" value= ""angular""> Angular </label>', '</body>', '</html>', '<script>', 'function verifyAnswer() {', 'document.getElementById(""csharp"").disabled = true;', 'document.getElementById(""js"").disabled = true;', 'document.getElementById(""angular"").disabled = true;', 'var dev = document.getElementById(""myCheck"").checked;', 'if (dev == true) {', 'document.getElementById(""csharp"").disabled = false;', 'document.getElementById(""js"").disabled = false;', 'document.getElementById(""angular"").disabled = false;', '</script>', '<h2> Disable radio Button using checkbox </h2>', '<!-- create a dropdown list -->', '<h3> Are you a developer? </h3>', '<input type=""checkbox"" id=""myCheck"" onchange=""verifyAnswer()"" checked>', '</form>', '<p> <b> If Yes, Choose language your preferred programming Language</b> </p>', '<!-- create a set of radio buttons -->', '<label> <input type=""radio"" name=""programming"" id=""csharp"" value= ""csharp""> C# </label>', '<label> <input type=""radio"" name=""programming"" id=""js"" value= ""js""> JavaScript </label>', '<label> <input type=""radio"" name=""programming"" id=""angular"" value= ""angular""> Angular </label>', '</body>', '</html>', '<script>', 'function calValue() {', ""var male = document.getElementById('g1');"", ""var female = document.getElementById('g2');"", ""var otherg = document.getElementById('g3');"", ""var hindi = document.getElementById('l1');"", ""var english = document.getElementById('l2');"", ""var otherl = document.getElementById('l3');"", 'var gender;', 'var language;', 'if(male.checked == true) {', 'gender = male;', '} else if(female.checked == true) {', 'gender = female;', '} else if(otherg.checked == true) {', 'gender = otherg', 'if(hindi.checked == true) {', 'language = hindi;', '} else if(english.checked == true) {', 'language = english;', '} else if(otherl.checked == true) {', 'language = otherl', 'return document.getElementById(""result"").innerHTML = ""Your selected gender is: "" + gender.value + ""</br> and </br> Selected language is: "" + language.value;', '</script>', '<h2> Simple radio Buttons Example </h2>', '<!-- create radio button for gender selection -->', '<p> <b> Select your gender: </b> </p>', '<input type=""radio"" id=""g1"" name=""gender"" value=""male"">', '<label for=""male""> Male </label> <br>', '<input type=""radio"" id=""g2"" name=""gender"" value=""female"">', '<label for=""female""> Female </label> <br>', '<input type=""radio"" id=""g3"" name=""gender"" value=""other"">', '<label for=""other""> Other </label>', '<br>', '<!-- create radio button for language selection -->', '<p> <b> Select your language: </b> </p>', '<input type =""radio"" id=""l1"" name=""language"" value=""hindi"">', '<label for =""male""> Hindi </label> <br>', '<input type=""radio"" id=""l2"" name=""language"" value=""english"">', '<label for=""female""> English </label> <br>', '<input type=""radio"" id=""l3"" name=""language"" value=""other"">', '<label for=""other""> Other </label> <br> <br>', '<input type=""submit"" value=""Submit"" onclick=""calValue()"">', '<h3 id=""result"" style=""color:blue""> </h3>', '</body>', '</html>']",[],[],[]
94,['Check if the value exists in Array in Javascript'],"[""In a programming language like Javascript, to check if the value exists in an array, there are certain methods. To be precise, there are plenty of ways to check if the value we are looking for resides amongst the elements in an array given by the user or is predefined. Let's discuss these methods one by one using various examples.""]","['https://www.javatpoint.com/javascript-setinterval', 'https://www.javatpoint.com/ripple-effect-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-array-indexof-method', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-array-includes-method', 'https://www.javatpoint.com/javascript-setinterval', 'https://www.javatpoint.com/ripple-effect-javascript', 'https://www.javatpoint.com/javascript-setinterval']",[],[],"['indexof() method', 'includes() method', 'Using loops', 'Summary']",[],[],[],['Another way of using the includes() method is by assigning the index value through which the element we are looking for is generated as output. See the below code for reference.'],"[""The indexof() method in Javascript is one of the most convenient ways to find out whether a value exists in an array or not. The indexof() method works on the phenomenon of index numbers. This method returns the index of the array if found and returns -1 otherwise. Let's consider the below code:"", 'The above code prints the given out because the value is already present in the array. It is quite easy to understand that the expected value is present at position 0. Thus, the indexof() method tells you that the value expected is present in the given array.', 'The includes() method is one such method using which we can easily find out whether the expected value exists in the given array. There are various ways to use include() method. This method returns a Boolean value i.e. true if the value exists and false if it incorrect. The includes() method can be used in various ways to find out if the value exists. To name a few, take a look at the below examples to understand.', 'In the above method, we have defined two variables as shown. The includes() methods return true because the value which we are looking for is already present in the given array. If the value was not present in the array, the includes() methods might have returned false.', 'In the above code snippet, we have defined the variable ""actors"" which the value. We have also defined a variable ""names"" which would return true or false, if the includes() method returns the shown result. The code above will return true since the value and the index number have been correctly assigned and would return the output.', ""The above examples are some of the predefined methods that we have used to check whether an element exists in the array or not. We have another approach to find out an array element using loops. Let's discuss how can we check if the element exists in an array using loops as shown in the below code snippet."", 'In the above code snippet, we have defined an array with some values in the form of strings. We have also defined a function under which the variable status is used as a string to mark if the elements are present in the program. The logical flow of the program is to traverse through each element present in the array and check if the element is present. If the value exists in the array it will display ""Present"" and ""Absent"" accordingly.', 'Javascript is dynamic and flexible programming as well as a scripting language. It is a powerful developer-friendly natured language that lets you do single stuff in multiple ways so that our learning curve remains steep. In this article, we discussed how we can easily carve different ways through which we can easily find whether the given array consists of the desired value or not. We also came across certain methods and generic programming examples that are not just easy to understand but can be implemented with no absolute knowledge. We have used indexof() and includes() methods in this article since they are the most used methods whenever it is required to find out the value enshrined in an array. We also came across loops through which one can easily find out by the normal linear search traversal as we do in the generic programming paradigms.']","['<script>', 'var army=[""Marcos"", ""DeltaForce"", ""Seals"", ""SWAT"", ""HeadHunters""];', 'if(army.indexOf(""Marcos"") !== -1)', 'alert(""Yes, the value exists!"")', 'alert(""No, the value is absent."")', '</script>', 'varspecialForces=[""BlackCats"",""Marcos"", ""Demolishers"",""HeadHunters""];', 'var name = specialForces.includes(""HeadHunters"");', 'var actors = [""Hrithik"", ""SRK"", ""Salman"", ""Vidyut""];', 'var names = actors.includes(""Vidyut"", 3);', ""var example_array = ['Rahul','Rajesh','Sonu','Siddhi','Mark','George'];"", 'function checkArray(value,array)', ""var status = 'Absent';"", 'for(var i=0; i<array.length; i++)', 'var name = array[i];', 'if(name == value){', ""status = 'Present';"", 'break;', 'return status;']","['Yes, the value exists!', 'status: Present', 'status: Absent']",[],[]
95,['Javascript Setinterval'],['Javascript can be made to execute a block of code at specific intervals of time. These intervals are critically defined as time events. There are usually two methods for the same. They can be specifically used according to your requirements. Those two methods are:'],"['https://www.javatpoint.com/javascript-debouncing', 'https://www.javatpoint.com/check-if-the-value-exists-in-array-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-setinterval-method', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-debouncing', 'https://www.javatpoint.com/check-if-the-value-exists-in-array-in-javascript', 'https://www.javatpoint.com/javascript-debouncing']",[],[],[],"['Syntax', 'Example Code:', 'Features']",[],"[""Here, we will discuss the setInterval() method in javascript. So, let's get started."", 'If we want to execute the function only once after the specified number of milliseconds, we would be using setTimeout() which defines the same.', '1000 ms = 1 second', 'The setInterval() method in javascript executes a block of code in terms of defined repeated intervals.', 'function: contains the block of executable code', 'milliseconds: the defined time interval of your function execution.', 'There are also some different approaches for customizing your function. Consider the below example for instance.', 'Consider the below code:']","['In the above code, the setInterval function is set at 2000 milliseconds i.e. for 2 seconds. Thus, it will call the Display() function after every 2 seconds and the output is displayed continuously after every 2 seconds, as shown below.', 'The setInterval() method will be repeatedly executed until and unless it is stopped by using the clearInterval() method. To illustrate this, consider the below example code for instance.']","['The main function of the setInterval() method is to call a function that helps in the evaluation of an expression at specific intervals, mostly in milliseconds. The setInterval() function continues to call the function until and unless the window is closed using the clearInterval() function. Later, the returned value by the method setInterval() is taken into account as parameters for the clearInterval() method.', 'In the above code, we have defined two functions. The first function takes the second function as a parameter and executes the block inside it every 3 seconds. We have also defined a variable myVar which acts as a temporary variable for storing the interval. The output of the above code is shown as an alert in the browser dropdown with the message "" Hi ! "".', 'In the above code, we have defined variable logic whose interval is set after every 2 seconds. In the given functions, we have defined two more variables x and y, which would store data and time in the form of integer and string. Whenever you call the function Time, it will display the current time every 2 seconds, and the clearInterval() method will erase the time after every interval whenever the time is displayed. This will lead to a variation in time in terms of seconds and hence there would not be any manual task to remove the previous displayed time. The output will look something like this.', 'In both examples shown above, we have discussed the basic interval methods that can be made. The setInterval() methods can be customized using HTML and CSS. We can rather change the display in terms of colors or define them dynamically using web pages in HTML.', 'In the above code snippet, we have defined a variable display(), which would display colors after the interval of 500 milliseconds. The other function setColor() will set the color of the body to respective colors provided after every interval. The next function ColorStop() is used to stop the interval after every interval. Whenever the function display() is called, the other function starts execution in the intervals defined as 500 and after each interval, the color is changed automatically. It is quite easy to understand that the color will change the background from red, green, or yellow.']","['setInterval(function, milliseconds);', 'function Display()', 'console.log(""Hello JavaTpoint"");', 'setInterval(Display, 2000);', 'Hello JavaTpoint', 'Hello JavaTpoint', 'Hello JavaTpoint', 'var myVar;', 'function Example()', 'myVar = setInterval(shock, 3000);', 'function shock()', 'alert("" Hi ! "");', 'var logic = setInterval(Time, 2000);', 'function Time() {', 'var x = new Date();', 'var y = x.toLocaleTimeString();', 'function FunctionStop() {', 'clearInterval(logic);', '1:47:41 AM', '1:47:43 AM', '1:47:45 AM', '1:47:47 AM', '1:47:49 AM', 'var display = setInterval(() => {', 'Color()', '}, 500);', 'function setColor() {', 'var a = document.body;', 'a.style.backgroundColor = a.style.backgroundColor == ""yello"" ? ""red"" : ""green"";', 'function ColorStop() {', 'clearInterval(display);']",[],[],"['|||setInterval()|||setTimeout()||||||The setInterval() method executes the methods multiple times in milliseconds thereby keeping a rhythm(i.e. 1 second= 1000 ms).|||The setInterval() method will continuously keep calling the defined function until and unless it is manually defined by another function clearInterval() to close the window.|||The method setInterval() returns an ID used by the method clearinterval() to stop the execution of regular intervals.|||If we desire to execute a function only once, we can probably use the method setTimeout(). It will run the function only once.|||If you only need to execute a function one time, use the setTimeout() method.|||']"
96,['JavaScript Debouncing'],"['In this article, we will discuss the JavaScript debouncing () method and its implementation.']","['https://www.javatpoint.com/javascript-vs-nodejs', 'https://www.javatpoint.com/javascript-setinterval', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-vs-nodejs', 'https://www.javatpoint.com/javascript-setinterval', 'https://www.javatpoint.com/javascript-vs-nodejs']","['https://static.javatpoint.com/javascriptpages/images/javascript-debouncing.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-debouncing2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-debouncing3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-debouncing4.png']",[],"['What is Debouncing?', 'Implementation of debouncing', 'Implementation of debounce function with immediate function', 'Application Uses']","['Example:', 'Example:']",[],"[""Let's take an example to see the implementation of debounce method in the program."", 'Output: After executing the above code, we will get the output as shown below:', ""Debounce returns a function that may be passed on to the function's event listeners when a function and a time interval are passed."", ""Let's take an example to understand the use of debounce function with the immediate function."", 'Output: After executing the above code, we will get the output shown below in the screenshot.']","['As we have seen in the above screenshot, there is a ""Debounce"" button. When we click on the ""Debounce"" button, it shows an alert message. If we click on the ""Ok"" button, the alert message will disappear.']","[""Debouncing is a method used in JavaScript to increase browser performance. There may be some features on a web page that needs time-consuming computations. If such type of method is applied frequently, it may greatly affect the browser's performance because Javascript is a single-threaded language. Debouncing is a programming technique that assures that time-consuming activities do not trigger the web page's performance decreases. In other words, the Debounce methods do not run when invoked. Instead, they wait a predetermined period of time until executing. When we call the same process again, the previous process is canceled, and the timer is reset."", ""A debounce is a throttle cousin, and they both help improve the web application's performance. Although, they are seen in different situations. When we just think about the final state, a debounce is used. For example, they are waiting until a user has finished typing to retrieve typeahead search results. If we want to manage all intermediate states at a regulated pace, a throttle is the best tool to use."", 'A higher-order function that returns another function is known as a debounce function. It is used to create a closure around the func and wait function parameters and the timeout variable to hold their values. The definitions of the following variables are:', ""Let's take an example to understand the debouncing() method in JavaScript. A button is connected to an event listener, which calls a debounce function in the below example. The Debounce function has two parameters: a function and the other is a number (time). A Timer declares, which as the name implies, and calls the debounce function after a certain amount of time."", 'As we have seen in the above screenshot, there is a ""Click here"" button. When the Click Here button is pressed, a warning box appears and displays an alert message. The feature updates every time, which means that if the button is pressed before the delay time (4 seconds), the initial timer is cleared, and a new timer is started. The clearTimeOut() function is used to complete this mission.', 'The following debounce implementation returns a function that will not be called as long as it is invoked. After N milliseconds of inactivity, the function will be called again. When the function is called with the initial function as an argument, it called the function immediately and waits for the interval before calling it again.', 'Debouncing can be used to implement suggestive text, where we wait a few seconds for the user to stop typing before proposing the text. As a result, we wait a few seconds after each keystroke before making suggestions. Debouncing is often used on content-loading websites like Facebook and Twitter, where the user continues scrolling. Because there are so many videos and photos, it will have a performance effect if the scroll event is fired too often. As a result, debouncing must be used in the scroll case.']","['const debounce = (func, wait) => {', 'let timeout;', 'return function mainFunction(...args) {', 'const later = () => {', 'clearTimeout(timeout);', 'func(...args);', 'clearTimeout(timeout);', 'timeout = setTimeout(delay, wait);', '<!DOCTYPE html>', '<html>', '<h1>JavaScript Debounce</h1>', '<input type = ""button"" id=""debounce"" value = ""Click Here"">', '<script>', 'var button = document.getElementById(""debounce"");', 'const debounce = (func, wait) => {', 'let debounceTimer', 'return function() {', 'const context = this', 'const args = arguments', 'clearTimeout(debounceTimer)', 'debounceTimer', '= setTimeout(() => func.apply(context, args), wait)', ""button.addEventListener('click', debounce(function() {"", 'alert(""Hello\\n This message will be displayed after 3 seconds, and no matters how many times we click the button."")', '}, 4000));', '</script>', '</body>', '</html>', 'function debounce(func, wait, immediate) {', 'var timeout;', 'return function mainFunction() {', 'var cont = this;', 'var args = arguments;', 'var later = function() {', 'timeout = null;', 'if (!immediate) func.apply(cont, args);', 'var callNow = immediate && !timeout;', 'clearTimeout(timeout);', 'timeout = setTimeout(delay, wait);', 'if (callNow) func.apply(cont, args);', 'var returnedFunction = debounce(function() {', '}, 3000);', ""window.addEventListener('resize', returnedFunction);"", '<!DOCTYPE html>', '<h1>JavaScript Debounce</h1>', '<button id=""debounce"">', 'Click here', '</button>', '<script>', 'var button = document.getElementById(""debounce"");', 'const debounce = (func, wait, immediate)=> {', 'var timeout;', 'return function executedFunction() {', 'var cont = this;', 'var args = arguments;', 'var later = function() {', 'timeout = null;', 'if (!immediate) func.apply(cont, args);', '};', 'var callNow = immediate && !timeout;', 'clearTimeout(timeout);', 'timeout = setTimeout(later, wait);', 'if (callNow) func.apply(cont, args);', '};', ""button.addEventListener('click', debounce(function() {"", 'alert(""This message will be displayed after 3 seconds, and no matters how many times we click the button."")', '}, 3000));', '</script>', '</body>', '</html>']",[],[],['|||Func: It is the func function that we want to execute after the debounce time.|||Wait: The time after the last received action that the debounce function can wait until executing func.|||Timeout: The timeout function is the value that is used to indicate a running debounce.|||']
97,['JavaScript print() method'],"['In this section, we will discuss the print() method in the JavaScript language. A print() method is used to print the currently visible contents like a web page, text, image, etc., on the computer screen. When we use a print() method in JavaScript and execute the code, it opens a print dialog box that allows the user or programmer to select an appropriate option for printing the current content of the window.']","['https://www.javatpoint.com/javascript-create-element', 'https://www.javatpoint.com/javascript-design-patterns', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-create-element', 'https://www.javatpoint.com/javascript-design-patterns', 'https://www.javatpoint.com/javascript-create-element']","['https://static.javatpoint.com/javascriptpages/images/javascript-print-method.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-print-method2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-print-method3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-print-method4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-print-method5.png']",[],[],"['Syntax', 'Supported Browser of the print() method', 'Example 1: Program to print a web page using print() method', 'Example 2: Program to print the Student Registration Form using the print() method', 'Conclusion:']",[],"['The following syntax is used to print the current content of the window:', 'In the above syntax, we use the window.print() method that prints the currently visible content of the window screen.', 'Parameters: It does not contain any parameters.', 'Returns: The window.print() method does not return anything.', 'Following are the browsers that support the window.print() method.', 'In this program, we are using a window.print() method that prints the current visible content in the window screen.', 'print.html', 'When we execute the above programming code on any browser, it displays the below image:', 'In this program, we create a student registration form and then print it using window,print() method.', 'Student.html', 'When we execute the above programming code on any browser, it displays the below image:', 'Now we fill in all the details of the student registration form and click on the Print button, which shows the below image.']","['In the above image, there is a Print button. Now we click on the Print button, it opens a print dialog box with the current visual content of the window screen, as shown below.', 'After click on the Print button, it shows the different operations of the window.print method. Once we are done with all settings in the Print dialog box, click on the Save button to save the file or page in your system.']","['Explanation of the code: In the above program, we have created a student registration form, and this form has two buttons Reset and Print button. The Reset button is used to reset the content, and the Print button is used to print the displayed content. When we click on the Print button, an onclick function will activate and call the PrintFun() function. Now PrintFun() function is executed that contains window.print() method to print the displayed content on the window screen.', ""We have learned about the print() method in JavaScript that prints the window screen's content. Where the contents of the window screen may be text, image, advertisement, etc. Furthermore, when a print() method is called in JavaScript, it opens the print dialog box. So that, user or programmer can select the appropriate option for printing displayed content on the window screen.""]","['window.print()', '<title>', 'Use print() method in JavaScript', '</title>', '<script type = ""text/ javascript"">', '</script>', '</head>', '<h2> Program to print the Current Content of the window using print() method </h2>', '<br> <br>', 'As the name suggests, the print () method is used to print the contents of the current window. When we use a print () method, it opens the print dialog box, which allows the user or programmer to select an appropriate option for printing the current content of the window. </p>', '<!-- When a user click on the print button, the onclick function calls the window.print() method to print the currently visible content in the window screen. -->', '<input type = ""button"" value = ""Print"" onclick = ""window.print()"" />', '</form>', '</body>', '</html>', '<!-- Create a web page to print the Student registration Form in JavaScript using print() method. -->', '<title>', 'Print Student Registration Form', '</title>', '<script type = ""text/javascript"">', 'function printFun()', 'window.print();', '</script>', '<!-- Start the coding for CSS -->', '<style>', '/* Create the Outer layout of the Calculator. */', '.formstyle', 'width: 400px;', 'height: 400px;', 'margin: 20px auto;', 'border: 3px solid skyblue;', 'border-radius: 5px;', 'padding: 20px;', 'text-align: center;', 'background-color: lightgreen;', '/* Display top horizontal bar that contain some information. */', 'text-align: center;', 'padding: 23px;', 'background-color: skyblue;', 'color: white;', 'margin: 0;', 'padding: 0;', '</style>', '</head>', '<body bgcolor = ""lightgrey"">', '<h1> Program to print the Student Registration Form using JavaScript print() method </h1>', '<div class = ""formstyle""', '<form name = ""form1"">', '<fieldset>', '<legend> Student Registration Form: </legend>', '<label> First name </label>', '<input type = ""text"" name = ""fname"" size = ""30"" /> <br>', '<label> Last name </label>', '<input type = ""text"" name = ""lname"" size = ""30"" /> <br>', '<label> Father name </label>', '<input type = ""text"" name = ""f_name"" size = ""30"" /> <br>', '<label> Mother name </label>', '<input type = ""text"" name = ""m_name"" size = ""30"" /> <br>', '<label> Gender:', '</label>', '<input type = ""radio"" name = ""gender"" /> Male', '<input type = ""radio"" name = ""gender"" /> Female <br>', '<label>', 'Address', '</label>', '<textarea cols = ""30"" rows = ""3"" value = ""address"">', '</textarea>', '<label>', '</label>', '<input type = ""email"" id = ""email"" name = ""email"" size =""30"" /> </br>', '<label>', 'Password:', '</label>', '<input type = ""password"" id = ""pass"" name = ""pwd"" size = ""30""> <br>', '<input type = ""reset""  value = ""Reset""/>', '<input style = ""background-color:skyblue;"" width = 30px height = 20px type = ""button"" value = ""Print"" onclick = ""printFun()""/>', '<br> <br>', '</fieldset>', '</form>', '</body>', '</html>']",[],[],['|||Google Chrome|||Internet Explorer|||Firebox|||Opera|||Safari|||']
98,['JavaScript editable table'],"['In this article, we will understand how to create an editable table with the help of JavaScript. In the beginning, we will understand a basic overview of JavaScript programming. After that, we will understand this concept with the help of some examples.']","['https://www.javatpoint.com/javascript-auto-calculate-form', 'https://www.javatpoint.com/javascript-in-operator', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/javascript-auto-calculate-form', 'https://www.javatpoint.com/javascript-in-operator', 'https://www.javatpoint.com/javascript-auto-calculate-form']","['https://static.javatpoint.com/javascriptpages/images/javascript-editable-table.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-editable-table2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-editable-table3.png']",[],[],"['What is JavaScript?', 'What do you mean by JavaScript editable table?', 'Example 1:', 'Example 2:', 'Example 3:']",[],"[""Let's take various examples of JavaScript editable tables."", 'Explanation:', 'Following is the output of this example:', 'Explanation:', 'Following is the output of this example:', 'Explanation:', 'Following is the output of this example:']","['JavaScript abbreviated as JS. It is a dynamic programming language used for web development, web applications, game development, and many more. It allows you to implement dynamic features on web pages that cannot be done only with HTML and CSS.', 'It is high-level, often just-in-time compiled, and multi-paradigm. It has curly-bracket syntax {}, dynamic typing, prototype-based object orientation, and first-class functions.', 'After creating a table in JavaScript, you can insert and combine rows and columns or format the table by adjusting table cell widths, colors, and alignment. You can use the contenteditable attribute on the cells, rows, or table to edit a table.', 'In the above example, we have edited the table data with the help of JavaScript. To make table cells editable, click on the cell. The cell should become ""editable"" (textarea appears inside). We can change the content of the table.', 'In the above example, we have edited the table data with the help of JavaScript. To make table cells editable, click on the cell. The cell should become ""editable"" (textarea appears inside). We can change the content of the table.', 'In the above example, we have edited the table data with the help of JavaScript. To make table cells editable, click on the cell. The cell should become ""editable"" (textarea appears inside). We can change the content of the table.']",[],"['<! DOCTYPE html>', '<meta name=""viewport"" content=""width=device-width, initial-scale=1"">', '<meta charset=""UTF-8"">', '<title> JavaScript editable table </title>', '<link href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css"">', '<link href=""https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-alpha.6/css/bootstrap.min.css"">', '</head>', '<style>', ""@import url('https://fonts.googleapis.com/css?family=Montserrat:400,500');"", ""font-family: 'Montserrat', sans-serif;"", 'text-align: center;', 'background-color: rgb(63,72,83);', 'font-family: sans-serif;', 'color: rgb(220,220,220);', 'overflow-x: hidden;', 'tr:first-child { color: #FB667A; }', 'td:hover {', 'color: white;', 'font-weight: bold;', 'transition-delay: 0s;', 'transition-duration: 0.4s;', 'transition-property: all;', 'transition-timing-function: line;', 'position: relative;', 'padding: 0;', 'margin: 10;', 'font-family: ""Raleway"", sans-serif;', 'font-weight: 400;', 'font-size: 40px;', 'color: white;', '-webkit-transition: all 0.4s ease 0s;', '-o-transition: all 0.4s ease 0s;', 'transition: all 0.4s ease 0s;', '.table {', 'width: 100%;', 'thead {', 'th {', 'padding: 10px 10px;', 'background: #00adee;', 'font-size: 25px;', 'text-transform: uppercase;', 'vertical-align: top;', 'color: #1D4A5A;', 'font-weight: normal;', 'text-align: left;', 'tbody {', 'tr {', 'td {', 'padding: 10px;', 'background: #f2f2f2;', 'font-size: 14px;', '}', 'outline: none;', 'background: none;', 'border: none;', '.edit {', 'outline: none;', 'background: none;', 'border: none;', '.save {', 'outline: none;', 'background: none;', 'border: none;', '.delete {', 'outline: none;', 'background: none;', 'border: none;', '.edit {', 'padding: 5px 10px;', 'cursor: pointer;', '.save {', 'padding: 5px 10px;', 'cursor: pointer;', '.delete {', 'padding: 5px 10px;', 'cursor: pointer;', 'float: right;', 'background: transparent;', 'border: 1px solid  black;', 'color: black;', 'font-size: 13px;', 'padding: 0;', 'padding: 3px 5px;', 'cursor: pointer;', '&:hover {', 'background: #ffffff;', 'color: #00adee;', '.save {', 'display: none;', 'background: #32AD60;', 'color: #ffffff;', '&:hover {', 'background: darken(#32AD60, 10%);', '.edit {', 'background: #2199e8;', 'color: #ffffff;', '&:hover {', 'background: darken(#2199e8, 10%);', '.delete {', 'background: #EC5840;', 'color: #ffffff;', '&:hover {', 'background: darken(#EC5840, 10%);', '</style>', '<table class=""table data"">', '<h1> Example </h1>', '<thead>', '<tr>', '<th> Name </th>', '<th> Email </th>', '<th> Number </th>', '</tr>', '</thead>', '<tbody>', '<tr>', '<td class=""data""> John Doe </td>', '<td class=""data""> johndoe@john.com </td>', '<td class=""data""> 666-666-666 </td>', '<td>', '<button class=""save""> Save </button>', '<button class=""edit""> Edit </button>', '<button class=""delete""> Delete </button>', '</td>', '</tr>', '<tr>', '<td class=""data""> John Doe </td>', '<td class=""data""> johndoe@john.com </td>', '<td class=""data""> 666-666-666 </td>', '<td>', '<button class=""save""> Save </button>', '<button class=""edit""> Edit </button>', '<button class=""delete""> Delete </button>', '</td>', '</tr>', '</tbody>', '<tbody>', '<tr>', '<td class=""data""> John Doe </td>', '<td class=""data""> johndoe@john.com </td>', '<td class=""data""> 666-666-666 </td>', '<td>', '<button class=""save""> Save </button>', '<button class=""edit""> Edit </button>', '<button class=""delete""> Delete </button>', '</td>', '</tr>', '<tr>', '<td class=""data""> John Doe </td>', '<td class=""data""> johndoe@john.com </td>', '<td class=""data""> 666-666-666 </td>', '<td>', '<button class=""save""> Save </button>', '<button class=""edit""> Edit </button>', '<button class=""delete""> Delete </button>', '</td>', '</tr>', '</tbody>', '</table>', '<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""> </script>', '<script>', ""$(document).on('click', '.edit', function() {"", ""$(this).parent().siblings('td.data').each(function() {"", 'var content = $(this).html();', '$(this).html(\'<input value=""\' + content + \'"" />\');', ""$(this).siblings('.save').show();"", ""$(this).siblings('.delete').hide();"", '$(this).hide();', ""$(document).on('click', '.save', function() {"", ""$('input').each(function() {"", 'var content = $(this).val();', '$(this).html(content);', '$(this).contents().unwrap();', ""$(this).siblings('.edit').show();"", ""$(this).siblings('.delete').show();"", '$(this).hide();', ""$(document).on('click', '.delete', function() {"", ""$(this).parents('tr').remove();"", ""$('.add').click(function() {"", '$(this).parents(\'table\').append(\'<tr><td class=""data""></td><td class=""data""></td><td class=""data""></td><td><button class=""save"">Save</button><button class=""edit"">Edit</button> <button class=""delete"">Delete</button></td></tr>\');', '</script>', '</body>', '</html>', '<! DOCTYPE html>', '<meta name=""viewport"" content=""width=device-width, initial-scale=1"">', '<meta charset=""UTF-8"">', '<title> JavaScript editable table </title>', '<link href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css"">', '<link href=""https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-alpha.6/css/bootstrap.min.css"">', '</head>', '<style>', ""@import url('https://fonts.googleapis.com/css?family=Montserrat:400,500');"", ""font-family: 'Montserrat', sans-serif;"", 'padding: 0;', 'margin: 0;', 'text-align: center;', 'position: relative;', 'padding: 0;', 'margin: 10;', 'font-family: ""Raleway"", sans-serif;', 'font-weight: 300;', 'font-size: 40px;', 'color: #080808;', '-webkit-transition: all 0.4s ease 0s;', '-o-transition: all 0.4s ease 0s;', 'transition: all 0.4s ease 0s;', 'font-size: 0.75em;', 'table {', 'border-spacing: 10px;', 'tr > th {', 'text-align: right;', '.table-fill {', 'background: white;', 'border-radius:3px;', 'border-collapse: collapse;', 'height: 320px;', 'margin: auto;', 'max-width: 600px;', 'padding:5px;', 'width: 100%;', 'box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);', 'animation: float 5s infinite;', 'color: #D5DDE5;;', 'background: #1b1e24;', 'border-bottom: 4px solid #9ea7af;', 'border-right: 1px solid #343a45;', 'font-size: 23px;', 'font-weight: 100;', 'padding: 24px;', 'text-align: left;', 'text-shadow: 0 1px 1px rgba(0, 0, 0, 0.1);', 'vertical-align: middle;', 'th:first-child {', 'border-top-left-radius: 3px;', 'th:last-child {', 'border-top-right-radius: 3px;', 'border-right: none;', 'border-top: 1px solid #C1C3D1;', 'border-bottom-: 1px solid #C1C3D1;', 'color: #666B85;', 'font-size: 16px;', 'font-weight: normal;', 'text-shadow: 0 1px 1px rgba(256, 256, 256, 0.1);', 'tr:hover td {', 'background: #4E5066;', 'color: #FFFFFF;', 'border-top: 1px solid #22262e;', 'tr:first-child {', 'border-top: none;', 'tr:last-child {', 'border-bottom: none;', 'tr:nth-child(odd) td {', 'background: #EBEBEB;', 'tr:nth-child(odd):hover td {', 'background: #4E5066;', 'tr:last-child td:first-child {', 'border-bottom-left-radius: 3px;', 'tr:last-child td:last-child {', 'border-bottom-right-radius: 3px;', 'td:last-child {', 'border-right: 0px;', 'background: #FFFFFF;', 'padding: 20px;', 'text-align: left;', 'vertical-align: middle;', 'font-weight: 300;', 'font-size: 18px;', 'text-shadow: -1px -1px 1px rgba(0, 0, 0, 0.1);', 'border-right: 1px solid #C1C3D1;', '</style>', '<h1> Example </h1>', '<table summary=""Editable table with datasets ordered in columns"" class=""table-fill"">', '<tbody>', '<tr>', '<th scope=""col""> Month </th>', '<th scope=""col""> Sales </th>', '</tr>', '<tr>', '<th scope=""row""> January </th>', '<td> 16000 </td>', '</tr>', '<tr>', '<th scope=""row""> February </th>', '<td> 10000</td>', '</tr>', '<tr>', '<th scope=""row""> March </th>', '<td> 20000 </td>', '</tr>', '<tr>', '<th scope=""row""> April </th>', '<td> 7300 </td>', '</tr>', '<tr>', '<th scope=""row""> May </th>', '<td> 12000 </td>', '</tr>', '<tr>', '<th scope=""row""> June </th>', '<td> 1099 </td>', '</tr>', '</tbody>', '</table>', '<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""> </script>', '<script>', ""var table = document.querySelector('table');"", ""var dataCells = table.querySelectorAll('tr > td');"", ""var rows = table.querySelectorAll('tr');"", ""var code = document.querySelector('code');"", ""var resetButton = document.querySelector('.reset');"", 'rows = Array.prototype.slice.call(rows, 1);', 'var ncols = rows[0].children.length - 1;', 'var initialData = {0:[1,2,3,4,5],1:[6,7,8,9,10],2:[11,12,13,14,15]};', 'function parseTable () {', 'var d = {};', 'Array.prototype.forEach.call(rows, function (row, i) {', ""var rowCells = row.querySelectorAll('td');"", 'return Array.prototype.map.call(rowCells, function (cell, j) {', 'if (!d[j]) d[j] = [];', 'd[j].push(parseInt(cell.textContent, 10));', '});', 'return d;', 'function setTableData (data) {', 'Array.prototype.forEach.call(rows, function (row, i) {', ""var rowCells = row.querySelectorAll('td');"", 'return Array.prototype.map.call(rowCells, function (cell, j) {', 'cell.textContent = initialData[j][i];', '});', 'Array.prototype.forEach.call(dataCells, function (cell) {', 'cell.contentEditable = true;', ""table.addEventListener('keyup', function (e) {"", ""if (e.target.tagName === 'TD') {"", 'setTimeout(function () {', 'code.innerText = JSON.stringify( parseTable() );', '}, 0);', '</script>', '</body>', '</html>', '<! DOCTYPE html>', '<meta name=""viewport"" content=""width=device-width, initial-scale=1"">', '<meta charset=""UTF-8"">', '<title> JavaScript editable table </title>', '<link href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.css"">', '<link href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"">', '</head>', '<style>', ""@import url('https://fonts.googleapis.com/css?family=Montserrat:400,500');"", ""font-family: 'Montserrat', sans-serif;"", 'padding: 0;', 'margin: 0;', 'text-align: center;', 'position: relative;', 'padding: 0;', 'margin: 10;', 'font-family: ""Raleway"", sans-serif;', 'font-weight: 300;', 'font-size: 40px;', 'color: #080808;', '-webkit-transition: all 0.4s ease 0s;', '-o-transition: all 0.4s ease 0s;', 'transition: all 0.4s ease 0s;', 'tr:nth-of-type(odd) {', 'background: #eee;', 'background: #3498db;', 'color: white;', 'font-weight: bold;', '@import ""compass/css3"";', '.table-editable {', 'position: relative;', '.glyphicon {', 'font-size: 20px;', 'table {', 'width: 750px;', 'border-collapse: collapse;', 'margin:50px auto;', 'td, th {', 'padding: 10px;', 'border: 1px solid #ccc;', 'text-align: left;', 'font-size: 18px;', '.table-remove {', 'color: #700;', 'cursor: pointer;', '&:hover {', 'color: #f00;', '.table-up {', 'color: #007;', 'cursor: pointer;', '&:hover {', 'color: #00f;', '.table-down {', 'color: #007;', 'cursor: pointer;', '&:hover {', 'color: #00f;', '.table-add {', 'color: #070;', 'cursor: pointer;', 'position: absolute;', 'top: 8px;', 'right: 0;', '&:hover {', 'color: #0b0;', '</style>', '<div class=""container"">', '<h1> JavaScript Editable Table </h1>', '<div id=""table"" class=""table-editable"">', '<table class=""table"">', '<tr>', '<th> Name</th>', '<th> Roll No </th>', '<th> Class </th>', '<th> Marks </th>', '</tr>', '<tr>', '<td contenteditable=""true""> Ram </td>', '<td contenteditable=""true""> 1 </td>', '<td contenteditable=""true""> BA </td>', '<td contenteditable=""true""> 48 </td>', '</tr>', '<td contenteditable=""true""> Rama </td>', '<td contenteditable=""true""> 10 </td>', '<td contenteditable=""true""> BSC </td>', '<td contenteditable=""true""> 40 </td>', '</tr>', '<tr>', '<td contenteditable=""true""> sham </td>', '<td contenteditable=""true""> 8 </td>', '<td contenteditable=""true""> BCA </td>', '<td contenteditable=""true""> 34 </td>', '</tr>', '<td contenteditable=""true""> shama </td>', '<td contenteditable=""true""> 3 </td>', '<td contenteditable=""true""> BCA </td>', '<td contenteditable=""true""> 30 </td>', '</tr>', '</table>', '</div>', '<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""> </script>', '<script>', ""var $TABLE = $('#table');"", ""var $BTN = $('#export-btn');"", ""var $EXPORT = $('#export');"", ""$('.table-add').click(function () {"", ""var $clone = $TABLE.find('tr.hide').clone(true).removeClass('hide table-line');"", ""$TABLE.find('table').append($clone);"", ""$('.table-remove').click(function () {"", ""$(this).parents('tr').detach();"", ""$('.table-up').click(function () {"", ""var $row = $(this).parents('tr');"", 'if ($row.index() === 1) return;', '$row.prev().before($row.get(0));', ""$('.table-down').click(function () {"", ""var $row = $(this).parents('tr');"", '$row.next().after($row.get(0));', 'jQuery.fn.pop = [].pop;', 'jQuery.fn.shift = [].shift;', '$BTN.click(function () {', ""var $rows = $TABLE.find('tr:not(:hidden)');"", 'var headers = [];', 'var data = [];', ""$($rows.shift()).find('th:not(:empty)').each(function () {"", 'headers.push($(this).text().toLowerCase());', '$rows.each(function () {', ""var $td = $(this).find('td');"", 'var h = {};', 'headers.forEach(function (header, i) {', 'h[header] = $td.eq(i).text();', '});', 'data.push(h);', '});', '</script>', '</body>', '</html>']",[],[],[]
99,['CanvasJS'],"[""We often come across charts on analytics-based sites or some websites that contain surveys on some common agendas like population, percentage, and whatnot. These charts are often used in the Data Interpretation field to create network shares or profit distribution in core sectors. However, if we collectively observe, these charts or bar distributions are renderable. They can change when values plotted on the graph are changed. To ease constructing these renderable charts, JavaScript has tremendous support from libraries. One such library specifically for charts is CanvasJS. Let's learn about it from scratch.""]","['https://www.javatpoint.com/javascript-format-numbers-with-commas', 'https://www.javatpoint.com/javascript-auto-calculate-form', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html5-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/javascript-format-numbers-with-commas', 'https://www.javatpoint.com/javascript-auto-calculate-form', 'https://www.javatpoint.com/javascript-format-numbers-with-commas']","['https://static.javatpoint.com/javascriptpages/images/canvasjs.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs2.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs3.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs4.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs5.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs6.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs7.png']",[],"['What is CanvasJS?', 'Download', 'Concept of working with Data in Chart', 'What is dataPoint?', 'Adding dataPoints', 'Conclusion']","['Plotting x values', 'dataPoint Labelling', 'Index labeling in dataPoints', 'Finishing all at once']","['Note: The dist folder by default contains a minified version located at dist/canvasjs.js.min.js, and it is a production-based version wrapped up for using it with jQuery.', 'Note: The graph is easily renderable. Hence it is recommended to run it on an HTML compiler to get the feel.']","['Users can download CanvasJS with a simple npm command given below.', 'CanvasJS package, by default, works on CommonJS that can be easily put on to use with property/webpack, as shown below.', 'The above-shown dependencies are local. For importing global dependencies, use the below code.', ""Let's look at the format of the dataSeries object in the data array. The sample code snippet is given below for reference."", 'In the above snippet, dataPoint has been positioned on the x-axis by setting the values in numeric value or a dateTime value.', 'Index labels are generally positioned below or above the dataPoint.', 'Steps to run the example in our local machine are given below:']","['After this step, we need to import it first. It can be done in multiple ways depending on the type of module and the application pattern being considered.', 'Labels are defined as the values that are displayed on the x-axis of the chart. If there is no x value provided, the default value is taken for the label, and it can be easily customized.', ""Since we are now much familiar with using CanvasJS, let's take some more time to create some sophisticated charts that are industrial level. To do that, we have prepared a sample example in case of users miss out on how to apply the above concepts."", 'In this example, we will make a Stock Chart from scratch and customize it using live examples. With every step of rendering, if we use the source code to run it on a compiler, we might understand it better.']","['As depicted in the official world of libraries in JavaScript, CanvasJS is the popular charting library. It is easy to use JavaScript and HTML5 based library that can be built on the Canvas element. It has a wide range of device influences, including Android, iPhone & iPad, Windows Phone, Microsoft Surface, Desktops, etc.', 'CanvasJS is a hardcore chart creator library that enables users to create rich UI dashboards and charts that can work on all devices without compromising functionality or maintenance for our web application. It already comes with dynamic and awesome themes, and it is 10x faster than the conventional SVG Charts and Flash. Users can easily create responsive, dynamic, renderable, lightweight, and rich UI dashboards using CanvasJS.', 'To work with data in the chart in CanvasJS, we need to add data. All the data that we want to be plotted should be added to an array called ""data"". It is the confined property of Chart Options. Every element of the array is treated as an object and is called data series, which is nothing but the logical grouping of data elements. Individual data elements or points are always called dataPoint. To understand how data work in CanvasJS, we will be using dataPoint and dataSeries everywhere in this tutorial for illustration.', 'All the values that have to be plotted on a chart subjected to the required design are called dataPoint. We can easily add each dataPoint to the array, which becomes the member of the dataSeries. The most commonly used dataPoints used are plotted on the x,y, and label axis. See the below example of how a dataPoint is plotted.', ""To understand how CanvasJS works, it is important to understand that dataPoint should consist of a y value. To plot a series, only y values are treated as dataPoints. If there is no x value provided, they are by default set to the absolute value of zero. Let's understand by an example."", 'In this tutorial, we came across and learned about CanvasJS and its applications. We also discovered how to render the custom components of JavaScript using CanvasJS, which can be treated as a utility tool or library in JavaScript specifically designed to work with charts. Although D3.js also offers a similar experience when taken into consideration, it is not preferred because of its robust nature and complexity. CanvasJS is lightweight, easy to handle, needs no further dependencies rather than having to import it into the main HTML file, and is super easy to learn. In the later sections, we also saw step-by-step inclusion of properties in the example and how dataPoints work along with the labels and axis. We also saw from the example above where we created a Stock Chart with not much effort.']","['$ npm install canvasjs', ""var CanvasJS = require('canvasjs');"", ""import CanvasJS from 'canvasjs';"", ""require('canvasjs/dist/canvasjs.js', function(CanvasJS){"", '<script src=""canvasjs/dist/canvasjs.js"">', 'var  chart =  new  CanvasJS.Chart(""container"",', 'data:[', '{// dataSeries 1', 'type: ""column"",', 'dataPoints:[ //array of dataPoint', '{x:1, y:5}, //dataPoint', '{x:2, y:6}, //dataPoint', '{x:3, y:7} //dataPoint', '{// dataSeries 2', 'type: ""line"",', 'dataPoints:[', '{x:1, y:8}, //dataPoint', '{x:2, y:9}, //dataPoint', '{x:3, y:4} //dataPoint', 'chart.render();', 'dataPoints : [', '{ x: 10, y: 15, label: ""apple""  }, //dataPoint', '{ x: 20, y: 8,  label: ""mango""  },', '{ x: 30, y: 10, label: ""orange"" },', '{ x: 40, y: 12, label: ""banana"" }', '<!DOCTYPE HTML>', '<head>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var chart = new CanvasJS.Chart(""chartContainer"",', 'title:{', 'text: ""Adding dataPoints""', '},', 'data: [', '{', 'type: ""column"",', 'dataPoints: [', '{ y: 71 },', '{ y: 55},', '{ y: 50 },', '{ y: 65 },', '{ y: 95 },', '{ y: 68 },', '{ y: 28 },', '{ y: 34 },', '{ y: 14}', ']', '}', ']', '});', 'chart.render();', '</script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.min.js""></script></head>', '<div id=""chartContainer"" style=""height: 300px; width: 100%;"">', '</div>', '</body>', '</html>', '<!DOCTYPE HTML>', '<head>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var chart = new CanvasJS.Chart(""chartContainer"",', 'title:{', 'text: ""Placing dataPoint on axisX""', '},', 'data: [', '{', 'type: ""column"",', 'dataPoints: [', '{ x: 10, y: 71 },', '{ x: 22, y: 55},', '{ x: 31, y: 50 },', '{ x: 44, y: 65 },', '{ x: 50, y: 95 },', '{ x: 64, y: 68 },', '{ x: 72, y: 28 },', '{ x: 84, y: 34 },', '{ x: 90, y: 14}', ']', '}', ']', '});', 'chart.render();', '</script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.min.js""></script></head>', '<div id=""chartContainer"" style=""height: 300px; width: 100%;"">', '</div>', '</body>', '</html>', '<!DOCTYPE HTML>', '<head>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var chart = new CanvasJS.Chart(""chartContainer"",', '{', 'title: {', 'text: ""Axis With Custom Labels""', '},', 'data: [', '{', 'type: ""column"",', 'dataPoints: [', '', '{ y: 71, label: ""cat 1"" },', '{ y: 55, label: ""cat 2"" },', '{ y: 50, label: ""cat 3"" },', '{ y: 65, label: ""cat 4"" },', '{ y: 95, label: ""cat 5"" },', '{ y: 68, label: ""cat 6"" },', '{ y: 28, label: ""cat 7"" },', '{ y: 34, label: ""cat 8"" },', '{ y: 14, label: ""cat 9"" }', ']', '}', ']', '});', 'chart.render();', '</script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.min.js""></script>', '</head>', '<div id=""chartContainer"" style=""height: 300px; width: 100%;"">', '</div>', '</body>', '</html>', '<!DOCTYPE HTML>', '<head>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var chart = new CanvasJS.Chart(""chartContainer"",', 'title:{', 'text: ""Index Labels on dataPoints""', '},', 'data: [', '{', 'type: ""column"",', 'dataPoints: [', '', '{ x: 10, y: 71},', '{ x: 20, y: 55},', '{ x: 30, y: 50 },', '{ x: 40, y: 65 },', '{ x: 50, y: 125, indexLabel: ""high"" },', '{ x: 60, y: 68 },', '{ x: 70, y: 28 },', '{ x: 80, y: 34 },', '{ x: 90, y: 14,  indexLabel: ""low"" }', ']', '}', ']', '});', 'chart.render();', '</script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.min.js""></script>', '</head>', '<div id=""chartContainer"" style=""height: 300px; width: 100%;"">', '</div>', '</body>', '</html>', '<!DOCTYPE HTML>', '<head>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var chart = new CanvasJS.Chart(""chartContainer"",', 'title:{', 'text: ""Golds won in 2012 London Olympics"",', 'fontWeight: ""bolder"",', 'fontColor: ""#008B8B"",', 'fontfamily: ""tahoma"",', 'fontSize: 25,', 'padding: 10', '},', 'data: [', '{', 'type: ""column"",', 'dataPoints: [', '{label: ""US"", y: 46 },', '{label: ""China"", y: 38},', '{label: ""Britain"", y: 29},', '{label: ""Russia"", y: 24 },', '{label: ""South Korea"", y: 13 },', '{label: ""Germany"", y: 11 },', '{label: ""france"", y: 11},', '{label: ""Hungary"", y: 8 },', '{label: ""Australia"", y: 7 },', '{label: ""Japan"", y: 7 }', ']', ']', '});', 'chart.render();', '</script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.min.js"">', '</script>', '</head>', '<div id=""chartContainer"" style=""height: 300px; width: 100%;"">', '</div>', '</body>', '</html>', '<!DOCTYPE HTML>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/jquery-1.11.1.min.js""></script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.stock.min.js""></script>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var dataPoints = [];', 'var stockChart = new CanvasJS.StockChart(""chartContainer"",{', 'title: {', 'text: ""StockChart Title""', '},', 'charts: [{', 'data: [{', 'type: ""line"", //Change it to ""spline"", ""area"", ""column""', 'dataPoints : dataPoints', '}]', '}],', 'navigator: {', 'slider: {', 'minimum: new Date(2018,04, 01),', 'maximum: new Date(2018,06, 01)', '}', '$.getJSON(""https://canvasjs.com/data/docs/btcusd2018.json"",', 'function(data) {', 'for(var i = 0; i < data.length; i++){', 'dataPoints.push({x: new Date(data[i].date), y:', 'Number(data[i].close)});', 'stockChart.render();', '</script>', '</head>', '<div id=""chartContainer"" style=""height: 400px; width: 100%;""></div>', '</body>', '</html>']",[],[],['|||Copy the code in the local HTML editor.|||Run the HTML file.|||We can see the Stock Chart running on our local system.|||Try to add more customized chart designs if needed.|||']
100,['JavaScript TypedArray'],"['The JavaScript TypedArray object illustrates an array like view of an underlying binary data buffer. There are many number of different global properties, whose values are TypedArray constructors for specific element types, listed below. ']","['https://www.javatpoint.com/javascript-set', 'https://www.javatpoint.com/javascript-string-includes', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-typedarray-copywithin-method', 'https://www.javatpoint.com/javascript-typedarray-entries-method', 'https://www.javatpoint.com/javascript-typedarray-every-method', 'https://www.javatpoint.com/javascript-typedarray-fill-method', 'https://www.javatpoint.com/javascript-typedarray-filter-method', 'https://www.javatpoint.com/javascript-typedarray-find-method', 'https://www.javatpoint.com/javascript-typedarray-findindex-method', 'https://www.javatpoint.com/javascript-typedarray-foreach-method', 'https://www.javatpoint.com/javascript-typedarray-includes-method', 'https://www.javatpoint.com/javascript-typedarray-indexof-method', 'https://www.javatpoint.com/javascript-typedarray-join-method', 'https://www.javatpoint.com/javascript-typedarray-keys-method', 'https://www.javatpoint.com/javascript-typedarray-lastindexof-method', 'https://www.javatpoint.com/javascript-typedarray-map-method', 'https://www.javatpoint.com/javascript-typedarray-reduce-method', 'https://www.javatpoint.com/javascript-typedarray-reduceright-method', 'https://www.javatpoint.com/javascript-typedarray-reverse-method', 'https://www.javatpoint.com/javascript-typedarray-set-method', 'https://www.javatpoint.com/javascript-typedarray-slice-method', 'https://www.javatpoint.com/javascript-typedarray-some-method', 'https://www.javatpoint.com/javascript-typedarray-sort-method', 'https://www.javatpoint.com/javascript-typedarray-subarray-method', 'https://www.javatpoint.com/javascript-typedarray-values-method', 'https://www.javatpoint.com/javascript-typedarray-tolocalestring-method', 'https://www.javatpoint.com/javascript-typedarray-tostring-method', 'https://www.javatpoint.com/javascript-set', 'https://www.javatpoint.com/javascript-string-includes', 'https://www.javatpoint.com/javascript-set']",[],[],"['Types of TypedArray', 'JavaScript TypedArray Methods']","['Int8Array', 'Unit8Array', 'Unit8ClampedArray', 'Int16Array', 'Unit16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array']",[],"[""Let's see the list of JavaScript TypedArray methods with their description.""]",[],[],[],[],"['Methods|||Description&&&copyWithin()|||The copyWithin () method copies a portion of an array to another location in the same array and returns the size without modification.&&&entries()|||The JavaScript entries() method returns a new Array Iterator object that contains key/value pairs for each index in the array.&&&every()|||javaScript Array.every() method test whether all the elements of the array satisfy the given condition or not.&&&fill()|||The javaScript fill() method is used to fill all the elements of array from a start index to an end index with a static value.&&&Filter()|||The JavaScript Array filter() method form a new array that fall under a given criteria from an existing array.&&&find()|||The JavaScript find() Method is used to get the value of the first element in the array that satisfies the provided condition.&&&findIndex()|||The JavaScript findIndex() method is provide the index of the element that complete the given test in the array.&&&forEach()|||The JavaScript forEach() method calls the provided function once for each element of the array.&&&includes()|||The JavaScript Array includes() method is inbuilt function in JavaScript which is used to determines whether a particular element is present in the array or not.&&&indexof()|||The JavaScript indexof() Method is used to find the index of the element provided as the argument to the function.&&&join()|||The JavaScript join() method is used to join all elements of an Array into a string.&&&Keys()|||The JavaScript Keys() method is an inbuilt function in JavaScript. This method returns an Array Iterator object with the keys of an array.&&&lastIndexof()|||The javaScript lastIndex()of method returns the last position of a value, or it return -1 if the value is not found.&&&map()|||The JavaScript map() method form a new array with the result of calling a function for every element. &&&reduce()|||The JavaScript reduce() method reduce the elements of an array into a single value. &&&reduceRight()|||The JavaScript reduceRight() method reduce the elements of an array into a single value. &&&reverse()|||The JavaScript reverse() method is used to reverse the array.&&&set()|||The JavaScript set() method is used to store values into the given array. &&&Slice()|||The JavaScript slice() method gives the selected elements of the array on which is implemented.&&&some()|||JavaScript some() method examine the elements of the array that satisfies the given condition or not.&&&sort()|||The JavaScript sort() method is used to sort the array and returns the updated array.&&&subarray()|||The JavaScript subarray() method returns a new array and it does not change the original array.&&&values()|||The JavaScript values() method is used to define the value of the contents in the array&&&toLocaleString()|||The JavaScript toLocaleString() method is used to convert the element of the given array into a string.&&&toString()|||The JavaScript toString() method is used to convert the element of the given array into a string. And these Strings are separated by such as a comma "","".']","[""|||Size in bytes: 1|||Description: 8-bit two's compliment signed integer.|||Type: byte.|||Value Range: -128 to 127||||||Size in bytes: 1|||Description: 8-bit two's compliment signed octet.|||Type: octet.|||Value Range: 0 to 255.||||||Size in bytes: 1|||Description: 8-bit unsigned integer (clamped) octet.|||Type: octet.|||Value Range: 0 to 255.||||||Size in bytes: 2|||Description: 16-bit two's complement signed integer.|||Type: short.|||Value Range: -32768 to 32767.||||||Size in bytes: 2|||Description: 16-bit unsigned integer.|||Type: unsigned short.|||Value Range: 0 to 65535.||||||Size in bytes: 4|||Description: 32-bit two's complement signed integer.|||Type: long.|||Value Range: -2147483648 to 2147483647.||||||Size in bytes: 4|||Description: 32-bit unsigned integer.|||Type: unsigned long.|||Value Range: 0 to 4294967295||||||Size in bytes: 4|||Description: 32-bit IEEE floating point number unrestricted float.|||Type: unrestricted float.|||Value Range: 1.2x10-38 to 3.4x1038||||||Size in bytes: 8|||Description: 64-bit IEEE floating point number unrestricted double.|||Type: unrestricted double.|||Value Range: 5.0x10-324 to 1.8x10308|||""]"
101,['JavaScript Set Object'],['The JavaScript Set object is used to store the elements with unique values. The values can be of any type i.e. whether primitive values or object references. '],"['https://www.javatpoint.com/javascript-map', 'https://www.javatpoint.com/javascript-typedarray', 'https://www.javatpoint.com/javascript-set-add-method', 'https://www.javatpoint.com/javascript-set-clear-method', 'https://www.javatpoint.com/javascript-set-delete-method', 'https://www.javatpoint.com/javascript-set-entries-method', 'https://www.javatpoint.com/javascript-set-foreach-method', 'https://www.javatpoint.com/javascript-set-has-method', 'https://www.javatpoint.com/javascript-set-values-method', 'https://www.javatpoint.com/javascript-map', 'https://www.javatpoint.com/javascript-typedarray', 'https://www.javatpoint.com/javascript-map']",[],[],"['Syntax', 'Parameter', 'Points to remember', 'JavaScript Set Methods']",[],[],"['iterable - It represents an iterable object whose elements will be added to the new Set.', ""Let's see the list of JavaScript set methods with their description.""]",[],[],['new Set([iterable])'],[],"['Methods|||Description&&&add()|||It adds the specified values to the Set object.&&&clear()|||It removes all the elements from the Set object.&&&delete()|||It deletes the specified element from the Set object.&&&entries()|||It returns an object of Set iterator that contains an array of [value, value] for each element.&&&forEach()|||It executes the specified function once for each value.&&&has()|||It indicates whether the Set object contains the specified value element.&&&values()|||It returns an object of Set iterator that contains the values for each element.']",['|||A set object uses the concept of keys internally.|||A set object cannot contain the duplicate values.|||A set object iterates its elements in insertion order.|||']
102,['JavaScript Map Object'],"['The JavaScript Map object is used to map keys to values. It stores each element as key-value pair. It operates the elements such as search, update and delete on the basis of specified key.']","['https://www.javatpoint.com/javascript-weakset', 'https://www.javatpoint.com/javascript-set', 'https://www.javatpoint.com/javascript-map-clear-method', 'https://www.javatpoint.com/javascript-map-delete-method', 'https://www.javatpoint.com/javascript-map-entries-method', 'https://www.javatpoint.com/javascript-map-foreach-method', 'https://www.javatpoint.com/javascript-map-get-method', 'https://www.javatpoint.com/javascript-map-has-method', 'https://www.javatpoint.com/javascript-map-keys-method', 'https://www.javatpoint.com/javascript-map-set-method', 'https://www.javatpoint.com/javascript-map-values-method', 'https://www.javatpoint.com/javascript-weakset', 'https://www.javatpoint.com/javascript-set', 'https://www.javatpoint.com/javascript-weakset']",[],[],['JavaScript Map Methods'],[],[],"['iterable - It represents an array and other iterable object whose elements are in the form of key-value pair. ', ""Let's see the list of JavaScript map methods with their description.""]",[],[],['new Map([iterable])'],[],['Methods|||Description|||||||||clear()|||It removes all the elements from a Map object.|||||||||delete()|||It deletes the specified element from a Map object.|||||||||entries()|||It returns an object of Map iterator that contains the key-value pair for each element.|||||||||forEach()|||It executes the specified function once for each key/value pair.|||||||||get()|||It returns the value of specified key.|||||||||has()|||It indicates whether the map object contains the specified key element.|||||||||keys()|||It returns an object of Map iterator that contains the keys for each element.|||||||||set()|||It adds or updates the key-value pairs to Map object.|||||||||values()|||It returns an object of Map iterator that contains the values for each element.|||&&&|||clear()|||It removes all the elements from a Map object.|||||||||delete()|||It deletes the specified element from a Map object.|||||||||entries()|||It returns an object of Map iterator that contains the key-value pair for each element.|||||||||forEach()|||It executes the specified function once for each key/value pair.|||||||||get()|||It returns the value of specified key.|||||||||has()|||It indicates whether the map object contains the specified key element.|||||||||keys()|||It returns an object of Map iterator that contains the keys for each element.|||||||||set()|||It adds or updates the key-value pairs to Map object.|||||||||values()|||It returns an object of Map iterator that contains the values for each element.|||&&&clear()|||It removes all the elements from a Map object.&&&delete()|||It deletes the specified element from a Map object.&&&entries()|||It returns an object of Map iterator that contains the key-value pair for each element.&&&forEach()|||It executes the specified function once for each key/value pair.&&&get()|||It returns the value of specified key.&&&has()|||It indicates whether the map object contains the specified key element.&&&keys()|||It returns an object of Map iterator that contains the keys for each element.&&&set()|||It adds or updates the key-value pairs to Map object.&&&values()|||It returns an object of Map iterator that contains the values for each element.'],['|||A map object cannot contain the duplicate keys.|||A map object can contain the duplicate values.|||The key and value can be of any type (allows both object and primitive values).|||A map object iterates its elements in insertion order.|||']
103,['JavaScript WeakSet Object'],"[""The JavaScript WeakSet object is the type of collection that allows us to store weakly held objects. Unlike Set, the WeakSet are the collections of objects only. It doesn't contain the arbitrary values.""]","['https://www.javatpoint.com/javascript-weakmap', 'https://www.javatpoint.com/javascript-map', 'https://www.javatpoint.com/javascript-weakset-add-method', 'https://www.javatpoint.com/javascript-weakset-delete-method', 'https://www.javatpoint.com/javascript-weakset-has-method', 'https://www.javatpoint.com/javascript-weakmap', 'https://www.javatpoint.com/javascript-map', 'https://www.javatpoint.com/javascript-weakmap']",[],[],['JavaScript WeakSet Methods'],[],[],"['iterable - It represents the iterable object whose elements will be added to a new WeakSet.', ""Let's see the list of JavaScript WeakSet methods with their description.""]",[],[],['new WeakSet([iterable])'],[],['Methods|||Description&&&add()|||It adds a new object to the end of WeakSet object. &&&delete()|||It removes the specified object from the WeakSet object.&&&has()|||It indicates whether the WeakSet object contains the specified object element.'],"[""|||A WeakSet object contains unique objects only.|||In WeakSet, if there is no reference to a stored object, they are targeted to garbage collection. |||In WeakSet, the objects are not enumerable. So, it doesn't provide any method to get the specified objects.|||""]"
104,['JavaScript WeakMap Object'],"['The JavaScript WeakMap object is a type of collection which is almost similar to Map. It stores each element as a key-value pair where keys are weakly referenced. Here, the keys are objects and the values are arbitrary values.']","['https://www.javatpoint.com/javascript-callback', 'https://www.javatpoint.com/javascript-weakset', 'https://www.javatpoint.com/javascript-weakmap-delete-method', 'https://www.javatpoint.com/javascript-weakmap-get-method', 'https://www.javatpoint.com/javascript-weakmap-has-method', 'https://www.javatpoint.com/javascript-weakmap-set-method', 'https://www.javatpoint.com/javascript-callback', 'https://www.javatpoint.com/javascript-weakset', 'https://www.javatpoint.com/javascript-callback']",[],[],['JavaScript WeakMap Methods'],[],[],['iterable - It represents an array and other iterable object whose elements are in the form of key-value pair.'],[],[],['new WeakMap([iterable])'],[],['Methods|||Description&&&delete()|||It deletes the specified element from the WeakMap object.&&&get()|||It returns the value of specified key.&&&has()|||It indicates whether the WeakMap object contains the specified value element.&&&set()|||It adds or updates the key-value pairs to WeakMap object.'],"[""|||A WeakMap object allows the keys of object type only.|||In WeakMap, if there is no reference to a key object, they are targeted to garbage collection. |||In WeakMap, the keys are not enumerable. So, it doesn't provide any method to get the list of keys.|||A WeakMap object iterates its elements in insertion order.|||""]"
105,['JavaScript callback'],"[""A callback function can be defined as a function passed into another function as a parameter. Don't relate the callback with the keyword, as the callback is just a name of an argument that is passed to a function.""]","['https://www.javatpoint.com/javascript-closures', 'https://www.javatpoint.com/javascript-weakmap', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-callback1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-callback2', 'https://www.javatpoint.com/javascript-closures', 'https://www.javatpoint.com/javascript-weakmap', 'https://www.javatpoint.com/javascript-closures']","['https://static.javatpoint.com/javascriptpages/images/javascript-callback.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-callback2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-callback3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-callback4.png']",[],[],"['Example1', 'Example2']",[],"[""Now, let's see how to create a callback by using some illustrations."", 'Now, in the next example, we will see a callback which gets immediately executed.', 'It is another example of using callbacks. It is an example of synchronous callback that gets immediately executed.', 'After the execution of above code, a prompt box will be displayed asking the name of the user -', 'After entering the name, when the user clicks OK, then another prompt box will be displayed asking the amount to be entered -', 'After entering the amount when the user clicks OK, then an alert box will be displayed. It shows the entered user name and amount.']","['It is an example of an asynchronous callback. Asynchronicity can be defined as if JavaScript has to wait to complete the operation and execute the rest of the program during waiting.', 'The getData() function display the multiplication of two numbers and once it gets completed the callback function will get executed. In the output, we can see the data of the showData() function gets printed after the output of getData() function.', 'Callbacks are generally used to continue the execution after completing an asynchronous operation - such are referred to as the asynchronous callbacks.', 'Here, there are two functions getData(callback), which takes the input from the user using the prompt box, and the function showData(name, amt), which displays the data entered by the user using the alert dialog box.']","['In other words, we can say that a function passed to another function as an argument is referred to as a callback function. The callback function runs after the completion of the outer function. It is useful to develop an asynchronous JavaScript code.', 'In JavaScript, a callback is easier to create. That is, we simply have to pass the callback function as a parameter to another function and call it right after the completion of the task. Callbacks are mainly used to handle the asynchronous operations such as the registering event listeners, fetching or inserting some data into/from the file, and many more.', 'In this example, there are two functions getData( x, y, callback) and showData(). Here, we are calling the getData() with the showData(); that is, we are passing it as the third argument of the getData() function along with two parameters. As a result, the getData() is invoked with the specified parameters, including the callback.']","['<style>', '</style>', '</head>', '<h1> Hello World :) :) </h1>', '<h3> The getData() function is called its arguments and the callback is executed after the completion of getData() function. </h3>', '<script>', 'function getData(x, y, callback){', 'document.write("" The multiplication of the numbers "" + x + "" and "" + y + "" is: "" + (x*y) + ""<br><br>"" );', 'callback();', 'function showData(){', ""document.write(' This is the showData() method execute after the completion of getData() method.');"", 'getData(20, 30, showData);', '</script>', '</body>', '</html>', '</head>', '<h1> Hello World :) :) </h1>', '<h2> This is the javaTpoint.com </h2>', '<script>', 'function showData(name, amt) {', ""alert(' Hello ' + name + '\\n Your entered amount is ' + amt);"", 'function getData(callback) {', 'var name = prompt("" Welcome to the javaTpoint.com \\n What is your name?"");', 'var amt = prompt("" Enter some amount..."");', 'callback(name, amt);', 'getData(showData);', '</script>', '</body>', '</html>']",[],[],[]
106,['JavaScript closures'],"['A closure can be defined as a JavaScript feature in which the inner function has access to the outer function variable. In JavaScript, every time a closure is created with the creation of a function.']","['https://www.javatpoint.com/javascript-date-difference', 'https://www.javatpoint.com/javascript-callback', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-date-difference', 'https://www.javatpoint.com/javascript-callback', 'https://www.javatpoint.com/javascript-date-difference']",[],[],[],"['Example1', 'Example2', 'Example3']",[],"['The closure has three scope chains listed as follows:', ""Let's understand the closure by using an example."", 'This is the closure in action in which the inner function can have access to the global variables and outer function variables.', ""In the output, the code will display the value of the variable 'a', defined in the parent function."", 'Now, there is another example in which we will use the parameterized function', 'Now, there is another example of closure within a loop.']","['The entire body of function innerfun() is returned and stored in the variable output, due to the statement return innerfun. The inner function is not executed only by using the return statement; it is executed only when followed by the braces ().', 'Closures are one of the slightly difficult to understand concept of JavaScript, but try to practice the closure in different scenarios like to create callbacks, getters/setter.']","[""In the above program we have two functions: fun() and innerfun(). The function fun() creates the local variable a and the function innerfun(). The inner function innerfun() is only present in the body of fun(). The inner function can access the outer function's variable, so the function innerfun() can access the variable 'a', which is declared and defined in fun()."", 'In the above program there are two parameterized functions: fun() and innerfun(). The function fun() has a parameter a, and the function innerfun() has the parameter b. The function fun() returns a function innerfun() which takes an argument and returns the multiplication of a and b. In the program, the output is the closure.', ""Closure points the variable and stores the reference of a variable. They don't remember the variable's value. In the above code, we are updating the function closure() argument with every call. So, we will get the different values of the variable i, at different index.""]","['<!DOCTYPE html>', '<script>', 'function fun()', ""var a = 4; // 'a' is the local variable, created by the fun()"", 'function innerfun() // the innerfun() is the inner function, or a closure', 'return a;', 'return innerfun;', 'var output = fun();', 'document.write(output());', 'document.write("" "");', 'document.write(output());', '</script>', '</head>', '</body>', '</html>', '<!DOCTYPE html>', '<script>', 'function fun(a)', 'function innerfun(b){', 'return a*b;', 'return innerfun;', 'var output = fun(4);', 'document.write(output(4));', 'document.write("" "");', 'document.write(output(5));', '</script>', '</head>', '</body>', '</html>', '<!DOCTYPE html>', '<script>', 'function fun()', 'function closure(val)', 'return function()', 'return val;', 'var a = [];', 'var i;', 'for (i = 0; i < 5; i++)', 'a[i] = closure(i);', 'return a;', 'var output = fun();', 'document.write(output[0]());', 'document.write("" "");', 'document.write(output[1]());', 'document.write("" "");', 'document.write(output[2]());', 'document.write("" "");', 'document.write(output[3]());', 'document.write("" "");', 'document.write(output[4]());', '</script>', '</head>', '</body>', '</html>']","['4 4', '16 20', '0 1 2 3 4']",[],['|||Access to its own scope.|||Access to the variables of the outer function.|||Access to the global variables.|||']
107,['JavaScript date difference'],"['In this article, we will see how to calculate the difference between two dates by using JavaScript. If we use the right methods, then the technique of calculating the difference is straightforward.']","['https://www.javatpoint.com/javascript-date-format', 'https://www.javatpoint.com/javascript-closures', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-date-difference1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-date-difference2', 'https://www.javatpoint.com/javascript-date-format', 'https://www.javatpoint.com/javascript-closures', 'https://www.javatpoint.com/javascript-date-format']","['https://static.javatpoint.com/javascriptpages/images/javascript-date-difference.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-date-difference2.png']",[],[],"['Example1', 'Example2']",[],"['Now we see some illustrations of calculating the difference between two dates in days, years or milliseconds.', 'In the first example, we will see how to calculate the difference between two dates in no. of days using JavaScript.']","['This is an example of getting the difference in no. of days between the specified two dates. In this example, we are applying an approach to calculate the difference.', 'Here the variable d1 stores the first date, and variable d2 stores the second date. The variable diff stores the difference between the time, and the variable daydiff stores the difference between the dates.', 'It is an example of calculating the difference between two dates in a number of years. This example calculates the number of years passed since ""10/02/1869"" to the present day.']","['The date object is required to calculate the difference between the dates in JavaScript. The JavaScript date object can be used to get a year, month and day. The difference between the dates can be calculated in no. of days, years, or also in the number of milliseconds.', 'Here, first, we are defining two dates by using the new date(), then we calculate the time difference between both specified dates by using the inbuilt getTime(). Then we calculate the number of days by dividing the difference of time of both dates by the no. of milliseconds in a day that are (1000*60*60*24).', 'Here the variable d1 stores the first date, and variable d2 stores the present date. The variable diff stores the difference between the time of both dates, and the variable daydiff stores the difference between the dates. Using this approach, we can also find the age of a person.']","['<html>', '</head>', '<body>', '<h1> Hello World :) :) </h1>', '<p> This is an example of getting the difference between two dates using JavaScript. </p>', '<script>', 'var d1 = new Date(""08/14/2020"");', 'var d2 = new Date(""09/14/2020"");', 'var diff = d2.getTime() - d1.getTime();', 'var daydiff = diff / (1000 * 60 * 60 * 24);', 'document.write("" Total number of days between <b> "" + d1 + "" </b> and <b> "" + d2 + "" </b> is: <b> "" + daydiff + "" days </b>"" );', '</script>', '</body>', '</html>', '<html>', '</head>', '<body>', '<h1> Hello World :) :) </h1>', '<p> This is an example of getting the difference between two dates using JavaScript. </p>', '<script>', 'var d1 = new Date(""10/02/1969"");', 'var d2 = new Date();', 'var diff = d2.getTime() - d1.getTime();', 'var daydiff = (diff / 31536000000).toFixed(0);', 'document.write("" Total numbers of years since <b> 2nd October 1969 </b> is: <b> "" + daydiff + "" years </b>"" );', '</script>', '</body>', '</html>']",[],[],[]
108,['JavaScript date format'],"['The JavaScript date object can be used to get a year, month and day. We can display a timer on the webpage with the help of a JavaScript date object.']","['https://www.javatpoint.com/javascript-date-parse-method', 'https://www.javatpoint.com/javascript-date-difference', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-date-format1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-date-format2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-date-format3', 'https://www.javatpoint.com/javascript-date-parse-method', 'https://www.javatpoint.com/javascript-date-difference', 'https://www.javatpoint.com/javascript-date-parse-method']","['https://static.javatpoint.com/javascriptpages/images/javascript-date-format.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-date-format2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-date-format3.png']",[],"['ISO date', 'JavaScript Short Date', 'JavaScript Long Date']","['Example', 'Example', 'Example']",[],"[""There are many types of date formats in JavaScript: ISO Date, Short Date, and Long Date. The formats of JavaScript's date are defined as follows:"", 'Short date', ""Now, let's understand these date formats individually."", 'The example of using the ISO date is given below.', 'The output of the below code will display the complete date, which is relative to the current time zone.', 'We can write the ISO dates using the following syntaxes.', '1. This is a complete date format using ISO date.', 'let val = new Date(""2020-08-01"");', '2. In this format, we specify only year and month (YYYY-MM) without day.', 'let val = new Date(""2020-08"");', '3. In the third syntax, we only specify the year (YYYY) without month and day.', 'let val = new Date(""2020"");', ""JavaScript uses the browser's time zone if we set the date without specifying the time zone."", 'let val = new Date(""2020-08-01T07:05:00Z"");', 'Now, we discuss the short date format along with an example.', 'The ""MM/DD/YYYY"" is the format used to write short dates. Now, we understand the short date by using an example.', 'Here, we are specifying the short date format, i.e., ""MM/DD/YYYY"".', 'After the execution of the above code, the output will be -', 'Now, we understand the Long date by using an example.', 'Here, we are using the Long date format, i.e., ""MMM DD YYYY"", and specifying the month in abbreviated form.']","[""The ISO date format follows a strict JavaScript's standard, while the other formats (Short date and Long date) are browser dependent and not so well defined."", 'The ISO 8601 is the international standard for the times and dates, and the syntax (YYYY-MM-DD) of this standard is the preferred date format in JavaScript.', 'Now, we are discussing some other formats of the ISO date. Here, we are writing the input date and displaying the result that occurred when we use the corresponding syntax.', 'The ""MMM DD YYYY"" is the format used to write Long dates. The month and date can be written in any order, and it is allowed to write a month in abbreviated (Aug) form or in full (August).']","[""4. Now, in the fourth syntax, we specify the date with added hours, minutes, and seconds. (YYYY-MM-DDTHH:MM:SSZ). In this format, the date and time are separated with the letter 'T' and the letter 'Z'. We get different results in different browsers if we remove these characters.""]","['""2020-08-01"" (The International Standard)', '""01/08/2020""', '""Aug 01 2020"" or ""01 Aug 2020""', '<!DOCTYPE html>', '</head>', '<h1> Welcome to the JavaTpoint.com </h1>', ""<h3> It is an example of JavaScript's ISO date </h3>"", '<p id = ""para""> </p>', '<script>', 'let val = new Date(""2020-08-01"");', 'document.getElementById(""para"").innerHTML = val;', '</script>', '</body>', '</html>', 'Sat Aug 01 2020 05:30:00 GMT+0530 (India Standard Time)', 'Sat Aug 01 2020 05:30:00 GMT+0530 (India Standard Time)', 'Wed Jan 01 2020 05:30:00 GMT+0530 (India Standard Time)', 'Sat Aug 01 2020 12:35:00 GMT+0530 (India Standard Time)', '<!DOCTYPE html>', '</head>', '<h1> Welcome to the JavaTpoint.com </h1>', ""<h3> It is an example of JavaScript's Short date </h3>"", '<script>', 'let val = new Date(""08/01/2020"");', 'document.write(val);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<h1> Welcome to the JavaTpoint.com </h1>', ""<h3> It is an example of JavaScript's Long date </h3>"", '<script>', 'let val = new Date(""Aug 01 2020"");', 'document.write(val);', '</script>', '</body>', '</html>']",[],[],[]
109,['JavaScript date parse() method'],"['The parse() method in JavaScript is used to parse the specified date string and returns the number of milliseconds between the specified date and January 1, 1970. If the string does not have valid values or if it is not recognized, then the method returns NaN.']","['https://www.javatpoint.com/javascript-defer', 'https://www.javatpoint.com/javascript-date-format', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-date-parse-method1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-date-parse-method2', 'https://www.javatpoint.com/javascript-defer', 'https://www.javatpoint.com/javascript-date-format', 'https://www.javatpoint.com/javascript-defer']","['https://static.javatpoint.com/javascriptpages/images/javascript-date-parse-method.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-date-parse-method2.png']",[],[],"['Syntax', 'Example1', 'Example2']",[],"['The counting of milliseconds between two specified dates helps us to find the number of hours, days, months, etc. by doing easy calculations.', 'It contains a single parameter string that represents a date. This method returns a number that represents the number of milliseconds.', 'In this example, we are passing a valid date to get the number of milliseconds between the specified date and midnight of January 1, 1970.', 'Here, the specified date is ""June 19, 2020"".', 'In this example, we are passing an invalid date to see what happens when we provide invalid input.', 'In the output, we can see the result is NaN.']","[""Let's see some illustrations of using the parse() method. In the first example, we are passing the valid date value, and in the second example, we are passing the invalid date value to see the result.""]",[],"['date.parse(datestring);', '</head>', '<h1> Hello World :) :) </h1>', '<p> Here, we are finding the number of milliseconds between the given date and midnight of January 1, 1970. </p>', '<script>', 'var d1 = ""June 19, 2020"";', 'var m1 = Date.parse(d1);', 'document.write(""The number of milliseconds between <b> "" + d1 + ""</b> and <b> January 1, 1970 </b> is: <b> "" + m1 + ""</b>"");', '</script>', '</body>', '</html>', '</head>', '<h1> Hello World :) :) </h1>', '<p> Here, we are finding the number of milliseconds between the given date and midnight of January 1, 1970. </p>', '<script>', 'var d1 = ""June 39, 2020""; //an invalid date', 'var m1 = Date.parse(d1);', 'document.write(""The number of milliseconds between <b> "" + d1 + ""</b> and <b> January 1, 1970 </b> is: <b> "" + m1 + ""</b>"");', '</script>', '</body>', '</html>']",[],[],[]
110,['JavaScript defer'],"['The defer is a Boolean value, used to indicate that script is executed after the document has been parsed. It works only with external scripts (i.e., works only when we are specifying the src attribute in <script> tag). It declares that the script will not create any content. So, the browser can continue the parsing of the rest of the page. The <script> with the defer attribute does not block the page.']","['https://www.javatpoint.com/javascript-redirect', 'https://www.javatpoint.com/javascript-date-parse-method', 'https://www.javatpoint.com/https://www.javatpoint.com/html-script-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-head', 'https://www.javatpoint.com/https://www.javatpoint.com/html-body-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-defer1', 'https://www.javatpoint.com/javascript-redirect', 'https://www.javatpoint.com/javascript-date-parse-method', 'https://www.javatpoint.com/javascript-redirect']","['https://static.javatpoint.com/javascriptpages/images/javascript-defer.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-defer2.png']",[],[],"['Syntax', 'Example']",[],"['We can understand the use of the defer attribute in the following image:', 'Here, we are using an external javascript file, i.e., myscript.js.', 'myscript.js', 'After the execution of the above code, the output will be -']",[],"['This attribute tells the browser to execute the <script> file when the entire HTML document gets fully parsed. Sometimes, the application consumes more memory by adding the <script> tag in the HTML head section, and it also causes performance issues. To improve the performance, we can add the defer attribute in the <script> tag.', 'Sometimes the script takes more than expected loading time and displays the blank page instead of content. In mobile devices, it will be a worse situation because of the low memory of small devices. So, by using the defer attribute, we can increase the loading performance.', 'The defer attribute is not allowed in older browsers, so for older browsers we have to use the alternative of the defer attribute. The alternative solution is that we must have to specify the <script> section just before the </body> tag of HTML file. It can be done as follows:']","['<script src = "" ""> </script>', '</body>', '<script defer>', '<!DOCTYPE html>', '<script src = ""myscript.js"" defer>', '</script>', '</head>', '<h1> javaTpoint.com </h1>', '<h3> This is an example of defer attribute.  </h3>', '</body>', '</html>', 'alert("" Hello World. \\n Welcome to the javaTpoint.com \\n This is an example of the defer attribute. "");']",[],[],[]
111,['JavaScript redirect'],"['Redirect is nothing but a mechanism of sending search engines and users on a different URL from the original one. The redirected page can be on the same server or on a different server. It can also be on the same website or on different websites. Sometimes when we clicked on a URL, we directed to another URL. It happens because of the page redirection. It is different from refreshing a page.']","['https://www.javatpoint.com/javascript-scope', 'https://www.javatpoint.com/javascript-defer', 'https://www.javatpoint.com/https://www.javatpoint.com/url-full-form', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/seo-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/http-full-form', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-redirect1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-redirect2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-redirect3', 'https://www.javatpoint.com/javascript-scope', 'https://www.javatpoint.com/javascript-defer', 'https://www.javatpoint.com/javascript-scope']","['https://static.javatpoint.com/javascriptpages/images/javascript-redirect.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-redirect2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-redirect3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-redirect4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-redirect5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-redirect6.png']",[],['window.location and window.location.href'],"['location.replace()', 'Syntax', 'Example1', 'Example2', 'Example3']",[],"['It is one of the commonly used window.location object. It is used for replacing the original document with a new one.', ""Now, let's understand the page redirection by using some examples."", 'It is a simple example of page redirection on the client-side. To redirect a page, we simply have to write a statement in the script section.', 'After the execution of the above code, the output will be - ', 'After clicking the given button, the output will be -', 'After the execution of the above code, the output will be - ', 'After the interval of five seconds, the output will be -', 'Here, there is an HTML button that is to be clicked to replace the document with the new one.', 'After the execution of the above code, the output will be - ', 'After clicking the given button, the output will be -', 'If we try to open the previous document again with the same location, we can see that it will be replaced with the new document.']","['Generally, search engines do not analyze the JavaScript to check the redirection. So, if it is required to notify the search engines (SEO) about the URL forwarding, we need to add the rel = ""canonical"" tag within the head section of the web page.', 'There are several methods used for performing page redirection, but location.href and location.replace() are widely used. The page redirection is easy in JavaScript.', 'window.location object is a property of the window object. There are several methods to redirect a web page. Almost all methods are related to the window.location object.', 'It can be used for getting the address of the current URL or the web address. The window.location object can be written without adding the window prefix.', ""In this method, we can pass a new URL, and then it will perform an HTTP redirect. It is different from href as it removes the current document from the document's history, so it is not possible to navigate back to the original document."", ""In this example, there is a button which redirect's the visitor to 'javaTpoint.com'. We have to click the button to naviagate on the appropriate link."", 'In this example, we are using the setTimeout() method which automatically redirect the user to the appropriate link. It would take some time to load a new page. The setTimeout() method executes another function after a given time interval.', 'In this example, we are using the replace() method for page redirection. The replace() method will replace the current document with the new document.']",[],"['<link rel = ""canonical"" href = ""https://www.javatpoint.com/""  />', 'window.location.replace(""new URL"");', '<script type = ""text/javascript"">', 'function page_redirect(){', 'window.location = ""https://www.javatpoint.com/"";', '</script>', '</head>', '<h2> This is an example of the page redirection </h2>', '<p> Click the following button to see the effect. </p>', '<input type = ""button"" value = ""Redirect"" onclick = ""page_redirect()"" />', '</form>', '</body>', '</html>', '<script type = ""text/javascript"">', 'function page_redirect() {', 'window.location = ""https://www.javatpoint.com/"";', ""setTimeout('page_redirect()', 5000);"", '</script>', '</head>', '<h2> After 5 seconds, you will redirected to another page. </h2>', '<p> Wait for 5 seconds to see the effect. </p>', '</body>', '</html>', '<!DOCTYPE html>', '<script>', 'function page_redirect() {', 'location.replace(""https://www.javatpoint.com"")', '</script>', '</head>', '<h2> Example of redirecting a page using replace() </h2>', '<p> Using the replace() the currct document will replace with new one. </p>', '<p> Click the following button to see the effect. </p>', '<button onclick = ""page_redirect()""> Replace </button>', '</body>', '</html>']",[],[],[]
112,['JavaScript scope'],"['A scope can be defined as the region of the execution, a region where the expressions and values can be referenced.']","['https://www.javatpoint.com/javascript-scroll', 'https://www.javatpoint.com/javascript-redirect', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-scope1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-scope2', 'https://www.javatpoint.com/javascript-scroll', 'https://www.javatpoint.com/javascript-redirect', 'https://www.javatpoint.com/javascript-scroll']","['https://static.javatpoint.com/javascriptpages/images/javascript-scope.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-scope2.png']",[],[],"['Example1', 'Example2']",[],"['There are two scopes in JavaScript that are global and local:', 'Global Scope: In the global scope, the variable can be accessed from any part of the JavaScript code.', 'Local Scope: In the local scope, the variable can be accessed within a function where it is declared.', 'In the output, we can see that the variable with locally scoped overrides the value of the global variable.', ""When we declare a variable inside a function without using the var keyword, it acts as a global variable. Let's see an illustration of the same.""]","['In this example, we are declaring two variables one variable has a global scope, and the second variable has local scope. Both of the variables are declared with the same name.', 'In this example, we are declaring a variable inside the function without using any variable declaration keyword. Then we are accessing the corresponding variable outside the function.', 'In the output, we can see that there is no error is generating related to the undefined variable. The code is successfully executed without generating any error.', 'In the above code, if we use the variable without calling the function, then the variable is undefined, and there is no output will be generated. In this case, the error will generate related to the undefined variable. ']","[""In the function's body, the precedence of the local variable is more than the global variable with the same name. If the name of the function's local variable is same as the name of the global variable, then the local variable hides the global variable.""]","['<!DOCTYPE html>', '<head>', '</head>', '<script>', 'var $var12 = 200;', 'function example() {', 'var $var12 = 300;', 'document.write(""Inside example() function = "" + $var12);', 'document.write(""Outside example() function = ""  + $var12);', 'document.write(""<br>"");', 'example();', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<head>', '</head>', '<script>', 'function example() {', '$var12 = 300;', 'document.write(""Inside example() function = "" + $var12);', 'example();', 'document.write(""<br>"");', 'document.write(""Outside example() function = ""  + $var12);', '</script>', '</body>', '</html>']",[],[],[]
113,['JavaScript scroll'],['The onscroll event in JavaScript occurs when a scrollbar is used for an element. The event is fired when the user moves the scrollbar up or down. We can use the CSS overflow property for creating a scrollbar.'],"['https://www.javatpoint.com/javascript-sleep', 'https://www.javatpoint.com/javascript-scope', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-addeventlistener', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-scroll1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-scroll2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-scroll3', 'https://www.javatpoint.com/javascript-sleep', 'https://www.javatpoint.com/javascript-scope', 'https://www.javatpoint.com/javascript-sleep']","['https://static.javatpoint.com/javascriptpages/images/javascript-scroll.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-scroll2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-scroll3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-scroll4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-scroll5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-scroll6.png']",[],[],"['Syntax', 'Example - Using onscroll attribute in HTML', 'Example - Using JavaScript', 'Example - Using addEventListener()']",[],"['In JavaScript', 'In JavaScript by using the addEventListener() method', ""Let's see some of the illustrations to understand the scroll event."", 'After scrolling the bordered text on the screen, we will get the following output -', 'Now, we will see how to use onscroll event using JavaScript.', 'After scrolling the bordered text on the screen, we will get the following output -', 'After scrolling the bordered text on the screen, we will get the following output -']","[""In HTML, we can use the onscroll attribute and assign a JavaScript function to it. We can also use the JavaScript's addEventListener() method and pass a scroll event to it for greater flexibility."", 'Now, we see the syntax of using the onscroll event in HTML and in JavaScript (without addEventListener() method or by using the addEventListener() method).']","['In this example, we are using the HTML onscroll attribute. There is a paragraph element with id = ""para"" on which we are applying the onscroll attribute. When the user scrolls the paragraph, the color and the background color of the paragraph will change.']","['<element onscroll = ""fun()"">', 'object.onscroll = function() { myScript };', 'object.addEventListener(""scroll"", myScript);', '<!DOCTYPE html>', '<style>', 'width: 250px;', 'height: 150px;', 'overflow: scroll;', 'border: 1px solid red;', 'font-size: 25px;', '</style>', '</head>', '<h1> Hello world :):) </h1>', '<h2> Scroll the bordered text to see the effect. </h2>', '<p> This is an example of using the <b> onscroll </b> attribute. </p>', '<p id = ""para"" onscroll = ""fun()""> Hi, Welcome to the javaTpoint.com. This site is developed so that students may learn computer science related technologies easily. The javaTpoint.com is always providing an easy and in-depth tutorial on various technologies. No one is perfect in this world, and nothing is eternally best. But we can try to be better. </p>', '<script>', 'function fun() {', 'document.getElementById(""para"").style.color = ""red"";', 'document.getElementById(""para"").style.background = ""lightgreen"";', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<style>', 'width: 250px;', 'height: 150px;', 'overflow: scroll;', 'border: 1px solid red;', 'font-size: 25px;', '</style>', '</head>', '<h1> Hello world :):) </h1>', '<h2> Scroll the bordered text to see the effect. </h2>', ""<p> This is an example of using JavaScript's <b> onscroll </b> event. </p>"", '<p id = ""para""> Hi, Welcome to the javaTpoint.com. This site is developed so that students may learn computer science related technologies easily. The javaTpoint.com is always providing an easy and in-depth tutorial on various technologies. No one is perfect in this world, and nothing is eternally best. But we can try to be better. </p>', '<p id = ""para1""></p>', '<script>', 'document.getElementById(""para"").onscroll = function() {fun()};', 'function fun() {', 'document.getElementById(""para"").style.color = ""red"";', 'document.getElementById(""para"").style.background = ""lightgreen"";', 'document.getElementById(""para1"").innerHTML = ""You are scrolling the content"";', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<style>', 'width: 250px;', 'height: 150px;', 'overflow: scroll;', 'border: 1px solid red;', 'font-size: 25px;', '</style>', '</head>', '<h1> Hello world :):) </h1>', '<h2> Scroll the bordered text to see the effect. </h2>', '<p id = ""para""> Hi, Welcome to the javaTpoint.com. This site is developed so that students may learn computer science related technologies easily. The javaTpoint.com is always providing an easy and in-depth tutorial on various technologies. No one is perfect in this world, and nothing is eternally best. But we can try to be better. </p>', '<p id = ""para1""></p>', '<script>', 'document.getElementById(""para"").addEventListener(""scroll"", fun);', 'function fun() {', 'document.getElementById(""para"").style.color = ""red"";', 'document.getElementById(""para"").style.background = ""lightgreen"";', 'document.getElementById(""para1"").innerHTML = ""You are scrolling the content"";', '</script>', '</body>', '</html>']",[],[],[]
114,['JavaScript sleep/wait'],"['The programming languages such as PHP and C has a sleep(sec) function to pause the execution for a fixed amount of time. Java has a thread.sleep(), python has time.sleep(), and GO has time.sleep(2*time.second).']","['https://www.javatpoint.com/javascript-void', 'https://www.javatpoint.com/javascript-scroll', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-sleep1', 'https://www.javatpoint.com/https://www.javatpoint.com/es6', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-sleep2', 'https://www.javatpoint.com/javascript-void', 'https://www.javatpoint.com/javascript-scroll', 'https://www.javatpoint.com/javascript-void']","['https://static.javatpoint.com/javascriptpages/images/javascript-sleep.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-sleep2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-sleep3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-sleep4.png']",[],['How to use sleep function in JavaScript?'],"['Syntax of sleep() in JavaScript', 'Syntax', 'Example1', 'Example2']",[],"['Before implementing the sleep function in JavaScript, it is important to understand the execution of the JavaScript code.', 'The sleep() function can be used along with the async/await to get the pause between the execution. The syntax for the same is given as follows:', 'After the execution of the above code, the output will be -', 'After two seconds, the output will change -', 'The loop will iterate 10 times with a pause of 2 seconds on every iteration.', 'Initially, some of the statements are displayed on the screen. Then, after the delay of 2 seconds, the text ""End"" will be displayed on the screen.', 'This approach is preferred to delay a function. Because of using promises, it is supported in ES6.', 'After the execution of the above code, the output will be -', 'After the delay of 2 seconds, the output will be -']","['The above syntaxes are the way to implement sleep functionality in JavaScript. Now, we will see the examples of using the sleep() function in JavaScript.']","[""Unlike other languages, JavaScript doesn't have any sleep() function. We can use some approaches for simulating the sleep() function in JavaScript. The features such as promises and async/await function in JavaScript helped us to use the sleep() function in an easier way."", 'The await is used to wait for a promise and can only be used in an async function. The behavior of JavaScript is asynchronous, so there is a concept of promises to handle such asynchronous behavior. Because of this asynchronous behavior, it continues its work and does not wait for anything during execution. Async/await functions help us to write the code in a synchronous manner.', 'In this example, we are using the sleep() function with the async/await functionalites. There is a function fun() is defined with some statements. Initially, the text ""Hello World"" is displayed on the screen once the function is started. Then, because of the sleep function the fun() is paused for 2 seconds. After the completion of the given time period, the text ""Welcome to the javaTpoint.com"" will be displyed on the screen and repeated until the termination of the loop. The text is going to be repeated 10 times on the screen with a pause of two seconds on every iteration of the loop.', 'Here, we are creating a promise with the setTimeout() function. The setTimeout() function executes code after the specified amount of time. We are also using the then() method, which executes the required function after the completion of the promise.']","['sleep(delayTime in milliseconds).then(() => {', 'const func = async () => { await sleep(delayTime in milliseconds)', '</head>', '<h1> Example of using sleep() in JavaScript </h1>', '<script>', 'function sleep(milliseconds) {', 'return new Promise(resolve => setTimeout(resolve, milliseconds));', 'async function fun() {', ""document.write('Hello World');"", 'for (let i = 1; i <=10 ; i++) {', 'await sleep(2000);', 'document.write( i + "" "" + ""Welcome to the javaTpoint.com"" + "" "" + ""</br>"");', '}', 'fun();', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<h1> Example of using the sleep() in JavaScript</h1>', 'There is a sleep of 2000 milliseconds', '<script>', 'let sleep = ms => {', 'return new Promise(resolve => setTimeout(resolve, ms));', 'document.write(""Begin"" + ""<br>"");', 'document.write(""Welcome to the javaTpoint.com"" + ""<br>"");', 'sleep(2000).then(() => {', 'document.write(""End"");', '</script>', '</body>', '</html>']",[],[],[]
115,['JavaScript:void(0)'],"[""The void operator is used to evaluate an expression and returns the undefined. Generally, this operator is used for obtaining the undefined primitive value. It is often used with hyperlinks. Usually the browser refreshes the page or loads a new page on clicking a link. The javascript:void(0) can be used when we don't want to refresh or load a new page in the browser on clicking a hyperlink.""]","['https://www.javatpoint.com/jquery-vs-javascript', 'https://www.javatpoint.com/javascript-sleep', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-void1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-void2', 'https://www.javatpoint.com/jquery-vs-javascript', 'https://www.javatpoint.com/javascript-sleep', 'https://www.javatpoint.com/jquery-vs-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-void.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-void2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-void3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-void4.png']",[],[],"['Syntax', 'Example1', 'Example2']",[],"['It is also used to prevent unwanted redirecting of the page.', ""Let's understand the use of javascript:void(0); using some examples."", 'When we click on the second link, it will display an alert dialog box.', 'On clicking the first link, nothing will happen. When the user clicks the second link, the output will be -', 'Now, in the next example, we will see how to prevent redirecting of the webpage.', 'On double-clicking the specified link, the output will be -']","['In the following example, we are defining two links. In the first link, we are using the void keyword. When the corresponding link gets clicked, it will do nothing because of the void(0).']","['We can use the operand 0 in two ways that are void(0) or void 0. Both of the ways work the same. The JavaScript:void(0) tells the browser to ""do nothing"" i.e., prevents the browser from reloading or refreshing the page. It is useful when we insert links that have some important role on the webpage without any reloading. So, using void(0) on such links prevents the reloading of the page but allows to perform a useful function such as updating a value on the webpage.', 'In this example, we are passing the javascript:void(0); and link of the website to the href attribute. Here, we are also using the ondblclick attribute, which shows an alert box on double-clicking the hyperlink. On closing the alert dialog box, the page will not redirect to the specified link of the website.']","['void expression;', '</head>', '<center>', '<h1> Hello World :) :) </h1>', '<h2> Click the following links to see the changes </h2>', '<h4> It is an example of using the <i> javascript:void(0); </i> </h4>', '<a href = ""javascript:void(0);"">', 'It will do nothing.', '<br/><br/>', '<a href = ""javascript:alert(\'Welcome to javaTpoint\');""> Click here for an alert </a>', '</center>', '</body>', '</html>', '<style>', 'font-size: 22px;', '</style>', '</head>', '<center>', '<h1> Hello World :) :) </h1>', '<h2> Click the following link to see the changes </h2>', '<h4> You can see on closing the alert dialog box, the page will not redirect to https://www.javatpoint.com/ </h4>', '<a href = ""javascript:void(0);https://www.javatpoint.com/"" ondblclick = ""alert(\'Welcome to the javaTpoint.com\')"">', 'Double click the link', '</center>', '</body>', '</html>']",[],[],[]
116,['JavaScript Form'],"['In this tutorial, we will learn, discuss, and understand the JavaScript form. We will also see the implementation of the JavaScript form for different purposes.']","['https://www.javatpoint.com/event-bubbling-and-capturing-in-javascript', 'https://www.javatpoint.com/javascript-queue', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-form', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/document-getElementById()-method', 'https://www.javatpoint.com/https://www.javatpoint.com/html-login-form', 'https://www.javatpoint.com/event-bubbling-and-capturing-in-javascript', 'https://www.javatpoint.com/javascript-queue', 'https://www.javatpoint.com/event-bubbling-and-capturing-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-form.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-form2.png']",[],"['Introduction to Forms', 'Referencing forms']","['Submitting the form', 'Login Form', 'SignUp Form']",[],"[""Here, we will learn the method to access the form, getting elements as the JavaScript form's value, and submitting the form."", 'In the code:', 'Other than action and methods, there are the following useful methods also which are provided by the HTML Form Element', 'The syntax of using the getElementById() method is as follows:', 'Using the Id, we can make the reference.', 'The syntax of the submit() method is as follows:', ""Let's collect and use all these to create a Login form and SignUp form and use both."", 'The output of the above code on clicking on Login button is shown below:', 'The output of the above code is shown below:', 'In this way, we can create forms in JavaScript with proper validations.']","['Forms are the basics of HTML. We use HTML form element in order to create the JavaScript form. For creating a form, we can use the following sample code:', 'Now, we have created the form element using HTML, but we also need to make its connectivity to JavaScript. For this, we use the getElementById () method that references the html form element to the JavaScript code.', 'Next, we need to submit the form by submitting its value, for which we use the onSubmit() method. Generally, to submit, we use a submit button that submits the value entered in the form.']","['When we submit the form, the action is taken just before the request is sent to the server. It allows us to add an event listener that enables us to place various validations on the form. Finally, the form gets ready with a combination of HTML and JavaScript code.']","['<title> Login Form</title>', '</head>', '<h3> LOGIN </h3>', '<form =""Login_form"" onsubmit=""submit_form()"">', '<h4> USERNAME</h4>', '<input type=""text"" placeholder=""Enter your email id""/>', '<h4> PASSWORD</h4>', '<input type=""password"" placeholder=""Enter your password""/></br></br>', '<input type=""submit"" value=""Login""/>', '<input type=""button"" value=""SignUp"" onClick=""create()""/>', '</form>', '</html>', ""let form = document.getElementById('subscribe');"", '<input type=""submit"" value=""Subscribe"">', '<title> Login Form</title>', '</head>', '<h3> LOGIN </h3>', '<form =""Login_form"" onsubmit=""submit_form()"">', '<h4> USERNAME</h4>', '<input type=""text"" placeholder=""Enter your email id""/>', '<h4> PASSWORD</h4>', '<input type=""password"" placeholder=""Enter your password""/></br></br>', '<input type=""submit"" value=""Login""/>', '<input type=""button"" value=""SignUp"" onClick=""create()""/>', '</form>', '<script type=""text/javascript"">', 'function submit_form(){', 'alert(""Login successfully"");', 'function create(){', 'window.location=""signup.html"";', '</script>', '</body>', '</html>', '<title> SignUp Page</title>', '</head>', '<body align=""center"" >', '<h1> CREATE YOUR ACCOUNT</h1>', '<table cellspacing=""2"" align=""center"" cellpadding=""8"" border=""0"">', '<tr><td> Name</td>', '<td><input type=""text"" placeholder=""Enter your name"" id=""n1""></td></tr>', '<tr><td>Email </td>', '<td><input type=""text"" placeholder=""Enter your email id"" id=""e1""></td></tr>', '<tr><td> Set Password</td>', '<td><input type=""password"" placeholder=""Set a password"" id=""p1""></td></tr>', '<tr><td>Confirm Password</td>', '<td><input type=""password"" placeholder=""Confirm your password"" id=""p2""></td></tr>', '<tr><td>', '<input type=""submit"" value=""Create"" onClick=""create_account()""/>', '</table>', '<script type=""text/javascript"">', 'function create_account(){', 'var n=document.getElementById(""n1"").value;', 'var e=document.getElementById(""e1"").value;', 'var p=document.getElementById(""p1"").value;', 'var cp=document.getElementById(""p2"").value;', 'var letters = /^[A-Za-z]+$/;', 'var email_val = /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;', ""if(n==''||e==''||p==''||cp==''){"", 'alert(""Enter each details correctly"");', 'else if(!letters.test(n))', ""alert('Name is incorrect must contain alphabets only');"", 'else if (!email_val.test(e))', ""alert('Invalid email format please enter valid email id');"", 'else if(p!=cp)', 'alert(""Passwords not matching"");', 'else if(document.getElementById(""p1"").value.length > 12)', 'alert(""Password maximum length is 12"");', 'else if(document.getElementById(""p1"").value.length < 6)', 'alert(""Password minimum length is 6"");', 'alert(""Your account has been created successfully... Redirecting to JavaTpoint.com"");', 'window.location=""https://www.javatpoint.com/"";', '</script>', '</body>', '</html>']",[],[],"['|||Form name tag is used to define the name of the form. The name of the form here is ""Login_form"". This name will be referenced in the JavaScript form.|||The action tag defines the action, and the browser will take to tackle the form when it is submitted. Here, we have taken no action.|||The method to take action can be either post or get, which is used when the form is to be submitted to the server. Both types of methods have their own properties and rules.|||The input type tag defines the type of inputs we want to create in our form. Here, we have used input type as \'text\', which means we will input values as text in the textbox.|||Net, we have taken input type as \'password\' and the input value will be password.|||Next, we have taken input type as \'button\' where on clicking, we get the value of the form and get displayed.||||||submit (): The method is used to submit the form.|||reset (): The method is used to reset the form values.|||']"
117,['jQuery vs. JavaScript'],"['A free and open-source javascript library which is basically used for designing, traversing and manipulating the HTML DOM. A DOM is a tree-like structure used to represent the elements of a webpage. jQuery helps the designer to use javascript code easily for their websites. The advanced approach to jQuery enables to create powerful dynamic webpages and web applications. The syntax of jQuery is designed to make things easy, such as:']","['https://www.javatpoint.com/javascript-vs-php', 'https://www.javatpoint.com/javascript-void', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/jquery-tutorial', 'https://www.javatpoint.com/javascript-vs-php', 'https://www.javatpoint.com/javascript-void', 'https://www.javatpoint.com/javascript-vs-php']",['https://static.javatpoint.com/javascriptpages/images/jquery-vs-javascript.png'],[],"['What is jQuery', 'jQuery vs. JavaScript']",[],[],"['jQuery is one of the widely used javascript library among all other libraries holding the following core features:', 'Although jQuery is a part of JavaScript, there can be following certain differences between them:']","['On the other hand, jQuery allows developers to create plug-ins on top of the JavaScript library. Developers can even create abstractions for low-level interaction and animations, too.']",[],[],[],"['jQuery|||JavaScript&&&It is a javascript library.|||It is a dynamic and interpreted web-development programming language.&&&The user only need to write the required jQuery code|||The user needs to write the complete js code&&&It is less time-consuming.|||It is more time consuming as the whole script is written.&&&There is no requirement for handling multi-browser compatibility issues.|||Developers develop their own code for handling multi-browser compatibility.&&&It is required to include the URL of the jQuery library in the header of the page.|||JavaScript is supportable on every browser. Any additional plugin need not to be included.&&&It depends on the JavaScript as it is a library of js.|||jQuery is a part of javascript. Thus, the js code may or may not depend on jQuery.&&&It contains only a few lines of code.|||The code can be complicated, as well as long.&&&It is quite an easy, simple, and fast approach.|||It is a weakly typed programming approach.&&&jQuery is an optimized technique for web designing.|||JavaScript is one of the popular web designing programming languages for developers that introduced jQuery.&&&jQuery creates DOM faster.|||JavaScript is slow in creating DOM.']",['|||Navigation of a document|||Selection of DOM elements|||Creating animations|||Handling events|||Developing Ajax applications.|||&&&|||DOM elements selection|||Traversal and manipulation which is enabled by Sizzle(the selector engine)|||Creating a new programming style|||Fusing DOM data structures and algorithms|||']
118,['JavaScript vs. PHP'],"['Extends for Hypertext Preprocessor. It is the most widely used web development language. It is commonly known as an open-source scripting language. PHP code can be embedded into html files. The code is written between start and end processing instructions, i.e., in-between <?php> and ?>. PHP is a simple to use language for a newcomer too.']","['https://www.javatpoint.com/dart-vs-javascript', 'https://www.javatpoint.com/jquery-vs-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/php-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/website', 'https://www.javatpoint.com/dart-vs-javascript', 'https://www.javatpoint.com/jquery-vs-javascript', 'https://www.javatpoint.com/dart-vs-javascript']",[],[],"['What is PHP', 'Difference between JavaScript and PHP']",[],[],['Following lists the various differences between JavaScript and PHP.'],[],"['Although, both PHP and JavaScript are used in web development, they serve totally different purposes and tasks. Even in some cases, PHP and JavaScript work together to achieve a common goal. When both languages deal together, JavaScript handles the front-end of the website and PHP as backend. But, when they work independently, both can serve in the web development majorly. Most popular and trending websites such as Facebook, Yahoo, Flickr are built using JavaScript as well as PHP together.']",[],[],"[""JavaScript|||PHP&&&Currently, it is a full-stack programming language. It means it can serve both the client as well as server sites.|||It is a server-side scripting language. It serves only the backend of the website.&&&It is faster but difficult to learn.|||It is slower but easy to learn.&&&It is an asynchronous programming language that does not wait for the execution of the input-output operations.|||It is a synchronous programming language. Thus, it waits for the execution of the input-output operations.&&&It is supportable by every web browser, such as Mozilla, Google Chrome, and many more.|||It is supportable on Windows, Linux, Mac, etc. platforms. Supported by IIS, Apache, and Lighttpd web servers.&&&It carries less securable code.|||PHP code is highly securable.&&&It requires an environment for accessing the database.|||It allows easy and direct access to the database.&&&The code is written within <script>...<script> tags.|||The code is written within <?php....?> tag.&&&Earlier, javascript was able to create interactive pages for the clients. But, at present, it is able to build real-time games and applications, mobile applications, too.|||A PHP program is able to generate dynamic pages, send cookies, receive cookies, collect form data, etc.&&&It is a single-threaded language. Thus, each input-output operation is concurrently carried out.|||It is a multi-threaded language. Thus, it blocks if multiple input-output operations execute.&&&The extension used to save an external javascript file is '.js'.|||Files are saved using '.php' extension.&&&We can embed the js code in HTML, XML, and AJAX.|||We can embed the PHP code only with HTML.&&&It supports fewer features.|||It supports more advanced features as compared to JavaScript.&&&Popular frameworks of JavaScript are Angular, React, Vue.js, Meteor, etc.|||Popular frameworks of PHP are Laravel, Symfony, FuelPHP, CakePHP, and many more.&&&Websites built in JavaScript are Twitter, LinkedIn, Amazon, etc.|||Websites built in PHP are Wordpress, Tumblr, MailChimp, iStockPhoto, etc.""]",[]
119,['Dart vs. JavaScript'],"['JavaScript and Dart are the best options for cross-platform mobile app development. Dart is a relatively new language compared to JavaScript, but it has some extremely useful features and excellent Google support. JavaScript reached the top of its popularity when it came to the cross-platform mobile application and server-side application development.']","['https://www.javatpoint.com/javascript-vs-angularjs', 'https://www.javatpoint.com/javascript-vs-php', 'https://www.javatpoint.com/https://www.javatpoint.com/dart-programming', 'https://www.javatpoint.com/https://www.javatpoint.com/programming-language', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/flutter', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/nodejs-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/browsers', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/javascript-vs-angularjs', 'https://www.javatpoint.com/javascript-vs-php', 'https://www.javatpoint.com/javascript-vs-angularjs']",['https://static.javatpoint.com/javascriptpages/images/dart-vs-javascript.png'],[],"['What is Dart?', 'What is JavaScript?', 'Main Differences between Dart and JavaScript', 'Head-to-head comparison between Dart and JavaScript', 'Conclusion']","['Advantages and Disadvantages of Dart', 'Advantages and disadvantages of JavaScript', 'Ease of Use', 'Speed', 'Type Safety', 'Popularity', 'Learning Curve', 'Web vs. Mobile', 'Frontend vs. Backend', 'Commercial Use']",[],"['Various advantages and disadvantages of Dart are as follows:', 'Advantages', 'Disadvantages', 'Various advantages and disadvantages of JavaScript are as follows:', 'Advantages', 'Disadvantages', 'Here, we are going to discuss the main differences between Dart and JavaScript:', 'The following comparison chart explains the head-to-head comparison between Dart and JavaScript:']","['In this article, we will discuss the difference between Dart and JavaScript. But before discussing the differences, we will know about Dart and JavaScript.', 'JavaScript is an interpreted language, so it could be felt lighter and faster than other programming languages. It is faster than Java and other compiled languages.', 'JavaScript, as an interpreted language that supports both dynamic and Duck typing. JavaScript is not a type-safe language because it may type any code. Programming errors may only be found during runtime.', 'On the other hand, Dart allows for both loose and strict prototyping. Since Dart is a compiled language, the majority of programming errors are discovered during the compilation process. It is more type-safe than JavaScript.', 'For beginners, JavaScript is not an easy language to learn, but knowing the fundamentals of programming makes JavaScript simple. There are various online courses and tutorials available for developers who want to learn JavaScript.', 'On the other hand, the Dart programming language can be a challenging activity for beginners because it is not a widely-used programming language. There are very few Dart programming courses or books available online.', 'On the other hand, Dart may be used to develop both mobile and web applications. Dart and the Flutter system became famous for creating cross-platform mobile applications.', 'JavaScript is used for frontend development with HTML and CSS. However, with the rise of the Node.js platform, it is now commonly used for backend and server-side development.', 'On the other hand, Dart is currently being used with Flutter to develop the frontend of cross-platform mobile applications. Dart may also be used for web creation, but no mention is made of it being used for backend development.', 'On the other hand, Google was the birthplace of Dart. As a result, it was first used internally. Then, after the announcement of Flutter, big names like Alibaba began using Flutter and Dart to create cross-platform applications.']","['Dart is a client-optimized programming language developed by Google in 2011 that is used to create quick applications for any platform. Google first used it as an internal programming language to create web, server, and mobile applications. Dart compiles the source code in the same way as other programming languages such as C, JavaScript, Java, and C#. It also comes with its own virtual machine (VM) called Dart VM, which is used to run the native application. It also has its own package manager, which is known as Pub. It became more popular after the announcement of Flutter by Google for cross-platform development of the mobile application. The main reason behind this is that Flutter is completely focused on Dart. On the other hand, Dart can be quickly learned by developers who have experience with OOPS languages.', ""JavaScript is a lightweight, object-oriented scripting language that is used to build dynamic HTML pages with interactive effects on a webpage. JavaScript is also commonly used in game development and mobile app development. It is an interpreted scripting language, and its code is only executed in a web browser. We may use Node.js to run the code outside the browser. It's also known as a browser's language, and it can be used for both client-side and server-side development. Brendan Eich of Netscape created it, and it was first published in 1995. The language was originally known as LiveScript before being renamed JavaScript. JavaScript's syntax is heavily influenced by the programming language C. The extension of JavaScript filename is .js."", 'JavaScript has been around for a longer in the industry and is a mature and robust language. JavaScript is simple to use. It has various frameworks and libraries that are available online. These frameworks allow developers to reuse existing code to create apps faster.', ""On the other hand, Dart is a relatively new language for most developers outside of Google. Despite Google's efforts to document the Dart programming language, it remains difficult for developers to find solutions to specific problems. It has a coding style and syntax similar to Java, so developers with OOPS experience would be able to easily learn and use Dart once they have learned the basics."", 'On the other hand, Dart is much faster as compared to JavaScript. Dart can be compiled both JIT and AOT, which helps with app development in various ways. For example, JIT compilation can speed up development, while AOT compilation can be used to optimize the release process. ', 'JavaScript can be found everywhere. Almost no computer does not support JavaScript. JavaScript is currently used to create online, mobile, and server-side code. On Stack Overflow, there are around more than 2.5 million questions about JavaScript. The JavaScript ecosystem is huge as a result of its popularity, and it now also dominates the ""market"" for reusable components with the advent of cloud component hubs. Frontend developers would want to see a different choice.', 'On the other hand, Dart is gaining popularity, but it is no match for JavaScript. Until Google declared Flutter, Dart was nowhere to be found. Dart has drawn developers who previously opposed JavaScript. Dart currently has approximately 45K questions tagged on Stack Overflow.', ""JavaScript has dominated both web and mobile app development with various frameworks. With the introduction of Facebook's React Native, JavaScript became a no-brainer for creating mobile and web apps for small businesses. Various JavaScript frameworks are still available on the market for creating web apps, progressive web apps, and hybrid mobile apps, such as Agular, Vue.js, and others."", ""JavaScript is used in the industrial sector, including large-scale projects. It is used in the development of network and cross-platform applications. JavaScript is used in Facebook's web and cross-platform apps, React and React Native. Other businesses that use JavaScript include eBay, Airbnb, Slack, and others."", ""JavaScript and Dart are excellent options for creating cross-platform mobile applications because they are used in React Native and Dart. Dart is a relatively new language compared to JavaScript. It has some interesting features and excellent Google support. We can't think which one will be dominant in the future, but Dart has taken off very quickly. Both Dart and JavaScript are winners in the Dart vs. JavaScript fights because they are solid options for developers for many reasons. With 223 votes in a Jaxenter poll, Dart has named the number one language in the 2019 list. In a Stack Overflow poll, Dart (66.3%) came in second place to JavaScript (66.8%) as the most used programming language in 2019.""]",[],[],"[""Features|||Dart|||JavaScript&&&Ease of use|||Dart has a Java-like syntax and coding style, so developers with an OOPS experience can easily use it.|||JavaScript is simple to use, and it has various frameworks and libraries available online and allows developers to reuse existing code to create apps faster.&&&Editor and IDE support|||Dart code may be written in lightweight editors like Sublime or VIM. The most commonly used IDEs for Dart application development is IntelliJ IDEA and Android Studio, which come with the Dart plugin.|||It provides some excellent editors and IDEs for app development. It is not always necessary to use a full-fledged IDE; instead, developers may use lightweight editors such as VIM, Sublime Text, Emacs, or Atom. Some IDEs, such as WebStorm and Visual Studio Code, can be useful for JavaScript application creation.&&&Productivity|||Dart and Flutter have a smaller community as well as several online communities. Despite excellent documentation, many experienced developers are still confused about understanding Dart.|||It is easier for new developers to learn because it's a simpler, lightweight, dynamic programming language. It increases developer productivity by providing various JavaScript frameworks and thousands of easily available web packages.&&&Type safety|||It is more type-safe than JavaScript because it allows for both loose and strong prototyping.|||It is not a type-safe language because it supports both duck-typing and dynamic. &&&Learning Curve|||Dart programming language can be challenging for beginners because it is not a widely-used programming language. There are very few Dart programming courses or books available online.|||For beginners, JavaScript is not an easy language to learn, but knowing the fundamentals of programming makes JavaScript simple.&&&Commercial Use|||Dart is supported by Google and is also used by big brands such as Blossom, WorkTrails, Whale, Mobile, and others.|||JavaScript is widely used in large corporations such as Instagram, Slack, Reddit, eBay, and Airbnb to build web and cross-platform mobile applications.&&&Speed|||Dart may be compiled both JIT and AOT, which allows for creating apps in different ways. Dart is much faster than JavaScript.|||JavaScript is an interpreted language, so it could be felt lighter and faster than other programming languages. It is faster than Java and other compiled languages.&&&Web and Mobile|||Dart could be used to develop both web and mobile applications.|||JavaScript may be used in both web and mobile app development with several frameworks.""]","[""|||It is an open-source and client-optimized programming language.|||It is very scalable across the projects.|||It is developed by Google and easily runs in the Google Cloud Platform.|||It is easy to learn if we already know JavaScript because it is similar to JavaScript.|||It is quicker than JavaScript.|||It is mostly used to develop mobile applications.||||||It has only a single object class.|||It is a new programming language that is not much used in the market.|||In Dart, we can't rename a function without writing a new assignment statement.|||It has a limited number of online resources, so it is difficult to find solutions to problems.||||||It is an open-source, flexible, fast, light-weighted framework.|||It allows cross-compilation.|||It supports interfaces, modules, and classes.|||It is used for both frontend and backend development, so it may run on different devices.|||It allows us to build interfaces that react whenever the user hovers the mouse over them.|||It is friendly with other languages; therefore, many other applications may use JavaScript.|||We may extend the JavaScript for writing large applications.||||||It makes use of limited libraries.|||Client-side JavaScript doesn't support writing or reading files. It has been only keeping for security purposes.|||A single error may destroy the entire website.|||It is a dynamic language, so developers may make big mistakes easily.|||It only supports the single inheritance, not multiple inheritances. Some programs might be required this object-oriented language feature.|||""]"
120,['JavaScript Vs. Angular Js'],"[""JavaScript is a lightweight, object-oriented scripting language used to build dynamic HTML pages with interactive effects on a web page that runs in the client's web browser. It's a client-side scripting language that provides interactive effects to web pages to make them more dynamic. On the other hand, Angular JS is a JavaScript-based framework that extends HTML with new features. It is mainly designed to develop dynamic and single-page web applications (SPAs). In this article, we are going to discuss the difference between JavaScript and Angular JS. But before discussing the differences, we will know about JavaScript and Angular JS.""]","['https://www.javatpoint.com/how-to-add-javascript-to-html', 'https://www.javatpoint.com/dart-vs-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/angularjs-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/nodejs-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/how-to-add-javascript-to-html', 'https://www.javatpoint.com/dart-vs-javascript', 'https://www.javatpoint.com/how-to-add-javascript-to-html']",['https://static.javatpoint.com/javascriptpages/images/javascript-vs-angularjs.png'],[],"['What is JavaScript?', 'What is Angular Js?', 'Main differences between the JavaScript and Angular JS', 'Head-to-Head comparison between JavaScript and Angular JS', 'Conclusion']","['JavaScript Features', 'Angular JS features']",[],"['There are various features of JavaScript. Some of them are as follows:', 'There are various features of angular JS. Some of them are as follows:', 'There are various main differences between JavaScript and Angular JS. Some of them are as follows:', 'Here, we are going to discuss a head-to-head comparison between JavaScript and Angular JS:']",[],"[""JavaScript is a lightweight, object-oriented scripting language that is used to build dynamic HTML pages with interactive effects on a webpage. JavaScript is also commonly used in game development and mobile app development. It is an interpreted scripting language, and its code is only executed in a web browser. We may use Node.js to run the code outside the browser. It's also known as a browser's language. It can be used for both client-side and server-side development. Brendan Eich of Netscape created it, and it was first published in 1995. The language was originally known as LiveScript before being renamed JavaScript. JavaScript's syntax is heavily influenced by the programming language C. The extension of JavaScript filename is .js."", ""It is an open-source and front-end web development framework with great features or support. Google's Angular team first launched it in 2010. It is a framework that is continually developing and expanding to include better methods for creating web applications. It develops applications primarily using the model view controller (MVC) concept and supports both data binding features and dependency injection."", ""Since AngularJS is mainly based on HTML and JavaScript, there is no need to learn another syntax or language. It transforms static HTML into dynamic HTML. It extends HTML's capabilities by adding built-in attributes and components and creating custom attributes using simple JavaScript."", ""Both of these web technologies are used to create web applications. JavaScript is an open-source and object-oriented programming language, while AngularJS is an open-source framework based on the MVC model. JavaScript is a programming language for web creation that enhances website interactivity. It helps to manipulate the content on websites to verify user feedback at the browser end, thus influencing the user action by including dynamic content like drag and drop elements, sliders, and many others. It's one of the World Wide Web's three core technologies and the foundation for all JavaScript technologies."", 'On the other hand, Angular JS is an open-source framework that specializes in developing massive single-page applications and is written in JavaScript. It is based on the MVC architecture. It is a data-driven approach that enables web applications to have a larger HTML library. It is a framework for the future to meet large data requirements without having to refresh Models.']",[],[],"[""Features|||JavaScript|||Angular JS&&&Definition|||It is an object-oriented scripted language that is used to develop mobile and dynamic web applications.|||It an open-source framework used to develop dynamic web and large single-page web applications.&&&Developed|||Netscape Communications developed it in 1995.|||Google mainly developed it in 2010.&&&Syntax|||Its syntax is much complex than Angular JS.|||Its syntax is simple and easy.&&&Programmed|||Its interpreters are written in the C and C++ languages.|||It is written in the JavaScript language.&&&Filters|||It doesn't support the filters.|||It does support filters.&&&Learnability|||It isn't very easy to learn.|||It is easy to learn if anyone knows the basic knowledge of JavaScript.&&&Concept|||It is based on the dynamic typing concept.|||Angular JS is based on the concept of the model view controller to build the applications.&&&Dependency injection|||It doesn't support the dependency injection.|||It supports both data binding and dependency injection.""]","[""|||JavaScript was originally designed for DOM manipulation. Earlier, most websites were static, but with JS, an interactive Web site can be developed.|||Functions are objects in JavaScript. They may have the same properties and methods as other objects and passed as arguments to other functions.|||JavaScript doesn't need a compiler.|||JavaScript may handle date and time.||||||Time-saving: AngularJS allows us to work with modules that help us to reuse them, saving time and code.|||Easy to work: It is easy to work with Angular JS because it uses JavaScript, HTML, and CSS languages.|||Ready to use a template: AngularJS is mostly plain HTML, and it mostly uses the plain HTML template, which it passes to the DOM and then to the AngularJS compiler. It passes through the templates, and then they're ready to use.||||||JavaScript is both a server-side and client-side scripting language for building web applications. On the other hand, AngularJS makes web applications quick and straightforward from the start.|||JavaScript takes less time to patch bugs and defects on a wide scale. As compared to JavaScript, AngularJS needs more time to do the same thing.|||JavaScript is one of the most effective web development techniques used for creating web applications. On the other hand, AngularJS has mostly been used as a JS framework for developing web applications.|||JavaScript is a programming language that is used to manipulate the DOM (Document Object Model). On the other hand, AngularJS extends its capabilities with different technologies.|||JavaScript doesn't support dependency injection. Whereas AngularJS supports both data binding and dependency injection.|||JavaScript code is quick and fast. On the other hand, Angular JS application generally becomes slow.|||JavaScript has been using the same strategy for several years. On the other hand, AngularJS has been enhanced to typescript, making the applications lighter and more interactive.|||JavaScript has an extensive user interface that includes sliders and other features. On the other hand, AngularJS is a data-driven framework that's used to create web applications.|||JavaScript is a powerful and complex programming language. On the other hand, AngularJS is a simple and effective framework.|||""]"
121,['JavaScript vs. Node.js'],"['JavaScript is a lightweight, object-oriented scripting language that is used to build dynamic HTML pages with interactive effects on a webpage. On the other hand, Node.js usually represents a list of objects and methods accessible to JavaScript code when run in the V8 engine or via the node interpreter.']","['https://www.javatpoint.com/javascript-async-and-await', 'https://www.javatpoint.com/javascript-debouncing', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/nodejs-tutorial', 'https://www.javatpoint.com/javascript-async-and-await', 'https://www.javatpoint.com/javascript-debouncing', 'https://www.javatpoint.com/javascript-async-and-await']",['https://static.javatpoint.com/javascriptpages/images/javascript-vs-nodejs.png'],[],"['What is JavaScript?', 'What is Node.js?', 'Main differences between JavaScript and Node.js', 'Head-to-head Comparison between JavaScript and Node JS', 'Conclusion']","['Advantages and disadvantages of JavaScript', 'Advantages and Disadvantages of Node.js']",[],"['Various advantages and disadvantages of JavaScript are as follows:', 'Advantages', 'Disadvantages', 'Various types of advantages and disadvantages of Node.js are as follows:', 'Advantages', 'Disadvantages', 'Here, we are going to discuss the main differences between JavaScript and Node.js:', 'Here, we are going to discuss the head-to-head comparison between JavaScript and Node JS:']","['In this article, we are going to discuss the difference between JavaScript and Node.js. But before discussing the differences, we will know about JavaScript and Node.js.']","[""Javascript is a lightweight, object-oriented scripting language that is used to build dynamic HTML pages with interactive effects on a webpage. JavaScript is also commonly used in game development and mobile app development. It is an interpreted scripting language, and the code can only be executed and run in a web browser. We can use Node.js to execute and run the code outside of the browser. It's also known as a browser's language, and it can be used for both client-side and server-side development. Brendan Eich of Netscape created it, and it was first published in 1995. The language was originally known as LiveScript before being renamed JavaScript. JavaScript's syntax is heavily influenced by the programming language C. The extension of JavaScript filename is .js."", 'Node.js is a cross-platform, open-source JavaScript runtime environment that enables JavaScript to be run on the server. Node.js enables JavaScript code to run outside of the browser. Node.js comes with a large number of modules and is mostly used in web creation. It may run on various platforms including, Windows, Linux, Mac OS, etc. It provides a cross-platform runtime environment with event-driven, non-blocking (asynchronous) I/O for creating highly scalable server-side JavaScript applications.', 'Node.js was developed and introduced by Ryan Dahl in 2009. Node.js can be used to create a variety of applications, including web apps, real-time chat apps, command-line apps, and REST API servers, among others. However, it is mainly used to build network programs such as web servers. The standard filename extension of Node.js is .js.', 'JavaScript is a widely-used programming language that almost every web application developer uses. It is very simple to locate a resource on the subject to work on JavaScript and do some basic development. Node JS is a JavaScript library extension, but it includes certain undefined utilities, such as non-blocking operating system operation, which is often critical for meeting company objectives. It may also be shown to the user who has signed in from a different system for security purposes.']",[],[],"[""Features|||JavaScript|||Node JS&&&Definition|||It is an open-source, cross-platform, interpreted, lightweight scripting programming language that is used to develop dynamic and web applications.|||It is a cross-platform, open-source JavaScript runtime environment that allows JavaScript to be run on the server.&&&Type|||It is a programming language. It works in any browser that has a proper browser engine.|||It's a JavaScript interpreter and environment with some valuable libraries that JavaScript programming can use separately.&&&Dedicated Server|||It is generally used on the client-side server.|||It is generally used on the server-side.&&&Community|||All the JavaScript is not important to the node community.|||All node projects represent the JavaScript community.&&&Running Engines|||JavaScript can be run on any engine, including Spider Monkey, V8, and JavaScript Core.|||Node JS is only supported by the V8 engine, which Google Chrome mostly uses. Any JavaScript program written with Node JS will always be run in the V8 engine.&&&Used for|||It is designed to build network-centric applications.|||It's designed for data-intensive real-time applications that run on several platforms.&&&Languages|||It's a newer version of the ECMA script that runs on Chrome's V8 engine, which is written in C++.|||It uses C, C++, and JavaScript.&&&Modules|||Few JavaScript frameworks are TypedJS, RamdaJS, etc.|||Lodash, express are examples of Nodejs modules. These all modules are to be imported from npm.&&&Companies Uses|||Various companies use JavaScript like Google, Shopify, Udacity, Sendgrid, Groupon, Okta, Instacart, etc.|||Various companies use Node Js like Netflix, Hapi, Walmart, Paypal, Linkedin, Trello, Medium, eBay, etc.""]","[""|||It is an open-source, flexible, fast, light-weighted framework.|||It allows cross-compilation.|||It supports interfaces, modules, and classes.|||It is used for both frontend and backend development so that it may run on different devices.|||It allows us to build interfaces that react whenever the user hovers the mouse over them.|||It is friendly with other languages; therefore, many other applications may use JavaScript.|||We may extend the JavaScript for writing large applications.||||||It makes use of limited libraries.|||Client-side JavaScript doesn't support writing or reading files. It has been only keeping for security purposes.|||A single error may destroy the entire website.|||It is a dynamic language so that developers may make big mistakes easily.|||It only supports the single inheritance, not multiple inheritances. Some programs might be required this object-oriented language feature.||||||js is an MIT-licensed open-source framework.|||It is a lightweight framework that includes minimum modules. Other modules may be included as per the requirement of an application.|||It's a cross-platform framework that works on Windows, MAC, and Linux.|||It is used the JavaScript language to develop server-side applications.|||js applications never buffered any type of data in applications. Node.js applications simply output data in chunks.|||The Node.js library's APIs are all asynchronous or non-blocking. It simply means that a Node.js based server never waits to return data from an API. After calling an API, the server passes on to the next one, and a Node.js notification mechanism assists the server in receiving a response from the previous API call.|||js is a quick programming execution library built on the V8 JavaScript Engine in Google Chrome.||||||One of the big disadvantages of Node.js is its lack of consistency. The API changes regularly, which increases the developers' problems because they'll have to make changes to their current code base to maintain compatibility.|||It doesn't support multi-threading programming, and it is not with the development of heavy computing applications.|||In contrast to other programming languages, JavaScript lacks a well-equipped and functional library framework. As a result, users are forced to need a common library to execute various tasks, including the process of the pictures, XML parsing, Object-Relational Mapping (ORM), and handling database operations, etc. It makes it difficult to developers to also implement basic programming tasks with Node.js.|||&&&|||JavaScript is a lightweight, cross-platform, interpreted scripting programming language that is primarily used for client-side scripting. It's built into both Java and HTML. On the other hand, Node.js is a server-side scripting language based on the Google Chrome V8 engine. As a result, it's used to build network-centric applications. It is a distributed system that is used for data-intensive real-time applications.|||JavaScript is a simple programming language that could be run in any browser that supports the JavaScript Engine. On the other hand, Node.js is a running environment or interpreter for the JavaScript programming language. It needs libraries that may be easily accessed from JavaScript programming to make it more useful.|||JavaScript can run on any engine, including Firefox's Spider Monkey, Safari's JavaScript Core, and V8 (Google Chrome). As a result, JavaScript programming is very simple to create, and any running environment is equivalent to a proper browser. On the other hand, Node.js only supports the V8 engine, which is exclusive to Google Chrome. However, written JavaScript code can run in any environment, regardless of whether it supports the V8 engine.|||A particular non-blocking task is needed to access any operating system. There are some basic objects in JavaScript, but they are all os-specific. For example, ActiveX Control is a Windows-only application. However, Node.js is granted the ability to run non-blocking tasks unique to the operating system from any JavaScript programming. There are no os-specific constants in it. Node.js is well-versed in creating a clear binding with the file system, allowing the developer to read and write to disk.|||For a single web application, JavaScript is typically used for any client-side operation. An operation may be dealing with business validation, dynamic page display at a set time interval, or a simple Ajax call. For any web application, these are used for a maximum amount of time. On the other hand, Node.js is generally used for non-blocking accessibility or execution of any operating system. On an operating system, a non-blocking operation involves generating or executing a shell script, retrieving unique hardware-related information in a single call, obtaining installed certificate details in the system, or performing a large number of specified tasks.|||JavaScript's main advantages include a wide range of interfaces and interactivity and just the right amount of server contact and direct input to visitors. On the other hand, Node.js has a node package manager with over 500 modules and the ability to handle concurrent requests. It also has the special capability of supporting micro-service architecture as well as IoT.|||""]"
122,['How to add JavaScript to html'],"['JavaScript, also known as JS, is one of the scripting (client-side scripting) languages, that is usually used in web development to create modern and interactive web-pages. The term ""script"" is used to refer to the languages that are not standalone in nature and here it refers to JavaScript which run on the client machine.']","['https://www.javatpoint.com/how-to-enable-javascript-in-my-browser', 'https://www.javatpoint.com/javascript-vs-php', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-body-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-head', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-onclick', 'https://www.javatpoint.com/how-to-enable-javascript-in-my-browser', 'https://www.javatpoint.com/javascript-vs-php', 'https://www.javatpoint.com/how-to-enable-javascript-in-my-browser']","['https://static.javatpoint.com/javascriptpages/images/how-to-add-javascript-to-html.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-javascript-to-html2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-javascript-to-html3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-javascript-to-html4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-javascript-to-html5.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-javascript-to-html6.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-javascript-to-html7.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-javascript-to-html8.png']",[],"['Adding JavaScript to HTML Pages', 'The HTML noscript Element']","['I. Embedding code:-', 'II. Inline code:-', 'III.\tExternal file:-', 'Important points']",[],"['There are following three ways in which users can add JavaScript to HTML pages.', 'We will see three of them step by step', 'We can understand this more clearly with the help of an example, how to add JavaScript to html', 'We can also define the JavaScript code in the <body> tags or body section.', ""Let's understand through an example."", ""Let's see with the help of an example, how we can add JavaScript directly in the html without using the <script>.... </script> tag."", ""Let's look at the example."", 'In this example, we will see how we can include an external JavaScript file in an HTML document.', ""Let's understand through a simple example."", ""Now let's create separate JavaScript file"", 'JavaScript files are common text files with (.js) extensions such as we created and used in the above program.', 'External JavaScript file only contains JavaScript code and nothing else, even the <script>.... </script>tag are also not used in it.', 'This element can contain any HTML element other than the <script> tag that can be included in the <HTML> element.', ""Let's understand it more clearly with the help of an example:"", ""Let's see what output we get when we run the above given program in the JavaScript enabled browser."", ""Let's run the above given program in the JavaScript enabled browser."", ""Now let's run the above program on JavaScript disabled browser""]","['JavaScript is used in several ways in web pages such as generate warning messages, build image galleries, DOM manipulation, form validation, and more.', 'Generally, this method is used when we have to call a function in the HTML event attributes. There are many cases (or events) in which we have to add JavaScript code directly eg., OnMover event, OnClick, etc.', 'Both of the above programs are saved in the same folder, but you can also store JavaScript code in a separate folder, all just you need to provide the address/path of the (.js) file in the src attribute of <script> tag.', 'The <nosscript> element provides us an alternate way to create content for the users that either have browsers that don?t support the JavaScript or have disabled JavaScript in the browser.', ""Now, let's see what output we will get when we run the same program in a JavaScript disabled browser (or in a browser that does not support JavaScript).""]","['In other words, we can say that the term scripting is used for languages that require the support of another language to get executed. For example, JavaScript programs cannot get executed without the help of HTML or without integrated into HTML code.', 'To add the JavaScript code into the HTML pages, we can use the <script>.....</script> tag of the HTML that wrap around JavaScript code inside the HTML program. Users can also define JavaScript code in the <body> tag (or we can say body section) or <head> tag because it completely depends on the structure of the web page that the users use.', 'We can also create a separate file to hold the code of JavaScript with the (.js) extension and later incorporate/include it into our HTML document using the src attribute of the <script> tag. It becomes very helpful if we want to use the same code in multiple HTML documents. It also saves us from the task of writing the same code over and over again and makes it easier to maintain web pages.', 'In the above program, we have used the javascript to print the message ""Hello World!"" and also used <nonscript> element to print the message "" Sorry, your browser may not support JavaScript! Or JavaScript is disabled in your browser"". The <nonscript> element will print this message only if JavaScript is disabled in the user\'s browser or his browser does not support JavaScript at all.']","['<!DOCTYPE html >', '<title> page title</title>', '<script>', 'document.write(""Welcome to Javatpoint"");', '</script>', '</head>', '<p>Inthis example we saw how to add JavaScript in the head section </p>', '</body>', '</html>', '<!DOCTYPE html >', '<title> page title</title>', '</head>', '<script>', 'document.write(""Welcome to Javatpoint"");', '</script>', '<p> In this example we saw how to add  JavaScript in the body section </p>', '</body>', '</html>', '<!DOCTYPE html >', '<title> page title</title>', '</head>', '<a href=""#"" onClick=""alert(\'Welcome !\');"">Click Me</a>', '<p> in this example we saw how to use inline JavaScript or directly in an HTML tag. </p>', '</body>', '</html>', '<meta charset=""utf-8"">', '<title>Including a External JavaScript File</title>', '</head>', '<input type=""button"" value=""Result"" onclick=""display()""/>', '</form>', '<script src=""hello.js"">', '</script>', '</body>', '</html>', 'function display() {', 'alert(""Hello World!"");', '<!DOCTYPE html>', '<h1>Thenoscript element</h1>', '<p>If the user have a browser with JavaScript disabled will show the text inside the noscript element and ""Hello World!"" will not be displayed.</p>', '<script>', 'document.write(""Hello World!"")', '</script>', '<noscript>Sorry, your browser may not support JavaScript! orJavaScript is disabled in your browser </noscript>', '</body>', '</html>', '<!DOCTYPE html>', '<html lang=""en"">', '<meta charset=""utf-8"">', '<title>Noscript Demo</title>', '</head>', '<div id=""greet""></div>', '<script>', 'document.getElementById(""greet"").innerHTML = ""Hello World!"";', '</script>', '<noscript> //This element will print the given message only when the execution of the  <script> tags does not take place.', '<p>Oops! This website requires a JavaScript-enabled browser.</p>', '</noscript>', '</body>', '</html>']",[],[],['|||Embedding code|||Inline code|||External file|||']
123,['How to enable JavaScript in my browser'],"['Nowadays, almost all web-developers use JavaScript in their web-pages. JavaScript is a client-side scripting language that runs on a client machine (such as a web-browser). It helps web-developers to create modern web-pages that allow users to interact directly with the web-pages, without reloading them. If JavaScript is disabled in the web-browser, the web pages may not function properly, or their functionality may be reduced or unavailable.']","['https://www.javatpoint.com/difference-between-java-and-javascript', 'https://www.javatpoint.com/how-to-add-javascript-to-html', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/full-form-of-google', 'https://www.javatpoint.com/https://www.javatpoint.com/google-chrome', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/https://www.javatpoint.com/internet-explorer', 'https://www.javatpoint.com/https://www.javatpoint.com/mozilla-firefox', 'https://www.javatpoint.com/https://www.javatpoint.com/browsers', 'https://www.javatpoint.com/difference-between-java-and-javascript', 'https://www.javatpoint.com/how-to-add-javascript-to-html', 'https://www.javatpoint.com/difference-between-java-and-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser5.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser6.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser7.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser8.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser9.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser10.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser11.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser12.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser13.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser14.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser15.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser16.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser17.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser18.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser19.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser20.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser21.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser22.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser23.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser24.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser25.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser26.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser27.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-in-my-browser28.png']",[],[],"['1. Chrome Web-browser:', '2. Opera browser:-', '3. Safari Browser:-', '4. Internet Explorer:-', '5. Firefox browser:-']",[],"[""Let's see how we can enable JavaScript in the Top Five most commonly used web-browsers by following the given instructions:"", 'The steps to enable the JavaScript in the Chrome Browser are as follows:', 'II. Now look for the ""Settings"" option and click on it as shown below:', 'IV. Now click on the ""Privacy and Security"" option.', 'V. Now click on the ""Site Settings"" option.', 'VI. Now search for the ""JavaScript"" from the following options as shown below:', 'IX. Now you can use the browser for browsing the web-pages after closing the Settings tab.', 'The steps to enable the JavaScript in the Opera Browser are as follows:', 'I. Open the Opera Browser by double-clicking on its icon and search for ""Setting"" option as shown in the below image:', 'II. Click on the ""Setting"" option and when the setting tab gets opened then search for the ""Advanced"" option and click on it:', 'III. Click on the ""Privacy and Security"" option, which is located below the ""Advanced"" option, see the following image. ', 'IV. Now open ""Site Setting"" option by clicking on the highlighted button, see the below-given image.', 'V. Now search for the ""JavaScript"" option in the ""Site Settings"" by scrolling down.', 'VIII. Now you can use the browser for browsing the web-pages after closing the Settings tab.', 'The steps to enable the JavaScript in the Opera Browser are as follows:', 'I. First of all, Open the Safari Browser by double-clicking on its icon and search for ""Setting"" option, located on the right side of the browser:', 'II. Click on the ""Setting"" option and search for the ""preferences"" option among the given options, as shown in the below image.', 'III. Now click on the Preferences option, a control panel will open, as shown below.', 'IV. now click on the ""Security"" option and click on the ""Enable JavaScript"" option, as shown in the given screenshot.', 'V. JavaScript is now successfully enabled in the browser. Now you can start using the web browser after closing the settings.', 'The steps to enable the JavaScript in the Internet explorer are as follows:', 'I. Open the Internet Explorer by double-clicking on its icon and click on the ""setting"" option, see the below image:', 'II. After clicking on the Setting option, search the ""Internet"" Option among the given options as shown below', 'III. Now click on the ""Internet Options,"" and a setting panel will open as shown below. Once the panel gets opened, click on the ""Security"" option.', 'V. Now click on the ""enable"" option given below the ""Active Scripting"" to enable JavaScript and click on ""ok.""', 'VI. JavaScript is now successfully enabled in the browser. Now you can start using the web browser after closing the settings.', 'It is one of the popular open-source browsers that was developed by the Mozilla Foundation. It uses the ""gecko"" layout engine to display web-pages.', 'Follow the given instructions to enable the ""JavaScript"" in the Firefox browser:', 'I. Open the Firefox browser by double-clicking on its icon and type the about:config"" in the search and press enter as shown below:', 'V. JavaScript is now enabled successfully in the browser. Now you can start using the web browser after closing the settings.']","['It is a free software owned by GOOGLE. Almost all updates and new source-code of Chrome comes from another Google project ""Chromium,"" which is available for free to download and is also an open-source project.', 'I. First of all, open the chrome browser by double-clicking on it and then click on the three dots sign located at the right- top in the chrome browser, as shown in the below screenshot.', 'III. When the control panel/Setting of the chrome browser gets open, click on the ""Advanced"" option located at the left side of the setting tab, as shown below.', 'VII. Now click on the ""JavaScript"" option and then click on the toggle button given in the right side of the ""Blocked"" option, as shown in the given screenshot.', 'VIII. After clicking the toggle button, the ""Allowed (recommended)"" options will appear in the place of ""Blocked,"" which confirms that JavaScript is enabled successfully in the browser as shown below:', 'VI. Once you find the ""JavaScript"" option, open it by clicking on it and click on the toggle button given in the right side of the ""Allowed (recommended)"" option, as shown in the below image.', 'VII. After clicking the toggle button, the ""Allowed"" option will appear in the place of ""Blocked,"" which confirms that JavaScript is enabled successfully in the browser as shown below:', 'Safari web-browser was developed by the ""Apple"" company. It is a graphical web-browser based on the WebKit engine. The Safari browser was first released in 2003 for the ""Mac"" operating system.', 'It was developed by the Microsoft company. You can use this browser to listen and watch streaming content, pay online, and more. The latest version of Internet Explorer is 10.', 'II. After pressing the enter button, a web-page with a warning will open. To open the ""preferences"", click on the "" Accept the Risk and Continue"" button, as shown below:', 'III. Now type the ""JavaScript"" in the Search box(Search Preference name) that appears after clicking on the ""Accept the Risk and Continue"" and look for the ""JavaScript.enabled"" option among the several options that appear, see the below image', 'IV. To enable the JavaScript, click on the button given on the right side of the ""javascript.enabled"" option, which is highlighted in the above image and after that"" false"" will change into ""true"" as shown in the below pic.']","['Opera Software was created in 1994 at the ""Telenor"" company that was one of Norway\'s largest telecommunications companies. Opera established its own company as ""Opera Software ASA"" in late 1995. It was first released to the public in 1996 with version 2.0, and this version of Opera could run only on Microsoft Windows.', 'IV. Click on the box labeled as ""Custom level"" that is highlighted in the above image. After clicking on the ""custom level"" box, another panel of ""Security Setting"" will open. Now search for the ""Scripting"" option by scrolling down the given options.']",[],[],[],[]
124,['What is the difference between Java and JavaScript'],"['Many users think that Java and java-script are similar languages, or they are two different names of the same language. But the user has to clear his doubt that java-script and java language are not similar languages, and java-script has nothing to do with the java programming language. The main reason for introducing the scripting language as JavaScript is the popularity of java programming language that was at its peak at that time. To get the advantage of the popularity of the term ""java"" in the java programming language, it was introduced as JavaScript.']","['https://www.javatpoint.com/how-to-call-javascript-function-in-html', 'https://www.javatpoint.com/how-to-enable-javascript-in-my-browser', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/how-to-call-javascript-function-in-html', 'https://www.javatpoint.com/how-to-enable-javascript-in-my-browser', 'https://www.javatpoint.com/how-to-call-javascript-function-in-html']",['https://static.javatpoint.com/javascriptpages/images/difference-between-java-and-javascript.png'],[],[],[],[],"[""To understand the difference between Java and JavaScript language, let's look at some of the key differences between them:"", 'Let us see how programs are written in both the languages:', 'Program to print ""Hello World"" in Java', 'Hell World', 'Program to print ""Hello World"" in JavaScript']",[],[],"['class A', 'public static void main(String args[]){', 'System.out.println(""Hello World"");', '<!DOCTYPE html>', '<h2> Welcome to JavaScript Tutorial</h2>', '<script type= ""text/javascript"">', 'document.write(""Hello World!"");', '</script>', '</body>', '</html>']",[],"['Java Language|||JavaScript Language&&&1.|||It is a Programming language.|||It is a scripting language.&&&2.|||Java is a pure Object Oriented Programming Language.|||JavaScript is Object-Based Language.&&&3.|||Java is a Standalone language.|||JavaScript is not a standalone language, as it needs to be integrated into an HTML program for execution.&&&4.|||Java is a strongly typed language, which means that the user has to decide the data type of the variable before declaring and using it.|||Example ""int a"", the variable ""a"" can store the value of integer type only.||||||JavaScript is a loosely typed language, which means that the user does not have to worry about the data-type of the variable before and after the declaration.|||Example ""var a"", the ""a"" variable can store the value of any data-type.|||&&&5.|||Java program should be compiled before execution.|||JavaScript needs to be integrated into the HTML program for the execution.&&&6.|||The web-browser is not required to run java programs.|||The web-browser is essential to run the JavaScript programs.&&&7.|||It is one of the complex languages to learn.|||It one of the easy languages to learn.&&&8.|||In Java, by utilizing the Multi-threading, users can perform complicated tasks.|||In JavaScript, user is not able to perform complicated tasks.&&&9.|||It requires a large amount of memory.|||It does not require that amount of memory.&&&10.|||Java programming language was developed by the ""Sun Microsystems.""|||JavaScript programming language was developed by the ""Netscape.""&&&11.|||In Java programming language, programs are saved with the "".java"" extension.|||On the other hand, programs in JavaScript are saved with the "".js"" extension.&&&12.|||Java is stored on the host machine as the ""Byte"" code.|||JavaScript is stored on the Host machine (client Machine) as the ""source"" text.']",[]
125,['How to call JavaScript function in html?'],"['There are many ways to call a JavaScript function in the HTML document, and it is also not a difficult task. First, we have used one of the easiest ways to call a JavaScript function in HTML document:']","['https://www.javatpoint.com/how-to-write-a-function-in-javascript', 'https://www.javatpoint.com/difference-between-java-and-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/how-to-write-a-function-in-javascript', 'https://www.javatpoint.com/difference-between-java-and-javascript', 'https://www.javatpoint.com/how-to-write-a-function-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-call-javascript-function-in-html.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-call-javascript-function-in-html2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-call-javascript-function-in-html3.png']",[],[],['Calling a function using external JavaScript file'],[],"[""To understand it more clearly let's see the given program:"", 'Explanation of program', ""Let's understand it with help of a program:"", 'Explanation of program', 'In the above program first, we have created a JavaScript file and defined our function in it and saved it with the .js extension.', 'Function.js', 'Now click on the given button:']","['In the above-given program, we have created a simple HTML document. Inside the head section of the HTML document, we have defined a function (e.g myfunction();) inside the script tags <script>...</script>.', 'We can also call JavaScript functions using an external JavaScript file attached to our HTML document. To do this, first we have to create a JavaScript file and define our function in it and save itwith (.Js) extension.']","[""In this method, we will create and define a function in the HTML document's head section. To invoke this function in the html document, we have to create a simple button and using the onclick event attribute (which is an event handler) along with it, we can call the function by clicking on the button."", 'On the other hand, inside the body section, we displayed some text and created a button. To call our function, we have used the onclick attribute along with the button and when the user clicks on that button our function gets executes and display an alert message, as you can see in the output.', 'Once the JavaScript file is created, we need to create a simple HTML document. To include our JavaScript file in the HTML document, we have to use the script tag <script type = ""text/javascript"" src = ""function.js""> and in the ""src"" attribute we have to provide the path to our JavaScript file where it is stored. After linking the external JavaScript file to the HTML document, we can create a button and call the function using the ""onclick"" attribute with it.', 'After creating the JavaScript file, we have created an HTML document and linked our JavaScript file using <script type = ""text/javascript"" src=""function.js""></script>. Because we have stored our HTML document and JavaScript file in the same folder, we have just named our JavaScript file in the ""scr"" attribute instead of providing the full path in the head section.', 'Inside the body section, we displayed some text and created a button. To call our function, we have used the onclick attribute along with the button and when the user clicks on that button our function gets executes and display an alert message, as you can see in the output.']","['<script type = ""text/javascript"">', 'functionmyfunction() {', 'alert(""how are you"");', '}', '</script>', '</head>', '<p>Click the following button to see the function in action</p>', '<input type = ""button"" onclick = ""myfunction()"" value = ""Display"">', '</body>', '</html>', '<script type = ""text/javascript"">', 'function myfunction() {', 'alert(""how are you"");', '}', '</script>', '<p>Click the following button to see the function in action</p>', '<input type = ""button"" onclick = ""myfunction()"" value = ""Display"">', '</body>', '<script type = ""text/javascript"" src=""function.js""></script>', '</head>', '<p>Click the following button to see the function in action</p>', '<input type = ""button"" onclick = ""myfunction()"" value = ""Display"">', '</body>', '</html>', 'functionmyfunction()', 'document.write(""welcome to Javatpoint"");', '}', '<script type = ""text/javascript"" src=""function.js""></script>', '</head>', '<p>Click the following button to see the function in action</p>', '<input type = ""button"" onclick = ""myfunction()"" value = ""Display"">', '</body>']",[],[],[]
126,['How to write a function in JavaScript'],"['A JavaScript function is a block of code that consists of a set of instructions to perform a specific task. A function can also be considered as a piece of code that can be used over again and again in the whole program, and it also avoids rewriting the same code. It also helps programmers/coders to divide a huge program into several small functions.']","['https://www.javatpoint.com/is-javascript-case-sensitive', 'https://www.javatpoint.com/how-to-call-javascript-function-in-html', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/is-javascript-case-sensitive', 'https://www.javatpoint.com/how-to-call-javascript-function-in-html', 'https://www.javatpoint.com/is-javascript-case-sensitive']","['https://static.javatpoint.com/javascriptpages/images/how-to-write-a-function-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-write-a-function-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-write-a-function-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-write-a-function-in-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-write-a-function-in-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-write-a-function-in-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-write-a-function-in-javascript7.png']",[],"['Types of Functions', 'Function With Parameters', 'Function with return statement']","['Here we are going to learn, how to write a user-defined function in JavaScript:', 'How to call the function', 'Example']","['Note: As you can see in the program, we have used the ""return"" statement as the last instruction in the body of the ""completeString(string1, string2) function.']","['There are two types of functions in JavaScript like other programming languages such c, c++, and java etc.', 'To create a function in JavaScript we have to use the""function "" keyword before writing the name of our function as you can see in given syntax:', 'Syntax of creating function', 'We can call the function when we want to use the function in the program by writing its name as you can see below:', ""Let's see a program in which, we will create a function and use it in the program."", 'To call the function somewhere else in the script, we just have to write its name as you can see in the given example:', 'Now click on the given button', 'Syntax of creating a function with parameters', 'We can understand how to use parameters with function more easily with the help of an example:', 'Now click on the given button.', 'Syntax of function with return statement', 'We can understand how to use the return statement in a function with the help of an example:', 'Explanation of the program', 'Function 1', 'Click on the given button.']","['Before using a function or we can say before calling a function in our program we have to define its definition in between the curly braces. As per your requirement, we can leave the parameter list blank as you can see in the syntax given above.', 'In this program, we have created two functions: combinestring(string1, string2), secondFunction(), and defined their definition in the head section of the HTML document.', 'To call the ""secondfunction(),"" we have created a button for the user using the form tag. When the user clicks on that button, our secondfucntion() will be triggered.']","['In the above-given program, we have created a function with ""myfirstFunction"" name and in the definition of this function, we displayed a message ""This is just a simple user-defined function"" by using the document.write(); function. To print that message, we first need to call the function as you can see in program.', 'The function we have used in our program is without parameters (or we can say parameter less) because we have not given any parameter in the parameters list and left it empty. But we can also use parameters with function and we can use any number of parameters in our function but they must be separated by comma. These parameters are captured by the function and later any operation can be performed on these parameters inside the function.', 'In this program, we created a function named ""sayHello ()"" with three parameters: name, age, and gender, and defined it in the head section of the HTML document. To use this function, we also created a button using the form tag in the program\'s body section and pass the values as arguments. When the user clicks that button, our function is called and gets executed.', ""In JavaScript, we can make functions that are able to return a value. To create such type of function, we have to use the return statement, but it must be the last statement in the body of the function (or in the definition of the function). Another essential thing to remember is that we can use only one return statement in a function. If we try to use several return statements in a function, only one return statement is considered, which is reached by the program's control first."", 'In the body of ""combineString(string1, string2)"" function, we created a variable with the name ""completestring"" to store the string after combining both strings. To return the value stored in this variable, we have used a return statement as you can see in the program.', 'In the body of secondfunction(), we have created a variable that is ""result"". We have called our first function ""completeString(string1, string2)"". When the ""secondfunction()"" is called the ""completeString(string1,string2) is also called and the result of this function is stored in the variable ""result"".', 'When the execution of the ""completeString(string1, string2) function gets completed, the returned value/data gets stored in the ""result"" variable and in the body of ""secondfucntion()"" function, we have displayed the value stored in the variable ""result"" by using document.write() statement.']","['Function functionname( parameters list)', 'Lines of code to be executed/set of instructions to be executed in order to perform a specific task.', '<scripttype=""text/javascript"">', 'function Hello(){', 'alert(""Hi, there"");', '</script>', 'Hello();', '<title>Functions!!!</title>', '<script type=""text/javascript"">', 'functionmyfirstFunction()', '{', 'document.write(""This is just a simple user-defined  function.<br />"");', '}', 'myfirstFunction();', '</script>', '</head>', '</body>', '</html>', '<script type = ""text/javascript"">', 'functionsayhi() {', 'document.write (""Hello there!"");', '}', '</script>', '</head>', '<p>Click the given button to call the function</p>', '<input type = ""button"" onclick = ""sayhi()"" value = ""Say Hello"">', '</form>', '</body>', '</html>', 'functionfunctionname( parameter1,parameter2,....parameterN)', 'Lines of code to be executed/set of instructions to be executed in order to perform a specific task.', '<script type = ""text/javascript"">', 'functionsayHello(name, age,gender) {', 'document.write (name + "" is "" + age + "" years old"" + "" and gender is "" + gender);', '}', '</script>', '</head>', '<p>Click the following button to call the function</p>', '<input type = ""button"" onclick = ""sayHello(\' Isabella\', 23,\'female\')"" value = ""Say Hello"">', '</form>', '</body>', '</html>', 'Function functionname(arg1, arg2)', 'Set of instructions to be executed', 'return val1;', '<script type = ""text/javascript"">', 'functioncombinestring(string1, string2) { // function1', 'varcompleteString;', 'completeString = string1 + string2;', 'returncompleteString;', '}', 'functionsecondFunction() {', 'var result;', ""result = combinestring('Java', 'Script');"", 'document.write (result );', '}', '</script>', '</head>', '<p>Click the following button to see the function in action</p>', '<input type = ""button"" onclick = ""secondFunction()"" value = ""Call Function"">', '</form>', '</body>', '</html>']",[],[],['|||Pre-defined Functions|||User-defined Functions|||']
127,['Is JavaScript case sensitive?'],"['Yes, it is a case sensitive language, which means the identifiers, keywords, variables, and function names must be written with a consistent capitalization of letters.']","['https://www.javatpoint.com/how-does-javascript-work', 'https://www.javatpoint.com/how-to-write-a-function-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/how-does-javascript-work', 'https://www.javatpoint.com/how-to-write-a-function-in-javascript', 'https://www.javatpoint.com/how-does-javascript-work']",['https://static.javatpoint.com/javascriptpages/images/is-javascript-case-sensitive.png'],[],[],[],[],"['What does it really mean?', 'We can understand it more clearly with the help of an example:', 'Explanation of program']","['Like many other programming languages, JavaScript has a set of rules for writing JavaScript programs or codes. Using the correct capitalization for naming keywords, identifiers, functions, and variables is one of them that must be followed.', 'It means that if you have created a variable named ""temp"" and while printing the value of this variable, you will write ""Temp"" instead of ""temp"", it will not work properly and somehow will generate an error.']","['In the above program, we created two variables Marks and marks and assigned them 0,100 values. When printing the value of the variable ""marks"" it will print 100 instead of 0, because, in JavaScript, marks and Marks are not the same thing even if both variables are spelled the same.']","['<!DOCTYPE html>', '<body>', '<h3>JavaScript is case Sensitive language</h3>', '<pid=""demo""></p>', '<script>', 'var marks,Marks;', 'marks=0; //variable 1', 'Marks=100; // variable 2', 'document.write(Marks);', '</script>', '</body>', '</html>']",[],[],[]
128,['How does JavaScript Work?'],"[""JavaScript is a client-side scripting language and one of the most efficient, commonly used scripting languages. The term .client-side scripting language means that it runs at the client-side( or on the client machine) inside the web-browsers, but one important thing to remember is that client's web-browser also needs to support the JavaScript or it must be JavaScript enabled. Nowadays, most of the modern web browsers support JavaScript and have their JavaScript engines. For example, Google Chrome has its own JavaScript engine called V8.""]","['https://www.javatpoint.com/how-to-debug-javascript', 'https://www.javatpoint.com/is-javascript-case-sensitive', 'https://www.javatpoint.com/https://www.javatpoint.com/browsers', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/browsers', 'https://www.javatpoint.com/https://www.javatpoint.com/google-chrome', 'https://www.javatpoint.com/https://www.javatpoint.com/nodejs-tutorial', 'https://www.javatpoint.com/how-to-debug-javascript', 'https://www.javatpoint.com/is-javascript-case-sensitive', 'https://www.javatpoint.com/how-to-debug-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-does-javascript-work.png', 'https://static.javatpoint.com/javascriptpages/images/how-does-javascript-work2.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-does-javascript-work3.png']",[],[],[],"['Note: It is not the exact abstract syntax tree, but it is the pictorial representation of the Abstract Syntax Tree.']","['Some other web-browsers with their JavaScript engines', 'With the help of following example, we can understand how JavaScript works:', 'In this example, we have created a simple HTML document and added our JavaScript code in it.', 'As we can see in the output, the programs run fine on our web browser.', 'Here another question that comes out ""how the browser understands the JavaScript code and runs it.""', ""Now let's see how the JavaScript engine handles and runs .js code."", 'We can understand how a typical JavaScript engine works with help of a diagram:', 'In a standard JavaScript engine, the source code goes through several steps and gets executed as you can see in the above given diagram.', 'Let us understand each of these steps in more detail.', 'Step 1: Parser', 'In short, we can say that it parses JavaScript code.', 'Step 2: AST', 'We can easily understand what is AST with help of following example.', ""Let's suppose we have a JavaScript program as given below:"", 'Step 3: Conversion to Machine code', 'Step 4: Machine code']","['It totally depends on the web-developers how they use JavaScript and for what, because it can be used for several things in web development. One of the most common uses of JavaScript is to validate data given by the user in the form fields.', 'Mostly every web browsers nowadays have their own JavaScript engines, as we have discussed above. So, it is the JavaScript engine that understands the code and runs it.', ""Whenever we run a JavaScript program inside a web browser, JavaScript code is received by the browser's engine and the engine runs the source code to obtain the output."", 'Once the parser checks all JavaScript codes and gets satisfied that there are no mistakes/errors in the code, it creates the data structure called AST (it stands for Abstract Syntax Tree).', 'Once the parser checks the above JavaScript code, it will create a data structure called AST as we have already discussed above. The created AST (Abstract Syntax Tree) looks like the given image.', 'Once the Abstract Syntax Tree is created by the parser, the JavaScript engine converts the JavaScript code into the machine code (or in the language that machine can understand).']","['In the above program, we just displayed a alert message to the user by using the ""alert()"" method that is a pre-defined method of JavaScript. We also used the ""console.log();"" method and passed ""JavaScript"" as the String and in the inspect mode we can see ""JavaScript"" in the console as shown in the below output.', 'In this case, we have used a chrome browser to run our program that has the ""V8"" JavaScript engine, which is also used for creating the Node.js. As we already know, JavaScript is an interpreted language that means it gets executed in line by line manner (or which means the JavaScript engine converts the Js code line by line and runs in the same manner instead of converting the whole program once).', 'This is the first stage of the engine, every time we run a JavaScript program, our code is first received by the ""parser"" inside the JS engine. The parser\'s job is to check the JavaScript code for syntactic errors in line by line manner because JavaScript is an interpretive scripting language, so whenever an error is detected by the parser, it throws a kind of error and stops execution of the code.', 'When the program written in the JavaScript gets converted in the machine language (or in byte code), the converted code is sent to the system for execution, and finally, that byte code run by the system/engine just like we observe in our first example.']","['<!DOCTYPE html>', '<html lang=""en"">', '<meta charset=""utf-8"">', '<title>JavaScript Working Process</title>', '</head>', '<h1>This how javascript works</h1>', '<script>', 'alert(""Hi,Their"");', 'console.log(""JavaScript"");', '</script>', '</body>', '</html>', 'function fun(x) {', 'if (x > 15) {', 'var a = 4;', 'return a * x;', 'return x + 10;']",[],['|||Web Browser|||JavaScript engines&&&1.|||Edge|||Chakra&&&2.|||Safari|||JavaScript Core&&&3.|||Firefox|||Spidermonkey'],[]
129,['How to debug JavaScript?'],"['Before understanding \'how to debug JavaScript\', we have to understand the term ""debugging"".']","['https://www.javatpoint.com/how-to-enable-javascript-on-android', 'https://www.javatpoint.com/how-does-javascript-work', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/how-to-enable-javascript-on-android', 'https://www.javatpoint.com/how-does-javascript-work', 'https://www.javatpoint.com/how-to-enable-javascript-on-android']",['https://static.javatpoint.com/javascriptpages/images/how-to-debug-javascript.png'],[],[],"['What is Code Debugging?', 'JavaScript Debuggers', 'Explanation of program', 'Chrome', 'Firefox', 'Edge', 'Opera', 'Safari']",[],"['In short, we can say that Code Debugging is a process of finding and correcting the programming errors.', 'Generally, we can open the built-in JavaScript debugging with F12 Key to display the JavaScript values by using ""console"".', 'The console.log () Method', 'We can use the console.log() method for displaying the JavaScript values only if the browser supports debugging.', 'Syntax of console method', 'We can understand it more clearly with the help of an example:', 'How to set breakpoints?', 'The debugger Keyword', ""Let's see an example with practical"", 'Let us see how you can open the console on different modern browsers', 'These are the following five major modern browsers that support debugging.']",[],"[""While coding or writing the program, we can make many mistakes, such as logical errors, syntax errors, etc. A debugging allows us to find the location/point where an error has occurred because in the debugging, we can execute our code as one line at a time. Once we find the point where we have made a mistake, we can make appropriate changes to correct the mistakes. The debug tools also allow us to make temporary changes to the program's code. This entire process of correcting a code after finding out the errors is `QAZ!qknown as debugging."", ""As it is evident that debugging is not an easy task because it requires a lot of practice and experience, so fortunately all modern web-browsers have their own built-in Debuggers. The web-browser gives us the control to turn on or off the Debugging whenever we wanted to use it and it also allows us to set breakpoints (where the execution of the program's code can stop) and we can examine the variable when the code is executing."", ""While using a debugging, we can set the breaking points in the program's code of the JavaScript. When the control reaches any breaking point, the execution of the program gets stopped and allows us to examine the JavaScript values. Once we examined the JavaScript values and are satisfied, we can resume the execution of the program by pressing the play button."", 'We can stop the execution of the program on any line by using the ""debugger;"" keyword. However, this keyword will work only if the debugger function is available. Also, we can check the JavaScript values if the debugger function is available. Once we are done with examining the JavaScript values, we can resume the execution and can search for other mistakes to correct them.', 'In above program, we have created a variable x in which we have multiplied 15 into 5 and used the debugger keyword for setting up a breaking point. When we perform the debugging process, the execution of program will stop at that line, and we can examine the value. If any changes are not required, then we can resume the execution.']","['<script>', 'z = x + y;', 'console.log(c);', '</script>', '<!DOCTYPE html>', '<h1>This is my first web page</h1>', '<script>', 'z = x + y;', 'console.log(c);', '</script>', '</body>', '</html>', '<script>', 'var x = 15 * 5;', 'debugger;', 'document.getElementById(""demo"").innerHTML = x;', '</script>', '<!DOCTYPE html>', '</head>', '<p id=""demo""></p>', '<p>With the debugger turned on, the code below should stop executing before it executes the third line.</p>', '<script>', 'var x = 15 * 5;', 'debugger;', 'document.getElementById(""demo"").innerHTML = x;', '</script>', '</body>', '</html>']",[],[],"['|||First of all open the console in the chrome by following the given steps.|||Once the console is opened, we can perform the debugging process.|||While the debugging process, the execution of the programs will stop on the line where we have created a breaking point by using the ""debugger"" keyword and it also provides the essential information about the JavaScript values. In the below image, you can see the how console and debugging process looks.||||||Open the browser by double clicking on its icon.|||From the menu, select ""More tools"" option.|||From tools, choose ""Developer tools"" options.|||Finally, select Console.||||||Open the Firefox browser by double clicking on its icon.|||From the menu, select ""Web Developer"" option.|||Finally, select ""Web Console"".||||||Open the Edge browser by double clicking on its icon.|||From the menu, select ""Developer Tools"" option.|||Finally, select ""Console"".||||||Open the Opera browser by double clicking on its icon.|||From the menu, select ""Developer"" option.|||From ""Developer"", select ""Developer tools"" option.|||Finally, select ""Console"".||||||Go to Safari, Preferences, Advanced in the main menu.|||Check ""Enable Show Develop menu in menu bar"".|||When the new option ""Develop"" appears in the menu:|||Choose ""Show Error Console"".|||']"
130,['How to Enable JavaScript on Android?'],"['If you are a Smartphone user, it is quite possible that your Smartphone may work on Android OS.']","['https://www.javatpoint.com/what-is-a-promise-in-javascript', 'https://www.javatpoint.com/how-to-debug-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/internet', 'https://www.javatpoint.com/https://www.javatpoint.com/google-chrome', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/android-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/browsers', 'https://www.javatpoint.com/what-is-a-promise-in-javascript', 'https://www.javatpoint.com/how-to-debug-javascript', 'https://www.javatpoint.com/what-is-a-promise-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-on-android.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-on-android2.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-on-android3.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-on-android4.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-on-android5.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-on-android6.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-enable-javascript-on-android7.png']",[],[],[],"['Note: To Disable the JavaScript in the Google chrome on Android, you can use the same procedure with a slight change, as shown in the last step, tape on the toggle button again but this time for disabling the JavaScript in the browser.']","['Let us see how we can enable the JavaScript in Chrome Browser that is installed on a Smartphone powered by Android OS:', 'Steps To Enable JavaScript in Chrome Browser on Android', 'First of all, open the chrome browser by going to ""Apps"" and click on the Google Chrome App as shown in the following image:', 'Once the Chrome App gets Opened, Touch/click on the three Dots Sign given on the left top-side of the Chrome App asshown below:', 'When side menu gets opened, search for ""SETTING"" from the following options and touch/tape on it.', 'When ""Setting"" Option gets opened, look for the ""Site Setting"" option mostly given below the ""Advanced"" option and touch on it.', 'Now search the ""JavaScript"" option among the following options and touch on it as shown in the below image:', 'Now touch on the Toggle button given on the right side of the ""JavaScript"" option as shown in the below image:']",[],"[""However, if your phone's browser is configured to disable JavaScript, you will certainly experience an unsatisfactory web browsing. So, it is necessary to use the web browser that supports JavaScript because JavaScript compatibility is essential for viewing the website's magnitude over the internet. Nowadays, almost every Smartphone that is powered by Android Os comes with a pre-installed Chrome Browser."", 'Once you tape on the toggle button, the JavaScript ""Allowed"" will appear in the place of JavaScript ""Blocked"". Now JavaScript is enabled in the Browser and you can start browsing the internet after closing the settings by taping on ""Back"" button for three times approx.']",[],[],[],[]
131,['What is a promise in JavaScript?'],"['The Promise in JavaScript may look quite complicated to understand at first sight, but in reality, it is quite simple and is not rocket science. In JavaScript, a promise is just like a promise that you make in real life to show that you are committed to doing something.']","['https://www.javatpoint.com/what-is-hoisting-in-javascript', 'https://www.javatpoint.com/how-to-enable-javascript-on-android', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/browsers', 'https://www.javatpoint.com/what-is-hoisting-in-javascript', 'https://www.javatpoint.com/how-to-enable-javascript-on-android', 'https://www.javatpoint.com/what-is-hoisting-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/what-is-a-promise-in-javascript.jpg', 'https://static.javatpoint.com/javascriptpages/images/what-is-a-promise-in-javascript2.jpg']",[],[],[],['Note: You can modify the program code if you want to execute the else part of the Promise by changing the condition to true or false.'],"[""Let's see another example to understand the concept of Promise in JavaScript:"", 'Syntax of Promise in JavaScript', ""Let's see how to create and use a promise in JavaScript?"", 'First of all, we have to create a promise using the constructor:', 'The Promise has two parameters as we already have seen the syntax of the Promise:', 'Here is the last part that is the condition. If the condition is satisfied, the Promise will be resolved; otherwise, Promise will be rejected.', ""So here is our first Promise. Now let's use it."", 'The then() method', 'The .catch(); method', 'We can understand how promise works more easily with the help of the following example:', 'Explanation of the program', 'To see the output in the console, press the ""f12"" key to open the inspect mode in the web browser.']","['As we already discussed above, for a promise, there are two main cases: one for the resolved and another for the rejection. When the Promise gets resolved, something will happen next that depends on what we want to do with the resolved Promise.', 'This "".then();"" method is only called when the Promise is resolved( completed successfully), and what we passed in it will be displayed. For example, we can pass a message in it for the user.', 'This method is called when the promise is rejected (or failed). And we can also pass a message in it for the user. We can write the catch method just after the ""then ()"" method.']","['For example, I promise to get good marks in mathematics, and then this Promise has two outcomes, either it will be fulfilled (or resolved) or not fulfilled (or be rejected). So if I get good marks, the Promise is resolved, but if I fail to get good marks, it will not be resolved because I could not keep my Promise.', 'However, in JavaScript, a promise has three outcomes; Promise gets resolved, gets rejected, or pending state, which means the Promise is not completed yet but may get completed after some time, so it is not rejected till now and is in the pending state.', ""Suppose, we have made a request to fetch some data from the server by using the Promise if we get that data from the server successfully, the Promise will be considered as resolved successfully (or completed), but in case, we don't get that data from the server due to any reason, that means the Promise was rejected or not completed."", 'So if the Promise gets resolved, then we will get the message passed in the "".then()"" method on the screen, but if the Promise gets rejected then, we will get the message we passed in the "".catch()"" method. This means in both cases; we will get different messages on the screen.', 'In the above program, we have created a promise using the constructor and passed two parameters resolve, reject. Inside the Promise definition, we also have created a variable ""condition"" and assigned the value 9 to it. In addition, using the (if) statement, we have checked the value of the variable. If the condition gets satisfied, the ""if"" part will execute and promise get resolved (the then() method will be called too), if the condition does not get satisfied, the else part will be executed, and Promise gets rejected(then catch() will be executed).']","['Let p= new Promise((resolve,rejected)) =>{', 'Instructions', 'constPromise =newPromise', 'constPromise =newPromise((resolve, reject)=>{', 'Condition', 'constPromise =newPromise((resolve, reject)=>{', 'let condition;', 'if(condition is met){', ""resolve('Promise is resolved successfully.');"", ""reject('Promise is rejected');"", 'myPromise.then();', 'myPromise.then((message)=>{', 'console.log(message);', 'myPromise.then((message)=>{', 'console.log(message);', '}).catch((message)=>{', 'console.log(message);', '<!DOCTYPE html>', '<html lang=""en"">', '<script>', 'const myPromise = new Promise((resolve, reject) => {', 'let condition=9;', 'if(condition<0) {', ""resolve('Promise is resolved successfully and then() menthod will be called');"", '} else {', ""reject('Promise is rejected and catch() medhod will be called');"", 'myPromise.then((message) => {', 'console.log(message);', '}).catch((message) => {', 'console.log(message);', '</script>', '</body>', '</html>']",[],[],[]
132,['What is hoisting in JavaScript?'],"['As we all know, the variable declaration is one of the basic and essential aspects of any programming language such as C language, C++, etc. However, JavaScript has a small odd, known as Hoisting, which can turn a flawless-looking declaration into a subtle bug.']","['https://www.javatpoint.com/what-is-vanilla-javascript', 'https://www.javatpoint.com/what-is-a-promise-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/c-programming-language-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-hoisting', 'https://www.javatpoint.com/what-is-vanilla-javascript', 'https://www.javatpoint.com/what-is-a-promise-in-javascript', 'https://www.javatpoint.com/what-is-vanilla-javascript']","['https://static.javatpoint.com/javascriptpages/images/what-is-hoisting-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/what-is-hoisting-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/what-is-hoisting-in-javascript3.png']",[],['Hoisting'],[],"['Note: The important thing to remember is that in JavaScript, function declaration and variable declaration are only hoisted, not initialization.', 'Note:Another essential thing to remember is that in the backend, JavaScript first declares the variables, functions, and after that initialize them. However, undeclared variables do not exist in the JavaScript until the code assigning them gets executed. So when assigning values to any of the undeclared variables, they are converted as global variables when the assigned code is executed. Therefore we can say that all undeclared variables are global variables.']","[""Due to the concept of hoisting in JavaScript, we can call a function even before we define the function definition in our program's code."", 'Let us understand what precisely this is:', 'This is the following sequence mostly in which variable declaration and initialization occur.', '1. Declaration -> 2.Initialisation/Assignment ->3. Usage', 'But as we all aware that JavaScript allows us to declare and initialize the variables simultaneously. This is one of the most common patterns used:', 'Explanation of the program', 'Inside the definition of the ""fun(),"" function, we simply printed the value of both variables.']",[],"[""In JavaScript, Hoisting is a kind of default behavior in which all the declarations either variable declaration or function declaration are moved at the top of the scope just before executing the program's code. However, it can be considered an advantage because all functions and variable declarations are placed to the top of their scope no matter where they are all declared anywhere in the whole program, even regardless of whether they are declared global or local."", 'In simple words, we can say that we can use the variables and functions in JavaScript before declaring them because as we discussed above JavaScript compiler moves the declarations of all the variables and functions at the top of their scope so that there will not be an error of any kind. The concept of JavaScript of moving all declarations of the variables and functions to the top of their scope by compiler itself just before the execution of code is known as Hoisting.', 'In the above program we created two functions called ""codeHoist();""and ""fun();"" using the function keyword. In the definition of the ""codeHoist(),"" we have declared variable ""b"" using let Keyword and also assigned the value as 50. We have another variable, ""a"" that we left undeclared and assigned value 11 to it.', 'At the time of function calling the function ""fun();"" will print the value of variable \'a\' that we left undeclared in the definition of function ""codeHoist();"" but it will not print the value of the variable that we declared using the let keyword. This happens because the scope of the variable \'a\' is changed to global by the JavaScript itself (or we can say variable a is converted to a global variable) that\'swhy the function ""fun();"" isable to print the value of the variable. But the function ""fun();"" isnot able to print the value of variable b because of declaring it using the ""let"" keyword due to which its scope gets confined to function definition, and it is not available for any outsider functions.']","['<!DOCTYPE html>', '<head><p>Life Cycle Of A Variable.</p>', '</head>', '<script>', 'let a;          // Declaration', 'a = 199;      // Assignment', 'document.write(a);  // Usage', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<script>', 'functioncodeHoist(){', 'a = 11;', 'let b = 50;', 'codeHoist();', 'function fun(){', 'document.write(a); // 11', 'document.write(b); // ReferenceError : b is not defined', '</script>', '</body>', '</html>', 'functioncodeHoist(){', 'a = 10;', 'let b = 50;', 'function fun(){', 'document.write(a);', 'document.write(b);']",[],[],[]
133,"['What is ""Vanilla JavaScript""?']","['The term vanilla script is used to refer to the pure JavaScript (or we can say plain JavaScript) without any type of additional library. Sometimes people often used it as a joke""nowadays several things can also be done without using any additional JavaScript libraries"".']","['https://www.javatpoint.com/how-to-add-a-class-to-an-element-using-javascript', 'https://www.javatpoint.com/what-is-hoisting-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/jquery-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/how-to-add-a-class-to-an-element-using-javascript', 'https://www.javatpoint.com/what-is-hoisting-in-javascript', 'https://www.javatpoint.com/how-to-add-a-class-to-an-element-using-javascript']",[],[],[],"['Why should you learn vanilla JS?', 'Disadvantages of the Vanilla Script']",[],"[""Let's have a look at some big websites that are currently using the vanilla JavaScript:"", 'These following websites are currently using vanilla JavaScript, and these websites also mentioned on vanilla JavaScript home page.', 'a. Web-performance ', 'b. User Experience', 'c. It makes working with frameworks easier as well', 'Some other important advantages of the vanilla script are as follows:', 'We can insert the JavaScript in any of the web-pages, but in another scripting language, we cannot do so. For example PHP', 'We can also use it in several different applications because it supports other languages such as PHP and Pearl etc.']","['The vanilla script is one of the lightest weight frameworks ever. It is very basic and straightforward to learn as well as to use. You can create significant and influential applications as well as websites using the vanilla script.', 'The team of developers that created the vanilla JavaScript is continuously working on it to improve it and make it more useful for the web-developers.', 'It is also quite possible that most people cannot believe that the number of websites that use vanilla JavaScript is much higher than the number of websites that use JQuery.', 'This the very common question asked by the beginners that, when there are already so many other powerful frameworks and libraries available, why they should choose to learn vanilla Js and use it.', 'There are several reasons for choosing the vanilla js to learn and use it in our projects. Here we are discussing the following three main and most important of them.', 'In case, if any developer still wants to use any of the other frameworks, it makes working with them more comfortable as well. As we all aware of how hard it is to get started with a framework.', ""Since we all know that the execution of the JavaScript is done on the client-sideso it reduces the overall demand for server use. Also, the simple application doesn't require the involvement of the server at all."", 'With the help of JavaScript, we can create an excellent quality of features such as drag &drop, and components like a slider. This can impact the user experience on the website in a positive way.', 'Since its execution occurs on the client-side, it does not require any kind of external resources, its speed is excellent. The speed of JavaScript also does not get affected by the calls to a back-end server.']","[""This is much better for web performance than many other frameworks and libraries, as it is the most expensive and important part of the front-end stack. Vanilla js code needs to be compiled and parsed, unlike HTML and CSS files, which are available to use only when they're downloaded. A file of js with a size of 50kb has a much more significant impact on web performance than the same size of HTML and CSS files."", 'It provides an effortless but user-friendly developing experience.While developing an application or website using JavaScript, a developer just needs to open the text editor and can begin coding. There is no need for the developer to perform troublesome steps like npm install, compilation steps, and no build, etc.', ""There's a lot of assumed knowledge in the documentation, and understanding how all available tools works makes it quite easier to learn. A lot of beginners having little knowledge try to learn a framework, no wonders they get stuck somewhere after some time they quit focusing on the fundamentals of the Vanilla js. When they get comfortable, they again start learning frameworks, and this time they get things much quicker.""]",[],[],[],"['|||Interoperability:-||||||Server Load:-||||||Rich interfaces:-||||||Speed:-||||||One of the most significant disadvantages of the vanilla script is client-side security since we all know that the code of JavaScript is viewable at the client-side. Hence, anyone can modify it and use it as a weapon or tool for malicious purposes.|||Another major disadvantage of JavaScript isthat it lacks Debugging Facility.|||We cannot use it for network-based applications because there is no such kind of support available.|||The vanilla script also does not have some capabilities such as multiprocessors, and multithreading, etc.|||It also does not allow reading and writing filesfor security reasons.|||&&&|||Facebook|||Google|||YouTube|||Yahoo|||Wikipedia|||Windows Live|||Twitter|||Amazon|||LinkedIn|||MSN|||eBay|||Microsoft|||Tumblr|||Apple|||Pinterest|||PayPal|||Reddit|||Netflix|||Stack Overflow|||']"
134,['How to add a class to an element using JavaScript?'],"['The class attribute can be used in CSS to do some tasks for the elements with the corresponding class name. In this article, we are discussing how to add a class to an element using JavaScript. In JavaScript, there are some approaches to add a class to an element. We can use the .className property or the .add() method to add a class name to the particular element.']","['https://www.javatpoint.com/how-to-calculate-the-perimeter-and-area-of-a-circle-using-javascript', 'https://www.javatpoint.com/what-is-vanilla-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-a-class-to-an-element-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-a-class-to-an-element-using-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-a-class-to-an-element-using-javascript3', 'https://www.javatpoint.com/how-to-calculate-the-perimeter-and-area-of-a-circle-using-javascript', 'https://www.javatpoint.com/what-is-vanilla-javascript', 'https://www.javatpoint.com/how-to-calculate-the-perimeter-and-area-of-a-circle-using-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-add-a-class-to-an-element-using-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-class-to-an-element-using-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-class-to-an-element-using-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-class-to-an-element-using-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-class-to-an-element-using-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-class-to-an-element-using-javascript6.png']",[],"['Using .className property', 'Using add() method']","['Syntax', 'Example - Adding the class name', 'Example - Getting the class name', 'Syntax', 'Example']",[],"[""Now, let's discuss the approaches to add a class to an element."", 'To add multiple classes, we have to separate their name with space such as""class1 class2"".', 'In the above code, we have inserted a space before newClass.', 'The commonly used syntax of this property to set or to return the class name is given below.', 'To set the class name', 'To return the class name', 'The example of using the .className property is given as follows.', 'We have to click the given HTML button ""Add Class"" to see the effect.', 'After clicking the given button, the output will be -', 'In the next example, we are getting the name of the class by using the .className property.', 'In this example, we are using the .className property to get the class names of the paragraph element having id = ""p1"".', 'We have to click the given HTML button ""Get Class name"" to see the effect.', 'After clicking the given button, the output will be -', 'After clicking the given button, the output will be -']","['The .className property sets the class name of an element. This property can be used to return the value of the class attribute of an element. We can use this property to add a class to an HTML element without replacing its existing class.', 'In this example, we are using the .className property for adding the ""para"" class to the paragraph element having id ""p1"". We are applying the CSS to the corresponding paragraph using the class name ""para"".', ""Now, let's see the second approach of adding the class name using JavaScript. We can use the add() method to add a class name to the particular element."", 'In this example, we are using the add() method to add a class name to the paragraph element having id = ""p1"". We have to click the given HTML button ""Add Class"" to see the effect.']","['If a class is already declared for an element, and we need to add a new class name to the same element then it should be declared by inserting a space before writing the new class name otherwise, it will overwrite the existing class name. It can be written as follows:']","['<div id = ""div1"" class = ""oldClass""> </div>', 'document.getElementById(""div1"").className = "" newClass"";', 'element.className = class', 'element.className', '<!DOCTYPE html>', '<title>', 'add class name using JavaScript', '</title>', '<style>', '.para {', 'font-size: 30px;', 'background-color: yellow;', 'color: blue;', 'border: 2px dotted red;', '</style>', '</head>', 'Hello World :)', '<p id = ""p1"">', 'Welcome to the javaTpoint.com', '<p> Click the following button to see the effect. </p>', '<button onclick = ""fun()"">', 'Add Class', '</button>', '<script>', 'function fun() {', 'var a = document.getElementById(""p1"");', 'a.className = ""para"";', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', 'Hello World :)', '<p id = ""p1"" class = ""para jtp"">', 'Welcome to the javaTpoint.com', '<p> Click the following button to get the class name. </p>', '<p id = ""p2""> </p>', '<button onclick = ""fun()"">', 'Get Class name', '</button>', '<script>', 'function fun() {', 'var a = document.getElementById(""p1"").className;', 'document.getElementById(\'p2\').innerHTML = ""The class names of paragraph with \'id = p1\' is: "" + a;', '</script>', '</body>', '</html>', 'element.classList.add(""class name"");', '<!DOCTYPE html>', '<title>', 'add class name using JavaScript', '</title>', '<style>', '.para {', 'font-size: 30px;', 'background-color: yellow;', 'color: blue;', 'border: 2px dotted red;', '</style>', '</head>', 'Hello World :)', '<p id = ""p1"">', 'Welcome to the javaTpoint.com', '<p> Click the following button to see the effect. </p>', '<button onclick = ""fun()"">', 'Add Class', '</button>', '<script>', 'function fun() {', 'var a = document.getElementById(""p1"");', 'a.classList.add(""para"");', '</script>', '</body>', '</html>']",[],[],[]
135,['How to calculate the perimeter and area of a circle using JavaScript?'],"['In this article, we will see how to calculate the perimeter and area of a circle using JavaScript. The mathematical formula for calculating the perimeter and area of the circle is given below:']","['https://www.javatpoint.com/how-to-create-an-image-map-in-javascript', 'https://www.javatpoint.com/how-to-add-a-class-to-an-element-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-calculate-the-perimeter-and-area-of-a-circle-using-javascript', 'https://www.javatpoint.com/how-to-create-an-image-map-in-javascript', 'https://www.javatpoint.com/how-to-add-a-class-to-an-element-using-javascript', 'https://www.javatpoint.com/how-to-create-an-image-map-in-javascript']",['https://static.javatpoint.com/javascriptpages/images/how-to-calculate-the-perimeter-and-area-of-a-circle-using-javascript.png'],[],[],['Example'],[],"['Area of circle = π * r * r', 'Perimeter of circle = 2 * π * r', 'Both formulae require the value of PI. So, in JavaScript, we have to use Math.PI property to get the value of PI.', ""Let's see an example to calculate the perimeter and area of the circle."", 'In this example, the radius of the circle is 20cm. We have to click the given HTML button to get the area and perimeter.', 'After the execution of above code and clicking the given button the output will be -']",[],[],"['<!DOCTYPE html>', '<title>', 'Math.PI', '</title>', '</head>', 'Welcome to the javaTpoint.com', '<p> Here the radius of circle is 20cm </p>', 'Click the following button to get the area and perimeter of circle.', '<p id = ""para""></p>', '<p id = ""para1""></p>', '<button onclick = ""fun()""> Click me </button>', '<script>', 'var r = 20;', 'function fun()', ""document.getElementById('para').innerHTML = 'The area of circle with radius 20cm is: ' + Math.PI * r * r ;"", ""document.getElementById('para1').innerHTML = 'The perimeter of circle with radius 20cm is: ' + 2 * Math.PI * r ;"", '</script>', '</body>', '</html>']",[],[],[]
136,['How to create an image map in JavaScript?'],['JavaScript can be used to create a client-side image map. An image map is an image on the webpage that has multiple links to other pages. These links are called hotspots. An image map is used to navigate different links to other pages or on the same web page.'],"['https://www.javatpoint.com/how-to-find-factorial-of-a-number-in-javascript', 'https://www.javatpoint.com/how-to-calculate-the-perimeter-and-area-of-a-circle-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/html-image', 'https://www.javatpoint.com/https://www.javatpoint.com/html-area-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-onclick', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-create-an-image-map-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-attributes', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-create-an-image-map-in-javascript2', 'https://www.javatpoint.com/how-to-find-factorial-of-a-number-in-javascript', 'https://www.javatpoint.com/how-to-calculate-the-perimeter-and-area-of-a-circle-using-javascript', 'https://www.javatpoint.com/how-to-find-factorial-of-a-number-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-create-an-image-map-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-create-an-image-map-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-create-an-image-map-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-create-an-image-map-in-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-create-an-image-map-in-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-create-an-image-map-in-javascript6.png']",[],[],"['Syntax', 'Example', 'Example2']",[],"['The piece of code for defining the image map is given as follows.', ""Now, let's see some illustrations of using the image map to understand it more clearly."", 'The first section is the top area of the image, and the second section is the middle area of the image.', 'After the execution of the above code, the output will be -', 'On clicking the top area, the output will be -', 'On clicking the middle area, the output will be -', 'After the execution of the above code, the output will be -', 'On clicking the top area, the output will be -', 'On clicking the middle area, the output will be -']","['There is another tag called <area> tag, which defines the coordinates and shapes of each section. We can use the events such as onclick, ondblclick, onmouseover, onmouseout, onblur, etc. with the <area> tag.', 'In this example, there is an image that we are using for creating an image map. We are dividing the image into two sections in the rectangular and circular shape.', 'Here, we are passing the images in the href attribute of the <area> tag. It means that when we click on the sections, the corresponding image will be displayed.']","['In an image map, an image can be divided into different sections. We can include links to each section, and after clicking a section, it will open the corresponding link. The sections can be divided into different shapes, such as circle, rectangle, or polygon. For creating a rectangular image map, we require two different coordinates that are top right and bottom left. Similarly, for creating a pentagon image map, we require five coordinates.', 'Images map provides a way to link various sections of the image without require creating image files. The usemap attribute is used in the <img> tag to define the map description into that image. This attribute calls the map description applied to the specific image. Every image map has a unique map so, we have to use the name attribute in the MAP element.', 'The image is divided into two sections. The first section is the top area of the image, and the second section is the middle area of the image. On clicking the corresponding sections, first the name is displayed of the linked image in the given textfield, and then the image will show.']","['<img src = ""jtp.png"" usemap = ""#jtp"">', '<map name = ""jtp"">', '<area shape = ""rect"" coords=""x, y"" />', '<area shape = ""circle"" coords = ""x, y, r"" />', '<title> JavaScript Image Map </title>', '<script>', 'function show(name) {', 'document.my.res.value = name;', '</script>', '</head>', '<body style = ""text-align: center;"">', ""<h2> It is an example of JavaScript's Image map </h2>"", '<form name = ""my"">', '<input type = ""text"" name = ""res"" size = ""25px"" style = ""font-size: 25px; text-align: center; border: 2px solid blue; background-color: pink;""/>', '</form>', '<img src = ""jtp.png"" border = ""5"" usemap = ""#names"" height = ""300px""/>', '<map name = ""names"">', '<area shape = ""rect"" coords = ""0, 0, 325, 90"" href = ""#"" onclick = ""show(\'Rectangular Shape\')"" />', '<area shape = ""circle"" coords = ""150, 140, 60"" href = ""#"" onclick = ""show(\'Circular Shape\')"" />', '</body>', '</html>', '<title> JavaScript Image Map </title>', '<script>', 'function show(name) {', 'document.my.res.value = name;', '</script>', '</head>', '<body style = ""text-align: center;"">', ""<h2> It is an example of JavaScript's Image map </h2>"", '<form name = ""my"">', '<input type = ""text"" name = ""res"" size = ""25px"" style = ""font-size: 25px;text-align: center;border: 2px solid blue; background-color: pink;""/>', '</form>', '<img src = ""jtp.png"" border = ""5"" usemap = ""#names"" height = ""300px""/>', '<map name = ""names"">', '<area shape = ""rect"" coords = ""0, 0, 325, 90"" href = ""forest.jpg"" onclick = ""show(\'Forest.jpg\')"" />', '<area shape = ""circle"" coords = ""150, 140, 60"" href = ""tiger.png"" onclick = ""show(\'Tiger.png\')"" />', '</body>', '</html>']",[],[],[]
137,['How to find factorial of a number in JavaScript?'],['Factorial of number is the product of all positive descending integers. Factorial of n is denoted by n!. For example -'],"['https://www.javatpoint.com/how-to-get-the-value-of-pi-using-javascript', 'https://www.javatpoint.com/how-to-create-an-image-map-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-find-factorial-of-a-number-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-find-factorial-of-a-number-in-javascript2', 'https://www.javatpoint.com/how-to-get-the-value-of-pi-using-javascript', 'https://www.javatpoint.com/how-to-create-an-image-map-in-javascript', 'https://www.javatpoint.com/how-to-get-the-value-of-pi-using-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-find-factorial-of-a-number-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-find-factorial-of-a-number-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-find-factorial-of-a-number-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-find-factorial-of-a-number-in-javascript4.png']",[],[],"['Using Iterative approach', 'Using Recursive approach']",[],"['4! = 4 * 3 * 2 * 1 = 24', '5! = 5 * 4 * 3 * 2 * 1 = 120', 'Here, 4! is pronounced as ""4 factorial"", it is also called ""4 bang"" or ""4 shriek"".', ""Let's see an example of the same."", 'If we enter a negative number, then the program calculates the factorial of 0, which is 1.', 'After the execution of the above code, the output will be -', 'After entering the number and clicking the given button, the output will be -', 'Now, we will see how to calculate the factorial using recursive method in JavaScript.', 'Now, we will see an example of finding the factorial of number using recursion in JavaScript.', 'After the execution of the above code, the output will be -', 'After entering the number and clicking the given button, the output will be -']","['In this article, we are calculating the factorial of a number using JavaScript. Here, we are using two ways to find the factorial. The first one is the iterative approach, and another one is the recursive approach.', 'Here, we are iterating a loop over the sequence of numbers to get the factorial of a given number. Using this approach, the consumption of memory is less than the recursive implementation. But the code is lengthier than the recursive method.', 'In this approach, we are using recursion to calculate the factorial of a number. Here, we call same function again and again to get the factorial. Using recursion, we have to code less than the iterative approach.', 'Here there is a function fact(), which accepts a parameter num. It is a number for which we need to calculate the factorial. The function returns 1 when the value of num is 0.']","['In this example, there is a text field that requires a number and a button, which gives us the factorial of the entered number. We have to enter a number in the given textfield to find the factorial of that number. Then we need to click the given button named Factorial to get the result.', 'In the output we will see a text field that requires number and a button which gives us the factorial of the entered number. We have to enter a number in the given textfield to find the factorial of that number. Then we need to click the given button named as Factorial to get the result.']","['<!DOCTYPE html>', '</head>', '<body style = ""text-align: center; font-size: 20px;"">', '<h1> Welcome to the javaTpoint.com </h1>', 'Enter a number: <input id = ""num"">', '<br><br>', '<button onclick = ""fact()""> Factorial </button>', '<p id = ""res""></p>', '<script>', 'function fact(){', 'var i, num, f;', 'num = document.getElementById(""num"").value;', 'for(i = 1; i <= num; i++)', 'f = f * i;', 'i = i - 1;', 'document.getElementById(""res"").innerHTML = ""The factorial of the number "" + i + "" is: "" + f ;', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '</head>', '<body style = ""text-align: center; font-size: 20px;"">', '<h1> Welcome to the javaTpoint.com </h1>', 'Enter a number: <input id = ""number"">', '<br><br>', '<button onclick = ""fact1()""> Factorial </button>', '<p id = ""res""></p>', '<script>', 'function fact(num)', 'if (num == 0) {', 'return 1;', 'return num * fact( num - 1 );', 'function fact1()', 'var num = document.getElementById(""number"").value;', 'var f = fact(num);', 'document.getElementById(""res"").innerHTML=""The factorial of the number "" + num + "" is: "" + f ;', '</script>', '</body>', '</html>']",[],[],[]
138,['How to get the value of PI using JavaScript?'],['PI is a mathematical constant. The lowercase Greek letter π represents the symbol PI. It is an acronym of the periphery.'],"['https://www.javatpoint.com/how-to-make-a-text-italic-using-javascript', 'https://www.javatpoint.com/how-to-find-factorial-of-a-number-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-get-the-value-of-pi-using-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/pi', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-get-the-value-of-pi-using-javascript2', 'https://www.javatpoint.com/how-to-make-a-text-italic-using-javascript', 'https://www.javatpoint.com/how-to-find-factorial-of-a-number-in-javascript', 'https://www.javatpoint.com/how-to-make-a-text-italic-using-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-get-the-value-of-pi-using-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-get-the-value-of-pi-using-javascript2.png']",[],[],"['Syntax', 'Example1', 'Example2']",[],"[""Let's see some illustrations of using the Math.PI property."", 'In this example, we are printing the value of the Math.PI property. Click the given button to get the value of PI.', 'After the execution of above code and after clicking the given button the output will be -', 'Here, the radius of the circle is 8.']","['PI can be defined as the circumference (C) of a circle divided by its diameter (d). It means that for any size of the circle, the value of PI will remain constant.', 'The value of PI is generally used in formulae. Using Math.PI property, we can easily calculate the area of a circle and can perform other calculations that require the value of PI.', 'In this example, we are calculating the area of the circle. The formula for finding the area is (π * r * r) that requires the value of PI. So, we are using Math.PI property to get the value of PI.']","['In JavaScript, we can use Math.PI property to get the value of PI. This property returns the ratio of the circumference of a circle to its diameter, which is approximately equal to 3.14159. The Math.PI is a property of the Math object, not a function, so use this as a function will cause an error.']","['Math.PI', '<!DOCTYPE html>', '<title>', 'Math.PI', '</title>', '</head>', 'Welcome to the javaTpoint.com', '<p> Click the following button to get the value of PI. </p>', '<p id = ""para""></p>', '<button onclick = ""get()"">', 'Click me', '</button>', '<script>', 'function get()', 'document.getElementById(""para"").innerHTML = ""The value of PI is: "" + Math.PI;', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<title>', 'Math.PI', '</title>', '</head>', 'Welcome to the javaTpoint.com', '<p id = ""para""></p>', '<script>', 'var r = area(8);', ""document.getElementById('para').innerHTML = 'The area of circle with radius 8 is: ' + r ;"", 'function area(radius)', 'return Math.PI * radius * radius;', '</script>', '</body>', '</html>']",[],[],[]
139,['How to make a text italic using JavaScript'],"['In JavaScript, the italics() method is used to display an italic string. It makes the text similar to the text is in <i> </i> (italic tag). Because the italics() method is a method of string object, so it must be invoked through a specific instance of the string class.']","['https://www.javatpoint.com/what-are-the-uses-of-javascript', 'https://www.javatpoint.com/how-to-get-the-value-of-pi-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-make-a-text-italic-using-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-make-a-text-italic-using-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/what-are-the-uses-of-javascript', 'https://www.javatpoint.com/how-to-get-the-value-of-pi-using-javascript', 'https://www.javatpoint.com/what-are-the-uses-of-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-make-a-text-italic-using-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-make-a-text-italic-using-javascript2.png']",[],[],"['Syntax', 'Example1', 'Example2']",[],"['It is responsible for the italicization of string. It does not change the value of the original string; instead, it returns the italicized string.', 'The output will be a string written in the <i> </i> tag.', ""This method does not require any arguments. Now, let's understand the use of italics() method by using some illustrations."", 'We have to click the given HTML button to see the output. Here we are using the document.write() method to show the output.', 'After the execution of the code and clicking the given HTML button the output will be -', 'We have to click the given HTML button to see the output.', 'After the execution of the code and clicking the given HTML button the output will be -']","['Generally, this method returns the string in the format given below. Suppose we have a string ""Hello world!"" and we are applying the italics() method on it and display the output using the alert method, then we will get -', 'In this example, we are italicizing a string. Here, there is string str on which we are applying the italicize method to make the characters of the string italic.', ""Now, in the next example, we are displaying the output using the alert() method. Let's see the result of the next example. We might get a different result."", 'We can see the format of the output using the alert() method. Although we are applying the same method on the same string in both examples, but the format of the output is different.']",[],"['<i>Hello world!</i>', 'string.italics();', '</head>', '<h1> Hello World :) :) </h1>', '<p> Click the following button to see the effect. </p>', '<p id = ""para""> </p>', '<button onclick = ""fun()""> Click me </button>', '<script>', 'function fun(){', 'var str = ""Welcome to the javaTpoint.com "";', ""document.getElementById('para').innerHTML = str.italics();"", '</script>', '</body>', '</html>', '</head>', '<h1> Hello World :) :) </h1>', '<p> Click the following button to see the effect. </p>', '<p id = ""para""> </p>', '<button onclick = ""fun()""> Click me </button>', '<script>', 'function fun(){', 'var str = ""Welcome to the javaTpoint.com "";', 'alert(str.italics());', '</script>', '</body>', '</html>']",[],[],[]
140,['What are the uses of JavaScript?'],"['JavaScript is a light-weight object-oriented programming language that is used by several websites for scripting the webpages. It is an interpreted, full-fledged programming language. JavaScript enables dynamic interactivity on websites when it is applied to an HTML document.']","['https://www.javatpoint.com/calculate-current-week-number-in-javascript', 'https://www.javatpoint.com/how-to-make-a-text-italic-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/http', 'https://www.javatpoint.com/https://www.javatpoint.com/nodejs-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/computer-network-http', 'https://www.javatpoint.com/https://www.javatpoint.com/http-tutorial', 'https://www.javatpoint.com/calculate-current-week-number-in-javascript', 'https://www.javatpoint.com/how-to-make-a-text-italic-using-javascript', 'https://www.javatpoint.com/calculate-current-week-number-in-javascript']",['https://static.javatpoint.com/javascriptpages/images/what-are-the-uses-of-javascript.png'],[],[],"['1. Web Applications', '2. Web Development', '3. Mobile Applications', '4. Game', '5. Presentations', '6. Server Applications', '7. Web Servers']",[],"[""Let's discuss the uses of JavaScript. Some of the uses of JavaScript are representing in the following image.""]","['JavaScript also helps us to create presentations as a website. The libraries, such as RevealJs, and BespokeJs, can be used to create a web-based slide deck. They are easier to use, so we can easily make something amazing in a short time.', 'In this article, we discussed various JavaScript applications. JavaScript has various other uses that help us to improve the performance of webpages. The other uses of JavaScript are listed as follows:']","['JavaScript helps the users to build modern web applications to interact directly without reloading the page every time. JavaScript is commonly used to dynamically modify HTML and CSS to update a user interface by the DOM API. It is mainly used in web applications.', 'As day-by-day there is a continuous improvement in the browsers, so JavaScript gained popularity for making robust web applications. We can understand it by taking the example of Google Maps. In Maps user just requires to click and drag the mouse; the details are visible just by a click. There is a use of JavaScript behind these concepts.', 'JavaScript is commonly used for creating web pages. It allows us to add dynamic behavior to the webpage and add special effects to the webpage. On websites, it is mainly used for validation purposes. JavaScript helps us to execute complex actions and also enables the interaction of websites with visitors. Using JavaScript, it is also possible to load the content in a document without reloading the webpage.', ""Now a day's mobile devices are broadly used for accessing the internet. Using JavaScript, we can also build an application for non-web contexts. The features and uses of JavaScript make it a powerful tool for creating mobile applications. The React Native is the widely used JavaScript framework for creating mobile applications. Using React Native, we can build mobile applications for different operating systems. We do not require writing different codes for the iOS and Android operating systems. We only need to write it once and run it on different platforms."", 'JavaScript is also used for creating games. It has various libraries and frameworks for creating a game. The game can either be a 2D or 3D. Some JavaScript game engines such as PhysicsJS, Pixi.js help us to create a web game. We can also use the WebGL (web graphics library), which is the JavaScript API to render 2D and 3D images on browsers.', 'The Reveal.js is used to create interactive and beautiful slide decks with the help of HTML. These presentations work great with mobile devices and tablets. It also supports all of the CSS color formats. The BespokeJS includes animated bullet lists, responsive scaling, and a wide variety of features.', 'A large number of web applications have a server-side to them. JavaScript is used to generate content and handle HTTP requests. JavaScript can also run on servers through Node.js. The Node.js provides an environment containing the necessary tools required for JavaScript to run on servers.', ""A web server can be created by using Node.js. Node.js is event-driven and not waits for the response of the previous call. The servers created using Node.js are fast and don't use buffering and transfer chunks of data. The HTTP module can be used to create the server by using the createServer() method. This method executes when someone tries to access the port 8080. As a response, the HTTP server should display HTML and should be included in the HTTP header.""]",[],[],[],['|||Client-side validation.|||Displaying date and time.|||To validate the user input before submission of the form.|||Open and close new windows.|||To display dialog boxes and pop-up windows.|||To change the appearance of HTML documents.|||To create the forms that respond to user input without accessing the server.|||']
141,['How to get all checked checkbox value in JavaScript?'],"['A checkbox is a selection box that allows the users to make the binary choice (true or false) by checking and unchecking it. Basically, a checkbox is an icon, which is frequently used in GUI forms and application to get one or more inputs from the user.']","['https://www.javatpoint.com/how-to-open-json-file', 'https://www.javatpoint.com/how-to-disable-radio-button-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/html-checkbox-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-input-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-get-all-checked-checkbox-value-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-get-all-checked-checkbox-value-in-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/html-form', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-get-all-checked-checkbox-value-in-javascript3', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/how-to-open-json-file', 'https://www.javatpoint.com/how-to-disable-radio-button-using-javascript', 'https://www.javatpoint.com/how-to-open-json-file']","['https://static.javatpoint.com/javascriptpages/images/how-to-get-all-checked-checkbox-value-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-get-all-checked-checkbox-value-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-get-all-checked-checkbox-value-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-get-all-checked-checkbox-value-in-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-get-all-checked-checkbox-value-in-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-get-all-checked-checkbox-value-in-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-get-all-checked-checkbox-value-in-javascript7.png']",[],"['Create checkbox syntax', 'Examples', 'Get all checkbox value', 'Get all marked checkboxes value using querySelectorAll() method']","['Create and get checkbox value', 'Get all checkbox value', 'Different JavaScript codes to get marked checkboxes value']",[],"['In this chapter, now we will see how to get all marked checkbox value using JavaScript.', 'To create a checkbox use HTML <input> tab and type=""checkbox"" inside the tab as shown below -', 'If you mark the Yes checkbox and then click on the Submit button, a message will display as shown below:', 'If you click on the Submit button without marking any of the checkboxes, an error message will be displayed.', 'Similarly, you can check the output for other conditions.', 'Now, you will see how to get all checkbox values marked by the user. See the below example.', 'Although you can select the language one by one by marking an individual checkbox and then click on the Submit button to get the result.', 'Output: When you have not selected anything', 'Now, you will see how to get all checkbox values marked by the user. See the below example.', 'Here, you can see that all marked checkboxes value has been returned.', 'JavaScript Code to get all checked checkbox values', 'You can also use the below code to get all checked checkboxes values.']","['Remember that checkbox is different from the radio button and dropdown list because it allows multiple selections at once. In contrast, the radio button and dropdown allow us to choose only one from the given options.', 'Although you can also create a checkbox by creating the checkbox object through JavaScript, but this method is a bit complicated. We will discuss both approaches later-', 'In this example, we will create two checkboxes but with the condition that the user will have to mark only one checkbox between them. Then we will fetch the value of the marked checkbox. See the code below:', 'By executing this code, we will get a response like the below screenshot having some programming languages where you can choose the language you know.', 'Here, you click on the Check all button, it will mark all the programming language checkboxes. After that, click on the Submit button to get the response.', 'So, checkbox elements allow to multi-select. This means that the users can select one or more options of their choice defined in the HTML form. Even you can select all the checkboxes. In the above example, you have already seen that.']",['There is one more method to get all selected values from the checkboxes marked by the user. You will now see how to get the value of all checkboxes using the querySelectorAll() method marked by the user. This will fetch the checkboxes values from the HTML form and display the result.'],"['<input type=""checkbox"" id=""c1"" value=""on"" name=""cb1"">Yes', '<h2 style=""color:green"">Create a checkbox and get its value</h2>', '<h3> Are you a web developer? </h3>', 'Yes: <input type=""checkbox"" id=""myCheck1"" value=""Yes, I\'m a web developer"">', 'No: <input type=""checkbox"" id=""myCheck2"" value=""No, I\'m not a web developer"">', '<br> <br>', '<button onclick=""checkCheckbox()"">Submit</button> <br>', '<h4 style=""color:green"" id=""result""></h3>', '<h4 style=""color:red"" id=""error""></h3>', '<script>', 'function checkCheckbox() {', 'var yes = document.getElementById(""myCheck1"");', 'var no = document.getElementById(""myCheck2"");', 'if (yes.checked == true && no.checked == true){', 'return document.getElementById(""error"").innerHTML = ""Please mark only one checkbox either Yes or No"";', 'else if (yes.checked == true){', 'var y = document.getElementById(""myCheck1"").value;', 'return document.getElementById(""result"").innerHTML = y;', 'else if (no.checked == true){', 'var n = document.getElementById(""myCheck2"").value;', 'return document.getElementById(""result"").innerHTML = n;', 'else {', 'return document.getElementById(""error"").innerHTML = ""*Please mark any of checkbox"";', '</script>', '</body>', '</html>', '<h2 style=""color:green"">Create a checkbox and get its value</h2>', '<h4> Select the programming language, you know </h4>', '<td> Java: <input type=""checkbox"" id=""check1"" class=""pl"" value=""Java""> </td>', '<td> PHP: <input type=""checkbox"" id=""check2"" class=""pl"" value=""PHP""> </td>', '</tr> <tr>', '<td> Angular: <input type=""checkbox"" id=""check3"" class=""pl"" value=""Angular""> </td>', '<td> CSS: <input type=""checkbox"" id=""check4"" class=""pl"" value=""CSS""> </td>', '</tr> <tr>', '<td> Python: <input type=""checkbox"" id=""check5"" class=""pl"" value=""Python""> </td>', '<td> Android: <input type=""checkbox"" id=""check6"" class=""pl"" value=""Android""> </td>', '<button onclick=""checkAll()"">Check all</button> <br><br>', '<button onclick=""getCheckboxValue()"">Submit</button> <br>', '<h4 style=""color:green"" id=""result""></h4>', '<script>', 'function checkAll() {', ""var inputs = document.querySelectorAll('.pl');"", 'for (var i = 0; i < inputs.length; i++) {', 'inputs[i].checked = true;', '}', 'function getCheckboxValue() {', 'var l1 = document.getElementById(""check1"");', 'var l2 = document.getElementById(""check2"");', 'var l3 = document.getElementById(""check3"");', 'var l4 = document.getElementById(""check4"");', 'var l5 = document.getElementById(""check5"");', 'var l6 = document.getElementById(""check6"");', 'var res="" "";', 'if (l1.checked == true){', 'var pl1 = document.getElementById(""check1"").value;', 'res = pl1 + "","";', 'else if (l2.checked == true){', 'var pl2 = document.getElementById(""check2"").value;', 'res = res + pl2 + "","";', 'else if (l3.checked == true){', 'document.write(res);', 'var pl3 = document.getElementById(""check3"").value;', 'res = res + pl3 + "","";', 'else if (l4.checked == true){', 'var pl4 = document.getElementById(""check4"").value;', 'res = res + pl4 + "","";', 'else if (l5.checked == true){', 'var pl5 = document.getElementById(""check5"").value;', 'res = res + pl5 + "","";', 'else if (l6.checked == true){', 'var pl6 = document.getElementById(""check6"").value;', 'res = res + pl6;', '} else {', 'return document.getElementById(""result"").innerHTML = ""You have not selected anything"";', 'return document.getElementById(""result"").innerHTML = ""You have selected "" + res + "" languages"";', '</script>', '</body>', '</html>', '<h2 style=""color:green""> Get all marked checkboxes value </h2>', '<h4> Select the programming language, you know </h4>', '<td> Java: <input type=""checkbox"" id=""check1"" name=""pl"" value=""Java""> </td>', '<td> PHP: <input type=""checkbox"" id=""check2"" name=""pl"" value=""PHP""> </td>', '</tr> <tr>', '<td> Angular: <input type=""checkbox"" id=""check3"" name=""pl"" value=""Angular""> </td>', '<td> CSS: <input type=""checkbox"" id=""check4"" name=""pl"" value=""CSS""> </td>', '</tr> <tr>', '<td> Python: <input type=""checkbox"" id=""check5"" name=""pl"" value=""Python""> </td>', '<td> Android: <input type=""checkbox"" id=""check6"" name=""pl"" value=""Android""> </td> <br> <br>', '<button id=""btn"">Submit</button> <br>', '<h4 style=""color:green"" id=""result""></h4>', '<script>', ""document.getElementById('btn').onclick = function() {"", ""var markedCheckbox = document.getElementsByName('pl');"", 'for (var checkbox of markedCheckbox) {', 'if (checkbox.checked)', ""document.body.append(checkbox.value + ' ');"", '</script>', '</body>', '</html>', '<script>', ""document.getElementById('btn').onclick = function() {"", ""var markedCheckbox = document.getElementsByName('pl');"", 'for (var checkbox of markedCheckbox) {', 'if (checkbox.checked)', ""document.body.append(checkbox.value + ' ');"", '</script>', '<script>', ""document.getElementById('btn').onclick = function() {"", 'var markedCheckbox = document.querySelectorAll(\'input[type=""checkbox""]:checked\');', 'for (var checkbox of markedCheckbox) {', ""document.body.append(checkbox.value + ' ');"", '</script>']",[],[],"['|||If a checkbox is marked or checked, it indicates to true; this means that the user has selected the value.|||If a checkbox is unmarked or not checked, it indicated to false; this means that the user has not selected the value.|||']"
142,['How to open JSON file?'],"['A JSON refers to the JavaScript Object Notation format used to store simple objects and data structures. Usually, JSON files are backup files, which is used to take backup of data that restored back to the application when needed.']","['https://www.javatpoint.com/random-image-generator-in-javascript', 'https://www.javatpoint.com/how-to-get-all-checked-checkbox-value-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/json-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/google-chrome', 'https://www.javatpoint.com/https://www.javatpoint.com/mozilla-firefox', 'https://www.javatpoint.com/https://www.javatpoint.com/nosql-databases', 'https://www.javatpoint.com/https://www.javatpoint.com/mongodb-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/elasticsearch', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/nodejs-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/reactjs-tutorial', 'https://www.javatpoint.com/https://fileviewerplus.com/download', 'https://www.javatpoint.com/https://www.javatpoint.com/xml-tutorial', 'https://www.javatpoint.com/https://www.altova.com/xmlspy-xml-editor', 'https://www.javatpoint.com/https://www.javatpoint.com/notepad-plus-plus-alternative-software', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://notepad-plus-plus.org/downloads/', 'https://www.javatpoint.com/https://www.mozilla.org/en-US/firefox/new/', 'https://www.javatpoint.com/https://support.apple.com/en-in/guide/textedit/welcome/mac', 'https://www.javatpoint.com/https://macvim-dev.github.io/macvim/', 'https://www.javatpoint.com/https://www.vim.org/download.php', 'https://www.javatpoint.com/https://www.javatpoint.com/android-tutorial', 'https://www.javatpoint.com/https://play.google.com/store/apps/details?id=com.sharpened.androidfileviewer&hl=en_IN', 'https://www.javatpoint.com/https://chrome.google.com/webstore/category/extensions', 'https://www.javatpoint.com/random-image-generator-in-javascript', 'https://www.javatpoint.com/how-to-get-all-checked-checkbox-value-in-javascript', 'https://www.javatpoint.com/random-image-generator-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-open-json-file.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-open-json-file2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-open-json-file3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-open-json-file4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-open-json-file5.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-open-json-file6.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-open-json-file7.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-open-json-file8.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-open-json-file9.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-open-json-file10.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-open-json-file11.png']",[],"['Why use JSON file?', 'How to open JSON file on different OS?', 'Advantages of JSON file', 'Uses of JSON file', 'Download tools from the internet to open the JSON file']","['Windows tools to open JSON file', 'Linux tools to open JSON file', 'iMac tools to open JSON file', 'Data Storing', 'File Configurations', 'Application and Notification', 'File Viewer Plus (Windows)', 'Altova XMLSpy (Windows)', 'Notepad++ (Windows)', 'Mozilla Firefox (Cross-platform)', 'Apple TextEdit (Mac)', 'MacVim (Mac)', 'Vim (Linux)', 'File opener for Android (Android)', 'Common steps to open JSON files for all OS', 'Steps to open JSON files on Web browser (Chrome, Mozilla)']",[],"[""Let's see why should we use JSON files -"", 'Below is a list of tools for different operating systems.', 'Below is a list of tools that can open a JSON file on the Windows platform:', 'All these tools run on Window operating system in which some are system software and others can be downloaded from the websites.', 'There is a list of tools used to open JSON files on the Linux platform:', 'iMac and MacOS X offer some tools or applications to open a JSON file. Below is a list of these tools:', 'Below are some advantages of JSON files -', 'Several JavaScript applications that are server-based, like node.js, reactJS, etc., uses this file to store the configuration information.', 'Here are links for downloading the software to open the JSON files:', 'You can download it by clicking on the Download File Viewer Plus.', 'Price: free', 'Click on the link and download Altova XMLSpy on your system. It is a paid tool, but it offers 30 days free trial to the users.', 'Professional XML Editor: €439.00 currently', 'Enterprise XML Editor: €799.00 currently', 'You can download the Notepad++ by clicking on this link on your system without paying any cost.', 'Price: free', 'You can download the latest version of Mozilla Firefox from here Download Mozilla Firefox.', 'Price: free', 'Download the Apple TextEdit by clicking on this link Download Apple TextEdit.', 'Price: free', 'Download the MacVim on Mac operating system using the following link Download MacVim.', 'Remember one thing that ""MacVim does not work with OS X version 10.9 Mavricks"".', 'Price: free', 'Vim software is a good choice to open json and other text files for Linux operating systems as it is free and easy to use.', 'Download the Vim on Linux operating system using the following link Download Vim.', 'Price: free', 'Download the File opener for Android directly using this link.', 'Price: free', 'Your JSON files will now open in your browser where you can read the data inside them.']","['In early days, JSON files was used to transmit the data between server and web applications. But now, JSON files are used for several other purposes. There are several popular websites or search engines that use JSON files. Some are as follows:', 'In early days, the main objective of JSON files was the transmission of data between server and web applications. But now, JSON files are used for several other purposes. Below are the advance uses of JSON files -', 'Other than storing the unstructured data and configuration information, it also delivers notifications from a web application to a server. It is also used by web applications to download the state of the web application.', 'File Viewer Plus (FVP) is open-source software for Windows operating system used to open JSON files. It is widely known as a Universal file opener. You can open, edit, update and save the file in it. It supports more than 300 file formats.', 'Mozilla Firefox is a web browser that is mostly used to search for information on the internet. It offers many security features like enhanced tracking protection. Mozilla Firefox can also be opened JSON files.', 'Support file formats: It support various file format such as - .HTML, .XHTML, .JPEG, .JS, .JSON, .CSS, .RSS, .SESSION, .MAFF, .MFL, .JPX, .BAK, .JSP, .URL, and many more.', 'Apart from that, you can also insert audio, video, graphics into the document and convert it into RTFD format. Apple TextEdit is an open-source product this means it is a free tool.', 'Supported file formats: MacVim supports many file formats along with .json (JSON). These popular supported format are like .JAVA, .XML, .PHP, .JSP, .CSS, .C, .CPP, .PY, .SH, .TXT, .HTML, .JS, .ASPX, .AWK, .BSH, .CONF, .CS, and many more.', 'Supported file formats: Vim supports many file formats like .TXT, .A, .CFG, .COMMAND, .CGI, .JSP, .CSS, .C, .CPP, .PY, .CSH, .INC, .PROPERTIES, .HTML, .JS, .ASPX, .YML, .AWK, .BSH, .CONF, .MD, .ML, .RPY, .CS, and many more.']","['It is a standard type of data interchange format. The users are mostly used it to transmit the data from a web application to a server (to take a backup of the data) and vice-versa from a server to a web server (to restore the data). The JSON files use .json extension similar to the XML file format while saving.', ""JSON files are simple plain text file. Usually, you can open it in any text editor but different operating systems like Windows, iMac, Linux, and MacOS X use different tools or application software to open the JSON file on them. Usually, these are open-source tools so that you don't need to pay anything while using them."", 'Vim is a file opener software that can be used to open the JSON file on Linux platform. GitHub Atom is a cross-platform tool to open JSON files. Other than these tools, you can use web browsers like Google Chrome and Mozilla Firefox to open JSON files, which we discuss in detail later.', 'Most of the NoSQL database engines like MongoDB and Elasticsearch use the JSON structure to store the unstructured data in their database. They store the data in JSON file formats. So, JSON format is a widely used file format now used by the NoSQL database.', 'Altova XMLSpy is also a windows software which is used to open JSON file on windows operating system. It is very popular in world-wide for XML and JSON editors. It support several formats such as .xml, .json, .dtd, .xsl, .xsd, .xqy, .rdf, .qx, .qxl, and many more.', 'Notepad++ is an advanced version of Notepad that runs on the Windows operating system. It is usually known as a source code editor, which is used to write the code of programming languages such as HTML, JavaScript, CSS, or Java, etc. This can also be used to open the JSON files. It is a free software tool.', 'Apple TextEdit is a software that runs on iMac or Apple operating systems. This software already comes with the Mac Operating system. It supports JSON file format. So, you can edit and save the JSON files in it. Other than this, it also supports .xml and .rtf file formats.', 'If you are using Mac operating system version OS X 10.6 or above, MacVim is a useful source code editor for programming needs. It provides a graphical interface that is easy to use and write source code more conveniently. MacVim software can also be used to open the JSON files on Mac operating system.', 'Vim is a software tool that runs on a Linux operating system. It can be used to open the JSON files and perform edit, update, and save operations on it. Like the other JSON file openers, it is also an open-source product that is freely available. Vim application can also download on Windows and Mac operating systems.', 'File opener for Android is an android application that runs and downloads on android operating system. Basically, this application is designed to run on Mobile phones to open the files of different formats. You can also install it on your computer system from the app store. It is a free application to use.', 'Supported file formats: File opener for Android can display the content of more than 150 file formats. Some supported file formats are - .c, .cs, .css, .cpp, .bsh, .mk, .nim, .pl, .sql, .xml, .vb, .json, .js, .ini, .java, .htaccess, .dart, .graddle, .coffee, etc.']",[],[],[],"[""|||Mozilla Firefox uses JSON files to save bookmark backups.|||Google+ saves profile data using JSON files.|||NoSQL databases like Elasticsearch and MongoDB use it to store unstructured data.|||Several JavaScript applications which are server-based, like node.js, reactJS, etc., uses this file to store the configuration information.||||||The JSON files are lightweight and take less storage to be stored.|||These files can be usually created and edited by a text editor. These text editors are mostly freely available.|||JSON files are human-readable means the user can read them easily.|||These files can be opened in any simple text editor like Notepad, which is easy to use.|||Almost every programming language supports JSON format because they have libraries and functions to read/write JSON structures.||||||Notepad|||Notepad++|||Microsoft Notepad|||Microsoft WordPad|||Mozilla Firefox|||File Viewer Plus|||Altova XMLSpy||||||Vim|||Pico|||GNU Emacs|||GitHub Atom (Cross-platform)|||Mozilla Firefox, and|||Google Chrome||||||MacVim|||Apple TextEdit|||Mozilla Firefox|||Bare Bones Text Wrangler|||&&&|||JSON files are computer-readable as well as human-readable. So, both humans and computers can read and write JSON files.|||JSON format is considered as an independent file format. However, this format was originally based on a subset of JavaScript.|||Almost every programming language supports JSON format because they have libraries and functions to read/write JSON structures.|||JSON files are compact.|||It can easily map with the data structures used by most of the programming languages.||||||Open the JSON file opener tool or application on your system from the location where it is installed.|||Navigate to the File menu in menu bar and click on Open in the dropdown list.|||A window will open up where you need to move to the directory/folder location where your JSON file is stored.|||Do not forget to change the file type from Text Document (*.txt) to All Files.|||Now, choose the JSON file to open it to perform the read, write, or update operations.|||JSON file will be opened up to you in reading mode.||||||Open the Web store on your web browser using the apps option menu or directly using this link.|||Here, type JSON View in search bar under the Extensions category.|||You will get the various extensions similar to JSON View to open the JSON format files.||||||From these multiple extension options, choose 'JSONView' extension and add it to your browser by clicking on Add to Chrome||||||It will ask for confirmation by open up a popup box.||||||Click on the Add Once the extension is added to the browser, restart the browser to enable and use the extension.|||Open the JSONView Extension from the browser and mark the Allow access to file URLs to allow access to JSON and other files by this extension.|||After setting up all the settings, go to that folder where JSON files are stored in your system.|||Right-click to the selected JSON file and select the Properties to change the application to open the file.|||Here, change the Open with: from other applications like Photo Viewer or Notepad to Google Chrome by choosing from the Change dropdown list.||||||After choosing the browser to open the JSON file, click on the OK and close the window.|||Now, double-click on the JSON file to open it with the JSONView extension added in the web browser.|||""]"
143,['Random image generator in JavaScript'],"['In this chapter, you will learn how to generate random images on a webpage with the help of JavaScript. So, we will create different random image generator using JavaScript and HTML source code. Firstly, it requires an array to contain the URLs of images to be displayed on the webpage.']","['https://www.javatpoint.com/how-to-add-object-in-array-using-javascript', 'https://www.javatpoint.com/how-to-open-json-file', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=random-image-generator-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=random-image-generator-in-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=random-image-generator-in-javascript3', 'https://www.javatpoint.com/how-to-add-object-in-array-using-javascript', 'https://www.javatpoint.com/how-to-open-json-file', 'https://www.javatpoint.com/how-to-add-object-in-array-using-javascript']","['https://static.javatpoint.com/javascriptpages/images/random-image-generator-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/random-image-generator-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/random-image-generator-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/random-image-generator-in-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/random-image-generator-in-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/random-image-generator-in-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/random-image-generator-in-javascript7.png', 'https://static.javatpoint.com/javascriptpages/images/random-image-generator-in-javascript8.png', 'https://static.javatpoint.com/javascriptpages/images/random-image-generator-in-javascript9.png']",[],"['Approach 1', 'Approach 2']","['Steps for random image generator', 'Example 2: Generate multiple random images', 'Steps for random image generator']",[],"['We will discuss two different methods for the random image generator using JavaScript. See both approaches below:', 'In this example, we have used the original size of the image. You can also define the size for each image to display. Now, follow the steps below:', 'Convert these steps into actual implementation.', 'See the output below:', '""Remember that we have provide the image address in array from the internet. We have not downloaded or stored these images in our database"".', 'See the steps below, how this will be done:', 'Convert these steps into actual implementation and look at the code below:', 'By running the above code, you will get the response along with a Generate Image button. Initially, there will be no image.', 'When you click this Generate Image button, five images selected randomly will display to you on the web.', 'Again, click on the Generate Image button, five more images will display randomly again with the previous output.', 'Convert these steps into actual implementation and look at the code below:', 'By executing this code, a web page will appear with a Display Image button. Click this button to generate an image.', 'See an image is displayed randomly by clicking on the Display Images button.', 'Every time when you click on this Display Images button, a new image will show you.', 'We will explain the above JavaScript code step by step for more easy understanding.', 'Declare and initialize an array', 'Declare an array and store the address, height, and width of the image to display on the web.', 'Store the image URL, height, and width to another array index', 'Generate a Random Number', 'This will generate a random number between 0 to the length of the array.', 'Remove the previous image', 'This code is used to remove the previous image from the web so that the new image can display.', 'Display the image', 'Finally, we have used this code to display the image after removing the previous image.']","['In this approach, images will start displaying randomly on the webpage with a regular time interval by a single click on a button. We will use the setInterval() in-built function of JavaScript to set a timer between the images to display.', 'By executing this code, a web page will appear with a Generate Image button. When you click this button, images will start displaying on the webpage randomly.', 'Click on the Generate Image button to display an image generated randomly. These images will change automatically in every few seconds, once you click on this Generate Image button.', 'In this approach, we will display the random images every time by clicking on a button. These images will not change automatically as in previous approach.', 'In this example, we will also provide the size (height and width) for each image to display on the webpage. So, the images will be displayed in size specified by you in the JavaScript code.', 'This code is used to store the image URL, height, and width of the image to another array index so that they can be accessed easily. Therefore, we will find the length of the initial array and transfer their element to another new array.']","['The random image generator concept is mostly used for advertisement. The images you see on a website generating randomly, are already stored in a database or an array. These images display to the user within a regular time interval or change by a click. You can also provide the address of an image directly from the internet.', 'In this example, we will generate and display multiple random images at once when the user clicks on a button. We will create a button using the HTML code name Generate Image. These images will be stored in an array which is selected by the user. Each time when a user will click this Generate Image button, five random images in bulk will generate and display on the webpage.']","['<head>', '<title> Random Image Generator </title>', '</head>', '<script>', 'function getRandomImage() {', 'var randomImage = new Array();', 'randomImage[0] = ""https://images.pexels.com/photos/858115/pexels-photo-858115.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500"";', 'randomImage[1] = ""http://www.petsworld.in/blog/wp-content/uploads/2014/09/running-cute-puppies.jpg"";', 'randomImage[2] = ""https://images.pexels.com/photos/142497/pexels-photo-142497.jpeg?auto=compress&cs=tinysrgb&dpr=1&w=500"";', 'randomImage[3] = ""https://images.unsplash.com/photo-1543877087-ebf71fde2be1?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60"";', 'randomImage[4] = ""https://wi.wallpapertip.com/wsimgs/156-1565522_puppies-desktop-wallpaper-desktop-background-puppies.jpg"";', 'randomImage[5] = ""https://images.unsplash.com/photo-1501265976582-c1e1b0bbaf63?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60"";', 'var number = Math.floor(Math.random()*randomImage.length);', 'return document.getElementById(""result"").innerHTML = \'<img src=""\'+randomImage[number]+\'"" />\';', '</script>', '<center><h2 style=""color:green""> Random Image Generator </h2></center>', '<h4> Click the button to generate and display random images on the webpage </h4>', '<!-- call user-defined getRandomImage function after 2 seconds -->', '<button onclick = ""setInterval(getRandomImage, 2000)""> Generate Image </button>', '<br> <br>', '<span id=""result"" align=""center""> </span>', '</body>', '</html>', '<head>', '<title> Random Image Generator </title>', '</head>', '<script>', 'function getRandomImage() {', 'var randomImage = new Array();', 'randomImage[0] = ""https://wi.wallpapertip.com/wsimgs/15-155208_desktop-puppy-wallpaper-hd.jpg"";', 'randomImage[1] = ""http://www.petsworld.in/blog/wp-content/uploads/2014/09/running-cute-puppies.jpg"";', 'randomImage[2] = ""https://wi.wallpapertip.com/wsimgs/156-1564365_golden-retriever-puppy-desktop-wallpaper-desktop-wallpaper-puppy.jpg"";', 'randomImage[3] = ""https://wi.wallpapertip.com/wsimgs/156-1564140_free-puppy-wallpapers-for-computer-wallpaper-cave-cute.jpg"";', 'randomImage[4] = ""https://wi.wallpapertip.com/wsimgs/156-1565522_puppies-desktop-wallpaper-desktop-background-puppies.jpg"";', 'randomImage[5] = ""https://wi.wallpapertip.com/wsimgs/156-1566650_cute-puppies-desktop-wallpaper-cute-puppies.jpg"";', 'for (let i=0; i< 5; i++) {', 'var number = Math.floor(Math.random()*randomImage.length);', 'document.getElementById(""result"").innerHTML += \'<img src=""\'+ randomImage[number] +\'"" style=""width:150px"" />\';', '</script>', '<center><h2 style=""color:green""> Random Image Generator </h2></center>', '<h4> Click the button to generate and display the five random images: </h4>', '<!-- call user-defined getRandomImage function to generate image -->', '<button onclick = ""getRandomImage()""> Generate Image </button>', '<br> <br>', '<span id=""result"" align=""center""> </span>', '</body>', '</html>', '<title>Display random images</title>', '<style>', 'margin-top: 30px;', '</style>', '</head>', '<script>', 'function displayRandomImages()', 'var imageArray = [', 'src: ""https://wi.wallpapertip.com/wsimgs/15-155208_desktop-puppy-wallpaper-hd.jpg"",', 'width: ""280"",', 'height: ""200""', 'src: ""https://wi.wallpapertip.com/wsimgs/156-1564365_golden-retriever-puppy-desktop-wallpaper-desktop-wallpaper-puppy.jpg"",', 'width: ""320"",', 'height: ""195""', 'src: ""https://wi.wallpapertip.com/wsimgs/156-1564140_free-puppy-wallpapers-for-computer-wallpaper-cave-cute.jpg"",', 'width: ""320"",', 'height: ""195""', 'src: ""https://wi.wallpapertip.com/wsimgs/156-1566650_cute-puppies-desktop-wallpaper-cute-puppies.jpg"",', 'width: ""350"",', 'height: ""250""', '} ];', 'var arrayLength = imageArray.length;', 'var newArray = [];', 'for (var i = 0; i < arrayLength; i++) {', 'newArray[i] = new Image();', 'newArray[i].src = imageArray[i].src;', 'newArray[i].width = imageArray[i].width;', 'newArray[i].height = imageArray[i].height;', 'function getRandomNum(min, max)', 'imgNo = Math.floor(Math.random() * (max - min + 1)) + min;', 'return newArray[imgNo];', 'var newImage = getRandomNum(0, newArray.length - 1);', ""var images = document.getElementsByTagName('img');"", 'var l = images.length;', 'for (var p = 0; p < l; p++) {', 'images[0].parentNode.removeChild(images[0]);', 'document.body.appendChild(newImage);', '</script>', '<center>', '<h2 style=""color:green""> Random Image Generator </h2>', '<h4> Press the button to display and change the image </h4>', '<button onclick=""displayRandomImages();""> Display Images </button>', '</center>', '</body>', '</html>', 'var imageArray = [', 'src: ""https://wi.wallpapertip.com/wsimgs/15-155208_desktop-puppy-wallpaper-hd.jpg"",', 'width: ""280"",', 'height: ""200""', 'src: ""https://wi.wallpapertip.com/wsimgs/156-1564365_golden-retriever-puppy-desktop-wallpaper-desktop-wallpaper-puppy.jpg"",', 'width: ""320"",', 'height: ""195""', 'var arrayLength = imageArray.length;', 'var newArray = [];', 'for (var i = 0; i < arrayLength; i++)', 'newArray[i] = new Image();', 'newArray[i].src = imageArray[i].src;', 'newArray[i].width = imageArray[i].width;', 'newArray[i].height = imageArray[i].height;', 'function getRandomNum(min, max)', 'imgNo = Math.floor(Math.random() * (max - min + 1)) + min;', 'return newArray[imgNo];', 'var newImage = getRandomNum(0, newArray.length - 1);', ""var images = document.getElementsByTagName('img');"", 'var l = images.length;', 'for (var p = 0; p < l; p++) {', 'images[0].parentNode.removeChild(images[0]);', 'document.body.appendChild(newImage);']",[],[],"['|||Declare an array using JavaScript to store the images.|||Provide the link or URL of images in the declared array. You can also pass the height and width in the array for the image size to display on the webpage.|||Declare a JavaScript variable to store a random value calculated using this floor(Math.random()*randomImage.length) method. It will generate a random number between 0 and the length of the array that will be assigned to the images to display randomly.|||Now, return the random images selected using a number calculated in the previous step.|||Put all the above steps in a user-defined function (getRandomImage), which will call by clicking on a Generate Image|||In HTML code, we will use a tab and provide an ID to display an image over another image. So, the images will show you one by one, by overwrapping each other.||||||Declare an array using JavaScript and provide the link or URL of images in that array to store the images.|||Use a for loop to generate multiple random images at once. We will use for loop of 0 to 5 to display five images in a single button click.|||Put the below steps in this for loop.|||Calculate a random number between 0 to length of the array using the floor(Math.random()*randomImage.length) method. This generated number will assign to the images to display randomly.|||Now, print all five random images selected using a number calculated in the previous step.|||Put all the above steps in a user-defined function (getRandomImage), which will call by clicking on a Generate Image ||||||Create a user-defined function randomImageGenerator() and put all the below steps inside it.|||Create an array of images using JavaScript containing the location/URL, height, and width of the image to be displayed on the webpage.|||Store the URL, height, and width of the images in another array index.|||Generate a random number using floor() method that will use the array of images to display on the webpage randomly. It will generate a random number between 0 to the length of the array that will be assigned to the images to display randomly.|||Display the image whose index number matches with the random number generated in previous step.|||We will use a method to remove the previous image and override with the new image.|||Create a button in HTML to change the images.|||']"
144,['How to add object in array using JavaScript?'],['JavaScript offers three in-built functions to add or insert objects in an array. These methods are -'],"['https://www.javatpoint.com/javascript-window-open-method', 'https://www.javatpoint.com/random-image-generator-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-object-in-array-using-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-object-in-array-using-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-object-in-array-using-javascript3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-object-in-array-using-javascript4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-object-in-array-using-javascript5', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-object-in-array-using-javascript6', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-object-in-array-using-javascript7', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-object-in-array-using-javascript8', 'https://www.javatpoint.com/javascript-window-open-method', 'https://www.javatpoint.com/random-image-generator-in-javascript', 'https://www.javatpoint.com/javascript-window-open-method']","['https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript7.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript8.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript9.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript10.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript11.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript12.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript13.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-object-in-array-using-javascript14.png']",[],"['Method 1: push()', 'Method 2: splice()', 'Method 3: unshift()']","['Syntax', 'Return values', 'Example 1', 'Example 2', 'Example 3: Take input from user', 'Syntax', 'Example 1: By removing other elements', 'Example 2: Without removing other elements', 'Syntax', 'Return values', 'Example 1', 'Example 2', 'Example 3: Take input from the user']",[],"['""Note that any number of elements can be added using the push() method in an array.""', 'An objects is passed as a parameter in array.push() function as shown in below syntax -', 'Here, array is a user-defined name of the array, e.g., car, fruits, movie, etc.', 'The push() function returns the new length of the array after adding the new elements.', 'In the below response, you can see that push() method returned 5 as the number of elements after adding to the movieList array.', 'This is another example of the push() function in which we used an HTML button to call the function to insert the new elements in the array.', 'Output: Before clicking the button', 'Output: After clicking the button', 'In both the above examples, you have noticed that the elements are inserted at the end of the array.', 'In this example, we will take the input from the user through HTML form to insert the element using the push() method.', 'Output: Before entering new input', 'See the output below:', 'Output: After entering a new value', '""Note that similar to the push() method, you can add any number of new elements using splice() method in an array.""', 'See the syntax of the splice() method below -', 'An object can be added without removing any other element from the array by specifying the second parameter to 0.', 'Here, array is a user-defined name of the array, e.g., car, fruits, movie, etc.', ""Let's understand this array function with the help of examples of how it works. We will discuss both cases:"", 'On executing the above code, you will get the response having three elements/objects in array initially like the given below:', 'When you click on this Add Elements button, it will add two more elements/objects defined by us to the seriesList array.', '""Note that you can add any number of elements in an array using the unshift() method.""', 'An objects is passed as a parameter in array.unshift() function as shown in below syntax -', 'Here, array is a user-defined name of the array, e.g., car, fruits, movie, etc.', 'In the below response, you can see that unshift() method returned 5 as the number of elements after adding to the movieList array.', 'It is another example of the unshift() function in which we have used an HTML button to call the function to insert the new elements in the array.', 'Output: Before clicking the button', 'Output: After clicking the button', 'In this example, we will take the input from the user through HTML form to insert the element using the unshift() method.', 'Output: Before entering new input', 'See the output below:', 'Output: After entering a new value']","['You can use any of these methods to add the objects to the array. Objects are the elements or values in the array. We will discuss each method in detail.', 'The push() function is a built-in array method of JavaScript. It is used to add the objects or elements in the array. This method adds the elements at the end of the array.', 'This is a simple example of push() method, where we will initialize an array having three elements (movie names) in it. Then we will add two more objects to the array by passing the object name in movieList.push() method.', 'By executing the above code, the response will be the same as given below. We have also created a Push Element button to add the new element to the array.', 'We have provided three more series names in the JavaScript code to add in that array. So, when you click on this Push Elements button, these elements will be added to the array.', 'By executing the above code, you will initially get the output having three movie names. There is an input field to take input from the user and an Add Element button to submit the input value.', 'We have provided Titanic as a new element value and clicked on the Add Element button. You will see that the Titanic is successfully added at the end to the array in the below output.', 'The splice() function is another built-in array method of JavaScript. It is a special type of function which is used for both adding and removing the elements from a specific index in an array. It can perform both operations together.', 'In this example, we will remove other elements of the array to add new elements to it. The new elements/objects will be added to the array at the specified index given in the code.', 'On executing the above code, you will get the response having three series names (Sherlock, Harry Potter, Games of Throne) and an Add Element button like the given below:', 'When you click on this Add Element button, firstly, the elements from the array index 1, e.g., a[1] (Harry Potter, Games of Throne) will be removed and then new elements (Prison Break, The Spy, Avengers) will be added to the array.', 'In this example, we will not remove other elements of the array to add new elements to it. We will just append the new elements to the array from the index as specified in the code.', 'The unshift() function is one more built-in array method of JavaScript. It is used to add the objects or elements in the array. Unlike the push() method, it adds the elements at the beginning of the array.', 'The unshift() method returns the new length of the array after adding the new elements to it. You can store the length of the array returned by the unshift() function in a JavaScript variable.', 'It is a simple example of unshift() function where we will have three elements (movie names ) in an array. Then we will add two more objects to the array by passing the object name in movieList.unshift() method.', 'By executing the above code, you will get the response having three elements and an Add Element button, as shown below. This Add Element button will help to add new elements to the array.', 'We have provided three more series names in the JavaScript code to add to that array. So, when you click on this Add Element button, these elements will be added to the array.', 'By executing the above code, you will initially get the output having three movie names, an input field to take input from the user and an Add Element button to submit the input value.', 'We have provided Titanic as a new element value and clicked on the Add Element button. You will see that the Titanic is successfully added at the beginning of the array in the below output.']","['This method adds or removes the elements/objects at the specific index defined in it. The new object inserts at the specified index. The splice() method accepts three parameters - starting index¸ number of elements to be deleted, and new elements to be added.', 'These all the above methods are detailed examples of adding the elements to an array. They work differently, as the push() method adds elements at the end of the array while the unshift() method adds element at the beginning, and the splice() function adds the elements to the specified index in the array. ']","['array.push(objectName)', '<script>', 'var movieList = [""Rush hour"", "" X-Men"", "" Avengers""];', 'document.write(""<b><br> Initially elements in array: </b>"" + movieList + ""<br>"");', 'function pushFunction() {', 'var noOfElement = movieList.push("" Twilight"", "" Caption America"");', 'document.write(""<b> Elements after adding new elements: </b>"" + movieList);', 'document.write(""<br> Number of elements in array: "" + noOfElement);', 'pushFunction();', '</script>', '</body>', '</html>', '<script>', 'var seriesList = [""Sherlock"", "" Harry Potter"", "" Games of Throne""];', 'document.write(""<b> Initially elements in array: </b>"" + seriesList + ""<br>"");', 'function pushFunction() {', 'seriesList.push("" Avengers"", "" Prison Break"", "" The Spy"");', 'document.getElementById(""result"").innerHTML = ""<b> Array after adding new elements: </b> </br>"" + seriesList;', '</script>', '<h3> Click the button to add three more elements to the array </h3>', '<button onclick=""pushFunction()""> Push Elements </button>', '<h4 id=""result"">', '</body>', '</html>', '<center>', '<h3 style=""color:green""> push() method </h3>', '<script>', 'var seriesList = [""Rush Hour"", "" Harry Potter"", "" X Men""];', 'document.write(""<b> Initially elements in array: </b> <br>"" + seriesList + ""<br>"");', 'function addObject() {', 'var movie = document.getElementById(""mv"").value;', 'seriesList.push(movie);', 'document.getElementById(""result"").innerHTML = ""<b> Array after adding new elements:</b> <br>"" + seriesList;', '</script>', '<p> Enter the movie name and click the button to add it to the array </p>', '<b> Enter movie name: </b>', '<input type=""text"" id=""mv"">', '<button type=submit onclick=""addObject()""> Add Elements </button>', '<h4 id=""result""> </h4>', '</body>', '</center>', '</html>', 'array.splice(startindex, howmany, objectName)', 'array.splice(startindex, 0, objectName)', '<center>', '<h3 style=""color:green""> splice() method </h3>', '<script>', 'var seriesList = [""Sherlock"", "" Harry Potter"", "" Games of Throne""];', 'document.write(""<b> Initially elements in array: </b> <br>"" + seriesList + ""<br>"");', 'function addObject() {', 'seriesList.splice(1, 2, "" Prison Break"", "" The Spy"", "" Avengers"");', 'document.getElementById(""result"").innerHTML = ""<b> Array after adding new elements:</b> <br>"" + seriesList;', '</script>', '<h3> Click the button to add three elements to the array </h3>', '<button onclick=""addObject()""> Add Elements </button>', '<h4 id=""result""> </h4>', '</body>', '</center>', '</html>', '<center>', '<h3 style=""color:green""> splice() method </h3>', '<script>', 'var seriesList = [""Sherlock"", "" Harry Potter"", "" Games of Throne""];', 'document.write(""<b> Initially elements in array: </b>"" + seriesList + ""<br>"");', 'function addObject() {', 'seriesList.splice(2, 0, "" Prison Break"", "" The Spy"");', 'document.getElementById(""result"").innerHTML = ""<b> Array after adding new elements: </b> </br>"" + seriesList;', '</script>', '<h3> Click the button to add three more elements to the array </h3>', '<button onclick=""addObject()""> Add Elements </button>', '<h4 id=""result""> </h4>', '</body>', '</center>', '</html>', 'array.unshift(objectName)', '<center>', '<h3 style=""color:green""> Simple unshift() method Example </h3>', '</center>', '</body>', '<script>', 'var movieList = [""Rush hour"", "" X-Men"", "" Avengers""];', 'document.write(""<b><br> Initially elements in array: </b>"" + movieList + ""<br>"");', 'function addFunction() {', 'var noOfElement = movieList.unshift("" Twilight"", "" Caption America"");', 'document.write(""<b> Elements after adding new elements: </b>"" + movieList);', 'document.write(""<br> Number of elements in array: "" + noOfElement);', 'addFunction();', '</script>', '</html>', '<center>', '<h2 style=""color:green""> unshift() method </h2>', '<script>', 'var seriesList = [""Sherlock"", "" Harry Potter"", "" Games of Throne""];', 'document.write(""<b> Initially elements in array: </b><br>"" + seriesList + ""<br>"");', 'function addElement() {', 'seriesList.unshift("" Avengers"", "" Prison Break"", "" The Spy"");', 'document.getElementById(""result"").innerHTML = ""<b> Array after adding new elements: </b> </br>"" + seriesList;', '</script>', '<h3> Click the button to add three more elements to the array </h3>', '<button onclick=""addElement()""> Add Elements </button>', '<h4 id=""result"">', '</body>', '</center>', '</html>', '<center>', '<h3 style=""color:green""> Dynamic Example of unshift() method </h3>', '<script>', 'var seriesList = [""Rush Hour"", "" Harry Potter"", "" X Men""];', 'document.write(""<b> Initially elements in array: </b> <br>"" + seriesList + ""<br>"");', 'function addObject() {', 'var movie = document.getElementById(""mv"").value;', 'seriesList.unshift(movie);', 'document.getElementById(""result"").innerHTML = ""<b> Array after adding new elements:</b> <br>"" + seriesList;', '</script>', '<p> Enter the movie name and click the button to add it to the array </p>', '<b> Enter movie name: </b>', '<input type=""text"" id=""mv"">', '<button type=submit onclick=""addObject()""> Add Elements </button>', '<h4 id=""result""> </h4>', '</body>', '</center>', '</html>']",[],[],['|||push()|||splice()|||unshift()|||&&&|||By removing other elements|||Without removing other elements|||']
145,['JavaScript Window open method'],['JavaScript offers in-built methods to open and close the browser window to perform additional operations like robot window etc. These methods help to open or close the browser window pop-ups. Following are the window methods:'],"['https://www.javatpoint.com/javascript-window-close-method', 'https://www.javatpoint.com/how-to-add-object-in-array-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/google-chrome', 'https://www.javatpoint.com/https://www.javatpoint.com/mozilla-firefox', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-window-open-method1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-window-open-method2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-window-open-method3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-window-open-method4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-window-open-method5', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-window-open-method6', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-window-open-method7', 'https://www.javatpoint.com/javascript-window-close-method', 'https://www.javatpoint.com/how-to-add-object-in-array-using-javascript', 'https://www.javatpoint.com/javascript-window-close-method']","['https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method1.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method7.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method8.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method9.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method10.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method11.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-open-method12.png']",[],['Window.open()'],"['Syntax', 'Parameters List', 'Return Values', 'Examples', '1. open() with URL parameter', '2. open() without parameters', '3. open() with name parameters', '4. Define the size for the new window', 'Open new window with a name and having a message', 'Close the window opened by window.open()', 'Browser Support']","['Note that you can also pass the URL to the window.open() method to open any website.', 'Note: You can use the close() method of JavaScript to close the opened browser window or tab open by window.open(). We will discuss it in the next chapter in more detail.']","['This function accepts four parameters, but they are optional.', 'You can also use this function without using the window keyword as shown below:', 'There is no difference between both syntaxes.', 'Below is the parameters list of window.open() method. Note that - all parameters of this method are optional and works differently.', 'name: Using this parameter, you can set the name of the window you are going to open. It supports the following values:', 'The above-specified values are passed inside a single or double quote to the window.open() function at the name parameter place.', 'It supports several values.', 'It will return a newly opened window.', 'This code can be written as given below -', 'When you click on this Open Window button, javatpoint site will open in a new tab inside the same window.', 'See the screenshot below:', 'In this example, we will not pass any parameter to window.open() function so that the new tab will open in previous window.', 'When you will execute the above code, a button will appear with it.', 'When you click this Open Window button, a blank window will open in a new tab.', 'In this example, we will specify the _parent at the name parameter. You can pass any of these values (_parent, _blank, _top, etc.) in it.', 'Execute the code and get the output as given below. This will contain a button to click and open the new URL on the same parent window.', 'When you click this button, Gmail will open under the same parent window.', 'When you will pass the different values in second parameter, you will see the difference for different values.', 'Execute the above code and get the output as given below. This will contain a button to click and open the new URL on the same parent window.', 'When you click this button, a new blank window will open under the parent window of size.', 'Execute the code and get the output as given below. It will contain a button to click and open the new URL on the same parent window.', 'When you click this button, a new window will open with a user-defined message under the parent window of size 300*150. ', 'JavaScript also offers the in-built method, i.e., close() to close the browser window.', 'When you will execute the code, you will get the response as shown below:', 'If you click the Close Javatpoint button, this opened window will be minimized.', 'Several web browsers support the window.open() method, such as:', 'You can use and run the window.open() method on these above browsers.']","['The window.open method is used to open a new web page into a new window and window.close method to close web page opened by window.open method. See the window.open() method in detail:', 'It is a pre-defined window method of JavaScript used to open the new tab or window in the browser. This will depend on your browser setting or parameters passed in the window.open() method that either a new window or tab will open.', 'This method is supported by almost all popular web browsers, like Chrome, Firefox, etc. Following is the syntax and parameters of the window open method -', 'URL: This optional parameter of the window.open() function contains the URL string of a webpage, which you want to open. If you do not specify any URL in this function, it will open a new blank window (about:blank).', 'specs: This parameter contains the settings that are separated by the comma. Element used in this parameter cannot have whitespaces, e.g., width=150,height=100.', 'Here are some examples of window.open() function to open the browser window/tab. By default, the specified URL opens in new tab or window. See the examples below:', 'This is a simple example of window open method having a website URL inside it. We have used a button. By clicking on this button, window.open() method will call and open the website in new browser tab.', 'Click the Open Javatpoint button to open the Javatpoint tutorial website. We have specified the size (height and width) of the new pop-up window to open.']","['replace: Like the other parameters of window.open() method, this is also an optional parameter. It either creates a new entry or replaces the current entry in history list. It supports two Boolean values; this means that it returns either true or false:', 'In this example, we will specify the height and width for the new window. For this, we will use the third parameter (specs) in window.open() method and pass the height and width of the window separated by a comma to this function. So, the window will open in the specified size.', 'We can show any user-defined text or form in new window that we are going to open on button click. For this, we need to provide any name to the new window and write some text into it. This name will pass to the window.open() method. See the code below how it will implement with actual coding.', 'In this example, we will show you how to close the window or tab opened by the window.open() method. Firstly, we will open a website URL in a new window (size defined in code) using a button click and then use another button to close that opened window. See the below code how it will be done:']","['window.open(URL, name, specs, replace);', 'open(URL, name, specs, replace)', 'Click the button to open new window <br><br>', '<button onclick=""window.open(\'https://www.javatpoint.com\')""> Open Window </button>', '</body>', '</html>', '<script>', 'function openWindow() {', ""window.open('https://www.javatpoint.com');"", '</script>', 'Click the button to open new window <br><br>', '<button onclick=""openWindow()""> Open Window </button>', '</body>', '</html>', '<script>', 'function openWindow() {', 'window.open();', '</script>', 'Click the button to open new window <br><br>', '<button onclick=""openWindow()""> Open Window </button>', '</body>', '</html>', '<script>', 'function openWindow() {', ""window.open('https://gmail.com', '_parent');"", '</script>', '<b> Click the button to open new window in same tab </b>', '<br><br>', '<button onclick=""openWindow()""> Open Window </button>', '</body>', '</html>', '<script>', 'function openWindow() {', 'window.open("""", """", ""width=300,height=200"");', '</script>', '<b> Click the button to open new window in same tab </b>', '<br><br>', '<button onclick=""openWindow()""> Open Window </button>', '</body>', '</html>', '<script>', 'function openWindow() {', 'var newtab = window.open("""", ""anotherWindow"", ""width=300,height=150"");', 'newtab.document.write(""<p> This is \'anotherWindow\'. It is 300px wide and 150px tall new window! </p>"");', '</script>', '<b> Click the button to open the new user-defined sized window </b>', '<br><br>', '<button onclick=""openWindow()""> Open Window </button>', '</body>', '</html>', '<html>', '<head>', '<title> Open and close window method example </title>', '<script>', 'function windowOpen() {', 'var newWindow = window.open(', '""https://www.javatpoint.com/"", ""_blank"", ""width=500, height=350"");', 'function windowClose() {', 'newWindow.close();', '</script>', '</head>', '<center>', '<h2 style=""color:green""> Window open() and close() method </h2>', '<body>', '<b> Click the button to open Javatpoint tutorial site </b><br>', '<button onclick=""windowOpen()""> Open Javatpoint </button>', '<br><br>', '<b> Click the button to close Javatpoint tutorial site </b><br>', '<button onclick=""windowClose()""> Close Javatpoint </button>', '</body>', '</center>', '</html>']",[],"['_blank|||Passed URL will load into a new tab/window.&&&_parent|||URL will load into the parent window or frame that is already opened.&&&_self|||By passing this parameter, the URL will replace the previous output and a new window will open in the same frame.&&&_top|||URL replaces any frameset that can be loaded.&&&Name|||Provide the name of the new window to show the text or any data on it. (Note - not the title of the window)', 'True|||Return true if URL replaces the current entry or document in history list.&&&False |||Return false if URL creates a new entry in history list.']","['|||open()|||close()||||||Chrome|||Mozilla Firefox|||Internet Explorer (IE)|||Opera|||Safari, etc.|||']"
146,['JavaScript Window close method'],"['JavaScript provides an in-built function named close() to close the browser window that is opened by using window.open() method. Unlike the window.open() method, it does not contain any parameter. This window.close() method simply close the window or tab opened by the window.open() method.']","['https://www.javatpoint.com/how-to-check-a-radio-button-using-javascript', 'https://www.javatpoint.com/javascript-window-open-method', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-window-close-method1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-window-close-method2', 'https://www.javatpoint.com/how-to-check-a-radio-button-using-javascript', 'https://www.javatpoint.com/javascript-window-open-method', 'https://www.javatpoint.com/how-to-check-a-radio-button-using-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-window-close-method.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-close-method2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-close-method3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-window-close-method4.png']",[],['Close the window'],"['Syntax', 'Parameters List', 'Example', 'Example 2', 'Browser Support']",[],"['Here, window is the name of that window that is opened by the window open method.', 'This method does not have any parameters.', ""Let's understand with the help of an example. We will take an example to show you how to close the window or tab opened by the window.open() method."", 'In this example, we will not specify any URL in open() method. See the below code how it will work:', 'You will get the output same as the given below. Here, clicks the Open New Window button to open a user-defined browser window.', 'A new window will pop-up with a message, as shown below. Now, click the Close New Window button to close this pop-up window.', 'When you will execute the code, you will get the response as shown below:', 'If you click the Close Javatpoint button, this opened window will be minimized.', 'Several web browsers support this window function, such as:', 'You can run window.close() JavaScript function on these above browsers.']","['Remember that - You have to define a global JavaScript variable to hold the value returned by window.open() method, which will be used later by the close() method to close that opened window.', 'Firstly, we will open a website URL in a new window (size defined in code) using a button click and then use another button to close that opened window.', 'This example will have a website URL inside the window.open() method to open a website in a new window. Then we will use close() method to close that window.', 'Click the Open Javatpoint button to open the Javatpoint tutorial website. We have specified the size (height and width) of the new pop-up window to open.']",[],"['window.close()', '<script>', 'var newWindow;', 'function openWindow() {', 'newWindow = window.open("""", ""myWindow"", ""width=200,height=100"");', 'newWindow.document.write(""<p>It is my \'newWindow\'</p>"");', 'function closeWindow() {', 'newWindow.close();', '</script>', '<h3 style=""color:brown""> Close Window Example </h3>', '<button onclick=""openWindow()"">Open New Window</button>', '<br><br>', '<button onclick=""closeWindow()"">Close New Window </button>', '</body>', '</html>', '<html>', '<head>', '<title> Open and close window method example </title>', '<script>', 'var newWindow;', 'function windowOpen() {', 'newWindow = window.open(', '""https://www.javatpoint.com/"", ""_blank"", ""width=500, height=350"");', 'function windowClose() {', 'newWindow.close();', '</script>', '</head>', '<center>', '<h2 style=""color:green""> Window open() and close() method </h2>', '<body>', '<b> Click the button to open Javatpoint tutorial site </b><br>', '<button onclick=""windowOpen()""> Open Javatpoint </button>', '<br><br>', '<b> Click the button to close Javatpoint tutorial site </b><br>', '<button onclick=""windowClose()""> Close Javatpoint </button>', '</body>', '</center>', '</html>']",[],[],"['|||Chrome|||Mozilla Firefox|||Internet Explorer (IE)|||Opera|||Safari, etc.|||']"
147,['How to check a radio button using JavaScript?'],"['A radio button is an icon that is used in forms to take input from the user. It allows the users to choose one value from the group of radio buttons. Radio buttons are basically used for the single selection from multiple ones, which is mostly used in GUI forms.']","['https://www.javatpoint.com/javascript-const', 'https://www.javatpoint.com/javascript-window-close-method', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-button-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-check-a-radio-button-using-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-form', 'https://www.javatpoint.com/https://www.javatpoint.com/document-getElementById()-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-check-a-radio-button-using-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/css-selector', 'https://www.javatpoint.com/https://www.javatpoint.com/html-script-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-check-a-radio-button-using-javascript3', 'https://www.javatpoint.com/javascript-const', 'https://www.javatpoint.com/javascript-window-close-method', 'https://www.javatpoint.com/javascript-const']","['https://static.javatpoint.com/javascriptpages/images/how-to-check-a-radio-button-using-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-check-a-radio-button-using-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-check-a-radio-button-using-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-check-a-radio-button-using-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-check-a-radio-button-using-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-check-a-radio-button-using-javascript6.png']",[],"['Create a radio button', 'Check a radio button', 'Check the radio button is selected or not', 'Get the value of checked radio button:', 'Full code to get selected radio button value', 'Get the value of selected radio button: querySelector()', 'getElementById vs querySelector']","['Example', 'querySelector()', 'Example', 'Using getElementById ()', 'Using querySelector()', 'DOM querySelector() method', 'Length of code', 'Performance', 'Value used by DOM methods']",[],"['Following is a simple code for creating a group of radio buttons.', 'We do not need to write any specific code to check the radio button. They can be checked once they are created or specified in HTML form.', 'However, we have to write the JavaScript code to get the value of the checked radio button, which we will see in the chapter below:', 'True - If radio button is selected.', 'False - If radio button is not selected/ checked.', 'See the JavaScript code below to know how it works:', ""For example, we have a radio button named Summer and id = 'summer'. Now, we will check using this button id that the radio button is marked or not."", 'Following is the code to get the value of checked radio button using getElementById() method:', 'Following is the code to get the value of checked radio button using querySelector() method:', 'When you will execute the above code, it will run on the web and give the output as given below:', 'Choose one of the radio buttons and click on the Submit button and get the selected value.', 'See the code below how it will use with HTML form:', 'When you will execute the above code, it will show you the output on the web as given below. From here, choose your favourite season.', 'When you choose a value between the given radio button and click on the Submit button, you will get the selected value on the web.']","['You can mark/check only one radio button between two or more radio buttons. In this chapter, we will guide you on how to check a radio button using the JavaScript programming language.', 'For this, first we design a form containing radio buttons using HTML, and then we will use JavaScript programming to check the radio button. We will also check which radio button value is selected.', 'There are two ways in JavaScript to check the marked radio button or to identify which radio button is selected. JavaScript offers two DOM methods for this.', 'The querySelector() function is a DOM method of JavaScript. It uses the common name property of radio buttons inside it. This method is used as given below to check which radio button is selected.', ""For example, we have a group of radio buttons having the name property name = 'season' for all buttons. Now, between these buttons named season we will check which one is selected."", 'In this example, we will put all the above code together to create and check a radio button. After that we will also fetch the value of the selected radio button.', 'In case you do not choose any of the seasons and directly click on the Submit button, it will show you an error message that - You have not selected any season because we have used the validation.', 'The querySelector() function is a DOM method of JavaScript. This method is used to get the element that matches with the specified CSS selector in the document. Remember you need to specify the name property of the radio button in HTML code.', 'In case you click on the Submit button without choosing any of the radio button, it will show you an error message that - You have not selected any season.', 'So, here you can see that both getElementById(\'season\').value and document.querySelector(\'input[name=""JTP""]:checked\') work same. Both are used to find the checked radio button value. You can use any of them.', ""Both DOM methods getElementByID() and querySelector() works almost the same. However, they also have few differences like performance and size of code, etc. Let's see some difference between them:"", 'The code written with getElementById is a bit longer than the querySelector. Using the getElementById method, we need to check each radio button individually which one is checked.', 'On the other side, if you use the querySelector DOM method, you just have to put a single line of code to check the marked radio button and get its value. So, the conclusion is that querySelector requires less code.', 'Both functions provide good performance but all you need to know which one is better. The getElementById method is much faster than the querySelector method. The querySelector method is a bit complex, as well.', 'The getElementById method always uses a unique id of each radio button while checking the marked button and returns the first element matches with the id.', 'Whereas querySelector uses a common name (selector) for all radio buttons to get the marked radio button and returns the first element that matches with the specified selector.']","[""The input radio checked property is used to check whether the checkbox is selected or not. Use document.getElementById('id').checked method for this. It will return the checked status of the radio button as a Boolean value. It can be either true or false."", 'It is used as document.querySelector(\'input[name=""JTP""]:checked\') inside the <script> tab to check the selected radio button value from the group of radio buttons. It minimizes the length of the code by getting the value of the selected radio button using a small line of code.']","['<p> Choose your favroite season: </p>', '<input type=""radio"" name=""JTP"" id=""summer"" value=""summer"">Summer<br>', '<input type=""radio"" name=""JTP"" id=""winter"" value=""winter"">Winter<br>', '<input type=""radio"" name=""JTP"" id=""rainy"" value=""rainy"">Rainy<br>', '<input type=""radio"" name=""JTP"" id=""autumn"" value=""autumn"">Autumn<br>', ""if(document.getElementById('summer').checked == true) {"", 'document.write(""Summer radio button is selected"");', '} else {', 'document.write(""Summer radio button is not selected"");', 'document.querySelector(\'input[name=""JTP""]:checked\')', 'var getSelectedValue = document.querySelector( \'input[name=""season""]:checked\');', 'if(getSelectedValue != null) {', 'document.write(""Radio button is selected"");', '} else {', 'document.write(""Nothing has been selected"");', ""if(document.getElementById('summer').checked) {"", ""var selectedValue = document.getElementById('summer').value;"", 'alert(""Selected Radio Button is: "" + selectedValue);', 'var getSelectedValue = document.querySelector( \'input[name=""season""]:checked\');', 'if(getSelectedValue != null) {', 'alert(""Selected radio button values is: "" + getSelectedValue.value);', '<br><b> Choose your favroite season: </b><br>', '<input type=""radio"" id=""summer"" value=""Summer"">Summer<br>', '<input type=""radio"" id=""winter"" value=""Winter"">Winter<br>', '<input type=""radio"" id=""rainy"" value=""Rainy"">Rainy<br>', '<input type=""radio"" id=""autumn"" value=""Autumn"">Autumn<br><br>', '<button type=""button"" onclick="" checkButton()""> Submit </button>', '<h3 id=""disp"" style= ""color:green""> </h3>', '<h4 id=""error"" style= ""color:red""> </h4>', '</body>', '<script>', 'function checkButton() {', ""if(document.getElementById('summer').checked) {"", 'document.getElementById(""disp"").innerHTML', '= document.getElementById(""summer"").value', '+ "" radio button is checked"";', '}', ""else if(document.getElementById('winter').checked) {"", 'document.getElementById(""disp"").innerHTML', '= document.getElementById(""winter"").value', '+ "" radio button is checked"";', '}', ""else if(document.getElementById('rainy').checked) {"", 'document.getElementById(""disp"").innerHTML', '= document.getElementById(""rainy"").value', '+ "" radio button is checked"";', '}', ""else if(document.getElementById('autumn').checked) {"", 'document.getElementById(""disp"").innerHTML', '= document.getElementById(""autumn"").value', '+ "" radio button is checked"";', '}', 'else {', 'document.getElementById(""error"").innerHTML', '= ""You have not selected any season"";', '}', '}', '</script>', '</html>', 'var selectedValue = document.querySelector(\'input[name=""JTP""]:checked\')', '<br><b> Choose your favroite season: </b><br>', '<input type=""radio"" name=""season"" id=""summer"" value=""Summer""> Summer <br>', '<input type=""radio"" name=""season"" id=""winter"" value=""Winter""> Winter <br>', '<input type=""radio"" name=""season"" id=""rainy"" value=""Rainy""> Rainy <br>', '<input type=""radio"" name=""season"" id=""autumn"" value=""Autumn""> Autumn', '<br><br>', '<button type=""button"" onclick="" checkButton()""> Submit </button>', '<h3 id=""disp"" style= ""color:green""> </h3>', '<h4 id=""error"" style= ""color:red""> </h4>', '</body>', '<script>', 'function checkButton() {', 'var getSelectedValue = document.querySelector(', '\'input[name=""season""]:checked\');', '', 'if(getSelectedValue != null) {', 'document.getElementById(""disp"").innerHTML', '= getSelectedValue.value', '+ "" season is selected"";', '}', 'else {', 'document.getElementById(""error"").innerHTML', '= ""*You have not selected any season"";', '}', '}', '</script>', '</html>']",[],[],['|||getElementById|||querySelector|||']
148,['JavaScript Const'],"['ES6 introduced the const keyword, which is used to define a new variable in JavaScript. Generally, the var keyword is used to declare a JavaScript variable. Const is another keyword to declare a variable when you do not want to change the value of that variable for the whole program.']","['https://www.javatpoint.com/javascript-function-to-check-array-is-empty-or-not', 'https://www.javatpoint.com/how-to-check-a-radio-button-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-const1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-const2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-const3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-const4', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-function-to-check-array-is-empty-or-not', 'https://www.javatpoint.com/how-to-check-a-radio-button-using-javascript', 'https://www.javatpoint.com/javascript-function-to-check-array-is-empty-or-not']",[],[],[],"['Const variable declaration/initialization', 'Properties', 'Examples']",[],"['Following is the syntax or simple code for const variable declaration and initialization.', 'It will display the value of the const variable x without any error.', 'Now, we will discuss some properties of the variables defined using const.', 'Following are the properties of const variable:', 'Here, we have some examples for different properties explanation practically.', 'Example 1: With the help of this example, you will see that the const variable cannot be reassigned.', 'It will generate a type error because it is not possible to reassign the value to a constant variable.', 'Example 2: In this example, you will learn that the const variable contains Block scope.', 'There will be no error by executing the above code. It will just print the value of x of different blocks without any syntax or type error.', 'Example 3: This example will describe that the const variable cannot be hoisted.', 'It will generate a syntax error because redeclaration of a variable is not allowed.', 'Example 4: This example will show you that the const variable cannot be initialized after declaration.', 'It will generate a syntax error because initialization is not allowed after the declaration of const variable.', 'Example 5: In JavaScript, const allows you to only modify the value of the array, but the reference to the array cannot be changed.', 'Example 6: In this example, we will show you that the const variable value cannot be changed or modified.', 'Here, you can see that you cannot reinitialize the object values by the same name, but the object values can be changed by using their reference.']","['The difference is just that var is for normal variable declaration whose value can be changed, whereas a variable value declared using const keyword cannot be changed.', 'Here, you can see the Manya name has been replaced by Krishna. Although the array was declared using const keyword. So, it will display all values of the array without any error both times.']",[],"['<script>', 'const x = 16;', 'document.write(""The value of const variable x = "" + x);', '</script>', '<script>', 'const x = 16;', 'x = 23;      //Type Error', '</script>', '<script>', 'const x = 16;', 'const x = 23;', 'document.write(""Block2: x = "" + x);                   //23', '{', 'const x = 74;', 'document.write( ""<br> Block3: x = "" + x);       //74', '}', '{', 'const x = 49;', 'document.write(""<br> Block4: x = "" + x);        //49', '}', 'document.write(""<br> Block1: x = "" + x);                  //16', '</script>', '<script>', 'x = 16;', 'document.write(x);', 'const x;     //Syntax Error', '</script>', '<script>', 'const x;', 'x = 18;    //Syntax Error', 'document.write(x);', '</script>', '<script type=""text/javascript"">', 'const nameArray = ["" Aparna"", "" Manya"", "" Amayra"", "" Jahnavi""];', 'document.write(nameArray.toString());', 'document.write(""</br> </br>"");', 'nameArray [1] = "" Krishna""; // possible', 'document.write(nameArray.toString());', '</script>', '<script>', 'const employee = {', 'fname: ""Annie"",', 'lname: ""Roy"",', 'age: 22,', 'profession: ""Web Developer""', '};', 'document.write(employee);', 'employee.fname = ""Emmy"";', 'employee.lname = ""Jackson"";', 'employee.Age = 24;', 'employee.profession = ""QA Analyst"";', 'document.write(employee);', '/* const employee = {', '""fname"": ""Emmy"",', '""lname"": ""Jackson"",', '""age"": 24,', '""profession"": ""QA Analyst""', '}  */', '</script>']","['The value of const variable x = 16', 'JavaScript error: Uncaught TypeError: Assignment to constant variable. on line 3', 'Block2: x = 23', 'Block3: x = 74', 'Block4: x = 49', 'Block1: x = 16', 'JavaScript error: Uncaught SyntaxError: Missing initializer in const declaration on line 4', 'JavaScript error: Uncaught SyntaxError: Missing initializer in const declaration on line 2', 'Aparna, Manya, Amayra, Jahanvi', 'Aparna, Krishna, Amayra, Jahanvi', '[object object] [object object]']",[],"['|||Variable define using const keyword cannot be reassigned, or its value cannot be changed.|||The const variable must be initialized at the time of declaration with the variable name, e.g., const x=6;|||You cannot provide the value to the variable after declaration.|||The value of the const variable cannot be changed.|||The const variable has block scope. This means that a const variable within the same program can be reassigned by the same name and have different values in different blocks.|||A const variable cannot be hoisted, which means that a variable declared/initialized using var keyword cannot be reassigned using const.|||In JavaScript, const allows you to only modify the value of the array, but the reference to the array cannot be changed.|||The const variable creates only reference to the value.|||Object properties can be changed but the reference to an object cannot be changed.|||']"
149,['JavaScript function to check array is empty or not'],['JavaScript provides in-built functions to check whether the array is empty or not. Following are the method offered by JavaScript programming to check an empty array:'],"['https://www.javatpoint.com/javascript-multi-line-string', 'https://www.javatpoint.com/javascript-const', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-array-isarray-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-function-to-check-array-is-empty-or-not1', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-function-to-check-array-is-empty-or-not2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-function-to-check-array-is-empty-or-not3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-function-to-check-array-is-empty-or-not4', 'https://www.javatpoint.com/javascript-multi-line-string', 'https://www.javatpoint.com/javascript-const', 'https://www.javatpoint.com/javascript-multi-line-string']",[],[],"['.length property', 'Array.isArray()', 'isArray() and .length property together', 'Array.isArray() vs .length']","['Syntax', 'How to use?', 'Syntax', 'Return values', 'How to use?', 'Example', 'Example 2', 'Syntax', 'How to use it?', 'Example 1']",['Note: It is a complex and less clear way to get the exact result.'],"['Now, we will learn these methods in detail with examples:', 'It is directly used with a user-defined array concatenated by dot (.) operator. See the below example of this property to understand it better.', 'It returns a Boolean value, either true or false.', 'True - If it returns true, the passed value is an array.', 'False - If it returns false, the value passed in this function is not an array type.', 'In the below output, you can see that the value we have checked using Array.isArray() function is an array, but the array is not empty.', 'In this example, we will check an array for empty and another variable for non-array value. See the code below:', 'Both length property and Array.isArray() function can be used together inside the if-condition connected by AND (&&) operator.', 'Following is the syntax for both isArray() and length property how they used together:', 'Use the above syntax with if-else condition to check the array type and empty array.', 'See the below example to understand how both functions work together to check an empty array in JavaScript.', 'Check if array is Empty', 'You can use OR (||) operator between both conditions to check array is empty.', 'Check if array is not Empty', 'You can use the inverse method to check array is not empty. For this, use AND (&&) operator to put the conditions to check array is not empty.', 'You can see that arr1 is empty array and err2 is either not an array or not empty in the below output.']","['The Array.isArray() function checks the array type (passed parameter is an array or not) and array.length find the length of the array. So, we can identify the empty array easily. You can use them individually and separately as well.', 'The length property returns the length of the array by which you can determine whether the array is empty or not. This property is directly used with the name of array concatenated by dot (.) operator, e.g., arr1.length.', 'If the length returned by this property is 0, it refers to true means the array is empty. Otherwise, the array is not empty if it returns a non-zero value.', 'In the below output, you can see that the first array named arr1 is not empty as it has five elements in it, whereas the second array named arr2 is empty.', 'This method helps to determine that the value you have passed in this function is array or not. We can say that it identifies the array type or normal data type variable. It can also determine the undefined or null array.', 'This function is used with name of array, e.g., Array.isArray(arr1). Here, we will use this function with .length property to check the empty array. See the implementation of this function in a JavaScript example to understand it better.', 'In the below output, you can see that the first array named arr1 an array and it is empty as well because it does not have elements in it, whereas the second variable named arr2 is not an array.', 'Now, we will use this function in an example to understand it better. In this example, we have checked two variables, either they are array type or not.', 'The .length property can be used with other data types like string to find the length. Whereas the Array.isArray() method is only used with array data, which also helps to identify that your array is an array.', 'Array.isArray() method is a bit lengthy because here we first to determine whether the variable is array type or not and then we have to use .length property to check empty array.', 'So, we will suggest you use .length property to directly check the length of the array variable for small calculation and determine whether it is empty or not.']","['In JavaScript, arrays not actually array; they are objects. So, if you check the type of array using typeof property, it will return value as an object. But now we have Arrau.isArray() function to check the type of array, which can be used with .length property to check empty array.']","['array.length', '<script>', 'var arr1 = [15, 78, 24, 89, 23];', 'var arr2 = [];', 'if(arr1.length == 0)', 'document.write(""arr1 is empty <br>"");', 'else', 'document.write(""arr1 is not empty <br>"");', 'if(arr2.length == 0)', 'document.write(""arr2 is empty <br>"");', 'else', 'document.write(""arr2 is not empty <br>"");', '</script>', 'Array.isArray(arr1)', '<script>', ""var arr1 = new Array('Happy', 'New', 'Year');"", 'if(Array.isArray(arr1)) {', 'document.write(""arr1 is an array"");', 'if (arr1.length == 0)', 'document.write("" and it is empty <br>"");', 'else', 'document.write("" but it is not empty. <br>"");', 'else', 'document.write(""arr1 is not an array. <br>"");', '</script>', '<script>', 'var arr1 = [];', 'var arr2 = ""notAnArray"";', 'if(Array.isArray(arr1) == true){', 'document.write(""arr1 is an array"");', 'if (arr1.length <= 0)', 'document.write("" and it is empty <br>"");', 'else', 'document.write("" and it is not empty. <br>"");', 'else', 'document.write(""arr1 is not an array. <br>"");', '', 'if(Array.isArray(arr2) == true){', 'document.write(""arr2 is an array"");', 'if (arr2.length <= 0)', 'document.write("" and it is empty as well. <br>"");', 'else', 'document.write("" and it is not empty. <br>"");', 'else', 'document.write(""arr2 is not an array. <br>"");', '', '</script>', 'Array.isArray(arr1) && arr1.length', 'if(Array.isArray(arr1) || arr1.length) {', 'if(Array.isArray(arr1) && arr1.length) {', '<script>', 'var arr1 = [];', 'var arr2 = [15, 78, 24, 89, 23];', 'if(Array.isArray(arr1) == true && arr1.length <= 0)', 'document.write(""arr1 is an array and it is empty <br><br>"");', 'else', 'document.write(""Either arr1 is not an array or it is not empty <br><br>"");', '', 'if(Array.isArray(arr2) == true && arr2.length <= 0)', 'document.write(""arr2 is an array and it is empty <br>"");', 'else', 'document.write(""Either arr2 is not an array or it is not empty </br>"");', '</script>']","['arr1 is not empty', 'arr2 is empty', 'arr1 is an array but it is not empty.', 'arr1 is an array and it is empty as well.', 'arr2 is not an array.', 'arr1 is an array and it is empty.', 'Either arr2 is not an array or it is not empty.']",[],['|||length|||isArray(array)|||']
150,['JavaScript multi-line String'],"['String manipulation is easy to learn but most difficult to master of it in JavaScript. Earlier, multi-line string was not supported by JavaScript. After 2015, string literals have introduced by ES6 (ECMAScript 6) that supports multi-line string.']","['https://www.javatpoint.com/javascript-anonymous-functions', 'https://www.javatpoint.com/javascript-function-to-check-array-is-empty-or-not', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-multi-line-string1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-br-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-multi-line-string2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-multi-line-string3', 'https://www.javatpoint.com/https://www.javatpoint.com/html-heading', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-multi-line-string4', 'https://www.javatpoint.com/https://www.javatpoint.com/html-paragraph', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-multi-line-string5', 'https://www.javatpoint.com/javascript-anonymous-functions', 'https://www.javatpoint.com/javascript-function-to-check-array-is-empty-or-not', 'https://www.javatpoint.com/javascript-anonymous-functions']","['https://static.javatpoint.com/javascriptpages/images/javascript-multi-line-string.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-multi-line-string2.png']",[],['Method 1'],"['Example', 'Example 2: Concatenating individual string', 'Example 3']",[],"['Following are a couple of ways to work with multi-line string:', 'Here is the practical implementation of multi-line string using JavaScript programming:', 'When you will execute this code, three text strings will display you on the web that will be divided using the break line tab (<br>) of HTML.', 'In this example, we will simply print the multi-line string without any line break using JavaScript programming:', 'When you will execute this code, two text paragraphs will show you on the web that will be divided using the break line tab (<br>) of HTML.', 'When you will execute this code, three paragraphs will display you on the web that will be divided using the break line tab (<br>) of HTML.', 'The above-passed line will show in multiple new lines. These lines are started from a new line using the paragraph and bold tab.', 'Method 3: In this method, we will print a multi-line string. This mostly comes into work when you want to write paragraph writing.', 'You can write multi-line text text inside multiple HTML tabs for clear understanding of paragraph. See with help of an example:', 'Click this Display Multiline button and a text string will display you in multiple lines. See the output below:']","['Now, there are several ways to handle multi-line string. We will discuss these different methods to handle multi-line string one-by-one in this chapter.', 'It is the simplest way of JavaScript to show the string text in multiple lines. Use the break line tab (<br>) or HTML inside the document.write() function to start the text from the new line.', 'This is a simple example of multi-line text printing using JavaScript programming. In this we have only used HTML <br> tab to break the sentences in multiple line:', 'Method 2: You can also pass the text string inside <p> or <b> or heading tabs (<h1> to <h6>) to divide them into multiple lines or paragraphs. See the code below:', 'An output will display you on the web by executing the above. See the response below; you will see a Display Multiline button to show you a text string.']",[],"['<html>', '<head>', '<title> Multiple new lines example </title>', '</head>', '<script>', 'document.write(""This is first line display using JavaScript."");', 'document.write(""<br>"");', 'document.write(""This is second line and divided using break line tab of HTML."");', 'document.write(""<br>"");', 'document.write(""Now, we again printed another new line."")', '</script>', '</html>', '<html>', '<head>', '<title> Multiple new lines example </title>', '</head>', '<script>', ""var myString ='Javatpoint is a website of technologies, ' +"", ""'which provides tutorials of different technologies and tools. ' +"", ""'Here you will get tutorials in detail' +"", ""'like theory as well as practical implementation.' +"", ""'<br> We will try to provide you the best knowledge from our side.' +"", ""'Student, teachers, and industry professionals can learn from here.';"", '', 'document.write(myString);', '</script>', '</html>', '<html>', '<head>', '<title> Multiple new lines example </title>', '</head>', '<script>', ""var multilineString ='JavaScript is a programming language that is useful for web development at client-side execution.' +"", ""'This language is very light-weighted mostly used to put validations, so they check at the client-side.' +"", ""'<br> Nowadays, it is very trending in market for web development.' +"", ""'<br> As it also allows dynamic execution of code.';"", '', 'document.write(multilineString);', '</script>', '</html>', '<script>', ""var multilineString ='<p> This is fist line of the paragraph. </p>' +"", ""'<b> This text will show you in bold letters in next line. </b>' +"", ""'<p> Now, it is again a simple text line. </p>';"", 'document.write(multilineString);', '</script>', '<html>', '<head>', '<title> Create multi-line strings </title>', '</head>', '<body>', '<center>', '<h1 style=""color: green""> Javatpoint </h1>', '<b> Multi-line string creation example using JavaScript and HTML </b>', '<p> Click on the button to insert multi-line text </p>', '<button onclick=""showMultilineString()""> Display Multiline </button>', '<span id=""multiline""> </span>', '<script>', 'function showMultilineString() {', 'multilineString =', '""<div>"" +', '""<h3>This is an heading using h3 tab. </h3>"" +', '""</br><p> This is another string new line."" +', '""We have combined all these strings using"" +', '""concatenation operator. This text string will show you two three lines.</p> "" +', '""</div>"" ;', ""document.getElementById('multiline').innerHTML = multilineString;"", '}', '</script>', '</center>', '</body>', '</html>']","['This is first line display using JavaScript.', 'This is second line and divided using break line tab of HTML.', 'Now, we again printed another new line.', ""Javatpoint is a website of technologies, which provides tutorials of different technologies and tools. Here you will get tutorials in detail 'like theory as well as practical implementation."", ""We will try to provide you the best knowledge from our side. 'Student, teachers, and industry professionals can learn from here."", 'JavaScript is a programming language that is popular for web development at the client-side execution. This language is very light-weighted mostly used to put validations, so they check at client-side.', 'Nowadays, it is very trending in market for web development.', 'As it also allows dynamic execution of code.', 'This is first line of the paragraph.', 'This text will show you in bold letters in next line.', 'Now, it is again a simple text line.']",[],[]
151,['JavaScript Anonymous Functions'],"[""The meaning of the word 'anonymous' defines something that is unknown or has no identity. In JavaScript, an anonymous function is that type of function that has no name or we can say which is without any name. When we create an anonymous function, it is declared without any identifier. It is the difference between a normal function and an anonymous function. Not particularly in JavaScript but also in other various programming languages also. The role of an anonymous function is the same.""]","['https://www.javatpoint.com/implementing-javascript-stack-using-array', 'https://www.javatpoint.com/javascript-multi-line-string', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/implementing-javascript-stack-using-array', 'https://www.javatpoint.com/javascript-multi-line-string', 'https://www.javatpoint.com/implementing-javascript-stack-using-array']",[],[],"['Implementation of an Anonymous Function in JavaScript', 'Use of Anonymous Functions in JavaScript', 'Immediate execution of a function']",[],['Note: One can also pass the arguments in the function and invoke it too.'],"['An example is shown below that will make us understand how to use an anonymous and why it is different from a normal function:', 'The above code is the implementation of the anonymous function where:', 'Here, we have created a normale () function, which is a normal function. It is the difference between an anonymous function and a normal function.', 'Finally, we have invoked the created function.', 'So, in this way the basic implementation of an anonymous function is done.', 'We can use the anonymous function in JavaScript for several purposes. Some of them are given below:', 'The above code implements the use of anonymous function as an argument to a new function where:', 'It is one such implementation and use of the anonymous function.', 'In the above code, the anonymous function is invoked immediately where it works as described in the following way:', 'The first step is to define the function expression, as shown below:', 'In this way, the anonymous function can be invoked immediately.']","['Here, in this section, we will get to know about the anonymous function and its role in JavaScript. We will also learn and discuss its implementation.', 'The main focused point is that there is no function we have declared before. It is just the keyword function and parenthesis. In the case of a normal function, we use to name the function as shown in the below code example:', ""In order to invoke and execute a function immediately after its declaration, creating an anonymous function is the best way. Let' see an example to understand how we can do so:"", 'After defining the function, we can see the trailing parenthesis () followed by the terminator (;) that are used for invoking the defined function as shown below:', 'These are some uses of an anonymous function that concludes that an anonymous function is the one with no name, can be invoked immediately and can be used as an argument value in a normal function definition.']",[],"['let x = function () {', ""console.log('It is an anonymous function');"", 'function normale() {', ""console.log('It is a normal function');"", 'normale();', 'setTimeout(function () {', ""console.log('Execute later after 1 second')"", '}, 1000);', '(function() {', ""console.log('Hello');"", '(function() {', ""console.log('Hello');"", '(function() {', ""console.log('Hello');""]",[],[],"[""|||The function is created for displaying the message as its output.|||We have used the function keyword, which is used when we create any function in JavaScript, and the function is assigned to a variable x using 'let'.||||||Passing an anonymous function to other function as its argument|||We can also use an anonymous function as an argument for another function. To understand better, let's implement a code under which we will pass the anonymous function as an argument value for another function:||||||The function setTimeout () will output the anonymous function after a second.|||We have created an anonymous function and passed it to the setTimeout () as its argument.|||Inside it, when the code gets executed, it will print the statement after a second of the execution time.|||""]"
152,['Implementing JavaScript Stack Using Array'],"['In this section, we will learn about the implementation of Stack using JavaScript arrays.']","['https://www.javatpoint.com/javascript-classlist', 'https://www.javatpoint.com/javascript-anonymous-functions', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/javascript-classlist', 'https://www.javatpoint.com/javascript-anonymous-functions', 'https://www.javatpoint.com/javascript-classlist']",[],[],"['What is a Stack', 'Operations on Stack', 'Implementing Stack and its operations']","['The push() operation', 'The pop() operation', 'The length () operation', 'The peek () operation', 'The print () operation', 'The reverse () operation', 'Combined Code Implementation']",[],"['There are the following operations which are performed on a stack:', 'Now, we will discuss the implementation of Stack and its methods (discussed above).', 'In order to implement stack data structure, we need to create a stack class as shown below:', 'In the above code:', 'A stack method for adding elements to the top position.', 'An example to understand the use of push() method is shown below:', 'In the above code:', 'The pop() method of Stack is used for removing/deleting elements from the top position of the Stack.', 'An example of stackpop() operation is shown below:', 'In the above code:', 'The length () operation of the Stack is used to return the length of the Stack using the top variable.', 'Below is an example of using length () operation:', 'In the above code, we have created a stacklength () function, and it will return the length by calculating from the top of the Stack.', 'A stack operation for fetching/getting the value that is present at the top of the Stack.', 'Below is an example to understand the practical implementation of the peek () function:', 'The print () operation is used for printing the elements present in the Stack. Thus, it is like the printf in C programming.', 'Below is an example that shows the implementation of print () operation:', 'In the above code:', 'The reverse () operation of Stack is used for reversing the order of Stack so that the values of the Stack get printed in reverse order.', 'Below is an example that explains the implementation of the reverse () function:', 'In the above code:', ""Let's see a full implementation of the stack with different operations. The implemented example is shown below:"", 'You can implement the above code and understand it practically.']",[],"['A data structure in which we place the elements in Last In First Out, i.e., LIFO principle. The LIFO principle means the arrangement of the element in such a manner that the element which is added recently gets removed first, and the element which was added initially gets removed in the last. One can understand the arrangement of the elements in Stack as arranging dishing plates where the plate which was kept first will be used in the last. Such an arrangement is known as LIFO.', 'The Stack consists of two main functions, which are push() and pop(). Both these operations of Stack occur at the top of the Stack. The push() operation is for inserting/adding elements to the Stack, and the pop() function, on the other hand, is used for removing/popping an element from the Stack. The push() and pop() operations occur at the top because, in a stack, the element is always pushed and popped out from the top only.']","['class stck {', 'constructor () {', 'this.ele = [];', 'this.top = 0;', 'stackpush (e) {', 'this.ele[this.top] = e;', 'this.top = this.top + 1;', 'stackpop () {', 'this.top = this.top - 1;', 'return this.data.pop ();', 'stacklength () {', 'return this.top;', 'peek() {', 'return this.data[this.top -1 ];', 'function print() {', 'var t = this.top - 1; // as top variable points to the element position', 'while(t >= 0) {', 'console.log(this.data[t]);', 't--;', 'function reverse() {', 'this.rev(this.top - 1 );', 'function _rev(index) {', 'if(index != 0) {', 'this.rev(index-1);', 'console.log(this.data[index]);', 'class stck {', 'constructor(){', 'this.data = [];', 'this.top = 0;', 'stackpush(element) {', 'this.data[this.top] = element;', 'this.top = this.top + 1;', 'stacklength() {', 'return this.top;', 'peek() {', 'return this.data[this.top-1];', 'isEmpty() {', 'return this.top == 0;', 'stackpop() {', 'if( this.isEmpty() == false ) {', 'this.top = this.top -1;', 'return this.data.pop(); // last element gets deleted', 'print() {', 'var t = this.top - 1;', 'while(t >= 0) {', 'console.log(this.data[top]);', 't--;', '}', 'reverse() {', 'this.rev (this.top - 1 );', 'rev(index) {', 'if(index != 0) {', 'this.rev(index-1);', '}', 'console.log(this.data[index]);']",[],[],"[""|||push(): The push() operation is used for adding elements to the Stack.|||pop(): The pop() operation is used for removing elements from the Stack.|||peek(): The peek() operation is used for getting the top element present in the Stack.|||length(): The length() operation is used for returning the length of the Stack.|||search(): The search() operation is used for searching elements whether present in the Stack.|||print(): The print() operation is used for printing elements of the Stack.|||isEmpty(): The isEmpty() operation is to check if the stack is empty.|||&&&|||We have created a class named stck.|||Under it, a constructor is created in which we have used two attributes i.e., ele and top. The ele is the array element that will add elements in the Stack, and as we know that in a stack, elements are added from the top of the Stack. So, we have created a top variable which points to the index of the element which is at the top.|||Both attributes are fetched via this The 'this' keyword is used to get the current value.||||||We have created a function stackpush() in which we have passed an argument as e. The argument e will contain the value that will be inserted in the Stack.|||Under the function, using this we have accessed the value of e to the ele array and to the top.|||Now, the value of top is increased by 1 because the top variable has to point to the next empty array index in the Stack.||||||We have created a stackpop () function under which the first step is to decrease the value of top by 1. It is because the top variable needs to point to the position of the previous element.|||In the next step, the value which is at the top of the Stack will be popped out using this operator.||||||In the above code, the peek () function returns the element present at the top of the Stack.|||We have used top - 1 as the top variable points to the top position in the Stack where the element is added.||||||We have created a function print () where we have initialized a variable t with top - 1 value.|||Next, a while loop is used in order to print all the values of the Stack from the top.|||The loop will begin from the last to the top, i.e., upto the 0th|||The value on each array index will be printed as per the index value.|||Lastly, the value is decremented as t--.||||||We have created a function reverse () using recursion.|||After this, another function rev () is created that has index as its parameter.|||Under the rev () function, we have used the if statement in which if the index value is not equal to, the reverse stack elements will be calculated.|||Finally, the reversed stack elements will get printed.|||These are some of the stack methods which we have practically implemented.|||""]"
153,['JavaScript classList'],"['JavaScript classList is a DOM property of JavaScript that allows for styling the CSS (Cascading Style Sheet) classes of an element. JavaScript classList is a read-only property that returns the names of the CSS classes. It is a property of JavaScript with respect to the other properties of JavaScript that includes style and className. The style property returns the color or other styling of the CSS class element, and className is used for returning the names of the classes used in the CSS file. However, the className and classList properties return the name of the classes that we have used in the CSS file but in different ways. The className property returns the name of the classes in the form of a string, whereas the classList property of JavaScript returns the name of the classes in the form of an array.']","['https://www.javatpoint.com/javascript-code-editors', 'https://www.javatpoint.com/implementing-javascript-stack-using-array', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-code-editors', 'https://www.javatpoint.com/implementing-javascript-stack-using-array', 'https://www.javatpoint.com/javascript-code-editors']","['https://static.javatpoint.com/javascriptpages/images/javascript-classlist.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-classlist2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-classlist3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-classlist4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-classlist5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-classlist6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-classlist7.png']",[],['JavaScript classList Property'],"['Example of JavaScript classList property', 'classList.add()', 'classList.remove()', 'Classlist.toggle()', 'Classlist.contains()', 'classlist.replace()', 'classList.item()']",[],"['Here, we will take a brief discussion on JavaScript classList and also discuss its methods with their practical implementations.', 'Below is an example of JavaScript classList property through which we will get the class value of an element.', 'The output of the above code is shown below:', 'These are some of the methods which are used in the JavaScript classList.', 'We will discuss one by one.', 'The function which is used for adding one or more classes to the CSS element.', 'Below example shows how to add a class using classList.add() method:', 'The remove() function is used for removing the existing classes from the elements.', 'Below example shows how to remove one or more class using classlist.remove() method:', 'The toggle() button is used for toggling classes to the element. It means adding a new class or removing the existing classes.', 'Below is an example that will make us understand how to make use of the toggle() method to add or remove classes.', 'Below is an example that shows how to search for a class if it exist or not using the contains() method:', 'Below is an example through which we will understand that how we can replace an existing class with a new class:', 'The item() function is used to return the name of the class which is present at the specified index value.', 'Below is an example that will make us understand how to use item() method to return the value:', 'These are some of the methods of the classList DOM object and all about classList. ']","['In the code, when the user clicks on the button, the new class get added with the existing classes. The output after clicking on the button is shown below:', 'In the above code, when the user clicks on the button, the particular specified class gets removed from the existing CSS classes. The output after clicking on the button is shown below:', 'In the code, when the user clicks on the button, the class will get added or removed from the CSS classes. The output after clicking on the button is shown below:', 'The contains() method is used to check whether the specified class exist in the CSS classes and with respect to it, it returns the Boolean value as true or false.', 'The replace() method is used for replacing an existing class with a new one. It does not mean that the class is removed from the elements but the properties of the existing class get replaced with the properties of the new class.', 'In the above code, when the user clicks on the button, the existing class properties get replaced with the new class properties. The output after clicking on the button is shown below:', 'In the code, when the user clicks on the button, the class present on the specified index will get displayed. After clicking on the button, we get the specified index class value, as shown below:']","['The classList property is used for representing the value of the class elements which is a DOMTokenList object. It is a read-only property but we can modify its value by manipulating the classes used in the program. The JavaScript classList property consists of following methods through which we can perform different operations on the class elements:', 'In the above code, it is seen that when the user clicks on the button, then it checks for the specified class if present in the CSS classes. If it is present, a Boolean value as true will be returned. Else, it will return false. The output of the above code after clicking on the button is shown below:']","['<h3>Click on the button to get the class value </h3></br>', '<input type=""button"" id=""btn"" value=""Click me"" class=""myClass"" onclick=""getClass()"">', '<script>', 'function getClass()', 'var e = document.getElementById(""btn"");', 'alert(e.classList);', '</script>', '</body>', '</html>', '<style>', '.myClass {background: red;}', '</style>', '</head>', '<h3> Click on the button and add the class</h3> </br>', '<input type=""button"" id=""Btn"" value=""Click me"" class=""Class1"" onclick=""getClass();"">', '<script>', 'function getClass()', 'var e = document.getElementById(""Btn"");', 'e.classList.add(""myClass"");', '</script>', '</body>', '</html>', '<style>', '.myClass {background: red;}', '</style>', '</head>', '<h3> Click on the button and remove the class </h3> </br>', '<input type=""button"" id=""Btn"" value=""Click me"" class=""class1 myClass"" onclick=""getClass();"">', '<script>', 'function getClass()', 'var e = document.getElementById(""Btn"");', 'e.classList.remove(""myClass"");', '</script>', '</body>', '</html>', '<style>', '.myClass1{background: red;}', '.myClass2 {background: blue;}', '</style>', '</head>', '<h3> Click on the button to add or remove the class</h3> </br>', '<input type=""button"" id=""Btn"" value=""Click me"" class=""class1 myClass1"" onclick=""get_toggle();"">', '<script>', 'function get_toggle()', 'var e = document.getElementById(""Btn"");', 'e.classList.toggle(""myClass2"");', '</script>', '</body>', '</html>', '<input type=""button"" id=""Btn"" value=""Click to check"" class=""myClass"" onclick=""getClass();"">', '<script>', 'function getClass()', 'var e = document.getElementById(""Btn"");', 'document.write(e.classList.contains(""myClass"")+""<br>""+""myclass is the name of the class"");', '</script>', '</body>', '</html>', '<style>', '.myClass1 {background: red;}', '.myClass2 {background: blue;}', '</style>', '</head>', '<input type=""button"" id=""Btn"" value=""Click to replace"" class=""myClass1"" onclick=""replace_Class();"">', '<script>', 'function replace_Class()', 'var e = document.getElementById(""Btn"");', 'e.classList.replace(""myClass1"", ""myClass2"");', '</script>', '</body>', '</html>', '<h3> Click on the button to get the specified index value</h3></br>', '<input type=""button"" id=""Btn"" value=""Click Me"" class=""myClass1 myClass2 myClass3 myClass4"" onclick=""get_Class();"">', '<script>', 'function get_Class()', 'var e = document.getElementById(""Btn"");', 'alert(e.classList.item(2));', '</script>', '</body>', '</html>']",[],[],"['|||add(): The add() method is used for adding one or more classes to the element.|||remove(): The remove() method is used for removing one or more classes from the number of classes present in the element.|||toggle(): The toggle() method is used for toggling the specified class names of an element. It means on one click the specified class gets added and on another click the class gets removed. It is known as the toggle property of an element.|||replace(): The replace() method is used for replacing an existing class with a new class.|||contains(): The contains() method of the JavaScript classList property is used for returning the Boolean value as an output. If the class is present, the value is returned as true otherwise false is returned.|||item(): The item() method is used for displaying the name of the classes at the particular index. Thus, it returns the class name.|||']"
154,['JavaScript Code Editors'],"['We have learned about JavaScript, which is a programming language mainly designed for scripting the website and, for different programming languages, there are various platforms or IDEs for developing code in different languages.']","['https://www.javatpoint.com/javascript-let-keyword', 'https://www.javatpoint.com/javascript-classlist', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://atom.io/', 'https://www.javatpoint.com/https://www.javatpoint.com/windows', 'https://www.javatpoint.com/https://www.javatpoint.com/linux-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/c-sharp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/net-framework', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/ruby-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/nodejs-tutorial', 'https://www.javatpoint.com/https://code.visualstudio.com/', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/intellij-idea-tutorial', 'https://www.javatpoint.com/https://www.jetbrains.com/webstorm/download/#section=windows', 'https://www.javatpoint.com/https://brackets.en.softonic.com/download', 'https://www.javatpoint.com/https://www.javatpoint.com/javafx-how-to-install-eclipse', 'https://www.javatpoint.com/https://www.eclipse.org/', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-install-sublime-text-on-centos', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-install-sublime-text-editor-in-ubuntu', 'https://www.javatpoint.com/https://www.javatpoint.com/how-to-install-sublime-text-on-mac', 'https://www.javatpoint.com/https://www.sublimetext.com/', 'https://www.javatpoint.com/https://visualstudio.microsoft.com/downloads/', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/git', 'https://www.javatpoint.com/https://netbeans.org/downloads/6.1/index.html', 'https://www.javatpoint.com/https://www.javatpoint.com/aws-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/php-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/perl-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/microsoft-azure', 'https://www.javatpoint.com/https://www.javatpoint.com/computer-network-ftp', 'https://www.javatpoint.com/https://www.javatpoint.com/ssh-linux', 'https://www.javatpoint.com/https://www.javatpoint.com/what-is-github', 'https://www.javatpoint.com/javascript-let-keyword', 'https://www.javatpoint.com/javascript-classlist', 'https://www.javatpoint.com/javascript-let-keyword']","['https://static.javatpoint.com/javascriptpages/images/javascript-code-editors1.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-code-editors2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-code-editors3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-code-editors4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-code-editors5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-code-editors6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-code-editors7.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-code-editors8.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-code-editors9.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-code-editors10.png']",[],"['JavaScript Code Editors', 'Online Code Editors']","['What is an IDE', 'Why we use IDEs', 'ATOM', 'VISUAL STUDIO CODE', 'WebStorm', 'Brackets', 'Eclipse', 'Sublime Text', 'Visual Studio', 'NetBeans', 'AWS Cloud9', 'Codeanywhere']",[],"[""Let's begin."", 'Benefits of using ATOM', 'There are the following benefits we can avail when using ATOM:', 'Drawbacks of ATOM', 'There are the following drawbacks of using ATOM:', 'Benefits of using Visual Studio Code', 'There are the following benefits one can avail if using Visual Studio Code:', 'Drawbacks of Visual Studio Code', 'With the above-described benefits, there are some drawbacks also which are described below:', 'Benefits of using WebStorm', 'There are the following benefits of using WebStorm:', 'Disadvantages of WebStorm', 'With the above advantages, there are the following disadvantages of using WebStorm:', 'Benefits of using Brackets', 'There are the following benefits of using Brackets:', 'Disadvantages of Brackets', 'With the above advantages, there are the following disadvantages of using Brackets:', 'To download the Eclipse IDE, click on the given link: https://www.eclipse.org/', 'A snapshot for the Eclipse IDE is shown below:', 'Benefits of using Eclipse', 'There are the following benefits we can get while using Eclipse IDE:', 'Disadvantages of Eclipse', 'With the above advantages, there are the following disadvantages of Eclipse:', 'To download the Sublime text editor, click on the given link: https://www.sublimetext.com/', 'A snapshot is shown below:', 'Benefits of using Sublime Text editor', 'There are the following benefits of using Sublime text editor:', 'Disadvantages of Sublime Text', 'With the above-described benefits, there are the following disadvantages of using Sublime Text:', 'A snapshot is shown below:', 'Benefits of using Visual Studio', 'There are the following benefits of using Visual Studio:', 'Disadvantages of Visual Studio', 'With the above benefits, there are some disadvantages of using Visual Studio, which are as follows:', 'A link for the same is given as https://netbeans.org/downloads/6.1/index.html', 'These are some of the popular code editors and IDE used in the development of the JavaScript code.', 'Benefits of using AWS Cloud9', 'There are the following benefits of using AWS Cloud9:', 'Disadvantages of AWS Cloud9', 'There are the following disadvantages of using AWS Cloud9:', 'Benefits of using Codeanywhere', 'There are the following benefits of using Codeanywhere:', 'Disadvantages of Codeanywhere', 'There are the following disadvantages of using Codeanywhere:']",['There are several code editors available in the market and on Google. We will discuss some of these code editors with their advantages and disadvantages wherever possible. These are discussed below:'],"['Here, we will discuss different types of editors for coding in the JavaScript programming language. We will also discuss why there is a need to use JavaScript code editors, what is an IDE, and will discuss some of the best popular JavaScript code editors.', 'The IDE extends for Integrated Development Environment that provides an environment to develop several applications and software. Different programming languages have different types of IDEs, and some IDEs are as such that provides multiple environments as per the programming languages. These IDEs are used for several purposes that include code editing, debugging of code, as well as automation.', 'All these different IDEs are used by different users where each IDEs have their official websites from where the users can easily download the IDEs and install in the system. Basically, these IDEs are developed for the developers so as to simplify and ease their works. We can say it is all in one package that provides various things on one platform only. IDEs came more into use when the consoles and terminals were introduced. In large organizations where we have several works to do, and many employees together work on the same project, IDEs are preferred and used with which many employees can work simultaneously.', 'The source code editor Atom was initially released in February 2014 as an open-source code editor and also gained much popularity in the market. The editor is used for JavaScript code development. The code editor is no doubt highly flexible and customizable, i.e.; we can easily customize it. It is very easy to install it on our system and is a cool and cross-platform tool. The atom source code editor is free to use, which means that if anyone wants to use it can go to its official website, and there will be a downloading link and can download it on the computer system. We have given the below link from where one can download the Atom code editor https://atom.io/ and the snapshot for the same is given below:', 'Visual Studio Code is the best and most popular IDE tool among the users. It is one of the best software wisely used by the frontend developers. Visual Studio Code is the product of Microsoft, which is a free, open-source, lite version, and powerful JavaScript code editor. It supports Windows, Linux, as well as macOS. Not only a JavaScript code editor, but Visual Studio Code supports multiple programming languages that include C#, .NET, C++, Python, Ruby, etc. Visual Studio Code consists of integrated Git support that enables us to run pull, push and commit operations quickly plus directly from the application. When any application begins in Visual Studio Code, it began in debug mode as the code editor contains the first-class debugger and helps to deal with Node.js and JS based applications. Visual Studio Code is cross-platform with an integrated terminal and supports call steak, watch variables, and setting breakpoints. We can easily download and install the Visual Studio Code from https://code.visualstudio.com/ its official website. A snapshot for Visual Studio Code is shown below:', 'WebStorm has become one of the intelligent coding assistance for JavaScript as it has bought smart coding assistance and compiled-to-JavaScript languages, HTML, CSS, and Node.js. WebStorm code editor is built on top of IntelliJ, which is an open-source platform. WebStorm has features such as powerful navigation, code refactoring, and detecting on-the-fly error for all supportable languages. The code editor contains several built-in tools for debugging, testing and tracing Node.js and client-side applications. The editor is also integrated with popular CLI tools that help in web development and through which we can have a productive and streamlined development experience with no use of the command line. The software is easy to download and can be installed on the system. We just need to visit the official website of the WebStorm and can download the software from here https://www.jetbrains.com/webstorm/download/#section=windows. A snapshot for the WebStorm is shown below:', 'Brackets is an open-source code editor created by Adobe Systems. It was initially released in November 2014. Brackets is gaining popularity in the list of leading tool choices by the JS developers. The tool is a freshly built frontend development tool for JavaScript. The tool supports Live Preview of the code that makes us preview the changes in real-time by automatically opening a new window on the internet browser when we modify the code. The Brackets software offers a crystal clear interface through which we can search and add extensions and enhance the ability of Brackets. For downloading and installing the tool, we can go to its official website and download it from here https://brackets.en.softonic.com/download. A snapshot of Brackets is shown below:', 'An IBM Visual Age product was initially released in November 2001. Eclipse is an open-source IDE, which is basically one of the big three Java-specific IDEs. However, it consists of an extensible plugin system due to which it is used for JavaScript development also. Only the need is to install the essential plugins required for the specific programming language. Eclipse is widely used by full-stack developers for JavaScript coding. Eclipse consists of an integrated development environment that helps the developers in assuring robustness, stability as well as optimum performance. Through Eclipse, we can also send the bugs or error reports to eclipse.org, if found in the Eclipse as it has the feature of automated error reporting. It is easy to download and install the Eclipse tool to the system. Just need to visit the official website of Eclipse.', ""Sublime is the type of JavaScript code editor which is open-source and a cross-platform editor. The sublime editor provides many rooms for customization. No need to worry, it is good to use. It is user-friendly, no doubt. It offers a highly impressive speed boost and well-improved pane management. It's all features are free of cost, and thus the user can use any feature without paying anything. Moreover, Sublime Text also offers a trial version, which can be used by the developers to have knowledge of how it works and how it will work. If the developer finds it well-verged, can access its complete features by just paying $80 (may vary) for three years of usage. For setting up on the system, it can take some time, but it is definite that it will provide a smooth and good experience to the user. In order to download and install it for a free trial on the system, one can use the official website of the Sublime text code editor."", 'Visual Studio is a type of general IDE which was initially released in February 1997. It is one of the leading industry-standard IDE software for the development of JavaScript code. Visual Studio is the product given by Microsoft. Also, Visual Studio Code is the free and open-source lite version of Visual Studio. A powerful JavaScript code editor that is widely used in the frontend development of applications or software. The IDE has an integrated development environment that is used for developing computer programs on the Windows system. Using Visual Studio, the developers are able to produce native as well as managed codes. Visual Studio has excellent and powerful features such as scaffolding and simultaneous editing planning. Thus, it has proven its excellence and is a proper industry-grade IDE. Also, Visual Studio is a paid IDE tool for which the user needs to pay a minimal amount for using the professional and Enterprise version. In order to download the Visual Studio to your system, you can visit the official website https://visualstudio.microsoft.com/downloads/ where you will see three options for downloading.', 'It can be seen that there are three types available. So, if you want to use the Community, it is free to download, and for the other two types, you can download its trial version and then, if you find it appropriate, can pay the amount and purchase the type.', ""A dedicated IDE for the Java programming language which was initially released in the year 1997. But not only Java, but NetBeans also enables to develop code in JavaScript by providing integrated development environment capabilities for JS. There are several features in NetBeans, including smart code completion, subversion, syntactic and semantic highlighting code, built-in Git support, and many more. As compared with other IDEs and code editors, NetBeans takes a small time between its installation and developing an application. NetBeans is easy to use, one can easily modify the workspace and reposition the application's tabs, change the look and feel of the application as per our desire and specifications. Through NetBeans, we can also set our own keyboard short cut. It is easy to download and install NetBeans on your system by visiting its official website."", 'Besides these software, there are some online code editors or IDE also available that can be used for the development of the JavaScript code. However, there are numerous code editors available that can be used for learning code basically. Some are typical to understand and need some extra knowledge to get used. We have some popular JavaScript code development editors listed below:', 'AWS Cloud9 is an online proprietary cloud IDE which was initially released in the year 2010. The online IDE is completely coded in JavaScript, having NodeJS on the backend, and is one of the best online supportive IDE. For using it, the user must have an account in AWS. Not only JavaScript, but it also supports other programming languages such as Php, C, C++, Python, Node.js, Perl, etc. It consists of an inbuilt terminal for supporting Unix and npm commands. It also enables us to extend its plugins for extending its functionality. Its other features include code completion, simultaneous editing, syntax highlighting, reformatting via JSBeauty and CSSint, customizable key-bindings, and many more. There are varieties of themes available that give a look and feel to the IDE, and we can set it as per our wish. AWS Cloud9 also provides support for deployment to Google App Engine, Microsoft Azure, Joyent, and Heroku platforms. If the user wants to use an online IDE can create an account in AWS (with minimal charges) and enjoy developing code.', ""Codeanywhere is another type of cloud IDE which was initially released in the year 2013. The IDE provides both free and premium based services. It is a cross-platform IDE that allows developers to write, edit, and execute web development projects directly through a web browser. It is written in JavaScript and supports multiple programming languages. The code editor contains an inbuilt terminal for supporting basic Unix as well as npm commands. With this, it also contains an inbuilt debugger and allows the developer to connect with one's own Virtual Machine through FTPMM or SSH. It also supports code repositories of BitBucket, GitHub, and Git."", 'Apart from these two explained online JavaScript code editors, there are many other code editors also available such as JSFiddle, playcode.io, js.do, etc. Such IDEs can be directly used with an internet connection and needs a good understanding of its use and JavaScript and its supported backend programming languages.']",[],[],[],"['|||It allows Git integration.|||Supports multi cursor.|||ATOM is a cross-platform code editor.||||||ATOM has a lack of code execution.|||When working on it, it becomes unstable sometimes.|||The working and execution process of ATOM is slower as compared with other code editors.||||||It is lite weighted, and so consumes low memory.|||It supports code refactoring.|||It is able to generate native and managed codes.|||It supports console integration.|||Enables task management.||||||Visual Studio is sometimes laggy.|||It has poor source control.|||Although it supports many different languages, then also lacks support for a few programming languages.||||||WebStorm consists of a variety of built-in developer tools that enables us to run and get our code quickly.|||It allows us to write reliable code with less effort.|||It enables us to directly move to the particular function or code area in just a few clicks.|||We can adjust the appearance and behavior of the setup by applying different themes.|||WebStorm has an in-built spell checker that saves our time in removing the small made errors.|||Provides streamlined programming.||||||Navigation is a little difficult in WebStorm.|||It has heavy resources, which slow down things.||||||It offers a live preview, which is very helpful for the developers to know the effects of changes they made.|||Brackets is a simple interface software, and there is only a need to have a basic understanding of coding.|||The setup of Brackets is easy and simple to use.||||||It takes high time to load the setup of Brackets.|||Sometimes, the live preview feature automatically shuts up.|||Issues arise when we open large JavaScript files on the setup.|||Limited themes are available.|||It is not much powerful as compared with other code editors.||||||Eclipse provides powerful management of the project.|||It supports automated debugging of the code.|||Provides a good and better auto-completion.||||||Sometimes when we make some changes, it works after a reboot.|||Generally, the new users/beginners find it difficult to use as it needs to add the required plugins.|||It has a poor customer support facility.||||||Sublime provides a distraction-free mode of editing the code.|||We can easily and smoothly deal with multiple projects.|||Sublime Text also supports automation support.||||||Sublime Text has a poor library stack.|||It also has a poor debugging feature that does not provide good debugging of the code.|||Sublime Text has a lack of default printing.||||||It is an A-grade industry-standard software.|||Visual Studio provides coding assistance and enables us to perform accurate coding.|||It supports rigorous testing.|||It also provides fast debugging of the code.|||It also has several customization options.||||||Sometimes the performance slows down.|||Visual Studio can occupy much memory because it is heavy software.|||The scale of configuration and granularity sometimes become overwhelming.|||Some settings are located typically.||||||It provides flexible browser coding environments for supported programming languages.|||There is no requirement of having any server connectivity.|||One can easily start creating new projects.|||Team collaboration is also supportive.||||||It does not sync with Dropbox or Google drive services.|||There are no keyboard shortcuts feature available.||||||Supports connectivity with Dropbox and Google Drive platforms.|||Codeanywhere is a time saver for the developers as it allows us to quickly create servers for their real-time projects.|||It offers free account creation, and if you find it comfortable, can upgrade by paying the applicable charges.||||||Need to have a good understanding before using it. A little bit confusing IDE it is.|||Sometimes become unstable.|||Poor customer support.|||']"
155,['JavaScript let keyword'],"['In JavaScript, let is a keyword that is used to declare a block scoped variable. Usually, the var keyword is used to declare a variable in JavaScript which is treated as a normal variable, but the variables declared using the let keyword are block scoped.']","['https://www.javatpoint.com/random-string-generator-using-javascript', 'https://www.javatpoint.com/javascript-code-editors', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-variable', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-const', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-let-keyword1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-let-keyword2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-let-keyword3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-let-keyword4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-let-keyword5', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-let-keyword6', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-let-keyword7', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-let-keyword8', 'https://www.javatpoint.com/random-string-generator-using-javascript', 'https://www.javatpoint.com/javascript-code-editors', 'https://www.javatpoint.com/random-string-generator-using-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-let-keyword1.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-let-keyword2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-let-keyword3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-let-keyword4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-let-keyword5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-let-keyword6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-let-keyword7.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-let-keyword8.png']",[],"['Syntax of let', 'Examples', 'How let is different from the var keyword?', 'Redeclaration']","['Example 1: Global Scope', 'Example 2: Function Scope', 'Example 3: Block Scope', 'Example 4: Redeclaring variable in different blocks', 'Variable Scope', 'Loop Scope']",[],"['Earlier, there were only two types of variable scopes in JavaScript: Global scope and Function scope.', 'Here is the syntax to declare a variable using the let keyword:', 'Screenshot', 'Here is the web output for the above program:', 'Screenshot', 'Here is the web output for the above program:', 'Console View', 'In this example, you will see that a variable declared inside the block cannot be used outside the block because it has block scope.', 'Screenshot', 'Here is the web output for the above program:', 'Console View', 'In this example, we will a declare variable with the same name in different blocks and display its value.', 'Screenshot', 'Here is the blank web output for the above program:', 'Console View', 'If you see the console output, this will show the error generated on executing this program.', 'In the below example, you can examine that the variable declared using the let and var keyword have different variable scope and power.', 'In these examples, we will show you the variable scope for the variables declared using both var and let.', 'Var: Global Scope Example', 'Screenshot', 'See the web screenshot for the above program:', 'let: Block Scope Example', 'Screenshot', 'See the web screenshot for the above program:', 'These above examples will show you how variables have different scopes inside and outside the block when declared using the var and let keyword.', 'In these examples, we will show you the variable scope for the variables declared using both var and let.', 'let: Loop Scope Example', 'Here, you will see that the initial value of i will display because redeclaration is not allowed using the let keyword.', 'Screenshot', 'See the web screenshot for the above program:', 'var: Loop Scope Example', 'Here, you will see that the updated value of i will display because redeclaration is allowed using var keyword.', 'Screenshot', 'See the web screenshot for the above program:']","['Below are various examples discussed to help you understand how the let variable works inside and outside the block or function. These are the simple examples to use the variable declared using the let in different scopes.', 'Here, you can see that a variable declared in main body or outside the function has global scope. So, it can be accessed from anywhere inside or outside the function.', 'In this example, you will see that a variable declared inside the function that only has function scope. So, it is not allowed to access outside the function.', 'Here, you will see that only the first statement that lies inside the function has been printed and second statement has not been displayed. It treated num is undefined outside the function scope.', 'See the console output for the above program to know the problem why the second statement does not print. In your browser, click on the three dots and go to the More tool -> Developer tool -> Console, and see the error in console as shown below:', 'Here, only the block statement will display the value of the num variable declared using let keyword. Second statement will not display the value of num variable.', 'See the console output for the above program to know the problem why the second statement does not print. In your browser, click on the three dots and go to the More tool -> Developer tool -> Console, and see the error in console as shown below:', 'On executing the above code, this will generate an error because redeclaration is not allowed using let variable. So, it will not display any output on the browser.', 'The key difference between let and var is their scopes. Var has global scope whereas let is block scope. Consider the below examples to understand the difference:', 'See the below examples to understand which variable declaration is allowed and which one is not. The variable declaration is allowed anywhere in the program using var.']","['JavaScript provides three ways to declare a variable: var, const, and let. These keywords deliver different functionality from each other. Var is a traditional method to declare a variable while const and let keyword was introduced later by the ES2015/ES6, which creae block scope variable.']","['let variable_name;', '<script>', 'let x =20;', 'document.write(""Outside the function x = "" + x);', 'function show(){', 'document.write(""<br> Inside the function x = "" + x);', 'show();', '</script>', '<script>', 'function show(){', 'let num = 15;', 'document.write(""Inside the function num = "" + num);', 'show();', 'document.write(""<br> Outside the function num = "" + num);', '</script>', '<script>', 'let num = 30;', 'document.write(""Inside the function num = "" + num);', 'document.write(""<br> Outside the function num = "" + num);', '</script>', '<script>', 'let num = 23;', 'let num = 15;', 'document.write(""num inside the function = "" + num);', 'let num = 89;', 'document.write(""<br> num outside the function = "" + num);', '</script>', '<script>', 'function checkGlobalScope() {', ""document.write('Value of x before the block: ' + x);"", 'var x = 20;', 'x = x + 8;', ""document.write('<br> Value of x after the block: ' + x);"", 'checkGlobalScope()', '</script>', '<script>', 'function checkBlockScope() {', 'let x = 30;', ""document.write('Initial value of x: ' + x);"", 'x = x + 7;', ""document.write('<br> Value of x inside the block: ' + x);"", ""document.write('<br> Value of x outside the block: ' + x);"", 'checkBlockScope()', '</script>', '<script>', 'function checkLoopScope() {', 'let i = 4;', 'for (let i = 0; i < 10; i++) {', ""document.write('Final value of x outside of the loop: ' + i);"", 'checkLoopScope()', '</script>', '<script>', 'function checkLoopScope() {', 'var i = 4;', 'for (var i = 0; i < 10; i++) {', ""document.write('Final value of x outside of the loop: ' + i);"", 'checkLoopScope()', '</script>', 'var num = 6;', 'var num = 3;', 'var num = 6;', 'let num = 2;            //redeclaration is not allowed using let', 'let num = 6;             // allowed', 'let num = 2;            // not allowed', 'let num = 61;             // allowed', 'let num = 29;            // allowed', 'let num = 37;            // allowed']","['Outside the function x = 20', 'Inside the function x = 20', 'Inside the function num = 15', 'UncaughtReferenceError: num is not defined', 'Inside the function num = 30', 'UncaughtReferenceError: num is not defined', 'SyntaxError: redeclaration of let x', 'note: Previously declared at line 2, column 5', 'Value of x before the block: undefined', 'Value of x after the block: 28', 'Initial value of x: 30', 'Value of x inside the block: 37', 'Final value of x outside of the loop: 4', 'Final value of x outside of the loop: 10']",[],[]
156,['Random String Generator using JavaScript'],"['Sometimes, programmers require to create a string which is generated by selecting the random characters. Random String Generator helps to create a random string by choosing some characters randomly. This string can be a simple character string or an alpha-numeric string.']","['https://www.javatpoint.com/javascript-queue', 'https://www.javatpoint.com/javascript-let-keyword', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-math-random-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=random-string-generator-using-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=random-string-generator-using-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=random-string-generator-using-javascript3', 'https://www.javatpoint.com/javascript-queue', 'https://www.javatpoint.com/javascript-let-keyword', 'https://www.javatpoint.com/javascript-queue']","['https://static.javatpoint.com/javascriptpages/images/random-string-generator-using-javascript1.png', 'https://static.javatpoint.com/javascriptpages/images/random-string-generator-using-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/random-string-generator-using-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/random-string-generator-using-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/random-string-generator-using-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/random-string-generator-using-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/random-string-generator-using-javascript7.png', 'https://static.javatpoint.com/javascriptpages/images/random-string-generator-using-javascript8.png', 'https://static.javatpoint.com/javascriptpages/images/random-string-generator-using-javascript9.png']",[],"['Use of Random String generator', 'Type of Random String Generators we discussed in this chapter', 'Generate a Random String', 'Generate Random Alpha-Numeric String']","['Approach 1:', 'Approach 1:', 'Approach 2:']",[],"['You will see two types of random string generator:', 'Here, we will create a program to generate a random string:', 'Convert the above steps in actual code implementation to see the result. Look at the JavaScript code below:', 'Run the code in your browser and get the result same as given in the below screenshot:', 'Click on this Generate Random String button, and this will generate a random string for you.', 'Whenever you click this button, it will generate a pattern of new random characters (random string) of length 7. See the below screenshot:', 'There are two approaches discussed below to generate a random alpha-numeric string:', 'This approach will create an alpha-numeric string having a specified length. Follow the below steps:', 'Convert the above steps in actual code implementation to see the result. Look at the JavaScript code below:', 'Run the code in your browser and get the result same as given in the below screenshot:', 'Click on this Generate Random String button, and this will generate a random string for you.', 'Every time when you click this button, it will generate a new sequence of random characters (random string) for you. See the below screenshot:', 'Follow the basic steps to create a random alpha-numeric string:', 'Convert the above steps in actual code implementation to see the result. Look at the JavaScript code below:', 'Save the file and run the above code in your browser. You will initially get the result same as given in the below screenshot:', 'Here, click on the Generate String button to generate the random alpha-numeric string and see the output:', 'It will generate a new pattern each time when you click this Generate String button. Click and check different alpha-numeric string patterns:', 'In approach 1, you can define the length (number of characters) for the new random string. But,']","['Remember that the Captcha code contains a sequence of random characters. It could be a combination of alphabetic characters or alpha-numeric characters.', 'We have these two types of string generator. In this first type of random string generator, we will create a JavaScript program of random string generator that will generate only the alphabetic string.', 'On the other end, in the second type of string generator, we will create a JavaScript program to generate random alpha-numeric strings. See the examples for both string generators in detail:', 'This approach will create a simple random string by selecting some characters randomly with the specified length. This will be a simple string instead of an alpha-numeric string. Follow the steps below:', 'In approach 2, you cannot define the length of the new string to be generated. Use any of this approach in your website according to your requirement.']","['In this chapter, you will get the different methods to create a random string generator. We will create a random string generator program using the JavaScript programming language to generate a random string. Each time it will generate a new string. For this, we will use the Math.random() function of JavaScript.', 'Most of the time, you have seen the captcha code in web forms required to enter before submitting the form to verify the robot the users. Random String Generator will help you to create this Captcha code for the programmers. Nowadays, it is widely used in web forms for security purposes.', 'Now, we have another approach will to generate an alpha-numeric string with the specified length. It is a very short approach to generate a random string. This does not require too much lengthy code. In this approach, we will not specify the length for the newly generated string. It will take length 10 or 11 of the new string.']","['<head>', '<title> Random String Generator </title>', '</head>', '<script>', 'function randomString() {', 'var characters = ""ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz"";', '', 'var lenString = 7;', ""var randomstring = '';"", 'for (var i=0; i<lenString; i++) {', 'var rnum = Math.floor(Math.random() * characters.length);', 'randomstring += characters.substring(rnum, rnum+1);', 'document.getElementById(""randomfield"").innerHTML = randomstring;', '</script>', '<center>', '<h2 style=""color: green""> Random String Generator </h2>', '<h3> Click the button to generate a random string </h3>', '<form name=""randomform"">', '<input type=""button"" value=""Generate Random String"" onClick=""randomString();"">', '<br><br>', '<b><p id=""randomfield"" style=""color: green""> </p></b>', '</form>', '</center>', '</body>', '</html>', '<head>', '<title> Random String Generator </title>', '</head>', '<script>', 'function randomString() {', 'var chars = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz"";', 'var string_length = 8;', ""var randomstring = '';"", 'for (var i=0; i<string_length; i++) {', 'var rnum = Math.floor(Math.random() * chars.length);', 'randomstring += chars.substring(rnum,rnum+1);', 'document.getElementById(""randomfield"").innerHTML = randomstring;', '</script>', '<center>', '<h2 style=""color: green""> Random String Generator </h2>', '<h3> Click the button to generate a random alpha-numeric string </h3>', '<form name=""randform"">', '<input type=""button"" value=""Generate Alpha-numeric String"" onClick=""randomString();"">', '<br><br>', '<h4 id=""randomfield"" style=""color: green""> </h4>', '</form>', '</center>', '</body>', '</html>', '<html>', '<head>', '<title>', 'Generate random alpha-numeric string using JavaScript', '</title>', '</head>', '<body>', '<center>', '<h2 style=""color:green;""> Random String Generator  </h2>', '<h3> Click the button to generate random alpha-numeric string </h3>', '<button onClick=""random_String_Generator()""> Generate String </button>', '<p id=""random_String"" style=""color: green;', 'font-size: 22px; font-weight: bold;""> </p>', '<script>', ""var result = document.getElementById('random_String');"", 'function random_String_Generator() {', 'result.innerHTML = Math.random().toString(36).slice(2);', '</script>', '</center>', '</body>', '</html>']",[],[],"['|||Generate simple Random String|||Generate Random alpha-numeric String|||&&&|||Create a user-defined function and define a variable having all English alphabets in small and capital letters.|||Define the length for the new random string to be generated.|||Declare a new empty variable (var randomstring = \'\';) to hold the generated string.|||Now, traverse the string using for loop. It will generate a new character during each iteration.|||Inside this loop, use Math.random() method of JavaScript to generate a random character from the above-specified string variable (A-Z, a-z) by calculating a random index.|||floor() method to round off the value. This will be used as Math.floor(Math.random() * characters.length).||||||Create a user-defined function having that will consist of all the below steps inside it.|||Define a variable having all alpha-numeric characters in small and capital letters and from 0-9, e.g., var alphaNumChars = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz"";.|||Define the length for the new random string to be generated.|||Declare a new empty variable (var randomstring = \'\';) to hold the newly generated string.|||Now, traverse the string using for loop. It will generate a new character during each iteration.|||Inside this loop, use Math.random() method of JavaScript to select a random character from the above-specified string variable (A-Z, a-z) by calculating a random index.|||floor() method to round off the value. This will be used as Math.floor(Math.random() * characters.length).||||||Create a user-defined function having that will consists all the below steps inside it.|||Firstly, use random() method to generate a random number.|||Now, we will use the built-in method of JavaScript toString(36) to convert the base to 36 (26 chars + 0 to 9). In these 36 characters it has alpha-numeric characters includes 26 alphabets and 0 to 9 numbers.|||Finally, use the slice() to get the part of string that is started from position 2.|||']"
157,['JavaScript Queue'],"['In this section, we will take an introduction of the queue and also see how to implement a queue in JavaScript.']","['https://www.javatpoint.com/javascript-form', 'https://www.javatpoint.com/random-string-generator-using-javascript', 'https://www.javatpoint.com/javascript-form', 'https://www.javatpoint.com/random-string-generator-using-javascript', 'https://www.javatpoint.com/javascript-form']",[],[],"['What is Queue', 'Implementing a Queue', 'Implementing Queue Operations', 'Implementing the JavaScript Queue']",[],[],"[""Let's see an example through which we can understand the implementation of a queue:"", 'In the above code, we have used the following three variables where each variable specifies their use as:', 'In respect to these main methods of the queue, there are some other methods also available that can be applied over the queue, which are:', 'We will discuss the practical implementation of these operations of a queue.', 'Now, we will see the practical implementation of these queue operations, which are as follows:', '1) enqueue (): The queue operation which is used for adding elements to the queue.', 'In the above code, we have added elements to the queue using the push function.', '2) dequeue (): The queue operation which is used for removing or popping out the existing values from the queue.', '3) Length (): The queue operation is used to return the length of the queue.', 'The statement this.rear will help to fetch the length of the queue.', '5) print (): The queue operation is used to print the elements of the queue from the index value 0 to the rear position of the queue.', '6) clear (): The queue operation is used to clear or delete all the elements of the queue and makes the value of the rear equal to 0.', 'In the above code, using the clear () operation, the value in the data array becomes 0 and sets the rear value to 0.', 'The complete code:', 'Although the functionality of a queue is the same in every programming language, the use and syntax vary as per the programming language.']","['Therefore, similar to stack operations, there are also two main operations of a queue through which we can insert an element into the stack or remove an existing element from it. These operations are:', 'In the above code, firstly, we have checked if the queue is already empty or not. It is because if the queue has no value, it will return ""Underflow"". Else, it will check and return the element.', '4) isEmpty (): The queue operation is used to check whether the queue is empty or not. If the queue is found empty, it returns true. Otherwise, it returns false.', 'In the above code, it will check if the value of the rear, i.e., the end, is equal to 0 or not. If it is true, it will return true else false will be returned.', ""In the above code, using for loop and beginning from the 0 indexes to the queue's rear position, it will print the value and put it in the data array.""]","['A queue is a data structure where the data is organized in the form of a queue. We can understand a queue similar to a queue of men organized for voting in which the man who is standing first in the queue will first give the vote and then will leave the queue. The same thing happens in the case of a data queue where the element which is at the first position will be removed first and so on. Thus, the queue follows the FIFO principle, i.e., first-in, first-out. It means the element which arrived first will get removed from the queue first. Thus, the queue data structure is an ordered list of data values where the values are inserted from the end of the queue and are removed from the front side of the queue.']","['class Queue1 {', 'constructor (){', 'this.data = [];', 'this.rear = 0;', 'this.size = 10;', 'enqueue(ele) {', 'if(this.rear < this.size ) {', 'this.data[this.rear] = ele;', 'this.rear = this.rear + 1;', 'dequeue() {', 'if(this.isEmpty() === false) {', '', 'this.rear = this.rear-1;', 'return this.data.shift();', 'length() {', 'return this.rear;', 'isEmpty() {', 'return this.rear === 0;', 'print() {', 'for(let i =0; i < this.rear; i++) {', 'console.log(this.data[i]);', 'clear() {', 'this.data.length = 0;', 'this.rear = 0;', 'class Queue {', 'constructor(){', 'this.data = [];', 'this.rear = 0;', 'this.size = 20;', 'enqueue(ele) {', 'if(this.rear < this.size ) {', 'this.data[this.rear] = ele;', 'this.rear = this.rear + 1;', 'length() {', 'return this.rear;', 'isEmpty() {', 'return this.rear === 0;', 'getFront() {', 'if(this.isEmpty() === false) {', 'return this.data[0];', 'getLast() {', 'if(this.isEmpty() === false) {', '', 'return this.data[ this.rear - 1 ] ;', 'dequeue() {', 'if(this.isEmpty() === false) {', '', 'this.rear = this.rear-1;', 'return this.data.shift();', 'print() {', 'for(let i =0; i < this.rear; i++) {', 'console.log(this.data[i]);', 'clear() {', 'this.data.length = 0;', 'this.rear = 0;']",[],[],['|||Enqueue: An enqueue operation is the one that is used when we need to insert an element to the queue. It inserts an element from the back end of the queue.|||Dequeue: A dequeue operation is used when we need to delete or remove the existing elements from the queue. The dequeue operation is used to remove an existing element from the front end of the queue.||||||Peek (): The peek () method is used to get the value that is present at the front end of the queue.|||isEmpty (): Such an operation is used to check if the queue has elements or it is empty.|||printQueue (): The printQueue() function is used to return all the elements present in the queue in the form of a string.|||&&&|||data: It is the array where we store the values or elements of the queue.|||rear: It is the variable that is used for storing the position value where the next element will get inserted in the queue.|||size: It is the size defined for the queue that will tell the number of elements contained in a queue.|||']
158,['Event Bubbling and Capturing in JavaScript'],"[""In JavaScript, propagation of events is done, which is known as 'Event Flow'. Event Flow is the sequence or order in which the particular web page receives the event. Thus, in JS, the process of event flow depends on the three aspects, which are:""]","['https://www.javatpoint.com/how-to-select-all-checkboxes-using-javascript', 'https://www.javatpoint.com/javascript-form', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/how-to-select-all-checkboxes-using-javascript', 'https://www.javatpoint.com/javascript-form', 'https://www.javatpoint.com/how-to-select-all-checkboxes-using-javascript']","['https://static.javatpoint.com/javascriptpages/images/event-bubbling-and-capturing-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/event-bubbling-and-capturing-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/event-bubbling-and-capturing-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/event-bubbling-and-capturing-in-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/event-bubbling-and-capturing-in-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/event-bubbling-and-capturing-in-javascript6.png']",[],"['Event Bubbling', 'Event Capturing']","['Example of Event Bubbling', 'Stopping Bubbling', 'Do not use event bubbling unnecessarily.', 'Complete Concept of Event Flow']","['Note: The event.stopPropagation () method stops the move upwards bubbling (on one event only), but all the other handlers still run on the current element.']","['Event Capturing', 'Event Target', 'Event Bubbling', ""Let's look at the below example to understand the working concept of Event Bubbling:"", 'Explanation of Code:', 'The sequence has taken place due to the concept of event bubbling. Thus, in this way event bubbling takes place.', 'We can also understand the flow of event with the help of the below flow chart:', 'It means when the user click on the button, the click event flows in this order from bottom to top.', 'For example:', ""Let's understand it via an example:"", 'Example of Event Capturing', ""Let's see an example code to understand the working of Event Capturing:"", 'Explanation of Code:', 'So, when we click on the button, the click event is performed in the following sequence, as you can see in the below flowchart:', 'The below diagram shows the execution of the event flow:', 'Thus, event handling and event capturing are both foundations of event delegation. These are the extreme power of event flow.']","['Here, in this section, we will learn and discuss the two aspects, which are event bubbling and event capturing. We will try to practically learn these concepts one by one.', 'In the above code, when we click on the button, it will not work because event.stopPropagation () method is being invoked here due to which th parent function will not be invoked.', ""Although the concept of event bubbling is incomplete without knowing about event capturing, so let's begin with event capturing and try to combine both concepts and completely understand the concept and the working.""]","['While developing a webpage or a website via JavaScript, the concept of event bubbling is used where the event handlers are invoked when one element is nested on to the other element and are part of the same event. This technique or method is known as Event Bubbling. Thus, while performing event flow for a web page, event bubbling is used. We can understand event bubbling as a sequence of calling the event handlers when one element is nested in another element, and both the elements have registered listeners for the same event. So beginning from the deepest element to its parents covering all its ancestors on the way to top to bottom, calling is performed.', 'Beginning from the target and moving towards the top is the bubbling i.e. starting from the child to its parent, it moves straight upwards. But a handler can also take decision to stop the bubbling when the event has been processed completely. In JavaScript, we use the event.stopPropagation () method.', 'In order to stop the bubbling and also prevent the handlers from running on the current element, we can use event.stopImmediatePropagation () method. It is another method that stops the bubbling and execution of all the other handlers. It means if an element has more than one event handler on a single event, all the event handlers bubbling will get stopped using this event.stopImmedaitePropagation () method.', 'Although event bubbling is a convenient approach, it is recommended that it should not be necessarily used. It is because of the event.stopPropagation () method creates pitfalls that are hidden, and these pitfalls can cause some problems at a later stage.', 'Netscape Browser was the first to introduce the concept of Event Capturing. Event Capturing is opposite to event bubbling, where in event capturing, an event moves from the outermost element to the target. Otherwise, in case of event bubbling, the event movement begins from the target to the outermost element in the file. Event Capturing is performed before event bubbling but capturing is used very rarely because event bubbling is sufficient to handle the event flow.']","['<!DOCTYPE html>', '<meta charset=""utf-8"">', '<meta name=""viewport"" content=""width=device-width"">', '<title>Event Bubbling</title>', '</head>', '<div id=""p1"">', '<button id=""c1"">I am child button</button>', '</div>', '<script>', ""var parent = document.querySelector('#p1');"", ""parent.addEventListener('click', function(){"", 'console.log(""Parent is invoked"");', '});', ""var child = document.querySelector('#c1');"", ""child.addEventListener('click', function(){"", 'console.log(""Child is invoked"");', '});', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '<meta name=""viewport"" content=""width=device-width"">', '<title>Event Bubbling</title>', '</head>', '<div id=""p1"">', '<button id=""c1"" onclick=""event.stopPropagation()"">I am child</button>', '</div>', '<script>', ""var parent = document.querySelector('#p1');"", ""parent.addEventListener('click', function(){"", 'console.log(""Parent is invoked"");', '});', ""var child = document.querySelector('#c1');"", ""child.addEventListener('click', function(){"", 'console.log(""Child is invoked"");', '});', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '<meta name=""viewport"" content=""width=device-width"">', '<title>Event Capturing</title>', '</head>', '<div id=""p1"">', '<button id=""c1"">I am Child</button>', '</div>', '<script>', ""var parent = document.querySelector('#p1');"", ""var child = document.querySelector('#c1');"", ""parent.addEventListener('click', function(){"", 'console.log(""Parent is invoked"");', '},true);', ""child.addEventListener('click', function(){"", 'console.log(""Child is invoked"");', '});', '</script>', '</body>', '</html>']",[],[],"['|||The above code is a HTML and JavaScript based code.|||We have used a div tag having div id = p1 and within div we have nested a button having button id = c1.|||Now, within the JavaScript section, we have assigned the html elements (p1 and c1) using the querySelector () function to the variable parent and child.|||After that, we have created and included an event which is the click event to both div element and child button. Also created two functions that will help us to know the sequence order of the execution of the parent and child. It means if the child event is invoked first, ""child is invoked"" will be printed otherwise ""parent is invoked"" will get printed.|||Thus, when the button is clicked, it will first print ""child is invoked"" which means that the function within the child event handler executes first. Then it moves to the invocation of the div parent function.||||||Create a nested menu where each submenu handles click on its elements, and to stop the triggering of the outer menu, it invokes the event.stopPropagation () method.|||Now for tracking the user\'s behavior on the click, afterward, we decided to catch clicks on the whole Window for which the document.addEventListener(\'click\') is used.|||But as we have called the event.stopPropagation () method, our analytic would not do anything where clicks get stopped due to stopPropagation (), and so we get a dead zone for it.|||&&&|||The above-described code is based on HTML and JavaScript.|||In the HTML portion, we have created a div id holding id = p1. Inside the div, we have nested and created a button with id = c1.|||Moving towards the JS code, initially, we have assigned the html element, i.e., the p1 id, to a variable parent using the querySelector () method and the same we have done with the c1 id where we have assigned it to a variable child.|||Then we have used a click event and attached it to both the p1 div and c1 button. Also containing a function for printing the appropriate message on the console. It means if the child event is invoked first, then it will print the ""Child is invoked"" message on the console first, and if the parent event handler is invoked first, it will ""Parent is invoked"" message on the console first.|||Next, we have added a third argument of addEventListner () to true in order to enable event capturing in the parent div.|||When we click on the button, it first executes the function, which is attached in the parent div.|||Afterward, the onclick () function of the button runs, and it is because of event capturing. Due to event capturing, the event of the parent element executes first, and then the event of the target element gets executed.|||']"
159,['How to select all checkboxes using JavaScript'],"['In order to select all the checkboxes of a page, we need to create a selectAll () function through which we can select all the checkboxes together. In this section, not only we will learn to select all checkboxes, but we will also create another function that will deselect all the checked checkboxes.']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/event-bubbling-and-capturing-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/event-bubbling-and-capturing-in-javascript', 'https://www.javatpoint.com/#']","['https://static.javatpoint.com/javascriptpages/images/how-to-select-all-checkboxes-using-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-select-all-checkboxes-using-javascript2.png']",[],['Selecting all checkboxes in a JavaScript code'],[],[],"[""So, let's see how we can check and uncheck all the checkboxes in a JavaScript code."", ""When we click on the 'Select All' button, we get:"", 'When we deselect all checkboxes, we get:', 'Code Explanation', 'The user can create many such examples of using checkboxes and try out such function.', 'So, in this way the user can select all or deselect all checkboxes.']",['We will implement and understand an example where we will create two buttons one for selecting all checkboxes and the other one for deselecting all the selected checkoxes. The example code is given below:'],[],"['<title>Selecting or deselecting all CheckBoxes</title>', '<script type=""text/javascript"">', 'function selects(){', ""var ele=document.getElementsByName('chk');"", 'for(var i=0; i<ele.length; i++){', ""if(ele[i].type=='checkbox')"", 'ele[i].checked=true;', 'function deSelect(){', ""var ele=document.getElementsByName('chk');"", 'for(var i=0; i<ele.length; i++){', ""if(ele[i].type=='checkbox')"", 'ele[i].checked=false;', '}', '</script>', '</head>', '<h3>Select or Deselect all or some checkboxes as per your mood:</h3>', '<input type=""checkbox"" name=""chk"" value=""Smile"">Smile<br>', '<input type=""checkbox"" name=""chk"" value=""Cry"">Cry<br>', '<input type=""checkbox"" name=""chk"" value=""Laugh"">Laugh<br>', '<input type=""checkbox"" name=""chk"" value=""Angry"">Angry<br>', '<br>', '<input type=""button"" onclick=\'selects()\' value=""Select All""/>', '<input type=""button"" onclick=\'deSelect()\' value=""Deselect All""/>', '</body>', '</html>']",[],[],"['|||The above complete code is based on HTML and JavaScript.|||In the html body section, we have created four input types as Checkboxes and two more input types as button. For the input types as button, we have created one button for selecting the checkboxes where onClick (), the selects () function will be invoked and the other one for deselecting the checkboxes (if selected any/all) where onClick () the deselect () function will be invoked.|||So, when the user clicks on the \'Select All\' button, it moves to the script section where it finds the selects () function and executes the statements within it.|||Similarly, when the user after selecting the checkboxes click on the ""Deselect All"" button, the deselect () function gets invoked. Also, if the user has selected a single or two checkboxes only, then also on clicking on the ""Deselect All"" button, it will deselect them. In case the user has not selected any checkbox and then clicking on the ""Deselect All"" button, no action will be shown or performed.|||']"
160,['JavaScript change Event'],['The JavaScript change event is an event type that gets executed when the focus on an element is changed. The change event of JavaScript inherits all the methods and properties of the Event.'],"['https://www.javatpoint.com/javascript-focusout-event', 'https://www.javatpoint.com/how-to-select-all-checkboxes-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-focusout-event', 'https://www.javatpoint.com/how-to-select-all-checkboxes-using-javascript', 'https://www.javatpoint.com/javascript-focusout-event']","['https://static.javatpoint.com/javascriptpages/images/javascript-change-event.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-change-event2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-change-event3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-change-event4.png']",[],"['Using JavaScript change event on Input elements', 'Using change event on radio box buttons', 'Using change event on select element']","['Example 1:', 'Example 2:']",[],"['addEventListener() method', 'onChange attribute', 'We will discuss the JavaScript change event using both ways.', 'Below are some examples that will make us understand the usage of the change event:', 'Using change event on input element as text:', 'The output of the above code is shown below:', 'Using onChange attribute:', 'In case of the radio box buttons, the change event comes into role after we select any of the radio button. We will see in the below code:', 'The output of the above is shown below:']","['Here, in this section, we will understand and implement the practical use of change event over different JavaScript elements such as an input text, checkbox, radio buttons, select elements and so on.', 'For using change event on a JavaScript element, we need to add an event handler method for which we can use addEventListener() or onChange attribute of the element. The syntax for both are given below:', 'In the above code, when we type some text in the textbox, the onChange event focus is out but as soon we click somewhere on the screen the onChange attribute comes into action.', 'When we click on any of the radio buttons, the specified message is displayed which means that on clicking on the radio button, the focus is lost from it.', 'In the case of select element, the change event works when the selection of a particular value is completed. Below we have discussed an example through which we can understand the working of select element over a value.']","[""There are different input types for different elements such as textbox, radio button or checkbox. When you give input and then moves to another element, such as pressing the button or mouse over the button, the change event comes into action. However, when we are focused on the input, the change event does not work. Let's see with the help of some examples."", ""When we click on the 'Click me' button, the focus is lost from the textbox which means that change event will come into action. Also, we can see that when we provide the input, the change event will not work. After clicking on the button, the text is displayed in the label."", 'In the above output, we can see that when we select the value from the list, the name gets displayed beside it. It is because when we select a value, i.e., when the selection is completed, the change event comes into role. But, while we are making the selection, the change event does not work.']","[""element.addEventListener('change', function() {"", '<input type=""text/radio/file"" onchange=""changeHandler(event)"">', '<!DOCTYPE html>', '<meta charset=""UTF-8"">', '<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">', '<title>Using change event for Input elements</title>', '</head>', '<body align=""center"">', '<input type=""text"" class=""txtclass"">', '<input type=""button"" value=""Click me"">', '<label id=""show""> </label>', '<script>', ""let source = document.querySelector('.txtclass');"", ""let target = document.querySelector('#show');"", ""source.addEventListener('change', function () {"", 'target.textContent = this.value;', '});', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<meta charset=""UTF-8"">', '<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">', '<title>Using change Event for Select element</title>', '</head>', '<h3>Type your name and click anywhere on the browser</h3>', '<input type=""text"" id=""id_1"" onChange=""show()"">', '<script>', 'function show(){', ""var x=document.getElementById('id_1');"", ""x.style.color='red';"", '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<meta charset=""UTF-8"">', '<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">', '<title>Using change Event for Radio Buttons</title>', '</head>', '<h3>Choose the one you like</h3>', '<input type=""radio"" id=""happy"" name=""status"">Be Happy with what you have</br>', '<input type=""radio"" id=""excited"" name=""status"">Be Excited about what you want</br>', '<input type=""radio"" id=""sad"" name=""status"">Don\'t be Sad </br>', '<input type=""radio"" id=""angry"" name=""status"">Anger is your biggest enemy</br>', '<input type=""radio"" id=""none"" name=""status"">That\'s great</br>', '<p id=""show""></p>', '<script>', ""let show = document.querySelector('#show');"", ""document.body.addEventListener('change', function (e) {"", 'let target = e.target;', 'let display_msg;', 'switch (target.id) {', ""case 'happy':"", ""display_msg = 'You are happy';"", 'break;', ""case 'excited':"", ""display_msg = 'You are excited';"", 'break;', ""case 'sad':"", ""display_msg = 'You are sad';"", 'break;', ""case 'angry':"", ""display_msg = 'You are angry';"", 'break;', ""case 'none':"", ""display_msg = 'none';"", 'break;', '}', 'show.textContent = display_msg;', '});', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<meta charset=""UTF-8"">', '<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">', '<title>Using change Event for Select element</title>', '</head>', '<select id=""item"">', '<option value="""">Select an item</option>', '<option value=""item1"">Item1</option>', '<option value=""item2"">Item2</option>', '<option value=""item3"">Item3</option>', '</select>', '<label id=""show""></label>', '<script>', ""let source = document.querySelector('#item');"", ""let target = document.querySelector('#show');"", ""source.addEventListener('change', function () {"", 'target.textContent = this.value;', '});', '</script>', '</body>', '</html>']",[],[],[]
161,['JavaScript focusout event'],"['The focusout event of JavaScript is the event handler that executes when the element is just about to lose focus. Other than this, we have also learned about blur, which is also an event handler used in JavaScript. Both blur and focusout are the focus events, but there is a difference between both of them. The difference is that the blur event does not bubble, whereas the focusout event bubbles out. Thus, when the user finds that an element or its child is about to lose focus, the user should listen to the onfocusevent of that element.']","['https://www.javatpoint.com/traverse-array-object-using-javascript', 'https://www.javatpoint.com/javascript-change-event', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/traverse-array-object-using-javascript', 'https://www.javatpoint.com/javascript-change-event', 'https://www.javatpoint.com/traverse-array-object-using-javascript']",['https://static.javatpoint.com/javascriptpages/images/javascript-focusout-event.png'],[],[],['Example of focusout event'],"['Note: The focusin event is just the opposite of the focusout event, where the event action is performed when the user creates a focus on the active element. For focusin, we use onFocusIn event handler.']","['Thus if the user performs the following actions, the focusout event will be invoked:', ""Let's look and understand both the focusin and focusout events with the help of the below example:"", 'Code Explanation', 'The output of the above code is shown below:']",[],[],"['<script type=""text/javascript"">', 'function Focus_In (event) {', 'event.srcElement.style.color = ""red"";', '}', 'function Focus_Out (event) {', 'event.srcElement.style.color = ""blue"";', '</script>', '</head>', '<center>    <h3>Click on the textbox and observe </h3><br></br>', '<form onfocusin=""Focus_In (event)"" onfocusout=""Focus_Out (event)"">', '<b>    User name: <input type=""text value=""Username""/></b><br/>', '<b>   Password <input type=""password"" value=""*******""/></b> </center>', '</form>', '</body>', '</html>']",[],[],"['|||When the user clicks outside the active element, the focus is lost.|||Switching to another application or file.|||Use TAB key/access key to navigate away from the active element, and so the focus is lost.|||Calling the blur method on an active element.|||Calling the setActive method on a non-active element that can be active.|||Calling the focus method on a non-active element that can be active.||||||The above code is the html and JavaScript based code.|||In the body section of the html, we have created a form having a user and a password field.|||In the script section of the JavaScript, we have created two functions where Focus_In is for focusin event and Focus_Out is for focusout event.|||While creating the form, we have invoked both the Focus_In and Focus_Out functions.|||Two actions will be performed-When the user clicks on any of the textbox, the color of the text changes to red which means that focus is in. So, the Focus_In function is called. Another action takes place when the user clicks anywhere on the page but not on the active part (i.e. on the text of the textbox or on the password in the textbox) which means the focus is lost and thus the color changes back to blue. So, the Focus_Out function is invoked in this case.|||Also note that when the user executes the code on the web browser, the color of the text is seen black unless the user does not makes any action.|||']"
162,['Traverse array object using JavaScript'],"['JavaScript does not offer any specific in-built function to traverse the array elements/objects. You can traverse an array simply using for loop or directly by element index. An array contains multiple elements of the same type, which can be traverse using for loop.']","['https://www.javatpoint.com/javascript-create-and-download-csv-file', 'https://www.javatpoint.com/javascript-focusout-event', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=traverse-array-object-using-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=traverse-array-object-using-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/cpp-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/java-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=traverse-array-object-using-javascript3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=traverse-array-object-using-javascript4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=traverse-array-object-using-javascript5', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=traverse-array-object-using-javascript6', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-function', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=traverse-array-object-using-javascript7', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=traverse-array-object-using-javascript8', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=traverse-array-object-using-javascript9', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=traverse-array-object-using-javascript10', 'https://www.javatpoint.com/javascript-create-and-download-csv-file', 'https://www.javatpoint.com/javascript-focusout-event', 'https://www.javatpoint.com/javascript-create-and-download-csv-file']","['https://static.javatpoint.com/javascriptpages/images/traverse-array-object-using-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/traverse-array-object-using-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/traverse-array-object-using-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/traverse-array-object-using-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/traverse-array-object-using-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/traverse-array-object-using-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/traverse-array-object-using-javascript7.png', 'https://static.javatpoint.com/javascriptpages/images/traverse-array-object-using-javascript8.png', 'https://static.javatpoint.com/javascriptpages/images/traverse-array-object-using-javascript9.png', 'https://static.javatpoint.com/javascriptpages/images/traverse-array-object-using-javascript10.png']",[],"['Traverse array using for loop', 'Traverse array using forEach() method', 'Traverse an array using every() method', 'Traverse an array using map']","['Example 1', 'Example 2', 'Example 3: Traverse using while loop', 'Syntax', 'Example', 'Syntax', 'Example 1', 'Example 2', 'Syntax', 'Example 1', 'Example 2']",[],"['In this chapter, we will discuss all the methods to traverse an array:', 'Simple Array traversing', 'In this example, we will simply traverse an array directly from the array index.', 'Save the code and run it on the browser. The array will traverse and print the array elements.', 'Screenshot', 'Traverse and display Array elements', 'This example will traverse an array directly using the array index and display the array string.', 'Save the code and run it on the browser. The array will traverse and print the array elements.', 'Screenshot', 'Besides this, JavaScript offers various other ways to traverse an array. We are discussing the most used and easy method here.', 'Below is an example of traversing an array using for loop and printing the string elements of the array.', 'Save the code and run it on the browser. The array will traverse and print the array elements.', 'Screenshot', 'See the web screenshot for the above JavaScript code:', 'Below is an example of traversing an array using the for loop and printing the integer elements present in this array.', 'Save the code and run it on the browser. The array will traverse and print the array elements.', 'Screenshot', 'See the web screenshot for the above JavaScript code:', 'In this example, we will use a while loop to traverse an array and then display the elements present in this array.', 'Save the code and run it on the browser. The array will traverse and print the array elements.', 'Screenshot', 'See the web screenshot for the above JavaScript code:', 'Its syntax is also different, look at the syntax of forEach() method:', 'Save the code and execute it on the browser to show you all the array elements get printed on the web. See the below response:', 'Screenshot', 'See the web screenshot for the above JavaScript code:', 'It returns true if all elements satisfy the condition and pass the test (provided as a function). Otherwise, it returns false.', 'Here is the syntax for every() method:', 'Screenshot', 'See the web screenshot for the above JavaScript code:', 'Screenshot', 'See the web screenshot for the above JavaScript code:', 'Here is the syntax for the map() method of JavaScript:', 'It returns a newly created array.', 'Look at the below examples how map() is used:', 'See the web screenshot for the above JavaScript code:', 'You can also perform simple arithmetic operation using map(). See the below code given of the example:', 'See the web output for the above code. It will return all the array elements by adding 10 to them.']","['The above method does not work efficiently when the array is lengthy or has too many variables. So, we have to try any other method to traverse an array to save time and effort.', 'Apart from basic loops (for, while, and do-while loop), JavaScript has one more loop, or you can also call it an array method named forEach(). It is different from the basic loops as it calls a function once for each element present in an array.', 'In this example, we will traverse the whole array and check the given values are > 18 condition to verify whether all are adults or not. See the code below:', 'Save the code and execute it on the browser, which will show you the response ""All are adults"" if all array values are > 18. Otherwise, it will display ""Atleast one is not adult."" See the below response:', 'Save the code and execute it on the browser that will show you the response ""All are even numbers"" if all array values are > 18. Otherwise, it will display ""Atleast one of them is not an even number."" See the below response:', 'A map is a method provided by JavaScript programming language which applies a function over every element of the array and then returns a new array. In this way, it traverses the whole array.', 'You can also perform operations with array elements using this map() function while traversing the array. Basically, it traverses the whole array to perform some operations with each element of the array.', 'In this example, we will traverse the whole array using map() function of JavaScript to perform Math.sqrt() operation on array elements. See how it will be done with JavaScript methods:', 'Save the code and execute it on the browser, which will show you all the array elements before and after performing the sqrt operation. Here, the map() function will help to traverse each element of the array.']","['To overcome this problem, the concept of the loop has come, which helps to traverse an array by providing a small code. We will now use the different loops to traverse the array elements and display them on the web. You can use while, do-while, for loop or for each loop to traverse an array. It is similar to the other programming languages like C, C++, and Java.', 'This example will show you how forEach() method works with array elements. Firstly the array concatenated with forEach() method will call user-defined function. Then this function will print traverse all array elements and display them on the web. See the code below:', 'This method is different from the basic loops and forEach() method. It is basically used to traverse an array along with some conditions specified by the programmer. The every() method is a JavaScript function to test the specified condition with all elements of the array.', 'In this example, we will traverse the whole array to check that all the given values in the array are even numbers. For this we will put a condition check (even = x=> x%2 == 0). It will return true if all are even numbers; otherwise, it will return false. See the code below:']","['<script>', 'var message = [""Have"", "" a"", "" good"", "" day""];', 'document.write(""array[0] = "" + message[0]);', 'document.write(""<br> array[1] = "" + message[1]);', 'document.write(""<br> array[2] = "" + message[2]);', 'document.write(""<br> array[3] = "" + message[3]);', '</script>', '<script>', 'var message = [""Have"", "" a"", "" good"", "" day""];', 'document.write(message[0]);', 'document.write(message[1]);', 'document.write(message[2]);', 'document.write(message[3]);', '</script>', '<script>', 'var message = [""Die"", "" with"", "" memories,"", "" not"", "" dreams""];', 'for(var i=0; i< message.length; i++){', 'document.write(message[i]);', '</script>', '<script>', 'var integerArray = [34, 67, 12, 89, 45, 79];', 'for(var i=0; i< integerArray.length; i++) {', 'document.write(integerArray[i] + ""<br>"");', '</script>', '<script>', 'var integerArray = [34, 67, 12, 89, 45, 79];', 'var i=0;', 'document.write(""Elements in array: <br>"");', 'while( i< integerArray.length) {', 'document.write(integerArray[i] + ""<br>"");', 'i++;', '</script>', 'arr.forEach(functionName);', '<script>', 'var message = [""It"", "" is"", "" very"", "" beautiful"", "" day""];', 'var index = 0;', 'message.forEach(traverseArray);', 'function traverseArray(ele, index)', 'document.write(ele);', '</script>', 'arr.every(condition);', '<script>', 'var age = [22, 28, 36, 26, 34, 31];', 'const adult = x => x > 18;', 'if (age.every(adult)) {', ""document.write('All are adults');"", 'else {', ""document.write('Atleast one is not adult');"", '</script>', '<script>', 'var age = [12, 47, 16, 26, 34, 59];', 'const adult = x => x > 18;', 'if (age.every(adult)) {', ""document.write('All are adults');"", 'else {', ""document.write('Atleast one is not adult');"", '</script>', 'arr.map(condition);', '<h3> Perfrom sqrt on each element of array using map() </h3>', '<script>', 'var numbers1= [4, 16, 36, 64, 100, 144, 196, 256, 324, 400];', 'var numbers2 = numbers1.map(myFunction);', 'document.write(""Inital array elements: "" + numbers1);', 'document.write(""<br> <br>"");', 'document.write(""Array after sqrt: "" + numbers2);', 'function myFunction(value, index, array) {', 'return Math.sqrt(value);', '</script>', '<h3> Perfrom addition on each element of array using map() </h3>', '<script>', 'var numberArray = [5, 9, 8, 2, 6];', 'var numbers2 = numberArray.map(myFunction);', 'document.write(""Inital array elements: "" + numberArray);', 'document.write(""<br><br>"");', 'document.write(""<b> Add 10 to each element of the array </b><br>"");', 'document.write(""Newly created array: "" + numbers2);', 'function myFunction(ele, index, array) {', 'return ele + 10;', '</script>']","['array[0] = Have', 'array[1] = a', 'array[2] = good', 'array[3] = day', 'Have a good day', 'Die with memories, not dreams', '34', '67', '12', '89', '45', '79', 'Elements in array:', '34', '67', '12', '89', '45', '79', 'It is very beautiful day', 'Atleast one is not adult', 'Atleast of them is not an even number']",[],[]
163,['JavaScript create and download CSV file'],"['CSV files are an essential part of computer science when you work with websites and databases. There might be some cases when the user has some data in the browser that you want to let them download this data. In that case, CSV files help the programmer to use them to download the website data in tabular form. Programmers use the CSV file format for the users to download the website data.']","['https://www.javatpoint.com/how-to-make-beep-sound-in-javascript', 'https://www.javatpoint.com/traverse-array-object-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/excel-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-create-and-download-csv-file1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-create-and-download-csv-file2', 'https://www.javatpoint.com/how-to-make-beep-sound-in-javascript', 'https://www.javatpoint.com/traverse-array-object-using-javascript', 'https://www.javatpoint.com/how-to-make-beep-sound-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-create-and-download-csv-file.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-create-and-download-csv-file2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-create-and-download-csv-file3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-create-and-download-csv-file4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-create-and-download-csv-file5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-create-and-download-csv-file6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-create-and-download-csv-file7.png']",[],"['How can you download the CSV file?', 'Create and download CSV file', 'Export and download the HTML table data of webpage into CSV file']","['Why needs CSV file?', 'Implementation', 'Example 1', 'Open the downloaded CSV File', 'Example']",[],"['This chapter will show you how you can download a CSV file from a client and the server.', 'Following example is one of the simplest examples of this chapter to create and download a CSV file.', 'See the code implementation to create and download the CSV file.', 'Try to execute the above code on the web and get the output as shown in the below screenshot:', 'Click on this Download CSV button to download the CSV data created in this file and this CSV data will display on the web as well.', 'See the below screenshot on MS-Excel of CSV data. Other than this, you have seen that we have also displayed the CSV data on the web browser.', 'CSV file on MS-Excel', 'CSV file on Notepad', 'Click on the given Export to HTML table to CSV File button to download the data to CSV file format. The file will download by the name of person.csv.']","['To export the data from the website, programmers use CSV files. CSV files can be created and downloaded using JavaScript. This chapter will describe how to download the website HTML table data in a CSV file.', 'With the help of JavaScript, you can collect the data from the HTML page in a CSV file and download it easily. Use the JavaScript programming with HTML to create the data and download it in CSV format.', 'To create the data for your CSV file, you just need to create a multi-dimensional array that will contain the data for the HTML page. You can create data manually for learning purpose instead of taking it from the HTML page directly.', 'For this, you will need to create a multi-dimensional array using JavaScript and provide the different values manually (like - Justin Bieber, 24, Singer, London as Name, Age, Profession, and City) to create a CSV file.', 'Copy and save the above code in a file and execute it on the web. You will get the output as given below in the screenshot on the web browser having an HTML table containing rows of data:', 'You can open this file in MS-Excel to see the data contained inside it. Open the downloaded file and see the content present inside it same as the web HTML table content.']","['CSV is a simple and easy form to stores the website data in tabular form. With the help of JavaScript, you can collect the data from the HTML page and create a CSV file or also create the data manually. You can open the CSV file in MS-Excel and see the data present inside it. Almost every database requires CSV files to back up the data.', 'In this example, we will create a multi-dimensional array and add some data to create a CSV file. Besides this, we will add a button to download this data by the user. When the user clicks on the given button, the data will start downloading in .csv file format.', 'Look at the extension of the downloaded file, which will be .csv. For reference, open in the download CSV file in MS-Excel and see the data inside it. We will show you the output on both excel and notepad after opening the CSV file. You can see that CSV file data will show in tabular form.', 'There is one more way to download the website data in CSV file format. Sometimes, you want to allow the user to let them download the website data into CSV file format. JavaScript enables the programmer to use its in-built method to export the website data (HTML table data of the website) in a CSV file, which can be opened in MS-Excel.', 'In the following example, we will export the HTML table data from the webpage to a CSV file and download this CSV file. We will add a button to download this CSV data file on a single click of the user. When the user clicks on this button, the data will start downloading in .csv file format.']","['<title> Download CSV file </title>', '</head>', '<script>', 'var csvFileData = [', ""['Alan Walker', 'Singer'],"", ""['Cristiano Ronaldo', 'Footballer'],"", ""['Saina Nehwal', 'Badminton Player'],"", ""['Arijit Singh', 'Singer'],"", ""['Terence Lewis', 'Dancer']"", 'function download_csv_file() {', ""var csv = 'Name,Profession\\n';"", 'csvFileData.forEach(function(row) {', ""csv += row.join(',');"", 'csv += ""\\n"";', '});', 'document.write(csv);', ""var hiddenElement = document.createElement('a');"", ""hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);"", ""hiddenElement.target = '_blank';"", ""hiddenElement.download = 'Famous Personalities.csv';"", 'hiddenElement.click();', '</script>', '<h3> Click the button to download the CSV file </h3>', '<!-- create an HTML button to download the CSV file on click -->', '<button onclick=""download_csv_file()""> Download CSV </button>', '</body>', '</html>', '<title> Export HTML table Data to CSV using JavaScript </title>', '<style>', 'color:#2b2b2b;', 'font-family: ""Roboto Condensed"";', 'table {', 'width:40%;', 'text-align:left;', 'color:#4679bd;', '</style>', '</head>', '<script>', 'function downloadCSV(csv, filename) {', 'var csvFile;', 'var downloadLink;', ""csvFile = new Blob([csv], {type: 'text/csv'});"", 'downloadLink = document.createElement(""a"");', 'downloadLink.download = filename;', 'downloadLink.href = window.URL.createObjectURL(csvFile);', 'downloadLink.style.display = ""none"";', 'document.body.appendChild(downloadLink);', 'downloadLink.click();', 'function exportTableToCSV(filename) {', 'var csv = [];', 'var rows = document.querySelectorAll(""table tr"");', 'for(var i=0; i<rows.length; i++) {', 'var row = [], cols = rows[i].querySelectorAll(""td, th"");', 'for( var j=0; j<cols.length; j++)', 'row.push(cols[j].innerText);', 'csv.push(row.join("",""));', 'downloadCSV(csv.join(""\\n""), filename);', '</script>', '<!-- create table and provide data inside it -->', '<table>', '<th> Name </th>', '<th> Profession </th>', '<th> Age </th>', '<th> Hobby </th>', '<td> Cristiano </td>', '<td> Hacker </td>', '<td> 24 </td>', '<td> Travelling, Sky-diving </td>', '<td> Jenifer </td>', '<td> Photographer </td>', '<td> 22 </td>', '<td> Cooking </td>', '<td> Simon </td>', '<td> Travelling-guide </td>', '<td> 35 </td>', '<td> Dancing, Gardening </td>', '<td> Cristiano Ronaldo </td>', '<td> Footballer </td>', '<td> 29 </td>', '<td> Singing </td>', '</table>', '<p><b> Click the Download CSV button to download the created data </b></p>', '<!-- button to call the user-defined function to download CSV file data -->', '<button onclick=""exportTableToCSV(\'person.csv\')""> Export HTML table to CSV File </button>', '</body>', '</html>']",[],[],"['|||CSV files store and display the data in tabular form which is easy to understand.|||It is easy and simple to use and implement. So, programmers prefer CSV to download the data of the website in .csv format.|||It does not require any third-party libraries to create and download.|||By using simple JavaScript methods and parameters, you can easily use the CSV file in your website.|||']"
164,['How to make beep sound in JavaScript?'],['A beep sound is usually used for the notification alert in websites. There may be some other cases where you need to use a beep sound in your website.'],"['https://www.javatpoint.com/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript', 'https://www.javatpoint.com/javascript-create-and-download-csv-file', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-make-beep-sound-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-audio', 'https://www.javatpoint.com/https://www.javatpoint.com/html-source-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-make-beep-sound-in-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-make-beep-sound-in-javascript3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-make-beep-sound-in-javascript4', 'https://www.javatpoint.com/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript', 'https://www.javatpoint.com/javascript-create-and-download-csv-file', 'https://www.javatpoint.com/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript']","['https://static.javatpoint.com/javascriptpages/images/how-to-make-beep-sound-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-make-beep-sound-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-make-beep-sound-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-make-beep-sound-in-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-make-beep-sound-in-javascript5.png']",[],"['Where to use beep sound', 'Implementation', 'Play and Pause a sound using JavaScript']","['Example 1', 'Example 2: using <audio> tab', 'Example 3', 'Example 4: Using <embed> tag']",['Note: we will advise you to use <audio> or <video> tag to embed a sound or video in your website.'],"['Following are the cases that we will discuss in this chapter:', 'In this chapter, we will show you how to play a beep sound on a button click.', 'We will take an example where on button click, we will call a user-defined function that will contain the code of beep sound.', 'On executing this code on the web-browser, it will show you the output as shown in the below screenshot along with a button:', 'When you click on this Press Button, it will play a beep sound.', 'Execute the code on the web-browser; it will show you the output as shown in the below screenshot:', 'Here, click on the Click to beep button to beep a sound. Each time when you click this button, a function will trigger and a beep sound will play.', 'These play() and pause() function is used with the object of sound provided in the function by the programmer.', 'Look at the example for this how it will be actually done:', 'Click on the Play Audio to play the track and the Pause Audio button to stop playing the sound between.', 'You will get a music button on the browser when you play the song.', 'Similar to the previous example, this code will show you the output as shown in the below screenshot on executing the above code:', 'Here, click on the Click to beep button to beep a sound. Each time when you click this button, a function will trigger and a beep sound will play.']","['You can find several real-life examples of this beep sound, such as in grocery stores, libraries, and many more places. This chapter will show you how to use a beep sound in a website using JavaScript programming language.', 'Most of the time, you have noticed that a sound emits at the time of barcode scanning; it indicates to a successful scanning. This sound is a beep sound used by the programmer to send a signal to the user of successfully scanning.', 'Besides this, you have also heard this beep sound in videos several times to mute some part of the sound. There might be some other cases where this beep sound is used. It helps to make a site more interactive.', 'To beep a sound on a button click using JavaScript, it does not require a lengthy code to implement. However, you need to embed the source of the beeping music using the HTML tab and provide the link of the audio in src.', 'Apart from that, we will use the play() function of JavaScript to play the music or sound provided in the code. Following is an example to play a beep sound.', 'This is the most simple and shortest code to play a beep sound using the JavaScript programming language. In this example, we will use the beep music direct from the internet by providing its link in JavaScript code and play it on click.', 'In this example, we will use <audio> and <source> tabs to provide the id and src of music and embed them with JavaScript code. Here, we will take the beep sound from the internet by providing its link in JavaScript code.', 'Other than the beep sound, you can use any other sound to play it on button click as well as you can stop playing that sound using the pause() function of JavaScript.', 'When you execute the above code on the web, you will get the output having two buttons. One for playing the sound and another to pause/stop the sound in between if you want.', 'The following example is another example to beep a sound on button click. In this example, we will use the <embed> tab of HTML to provide the link of beep sound in the src parameter from the internet.']",[],"['<html>', '<head>', '<title> Beep sound document </title>', '</head>', '<body>', '<center>', '<h2 style=""color:brown""> Simple example </h2>', '<h4> Press the Button to beep a sound </h4>', '<!-- create a button to call the function to play a beep sound -->', '<button onclick=""play()""> Press Button </button>', '<script>', 'function play() {', 'var beepsound = new Audio(', ""'https://www.soundjay.com/button/sounds/beep-01a.mp3');"", 'beepsound.play();', '</script>', '</center>', '</body>', '</html>', '<html>', '<head>', '<title> Beep sound on button click </title>', '</head>', '<body>', '<center>', '<h2> Example: Beep a sound </h2>', '<h4> Press the Button to beep a sound </h4>', '<!-- Use audio tab to provide an id to sound for further using it in JavaScript code -->', '<audio id=""beepAudio"" >', '<!-- Provide a link of beep sound from internet -->', '<source src= ""https://www.soundjay.com/button/sounds/beep-01a.mp3"">', '</audio>', '<button onclick=""beepSound()""> Click to beep </button>', '<script>', ""var audio = document.getElementById(' beepAudio');"", 'function beepSound () {', 'audio.play()', '</script>', '</center>', '</body>', '</html>', '<center>', '<h2 style=""color:brown""> Example: Play and Pause a sound </h2>', '<audio id=""myAudio"">', '<!-- provide the address of the sound to be played -->', '<source src=""https://www.soundjay.com/free-music/sounds/barn-beat-01.mp3"">', 'Your browser does not support the audio element.', '</audio>', '<p><b> Click the buttons to play or pause the audio. </b></p>', '<!-- create a button to play the music -->', '<button onclick=""playAudio()"" > Play Audio </button>', '<br><br>', '<!-- create a button to pause the music -->', '<button onclick=""pauseAudio()"" > Pause Audio </button>', '</center>', '</body>', '<script>', 'var sound = document.getElementById(""myAudio"");', 'function playAudio() {', 'sound.play();', 'function pauseAudio() {', 'sound.pause();', '</script>', '</html>', '<html>', '<head>', '<title> Beep sound on button click </title>', '</head>', '<body>', '<center>', '<h2 style=""color:brown""> Example: Beep a sound </h2>', '<h4> Press the Button to beep a sound </h4>', '<!-- Use embed to provide the link of beep sound from internet -->', '<embed src=""https://www.soundjay.com/button/sounds/beep-01a.mp3"" autostart=""false"" width=""0"" height=""0"" id=""sound1""', 'enablejavascript=""true"">', '<button onclick=""playSound(\'sound1\')""> Click to beep </button>', '<script>', 'function playSound(beepSound) {', 'var audio = document.getElementById(beepSound);', 'audio.play() ;', '</script>', '</center>', '</body>', '</html>']",[],[],['|||Alert notification|||Make a website more interactive|||']
165,['How to add a WhatsApp share button in a website using JavaScript?'],"['WhatsApp is one of the most popular mobile messaging apps nowadays. It was developed by Jan Koum and Brian Acton, but now it is owned by Facebook. Recently, there are almost 1.5 million active users on it.']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/how-to-make-beep-sound-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-anchor', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-a-whatsapp-share-button-in-a-website-using-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-a-whatsapp-share-button-in-a-website-using-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-a-whatsapp-share-button-in-a-website-using-javascript3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-a-whatsapp-share-button-in-a-website-using-javascript4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=how-to-add-a-whatsapp-share-button-in-a-website-using-javascript5', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/how-to-make-beep-sound-in-javascript', 'https://www.javatpoint.com/#']","['https://static.javatpoint.com/javascriptpages/images/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript2.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript5.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript6.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript7.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript8.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript9.jpg', 'https://static.javatpoint.com/javascriptpages/images/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript10.jpg']",[],"['Why needed?', 'Steps to Add a WhatsApp sharing link', 'Create a WhatsApp Sharing button', 'Create a WhatsApp Sharing icon using image', 'WhatsApp sharing link with user input']","['Complete Example', 'Example', 'Example', 'Example']","['Note: This will not work on large screens like laptops and computers. It will work perfectly on a Mobile phone.', 'Note: You will get this output of the above code only on the mobile phone.']","['Following steps will create a WhatsApp sharing link on a webpage through which you can directly open WhatsApp and share the website data using it.', 'For the large-screen users, provide the WhatsApp web address or link inside the JavaScript code.', 'Follow the steps below:', 'Step 1: Design a simple webpage having a hyperlink on it using HTML anchor tag <a>. We will use this link as a sharing option.', 'Use the CSS @media query for this.', 'JAVASCRIPT CODE', 'Add the below code to the anchor tab <a> inside HTML code for mobile.', 'See the complete code to create a WhatsApp sharing link below:', 'Output on Mobile', 'Output on desktop', 'This method does not require a lengthy code. It just needs the window.open() method of JavaScript and link of WhatsApp and data you want to share.', 'For mobile WhatsApp', 'For WhatsApp Web on desktop', 'Add one of the following codes to your final code with respect of which you want to open WhatsApp.', 'See the code for mobile to add a WhatsApp sharing button on a webpage/website:', 'Output on Mobile', 'Run the above code on mobile, it will show you a small HTML button on a webpage, as shown in the below screenshot:', 'For mobile WhatsApp', 'For WhatsApp Web', 'Important points for this example:', ""E.g. 'whatsapp://send?text= https://www.youtube.com/watch?v=ohpCMpderow'"", 'Output on Mobile', 'Run the above code on mobile; it will show you a small icon of WhatsApp. Click on this WhatsApp image icon and see the output of how it will respond:', 'Click on this WhatsApp image icon you will get the output as given below:', 'Look at the code for WhatsApp sharing with user input:', 'See the complete code to add a WhatsApp sharing icon on a webpage:']","[""As WhatsApp is a too popular chatting app, most of the websites need a WhatsApp sharing option on them. The web developer requires to fulfil this requirement and add it's sharing option to their website for the efficiency of the users."", 'This chapter will guide you on adding a WhatsApp sharing link or button to a website using the JavaScript programming language. This chapter will describe the following methods to create a WhatsApp sharing option for your website:', 'As WhatsApp is the most popular chatting app, most websites need a WhatsApp sharing option on them. WhatsApp provides private sharing, which means that sharing is engaged between a few people rather than the public.', 'Step 2: As we already told you that this method would not work on large screens (laptop/desktop/computer). So, we will add CSS to hide the sharing link on large screens. CSS code to hide the sharing link on large screens:', 'This code will hide the link which you have created using the anchor tag as we set the min-width of the screen to 500px. For the testing purpose, you can increase the min-width to 1000 and check the output on a laptop; it will not hide the link.', 'Step 3: Now, implement the above two steps with JavaScript to make the created hyperlink in working. So, when you click on this link, it will open WhatsApp directly from the current webpage.', 'Check and run the above code on mobile instead of desktop or laptop. You will get the response as given below. Here, click on the Share to WhatsApp link, which will redirect you to the WhatsApp messenger on your mobile phone.', 'If you try to run the above code on large screens like desktop or laptop, you will get the response without having a WhatsApp sharing link, as shown in the below screenshot:', 'Or, in case you get the WhatsApp sharing link on minimizing the browser screen size, you will get the blank response containing text in the search bar of the browser by clicking on that link.', 'Click on this Open WhatsApp button that will take you to your WhatsApp application to select and share data with your contact. See the screenshot of mobile:', 'The below code will help you to add a WhatsApp sharing icon on your website. Remember that - below code will work only for the WhatsApp mobile application. On the web, it will show you nothing.', 'In this example, we will take an input field to take input from the user and a button to submit that user input and a WhatsApp sharing link. This will be done using JavaScript programming.', 'When you execute the above code on mobile, it will show you a text field to take input from the user and a button to share that input to WhatsApp. See the mobile screenshot for the above program:', 'Provide the message in the text field and click on the Share to WhatsApp button. It will redirect you to your WhatsApp to share the message with your WhatsApp contact.']","[""The web developer requires to fulfil this requirement and add it's sharing option to their website for the efficiency of the users. So that the user can easily share any information directly from the website using that sharing option instead of copy and paste sharing."", 'When you click on the link, your WhatsApp application will open in mobile phone and it will ask you to select the contacts to share the text with them. This will share the text provided in the text parameter (This is WhatsApp sharing example) inside the anchor tag.', 'Now, we will create and add a WhatsApp Sharing button to a webpage. Basically, this code is designed to add a button to the website that will lead you to the WhatsApp mobile app. By clicking on this button, you will be redirected to the WhatsApp application to share some web content with your contacts.', 'In this method, we will create a WhatsApp icon by taking an image from the internet and add it to the webpage to create a sharing icon of WhatsApp. When you click on this image/icon, it will redirect you to the WhatsApp application for sharing some web content with your contacts.', 'This is another example of creating a WhatsApp sharing option along with an input field to take input from the user. This means that we will take the input from the user in an input field that he/she wants to share and send this message using JavaScript by providing a sharing button to share with their contacts on WhatsApp messenger.']","['<html>', '<head>', '<title> Add a WhatsApp sharing link on a website </title>', '</head>', '<body>', '<h3 style=""color:brown""> WhatsApp sharing Link </h3>', '<a> Share to WhatsApp </a>', '</body>', '</html>', '<style>', '@media screen and (min-width: 500px) {', 'a {', 'display: none', '}', '</style>', 'href=""whatsapp://send?text=Your message here""', '<html>', '<head>', '<title> Add a WhatsApp sharing link on a website </title>', '</head>', '<style>', '@media screen and (min-width: 1000px) {', 'a {', 'display: none', '}', '</style>', '<body>', '<h3 style=""color:brown""> WhatsApp sharing Link </h3>', '<!-- create a link using anchor tab -->', '<a href=""whatsapp://send?text=This is WhatsApp sharing example using link"" \t\tdata-action=""share/whatsapp/share""', 'target=""_blank""> Share to WhatsApp </a>', '</body>', '</html>', '<button onclick=""window.open(\'whatsapp://send?text=This is WhatsApp sharing example using button\')""> Open WhatsApp </button>', '<button onclick=""window.open(\'https://web.whatsapp.com://send?text=This is whatsapp sharing example using button\')""> Open WhatsApp </button>', '<html>', '<head>', '<title> Add a WhatsApp sharing button on a website </title>', '</head>', '<body>', '<h3 style=""color:brown""> WhatsApp sharing Link </h3>', '<!-- create a button to open the WhatsApp onclick function -->', '<button onclick=""window.open(\'whatsapp://send?text=This is WhatsApp sharing example using button\')""> Open WhatsApp </button>', '</body>', '</html>', 'function openWhatsApp() {', ""window.open('whatsapp://send?text= https://www.youtube.com/watch?v=ohpCMpderow');"", 'function openWhatsApp() {', ""window.open('https://web.whatsapp.com://send?text= https://www.youtube.com/watch?v=ohpCMpderow');"", '<html>', '<head>', '<title> Add a WhatsApp sharing image icon on a website </title>', '</head>', '<script>', 'function openWhatsApp() {', ""window.open('whatsapp://send?text= https://www.youtube.com/watch?v=ohpCMpderow');"", '</script>', '<body>', '<h3 style=""color:brown""> WhatsApp sharing Link </h3>', '<!-- create an image icon to open the WhatsApp onclick -->', '<img src = ""https://image.freepik.com/free-vector/whatsapp-icon-design_23-2147900927.jpg"" height=""50"" size=""50"" onclick=""openWhatsApp()"">', '</body>', '</html>', '<html>', '<head>', '<title> Add a WhatsApp sharing link on a website </title>', '<style>', '/* To hide the button on large screens */', '@media screen and (min-width: 1000px) {', '.mobileShow {', 'display: none', '</style>', '</head>', '<body>', '<h3>Whatsapp sharing</h3>', '<input class=""mobileShow"" type=""text"" name=""message"">', '<button onclick=""share()"" class=""mobileShow""> Share to WhatsApp </button>', '<script src=', '""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.js"">', '</script>', '<script>', 'function share() {', 'var message = $(""input[name=message]"").val();', 'window.open( ""whatsapp://send?text="" + message, \'_blank\');', '</script>', '</body>', '</html>']",[],[],"[""|||Create WhatsApp Sharing Link|||Create WhatsApp Sharing button|||Create WhatsApp Sharing icon using image||||||In this example, we have taken the image for WhatsApp icon direct from the internet. So, we have provided the link of the WhatsApp image icon from the internet and also set its height and width.|||We are sharing a youtube video link of Javatpoint rather then the text message. For this, you don't need to do something special. You just have to provide the link of the video at the place of text with the WhatsApp link.|||""]"
166,['JavaScript Execution Context'],['The topic is very much important for those who are JavaScript developers or want to have a deep knowledge of the working process of JavaScript.'],"['https://www.javatpoint.com/javascript-queryselector', 'https://www.javatpoint.com/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-queryselector', 'https://www.javatpoint.com/how-to-add-a-whatsapp-share-button-in-a-website-using-javascript', 'https://www.javatpoint.com/javascript-queryselector']","['https://static.javatpoint.com/javascriptpages/images/javascript-execution-context.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-execution-context2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-execution-context3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-execution-context4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-execution-context5.png']",[],"['Global Execution Context', 'Functional Execution Context', 'Execution Stack', 'Creating an Execution Context', 'Global Execution Context Vs. Function Execution Context']","['Types of Execution Context', 'Eval Function Execution Context', 'Creation Phase', 'Execution Phase']",[],"['What actually is an Execution Context', 'The types of execution context in JavaScript are:', 'Begin to discuss each one by one:', 'The execution stack is also known as Call Stack.', ""In order to understand the working process of the execution stack, let's consider an example code given below:"", 'It is an example code to understand its working.', 'Explanation:', 'In this way, the execution of the execution stack is performed.', 'An execution context is created first, and then it is managed. The creation of the execution context is performed in two approaches:', ""Let's try to understand the creation of the Activation object with the help of the below example:"", 'Example Code 1', 'Explanation:', 'So, in this way, the creation phase works.', 'Example Code 2', 'Now, in the execution phase, the following steps will be performed as described per line:', 'So, in this way, the working of both the creation phase, as well as the execution phase, takes place.', 'GEC object after the creation phase stage', ""Now, let's see the GEC object after the execution phase."", 'GEC object after Execution Phase', 'In our example code 2:', 'z execution object after the compilation phase', 'Below is the code for the FEC object after completing the compilation phase:', 'The code after the compilation phase of the example code 2 is performed as described below:', 'Execution Context Object of z after the execution phase', 'In example code 2:', 'So, this is how the execution context is created and is defined.', 'There are the following differences between the two:']","['With the above introduction, one should understand that the Global Execution Context is only one in every code because the JS engine is single-threaded, and thus, only one global environment is possible for executing the JavaScript code.', 'Any JS code that gets executed within the eval function creates and holds its own execution context. However, the eval function is not used by the JavaScript developers, but it is a part of the Execution Context.', 'Now, the JS engine creates an executionContextObj for example code 1 after the invocation of test () and before executing its code. It can be seen in the below code:', 'As you can see above, no code is left, the JS engine moves to the execution phase for scanning the function once more. The JS engine updates the value of the variable then execute the code in the following way as described below per line:']","[""Here, in this section, we will learn and understand the execution context of JavaScript, where we will discuss what it is, its types, execution stack, how the execution context is created and all about the execution phase. We will discuss each point one by one. Let's begin with the introductory part first."", 'Execution context is the concept for describing the internal working of a code. In JavaScript, the environment that enables the JavaScript code to get executed is what we call JavaScript Execution Context. It is the execution context that decides which code section has access to the functions, variables, and objects used in the code. During the execution context, the specific code gets parsed line by line then the variables and functions are stored in the memory. An execution context is similar to a container that stores variables, and the code gets evaluated and then executed. Thus, it is the execution context that provides an environment for the specific code to get executed.', ""GEC / Global Execution Context is also called the base/default execution. Any JavaScript code which does not reside in any function will be present in the global execution context. The reason behind its name 'default execution context' where the code begins its execution when the file first loads in the web browser. GEC performs the two following tasks:"", 'FEC or Functional Execution Code is that type of context which is created by the JavaScript engine when any function call is found. Every function has its own execution context, and thus unlike GEC, the FEC can be more than one. Also, FEC can access the entire code of the GEC, but it is not possible for GEC to access all the code of the FEC. During the GEC code execution, a function call is initiated, and when found by the JS engine, it creates a new FEC for that specific function.', ""The stack is the data structure that stores the values in the form of LIFO (last in, first out). Similarly, an execution stack is a stack that carries track of all the execution contexts developed during the script life cycle. A JavaScript developer must be known of the fact that JavaScript works as single-threaded where it is capable of executing a single task in the web browser at a time. Thus, for other actions, functions, and events, a stack is created and is known as the Execution Stack. At the bottom of the execution stack, GEC resides, and it is present by default in the stack. So, when beginning a JS code execution (i.e., during GEC execution), when any function is present in the code, and the JS engine searches it, it instantly creates a function execution context (FEC) for that function and pushes it on the top of the execution context stack. The particular execution context which is available at the top of the execution context stack will always get executed by the JS engine first. As soon as the execution of all the code is done, the JS engine pops out the function's execution context and then moves towards the next and so on. Generally, when the script loads in the browser, the first element will be the global execution context. But when a function execution is detected, the execution context is created and gets virtually placed on the top of the GEC. The process continues until the execution of the whole code gets completed."", 'The creation phase is the one in which the JS engine invokes a function but does not begin its execution. In this phase, the JS engine begins its compilation phase and scans the particular function code for compiling it but does not execute the code. Creation of the Execution Context is the responsibility of the JavaScript engine, and it creates it by performing the following described tasks:', 'Task 1: Creation of the Activation object/Variable Object: One of the special object of JavaScript that is like a container that holds all the information of the function arguments, variables as well as inner functions declaration. With this, it does not have the dunder proto property.', 'Task 2: Creation of the scope chain: After completing task 1, the JS engine initializes the scope chain. A scope chain is a list that has all the variables objects within which the current function exists. A scope chain also has the variable object of the GEC and carries the current function variable object.', 'The Activation object contains the argument object that further contains the details about the arguments of the function. It carries the property name for every function and variables that are declared within the current function. In our case, the Activation object, for example, code 1will be:', ""The execution phase is the next phase after finishing the creation phase. An execution phase is the one where the JS engines scan through the function in the code once again, i.e., one more time for updating the variable object with the values of the variables and then run the code. Let' see the execution stage or the complete code for the example which we have discussed above:"", 'Firstly, the above code gets loaded in the browser. After that, the JS engine begins its compilation phase in order to create the execution objects. In the compilation phase, the JS engine manages and handles the declarations only and does not care about the values.', 'In the above explanation, we saw how the execution stack is created via the execution and creation phase for example code 2. However, we should take a deep understanding of the working of the GEC and FEC for the above-mentioned code only. Consider the below GEC object code for example code 2:']","[""let x = 'Hello World!';"", 'function a() {', ""console.log('It is the first function');"", 'function b() {', ""console.log('It is the second function');"", ""console.log('It is GEC);"", 'function test (x, y) {', 'var z = 10;', 'var w = 5;', 'w = function() {', 'return x - y;', 'test(12, 3);', 'executionContextObj = {', 'variableObject: {}, // contains all variables, inner functions, arguments details of test()', 'scopechain: [], // contains list of all the scopes for test()', 'this // Value of this', 'variableObject = {', 'argumentObject : {', '0: x,', '1: y,', 'length: 2', 'x: 3,', 'z: undefined,', 'w: undefined so the pointer points to the function definition of w', 'x = 10;', 'var y = 20;', 'z = function(val) {', 'var p = 5;', 'var q= 10;', 'x = 30', 'function test () {', 'var r = 2;', 'test();', 'globalExecutionContextObj = {', 'activationbj: {', 'argumentObj : {', 'length:0', 'y: undefined,', 'z: Pointer to the function definition', 'scopeChain: [Global execution context variable object],', 'this: value of this', 'globalExecutionContextObj = {', 'activationbj: {', 'argumentObj : {', 'length:0', '},', 'y: 20,', 'z: Pointer to the function definition,', 'x: 10', 'scopeChain: [Global execution context variable object],', 'this: value of this', 'zExecutionContextObj = {', 'activationbj: {', 'argumentObj : {', '0: val,', 'length:1', '},', 'val: 3,', 'p: undefined,', 'q: undefined', 'test: Pointer to the function definition,', 'scopeChain: [z variable object, Global execution context variable object],', 'this: value of this', 'zExecutionContextObj = {', 'activationbj: {', 'argumentObj : {', '0: val,', 'length:1', '},', 'val: 3,', 'p: 5,', 'q: 10', 'test: Pointer to the function definition,', 'scopeChain: [z variable object, Global execution context variable object],', 'this: value of this']",[],"[""Global Execution Context|||Function Execution Context&&&It creates a global scope.|||It creates an argument object.&&&It creates an object known as 'this.'|||It points to the Window object by default.&&&It set up memory space for the functions and variables that are globally defined.|||It set up memory space for functions and variables that are defined within the function only.&&&The GEC, while setting any function declaration in the memory, assigns a default value as 'undefined' to the variable declaration.|||The FEC, while setting any function declaration in the memory, assigns a default value as 'undefined' to the variable declaration. With this, it creates its own Execution Stack also.""]","[""|||Global Execution Context/GEC|||Functional Execution Context/FEC|||Eval Execution Context||||||Firstly, it creates a global object where it is for Node.js and Window object for the browsers.|||Secondly, reference the Windows object to 'this' keyword.|||Create a memory heap in order to store variables and function references.|||Then it stores all the functions declarations in the memory heap area and the variables in the GEC with initial values as 'undefined'.||||||Firstly, all the code is loaded into the browser.|||After it, the JS engine pushes/inserts the GEC at the top of the execution stack.||||||As soon as the JS engine encounters the first function call, it set up a new FEC for it and adds it to the top of the current execution stack.||||||Then we can see that it is the invocation of the second function within the first function. Therefore JS engine setup a new FEC for the second function and insert it to the top of the stack.||||||When the second function is completed, the execution function is popped out of the stack, and controls move to the next execution context present in the stack, which is the first function execution context only.||||||When the first function gets executed completely, the execution stack of the first function popped out from the stack. Hence, the control reaches back to the GEC of the code.||||||At last, when the execution of the entire code gets completed, the JS engine removes the GEC from the current stack.||||||Determining 'this' value: Once the scope chain is created, the value of 'this' is initialized by the JS engine.||||||The JS engine has created the argument object, as you can see in the above code. Also, there exists a length property that contains the total number of arguments in the function. It is having only the property name and not its value.|||After this, for each variable in the function whose value is initialized with 'undefined', the JS engine setups a property on the activation or variable object. These arguments are also variables in the function, so are also a property of the argument object.|||If there is a situation where the variable is already present as the argument object property, then the JS engine moves on without taking any further action.|||When the JS engine finds a function definition within the current function, by using the name of the function, it creates a new property. As discussed above, function definitions get stored in heap memory. The function name property points to its definition in the heap memory.|||So, we can see in the above code that w is a variable. Therefore, it will get the value of 'undefined'. However, when a function with the same name is found, overriding will take place, and its value will point it to the definition of function w, which is stored in the heap memory. After it, the JS engine setup the scope chain and determine the value of 'this'.||||||Firstly, the JS engine finds that no property is there having name x in the variable object, so it adds this property in the GEC and initializes its value as 10.|||Next, the JS engine finds that a property with the name y in the variable object is present and thus updates its value to 20.|||At last, the JS engine does not take any action because it is a function declaration.||||||Now, as z () gets called again, the JS engine again enters the compilation phase. Thus, it scans the function for creating the execution context object of it.|||The function z() has 'val' as its argument, so the JS engine will add 'val' in the argument object of the z() execution context object. Then it creates a property via the name 'val'.|||Next, it checks and finds if p is a property in the activation object of the function or not. Hence, it found that there is no such property exists, so it will add p as property then initialize its value to 'undefined'.|||Next, it is the duty of the JS engine to see if q is a property in the activation object of the function. Hence, it found that there is no such property exists, so it will add q as property then initialize its value to 'undefined'.|||Then, the JS engine proceeds to the next line as x = 30 is not a declaration.|||Then, the JS engine encounters a test () function declaration, and for it, it stores the function definition in the heap memory area. Then, it set up a property with the name 'test' that points to the location where function definition is stored. The JS engine does not focus on what is the value stored in it.||||||It is the test () function call and not a declaration because of which the JS engine will not do anything.|||Now, the JS engine will proceed to the execution phase for executing the z () function by scanning it.|||In the execution phase, the variables p and q get the 5 and 10 as their values.|||Next, the JS engine finds that x is not a declaration and any property on z execution context object, so it moves to the GEC of the code via the scope chain and sees in the GEC any property with the name x exists or not. If not found, the JS engine will create a new property with the name x and will initialize it. In example code 2, the JS engine finds a property with the name x that already exists on the GEC object, so it updates its value to 30 from 10. One should note that the JS engine proceeds to the GEC in this case only, i.e., when it finds a variable in the execution phase which is not a property on the current execution context object|||After it, the JS engine sets up a test property and then will point to its heap location.||||||In example code 2, once again, the JS engine moves to the compilation phase for creating the execution context object for 'test'.|||The test execution context object is having access to every function defined on z, on variables, and is also in the global scope using the scope chain.|||In the same way, z has access to every variable and object in the global scope. However, it cannot access the test variables and objects.|||The GEC of the code is not having any access to z or test variables or objects.|||&&&|||Variable x is assigned with 10, which makes the JS engine not to think of it as a function declaration or variable declaration and moves further, i.e., to the third line. In the third line, it does not do anything as it is not any declaration.|||Next, the JS engine setup a property with 'z' (variable name)in the GEC object because z is a variable name and also in global declaration scope and will initialize it with an 'undefined' value.|||Moving to the fifth line of the code, a function declaration is encountered by the JS engine. The JS engine will store the function definition in the heap memory and, after that, will set up a property that will point to that specific heap memory location. It does not matter what is stored in the function, it just points to its location.|||As we can see in the last line, it is not any declaration of the code. Hence, the JS engine will not perform any action.|||""]"
167,['JavaScript querySelector'],['The querySelector is a JavaScript method that plays a vital role in the searching of elements.'],"['https://www.javatpoint.com/shallow-copy-in-javascript', 'https://www.javatpoint.com/javascript-execution-context', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/xml-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-selector', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-pseudo-elements', 'https://www.javatpoint.com/shallow-copy-in-javascript', 'https://www.javatpoint.com/javascript-execution-context', 'https://www.javatpoint.com/shallow-copy-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-queryselector.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-queryselector2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-queryselector3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-queryselector4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-queryselector5.png']",[],"['Introducing JavaScript querySelector () method', 'JavaScript querySelectorAll () Method']","['How does the querySelector () method perform the searching', 'Implementing querySelector () Example', 'Few CSS Selectors', 'Example']",[],"['The querySelector () method is a method of document interface and so it has such syntax.', ""It has one parameter, 'selectors', which is a DOM string and has one or more valid CSS selectors."", 'Return Type', ""It may return 'null' if no match is found, and if the first element matches the specified CSS selectors (if any), it will return that element."", ""However, if there is not any valid CSS selector, it will throw a 'SyntaxError' exception."", 'Below is an example code that will make us understand the working of querySelector () method:', 'The output of the above code is shown below:', 'Code Explanation', 'In this way, the querySelector () method gets executed, and you can also try and use the querySelector () method for other CSS selectors also.', 'Class Selector', 'ID Selector', 'Use (#) for using the ID selector of CSS.', 'The output will be as shown below:', 'Attribute Selector', ""The output of the above code will be 'null' because, in our code, we have not used any such attribute as shown below:"", 'So, there are various CSS selectors and can be used if one has complete knowledge and understanding of the CSS selectors and its types.', 'In the syntax, it contains selectors as an argument which holds one or more selectors with which we may match the values.', 'If the matching list or selector is found, it will return the specified value of those. Else it will return an empty nodeList if no match is found.', 'Also, in case the specified CSS selectors have CSS pseudo-element, it will return an empty list.', 'Syntax Error', ""If there is a syntax error, it will return a syntax error exception that the specified selector's string is not valid."", 'Code Explanation']","['In this section, we will understand and discuss the querySelector () method, its use and also look over an example to understand the concept of the querySelector () method practically.', 'Now, before looking at an example implementation, we should know about various types of CSS selectors. If you are not aware, visit our https://www.javatpoint.com/css-selector section of the CSS tutorial.', 'So, we will now implement an example under which we will cover a CSS selector and retain its first element value by using the querySelector () method.', ""Let's also see and use the same example for other CSS selectors also. Just replace the element selector code with these selector codes described below:"", ""Below is the same example we have used for explaining the querySelector () method, let's look at the same example to understand the difference between both the methods:""]","['An element interface method that enables us to search and return the first element within the document. It finds that element that matches with any of the specified CSS selectors or group of selectors. However, if no matching element is found, it returns null. The querySelector () method is the method of the Document interface only. A document interface is an interface that describes the common methods as well as the properties for any html, XML, or any other kind of document.', ""We know that there are different types of searches that can be used for searching elements. However, the querySelector () method uses depth-first pre-order traversal of the nodes of the document. In it, the traversal starts with the first element in the document's markup and then traverse through the sequential nodes by order of the number of child nodes."", 'We need to use the (.) operator with the class name for finding the class first element. In the output, you will see that the querySelector () searches from the starting of the code and the search get completed on the h1 class element and so its return has a specified value as you can see below:', 'The querySelector () method of JavaScript is used for selecting only the first element from the code. But what in case we want to retain more than one CSS selector value from the code. So, for such a case, we use another method of the Document interface, which is known as the querySelectorAll () method. The querySelectorAll () method is a method that is used to return all the matching values of the specified CSS selector or group of a CSS selector.', 'Now, you can see the difference between the code that in the first example, we used the querySelector () method and it outputted only the first matching selector value. But, when you observe the output of this second example, you will see that it has returned all the matching values of the specified selectors or group of selectors. The output of the above code is shown below:', 'So, in the same way, we can use the querySelectorAll () method for the various other types of CSS selectors also, and it will return all the matching values of the selectors which are specified as its argument. In order to implement the method, replace the querySelector () method with querySelectorAll () method for various selectors, and the method will find the match and will return atleast one matching value of the specified element.']","['element = document.querySelector(selectors);', '<meta charset=""UTF-8"">', '<title> class=""colors"">Colors</title>', '</head>', '<h1> JavaScript Query Selector</h1>', '<h1 class=""myClass"">Class 1</h1>', '<p class=""myClass""> Myclass</p>', '<div id=""firstid"">', '<p> It is the div p paragraph</p>', '<p class=""pclass""> div p class</p>', '<p id=""myid""> It is p id</p>', '<div id=""divid""> It is div id</div>', '<script> <script>', 'var e=document.querySelector(""p"");', 'console.log(e);', '</script>', '</body>', '</html>', 'var e=document.querySelector("".myClass"");', 'console.log(e);', 'var e=document.querySelector(""#myid"");', 'console.log(e);', ""var e=document.querySelector('[target]');"", 'console.log (e);', 'elementList = parentNode . querySelectorAll (selectors);', '<meta charset=""UTF-8"">', '<title> class=""colors"">Colors</title>', '</head>', '<h1> JavaScript Query Selector</h1>', '<h1 class=""myClass"">Class 1</h1>', '<p class=""myClass""> Myclass</p>', '<div id=""firstid"">', '<p> It is the div p paragraph</p>', '<p class=""pclass""> div p class</p>', '<p id=""myid""> It is p id</p>', '<div id=""divid""> It is div id</div>', '<script>', 'var e = document.querySelectorAll (""p"");', 'console.log(e);', '</script>', '</body>', '</html>']",[],[],"['|||The above code is a combination of html and JavaScript.|||We have implemented different CSS selectors in the code.|||In the JavaScript section, we have used a querySelector () and invoked an element selector of CSS.|||So, the querySelector () method now moves to the code for traversing it using the Depth-first pre-order method and returns the first element selector as it finds it.||||||The above code is a combination of html and JavaScript.|||We have implemented different CSS selectors in the code.|||In the JavaScript section, we have used a querySelectorAll () method and invoked an element selector of CSS.|||So, the querySelectorAll () method now moves to the code for traversing it using the Depth-first pre-order method and returns all the matching element values that are specified as querySlectorAll () method parameters.|||']"
168,['Shallow Copy in JavaScript'],"[""A bit-wise copy of an object is known as 'Shallow Copy'. When there is an original object, a new object is created where the same values as in the original object are copied.""]","['https://www.javatpoint.com/how-to-toggle-password-visibility-in-javascript', 'https://www.javatpoint.com/javascript-queryselector', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/how-to-toggle-password-visibility-in-javascript', 'https://www.javatpoint.com/javascript-queryselector', 'https://www.javatpoint.com/how-to-toggle-password-visibility-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/shallow-copy-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/shallow-copy-in-javascript2.png']",[],"['What is Shallow Copy', 'Example Code Implementation']","['Data Types in JavaScript', 'Example of Shallow Copy', 'Code Explanation:']",[],"['Basically, there are two types of Data types given below:', 'We will understand its role in the shallow copy.', 'Now, we will try to understand Shallow copy with the help of an example.', 'You can see in the below diagram that represents the example well:', 'Below we have mentioned a code example where we have created a shallow copy for the details of the student:', 'The output of the above code is shown below:', 'Thus, in this way, the shallow copy of one object can be created and used for assigning different values for the object properties.']","['Generally, a shallow copy is easy and simple to use because no object is created, only the reference address is copied. Not only in the case of arrays, but the same applies to the arrays too.', 'Consider two objects, obj1 and obj2, where obj2 reference to obj1. Hence, obj2 will copy the same memory address as the obj1, which means both the objects will have the same memory address and will point to the same address only.']","['To know about Shallow copy, one should know about the types of data types. In this section, we will take a brief introduction of data types and then understand the Shallow copy in JavaScript. We will also look at an example that will tell how shallow copy works.', ""The shallow copy of an object refers to the reference location/address of the original object. In case any field of the object reference to the other objects, it copies only the reference address (i.e., the memory address) of the object and no new object is created. This is how a shallow copy is different from a deep copy. The shallow copy replicates the object's top-level properties, but the nested object is shared between the original and the copied one. A shallow copy only copies the collection structure and not the values. It means two collections share the elements of the original collection."", ""Thus, in the case of primitive data types, when we create a copy of the primitive data type variable, the value is copied to a new memory address to which the new variable points. So, whenever we make a copy, it will create a new memory location and will be a real copy of the variable. Thus, if we execute c = a, then a copy of 'a' is created. So, if we try to assign a new value to c, the value of c will change, but it will not affect the value stored in variable a. It is because once initiated, values are stored for once."", 'In the case of reference data types, it stores the memory address of the object (i.e., location where the object is stored). Thus, copying of the values works well in the reference data types. So, both shallow and deep copies are types of reference data types only.']","['<script>', 'let student = {', ""name: 'Michael',"", ""department: 'Computer Science',"", ""enroll_no: '1829939',"", 'permanent_address: {', ""house_no: '200',"", ""locality: 'Simi Valley',"", ""city: 'New York',"", ""country: 'USA'"", 'console.log(""Before applying Shallow Copy"");', 'console.log(student);', 'let createcopy = Object.assign({}, student);', ""createcopy.name = 'Abraham Smith';"", ""createcopy.enroll_no = '1829887';"", ""createcopy.permanent_address.house_no = '321';"", ""createcopy.permanent_address.locality = 'Santa Maria';"", ""createcopy.permanent_address.city = 'California';"", 'console.log(""After applying Shallow Copy"");', 'console.log(createcopy);', '</script>']",[],[],"[""|||Primitive Data types: It includes Boolean, byte, char, short, long, double and int.|||Reference Data Types: It includes array and object.||||||In the above code, we have created an object 'student' for which we have initialized some detailed entities.|||Then, before applying the shallow copy, we got the values on the console that has been initialized.|||Next, we have initialized another object, 'createcopy', for creating the shallow copy of the 'student' object'. Then assigned the 'student' object to 'createcopy' using Object.assign. It means both 'student' (obj1) and 'createcopy' (obj2) objects will point to the same memory address, as you can understand from the above shown image.|||Then, we have set different values for the 'createcopy' object from the 'student' object entities i.e., name, enroll_no, permanent_address.|||Finally, we have console log the obj2, i.e., 'createcopy' object, and then we can see in the output that after modifying, we got the different assignment of the values for the same entities.|||Also, we should notice that only those entities values got changed, which we have assigned again for the 'createcopy' object. Rest entities values are the same i.e., 'department' and 'country'.|||""]"
169,['How to Toggle Password Visibility in JavaScript'],"['If you know how to set a password in a JavaScript code, it becomes easy to understand how we can toggle the visibility of the password.']","['https://www.javatpoint.com/removing-duplicate-from-arrays-in-javascript', 'https://www.javatpoint.com/shallow-copy-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/removing-duplicate-from-arrays-in-javascript', 'https://www.javatpoint.com/shallow-copy-in-javascript', 'https://www.javatpoint.com/removing-duplicate-from-arrays-in-javascript']",['https://static.javatpoint.com/javascriptpages/images/how-to-toggle-password-visibility-in-javascript.png'],[],"['Steps to Toggle the Password Visibility', 'Toggling the Password Visibility in JavaScript']",['In the code:'],[],"['Here, in this section, we will learn how we can toggle the visibility of the password in JavaScript by implementing an example to do so.', 'In order to toggle the visibility of the password, one needs to follow the below-described steps:', 'Step 1: Create an input element with a password field that will take input in the password form.', 'Step 2: Add an icon within the input element on which the user can click to toggle the visibility of the password.', 'Step 4: So, when the user unclicks the icon, the actual password text again gets toggled in the password form.', 'The user needs to include these described steps in the code and can gain the toggling of password visibility.', ""Now, let's see an example code that will help us to better understand the steps."", 'The below example code shows the implementation of the steps required to toggle the visibility of the password:', 'The output of the above code is shown below:', 'Therefore, using this method, we can toggle the visibility of the password.']",[],"[""When we use a password field in the code, it might be well known that it is visible as '*', which is a security input for the user described password code. So, when the user inputs the password in the password field, it gets input in the form of '*' characters hiding the actual characters behind it. But sometimes, it does happen that the admin sometimes mistypes the password and assume that the password is correctly input. But after the unsuccessful login attempt, the admin wants to see the password string so that he can understand the mistake he is making and won't repeat it. For knowing the actual password string, he will move to the database to see the password. For such a reason, the concept of toggling the password visibility can help the admin see whether the admin has correctly entered the password or not there only, and there will be no need to move to the database and search for the password. We need to add a button that will let the user toggle the visibility of the password."", 'Step 3: Attach an event handler on making a click on the icon where if the user clicks on the icon, it should toggle the type attribute of the password field between text and password. Thus, when the type is changed between password to text, the actual text entered by the user will be visible.']","['<!DOCTYPE html>', '<title>JS Toggle Password Visibility</title>', '</head>', 'Enter Password: <input type=""password"" value=""javatpoint"" id=""pswrd"">', '<input type=""checkbox"" onclick=""toggleVisibility()""/>Show Password</br>', '<script>', 'function toggleVisibility() {', 'var getPasword = document.getElementById(""pswrd"");', 'if (getPasword.type === ""password"") {', 'getPasword.type = ""text"";', '} else {', 'getPasword.type = ""password"";', '</script>', '</body>', '</html>']",[],[],"['|||The above code is a combination of JavaScript and HTML.|||We have created an input element for entering password value and given a password value.|||Next, we have created a checkbox on which we have invoked the JavaScript function.|||When the user clicks on the checkbox, the password value becomes visible.|||When the user unclicks the checkbox, the actual password again gets hidden.|||']"
170,['Removing Duplicate From Arrays'],"['As we know that arrays are helpful in storing data in a sequence in the memory. But sometimes, there may be chances that we may store the same value or duplicate values in an array. Thus, we need to remove such duplicate values from the array. So, there are certain methods through which we can remove the elements from the array.']","['https://www.javatpoint.com/javascript-insertbefore', 'https://www.javatpoint.com/how-to-toggle-password-visibility-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-insertbefore', 'https://www.javatpoint.com/how-to-toggle-password-visibility-in-javascript', 'https://www.javatpoint.com/javascript-insertbefore']","['https://static.javatpoint.com/javascriptpages/images/removing-duplicate-from-arrays-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/removing-duplicate-from-arrays-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/removing-duplicate-from-arrays-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/removing-duplicate-from-arrays-in-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/removing-duplicate-from-arrays-in-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/removing-duplicate-from-arrays-in-javascript6.png']",[],"['Using the filter () method', 'Using Set () method', 'Using the reduce () method', 'Using forEach and includes () method', 'Using indexOf () and push () methods']",[],[],"['So, in this section, we will discuss those methods and will understand it with the help of the respective examples.', ""So, let's begin to discuss those methods one by one."", ""Let's implement an example where we will filter out the array values using the filter () method. The example is shown below:"", 'Below is a code implementation for reducing the elements from the array:', 'Below is an example code that will help you understand the working of these methods to remove duplicate values from an array:', 'Below is an example code that will help you understand the working of indexOf () method with push () method:', 'So, using these described methods we can filter and remove out the duplicate elements present in the array.', 'So, for removing duplicate objects from the given array, we can use the below code which is shown below:', 'So, these are some of the methods that can be used by the developers while working on some projects using JavaScript.']","['The filter () method is used for fetching the duplicate values from the array. The method creates a new array of elements in which we pass the specific condition, and if any such element returns false or fails out, it will not be a filtered array.', 'The Set () method is another method where a new Set is created or we can say a collection is created that stores unique values from the defined array. Below is the basic code implementation for the Set () method:', 'The reduce () method is the type of method that reduce the elements of the array and then combine those values/elements of the array into a final array which is based on our specified reducer function.', 'The includes () method is the one that returns false, if an element is not present in the given array and returns true if the element is present in the array. The forEach is the loop that will help us to iterate over the values present in the array.', 'The indexOf () method and push () method can be used together in order to remove duplicate elements from the array and fetch out all the unqiue elements from it.', 'But if we need to remove duplicate objects from an array, we need to use the property name of the array. Similar to elements, these can be objects also which might be present duplicate in the array.']","['Generally, there are developers who need to make their code more accurate as well as optimized, and for such tasks, it is really needed to remove the duplicate elements from the array if any such element is present. Thus, there are certain methods that can help to remove duplicate values from the arrays.', 'Generally, such type of duplicate value elimination is required when we are working on any project especially. We need such method when we are a developer because every customer needs a perfect software or application that is well optimized, customized, friendly, and compatible so that the value of the organization may increase.']","['<script>', 'var array=[""x"",""w"",""d"",""w"",""x""];', 'function filterDuplicates(new_array){', 'return new_array.filter((value,index) =>new_array.indexOf(value)===index);', 'console.log(filterDuplicates(array));', '</script>', '<script>', 'var array=[""a"",""a"",""d"",""c"",""d""];', 'function setDuplicates(new_array){', 'return [...new Set(new_array)]', 'console.log(setDuplicates(array));', '</script>', '<script>', 'var array=[""you"",""me"",""I"",""you"",""me"",""I""];', 'function reduceDuplicates(new_array){', 'let collect=new_array.reduce(function (a,b){', 'if(a.indexOf(b)<0) a.push(b);', 'return a;', 'return collect;', 'console.log(reduceDuplicates(array));', '</script>', '<script>', 'var array=[""John"",""Merry"",""Ada"",""Merry"",""Michael""];', 'function duplicates(new_array){', 'let collect=[];', 'new_array.forEach(value=>{', 'if(!collect.includes(value))', 'collect.push(value)', 'return collect;', 'console.log(duplicates(array));', '</script>', '<script>', 'var array = [""red"",""yellow"",""blue"",""black"",""blue""];', 'function duplicates(new_array){', 'var collect = [];', 'for(i=0; i < new_array.length; i++){', 'if(collect.indexOf(new_array[i]) === -1) {', 'collect.push(new_array[i]);', '}', '}', 'return collect;', 'console.log(duplicates(array));', '</script>', '<script>', 'function removeDuplicates(new_array){', 'var collect = [];', 'for(var value of new_array){', 'if(collect.indexOf(value) === -1){', 'collect.push(value);', '}', '}', 'return collect;', 'var colors = [""green"",""black"",""black""];', 'console.log(removeDuplicates(colors));', '</script>']",[],[],[]
171,['JavaScript insertBefore'],['The JavaScript insertBefore () is a method that is used for inserting a child node before another node of a specified parent node.'],"['https://www.javatpoint.com/javascript-select-option', 'https://www.javatpoint.com/removing-duplicate-from-arrays-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-lists', 'https://www.javatpoint.com/javascript-select-option', 'https://www.javatpoint.com/removing-duplicate-from-arrays-in-javascript', 'https://www.javatpoint.com/javascript-select-option']",['https://static.javatpoint.com/javascriptpages/images/javascript-insertbefore.png'],[],"['JS insertBefore() method', 'How insertBefore() function works', 'Example of insertBefore() Method']",['In the above code:'],[],"['If we want to add a node (child node) before another node of a parent node, the insertBefore() method is used.', 'The method follows the below steps:', 'Below is an example code that will help us to understand the working of insertBefore() method:', 'The output of the above code is shown below:', 'The above code is html and JavaScript based code:', 'First, we have created an unordered list with an id =""weeks"" given to it. The list contains some items enclosed within the <li> element.', 'So, in this way, we can insert a child node in the specified parent node and insert the new node before the existing child node.']","['In this section, we will learn about the insertBefore () method and look at an example to understand the implementation of the insertBefore () method.']","[""In the above syntax, the parentNode is the specified parent node where the new child node will be inserted. Here, newNode signifies the node that is going to be inserted before another node and the existingNode signifies the node before which the new child node will get inserted. In case, if the existing node value is null that is it does not exist, the new node gets inserted at the end of the parentNode's child nodes.""]","['parentNode.insertBefore(newNode, existingNode);', '<meta charset=""utf-8"">', '<title>JavaScript insertBefore() method</title>', '</head>', '<ul id=""weeks"">', '<li>Sunday</li>', '<li>Monday</li>', '<li>Wednesday</li>', '<li>Thursday</li>', '<li>Friday</li>', '<li>Saturday</li>', '</ul>', '<script>', ""let x = document.getElementById('weeks');"", ""let add = document.createElement('li');"", ""add.textContent = 'Tuesday';"", 'weeks.insertBefore(add, x.childNodes[4]);', '</script>', '</body>', '</html>']",[],[],"['|||Firstly, the method searches for the specified parent node in the code.|||Then, it looks for the existing node value, whether found in the parent node.|||The method returns null if no existing node is found before which the user wish to insert a new node.|||Next, if the existing node is available in the specified parent node, the method inserts the new node before the existing node and returns the inserted child node.||||||In the <script> section, we have fetched the <ul> id initially, and then we have created a new child element which is to be added in the parent node. Here, the parent node is the <ul>, and the list items contained within it are its child elements. Also, this new node is the value of newNode|||Then we have provided a value as ""Tuesday"" to the created new node.|||Finally, we have used the insertBefore () method to find the specified parent node in the code and then searched for the specified existing child element whether present in the code within the parent node that is specified.|||Next, it successfully found the existing list item (child node) in the unordered list, so it puts the new child node value, i.e., the new list item, before the existing child node value.|||At last, the insertBefore () method will return the list item value, which has been placed as the newNode value.|||However, if we try and put a non-existing node value in the method, the method will again search for the value, but no such value will exist. Thus, it will return null.|||']"
172,['JavaScript Select Option'],['We will understand how to manage <select> option in JavaScript in this tutorial.'],"['https://www.javatpoint.com/get-and-set-scroll-position-of-an-element', 'https://www.javatpoint.com/javascript-insertbefore', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-select-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-queryselector', 'https://www.javatpoint.com/https://www.javatpoint.com/document-getElementById()-method', 'https://www.javatpoint.com/https://www.javatpoint.com/html-option-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/get-and-set-scroll-position-of-an-element', 'https://www.javatpoint.com/javascript-insertbefore', 'https://www.javatpoint.com/get-and-set-scroll-position-of-an-element']","['https://static.javatpoint.com/javascriptpages/images/javascript-select-option.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-select-option2.png']",[],"['HTML Select Option', 'HTMLSelectElement type', 'selectedIndex property', 'value property', 'HTMLOptionElement type', 'To get Selected Option using for loop', 'Summary']",[],[],"['For example:', 'The <select> option permits us to choose one option at a time which is mentioned above.', 'If we wish more than one selections, we can include <select>attribute to <multiple> elements below:', 'We use the HTMLSelectElement type for interacting with <select>option in JavaScript.', 'The HTMLSelectElement type contains the following helpful attributes:', 'We apply the DOM API like querySelector() or getElementById().', 'The example indicates how to obtain the selected option index which is mentioned below:', 'How it works:', ""The <select> element's value property relies on the <option> component and multiple attribute of its HTML:"", 'Consider the below example:', 'In this above example:', 'The HTMLOptionElement type illustrates the <option> element in JavaScript.', 'This type contains the following properties:', ""Index- The option's index within the group of options."", 'Selected- It returns a true value if the option is chosen. We set the selected property true for selecting an option.', 'Text- It returns the text of the option.', 'Value- It returns the value attribute of HTML.', 'The <select> component contains an option attribute that permits us for accessing the collection options:', 'For example, for accessing the value and text of the second option, we use the below:', 'For getting a selected option of the <select> component along with an individual selection, we use the below code:', 'After that, we can access the value and text of a selected option by value and text properties:', 'When the <select> component permits more than one selections, we can use a selected attribute for determining which option is selected:', 'In the example, the sb.option is the array-like object. Hence, it does not contain the filter() method same as the Array object.', 'For borrowing these types of methods through an array object, we use a call() method, the below gives the array of chosen options:', 'And for getting the text attribute of any option, we can chain the outcome of a filter() method along with a map() method like below:']","['A <select> option facilitate us the options list. It permits us to choose a single or more than one option. We use the <option> and <select> elements for forming a <select> option.', 'WE can use the for loop for iterating by the selected list options for determining which is chosen. A function could be described for returning the reference to a selected option or the value. The below gives the reference to a selected option:', 'This function gives a single chosen option, which is compatible for the select-one type of select list. The same function compatible for select-multiple type pf select lists could give more than one selected option.']",[],"['<select id=""color"">', '<option value=""1"">Red</option>', '<option value=""2"">Yellow</option>', '<option value=""3"">Green</option>', '<option value=""4"">Blue</option>', '</select>', '<select id=""color"" multiple>', '<option value=""1"">Red</option>', '<option value=""2"">Yellow</option>', '<option value=""3"">Green</option>', '<option value=""4"">Blue</option>', '</select>', '<!DOCTYPE html>', '<title>JavaScript Select Option Demo</title>', '<link href=""css/selectbox.css"" rel=""style sheet"">', '</head>', '<label for=""color"">Select a Color</label>', '<select id=""color"">', '<option value=""1"">Red</option>', '<option value=""2"">Yellow</option>', '<option value=""3"">Green</option>', '<option value=""4"">Blue</option>', '</select>', '<button id=""btn"">Get a Selected Index</button>', '</from>', '<script>', ""const btn = document.querySelector('#btn');"", ""const sb = document.querySelector('#color');"", 'btn.onclick = (event) =>', 'event.preventDefault();', 'alert(sb.selectedIndex);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<title>JavaScript Selected Value</title>', '<link href=""css/selectbox.css"" rel=""style sheet"">', '</head>', '<div id=""container"">', '<label for=""color"">Select a Color</label>', '<select id=""color"">', '<option value=""1"">Red</option>', '<option value=""2"">Yellow</option>', '<option value=""3"">Green</option>', '<option value=""4"">Blue</option>', '</select>', '<button id=""btn"">Get a Selected Value</button>', '</from>', '<script>', ""const btn = document.querySelector('#btn');"", ""const sb = document.querySelector('#color');"", 'btn.onclick = (event) =>', 'event.preventDefault();', 'alert(sb.value);', '</script>', '</body>', '</html>', 'selectBox.options', 'const text = selectBox.options[1].text;', 'const value = selectBox.options[1].value;', 'let selectOption = selectBox.options [selectBox.selectedIndex];', 'const selectedText = selectedOption.text;', 'const selectedValue = selectedOption.value;', '<!DOCTYPE html>', '<title>JavaScript Selected Box</title>', '<link href=""css/selectbox.css"" rel=""style sheet"">', '</head>', '<div id=""container"">', '<label for=""color"">Select one or more Colors:</label>', '<select id=""color"" multiple>', '<option value=""1"">Red</option>', '<option value=""2"">Yellow</option>', '<option value=""3"">Green</option>', '<option value=""4"">Blue</option>', '</select>', '<button id=""btn"">Get a Selected Colors</button>', '</form>', '<script>', ""const btn = document.querySelector('#btn');"", ""const sb = document.querySelector('#color');"", 'btn.onclick = (e) =>', 'e.preventDefault();', 'const selectValues = [].filter.call(sb.options, option => option.selected).map (option => option.text);', 'alert(selectedValues);', '</script>', '</body>', '</html>', '[].filter.call(sb.options, option => option.selected)', '.map(option => option.text);', 'function getSelectedOption(sel)', 'var opt;', 'for (var i= 0, len= sel.options.length; i']",[],[],"['|||selectedIndex- This attribute gives a zero-based selected options index. The selectedIndex will be -1 when no option is chosen. When the <select> option permits more than once selections, the selectedIndex gives the first option\'s value.|||value- The value attribute gives the value attribute of the initially selected option component if there is a single, otherwise, it will return the empty strings.|||multiple- The multiple attributes give true when the <select> component permits more than one selection. It is the same as the multiple attributes.||||||Initially, select the <select> and <button> components with the help of querySelector() method.|||After that, link the click event listener to this button and display the selected index with the help of alert() method if the button is pressed.||||||The value property of a select box will be an empty string when no option has been selected.|||The value property of a select box will be the value of the chosen option when an option has been chosen and contains the value attribute.|||The value property of a select box will be the text of the chosen option when an option has been chosen and contains no value attribute.|||The value property of a select box will be derived from the initial selected option regarding the past two rules when more than one options are chosen.||||||The value attribute of the <select> element is empty when we select the initial option.|||The value attribute of a select box will be Ember.js due to the chosen option contains no value attribute when we choose the last option.|||The value attribute will be ""1"" or ""2"" when we choose the third or second option.||||||The <select> component permits us for selecting one or more options. We can include the multiple property to the <select> component for enabling more than one selections.|||The HTMLOptionElement illustrates the <option> component. The selected attribute is true if an option is chosen. The selected value and selected text attributes return the value Add the text of the chosen option.|||The HTMLSelectElement illustrates the <select> component. We can use the value and selected index for getting the value and index of the chosen option.|||']"
173,['Get and Set Scroll Position of an Element'],"['In JavaScript, it is quite simple and easy to get and set the scroll position of an element of JS and especially when a user is building a user interface in the web browser. As when creating a user interface, we need to have an element that can be scrolled and for which it is required that you know its horizontal and vertical scrolling.']","['https://www.javatpoint.com/getting-child-elements-of-a-node-in-javascript', 'https://www.javatpoint.com/javascript-select-option', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/getting-child-elements-of-a-node-in-javascript', 'https://www.javatpoint.com/javascript-select-option', 'https://www.javatpoint.com/getting-child-elements-of-a-node-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/get-and-set-scroll-position-of-an-element.png', 'https://static.javatpoint.com/javascriptpages/images/get-and-set-scroll-position-of-an-element2.png']",[],['Implementation'],[],[],"[""Let's see an implementation that will help us understand the use of both element's properties."", ""Let's see two different example codes to know how we can get and set the scroll position of an element:"", 'Setting the scroll position of an element using scrollRight property:', 'Below is the given code:', 'The output of the above code is shown below:', 'Example 2: Implementing scrollTop property of an element', 'We can have the same example code to get and set the element scroll position vertically:', 'The output of the above code is shown below:', ""So, using both these element properties, we can know the element's position, and then we can set and get the scroll position of the element.""]","['In this section, we will discuss how we can get and set the scroll position of an element and what the properties are used for doing so. With this, we will also discuss and implement some examples that will help us to get the concept better.', ""For getting and setting the scroll position of a JS element, there are following two properties of the element we need to use. These properties will enable to know the element's horizontal as well as vertical scrolling:"", 'Other than this, the scrollTop and scrollLeft properties of the element are highly relative to the top left corner of the element, and as a result, by default, the value of the top left corner is (0, 0).', 'It is clear from the code that the scrollLeft property of the element gets and sets the element horizontally where on clicking on the button, the text gets scrolled in the horizontal direction. Similarly, the scrollRight property is used.', 'It is clear from the code that the scrollTop property of the element gets and sets the element vertically on sliding, and the text gets scrolled in the vertical direction.']",[],"['<div id=""id_1"">', '<div id=""value"">User click the button</div>', '<button id=""slide"" type=""button"">Slide it right</button>', '<style>', '#id_1 {', 'width: 150px;', 'height: 100px;', 'border: 1px solid #ccc;', 'overflow-x: scroll;', '#value {', 'width: 250px;', 'background-color: #ccc;', '</style>', '<script>', ""const button = document.getElementById('slide');"", 'button.onclick = function () {', ""document.getElementById('id_1').scrollLeft += 20;"", '</script>', '</html>', '<div id=""container"">', '<div id=""content"">Slide Vertically</div>', '<style>', '#container {', 'width: 100px;', 'height: 250px;', 'border: 1px solid #ccc;', 'overflow-x: auto;', '#content {', 'height: 300px;', 'background-color: #ccc;', '</style>', '<script>', ""document.getElementById('container').scrollTop;"", '</script>', '</html>']",[],[],"[""|||scrollTop: The property of an element that returns the number of pixels permitted to the element's content to scroll vertically.|||scrollLeft: The property of an element that returns the number of pixels permitted to the element's content to scroll horizontally.|||""]"
174,['Getting Child Elements of a Node in JavaScript'],['A parent node in JavaScript may have one or more child elements in JavaScript. Now how to fetch those child elements of a node in JavaScript is the question.'],"['https://www.javatpoint.com/javascript-scrollintoview', 'https://www.javatpoint.com/get-and-set-scroll-position-of-an-element', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=getting-child-elements-of-a-node-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/html-unordered-list', 'https://www.javatpoint.com/javascript-scrollintoview', 'https://www.javatpoint.com/get-and-set-scroll-position-of-an-element', 'https://www.javatpoint.com/javascript-scrollintoview']","['https://static.javatpoint.com/javascriptpages/images/getting-child-elements-of-a-node-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/getting-child-elements-of-a-node-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/getting-child-elements-of-a-node-in-javascript3.png']",[],[],"['Getting First Child Element of a Node', 'Getting the last child element of a node', 'Getting all the child elements of a node']",[],"['In this section, we will discuss and look at how we can get child elements of a node in JavaScript.', 'For accessing the child elements of a parent node in JavaScript, there are the following approaches we can use:', ""Let's discuss each approach one by one."", 'It is an example code that will help us to understand how to fetch the child elements of a particular node:', 'Now, using this example code, we will understand each approach that we have described above.', 'In order to get the first child element of a node, it is required to use the firstChild property of the element.', 'Points to be noted:', ""Let's see the below code example to understand how to use the firstChild property:"", 'We can see in the below output:', 'In order to get the last child element of a node, we need to use the lastChild property.', 'The lastChild variable will hold the value of the last child element present in the parent node.', 'Examine the below part of the example code:', 'We have the following output:', 'Point to be noted:', ""Let's see the syntax for both properties:"", 'The childNodes Property', 'The children Property', 'Look at the below example code section to see how to get all the child elements:', 'In the section of code, we are getting all the child elements of the parent node using the children property, as we can see in the below snapshot:']","['In the described syntax, the variable firstchild will hold the value of the first child element, and the parentElement is the parent node of which we are trying to get the first child element value.', 'In the above code, we have stored the <ul> element id to the frstchild variable, and then we have fetched the first child element value and stored it frstchild variable. Finally, we have the output that child element value.']","['So, in the above code, we can see that similar to the retrieval of the first child element of a node, we have used the lastElementChild method to fetch the last child. However, if there is no child element present in the parent node, the property returns null. Otherwise, it will return the last child element value if present.', 'In order to get all the child elements of a node, use childNodes or children properties. Both these properties can be used to get all the specified children of a parent node, but the difference between both is that the childNodes property will return all the child elements with any node type, i.e., the live NodeList of all child nodes of any node type whereas the children property will return the child element nodes with only the node type.']","['<!DOCTYPE html>', '<meta charset=""utf-8"">', '<title>JavaScript example to Get Child Elements</title>', '</head>', '<ul id=""person"">', '<li class=""class1"">Category</li>', '<li>Male or Female</li>', '<li class=""class 2"">Groups</li>', '<li>Young</li>', '<li>Old</li>', '<li>Child</li>', '<li class=""class3"">All together</li>', '</ul>', '</body>', '</html>', 'let firstChild = parentElement.firstChild;', ""let frstchild = document.getElementById('person');"", 'console.log(frstchild.firstElementChild);', 'let lastChild = parentElement.lastChild;', ""let lstchild = document.getElementById('person');"", 'console.log(lstchild.lastElementChild);', 'let children = parentElement.childNodes;', 'let children = parentElement.children;', ""let person = document.getElementById('person');"", 'let children = person.children;', 'console.log(children);']",[],[],"[""|||Getting the first child element of a node|||Getting the last child element of a node|||Getting all the children of a node||||||If the parentElement does not have any child, then the firstChild property will return null as an output.|||If the property finds the first child of a parent node, then it will return that child node, and the child node can be a text node, element node, or comment node.||||||You might have seen that we have not used the lastChild and firstChild property of the node for getting the last and first child element of the parent node in the example code. It is because if we use the firstChild property and lastChild property in our example code, then for maintaining the whitespace between the <ul> and <li> elements, it creates and outputs the '#text' node.|||Thus, if there are any whitespaces (single spaces and multiple spaces), returns and tabs, the browser creates the #text node for maintaining them.|||""]"
175,['JavaScript scrollIntoView'],['JavaScript scrollIntoView () is a method of Element class that lets us scroll an element into the viewing portion of the window.'],"['https://www.javatpoint.com/javascript-string-startswith', 'https://www.javatpoint.com/getting-child-elements-of-a-node-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-scrollintoview1', 'https://www.javatpoint.com/javascript-string-startswith', 'https://www.javatpoint.com/getting-child-elements-of-a-node-in-javascript', 'https://www.javatpoint.com/javascript-string-startswith']",['https://static.javatpoint.com/javascriptpages/images/javascript-scrollintoview.png'],[],[],"['JavaScript scrollIntoView () Method', 'JavaScript scrollIntoView() Example']",[],"['The scrollIntoView () method is used for scrolling the elements on the viewport.', 'In the above-described syntaxes, the specified parameters are:', ""Now, let's take an example of the scrollIntoView () method."", ""Let's take an example to understand the working of the JavaScript scrollIntoView () method:"", 'On clicking the button once, we got the following output:', 'Code Explanation:']","['Here, in this section, we will learn how we can use the scrollIntoView () method for scrolling the elements into the view. We will also implement an example through which we can understand the working and use of the function.', 'In the output, you can see that we are not able to see the list items in the viewport without scrolling. We are able to see these list items only after pressing the button where on the button click, the list item gets scrolled into the visible area.', 'So, the scrollIntoView () method of JavaScript is used for making the invisible part visible just by scrolling the scroll bar. You can also try the JavaScript scrollIntoView () method in alternative manners.']",[],"['1) element.scrollIntoView (alignToTop);', '2) Element.scrollIntoView (options);', '<!DOCTYPE html>', '<button onclick=""funcClick()"">Click it</button>', '<div>', '<p>JavaTpoint: The Best Learning Portal</p>', '<ul>', '<li><b>JavaScript</b></li>', '<li><b>Java</b></li>', '<li><b>PHP</b></li>', '<li><b>C</b></li>', '<li><b>C++</b></li>', '<li><b>Python</b></li>', '<li><b>R</b></li>', '<li><b>GO</b></li>', '<li><b>DOT NET</b></li>', '<li id=""id_test""><b>Angular</b></li>', '<li><b>Django</b></li>', '<li><b>HTML</b></li>', '<li><b>CSS</b></li>', '<li><b>Bootstrap</b></li>', '<li><b>C#</b></li>', '<li><b>Android</b></li>', '<li><b>SQL</b></li>', '<li><b>DBMS</b></li>', '<li><b>Data Structure</b></li>', '<li><b>RPA</b></li>', '<li><b>PostgreSQL</b></li>', '<li><b>Artificial Intelligence</b></li>', '<li><b>Machine Learning</b></li>', '<li><b>AWS</b></li>', '<li><b>Data Science</b></li>', '<li><b>Blockchain</b></li>', '<li><b>Git</b></li>', '<li><b>DevOps</b></li>', '<li><b>ReactJS</b></li>', '<li><b>Hadoop</b></li>', '<li><b>Cloud</b></li>', '<li><b>Data Mining</b></li>', '<li><b>Oracle</b></li>', '<li><b>MYSQL</b></li>', '<li><b>SQLite</b></li>', '<li><b>jQuery</b></li>', '<li><b>Node js</b></li>', '<li><b>JSON</b></li>', '<li><b>Laravel</b></li>', '<li><b>Wordpress</b></li>', '<li><b>JSP</b></li>', '<li><b>JSF</b></li>', '<li><b>Spring Boot</b></li>', '<li><b>Rest API</b></li>', '<li><b>MicroServices</b></li>', '<li><b>IntelliJ</b></li>', '<li><b>Apache Kafka</b></li>', '<li><b>Cassandra</b></li>', '<li><b>Selenium</b></li>', '<li><b>SO on...</b></li>', '</ul>', '</div>', '<script>', 'function funcClick()', 'var e = document.getElementById(""id_test"");', 'e.scrollIntoView();', '</script>', '</body>', '</html>']",[],[],"[""|||alignToTop: The parameter alignToTop contains the Boolean value that can be either true or false, and by default, its value is set to true. For a particular code, if this parameter finds it true, as a result, the top of the element gets aligned either to the top of the visible area or to the top of the viewport area. However, in case the value is set to false; as a result, the bottom of the element gets aligned either to the bottom of the viewport or to the bottom of the visible area of the scroll bar.|||options: It is an object-type argument, and the browser support may vary. This parameter provides more control for the alignment of the element in the view.|||It has the following properties:||||||The first property is the behavior that defines the transition animation. The property can have any of the two values, i.e., auto or smooth, where the default value is auto.|||The block property is another which defines the vertical alignment of the elements and can have any of the four value, i.e., start, center, end or nearest. Here, the default value is start.|||The last property is the inline property which defines the horizontal alignment and can have any of the four values, i.e., start, center, end, or nearest. Here, the default value is nearest.|||||||||The first property is the behavior that defines the transition animation. The property can have any of the two values, i.e., auto or smooth, where the default value is auto.|||The block property is another which defines the vertical alignment of the elements and can have any of the four value, i.e., start, center, end or nearest. Here, the default value is start.|||The last property is the inline property which defines the horizontal alignment and can have any of the four values, i.e., start, center, end, or nearest. Here, the default value is nearest.|||&&&|||The above code is an html file that consists of both html and JavaScript code.|||We have created a list of items, and in between the items, we have created an id =id_test so that we can get our scrolling point from where the window will get scrolled.|||Next, we have created a button 'Click it' on which we have invoked the function when the user makes a click.|||As the function is the JS function, so as per the function definition, the particular list of items will be fetched, and it will be stored in the specified variable.|||When we use the scrolIntoView property, the windows get scrolled to the particular list item.|||Finally, the item will be visible in the viewport.|||""]"
176,['JavaScript String startsWith'],"['The startsWith () is a method of string that determines if the string starts with the specified characters of a string. Then results either true or false, whichever is appropriate as an output.']","['https://www.javatpoint.com/js-first-class-function', 'https://www.javatpoint.com/javascript-scrollintoview', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-startswith1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-string-startswith2', 'https://www.javatpoint.com/js-first-class-function', 'https://www.javatpoint.com/javascript-scrollintoview', 'https://www.javatpoint.com/js-first-class-function']","['https://static.javatpoint.com/javascriptpages/images/javascript-string-startswith.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-string-startswith2.png']",[],[],"['JavaString String startsWith () Method', 'Return Value', 'Example of String startsWith () Method']","['Note: The default position value 0 starts from the first character of the string. Thus, if the 0th position in the string is a single space, the output will be 0 with the above searchString values.']","['Here, in this section, we will discuss the startsWith () method with some example implementation to know how the method is being used.', 'In the above syntax:', 'The string function returns true if the specified characters are found in the string; otherwise it returns false.', ""Let's see some example implementation to understand the concept better:"", 'Example 1:', 'Below is an example code:', ""In the above code example, we have assigned a string to a const variable 'test':"", 'Example 2:', 'Below is a code example:', 'In the above code,']","['The method returns true if it finds that the input string begins with the specified characters of a string else returns false as an output. Also, the startsWith () method is case-sensitive.']","['Now, when we console log the string with searchString = Work, and no position is specified, so the searchString will search for its value from the 0th position, and as beginning the search, the characters are found, and so it returns true as an output.', 'Now, when we console log the string with searchString = Worship and also specified the position value as 8. So, the searchString will begin searching from the 8th position from the beginning, and at the 8th position, it finds the matched characters; thus, it returns true as the output.', 'Now, when we console log the string with searchString = work with no specified position, the searches begin from 0th position, and as the first character does not match so, it returns false. It outputs false because the string startsWith () method is case-sensitive.']","['str.startsWith(searchString[, position])', '<script>', ""const test = 'Work is Worship';"", ""console.log(test.startsWith('Work'));"", ""console.log(test.startsWith('Worship',8));"", ""console.log(test.startsWith('work'));"", '</script>', '</body>', '</html>', '<script>', 'function test() {', ""var str = 'Work is Worship';"", ""var x = str.startsWith('Wor');"", 'console.log(x);', 'test();', '</script>', '</body>', '</html>']",[],[],"[""|||str: The specified string|||searchString: The characters are specified which are to be searched in the str.|||position: An optional parameter that holds the position in the string from where to begin the searching. By default, the value is 0.||||||log(test.startsWith('Work'));||||||log(test.startsWith('Worship',8));||||||log(test.startsWith('work'));||||||We have created a function test () within which we have initialized a string for variable str.|||Next, we have specified some character string that is to be searched in the specified string.|||We have not set the position value, and so it searches from the 0th position in the string.|||As it finds that the specified characters match with the string characters specified in the string. So, it returns the output as true because the match is found. Thus, the value of the variable x is assigned as true. Hence, on invoking the function, the output is returned as true.|||""]"
177,['JS First Class Function'],"['JavaScript is a dynamic scripting language that allows us to use it in the form of an object-oriented style or functional style. In the same way, one such feature of JavaScript is the First class function.']","['https://www.javatpoint.com/javascript-default-parameters', 'https://www.javatpoint.com/javascript-string-startswith', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=js-first-class-function1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=js-first-class-function2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=js-first-class-function3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=js-first-class-function4', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=js-first-class-function5', 'https://www.javatpoint.com/javascript-default-parameters', 'https://www.javatpoint.com/javascript-string-startswith', 'https://www.javatpoint.com/javascript-default-parameters']","['https://static.javatpoint.com/javascriptpages/images/js-first-class-function.png', 'https://static.javatpoint.com/javascriptpages/images/js-first-class-function2.png', 'https://static.javatpoint.com/javascriptpages/images/js-first-class-function3.png', 'https://static.javatpoint.com/javascriptpages/images/js-first-class-function4.png', 'https://static.javatpoint.com/javascriptpages/images/js-first-class-function5.png']",[],[],"['What is JS First Class Function', 'Storing in a Variable', 'Passing the first class function as an argument to another function', 'Returning functions from functions']","['Note: In calling such a function, we need to use another variable to which it should be assigned. Otherwise, it will not return the function which it is returning. If we return it without storing it in another variable, it would get returned directly.']","['We will see the implementation of these operations and will try to understand the usage of the first class method in a better way.', 'The below example code is the implementation of storing a first class function in a variable:', 'In the above code:', 'let result = add(10, 20);', 'Here, we have assigned the add () function to a variable and passed two arguments in it. It is one way.', 'let result = sum(10,20);', 'The complete code is as follows:', 'After executing the code, we got the following output:', ""Let' s see the below example to understand the working and how we can pass it as other function's argument:"", 'We got the following output after executing the code:', 'In the above code,', ""The first-class functions are the values only so we can also return it from a function. Let's see the below example code:"", 'In the above code,', 'Method 1: Using a Variable', 'Method 2: Using Double Parenthesis', 'The below code example will let you understand it:', 'So, it is all about First class functions, and we have better described its usage and its implementations.']","['In this section, we will discuss the first class function, what it is, what the use is, and will also look at some of its practical implementations to understand its usage and work in a more précised manner.', 'Here, as we have already assigned the add () function to the sum variable so we can further assign the sum variable to the result and use it instead of using the add () function. It is because both sum and add points to the same address.', 'As we have discussed that these first class functions can be stored in a variable which means that these functions behave like values also. Thus we can pass them as an argument to other functions too.', 'In the above code we have used this method for invoking the anonymous function and in addition to it, we have the below example code that will help us to understand it:', 'In this, we have simply created a constant variable callFunc, and to it, we have assigned the anonymous function. Then we have invoked the constant function with parenthesis.', 'In the above code, for invoking the function, we have used double parenthesis, which is similar to storing the function to another variable and then invoking the variable with single parenthesis as we have done in Method 1.']","['The first class functions are the first class citizens and are treated as the first-class object which can be stored in variables, passed as an argument in functions, returned from other functions, have their own properties. It further means that these first class functions support all the operations which are allowed to other JavaScript objects. Thus, JS first class functions support the following described operations:']","['function add(x, y) {', 'return x + y;', 'let sum = add;', '<script>', 'function add(x, y) {', 'return x + y;', 'let sum = add;', 'let result = sum(10, 20);', 'console.log(result);', '</script>', '</body>', '</html>', '<script>', 'function sum(x, y) {', 'return x + y;', 'let assign= sum;', 'function avg(x,y, z) {', 'return z(x, y) / 2;', 'let res = avg(10, 20, assign);', 'console.log(res);', '</script>', '</body>', '</html>', '<script>', 'function test() {', 'return function() {', 'console.log(""JavaTpoint"");', 'const callFunc = test(); //for invoking the anonymous function', 'callFunc();', '</script>', '</body>', '</html>', '<script>', 'const test = function() {', 'return function() {', 'console.log(""JavaTpoint"");', 'const callFunc = test(); //to invoke the anonymous function', 'callFunc();', '</script>', '</body>', '</html>', '<script>', 'function test() {', 'return function() {', 'console.log(""JavaTpoint"");', 'test ()();', '</script>', '</body>', '</html>']",[],[],"[""|||Can be stored as a value in a variable|||Can be returned by another function|||Can be passed as a function's argument|||Can be stored in an array, stack, or queue|||Can have its own properties and methods.||||||We have created a function and passed two parameters in it.|||After that, we have assigned the function to a variable where we have not defined it as a function (i.e., not used the parenthesis) as we have done until now.|||So, the question arises here that how it is going to work. The answer to this is that just we need to invoke the variable or the function itself in the following described way:||||||We can see that we have created the sum () function and assigned the function to a new variable, 'assign'.|||Then, we have created an avg () function where we have passed three variables x, y, z, and z is the used for passing the sum () function as an argument to the function avg (). In this way, we can pass the first class function as an argument to another function.||||||We have created a function test () under which we have further returned a function that is defined under it.|||Thus, we can return a first class function from another function.|||The function test () is known as the Higher-Order function. A higher-order function is a function that makes a first class function be returned from it as a value.|||Also, the function which is being returned is the anonymous function. Thus, we need to invoke this anonymous function, and for doing so, we have two following described methods:|||""]"
178,['JavaScript Default Parameters'],"['The term default can be understood as an option that is always available when no other options are appropriate. Similarly, a default value is a value that will always be available. In terms of computer programming language, almost every programming language has one or the other specified default values for the in-built functions or properties. The same applies to JavaScript also where it enables the functions to have their default values.']","['https://www.javatpoint.com/javascript-recursion-in-real-life', 'https://www.javatpoint.com/js-first-class-function', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-default-parameters1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-default-parameters2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-default-parameters3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-default-parameters4', 'https://www.javatpoint.com/javascript-recursion-in-real-life', 'https://www.javatpoint.com/js-first-class-function', 'https://www.javatpoint.com/javascript-recursion-in-real-life']","['https://static.javatpoint.com/javascriptpages/images/javascript-default-parameters.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-default-parameters2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-default-parameters3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-default-parameters4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-default-parameters5.png']",[],"['Arguments vs. Parameters', 'JavaScript Default Parameters']","['JavaScript Default Parameter Example', 'Few examples of JavaScript Default Parameters', 'Evaluating default parameters at call time']",[],"['The output of the above is shown below:', 'In the above example,', ""Let's see some more examples to understand the working of the default parameters more efficiently."", ""Let's see some more examples to better understand the concept:"", 'Example 1: Passing undefined as the parameter', 'In this example,', 'Example 2: Passing null as the function parameter', 'Below is an example code that will let you understand that if we use null as parameter value:', 'In the above example code,', 'So these are two examples that may answer the queries if occurring that what if we use these values in the function call.', ""Let's look at the below example and try to better understand the concept explained:"", 'In the above example code,']","['Typically, in JavaScript functions, the parameter has undefined as its default value which means that it is the default value and will be supplied when no other value will be provided as the function parameter value.', ""Although there are various ways of using default parameters, let's see an example to understand how the default parameter works actually and how to set default parameter in a function:"", 'Finally, in this section, we discussed the JavaScript default parameters, which will help the learners to clear their concepts regarding functions. Also, one should now be able to differentiate in-between arguments and parameters.']","[""In this section, we will learn about JavaScript default parameters and look at some examples to understand the default parameters' usage. Also, the prerequisite needed is one should know the difference between the terms parameter and argument as both these terms are different from one another."", 'Many people confuse both terms, and so before explaining default parameters, we should be clear about these terms. The parameters and arguments in a function are both different. Function parameters are the values that are passed in the definition of the function, whereas function arguments are the real values that are passed in the function. The argument values are the values that are passed in the function definition as parameter values. It means the parameters are initialized as the supplied arguments values. In every programming language, both terms have the same meaning only.', 'When no value is passed in the function definition, a default value is being set for the function definition, known as the default parameter. It allows the named parameters to get initialized with a default value when either undefined or no value is passed.', 'Hence, it clearly means that if we pass either an empty string or null as the parameter value, the default will not be considered, and if an empty string is passed, the output will be an empty string, and if null is passed, the output will be null and not the default value. Both null and empty strings are considered valid values for the function.', 'Evaluation of the default parameters is one of its important features where we consider the evaluation of the default parameters. One should know that the JavaScript default parameters are never reused and are always created whenever a function call is made. It is known as the evaluation of the default parameter at the time of function call.']","['function [name]([param1[ = defaultValue1 ][, ..., paramN[ = defaultValueN ]]]) {', 'statements', '<script>', 'function sum(a=5, b=7)', 'return a+b;', 'console.log("" Sum of the numbers is : "" + sum());   // there is no argument', 'console.log("" Sum of the number is : "" + sum(3));   // it has one argument', 'console.log("" Sum is : "" + sum(7,3));   // have both argument', '</script>', '</body>', '</html>', '<script>', 'function example1(y = 8) {', 'console.log(y);', 'example1(undefined); //passing undefined 1', '</script>', '</body>', '</html>', '<script>', 'function example2(a = 5)', 'console.log(typeof a);', 'console.log(""The value of a is: "" + a);', 'example2();    // outputs number and The value of a is: 5', 'example2(undefined);    // output gives as 1', ""example2('');    // outputs string and the value of a is:"", 'example2(null);    // outputs object and the value of a: null', '</script>', '</body>', '</html>', '<script>', 'function combine(value, array = []) {', 'array.push(value)', 'return array', 'console.log(combine(1))  // outputs [1]', 'console.log(combine(2))  // outputs [2], not [1, 2]', '</script>', '</body>', '</html>']",[],[],"[""|||We have created a function sum (), where we have performed a simple addition of two values. It can be seen that we have initialized both parameters with two default values.|||Thus, when we have consle.log the invoking of function with no passing of values, the default values of both the parameters will get passed, and hence the default parameter comes into play.|||Next, we have invoked the function with only one value which means the second parameter has been supplied with a value, but the first parameter is still undefined, and hence the default value will be provided for the first parameter.|||For the last invoking of the function, we have passed two values for both the parameters, and so the default values will not be passed for any of the parameters because values are being supplied.|||As a result, you might now be able to understand the working and use of the default parameters.||||||We have created a function where we have assigned a default value to the parameter, and at the time of function call, we have passed undefined, and in the output, you can see that instead of taking the passed value, the function takes the default value and use it.|||It means that whether the parameter is an empty parameter or an undefined, in both cases, the value taken will be the default value only.||||||We have created a function where we have provided a default value to the function's parameter, and in the calling of the function, we have invoked the function four times.|||In the first invocation of the function, we have called the function with no passing of the value, so it will console log out the default value only.|||In the second calling of the function, we have passed undefined as the parameter value, which means the function will console log the default value here also.|||In the third calling of the function, we have passed a (' '), which means it will console log the string value of the parameter.|||In the last function invocation, we have supplied null as its value which means it will consider the null value as its value and will console log the value of a as null only.||||||We can notice that the function is invoked two times.|||For the first time, we have passed 1 as its value, and so the output will be 1 in the array (only one element).|||In the second call of the function, we have used 2 as its new value. Thus, the new value will be [2] and not [1,2 ]. It is because the new created value is 2 and not 1.|||""]"
179,['JavaScript Recursion in Real Life'],"['We would have heard and learned the recursion concept when approaching different programming languages. In JavaScript also, we have the concept of Recursion, where we make use of the recursive functions.']","['https://www.javatpoint.com/javascript-removechild', 'https://www.javatpoint.com/javascript-default-parameters', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-recursion-in-real-life1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-recursion-in-real-life2', 'https://www.javatpoint.com/javascript-removechild', 'https://www.javatpoint.com/javascript-default-parameters', 'https://www.javatpoint.com/javascript-removechild']","['https://static.javatpoint.com/javascriptpages/images/javascript-recursion-in-real-life.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-recursion-in-real-life2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-recursion-in-real-life3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-recursion-in-real-life4.png']",[],[],"['What is Recursion and Recursive Function', 'When to use Recursion', 'When to avoid using Recursion', 'Implementing Real-Life Examples of Recursion']",[],"['The syntax for a recursive function is given below:', 'Example1: Search Algorithms', 'Example 2: Delay Timers', 'In the above code,', 'Example 3: Puzzle Solving', 'Example 4: Fractal Designs', 'Example 5: Inductive Proofs', 'An inductive proof is a composition of base case and inductive steps where:', 'For example: Climbing a ladder', 'Similarly, there are more examples of inductive proofs that can be solved using Recursion.', 'Thus, all these are the real-world examples of Recursion and the examples where we use the Recursion.']","['So, in this section, we are going to learn about Recursion and will also see some real-life examples of Recursion. We will also discuss that when we should use Recursion and when we should avoid its use.', 'One should note that a recursive function must have a condition so that it should stop its execution; otherwise, the function will be invoked and executed for infinite times.', 'Generally, Recursion is the favorite topic for the interviewers as they often interrogate for recursion questions. There are various examples of our real-life where Recursion is used:', 'There are many search algorithms we have learned where recursion is used such as in binary search. So, below code shows the use of recursion in binary search:', 'There is an alternative method also available for solving binary search without Recursion but traversing and iterating the whole array for searching the element is complex and time-consuming. Thus, it becomes simple to solve it using Recursion.', ""Suppose after a set period of time we want to execute a function for multiple times, it is the best option to make use of recursion. So, let's see the code implementation for the same:"", 'For solving the fractal designs, we can make use of Recursion. Fractal designs/patterns are the designs that are defined recursively. These fractal designs look as:', 'The pattern consists of several complex steps which are difficult to solve. But when we try to solve the fractal design with the recursion method, we can judge and see the output of each particular step.']","['Recursion is just the recursive call of a function to itself, where a function calls itself recursively. Such a type of function is called recursive function, and the approach is known as Recursion. Through Recursion, we can solve many complex problems with elegant solutions. However, it is recommended that we should avoid making use of Recursion because if we misuse it, it can be dangerous for the system and the data stored in it. Also, the JavaScript functional coding style does not support it, and some compilers are not able to handle recursive functions safely.', 'Recursion is capable of breaking down large and complex problems into small problems. However, not every complex problem can be solved via Recursion. The use of the recursive function is most appropriate and effective for problems like iterative branching, such as sorting, traversing, binary search, and other data structures. Also, it is good to use recursive functions when there is a need to invoke the same function again and again but with different parameter values within a loop. For example, finding factorial of a number (a large number) using Recursion, Fibonacci series implementation, Tower of Hanoi are the best and easy to solve through Recursion.', 'One should avoid solving a problem with Recursion in case the problem is too small and can be solved with just a few lines of simple code. It is because recursive functions invoke itself unless it is not stopped. Thus it uses a good amount of memory unnecessarily. Therefore, when we are solving a problem that can be solved without the use of Recursion, avoid using it. Sometimes, there may be a case that if we misuse Recursion, the whole program may get infinite, and there would be no better option than terminating the program. So, use Recursion wherever needed and with correctness.', 'It is the best option to choose Recursion for solving puzzles because Recursion can help to get the best-optimized solution for the puzzle. There are many puzzles we may play in our day-to-day life, such as tic-tac-toe. One must know how typical it would be if we try to solve with an iterative solution because for every move, we need to make several consideration factors - a complex task. However, it becomes easy or less complex to find the best move via a recursive algorithm. Thus, not only for tic-tac-toe but also in those games where you know that there are multiple iterative moves and need to determine the best move, Recursion is the best way for it.']","['function recurse() {', 'recurse();', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '</head>', '<script>', 'function binarySearch( values_Sorted, target ){', 'function perform_search( beg, end ) {', 'if ( beg > end ) {', 'return null;', '}', 'if ( values_Sorted[beg] === target ){', 'return beg;', '}', 'if ( values_Sorted[end] === target ){', 'return end;', '}', 'var mid = Math.floor( ( beg + end ) / 2 );', 'var mid_value = values_Sorted[mid];', 'if ( mid_value > target ) {', 'return perform_search(beg+1, mid);', '} else if ( mid_value < target ) {', 'return perform_search(mid, end-1);', '}', 'return mid;', 'return perform_search(0, values_Sorted.length-1);', 'var res=binarySearch([0,1,2,3,4,5,6,7,8,9,10], 8);', 'console.log(""We got value as: ""+res);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '</head>', '<script>', 'var elements = [""Welcome"",""to"", ""JavaTpoint"", "".com""];', 'var n = 0;', 'function delayTimer() {', 'console.log(elements[n]);', 'if(n++ !== elements.length - 1) {', 'setTimeout(delayTimer, 1000);', 'delayTimer();', '</script>', '</body>', '</html>']",[],[],"[""|||We have set a delay timer due to which the elements present in the array will be printed onto the screen after a second, as we can see in the output snapshot.|||Also, the same process will go on until the last value is not reached.|||You can also notice that we have used Recursion here, and the function has invoked itself until the if condition became false.||||||The base case is the case that can be demonstrated true for a particular value (P(0)).|||The inductive step tells that we can get P(n) to P(n+1).||||||The base case in this example is that 'Can we climb on the first rung of the ladder?'|||The inductive step here is 'Can we get from one rung to the next with an aim of some arbitrary rung on a ladder?' The answer to this is that yes, we can get from one rung to the next rung of the ladder when assuming the ladder to be a perfect and infinitely long ladder. However, there are real-world limitations existing over the example. It is because the ladder might not be necessarily perfect, i.e., it cannot be infinitely tall, and also, the rungs might be missing or not evenly spaced. But we assume it as a perfect ladder. So, with these two components, it has been proved that we can climb from the ground to any rung on the ladder.|||""]"
180,['JavaScript removeChild'],"['In JavaScript, we have learned the creation of nodes where we create several nodes in which one is known as the Parent node or Root node, and all other nodes coming from the parent node are known as Child nodes. Sometimes there may be cases where we need to remove some or all child nodes of the parent node for which we need a method through which we can easily remove a child node.']","['https://www.javatpoint.com/remove-options-from-select-list-in-javascript', 'https://www.javatpoint.com/javascript-recursion-in-real-life', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-removechild1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-removechild2', 'https://www.javatpoint.com/remove-options-from-select-list-in-javascript', 'https://www.javatpoint.com/javascript-recursion-in-real-life', 'https://www.javatpoint.com/remove-options-from-select-list-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-removechild.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-removechild2.png']",[],['JavaScript removeChild() Examples'],"['The removeChild() method', 'Remove all child nodes']","['Note: The removeChild () method is for removing only one child element from the root element, but if we want to remove all child elements from the root element, there are other methods also available through which we can remove all the child elements of a root node.']","['The syntax for using the removeChild () method is:', ""Thus, if we don't want to keep that specified childNode in the memory also and want to remove it from memory, use the below syntax:"", ""Now, let's see some examples that will help us to understand the concept better."", ""Let's have some examples to understand the practical implementation of the removeChild () method:"", 'Example 1:', 'The output of the above code is shown below:', 'Code Explanantion', 'Example 2:', 'The output of the above code is shown below:', 'In this example, we have removed the last child element from the list.', 'In the code:', 'In order to remove all child methods of a root node, there are the following ways through which we can do so:', 'Follow the below steps for removing all the child nodes of an element:', 'However, innerHTML is a method to remove all child nodes of an element, but the method is not preferred to be used.', 'So, these are the methods through which we can remove one or all child nodes of an element.']","['So, in this section, we will discuss and understand the method through which we can remove a child node from its parent node. Also, we will look at some examples that will help us to understand the method well.', 'In order to remove a child node from a parent node, we use the removeChild () method. The removeChild () method is used for removing a child element of a node.', 'The other method is to use innerHTML property of the parent node by setting innerHTML = """" i.e. an empty string. The use of the method is shown below:']","['In the syntax, childNode is that element of the node that we want to remove from its parent Node. Thus, as a parameter value, we pass the childNode value that we want to remove. Also, if the specified child node in the childNode is not part of the specified parentNode, then an exception will be thrown by the method. However, if the specified childNode is present in its parentNode, then the removeChild () method will remove and return that childNode from the DOM, but it does not remove that child from memory and keep it in there.', 'In this syntax, we could notice that we have not stored the removed childNode in any variable (as in the above syntax), which means the removed element will not get stored anywhere in the memory too. However, it will still exist in the memory until the JS garbage collector wrecks it.']","['let childNode = parentNode.removeChild(childNode);', 'parentNode.removeChild(childNode);', '<ul id = ""id_1"">', '<li>John</li>', '<li>Rone</li>', '<li>Jessy</li>', '<li>Daisy</li>', '<li>Harry</li>', '<script>', 'var getChild = document.getElementById(""id_1"");', 'getChild.removeChild(getChild.childNodes[1]);//Removing the first child in the list', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '</head>', '<ul id=""id_2"">', '<li>Ready</li>', '<li>Steady</li>', '<li>Go</li>', '</ul>', '<script>', ""let getChild = document.getElementById('id_2');"", 'getChild.removeChild(getChild.lastElementChild);//To remove the last element in the list', '</script>', '</body>', '</html>', ""let getChild = document.getElementById('id_1');"", 'while (getChild.firstChild) {', 'getChild.removeChild(getChild.firstChild);', ""let getChild = document.getElementById('id_1');"", ""getChild.innerHTML = '';""]",[],[],"['|||The above code is an HTML and JavaScript implementation where we have created an unordered list containing some items in the list. Also, the list is provided with an id, i.e., id=""id_1"".|||In the script section, we have fetched the unordered list id via document.getElementById.|||We can understand that in the code, \'getChild\' is the parentNode, and the specified index 1 value as the childNode value is the child element that we want to remove.|||The removeChild () method searches for the element present at index value 1, return and remove the element from the list.|||If there was the case that the specified item was not found by the method, it would have thrown the exception that the specified item was not found.|||Also, after getting removed from the list, the item will still reside in the memory as we have not removed it from memory.||||||We have created an unordered list by listing some elements within it.|||Also, we have created an \'id = id_2\' for the <ul> element which will help to fetch the list item via document.getElementById () method.|||In the JS code, we have removed the last child element from the list using the removeChild () method.|||&&&|||Use the firstChild property and get the first node of the element.|||Similarly, repeat the same step until all the child elements get removed from its parent node.|||']"
181,['Remove options from select list in JavaScript'],"['In this article, we will understand how to remove an option from the select list with the help of JavaScript. At the beginning of this article, we will learn some fundamental aspects of JavaScript, <select> tag, and remove method in JavaScript. After that, we will understand some examples of this article.']","['https://www.javatpoint.com/javascript-calculator', 'https://www.javatpoint.com/javascript-removechild', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-select-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-unordered-list', 'https://www.javatpoint.com/https://www.javatpoint.com/html-ordered-list', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-option-tag', 'https://www.javatpoint.com/https://www.javatpoint.com/html-lists', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-options-from-select-list-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=remove-options-from-select-list-in-javascript2', 'https://www.javatpoint.com/javascript-calculator', 'https://www.javatpoint.com/javascript-removechild', 'https://www.javatpoint.com/javascript-calculator']","['https://static.javatpoint.com/javascriptpages/images/remove-options-from-select-list-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/remove-options-from-select-list-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/remove-options-from-select-list-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/remove-options-from-select-list-in-javascript4.png']",[],"['What do you mean by JavaScript?', 'remove() method', 'What do you mean by <select> tag?']","['Syntax 1:', 'Syntax 2:', 'Syntax:', 'Example 1:', 'Explanation:', 'Example 2:', 'Explanation:']",[],"['JavaScript is an object-based, high-level language as it can access various HTML objects that are contained in the web page.', 'The remove () method is used in JavaScript to remove the selected elements from the select list.', 'Example: $(""p"").remove();', 'Example: $(""#select1 option[value=\'hello\']"").remove();', 'The <select> tag specifies that the text that follows is a list, and the <option> tag is used to determine the items of the list.', 'The following examples are used to remove option from the select list with the help of JavaScript.', 'Following JS code is used to remove element from the select list.', 'Below is the output of this example:', 'In this example, we have selected the ""three"" option value from the select list and after removing this element, the output is shown below:', 'Following JS code is used to remove element from the select list.', 'Below is the output of this example:']","['In this example, we can choose any desired option from the list to remove the element from it. When we click the button then the selected element is removed from the select list.', 'In this example, you can select or define any option from the select list to remove. When we click the button then the defined element is removed from the select list.']","['The <select> tag is similar in functionality to unordered list <ul> or ordered list <ol> used in HTML to define a list. And <option> tag is similar to the list item <li> which specifies the list item in a list. The select and option tags are used to create drop-down menus. It is also called a pull-down list and drop-down list.', 'The ""basic"" option value from the select list is predefined to remove from the list in this example. When we click on the button, then the basic option value is removed from the select list. Below is the output of the select list after removing the basic option value from the select list.']","['$(selector).remove (selector)', '$(""#FIELDID option[value=\'X\']"").remove();', '<select name = ""select_list_name"" size =""n"" multiple>', '<option value =""choice-name 1"" selected> Text Label-1 </option>', '<option value =""choice-name 2"" selected> Text Label-2 </option>', '..............................................................', '..............................................................', '</select>', '<! DOCTYPE html>', '<title>', 'Remove option from select list using JavaScript', '</title>', '<meta name = ""viewport"" content = ""width = device-width, initial-scale = 1"">', '<style>', 'font-weight: bold;', 'margin-bottom: 2.5rem;', 'color: #aaa;', 'align: center;', 'font-size: 30px;', 'margin-top: 1.5rem;', 'font-weight: 1000;', 'font-weight: bold;', 'margin-bottom: 2.5rem;', 'color: #aaa;', 'align: center;', 'font-size: 20px;', 'margin-top: 1.5rem;', 'font-weight: 1000;', 'font-weight: bold;', 'margin-bottom: 2.5rem;', 'color: #aaa;', 'align: center;', 'font-size: 30px;', 'margin-top: 1.5rem;', 'font-weight: 1000;', 'background: #191828;', 'color: #aaa;', 'font-family: ""Roboto"", Arial, Helvetica, sans-serif;', 'font-size: 16px;', 'font-weight: 300;', 'letter-spacing: 0.01em;', 'line-height: 1.6em;', 'margin-top: 30;', '::placeholder {', 'color: #aaa;', 'font-weight: bold;', 'opacity: 1;', ""input[type='button'] {"", 'box-sizing: border-box;', 'height: 35px;', 'display: inline-block;', 'border: 3px solid #2F96EF;', 'border-radius: 5px;', 'padding: 0 15px;', 'margin: 10px 0;', 'transition: .2s;', '#selectNow {', 'box-sizing: border-box;', 'height: 35px;', 'display: inline-block;', 'border: 3px solid #2F96EF;', 'border-radius: 5px;', 'padding: 0 15px;', 'margin: 10px 0;', 'transition: .2s;', '#selectNow:hover {', 'color: #FFFFFF;', 'background-color: #aaa;', 'font-weight: bold;', 'opacity: 1;', 'font-family: Georgia, serif;', 'line-height: 1.6;', ""input[type='button']:hover {"", 'color: #FFFFFF;', 'background-color: #3494e6;', '</style>', '<body>', '<h3 align=""center""> Example: </h3>', '<h2 align=""center""> Remove option from select JavaScript </h2>', '<form id = ""myForm"" align = ""center"">', '<select id = ""selectNow"">', '<option value = ""one""> One </option>', '<option value =""two"" > Two </option>', '<option value =""three"" > Three </option>', '<option value =""apple"" > Apple </option>', '<option value =""pear"" > Pear </option>', '<option value =""ban"" > Banana </option>', '<option value=""orange"" > Orange </option>', '</select>', '<input type = ""button"" onclick = ""remove()"" value = ""Click to Remove"" >', '</form>', '<p align=""center""> <em> Select and click the button to remove the selected option. </em> </p>', '<script>', 'function remove() {', 'var x = document.getElementById(""selectNow"");', 'x.remove(x.selectedIndex);', '}', '</script>', '</body>', '</html>', '<script>', 'function remove() {', 'var x = document.getElementById(""selectNow"");', 'x.remove(x.selectedIndex);', '}', '</script>', '<! DOCTYPE html>', '<title>', 'Remove option from select list using JavaScript', '</title>', '<meta name = ""viewport"" content = ""width = device-width, initial-scale = 1"">', '<style>', '#select1:hover {', 'color: #FFFFFF;', 'background-color: #aaa;', 'font-weight: bold;', 'opacity: 1;', 'button:hover {', 'color: #FFFFFF;', 'background-color: #3494e6;', 'font-weight: bold;', 'margin-bottom: 2.5rem;', 'color: #aaa;', 'align: center;', 'font-size: 30px;', 'margin-top: 1.5rem;', 'font-weight: 1000;', 'font-weight: bold;', 'margin-bottom: 2.5rem;', 'color: #aaa;', 'align: center;', 'font-size: 20px;', 'margin-top: 1.5rem;', 'font-weight: 1000;', 'font-weight: bold;', 'margin-bottom: 2.5rem;', 'color: #aaa;', 'align: center;', 'font-size: 30px;', 'margin-top: 1.5rem;', 'font-weight: 1000;', 'background: #191828;', 'color: #aaa;', 'font-family: ""Roboto"", Arial, Helvetica, sans-serif;', 'font-size: 16px;', 'font-weight: 300;', 'letter-spacing: 0.01em;', 'line-height: 1.6em;', 'margin-top: 30;', '::placeholder {', 'color: #aaa;', 'font-weight: bold;', 'opacity: 1;', 'button {', 'box-sizing: border-box;', 'height: 35px;', 'display: inline-block;', 'border: 3px solid #2F96EF;', 'border-radius: 5px;', 'padding: 0 15px;', 'margin: 10px 0;', 'transition: .2s;', '#select1 {', 'box-sizing: border-box;', 'height: 35px;', 'display: inline-block;', 'border: 3px solid #2F96EF;', 'border-radius: 5px;', 'padding: 0 15px;', 'margin: 10px 0;', 'transition: .2s;', 'font-family: Georgia, serif;', 'line-height: 1.6;', '</style>', '</head>', '<body align=""center"">', '<h1 style=""color: green"">', '<h3 align=""center""> Example: </h3>', '<h2 align=""center""> Remove defined option from select JavaScript </h2>', '<p align=""center""> <em>', 'Select any one option from the given options in select list.\t\t<select id=""select1"">', '<option value=""free"">', 'Free', '</option>', '<option value=""basic"">', 'Basic', '</option>', '<option value=""premium"">', 'Premium', '</option>', '<option value= ""one""> One </option>', '<option value=""two""> Two </option>', '<option value=""three""> Three </option>', '</select>', '</em> </p>', '<p align = ""center""> <em> Click the button below to', 'Remove one option from the select box. </em> </p>', '<button onclick=""removeOption()"">', 'Remove option', '</button>', '<script src=', '""https://code.jquery.com/jquery-3.3.1.min.js"">', '</script>', '<script type = ""text/javascript"">', 'function removeOption() {', '$(""#select1 option[value=\'basic\']"").remove();', '</script>', '</body>', '</html>', '<script type=""text/javascript"">', 'function removeOption() {', '$(""#select1 option[value=\'basic\']"").remove();', '</script>']",[],[],[]
182,['JavaScript Calculator'],"['As we know, the Calculator is a portable device used in our daily life to perform various mathematical functions such as addition, subtraction, multiplication, division, root, etc. However, we have scientific or sophisticated calculators used to solve complex tasks such as trigonometry functions, degrees, exponential operators, log functions, hyperbolic functions, square root, and so on. In this topic, we will create a calculator program in JavaScript.']","['https://www.javatpoint.com/palindrome-in-javascript', 'https://www.javatpoint.com/remove-options-from-select-list-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-calculator1', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-calculator2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-calculator3', 'https://www.javatpoint.com/palindrome-in-javascript', 'https://www.javatpoint.com/remove-options-from-select-list-in-javascript', 'https://www.javatpoint.com/palindrome-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-calculator.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-calculator2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-calculator3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-calculator4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-calculator5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-calculator6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-calculator7.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-calculator8.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-calculator9.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-calculator10.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-calculator11.png']",[],[],"['Example 1: Create a JavaScript Calculator using the JavaScript, HTML and CSS programming languages.', 'Create a JavaScript Calculator using If... Else...If statement and display using the prompt dialog box.', 'Example 3: Dynamic JavaScript Calculator using the HTML, CSS and JavaScript.']","['Note: If we want to remove all existing data from the Calculator, click on the Clear All button.']","['Build.html', 'When the above program is executed on any browser, it shows the below image.', 'Now we perform some operation in the JavaScript program, as shown below.', 'Result.html', 'When we execute the above programming code, it produces the below Output:', 'As we can see in the above image, it asks for an operator to perform the calculation by selecting an operator like as +, -, *, or /.', 'In this image, we select an add (+) operator and then click the OK button, as shown below.', 'After clicking on the OK button, it shows the below image to take the first number from the user.', 'We again click on the OK button, it shows the below image to take the second number from the user.', 'Finally, click on the OK button to get the addition of the two numbers, as shown below.', 'Similarly, we can perform the subtraction, multiplication, and division of the number in JavaScript Calculator.', 'When the above program is executed on any browser, it shows the below image.', 'Now we perform multiple operations in JavaScript Calculator by pressing the numeric button, as shown:', ""After performing the operations, click on the '=' (equal) button to return the JavaScript Calculator' Display result.""]","['Here we have created a Calculator program using the JavaScript language, including HTML and CSS web programming. In this Calculator, we can perform basic operations like addition, multiplication, subtraction, and division.', 'Furthermore, we can remove the displayed result or wrong number one by one at the back end by clicking on the B (Back) button. If we want to remove the completely visible number, press the C (Cancel) button from the Calculator.']","[""We performed addition and subtraction operations in the above image by clicking on the numeric button and then addition & subtraction operations. After this, click on the '=' (equal) button to get the operation result. In the given below image, we can see the results of the numbers.""]","['<!-- Create a simple Program to build the Calculator in JavaScript using with HTML and CSS web languages. -->', '<!DOCTYPE html>', '<html lang = ""en"">', '<title> JavaScript Calculator </title>', '<style>', 'text-align: center;', 'padding: 23px;', 'background-color: skyblue;', 'color: white;', '#clear{', 'width: 270px;', 'border: 3px solid gray;', 'border-radius: 3px;', 'padding: 20px;', 'background-color: red;', '.formstyle', 'width: 300px;', 'height: 530px;', 'margin: auto;', 'border: 3px solid skyblue;', 'border-radius: 5px;', 'padding: 20px;', 'width: 20px;', 'background-color: green;', 'color: white;', 'border: 3px solid gray;', 'border-radius: 5px;', 'padding: 26px;', 'margin: 5px;', 'font-size: 15px;', 'width: 250px;', 'border: 5px solid black;', 'border-radius: 3px;', 'padding: 20px;', 'margin: auto;', '</style>', '</head>', '<h1> Calculator Program in JavaScript </h1>', '<div class= ""formstyle"">', '<form name = ""form1"">', '<!-- This input box shows the button pressed by the user in calculator. -->', '<input id = ""calc"" type =""text"" name = ""answer""> <br> <br>', '<!-- Display the calculator button on the screen. -->', '<!-- onclick() function display the number prsses by the user. -->', '<input type = ""button"" value = ""1"" onclick = ""form1.answer.value += \'1\' "">', '<input type = ""button"" value = ""2"" onclick = ""form1.answer.value += \'2\' "">', '<input type = ""button"" value = ""3"" onclick = ""form1.answer.value += \'3\' "">', '<input type = ""button"" value = ""+"" onclick = ""form1.answer.value += \'+\' "">', '<br> <br>', '<input type = ""button"" value = ""4"" onclick = ""form1.answer.value += \'4\' "">', '<input type = ""button"" value = ""5"" onclick = ""form1.answer.value += \'5\' "">', '<input type = ""button"" value = ""6"" onclick = ""form1.answer.value += \'6\' "">', '<input type = ""button"" value = ""-"" onclick = ""form1.answer.value += \'-\' "">', '<br> <br>', '<input type = ""button"" value = ""7"" onclick = ""form1.answer.value += \'7\' "">', '<input type = ""button"" value = ""8"" onclick = ""form1.answer.value += \'8\' "">', '<input type = ""button"" value = ""9"" onclick = ""form1.answer.value += \'9\' "">', '<input type = ""button"" value = ""*"" onclick = ""form1.answer.value += \'*\' "">', '<br> <br>', '<input type = ""button"" value = ""/"" onclick = ""form1.answer.value += \'/\' "">', '<input type = ""button"" value = ""0"" onclick = ""form1.answer.value += \'0\' "">', '<input type = ""button"" value = ""."" onclick = ""form1.answer.value += \'.\' "">', ""<!-- When we click on the '=' button, the onclick() shows the sum results on the calculator screen. -->"", '<input type = ""button"" value = ""="" onclick = ""form1.answer.value = eval(form1.answer.value) "">', '<br>', '<!-- Display the Cancel button and erase all data entered by the user. -->', '<input type = ""button"" value = ""Clear All"" onclick = ""form1.answer.value = \' \' "" id= ""clear"" >', '<br>', '</form>', '</body>', '</html>', '<script>', ""const operator = prompt('Enter operator to perform the calculation ( either +, -, * or / ): ');"", ""const number1 = parseFloat(prompt ('Enter the first number: '));"", ""const number2 = parseFloat(prompt ('Enter the second number: '));"", 'let result; // declaration of the variable.', ""if (operator == '+') { // use + (addition) operator to add two numbers"", 'result = number1 + number2;', ""else if (operator == '-') { // use -  (subtraction) operator to subtract two numbers"", 'result = number1 - number2;', ""else if (operator == '*') { // use * (multiplication) operator to multiply two numbers"", 'result = number1 * number2;', 'result = number1 / number2; // use / (division) operator to divide two numbers', 'window.alert("" Result is"" + result);', '</script>', '</html>', '<!-- Write a program to build the Calculator in JavaScript. -->', '<!DOCTYPE html>', '<title>', 'Calculator Program in JavaScript', '</title>', '<!-- Begins the JavaScript Code -->', '<script>', 'function insert(num)', 'document.form1.textview.value = document.form1.textview.value + num;', 'function equal()', 'var exp = document.form1.textview.value;', 'if(exp)', 'document.form1.textview.value = eval(exp)', '/* Here, we create a backspace() function to remove the number at the end of the numeric series in textview. */', 'function backspace()', 'var exp = document.form1.textview.value;', 'document.form1.textview.value = exp.substring(0, exp.length - 1); /* remove the element from total length ? 1 */', '</script>', '<!-- Start the coding for CSS -->', '<style>', '/* Create the Outer layout of the Calculator. */', '.formstyle', 'width: 300px;', 'height: 330px;', 'margin: 20px auto;', 'border: 3px solid skyblue;', 'border-radius: 5px;', 'padding: 20px;', 'text-align: center;', 'background-color: grey;', '/* Display top horizontal bar that contain some information. */', 'text-align: center;', 'padding: 23px;', 'background-color: skyblue;', 'color: white;', 'input:hover', 'background-color: green;', 'margin: 0;', 'padding: 0;', '/* It is used to create the layout for calculator button. */', 'width: 50px;', 'height: 50px;', 'font-size: 25px;', 'margin: 2px;', 'cursor: pointer;', 'background-color: red;', 'color: white;', '/* It is used to display the numbers, operations and results. */', '.textview{', 'width: 223px;', 'margin: 5px;', 'font-size: 25px;', 'padding: 5px;', 'background-color: lightgreen;', '</style>', '</head>', '<h1> Calculator Program in JavaScript </h1>', '<div class= ""formstyle"">', '<form name = ""form1"">', '<input class= ""textview"" name = ""textview"">', '</form>', '<center>', '<table >', '<td> <input class = ""btn"" type = ""button"" value = ""C"" onclick = ""form1.textview.value = \' \' "" > </td>', '<td> <input  class = ""btn"" type = ""button"" value = ""B"" onclick = ""backspace()"" > </td>', '<td> <input  class = ""btn"" type = ""button"" value = ""/"" onclick = ""insert(\'/\')"" > </td>', '<td> <input class = ""btn"" type = ""button"" value = ""x"" onclick = ""insert(\'*\')"" > </td>', '<tr>', '<td> <input class = ""btn"" type = ""button"" value = ""7"" onclick = ""insert(7)"" > </td>', '<td> <input class = ""btn"" type = ""button"" value = ""8"" onclick = ""insert(8)"" > </td>', '<td> <input class = ""btn"" type = ""button"" value = ""9"" onclick = ""insert(9)"" > </td>', '<td> <input class = ""btn"" type = ""button"" value = ""-"" onclick = ""insert(\'-\')"" > </td>', '<tr>', '<td> <input class = ""btn"" type = ""button"" value = ""4"" onclick = ""insert(4)"" > </td>', '<td> <input class = ""btn"" type = ""button"" value = ""5"" onclick = ""insert(5)"" > </td>', '<td> <input class = ""btn"" type = ""button"" value = ""6"" onclick = ""insert(6)"" > </td>', '<td> <input class = ""btn"" type = ""button"" value = ""+"" onclick = ""insert(\'+\')"" > </td>', '<tr>', '<td> <input class = ""btn"" type = ""button"" value = ""1"" onclick = ""insert(1)"" > </td>', '<td> <input class = ""btn"" type = ""button"" value = ""2"" onclick = ""insert(2)"" > </td>', '<td> <input class = ""btn"" type = ""button"" value = ""3"" onclick = ""insert(3)"" > </td>', '<td rowspan = 5> <input class = ""btn"" style = ""height: 110px"" type = ""button"" value = ""="" onclick = ""equal()""> </td>', '<td colspan = 2> <input class = ""btn"" style = ""width: 106px"" type = ""button"" value = ""0"" onclick = ""insert(0)"" > </td>', '<td> <input class = ""btn"" type = ""button"" value = ""."" onclick = ""insert(\'.\')""> </td>', '</table>', '</center>', '</div>', '</body>', '</html>']",[],[],[]
183,['Palindrome in JavaScript'],"['In this topic, we will learn about Palindrome and validate that the given numbers or strings are Palindrome or not in JavaScript.']","['https://www.javatpoint.com/javascript-call-stack', 'https://www.javatpoint.com/javascript-calculator', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=palindrome-in-javascript1', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-string-split', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-array-reverse-method', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-array-join-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=palindrome-in-javascript2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=palindrome-in-javascript3', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=palindrome-in-javascript4', 'https://www.javatpoint.com/javascript-call-stack', 'https://www.javatpoint.com/javascript-calculator', 'https://www.javatpoint.com/javascript-call-stack']","['https://static.javatpoint.com/javascriptpages/images/palindrome-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/palindrome-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/palindrome-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/palindrome-in-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/palindrome-in-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/palindrome-in-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/palindrome-in-javascript7.png', 'https://static.javatpoint.com/javascriptpages/images/palindrome-in-javascript8.png', 'https://static.javatpoint.com/javascriptpages/images/palindrome-in-javascript9.png', 'https://static.javatpoint.com/javascriptpages/images/palindrome-in-javascript10.png', 'https://static.javatpoint.com/javascriptpages/images/palindrome-in-javascript11.png']",[],[],"['Palindrome Algorithm', 'Check Palindrome number and string by accepting the number through prompt box.', 'Check Palindrome string using built-in Functions', 'Check the Palindrome Number in JavaScript', 'Check the Palindrome String in JavaScript']",[],"['Following are the steps to get the Palindrome in JavaScript, as follow:', 'string.html', 'When the above code is executed, it shows the below image:', 'Now we enter the number or string on the prompt alert box and then click the OK button to validate the given string is Palindrome or not.', 'After that, it shows the below Output.', 'Program2.html', 'When we execute the above code, it shows the below image:', 'In the above images, we entered a string MADAM and then click the OK button to check the given string is a Palindrome or not.', 'After that, it shows the below image:', 'Following are the built-in function to check the palindrome in JavaScript. ', ""Let's create a program to check whether the entered number is a Palindrome in JavaScript."", 'When the above programming code is executed, it returns the below images:', 'We enter the numbers and click on the Check button to validate the given number is Palindrome, as shown below.', ""Let's create a program to check whether the entered string is a Palindrome in JavaScript."", 'When the above programming code is executed, it returns the below image:', 'We entered the string ""MADAM"" and then click on the Submit button in the above output. It displays the below result, as shown:']","['If the given string is not a Palindrome, it shows the string is not a Palindrome. Similarly, we can enter the number and validate whether the given number is Palindrome.', 'In the above image, it shows that ""It is a Palindrome Number."" And if the reversed number is not the same as the original number, it shows that the entered number is not a Palindrome.', 'In the above output, when we entered the string JOHN, it displays the string is not a Palindrome string as it does not match the reversed characters of the string with the original.']","['A palindrome is used to verify a sequence of numbers, strings, or letters that are read left to right and right to left to match the same characters or return the same sequence of characters. In simple terms, when the numbers, strings, or characters are reversed that return the same result as the original numbers or characters, it is called a Palindrome. For example, NITIN, 123454321, madam, etc. Suppose we have a word, madam. When we read the word madam from the forward and the backward end, it returns the same string. Therefore, we can refer to the string or number as the Palindrome.', ""In this program, we use the built-in function like the split () method, reverse () method, and join () method to find the Palindrome of the number or string. Let's consider a JavaScript program to find the Palindrome of the given number using the built-in function."", 'Explanation of the code: When we entered the ""MADAM"" String in the textbox and then click on the Submit button. After that, the original string ""MADAM"" is reversed and compares each string\'s character with the original one. If both strings are equal, it shows that ""It is a Palindrome String"".']","['<head> <title> JavaScript Palindrome </title>', '</head>', '<!-- Use JavaScript programming code to validate the Palindrome numbers or strings. -->', '<script>', 'function validatePalin(str) {', 'const len = string.length;', 'for (let i = 0; i < len / 2; i++) {', 'if (string[i] !== string[len - 1 - i]) {', ""alert( 'It is not a palindrome');"", '}', ""alert( 'It is a palindrome');"", ""const string = prompt('Enter a string or number: ');"", 'const value = validatePalin(string);', 'console.log(value);', '</script>', '</body>', '</html>', '<head> <title> JavaScript Palindrome </title>', '</head>', '<!-- Use JavaScript programming code to validate the Palindrome numbers or strings. -->', '<script>', 'function palindromeFun (str )', ""const arrValue = string.split (''); //"", 'const reveArrVal = arrValue.reverse();', ""const revString = reveArrVal.join('');"", 'if (string == revString) // if string condition is equal to the revString', ""alert('It is a Palindrome string '); // print the Palindrome"", ""alert (' It is not a Palindrome string' ); // if the condition is not true."", ""const string = prompt( ' Enter the string to check Palindrome ');"", 'const value = palindromeFun (string); // call the function', 'console.log(value);', '</script>', '</body>', '</html>', '<!Doctype html>', '<html lang = ""en"">', '<title> Palindrome Program in JavaScript </title>', '<style>', 'text-align: center;', 'padding: 30px;', 'background-color: skyblue;', 'color: white;', '.palindrome {', 'margin: auto;', 'width: 40%;', 'border: 3px solid gray;', 'border-radius: 5px;', 'padding: 30px;', '#palindrome {', 'width: 100%;', 'border: 3px solid gray;', 'border-radius: 5px;', 'padding: 6px;', '</style>', '</head>', '<body>', '<h1> Palindrome Program in JavaScript </h1>', '<div class=""palindrome"">', '<label> Enter any string or number : </label> <br> <br>', '<input id= ""palindrome""> <br> <br>', '<button type = ""button"" onclick = ""palindrome()"" > Check </button>', '</div>', '</body>', '</html>', '<script>', 'function palindrome() {', 'var a, b, no, temp = 0;', 'no = Number(document.getElementById (""palindrome"").value);', 'b = no;', 'while (no > 0)', 'a = no % 10;', 'no = parseInt( no / 10);', 'temp = temp*10 + a;', 'if (temp == b)', 'alert( ""It is a Palindrome Number"");', 'alert (""it is not a Palindrome Number"");', '</script>', '<title> Palindrome Program in JavaScript </title>', '<style>', 'text-align: center;', 'padding: 30px;', 'background-color: skyblue;', 'color: white;', '.palin {', 'margin: 30px;', 'width: 80%;', 'border: 3px solid gray;', 'border-radius: 5px;', 'padding: 30px;', '#pa2 {', 'width: 50%;', 'border: 3px solid gray;', 'border-radius: 5px;', 'padding: 10px;', '</style>', '</head>', '<h1> Palindrome Program in JavaScript </h1>', '<div class=""palin"">', '<label> Enter any string : </label>', '<input type ""text"" id= ""pa""> <br> <br>', '<label> Resultant string : </label>', '<input type = ""text"" id = ""pa2"" > </b> <br>', '<input type= ""submit"" onclick = ""palindrome()"" > <br>', '</div>', '<script type = ""text/javascript"">', 'function palindrome()', 'var a= document.getElementById(""pa"").value;', 'var b = """";', 'for (i = a.length-1; i >= 0; i--)', 'b = b + a[i]', 'if (a == b)', 'document.getElementById(""pa2""). value = b + "" is a Palindrome String "";', 'document.getElementById(""pa2""). value = b + "" is not a Palindrome String"";', '</script>', '</body>', '</html>']",[],[],"['|||Get the strings or numbers from the user.|||Take a temporary variable that holds the numbers.|||Reverse the given number.|||Compare the original number with the reversed number|||If the temporary and original number are same, it the number or string is a Palindrome.|||Else the given string or number is not the Palindrome.||||||The split (\' \') function is used to convert the string into the individual array characters.|||const arrayChar = string.split( \' \'); // [""A"", ""P"", ""P"", ""L"", ""E""]|||A reverse () function helps to reverse the position of the individual array characters.|||const reverseArray = arrayChar.reverse (); // [""E"", ""L"", ""P"", ""P"", ""A""]|||The join () method is used to combine the individual array characters into the string.|||const reverseString = reverseArray.Join (\' \'); // return string is: ""ELPPA""|||']"
184,['JavaScript Call Stack'],"[""In order to manage the execution contexts, the JavaScript engine uses a call stack. The working of the JS call stack is performed internally, but we will understand it's working here.""]","['https://www.javatpoint.com/fibonacci-series-in-javascript', 'https://www.javatpoint.com/palindrome-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/data-structure-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/data-structure-stack', 'https://www.javatpoint.com/fibonacci-series-in-javascript', 'https://www.javatpoint.com/palindrome-in-javascript', 'https://www.javatpoint.com/fibonacci-series-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-call-stack.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-call-stack2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-call-stack3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-call-stack4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-call-stack5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-call-stack6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-call-stack7.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-call-stack8.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-call-stack9.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-call-stack10.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-call-stack11.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-call-stack12.png']",[],['What is JS Call Stack'],"['Role of JavaScript Call Stack', 'JavaScript Call Stack Example', 'How the code works', 'When does call stack overflow']",[],"['There are the following points where the call stack is being used by the JS engine:', ""Let's see an example to understand the use of the JavaScript Call Stack function:"", 'In the above code, we have created two functions, getSum () and findavg (), and the execution of the script begins in the following described steps:', 'The below example describes the stack overflow condition:', 'Point to be noted:']","[""In this section, we will discuss the JavaScript call stack, it's working. We will also discuss an example that will make us to better understand the concept."", 'So, in the above code, we can see that we have invoked the test () function recursively, which means this function will execute until the host environment maximum call size exceeded, and thus the stack throws the stack overflow error.']","['The JavaScript execution contexts (Global execution context and function execution context) are executed via the JavaScript engine. In order to manage these execution contexts, the JS engine uses the call stack. So, the JS call stack is a data structure that keeps track information of the functions being called and executed. Thus, if the user invokes a function for execution, the specified function gets pushed/added in the call stack, and when the user returns from a function, it means the function is popped out from the call stack. Thus, call stack is a normal stack data structure that follows the stack order principal, i.e., LIFO (Last In First Out).', 'The overflow condition occurs when there is no more space left in the call stack, or the condition may occur when there is a recursive function that has no exit point. The JavaScript call stack is defined with a fixed size that depends on the implementation of the host environment (which is either the Node.js or web browser). So, when the limit of the defined size of the stack is exceeded, then stack overflow occurs. Thus, it throws a stack overflow error.', 'JavaScript is a synchronous and single-threaded programming language. It means that when any script gets executed, then the JS engine executes the code line by line, starting from top to bottom. So, the JavaScript engine has only one call stack, and it can do only one thing at a time.']","['function getSum(x, y) {', 'return x+ y;', 'function findavg(x,y) {', 'return getSum(x,y) / 2;', 'let z = findavg(10, 20);', 'function test(){', 'test();', 'test();']",[],[],"['|||When any script is executed by the user, the JS engine creates a Global execution context and then adds it on the call stack and at the top of the stack so that it may get executed.||||||When any function is invoked, the JS engine creates a Function execution context and adds it on the stack and at the top of the stack so that the invoked function may get executed.||||||In case a function invokes another function, the JS engine creates a Function execution context for the invoked function, adds it to the top of the stack, and begins the execution.||||||When any function execution gets completed, the JS engine pops it out of the stack and continues the execution of the other functions stored in the stack.||||||If no space is left in the stack and we try to push more functions, it throws a ""stack overflow"" error, and if no further execution context is present in the call stack, it throws a ""Stack Underflow"" error.|||&&&|||When the execution of the script begins, the JS engine initially creates a global execution context (i.e., global () function) and adds it to the top of the call stack.|||The global execution moves to the execution phase of the life cycle after entering the creation phase, as you can see in the below image:||||||The findavg (10, 20) function gets invoked, and so the JS engine creates the function execution context for it. Then push it on the top of the call stack.|||So, now in the call stack, two functions are pushed, i.e., global () and findavg(), and on the top of the stack, the findavg() function is present, as you can see in the below image:||||||The JS engine begins the execution of the findavg () function because it exists on the top of the stack, as you can see in the image:||||||As in the code, the getSum () function is invoked inside the findavg () function definition, so the JS engine creates a function execution context for the getSum () function and pushes it on the top of the stack.|||Now, in the stack, there are three functions present, which are global (), findavg (), and getSum () functions, as you can see in the below image:||||||There are two functional execution contexts and a global execution context as you can see below:||||||So, the JS engine executes the getSum () function first and pops it out of the call stack.||||||Similarly, the findavg () function gets executed and gets out of the call stack.||||||As both executions of the functions are completed, and no other function for execution is left in the call stack. The JS engine stops the execution of the call stack and moves for the other execution tasks.|||']"
185,['Fibonacci series in JavaScript'],['This section will discuss the Fibonacci series and how we can generate the Fibonacci series in JavaScript.'],"['https://www.javatpoint.com/javascript-appendchild-method', 'https://www.javatpoint.com/javascript-call-stack', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-appendchild-method', 'https://www.javatpoint.com/javascript-call-stack', 'https://www.javatpoint.com/javascript-appendchild-method']","['https://static.javatpoint.com/javascriptpages/images/fibonacci-series-in-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/fibonacci-series-in-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/fibonacci-series-in-javascript3.png', 'https://static.javatpoint.com/javascriptpages/images/fibonacci-series-in-javascript4.png', 'https://static.javatpoint.com/javascriptpages/images/fibonacci-series-in-javascript5.png', 'https://static.javatpoint.com/javascriptpages/images/fibonacci-series-in-javascript6.png', 'https://static.javatpoint.com/javascriptpages/images/fibonacci-series-in-javascript7.png', 'https://static.javatpoint.com/javascriptpages/images/fibonacci-series-in-javascript8.png', 'https://static.javatpoint.com/javascriptpages/images/fibonacci-series-in-javascript9.png', 'https://static.javatpoint.com/javascriptpages/images/fibonacci-series-in-javascript10.png']",[],[],"['Representation of the Fibonacci series', 'Steps to find the Fibonacci series of n numbers', 'Get the Fibonacci series up to n terms', 'Get the Fibonacci series of the first 8 terms', 'Get the sum of the first 7 terms of the Fibonacci series', 'Get the Fibonacci series using Recursion Function', 'Get the Fibonacci series in Reverse Order']",[],"['Fn = (Fn -1) + (Fn - 2)', 'Here is generated series: 0, 1, 1, 2, 3, … Similarly, we can find the series of the next terms.', 'Following are the steps to find the series of the Fibonacci Series:', 'Step 1: Declare the variables x, y, z, n, i', 'Step 2: Initialize the local variable x = 1, y = 1, i = 2', 'Step 3: Read a number from the user', 'Step 4: Display the value of x and y', 'Step 5: Repeat the process of Fibonacci series until i > n', 'Step 6: Stop the execution of the Fibonacci series', ""Let's consider an example to get the Fibonacci series up to a desired numbers in JavaScript using for loop."", 'Program1.html', 'After that, it displays the Fibonacci series that starts with 0 and 1. And the next term is the addition of its previous two terms, as shown below.', ""Let's consider an example to get the Fibonacci series of the first 8 terms in JavaScript using for and if statements."", 'Program3.html', ""Let's consider an example to get the sum of the Fibonacci series in JavaScript using function and for loop."", 'Simple2.html', 'When the above code is executed, it displays a prompt box that takes a number to return the sum of the Fibonacci series.', 'Here we have entered 7 as the input to return the series sum, as shown below.', 'Click on the OK button.', 'In the above image, it returns the sum of first 7 terms is 21.', ""Let's consider an example to get the Fibonacci series in JavaScript using recursive function."", 'Recursion.html', ""Let's consider an example to get the Fibonacci series in Reverse Order using for loop."", 'Reverse.html ', 'When the above code is executed, it shows a prompt box to take a number from the user.']","['Fn represents the addition of the previous terms (Fn - 1) and (Fn - 2). Here Fn-1 is the first terms, and Fn-2 is the second terms of the Fibonacci series.', 'When we execute the above program, it displays the given image. There is a prompt box to define the Fibonacci series limits, and then click the OK button to continue.', 'Here we have entered 10 as the input and then click the OK button. After that, it generates the Fibonacci series of the first 10 terms in ascending order and in reverse order.']","['Fibonacci series is a series that generates subsequent series of numbers by the addition of the two previous numbers. The first two terms of the Fibonacci series are zero and one, respectively. And the next terms are the addition of the two previous terms.', 'In the above program, we have created the Fibonacci series using the recursion function that avoids the loop to display the series. The recursion function continuously calls the recur() function to print the series till the recur(12) is satisfied. At each iteration, the value of recur() function is decremented by 1 and store the value into the total variable.']","['<title> Fibonacci Series in JavaScript </title>', '</head>', '<script>', 'var n1 = 0,  n2 = 1, next_num, i;', 'var num = parseInt (prompt ("" Enter the limit for Fibonacci Series ""));', 'document.write( ""Fibonacci Series: "");', 'for ( i = 1; i <= num; i++)', '{  document.write ("" <br> "" +  n1); // print the n1', 'next_num = n1 + n2; // sum of n1 and n2 into the next_num', 'n1 = n2; // assign the n2 value into n2', 'n2 = next_num; // assign the next_num into n2', '</script>', '</body>', '</html>', '<title>', 'Fibonacci Series in JavaScript </title>', '</head>', '<script type = ""text/javascript"">', 'var number = 8;', 'var num1 = 0, num2 = 1;', 'var next_term = 0;', 'document.write( "" Fibonacci series of the number 8: "" + ""<br>"")', 'for (i = 1; i < number; i++) // use for loop to iterate the series till given number', 'if ( i <= 1)', 'next_term = i; // assign the variable i to next_term', 'next_term = num1 + num2; // sum the num1 and num2', 'num1 = num2;', 'num2 = next_term;', 'document.write( "" Adding "" + num1 + "" and "" + next_term + "" = "" + (num1 + num2) + ""<br>"" );', '</script>', '</body>', '<title>', 'Fibonacci Series in JavaScript </title>', '</head>', '<script type = ""text/javascript"">', 'function fibo( num)', 'var n1 = 0; // declaration of variables n1, n2, i and temp.', 'var n2 = 1;', 'var temp;', 'var i = 0;', 'for (i = 0; i < num; i++)', 'temp = n1 + n2; // store the sum of n1 and n2 in temp variable.', 'n1 = n2; // assign the n2 value into the n1 variable', 'n2 = temp; // assign the new value of temp into n2 variable', 'return n2;', ""const f1 = parseFloat (prompt (' Enter a number to get the sum of Fibonacci Series '));"", 'window.alert( ""The sum of Fibonacci Series is: "" +fibo(f1) );  /* print the sum of series */', '</script>', '</body>', '</html>', '<head>', '<title>', 'Fibonacci Series using Recursion in JavaScript. </title>', '</head>', '<body style= ""text-align: center;"">', '<h2> Fibonacci Series in JavaScript Using Recursion </h2>', '<script>', 'function recur(num)', 'if (num == 1)', 'return [0, 1];', 'total = recur (num - 1);', '/* push function add previous two terms and returns store the result into the total variable. */', 'total.push( total[ total.length - 1] + total[ total.length - 2]);', 'return total;', 'document.write(""Fibonacci Series of f(12) in JavaScript: "" + recur( 12 ) + ""<br>"");', '</script>', '</body>', '</html>', '<title>', 'Reverse Fibonacci Series', '</title>', '</head>', '<body style= ""text-align: center;"">', '<h2> Fibonacci Series in Reverse Order </h2>', '<script>', 'var a = 1, b = 0, res, num;', 'num = prompt( ""Enter the number of terms "");', 'document.write (""Fibonacci Series of "" + num + "" terms  is "" );', 'for ( var i =0; i < num; i++)', 'document.write (""  "" + b);', 'res = a + b;', 'b = res;', 'document.write( """" + ""<br>"");', 'document.write( ""Fibonacci Series of "" + num + "" terms in Reverse Order is "" + ""<br>"");', 'for ( i = 0; i < num; i++)', 'document.write( ""  "" +  a);', 'res = b - a;', 'a = res;', '</script>', '</body>', '</html>']",[],[],"['|||First terms of the series is: 0|||Second term of the series is: 1|||Third terms of the series is: (0 + 1) = 1|||Fourth terms of the series is: (second + third) term = (1 + 1) = 2|||Fifth term of the series is: (Third + fourth) = 1 + 2 = 3||||||z = x + y|||Display the value of z|||x = y, y = z|||i = i + 1|||']"
186,['JavaScript appendchild() method'],"[""The appendChild() is a method of the Node interface in JavaScript. The appendChild() method enables us to add a node to the end of a specified parent node's child node list.""]","['https://www.javatpoint.com/ripple-effect-javascript', 'https://www.javatpoint.com/fibonacci-series-in-javascript', 'https://www.javatpoint.com/ripple-effect-javascript', 'https://www.javatpoint.com/fibonacci-series-in-javascript', 'https://www.javatpoint.com/ripple-effect-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-appendchild-method.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-appendchild-method2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-appendchild-method3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-appendchild-method4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-appendchild-method5.png']",[],['JavaScript appendChild() method examples'],"['Syntax:', 'Example 1: Simple appendChild() example', 'Example 2: Multiple nodes appends dynamically', 'Example 3: Moving a node within the document']",[],"['The syntax of the appendchild() method is:', 'Now, we will take few examples of appendChild(), which helps to understand how it works.', 'If we have an HTML list and want to add a new item to the end, we could use the appendChild() method.', 'Output: After executing this above code, we will get the output as shown below:', 'In this example, we append the multiple nodes dynamically in the parent node.', 'Output: After executing the above code, we will get the output as shown below:', 'Explanation:', ""Now, let's take an example to understand how we can move a node within the document."", 'Output: After executing the above code, we will get the output as shown below:', 'Explanation:']","['As we have seen above there is a Append button, when we click on this button, the appendChild() method add the child node value to its parent node, as shown below:', 'As we have seen in the screenshot, there is a Submit button. When we click on this button, the appendChild() method add the multiple child nodes dynamically, as shown below:']","['In the syntax, the childNode is the node that adds to the specified parent node. The appendChild() method returns the appended child node. The appendChild() method transfers the childNode from its current position to the new position if the childNode is relative to an existing node in the document.']","['parentNode.appendChild(childNode)', '<!DOCTYPE html>', '<title>JavaScript appendChild() Method</title>', '<style>', '</style>', '</head>', '<h1>JavaTPoint</h1>', '<h2>JavaScript appendChild() Method</h2>', '<ul id=""languages"">', '<li>Python</li>', '<li>Java</li>', '<li>Data Structure</li>', '</ul>', '<button onclick=""append()"">Append</button>', '<script>', 'function append() {', 'var node = document.createElement(""LI"");', 'var textnode =', 'document.createTextNode(""C#"");', 'node.appendChild(textnode);', 'document.getElementById(""languages"").appendChild(node);', '}', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<title>JavaScript appendChild() Method</title>', '</head>', '<h1>JavaTPoint</h1>', '<h2>JavaScript appendChild() Method</h2>', '<div id=""menu""></div>', '<button onclick=""append()"">Submit</button>', '<script>', 'function append() {', 'var lang = [""C#"", ""Java"", ""Python""];', 'var ul = document.createElement(""ul"");', 'for(i = 0; i < lang.length; i++){', 'var li = document.createElement(""li"");', 'li.innerHTML = lang[i];', 'ul.appendChild(li);', 'document.getElementById(""menu"").appendChild(ul);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '<title>JavaScript appendChild()</title>', '</head>', '<h1>JavaTPoint</h1>', '<h2>JavaScript appendChild() Method</h2>', '<ul id=""first-list"">', '<li>Python</li>', '<li>JavaScript</li>', '<li>C++</li>', '<ul id=""second-list"">', '<li>Ruby</li>', '<li>Java</li>', '<li>C#</li>', '<script>', 'function createMenuItem(lang) {', ""let li = document.createElement('li');"", 'li.textContent = lang;', 'return li;', '}', ""const firstList = document.querySelector('#first-list');"", 'const python = firstList.firstElementChild;', ""const secondList = document.querySelector('#second-list');"", 'secondList.appendChild(python)', '</script>', '</body>', '</html>']",[],[],"['|||Firstly, we create a new <ul> element using a createElement() function.|||After that, we create <li> elements dynamically and append them to the <ul>|||Finally, we append the <ul> element to <div> |||&&&|||First of all, we need to choose the first element from its first list using the querySelector()|||Now, choose the first child element from the first list.|||After that, choose the second element from its second list using the querySelector()|||Finally, append the first child element to the second list using the appendChild()|||']"
187,['Ripple effect JavaScript'],"['In this article, we will explain about the javaScript and the ripple effect. After that, we will learn the various practical examples of ripple effects with the help of JavaScript.']","['https://www.javatpoint.com/check-if-the-value-exists-in-array-in-javascript', 'https://www.javatpoint.com/javascript-appendchild-method', 'https://www.javatpoint.com/check-if-the-value-exists-in-array-in-javascript', 'https://www.javatpoint.com/javascript-appendchild-method', 'https://www.javatpoint.com/check-if-the-value-exists-in-array-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/ripple-effect-javascript.png', 'https://static.javatpoint.com/javascriptpages/images/ripple-effect-javascript2.png', 'https://static.javatpoint.com/javascriptpages/images/ripple-effect-javascript3.png']",[],"['Example 1:', 'Example 2:', 'Example 3:']","['What do you mean by JavaScript?', 'What do you mean by ripple effect JavaScript?', 'Various examples of the ripple effect with the help of JavaScript.']",[],"['Explanation:', 'Following is the output of this example:', 'Explanation:', 'Following is the output of this example:', 'Explanation:', 'In the above example, we have created a water ripple effect with the help of JavaScript. When we hover on the image, the ripple effect is shown.', 'Following is the output of this example:']","['JavaScript is a client-side high-level, interpreted programming and scripting language used to make web pages more interactive. It enables you to implement complex and beautiful designs on web pages.', 'In JavaScript, the ripple effect provides an immediate visual confirmation at the point of contact when the users interact with UI elements. The interaction is commonly an action that you want your visitors to take.', 'In the above example, we have created a water ripple effect with the help of JavaScript. When we hover on the image, the water ripple effect is shown.', 'In the above example, we have created a water ripple effect on the button with the help of JavaScript. When we hover on the button, the ripple effect is shown.']",[],"['<! DOCTYPE html>', '<html lang = ""en"">', '<meta charset = ""UTF-8"">', '<meta name = ""viewport"" content = ""width=device-width, initial-scale = 1.0"">', '<meta http-equiv=""X-UA-Compatible"" content = ""ie=edge"">', '<title> Water ripple effect using JavaScript </title>', '</head>', '<style>', 'padding: 0;', 'margin: 0;', 'color: #404E67;', 'background: #F5F7FA;', ""font-family: 'Open Sans', sans-serif;"", '.full-landing-image', 'width: 100%;', 'height: 100vh;', 'background:', 'linear-gradient(', 'rgba(0, 0, 0, 0.6),', 'rgba(0, 0, 0, 0.6)', '),url(""1.png"") no-repeat center;', 'position: relative;', 'float: left;', '.mid h2 {', ""font-family: 'Roboto', sans-serif;"", 'font-weight: 800;', 'color: white;', 'text-transform: uppercase;', 'margin: 0;', 'position: absolute;', 'top: 60%;', 'left: 60%;', 'font-size: 2rem;', 'transform: translate(-50%, -50%);', '.mid h1 {', ""font-family: 'Roboto', sans-serif;"", 'font-weight: 900;', 'color: white;', 'text-transform: uppercase;', 'margin: 0;', 'position: absolute;', 'top: 40%;', 'left: 60%;', 'font-size: 2rem;', 'transform: translate(-50%, -50%);', '.glow {', 'font-size: 80px;', 'color: #fff;', 'text-align: center;', 'animation: glow 1s ease-in-out infinite alternate;', '@-webkit-keyframes glow {', 'from {', 'text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #e60073, 0 0 40px #e60073, 0 0 50px #e60073, 0 0 60px #e60073, 0 0 70px #e60073;', 'text-shadow: 0 0 20px #fff, 0 0 30px #ff4da6, 0 0 40px #ff4da6, 0 0 50px #ff4da6, 0 0 60px #ff4da6, 0 0 70px #ff4da6, 0 0 80px #ff4da6;', '</style>', '<script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js""> </script>', '<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery.ripples/0.5.3/jquery.ripples.min.js""> </script>', '<script>', '$(document).ready (function () {', '$("".full-landing-image"").ripples ({', 'resolution: 500,', 'perturbance: 0.04,', '</script>', '<div class=""full-landing-image mid"">', '<h1 class=""glow""> Example <br> </h1>', '<h2 class=""glow""> water ripple effect using JavaScript </h2>', '</body>', '</html>', '<! DOCTYPE html>', '<meta charset = ""UTF-8"">', '<meta name = ""viewport"" content = ""width=device-width, initial-scale = 1.0"">', '<meta http-equiv = ""X-UA-Compatible"" content = ""ie=edge"">', '<title> Water ripple effect using JavaScript </title>', '<link href = ""https://fonts.googleapis.com/css?family=Open+Sans"" rel = ""stylesheet"">', '</head>', '<style>', ""@import url('https://fonts.googleapis.com/css?family=Montserrat:700');"", 'box-sizing: border-box;', 'box-sizing: inherit;', '*:before {', 'box-sizing: inherit;', '*:after {', 'box-sizing: inherit;', 'position: fixed;', 'width: 100%;', 'height: 100%;', 'display: flex;', 'flex-direction: row;', 'justify-content: center;', 'align-items: center;', 'background: pink;', ""font-family: 'Open Sans', sans-serif;"", ""font-family: 'Roboto', sans-serif;"", 'font-weight: 900;', 'color: white;', 'text-transform: uppercase;', 'font-size: 2rem;', ""font-family: 'Roboto', sans-serif;"", 'font-weight: 800;', 'color: white;', 'text-transform: uppercase;', 'font-size: 2rem;', 'button {', 'position: relative;', 'display: block;', 'margin: 0 auto;', 'background: black;', 'color: red;', 'text-align: center;', 'font-size: 26px;', 'font-family: ""Montserrat"";', 'font-weight: 700;', 'padding: 20px 45px;', 'letter-spacing: .25em;', 'text-transform: uppercase;', 'border: 0;', 'overflow: hidden;', 'border: 5px white solid;', 'cursor: pointer;', ""font-family: 'Open Sans', sans-serif;"", '&:active,', '&:visited,', '&:focus {', 'outline: 0;', 'border: 0;', '/*  Ripple */', 'width: 0;', 'height: 0;', 'border-radius: 50%;', 'background: rgba(255, 255, 255, 0.5);', 'transform: scale(0);', 'position: absolute;', 'opacity: 1;', '.rippleAnimation {', 'animation: ripple .6s linear;', '@keyframes ripple {', '100% {', 'transform: scale(2);', 'opacity: 0;', '</style>', '<script src=""http://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js""> </script>', '<script>', '$(document).ready (function () {', ""let btn = document.querySelector('button');"", 'function ripple(e) {', 'let posX = this.offsetLeft;', 'let posY = this.offsetTop;', 'let buttonWidth = this.offsetWidth;', 'let buttonHeight =  this.offsetHeight;', ""let ripple = document.createElement('span');"", 'this.appendChild(ripple);', 'if(buttonWidth >= buttonHeight) {', 'buttonHeight = buttonWidth;', '} else {', 'buttonWidth = buttonHeight;', 'var x = e.pageX - posX - buttonWidth / 2;', 'var y = e.pageY - posY - buttonHeight / 2;', 'ripple.style.width = `${buttonWidth}px`;', 'ripple.style.height = `${buttonHeight}px`;', 'ripple.style.top = `${y}px`;', 'ripple.style.left = `${x}px`;', ""ripple.classList.add('rippleAnimation');"", 'setTimeout(() => {', 'this.removeChild(ripple);', '}, 1000);', ""btn.addEventListener('click', ripple);"", '</script>', '<button> <h1> Example </h1> <br> <br>', '<h2> Water ripple Effect animation on hover </h2> </button>', '</body>', '</html>', '<! DOCTYPE html>', '<html lang=""en"">', '<meta charset=""UTF-8"">', '<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">', '<meta http-equiv=""X-UA-Compatible"" content=""ie=edge"">', '<title> Water ripple effect </title>', '</head>', '<style>', 'height: 100%;', ""font-family: 'Roboto', sans-serif;"", 'font-weight: 900;', 'color: white;', 'text-transform: uppercase;', 'margin: 0;', 'top: 60%;', 'left: 60%;', 'font-size: 2rem;', 'transform: translate(-50%, -50%);', ""font-family: 'Roboto', sans-serif;"", 'font-weight: 700;', 'color: white;', 'text-transform: uppercase;', 'margin: 0;', 'top: 60%;', 'left: 60%;', 'font-size: 1rem;', 'transform: translate(-50%, -50%);', 'color: #fff;', 'font-size: 16px;', 'font-family: ""Helvetica Neue"",Helvetica,Arial,sans-serif;', 'background-image: url(""3.jpg"");', 'background-size: cover;', 'background-position: 50% 0;', 'height: 100%;', 'text-align: center;', 'margin: 0;', 'padding: 0;', 'body:before {', ""content: '';"", 'display: inline-block;', 'vertical-align: middle;', 'height: 100%;', 'section {', 'display: inline-block;', 'vertical-align: middle;', 'padding:  100px;', 'max-width: 500px;', 'text-shadow: 0 1px 2px rgba(0,0,0,0.5);', 'box-shadow: 0 5px 15px rgba(0,0,0,0.5);', '/* ignore the code below */', '.link-area', 'position: fixed;', 'bottom: 20px;', 'left: 20px;', 'padding: 15px;', 'border-radius: 40px;', 'background: tomato;', '.link-area a', 'text-decoration: none;', 'color: #fff;', 'font-size: 25px;', '.glow {', 'font-size: 80px;', 'color: #fff;', 'text-align: center;', 'animation: glow 1s ease-in-out infinite alternate;', '@-webkit-keyframes glow {', 'from {', 'text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px #e60073, 0 0 40px #e60073, 0 0 50px #e60073, 0 0 60px #e60073, 0 0 70px #e60073;', 'to {', 'text-shadow: 0 0 20px #fff, 0 0 30px #ff4da6, 0 0 40px #ff4da6, 0 0 50px #ff4da6, 0 0 60px #ff4da6, 0 0 70px #ff4da6, 0 0 80px #ff4da6;', '</style>', '<script src=""http://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js""> </script>', '<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery.ripples/0.5.3/jquery.ripples.js""> </script>', '<script>', '$(document).ready (function () {', ""$('body').ripples ({"", 'resolution: 512,', 'dropRadius: 20,', 'perturbance: 0.04,', '</script>', '<section>', '<header>', '<h1 class =?glow? > Example <br> </h1> <h2> Water Ripple Effect using JavaScript </h2>', '</header>', '</section>', '</body>', '</html>']",[],[],[]
188,['Convert object to array in Javascript'],"[""Javascript, being a broad and varied-natured programming language consists of an ample amount of features to convert an object into an array. These methods are predefined in the language itself. Let's look at the different ways of converting objects to arrays in javascript.""]","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/javascript-vs-nodejs', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-objects', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-array', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/javascript-vs-nodejs', 'https://www.javatpoint.com/#']",[],[],[],['Summary'],[],"['Consider the below examples to understand the above methods.', 'Method 1: Object.keys()', 'Method 2: Object.values()', 'Method 3: Object.entries()', 'Example 1:', 'Example 2:', 'Example 3:']","['To convert an object into an array in Javascript, you can use different types of methods. Some of the methods are Object.keys(), Object.values(),and Object.entries().', 'In this method, we have used the Object.values() method to fetch the properties of the animal object. The Object.values() method converts the defined object animal to an array and the output is printed on the console as shown above.', ""Let's look at some more different coding examples to understand more about the conversion of javascript objects to arrays. Consider the snippets below."", 'In the above example, we have taken an array with their respective properties and defined them with their values. Here, the Object.entries() method covers those properties of the object into an array as shown in the output.']","[""In the above example code, we have used the Object.keys() method to convert the property's name of the animal object to an array. We have defined variable animal, which has the first and the last initials of the animal object and later we have converted them into an array through the help of Object.keys() method."", 'In this method, the object is converted into an array as shown in the output. The Object.entries() methods convert the enumerable string-based properties of the object to an array. The output is printed in such a way because the Object.entries() methods correctly defines every single aspect of the object in a better manner so that while debugging you can take note of which property is assigned to which string of the defined object.', 'These are some of the most common ways of converting an object to an array. The above ways can also be collectively defined into a single code snippet and the methods can also be collectively applied with the properties of the objects. They all will be converted into respective arrays. Consider below examples which show the usage of defining objects collectively into one snippet.', 'In the above snippet, we have collectively defined the constant variable Snakes whose properties are defined as venom and attack. We have assigned different values to all the properties of different snakes. You can now use all the above-defined methods discussed along with the keys, entries, or values.', 'Here, the values will be displayed according to the order of keys defined in the object variable. We have assigned different numbers for different key values and the variable convert will map these keys with the Object.keys() method and it will later be displayed on the console in the form of arrays of the defined object variable.', 'Here, we have defined variable named superHeroes with the object values as shown above. As we have already studied the three methods of converting the object to an array in Javascript, we are applying the same concept here to convert them into the array.', 'In this article, we came across various methods in Javascript that can be used to convert objects with some indefinite or definite properties into arrays of different types. We also came across common methods like keys, objects, and entries, and some others to name a few. These methods are very useful once you consider their virtue of usage since in most of the cases it is required to get the output in an associated or say sorted manner. We may also define these objects by converting them into an array for carrying out abstraction methods so that only the desired data is displayed and not the other.']","['const animal = {', ""first: 'The',"", ""last: 'Lion'"", 'const propertyNames=Object.keys(animal);', 'console.log(propertyNames);', 'const animal = {', ""first: 'The',"", ""last: 'Lion'"", 'const propertyValues=Object.values(animal);', 'console.log(propertyValues);', 'const animal = {', ""first: 'The',"", ""last: 'Lion'"", 'const entries=Object.entries(animal);', 'console.log(entries);', 'const Snakes = {', ""'Cobra':{"", 'Venom: 96%,', 'Attack: 99%', ""'Viper':{"", 'Venom: 98%,', 'Attack: 96%', ""'InlandTaipan':{"", 'Venom: 100%,', 'Attack: 100%', 'var object = {""0"":5,""1"":7,""2"":4,""3"":6,""4"":7,""5"":8,""6"":12,""7"":11,""8"":2}', 'var covert  = Object.keys(object).map(function(key)', 'return [Number(key), object[key]];', 'console.log(convert);', ""var superHeroes = {'Captain America':1,'Thor':8,'Iron Man':null};"", 'var k = Object.keys(superHeroes);', 'var v = Object.values(superHeroes);', 'const sampleArray = [', ""['one', 1],"", ""['two', 2],"", 'Object.fromEntries(sampleArray);']","['The Lion', ""['The', 'Lion']"", ""[['first', 'The '] , ['last', 'Lion'] ]"", '{ one: 1, two: 2 }']",[],[]
189,['JavaScript Async/Await'],"['JavaScript is always synchronous and single-threaded that provides the event loops. The event loops enable us to queue up an activity. This activity will not happen until the loops become available after the program that queued the action has completed the execution. However, our program contains a large number of functionalities, which causes our code to be asynchronous. The Async/Await functionality is one of them. Async/Await is an extension of promises that we get as language support.']","['https://www.javatpoint.com/javascript-blob', 'https://www.javatpoint.com/javascript-vs-nodejs', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-blob', 'https://www.javatpoint.com/javascript-vs-nodejs', 'https://www.javatpoint.com/javascript-blob']","['https://static.javatpoint.com/javascriptpages/images/javascript-async-and-await.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-async-and-await2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-async-and-await3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-async-and-await4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-async-and-await5.png']",[],"['JavaScript Async', 'JavaScript Await', 'Error Handling']","['Syntax:', 'Example:', 'Syntax:', 'Example:', 'Example 2: Waiting for a timeout in the program', 'Syntax:', 'Example:']",[],"['In this article, we are going to discuss the JavaScript Async/Await with some examples.', 'The syntax of JavaScript may be defined as:', 'It is the same as:', ""Let's take an example to understand how we can use a JavaScript Async in the program."", 'Output: After executing the above code, we will get the output shown below in the screenshot.', 'The syntax of JavaScript Await function may be defined as:', ""Let's take an example to understand how we can use the JavaScript Await function in the program."", 'Output: After executing this code, we will get the output as shown below in the screenshot:', ""Let's take a program to understand the JavaScript Await using timeout waiting function."", 'Output: After executing this code, we will get the output as shown below in the screenshot.', 'When we execute the code, it will show the result after 2 seconds. It uses the timeout function.', 'The syntax of error handling may be defined as:', ""Let's take an example to understand the error handling in the JavaScript Async and Await function."", 'Output: After executing this code, we will get the output as shown below in the screenshot.']","['But there is another option: the all-powerful try/catch block. If we want to handle errors directly inside the async function, we may use try/catch in the same way we would in synchronous code.']","['An async function is a function that is declared with the async keyword and allows the await keyword inside it. The async and await keywords allow asynchronous, promise-based behavior to be written more easily and avoid configured promise chains. The async keyword may be used with any of the methods for creating a function.', 'JavaScript Await function is used to wait for the promise. It could only be used inside the async block. It instructs the code to wait until the promise returns a response. It only delays the async block. Await is a simple command that instructs JavaScript to wait for an asynchronous action to complete before continuing with the feature. It\'s similar to a ""pause until done"" keyword. The await keyword is used to retrieve a value from a function where we will usually be used the then() function. Instead of calling after the asynchronous function, we\'d use await to allocate a variable to the result and then use the result in the code as we will in the synchronous code.', ""It is very easy to handle errors in async functions. Promises have a catch() method for dealing with rejected promises, and because the async functions only return a promise, we may call the function and add a method to the end. We should use the promise's capture in the same way as we would any other catch. And all are easy to grasp. Remember that a then callback will fail. It can generate an error (with an explicit throw or by trying to access a property of a null variable). These crashes would also be caught by the grab process. Remind yourself that the promise's capture approach is similar to a standard catch."", ""It may appear sloppy, but it is a very simple way to handle errors without appending. After the function calls, use the catch() method. It is up to us how we manage mistakes, and which approach we use should be dictated by how our code was written. Over time, we'll get a sense of what needs to be achieved.""]","['Async function myfirstfunction() {', 'return ""Hello World""', 'async function myfirstfunction() {', 'return Promise.resolve(""Hello World"");', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '<title>JavaScript Async</title>', '</head>', '<h2>JavaScript Async</h2>', '<p id=""main""></p>', '<script>', 'function myDisplayer(some) {', 'document.getElementById(""main"").innerHTML = some;', 'async function myfirstFunction() {', 'return ""Hello World!!!"";', 'myfirstFunction().then(', 'function(value) {myDisplayer(value);},', 'function(error) {myDisplayer(error);}', '</script>', '</body>', '</html>', 'let value = await promise;', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '<title>JavaScript Await</title>', '</head>', '<h2>JavaScript Await</h2>', '<p id=""main""></p>', '<script>', 'async function myDisplay() {', 'let myPromise = new Promise(function(myResolve, myReject) {', 'myResolve(""Hello World!!"");', 'document.getElementById(""main"").innerHTML = await myPromise;', 'myDisplay();', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '<title>JavaScript Await</title>', '</head>', '<h2>JavaScript Await</h2>', '<p id=""main""></p>', '<script>', 'async function myDisplay() {', 'let myPromise = new Promise(function(myResolve, myReject) {', 'setTimeout(function() { myResolve(""Hello World!!""); }, 2000);', 'document.getElementById(""main"").innerHTML = await myPromise;', 'myDisplay();', '</script>', '</body>', '</html>', 'asyncFunc().catch(err =>', 'Console.error(err)', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '<title>JavaScript Await</title>', '</head>', '<h2>JavaScript Await</h2>', '<script>', 'async function f() {', ""let response = await fetch('http://no-url');"", '} catch(err) {', 'alert(err); // TypeError: failed to fetch', '</script>', '</body>', '</html>']",[],[],[]
190,['JavaScript Blob'],"['Blobs are immutable objects that represent unprocessed data. The file is a Blob derived from data from the file system. Blobs allow us to create file-like objects on the client that we may transfer to APIs, and these APIs expect URLs rather than needing the server to provide the file. In this article, we are going to discuss the JavaScript Blob with some examples.']","['https://www.javatpoint.com/check-if-the-array-is-empty-or-null-or-undefined-in-javascript', 'https://www.javatpoint.com/javascript-async-and-await', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-image', 'https://www.javatpoint.com/check-if-the-array-is-empty-or-null-or-undefined-in-javascript', 'https://www.javatpoint.com/javascript-async-and-await', 'https://www.javatpoint.com/check-if-the-array-is-empty-or-null-or-undefined-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-blob.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-blob2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-blob3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-blob4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-blob5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-blob6.png']",[],"['What is a JavaScript Blob?', 'Blob Object', ""JavaScript Blob URL's"", 'Blob to base64', 'Pros and Cons of JavaScript blob']","['The syntax for creating a blob:', 'Example:', 'Example:', 'Example:', 'Example:', 'Pros of JavaScript Blob', 'Cons of JavaScript Blob']",[],"['The syntax for creating a JavaScript blob may be defined as:', 'In this syntax,', ""Let's take an example to understand how to create a JavaScript blob in the program."", 'Output: After executing this code, we will get the output as shown below in the screenshot.', 'In this program, we just make a simple <p> element with id = ""main"".', 'The blob object is used to represent an immutable blob object that represents raw data. The blob, like a file, has a size and mime-type property.', ""Let's take an example to understand how we can create a blob object in the JavaScript."", 'Output: After executing this code, we will get the output as shown below in the screenshot.', 'As we have seen, there is a ""Click here"" button. When we click on the ""Click Here"" button, it shows the result shown below in the screenshot.', ""Let's take an example to understand how we can use the blob URL in the program."", 'Output: After executing this code, we will get the output as shown below in the screenshot.', 'Here, we can see there is a link. When we click on the link, a text file is a download from the link as shown below in the screenshot:', 'A data URL has the following syntax:', 'Such URLs may be used anywhere, just like ""regular"" URLs.', ""Let's take an example to understand how we can use the blob to base64 in the JavaScript blob."", 'There are some pros and cons of JavaScript Blob. Some of them are as follows:']","['Blobs can be stored in the memory or on disk by the web browser, and they can represent truly massive bits of data that are too large to fit in the main memory unless first separated into smaller pieces with the slice () method.', 'Output: After executing this code, we will get the output as shown below in the screenshot. When we execute the program, it directly downloads the file at run time.']","[""A blob object is simply a collection of bytes that contains data stored in a file. A blob may appear to be a reference to the actual file, but it is not. A blob has the same size and MIME as a simple file. The blob data is stored in the user's memory, and it depends on the browser functions and the blob's size. The file is a derivation of the blob, and it may be used in the same places where the file is used. Blobs are very useful for storing binary data because their content can be easily read as an ArrayBuffer."", 'We have Blob URLs that refer to the blob, same as we have file URLs that refer to actual files in the local filesystem. If blob URLs are similar to regular URLs, they can be used everywhere regular URLs can be used. A JavaScript blob may easily be used as a URL for <img> tag and other tags to display its contents. The createObjectURL object can be used to get the blob URL that points to a blob:', 'Converting a Blob into a base64-encoded string is an alternative to URL.createObjectURL. This encoding protects binary data by encrypting it as a string of ultra-safe ""readable"" characters with ASCII codes ranging from 0 to 64. More importantly, this encoding can be used in ""data-urls"". To convert a Blob to base64, we\'ll use the built-in FileReader object.']","['new Blob(""blobParts, options"");', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '<title>JavaScript Blob</title>', '</head>', '<p id=""main""></p>', '<script>', 'var abc = new Blob([""Javatpoint""],', '{type : ""text/plain""});', 'var def = new FileReader();', 'def.addEventListener(""loadend"", function(e) {', 'document.getElementById(""main"").innerHTML', '= e.srcElement.result;', 'def.readAsText(abc);', '</script>', '</body>', '</html>', '<p id = ""main></p>', '<!DOCTYPE html>', '<html lang=""en"">', '<meta charset=""UTF-8"" />', '<meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />', '<title>JavaScript Blob</title>', '<style>', 'body {', 'font-family: ""Tahoma"", Verdana;', '.result{', 'font-size: 18px;', 'font-weight: 500;', 'color: red;', '</style>', '</head>', '<h1>Blob object in JavaScript</h1>', '<div class=""result""></div>', '<button class=""Btn"">Click here</button>', '<h3>Click on the button to make and show a JavaScript blob object</h3>', '<script>', 'let resEle = document.querySelector("".result"");', 'document.querySelector("".Btn"").addEventListener(""click"", () => {', 'let blob = new Blob([""JavaScrit blob is a sample blob""], { type: ""text/plain"" });', 'resEle.innerHTML = ""blob.type = "" + blob.type + ""<br>"";', 'resEle.innerHTML += ""blob.size = "" + blob.size;', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '<title>JavaScript Blob</title>', '</head>', '<a download=""javatpoint.txt"" href=\'#\'', 'id=""link"">Download file</a>', '<script>', 'let abc = new Blob([""Javatpoint""],', ""{ type: 'text/plain' });"", 'link.href = URL.createObjectURL(abc);', '</script>', '</body>', '</html>', '[<mediatype>][;base64],<data>', '<!DOCTYPE html>', '<meta charset=""utf-8"">', '<title>JavaScript Blob</title>', '</head>', '<a download=""javatpoint.txt"" href=\'#\'', 'id=""link"">Download file</a>', '<script>', ""let link = document.createElement('a');"", ""link.download = 'hello.txt';"", ""let blob = new Blob(['Hello, world!'], {type: 'text/plain'});"", 'let reader = new FileReader();', 'reader.readAsDataURL(blob);', 'reader.onload = function() {', 'link.href = reader.result; // data url', 'link.click();', '</script>', '</body>', '</html>']",[],[],"[""|||Blobparts: It is an array of Blob, BufferSource, and string values.|||Options: It is an optional object.|||Type: It is a Blob type, generally MIME-type like image.png.|||&&&|||Blobs are a convenient way to store and reference massive binary data files in a database.|||Blobs database backups contain all of the data.|||When using Blobs, setting access rights is simple with rights management.||||||Blobs are inefficient because of the amount of disk space they need and their time to access them.|||All databases don't support blobs.|||Due to the large file size of Blobs, creating backups takes a long time.|||""]"
191,"['Check if the array is empty or null, or undefined in JavaScript.']","['In this section, we are going to learn about whether the array is null or empty, or undefined. We will use JavaScript to do this. Sometimes the unexpected output or software crashes is occurred by the empty or null array. If we want to avoid this type of situation, we have to check whether the given or defined array is null or empty. We will also check that the array is undefined or not.']","['https://www.javatpoint.com/javascript-animation', 'https://www.javatpoint.com/javascript-blob', 'https://www.javatpoint.com/https://www.javatpoint.com/jquery-tutorial', 'https://www.javatpoint.com/javascript-animation', 'https://www.javatpoint.com/javascript-blob', 'https://www.javatpoint.com/javascript-animation']",[],[],[],[],[],"['In the below example, we will check the JQuery array if it is empty. The code to do this is as follows:', 'Now our above code is ready, and we can run it. When we run this, the following output will be generated:']",[],"[""If condition and array's length will be very useful to check the array. The number of elements is returned or set by the length property in the array. On the basis of the number of elements, we can understand that the array is empty or not. If the defined or given array is empty, it will contain the 0 elements. In our example, we will describe more than one example to understand them easily. The very simple example to check that the array is null or empty or undefined is described as follows:""]","['if (ourArray && ourArray.length > 0) {', ""console.log('ourArray shows not empty.');"", ""console.log('ourArray shows empty.');"", '<!DOCTYPE html>', '<title> JavaScript - Check array is empty or undefined or null </title>', '</head>', '<script type=""text/javascript"">', 'Basic Array checking using JQuery', 'var ourArray = [1, 2, 3];', 'if (ourArray && ourArray.length > 0) {', ""console.log('ourArray shows not empty');"", '}else{', ""console.log('ourArray shows empty.');"", 'Empty array checking using Jquery Array', 'var ourArray2 = [];', 'if (ourArray2 && ourArray2.length > 0) {', ""console.log('ourArray2 shows not empty.');"", '}else{', ""console.log('ourArray2 shows empty.');"", 'Undefined array checking using JQuery Array', ""if (typeof ourArray3 !== 'undefined' && ourArray3.length > 0) {"", ""console.log('ourArray3 shows not empty.');"", '}else{', ""console.log('ourArray3 shows empty.');"", 'Null array checking using Jquery Array', 'var ourArray4 = null;', 'if (ourArray4 && ourArray4.length > 0) {', ""console.log('ourArray4 is not empty.');"", '}else{', ""console.log('ourArray4 is empty.');"", '</script>', '</body>', '</html>']","['ourArray shows not empty.', 'ourArray2 shows empty.', 'ourArray3 shows empty.', 'ourArray4 shows empty.']",[],[]
192,['JavaScript Animation'],"['In this article, we are going to discuss JavaScript animation with its functions.']","['https://www.javatpoint.com/javascript-design-patterns', 'https://www.javatpoint.com/check-if-the-array-is-empty-or-null-or-undefined-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/css-tutorial', 'https://www.javatpoint.com/javascript-design-patterns', 'https://www.javatpoint.com/check-if-the-array-is-empty-or-null-or-undefined-in-javascript', 'https://www.javatpoint.com/javascript-design-patterns']","['https://static.javatpoint.com/javascriptpages/images/javascript-animation.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-animation2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-animation3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-animation4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-animation5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-animation6.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-animation7.png']",[],"['What is JavaScript Animation?', 'Styling the elements', 'Manual Animation', 'Automated Animation']","['Example:', 'Example:', 'Example:', 'Example:']",[],"['Let""s take a basic example to understand how we can create a basic JavaScript Animation web page.', 'Output: After executing this code, we will get the output as shown below in the screenshot.', 'Output: After executing this code, we will get the output as shown below in the screenshot.', 'Let""s take another example to understand that how we can create an animation in JavaScript.', 'Output: After executing this code, we will get the output as shown below in the screenshot.', 'Now, using the DOM object properties and JavaScript functions, let""s take a simple animation example.', 'Output: After executing this code, we will get the output as shown below in the screenshot.', 'Explanation', 'Let""s take an example to explain that how we may make a JavaScript automated animation.', 'Output: After executing the above code, we will get the output as shown below in the screenshot.', 'Explanation:', 'In this example, we may add two another method that helps to make animation automated. These methods are as follows:']","['JavaScript can also modify a DOM object""s attributes, such as its location on the screen. An object""s top and left attributes can be set to place it anywhere on the frame. The syntax of JavaScript may be defined as:', 'As we have above seen in the screenshot, there is a ""Click Here"" button. When we click on the button, the image is animated from the top left side corner to the bottom left side corner, as seen in the screenshot.', 'As we have seen in the screenshot, there is a ""Click Here"" button. When we click on the button, the image is moves left to right at every click, as shown in the screenshot.', 'In the previous example, we have seen how the image shifts to the right side of the screen with each click. We may automate this method by using the JavaScript function setTimeout(), which looks like this:', 'As we have seen in the above screenshot, there is a start and stop button. When we click on the start button, the image is animated to the right side. If we click on the stop button, the image is positioned in its original position.']","['JavaScript animations are done by incremental programming changes in the style of an element. JavaScript animations can perform tasks that CSS cannot. JavaScript could be used to transfer several DOM elements across the page in accordance with a logical equation or function. JavaScript includes the three functions mentioned below, which are commonly used in animation programs.', 'Let""s take another example to show the animation by styling the elements. Here, we make a container element with the help of style = ""position: relative"" and make an animated element in the container element with the help of style = ""position: absolute"".']","['object.style.left = distance in pixels or points;', 'object.style.top = distance in pixels or points;', '<!DOCTYPE html>', '<head>', '<title>JavaScript Animation</title>', '</head>', '<h1>My First JavaScript Animation</h1>', '<div id =""myContainer"">', '<div id =""myAnimation"">My first animation is here</div>', '</body>', '<!Doctype html>', '<head>', '<title>JavaScript Animation</title>', '</head>', '<style>', '#myContainer {', 'width: 350px;', 'height: 350px;', 'position: relative;', 'background: green;', '#myAnimation {', 'width: 45px;', 'height: 45px;', 'position: absolute;', 'background: blue;', '</style>', '<h1>My First JavaScript Animation</h1>', '<div id=""myContainer"">', '<div id=""myAnimation""></div>', '</body>', '</html>', '<!DOCTYPE html>', '<head>', '<title>JavaScript Animation</title>', '</head>', '<style>', '#myContainer {', 'width: 350px;', 'height: 350px;', 'position: relative;', 'background: green;', '#myAnimation {', 'width: 45px;', 'height: 45px;', 'position: absolute;', 'background-color: rgb(226, 43, 43);', '</style>', '<button onclick=""myMove()"">Click Here</button>', '<div id =""myContainer"">', '<div id =""myAnimation""></div>', '<script>', 'var id = null;', 'function myMove() {', 'var elem = document.getElementById(""myAnimation"");', 'var pos = 0;', 'clearInterval(id);', 'id = setInterval(frame, 10);', 'function frame() {', 'if (pos == 300) {', 'clearInterval(id);', '} else {', 'pos++;', ""elem.style.top = pos + 'px';"", ""elem.style.left = pos + 'px';"", '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<html>', '<head>', '<title>JavaScript Animation</title>', '<h1>JavaScript Animation</h1>', '<script type = ""text/javascript"">', '<!--', 'var imgObj = null;', 'function init() {', ""imgObj = document.getElementById('myImage');"", ""imgObj.style.position= 'relative';"", ""imgObj.style.left = '0px';"", '}', 'function moveRight() {', ""imgObj.style.left = parseInt(imgObj.style.left) + 10 + 'px';"", '}', 'window.onload = init;', '</script>', '</head>', '<body>', '<form>', '<img id = ""myImage"" src = ""/C:\\Users\\hp\\Downloads\\images.jpg"" />', '<p>Click the button below to move the image left to right</p>', '<input type = ""button"" value = ""Click Here"" onclick = ""moveRight();"" />', '</form>', '</body>', '</html>', '<!DOCTYPE html>', '<html>', '<head>', '<title>JavaScript Animation</title>', '<script type = ""text/javascript"">', '<!--', 'var imgObj = null;', 'var animate ;', 'function init() {', ""imgObj = document.getElementById('myImg');"", ""imgObj.style.position= 'relative';"", ""imgObj.style.left = '0px';"", '}', 'function moveRight() {', ""imgObj.style.left = parseInt(imgObj.style.left) + 10 + 'px';"", 'animate = setTimeout(moveRight,12);', '}', 'function stop() {', 'clearTimeout(animate);', ""imgObj.style.left = '0px';"", '}', 'window.onload = init;', '</script>', '</head>', '<body>', '<h1>JavaScript Automated Animation</h1>', '<form>', '<p>Click the buttons below to manage the automated animation</p>', '<img id = ""myImg"" src = ""/C:\\Users\\hp\\Downloads\\images.jpg"" />', '<input type = ""button"" value = ""Start"" onclick = ""moveRight();"" />', '<input type = ""button"" value = ""Stop"" onclick = ""stop();"" />', '</form>', '</body>', '</html>']",[],[],"['|||setTimeout (function, duration): This function can be used to call the function after a millisecond delay.|||setInterval (function, duration): This function can be used to call the function after each duration milliseconds.|||clearTimeout (setTimeout_variable): This function can be used to clear the timer that has been set by the setTimeout()||||||To get a DOM object, we use the JavaScript function getElementById() and then allocate it to the global variable imgObj.|||To initialize imgObj, we defined an initialization function init(), where we set its location and left attributes.|||When the window loads, we call the initialization function.|||Finally, we use the moveRight() function to add 10 pixels to the left To switch it to the left, we might set it to a negative value.||||||moveRight(): To set the position of imgObj, the moveRight() method calls the setTimeout()|||Stop(): We""ve added a new function stop(), that resets the object to its original state and clears the timer set by the setTimeout()|||']"
193,['JavaScript Design Patterns'],"['Design patterns can be termed as well-documented solutions to the most commonly occurring problems in software engineering. It turns quite hectic for developers to bang out their heads on the problem that someone else has already solved. Every developer aspires to write industrial-level code that is easily applicable to a different problem, be maintainable, and be more readable, and reusable. It needs a proper code structuring mechanism or pattern to be taken into account, and therefore it becomes crucial to solving this challenge. This is where design patterns play an important role by providing ground to these common problems arising in a particular circumstance.']","['https://www.javatpoint.com/javascript-print-method', 'https://www.javatpoint.com/javascript-animation', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-print-method', 'https://www.javatpoint.com/javascript-animation', 'https://www.javatpoint.com/javascript-print-method']","['https://static.javatpoint.com/javascriptpages/images/javascript-design-patterns.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-design-patterns2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-design-patterns3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-design-patterns4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-design-patterns5.png']",[],"['Concept', 'Benefits of Design Patterns', 'Categories', 'Creational Design Patterns', 'Structural Design Patterns', 'Behavioral Design Patterns', 'Conclusion']","['Constructor Pattern', 'Prototype Pattern', 'Adapter Design Pattern', 'Composite Design Pattern', 'Chain of Responsibility', 'Observer Pattern']",[],"[""The design patterns are needed because they don't change over time and can be kept into practice with standard or high levels of applications."", 'They are expressive: Design patterns need no further explanation because they can explain the large problem to bits and pieces quite efficiently.', ""Since we have learned much of the basics of the design patterns in JavaScript, let's understand them through coding examples."", 'JavaScript Designs Patterns constitute various categories. The given image gives an overview of all the patterns present.', 'We would now be talking about these three design patterns in detail using suitable examples.', ""Let's discuss some categories of a behavioral design pattern.""]","['They are reusable: Design patterns portray a reusable solution that can be modified under certain circumstances to solve multiple problems, as they cannot exist only to a single problem.', 'They enhance communication: Developers being familiar with design patterns can set common goals to a problem which helps them to communicate with each other about the potential threats and solutions to those problems.', 'They lower codebase size: Being the only optimal solution, design patterns preserve precious space by implementing a required solution in a few lines of code with very little footprint.', 'The construct pattern is simplest, modern, and one of the most popular sub-categories of creational design patterns in JavaScript. The main purpose of this pattern is to felicitate the constructor creation. Consider the below example:', 'It is one of the most used structural design patterns where we compose objects into tree structures and then these structural trees are treated as individual objects. Consider a jQuery-based example of how the composite design pattern is structured.']","['In this tutorial, we would be learning these design patterns in JavaScript. Most JavaScript developers frequently interact with design patterns unknowingly while creating applications. This tutorial would cover explanations and examples of the most important and frequently used JavaScript Design Patterns.', 'They are the best solutions: Design patterns are frequently used by all the developers because they know that it would work. Not only that, they are well aware of the design patterns because they certainly have been revised multiple times before they have been implemented.', 'No code refactoring: Design patterns are often termed as optimal solutions for various problems. If an application is being written keeping design patterns in mind, it is assumed that the generated solution is the only efficient solution and hence needs no code refactoring.', ""The above design patterns are all about the instantiation of a class. It can be elaborated further by the division of creating class and object creational patterns. This design pattern deals with the creation of mechanisms that optimize class-object complexities into simple and easy patterns. Complex design patterns need a high approach and time and this problem can be tackled by creational design patterns by controlling the class to inherit effectively and object to use delegation wisely to get the stuff done. Some of the popular design patterns are already shown in the image above. Let's discuss some of the categories."", 'In this example, we have defined a class/function Automobile with attributes brand and mileage. The getDetails() method used in the example will print the given brand and mileage of the automobile in the format shown in the output above. We have instantiated an object for the function/class by provoking the constructor method using new keyword for the given attributes.', 'Prototyping simply means cloning. Using the prototype patterns, we can instantiate the new object in terms of the template of an existing object with the help of cloning. This is followed by prototypal inheritance to use native prototypical powers of JavaScript. The case can be understood better with the image and coding example shown below.', 'In this example, we have implemented the use of a prototype cheetah, which is later cloned to create a new object with the Object.create method by creating a constant cheetah1 in which the name of the Trainer will be stored according to the standard ES6 process.', ""This design pattern is all about class and object composition or their relationship. It has structurally defined mechanisms for class and objects to ensure that if the part of a system changes, the entire system doesn't rely upon it and change. It is ensured by figuring out the class-creation patterns to use inheritance to compose interfaces and object-creation patterns to define a way to roll out new functionality. It also consists of various categories which are already shown in the image above. Let's discuss some of them."", 'The adaptor design pattern is mainly used for different designs of objects to work together in a single interface. Consider that we are building a library that accepts structures and formats in JSON. We need to have a legacy API to respond in the XML format and this response is later used to generate charts but charts accept only JSON objects. Therefore, an adapter function is written to convert this XML to JSON as and when required. This adapter function would let us connect two different forms of objects. See the below image for reference.', 'In the above example, jQuery makes it quite easy to apply different methods on the selected DOM nodes by easily accessing combinations. The method addClass is used to hide the details of implementation. iIt mainly ensures that a group of objects behave as they are individual objects.', 'This design pattern relies upon the pattern of recognizing, implementing, and communicating between disparate objects. Behavioral patterns are mostly concerned with communication because they help to ensure the disparate parts have proper synchronization of information. Thus, it improves the flexibility of communication.', ""This design pattern is mainly used to construct a system where each request passes through a chain of events and is handled by handlers. The requests are processed and passed from one chain to another or are simply rejected. This design pattern is optimal for a system that uses sequential checks for processing requests. Let's take an example of an ATM. Whenever we request a withdrawal amount from ATM, the machine processes the request and dispenses out the amount with a series of combinational notes (Rs.500. Rs. 200, Rs.100)."", 'In this coding example, a request object is created whenever we request an amount to be withdrawn. This provokes a series of calls for the object where it is chained together and event handlers handle particular denominations. Finally, the ATM can dispense the requested combination of notes which satisfies the processed request.', 'The observer pattern is a behavioral design pattern whose main task is to define a subscription mechanism to notify multiple observers or objects about any occurring event. This alerts event handlers to carry out event-driven responses. This pattern is popularly called Pub/Sub that abbreviates for Publication/ Subamount followed by a series of one-to-one dependency amongst objects. This design pattern is used to promote a great object-oriented design and enhance loose coupling.', 'In this example, we have constructed a notification service system whose task is to notify the user about the subscriptions. In this system, we have created multiple object and event listeners for listening updates which are called subscribers. Therefore, we have defined two classes here namely Subject and Observer. These two classes are needed to hold critical information along with the list of observers. Whenever the critical information state changes, the subject would notify all of its observers about the event using notify method shown in the code above. The observer class invokes an update method that calls notification requests from the subject.', 'In this tutorial, we learned about various prevailing design patterns in JavaScript and how they tackle common and complex problems with such ease. We also learned about various categories of design patterns mainly creational, structural, and behavioral design patterns. The creational pattern is mainly focused on object-class mechanisms to ease a pattern. The structural design patterns provide a better approach to order a problem and solve them one by one while the behavioral patterns play their role in establishing communication across the activities synchronously. We also explored briefly some of the sub-categories of these three design patterns and how they are accustomed to JavaScript. JavaScript design patterns play a crucial role in building applications. The different categories define different sets of problems existing or might occur whenever we build something. But these patterns ensure that whatever we are building will be best because of the optimal functionality of these design patterns which delivers the best solution for every single design problem occurring in the arena of JavaScript.']","['class Automobile {', 'constructor(brand, mileage) {', 'this.brand = brand;', 'this.mileage = mileage;', 'this.getDetails = function () {', 'console.log(`${this.brand} gives ${this.mileage}kmpl!`);', '};', ""const Automobile1 = new Automobile('Mercedes',20.8);"", 'Automobile1.getDetails();', 'const cheetah = {', 'Speed: 120,', 'start() {', ""return 'Running';"", 'stop() {', ""return 'Resting';"", ""const cheetah1  = Object.create(cheetah, { Trainer: { value: 'John' } });"", 'console.log(cheetah1.__proto__ === cheetah); // true', '$(""#element"").addClass(""blur"") // element is an id', '$("".element"").addClass(""blur"") // element is a class', '$(""div"").addClass(""blur"") // native element div', '$("".element.isActive"").addClass(""blur"") // trying to access a DOM node', 'that has element as well as isActive class', '$("".element h2"").addClass(""blur"") // trying to access the native', 'element h2 which is inside a node with class element', 'var Request = function(amount) {', 'this.amount = amount;', 'console.log(""Request Amount:"" +this.amount);', 'Request.prototype = {', 'get: function(bill) {', 'var count = Math.floor(this.amount / bill);', 'this.amount -= count * bill;', 'console.log(""Dispense "" + count + "" $"" + bill + "" bills"");', 'return this;', 'function run() {', 'var request = new Request(378); //Requesting amount', 'request.get(100).get(50).get(20).get(10).get(5).get(1);', 'class Subject {', 'constructor () {', 'this.criticalNumber = 0', 'this.observers = []', 'addObserver (observer) {', 'this.observers.push(observer)', 'removeObserver (observer) {', 'let index = this.observers.findIndex(o => o === observer)', 'if (index !== -1) {', 'this.observers.splice(index, 1)', '}', 'notify () {', ""console.log('Notifying observers about some important information')"", 'this.observers.forEach (observer => {', 'observer.update(this.criticalNumber)', '})', 'changeCriticalNumber () {', '/* Changing the critical information */', 'this.criticalNumber = 42', '/* Notifying the observers about this change */', 'this.notify()', 'class Observer {', 'constructor (id) {', 'this.id = id', 'update (criticalNumber) {', 'console.log(`Observer ${this.id} - Received an update from the subject ${criticalNumber}`)']",['Mercedes gives 20.8 kmpl!'],[],[]
194,['CanvasJS'],"[""We often come across charts on analytics-based sites or some websites that contain surveys on some common agendas like population, percentage, and whatnot. These charts are often used in the Data Interpretation field to create network shares or profit distribution in core sectors. However, if we collectively observe, these charts or bar distributions are renderable. They can change when values plotted on the graph are changed. To ease constructing these renderable charts, JavaScript has tremendous support from libraries. One such library specifically for charts is CanvasJS. Let's learn about it from scratch.""]","['https://www.javatpoint.com/javascript-format-numbers-with-commas', 'https://www.javatpoint.com/javascript-auto-calculate-form', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html5-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/html-tutorial', 'https://www.javatpoint.com/javascript-format-numbers-with-commas', 'https://www.javatpoint.com/javascript-auto-calculate-form', 'https://www.javatpoint.com/javascript-format-numbers-with-commas']","['https://static.javatpoint.com/javascriptpages/images/canvasjs.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs2.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs3.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs4.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs5.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs6.png', 'https://static.javatpoint.com/javascriptpages/images/canvasjs7.png']",[],"['What is CanvasJS?', 'Download', 'Concept of working with Data in Chart', 'What is dataPoint?', 'Adding dataPoints', 'Conclusion']","['Plotting x values', 'dataPoint Labelling', 'Index labeling in dataPoints', 'Finishing all at once']","['Note: The dist folder by default contains a minified version located at dist/canvasjs.js.min.js, and it is a production-based version wrapped up for using it with jQuery.', 'Note: The graph is easily renderable. Hence it is recommended to run it on an HTML compiler to get the feel.']","['Users can download CanvasJS with a simple npm command given below.', 'CanvasJS package, by default, works on CommonJS that can be easily put on to use with property/webpack, as shown below.', 'The above-shown dependencies are local. For importing global dependencies, use the below code.', ""Let's look at the format of the dataSeries object in the data array. The sample code snippet is given below for reference."", 'In the above snippet, dataPoint has been positioned on the x-axis by setting the values in numeric value or a dateTime value.', 'Index labels are generally positioned below or above the dataPoint.', 'Steps to run the example in our local machine are given below:']","['After this step, we need to import it first. It can be done in multiple ways depending on the type of module and the application pattern being considered.', 'Labels are defined as the values that are displayed on the x-axis of the chart. If there is no x value provided, the default value is taken for the label, and it can be easily customized.', ""Since we are now much familiar with using CanvasJS, let's take some more time to create some sophisticated charts that are industrial level. To do that, we have prepared a sample example in case of users miss out on how to apply the above concepts."", 'In this example, we will make a Stock Chart from scratch and customize it using live examples. With every step of rendering, if we use the source code to run it on a compiler, we might understand it better.']","['As depicted in the official world of libraries in JavaScript, CanvasJS is the popular charting library. It is easy to use JavaScript and HTML5 based library that can be built on the Canvas element. It has a wide range of device influences, including Android, iPhone & iPad, Windows Phone, Microsoft Surface, Desktops, etc.', 'CanvasJS is a hardcore chart creator library that enables users to create rich UI dashboards and charts that can work on all devices without compromising functionality or maintenance for our web application. It already comes with dynamic and awesome themes, and it is 10x faster than the conventional SVG Charts and Flash. Users can easily create responsive, dynamic, renderable, lightweight, and rich UI dashboards using CanvasJS.', 'To work with data in the chart in CanvasJS, we need to add data. All the data that we want to be plotted should be added to an array called ""data"". It is the confined property of Chart Options. Every element of the array is treated as an object and is called data series, which is nothing but the logical grouping of data elements. Individual data elements or points are always called dataPoint. To understand how data work in CanvasJS, we will be using dataPoint and dataSeries everywhere in this tutorial for illustration.', 'All the values that have to be plotted on a chart subjected to the required design are called dataPoint. We can easily add each dataPoint to the array, which becomes the member of the dataSeries. The most commonly used dataPoints used are plotted on the x,y, and label axis. See the below example of how a dataPoint is plotted.', ""To understand how CanvasJS works, it is important to understand that dataPoint should consist of a y value. To plot a series, only y values are treated as dataPoints. If there is no x value provided, they are by default set to the absolute value of zero. Let's understand by an example."", 'In this tutorial, we came across and learned about CanvasJS and its applications. We also discovered how to render the custom components of JavaScript using CanvasJS, which can be treated as a utility tool or library in JavaScript specifically designed to work with charts. Although D3.js also offers a similar experience when taken into consideration, it is not preferred because of its robust nature and complexity. CanvasJS is lightweight, easy to handle, needs no further dependencies rather than having to import it into the main HTML file, and is super easy to learn. In the later sections, we also saw step-by-step inclusion of properties in the example and how dataPoints work along with the labels and axis. We also saw from the example above where we created a Stock Chart with not much effort.']","['$ npm install canvasjs', ""var CanvasJS = require('canvasjs');"", ""import CanvasJS from 'canvasjs';"", ""require('canvasjs/dist/canvasjs.js', function(CanvasJS){"", '<script src=""canvasjs/dist/canvasjs.js"">', 'var  chart =  new  CanvasJS.Chart(""container"",', 'data:[', '{// dataSeries 1', 'type: ""column"",', 'dataPoints:[ //array of dataPoint', '{x:1, y:5}, //dataPoint', '{x:2, y:6}, //dataPoint', '{x:3, y:7} //dataPoint', '{// dataSeries 2', 'type: ""line"",', 'dataPoints:[', '{x:1, y:8}, //dataPoint', '{x:2, y:9}, //dataPoint', '{x:3, y:4} //dataPoint', 'chart.render();', 'dataPoints : [', '{ x: 10, y: 15, label: ""apple""  }, //dataPoint', '{ x: 20, y: 8,  label: ""mango""  },', '{ x: 30, y: 10, label: ""orange"" },', '{ x: 40, y: 12, label: ""banana"" }', '<!DOCTYPE HTML>', '<head>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var chart = new CanvasJS.Chart(""chartContainer"",', 'title:{', 'text: ""Adding dataPoints""', '},', 'data: [', '{', 'type: ""column"",', 'dataPoints: [', '{ y: 71 },', '{ y: 55},', '{ y: 50 },', '{ y: 65 },', '{ y: 95 },', '{ y: 68 },', '{ y: 28 },', '{ y: 34 },', '{ y: 14}', ']', '}', ']', '});', 'chart.render();', '</script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.min.js""></script></head>', '<div id=""chartContainer"" style=""height: 300px; width: 100%;"">', '</div>', '</body>', '</html>', '<!DOCTYPE HTML>', '<head>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var chart = new CanvasJS.Chart(""chartContainer"",', 'title:{', 'text: ""Placing dataPoint on axisX""', '},', 'data: [', '{', 'type: ""column"",', 'dataPoints: [', '{ x: 10, y: 71 },', '{ x: 22, y: 55},', '{ x: 31, y: 50 },', '{ x: 44, y: 65 },', '{ x: 50, y: 95 },', '{ x: 64, y: 68 },', '{ x: 72, y: 28 },', '{ x: 84, y: 34 },', '{ x: 90, y: 14}', ']', '}', ']', '});', 'chart.render();', '</script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.min.js""></script></head>', '<div id=""chartContainer"" style=""height: 300px; width: 100%;"">', '</div>', '</body>', '</html>', '<!DOCTYPE HTML>', '<head>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var chart = new CanvasJS.Chart(""chartContainer"",', '{', 'title: {', 'text: ""Axis With Custom Labels""', '},', 'data: [', '{', 'type: ""column"",', 'dataPoints: [', '', '{ y: 71, label: ""cat 1"" },', '{ y: 55, label: ""cat 2"" },', '{ y: 50, label: ""cat 3"" },', '{ y: 65, label: ""cat 4"" },', '{ y: 95, label: ""cat 5"" },', '{ y: 68, label: ""cat 6"" },', '{ y: 28, label: ""cat 7"" },', '{ y: 34, label: ""cat 8"" },', '{ y: 14, label: ""cat 9"" }', ']', '}', ']', '});', 'chart.render();', '</script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.min.js""></script>', '</head>', '<div id=""chartContainer"" style=""height: 300px; width: 100%;"">', '</div>', '</body>', '</html>', '<!DOCTYPE HTML>', '<head>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var chart = new CanvasJS.Chart(""chartContainer"",', 'title:{', 'text: ""Index Labels on dataPoints""', '},', 'data: [', '{', 'type: ""column"",', 'dataPoints: [', '', '{ x: 10, y: 71},', '{ x: 20, y: 55},', '{ x: 30, y: 50 },', '{ x: 40, y: 65 },', '{ x: 50, y: 125, indexLabel: ""high"" },', '{ x: 60, y: 68 },', '{ x: 70, y: 28 },', '{ x: 80, y: 34 },', '{ x: 90, y: 14,  indexLabel: ""low"" }', ']', '}', ']', '});', 'chart.render();', '</script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.min.js""></script>', '</head>', '<div id=""chartContainer"" style=""height: 300px; width: 100%;"">', '</div>', '</body>', '</html>', '<!DOCTYPE HTML>', '<head>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var chart = new CanvasJS.Chart(""chartContainer"",', 'title:{', 'text: ""Golds won in 2012 London Olympics"",', 'fontWeight: ""bolder"",', 'fontColor: ""#008B8B"",', 'fontfamily: ""tahoma"",', 'fontSize: 25,', 'padding: 10', '},', 'data: [', '{', 'type: ""column"",', 'dataPoints: [', '{label: ""US"", y: 46 },', '{label: ""China"", y: 38},', '{label: ""Britain"", y: 29},', '{label: ""Russia"", y: 24 },', '{label: ""South Korea"", y: 13 },', '{label: ""Germany"", y: 11 },', '{label: ""france"", y: 11},', '{label: ""Hungary"", y: 8 },', '{label: ""Australia"", y: 7 },', '{label: ""Japan"", y: 7 }', ']', ']', '});', 'chart.render();', '</script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.min.js"">', '</script>', '</head>', '<div id=""chartContainer"" style=""height: 300px; width: 100%;"">', '</div>', '</body>', '</html>', '<!DOCTYPE HTML>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/jquery-1.11.1.min.js""></script>', '<script type=""text/javascript""', 'src=""https://canvasjs.com/assets/script/canvasjs.stock.min.js""></script>', '<script type=""text/javascript"">', 'window.onload = function () {', 'var dataPoints = [];', 'var stockChart = new CanvasJS.StockChart(""chartContainer"",{', 'title: {', 'text: ""StockChart Title""', '},', 'charts: [{', 'data: [{', 'type: ""line"", //Change it to ""spline"", ""area"", ""column""', 'dataPoints : dataPoints', '}]', '}],', 'navigator: {', 'slider: {', 'minimum: new Date(2018,04, 01),', 'maximum: new Date(2018,06, 01)', '}', '$.getJSON(""https://canvasjs.com/data/docs/btcusd2018.json"",', 'function(data) {', 'for(var i = 0; i < data.length; i++){', 'dataPoints.push({x: new Date(data[i].date), y:', 'Number(data[i].close)});', 'stockChart.render();', '</script>', '</head>', '<div id=""chartContainer"" style=""height: 400px; width: 100%;""></div>', '</body>', '</html>']",[],[],['|||Copy the code in the local HTML editor.|||Run the HTML file.|||We can see the Stock Chart running on our local system.|||Try to add more customized chart designs if needed.|||']
195,['JavaScript format numbers with commas'],"['In this article, we are going to discuss about the formatting of numbers with commas in JavaScript. Sometimes, we require formatting a number with commas in the HTML page in order to make it easy to read. Using JavaScript, we can transform a number into a comma-separated value. Here, we will discuss the ways for the same.']","['https://www.javatpoint.com/currying-in-javascript', 'https://www.javatpoint.com/canvasjs', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-typedarray-tolocalestring-method', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-format-numbers-with-commas1', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-format-numbers-with-commas2', 'https://www.javatpoint.com/https://www.javatpoint.com/oprweb/test.jsp?filename=javascript-format-numbers-with-commas3', 'https://www.javatpoint.com/currying-in-javascript', 'https://www.javatpoint.com/canvasjs', 'https://www.javatpoint.com/currying-in-javascript']","['https://static.javatpoint.com/javascriptpages/images/javascript-format-numbers-with-commas.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-format-numbers-with-commas2.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-format-numbers-with-commas3.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-format-numbers-with-commas4.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-format-numbers-with-commas5.png', 'https://static.javatpoint.com/javascriptpages/images/javascript-format-numbers-with-commas6.png']",[],[],"['Using toLocaleString() method', 'Example', 'Using Intl.NumberFormat() object', 'Example', 'Using regular expressions to format numbers with commas', 'Example']",[],"['The first way of formatting numbers with commas is using the toLocaleString() method.', ""Now, let's understand the method via an example."", 'After the execution of the above code, the output will be -', 'After clicking the given button, the output will be -', ""If you don't want to use the above method, then we can use another way of formatting numbers with commas."", ""Now, let's understand the method via an example."", 'In this example, we are using Intl.NumberFormat() object on both integer type and floating point numbers.', 'After the execution of the above code, the output will be -', 'After clicking the given button, the output will be -', ""Now, let's understand it with an example."", 'After the execution of the above code, the output will be -', 'After clicking the given button, the output will be -']","['A regex or regular expression is the sequence of characters that specifies a search term. Using regex, we can replace and find the values in the string and format them in the way as per the requirements.']","['The JavaScript toLocaleString() method is used to convert the elements of the given array into a string, and these Strings are separated by a comma "","". We can pass the ""en-US"" as the parameter so that the method will take the format of the United States and English language and will represent the numbers with a comma between the thousands.', 'In this example we are using the toLocaleString() to format the numbers separated by commas. Here, we are formatting two numbers one is of integer type and another is of floating point. After clicking the given button, given numbers will be formatted with commas. The numbers will get separated with commas at the thousand of places.', 'The Intl.NumberFormat() object is used to represent the numbers in language-sensitive formatting, and we can also use it to represent percentage or currency based on the specified locale. The parameter provided is known as locale, which is used to specify the number format.', 'We can pass the ""en-US"" as the parameter so that the locale takes the format of the United States and English language and will represent the numbers with a comma between the thousands. We will also use the format() method of this object to return a string of a number in the specified locale. The format() function will take the number and return the comma-separated string.', ""Let's consider the following regex pattern. The regex pattern given below will search the string, and it will put the marker after the three consecutive digits. We can use the regex pattern with the combination of String.replace() method for replacing the markers with commas."", 'In this example, we are using the regular expression in JavaScript to format numbers with commas. Here, we use a regex pattern that places a marker after every three digits of a number. And we are also using the String.replace() method to replace the marker with the comma.', ""That's all for this tutorial. In this article, we have discussed three ways to format a number with commas in JavaScript. Hope you find this article informative and beneficial in order to understand the ways to format numbers with commas in JavaScript.""]","['<!DOCTYPE html>', ""<title> Using JavaScript's toLocaleString() method </title>"", '</head>', '<h1> Welcome to the javaTpoint.com </h1>', 'This is an example of using the JavaScript <b> toLocaleString() </b> method to format  a number with commas as thousands of\tseparators in JavaScript', ""<b> Number1 = '123456789' </b> </br>"", ""<b> Number2 = '1234.56789' </b>"", '<p> Click the below button to print the above numbers separated with commas </p>', '<button onclick = ""fun()""> Click me </button>', '<script type = ""text/javascript"">', 'function fun() {', 'num1 = 123456789;', 'num2 = 1234.56789;', ""output1 = num1.toLocaleString('en-US');"", ""output2 = num2.toLocaleString('en-US');"", 'document.write(""<b> Given number = </b>"", num1);', 'document.write(""</br> <b> Formatted number = </b>"", output1);', 'document.write(""</br> <br> <b> Given number = </b>"", num2);', 'document.write(""</br> <b> Formatted number = </b>"", output2);', '</script>', '</body>', '</html>', '<!DOCTYPE html>', '<title> Using Intl.NumberFormat() </title>', '</head>', '<h1> Welcome to the javaTpoint.com </h1>', 'This is an example of using the <b> Intl.NumberFormat() </b> object to format a number with commas as thousands of separators in JavaScript', ""<b> Number1 = '482351769' </b> </br>"", ""<b> Number2 = '4823.51769' </b>"", '<p> Click the below button to print the above numbers separated with commas </p>', '<button onclick = ""fun()""> Click me </button>', '<script type = ""text/javascript"">', 'function fun() {', 'num1 = 482351769;', ""obj1 = new Intl.NumberFormat('en-US');"", 'output1 = obj1.format(num1);', 'document.write(""<b> Given number = </b>"", num1);', 'document.write(""</br> <b> Formatted number = </b>"", output1);', 'num2 = 4823.51769;', ""obj2 = new Intl.NumberFormat('en-US');"", 'output2 = obj2.format(num2);', 'document.write(""</br> <br> <b> Given number = </b>"", num2);', 'document.write(""</br> <b> Formatted number = </b>"", output2);', '</script>', '</body>', '</html>', '/\\B(?=(\\d{3})+(?!\\d))/g', '<!DOCTYPE html>', '<title> Using regualar expression to format numbers with commas in javascript </title>', '</head>', '<h1> Welcome to the javaTpoint.com </h1>', 'This is an example of using the regular expression in javascript to format a number with commas </p>', ""<b> Number1 = '1482351769' </b> </br>"", ""<b> Number2 = '1000.51769' </b>"", '<p> Click the below button to print the above numbers separated with commas </p>', '<button onclick = ""fun()""> Click me </button>', '<script type = ""text/javascript"">', 'function fun() {', 'num1 = 1482351769;', ""output1 = num1.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')"", 'document.write(""<b> Given number = </b>"", num1);', 'document.write(""</br> <b> Formatted number = </b>"", output1);', 'num2 = 1000.51769;', ""output2 = num2.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')"", 'document.write(""</br> </br> <b> Given number = </b>"", num2);', 'document.write(""</br> <b> Formatted number = </b>"", output2);', '</script>', '</body>', '</html>']",[],[],[]
196,['Currying in JavaScript'],"[""In this article, we are going to discuss currying in JavaScript. Here, we will see how currying works and how it will be useful for software developers. We will also see the conversion of an existing function into the curried version. So, this article is going to be very interesting and important for JavaScript readers. Here, you will learn a new concept in JavaScript. Without any more delay, let's start our important topic, i.e., currying in JavaScript.""]","['https://www.javatpoint.com/javascript-hasownproperty', 'https://www.javatpoint.com/javascript-format-numbers-with-commas', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/javascript-hasownproperty', 'https://www.javatpoint.com/javascript-format-numbers-with-commas', 'https://www.javatpoint.com/javascript-hasownproperty']",['https://static.javatpoint.com/javascriptpages/images/currying-in-javascript.png'],[],"['What is currying?', 'Benefits of Currying', 'How to achieve Currying in JavaScript?', 'Currying using closures', 'How to convert an existing function into a curried version?']","['Currying using bind() method', 'Without currying', 'After Currying']",[],"['So, in this way we can reuse our function using currying.', ""Now, let's see the conversion of an existing function into its curried version."", 'Here, there is a simple function, in which we are not using currying.', ""Now, we apply currying to the function, given in above example. Let's see an example of currying in JavaScript."", ""So, that's all about the article. Hope you understand the concept of currying and also the process of achieving it.""]","['It is a transformation of functions that translate a function from callable as add(1, 2, 3) into callable as add(1)(2)(3). It only transforms a function instead of calling it. It returns a new function until all arguments get exhausted.', 'Currying is not built-in by default (atleast, it is not present in current versions) in JavaScript. Using some functional tricks, we can achieve currying in JavaScript too. We can implement currying using two methods -', 'In the above code, we have used currying as the parameters passed one by one until the last function calls the last parameter. So, before and after currying on the same function with the same parameters, the output will remain the same.']","['Currying is defined as changing a function having multiple arguments into a sequence of functions with a single argument. It is a process of converting a function with more arity into a function having less arity. The term arity means the number of parameters in a function.', 'Suppose a function with some arguments so instead of taking all arguments once, it takes the first one, and returns a new function which takes the second one and returns a new function that takes the third one, and it will keep going until all arguments are fulfilled.', 'For instance, suppose a function fun with three arguments A, B, and C, and it returns value res. When it is curried, it will be broken down into three functions let be X, Y, and Z. The new function X will take A as an argument and will return the function Y, which will take B as an argument and return the function Z, which takes C as an argument and finally returns the required value res.', ""The JavaScript function bind() method is used to create a new function. When a function is called, it has its own this keyword set to the provided value, with a given sequence of arguments. Now, let's achieve the currying by using the bind() method in JavaScript."", ""In this example, we are using the bind() method to achieve currying in JavaScript. bind() method will give us a copy of the mul() method and do not invoke it directly. Here, we are permanently assigning the first parameter value and then reuse the var1 and var2 methods by assigning the second parameter's value."", 'The closure also makes the currying possible in JavaScript. A closure can be defined as a JavaScript feature in which the inner function has access to the outer function variable. In JavaScript, every time a closure is created with the creation of a function.']","['<script>', 'function mul(val1, val2){', 'document.write(""<p>"" + val1 * val2 + ""</p>"");', 'let var1 = mul.bind(this, 5);', 'document.write(""var1 method"");', 'var1(4);', 'var1(7);', 'let var2 = mul.bind(this, 4);', 'document.write(""var2 method"")', 'var2(2);', 'var2(4);', '</script>', '</body>', '</html>', '<script>', 'function mul(val1){', 'return function(val2){', 'document.write(""<p>"" + val1 * val2 + ""</p>"");', 'let a = mul(2);', '</script>', '</body>', '</html>', '<script>', 'function multiply(a, b, c) {', 'return a * b * c;', '}', 'document.write(multiply(2, 5, 8));', '</script>', '</body>', '</html>', '<script>', 'function multiply(a) {', 'return function(b) {', 'return function(c) {', 'return a * b * c;', '}', '}', 'document.write(multiply(2)(5)(8));', '</script>', '</body>', '</html>']","['10', '12', '80', '80']",[],"['|||Currying helps to prevent the passing of the same variable, again and again.|||It is useful in event handling.|||Write little code modules that can be easily reused and configured.||||||It can be achieved by using the bind() method|||It can be achieved by using the closures|||']"
197,['JavaScript hasOwnProperty'],"['In this tutorial, we will see the aspects of limitations and functions related to the hasOwnProperty() method in JavaScript. We will also learn about its implementations and usage in the sections.']","['https://www.javatpoint.com/#', 'https://www.javatpoint.com/currying-in-javascript', 'https://www.javatpoint.com/https://www.javatpoint.com/javascript-tutorial', 'https://www.javatpoint.com/#', 'https://www.javatpoint.com/currying-in-javascript', 'https://www.javatpoint.com/#']",[],[],"['Introduction', 'Argument', 'Conclusion']","['Syntax', 'Propname:']",[],['Consider the following code snippet that shows how both the methods carry this workaround.'],"['Here, we need to pass the symbol or the string name because this is the place of prop where it is checked if the symbol or string belongs to the object. This is done using the method given below.', 'While using the hasOwnProperty() method, it may turn useless because the rendering of the object happens when defining a property named hasOwnProperty. To support this, try to understand the code snippet given below.', ""In the above code snippet, it is evident that the 'in' method follows the constructor property of Object.prototype from where all the objects get inherited."", ""To add a few points, there is a disadvantage for both the methods. Both the methods can easily give us the information about a property that has already been declared but they can't tell us about the property containing a real value.""]","['In JavaScript, the hasOwnProperty() method is defined as a property to ensure whether the object belongs to the mentioned project or not. If it is found that the property belongs to a recognized object, then it shall return a Boolean statement based output, i.e. true or false.', 'One important aspect to note here is that the method hasOwnProperty() generally ignores inherited properties. This means that method shall return its true if the object is found to have a non-inherited property and the name is specified by propname. If it returns false, then it means that the object does not have any property with a specified name, or it has inherited the property from the object of the proptype.', 'Another added advantage of using the hasOwnProperty() method is that it can initialize an object by following up with the concept of passing a string as the default argument. It shall respond quickly with true if the value is found to be available to the object. Else, it will return false if not found. It can be demonstrated using the code snippet given below.', 'In the code snippet given above, the variable creates a new object, Car. It can now be stated that the Car is initiated having its properties and name defined under the constructor. Although the colour might not be mentioned within the object when initiated, it will always be available on the prototypical hierarchy. Therefore, the hasOwnProperty() will return true always for the name, but for colour, it will return false.', ""When it comes to performance, hasOwnProperty() works smoothly while making its way through the object with loops. By now, we can say that if the properties specifically belong to the object. They don't have any correlation with the prototype. The demonstration of this can be shown using the code snippet given below."", 'In the above code snippet, it is evident that harrypotter already have hasOwnProperty. Thus, it will never make a call to the object.prototype.hasOwnProperty. It is assumed that this might encounter cases where it may allow to make a call, but it may eventually fail. So, it is always recommended to be aware of the possibility of calls. The below code snippet shows its workaround.', 'In the above code snippet, it is clear that harrypotter defines its own hasOwnProperty. It will never make calls to the Object.prototype.hasOwnProperty because there is a possibility that it may return false if it encounters some cases where the value is false and it becomes difficult to make things work around the corner. To support this statement, see the code snippet given below.', 'Similar to the hasOwnProperty, there is another method called ""in"" method. It is also used to check if the key is present for the object or not. However, it is important to note that is the key difference between hasOwnProperty and in method lies in the fact that the in method will not follow the order of distinguishing between the properties that get inherited and the that inherited properties are specially created for the object. This can be shown using the code snippet given below.', 'In this tutorial, we discussed about the hasOwnProperty() method in JavaScript. In general, this method is a great choice for most of the developers to enquire and avoid issue relating to some special keys like constructor. It is recommended that if we find any object having any property, it will use hasOwnProperty() by default. In case of the presence of function intended to make a call by checking the object for toString() method, we must use in.']","['object.hasOwnProperty(propname)', 'var movie = {', ""name: 'iron man',"", ""genre: 'super hit',"", 'var song = {', ""name: 'cardigan',"", ""movie.hasOwnProperty('name');"", ""movie.hasOwnProperty('type');"", ""song.hasOwnProperty('name');"", ""song.hasOwnProperty('status');"", 'var o = new Object();', 'o.x = 3.14;', 'o.hasOwnProperty(""x"");', 'o.hasOwnProperty(""y"");', 'o.hasOwnProperty(""toString"");', 'hasOwnProperty() will return true even if you define the undefined or null value.', 'let a = new Object();', 'a.propertyOne = null;', ""a.hasOwnProperty('propertyOne')"", 'a.propertyTwo = undefined;', ""a.hasOwnProperty('propertyTwo')"", 'function Car(name) {', 'this.name = name;', ""Car.prototype.color = 'red';"", ""const bmw = new Car('x1');"", 'console.log(bmw.name);', 'console.log(bmw.color);', ""console.log(bmw.hasOwnProperty('name'));"", ""console.log(bmw.hasOwnProperty('color'));"", 'function Car(name) {', 'this.name = name;', ""Car.prototype.color = 'red';"", ""const BMW = new Car('x1');"", 'for (let car in BMW) {', ""car + ':', BMW[car];"", 'output: name: x1', 'output: color: red', '/**************************************/', '/*will loop through only self properties of the object,', 'excludes property generated through prototype method */', 'for (let car in BMW) {', 'if (BMW.hasOwnProperty(car)) {', ""console.log(car + ':', BMW[car]);"", 'var harrypotter = {', 'hasOwnProperty: function() {', 'return true;', 'console.log(harrypotter.hasOwnProperty(""ridikulus""));', 'Object.prototype.hasOwnProperty.call(harrypotter, ""ridikulus"");', 'Obje ct.prototype.hasOwnProperty.call(harrypotter, ""ridikulus"");', 'var fantasyLit = {', 'tolkien: ""The Lord of the Rings"",', 'lewis: ""The Chronicles of Narnia""', 'console.log(""tolkien"" in fantasyLit);', 'console.log(""asimov"" in fantasyLit);', 'console.log(""constructor"" in fantasyLit);', 'var declared;', 'console.log(""declared"" in window);', 'console.log(window.hasOwnProperty(""declared""));', 'console.log(declared);', 'var obj = {', 'myUndefined: undefined', 'console.log(""myUndefined"" in obj);', 'console.log(obj.hasOwnProperty(""myUndefined""));', 'console.log(obj.myUndefined);']",[],[],[]
