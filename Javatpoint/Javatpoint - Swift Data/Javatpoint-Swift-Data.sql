CREATE DATABASE  IF NOT EXISTS `web_scraped_data` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `web_scraped_data`;
-- MySQL dump 10.13  Distrib 8.0.26, for Win64 (x86_64)
--
-- Host: localhost    Database: web_scraped_data
-- ------------------------------------------------------
-- Server version	8.0.26

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `javatpoint_swift_data`
--

DROP TABLE IF EXISTS `javatpoint_swift_data`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `javatpoint_swift_data` (
  `page_no` int NOT NULL,
  `main_headings` varchar(52) DEFAULT NULL,
  `main_contents` varchar(581) DEFAULT NULL,
  `links` varchar(2437) DEFAULT NULL,
  `image_urls` varchar(84) DEFAULT NULL,
  `video_urls` varchar(2) DEFAULT NULL,
  `sub_headings_h2` varchar(288) DEFAULT NULL,
  `sub_headings_h3` varchar(454) DEFAULT NULL,
  `sub_headings_h4` varchar(257) DEFAULT NULL,
  `facts` varchar(2099) DEFAULT NULL,
  `definitions` varchar(1276) DEFAULT NULL,
  `explanations` varchar(2559) DEFAULT NULL,
  `codes` varchar(2051) DEFAULT NULL,
  `outputs` varchar(530) DEFAULT NULL,
  `table_data` varchar(1804) DEFAULT NULL,
  `list_items` varchar(1378) DEFAULT NULL,
  PRIMARY KEY (`page_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `javatpoint_swift_data`
--

LOCK TABLES `javatpoint_swift_data` WRITE;
/*!40000 ALTER TABLE `javatpoint_swift_data` DISABLE KEYS */;
INSERT INTO `javatpoint_swift_data` VALUES (0,'[\'Swift Tutorial\']','[\'Our Swift Tutorial provides basic and advanced concepts of Swift. This tutorial is designed for beginners and professionals.\']','[\'https://www.javatpoint.com/swift-introduction\', \'https://www.javatpoint.com/swift-tutorial\', \'https://www.javatpoint.com/swift-introduction\', \'https://www.javatpoint.com/history-of-swift\', \'https://www.javatpoint.com/swift-syntax\', \'https://www.javatpoint.com/swift-data-types\', \'https://www.javatpoint.com/swift-variables\', \'https://www.javatpoint.com/swift-constants\', \'https://www.javatpoint.com/swift-literals\', \'https://www.javatpoint.com/swift-vs-objective-c\', \'https://www.javatpoint.com/first-swift-program\', \'https://www.javatpoint.com/swift-operators\', \'https://www.javatpoint.com/swift-assignment-operator\', \'https://www.javatpoint.com/swift-arithmetic-operators\', \'https://www.javatpoint.com/swift-remainder-operator\', \'https://www.javatpoint.com/swift-unary-minus-plus-operator\', \'https://www.javatpoint.com/swift-unary-minus-plus-operator#unary-plus-operator\', \'https://www.javatpoint.com/swift-compound-assignment-operators\', \'https://www.javatpoint.com/swift-comparison-operators\', \'https://www.javatpoint.com/swift-ternary-conditional-operator\', \'https://www.javatpoint.com/swift-range-operators\', \'https://www.javatpoint.com/swift-switch-statement\', \'https://www.javatpoint.com/swift-if-statement\', \'https://www.javatpoint.com/swift-if-else-statement\', \'https://www.javatpoint.com/swift-if-else-if-statement\', \'https://www.javatpoint.com/swift-nested-if-else-statement\', \'https://www.javatpoint.com/swift-gaurd-statement\', \'https://www.javatpoint.com/swift-break-statement\', \'https://www.javatpoint.com/swift-continue-statement\', \'https://www.javatpoint.com/swift-fallthrough-statement\', \'https://www.javatpoint.com/swift-4-loops\', \'https://www.javatpoint.com/swift-for-in-loop\', \'https://www.javatpoint.com/swift-while-loop\', \'https://www.javatpoint.com/swift-repeat-while-loop\', \'https://www.javatpoint.com/swift-strings\', \'https://www.javatpoint.com/swift-functions\', \'https://www.javatpoint.com/swift-nested-function\', \'https://www.javatpoint.com/swift-function-parameter-and-return-value\', \'https://www.javatpoint.com/swift-recursion\', \'https://www.javatpoint.com/swift-function-overloading\', \'https://www.javatpoint.com/swift-arrays\', \'https://www.javatpoint.com/swift-dictionary\', \'https://www.javatpoint.com/swift-sets\', \'https://www.javatpoint.com/swift-closures\', \'https://www.javatpoint.com/swift-typealias\', \'https://www.javatpoint.com/swift-introduction\', \'https://www.javatpoint.com/swift-introduction\']','[\'https://static.javatpoint.com/tutorial/swift/images/swift-tutorial.png\']','[]','[\'Swift Tutorial Index\', \'Prerequisites\', \'Audience\', \'Problem\']','[]','[]','[\'Swift is a general purpose programming language for developing iOS applications. It is developed by Apple Inc.\', \'Swift Tutorial\', \'Swift Operators\', \'Control Statement\', \'Swift Loops\', \'Swift Strings\', \'Swift Functions\', \'Swift Collection\', \'Before learning Swift, you must have the basic knowledge of programming concepts or any programming language.\', \'Our Swift tutorial is designed to help beginners and professionals.\', \'We assure that you will not find any problem in this Swift tutorial. But if there is any mistake, please post the problem in contact form.\']','[]','[\'Our Swift tutorial includes all topics of Swift Programming such as what is swift, History of Swift, Features of Swift, Swift vs Other Programming Languages, Environment Setup, First Swift Program, Syntax, Datatypes, Variables, Constants & Literals, Operators, Control Statements, Loops, Strings, Functions, Collection etc.\']','[]','[]','[]','[\'|||Swift Tutorial|||What is Swift?|||History of Swift|||Swift Syntax|||Swift Datatypes|||Swift Variables|||Swift Constants|||Swift Literals|||Swift vs Objective C|||First Swift Program||||||Swift Operators|||Assignment Operator|||Arithmetic Operators|||Remainder Operator|||Unary Minus Operator|||Unary Plus Operator|||Compound Assignment|||Comparison Operators|||Ternary Conditional|||Range Operators||||||Switch Statement|||if Statement|||if-else Statement|||if-else-if Statement|||Nested if-else Statement|||Gaurd Statement|||Break Statement|||Continue Statement|||Fallthrough Statement||||||Swift Loops|||for-in loop|||while loop|||repeat-while loop||||||Swift Strings||||||Swift Functions|||Swift Nested Function|||Parameter & Return Value|||Swift Recursion|||Function Overloading||||||Swift Arrays|||Swift Dictionary|||Swift Sets|||Swift Closures|||Swift Typealias|||\']'),(1,'[\'What is Swift? \']','[\'Swift is a general purpose, multi-paradigm, compiled programming language for developing iOS and OS X tvOS, watchOS applications. It is developed by Apple Inc. It is powerful and intutive language which is easy to learn. Swift code is safe, precise and runs very fast. \']','[\'https://www.javatpoint.com/history-of-swift\', \'https://www.javatpoint.com/swift-tutorial\', \'https://www.javatpoint.com/history-of-swift\', \'https://www.javatpoint.com/swift-tutorial\', \'https://www.javatpoint.com/history-of-swift\']','[]','[]','[\'Swift 4 \', \'Swift 4 Features\', \'Newly added features in Swift 4\']','[]','[]','[\'Swift4 follows a modern programming pattern to overcome common programming errors: \', \'Swift 4 adopts the features of C and Objective-C without having the complexity of C language. \']','[\'Swift follows Objective-C runtime library which allows C, Objective-C, C++ and Swift code to run within one program. Swift is built with open source LLVM compiler and included in Xcode since version 6. \']','[\'Swift 4 is the latest version of Swift which inbuilt the features of Swift 3 and also enhance the robustness and stability of the language. Swift 4 has improved standard library, extended features like smart key paths and serialization, shortening build times and reducing the size of app binaries. \']','[]','[]','[]','[\'|||In Swift 4, variables are always initialized before use.|||Array indices are checked for out-of-bounds errors.|||Integers are checked for overflow.|||Optionals ensure that nil values are handled explicitly.|||Atomatic memory is management. |||Error handling allows controlled recovery from unexpected failures. ||||||Swift 4 uses a safe programming approach. It is very easy to laern and precise to use. |||Swift 4 provides a enhanced set of modern programming features.|||Swift 4 follows the Objective-C like syntax. |||Swift 4 provides an easy way to write iOS and OS X apps.|||Swift 4 provides seamless access to existing Cocoa frameworks.|||Swift 4 unifies the procedural and object-oriented portions of the language.|||Swift 4 does not need a separate library import to support functionalities like input/output or string handling. ||||||Swift 4 is faster, easier to use Strings that provides Unicode correctness. It also adds support for creating, using and managing substrings. |||Provide smart key paths for type-safe, efficient, extensible key value coding for Swift types.|||Enhanced Dictionary and Set types.|||Enforced exclusive access to memory. |||\']'),(2,'[\'History of Swift Programming Language \']','[\"Swift was introduced in 2014 at Apples\'s Worldwide Developers Confrence. \"]','[\'https://www.javatpoint.com/swift-syntax\', \'https://www.javatpoint.com/swift-introduction\', \'https://www.javatpoint.com/swift-syntax\', \'https://www.javatpoint.com/swift-introduction\', \'https://www.javatpoint.com/swift-syntax\']','[]','[]','[\'Swift Version History\']','[]','[]','[]','[\"Swift first version was 1.0 which undergone a major upgrade to Swift 2 at WWDC 2015. Its upgraded version 2.2 was made open-source software under the Apache License 2.0 on December 3, 2015, for Apple\'s platforms and Linux. \", \'Its third version, Swift 3.0 went through a significant evolution where its syntax was changed. Swift overcame the popularity of Objective C in the first quarter of 2018. \', \'Swift gone through several changes in Swift 4.0 version where you can update the code written with previous versions of Swift using the migration functionality built into Xcode. \']','[\'The development of Swift was started in 2010 by Chris Lattner with other programmers i.e. Doug Gregor, John McCall, Ted Kremenek, and Joe Groff at Apple. The basic idea of Swift was taken from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and many other programming languages.\']','[]','[]','[\'Version|||Released Date&&&Swift 1.0|||2014-09-09&&&Swift 1.1|||2014-10-22&&&Swift 1.2|||2015-04-08&&&Swift 2.0|||2015-09-21&&&Swift 3.0|||2016-09-13&&&Swift 4.0|||2017-09-19&&&Swift 4.1|||2018-03-29&&&Swift 4.2|||2018-09-17\']','[]'),(3,'[\'Swift Syntax \']','[\'Comments are used in programs to make them clearly understandable. They are like helping texts in programs and ignored by compiler. In Swift 4, single line comments are written using // at the beginning of the comment. \']','[\'https://www.javatpoint.com/swift-data-types\', \'https://www.javatpoint.com/history-of-swift\', \'https://www.javatpoint.com/swift-data-types\', \'https://www.javatpoint.com/history-of-swift\', \'https://www.javatpoint.com/swift-data-types\']','[]','[]','[\'Comments in Swift\', \'Semicolons in Swift\', \'Identifiers in Swift\', \'Reserved Keywords in Swift\', \'Whitespaces in Swift\', \'Literals in Swift\', \'Print Statement in Swift \']','[\'Single line comment in Swift 4:\', \'Multi-line comment is Swift 4: \', \'For example,\', \'Without using semicolon:\', \'Keywords used in declarations\', \'Keywords used in Statements \', \'Keywords used in expressions and types\', \'Keywords used in particular contexts\', \'For example\', \'For example\', \'For example\', \'For example\']','[]','[\'Multi-line comments start with /* and end with the characters */ as shown below -\', \'Multi-line comments can be nested in Swift 4. i.e. \', \'These are some example of acceptable identifiers: \', \'We have to put at least one whitespace character (usually a space) between var and age to make compiler to distinguish them. \', \'On the other hand, in the following statement -\', \'No whitespace character is necessary between courses and =, or between = and html, although you can include them for better readability.\', \'You should make the equal space on both side of the operator.\', \'The Swift 4 compiler ignores blank line which contains only whitespace. \', \'A literal is used to represent the source code of a value of an integer, floating-point number, or string type. \', \'Integer literal\', \'Floating-point literal\', \'We can use custom separator and terminators according to our requirement. \']','[\'In Swift 4, identifiers are used to identify a variable, function, or any other user-defined item. Swift 4 identifiers start with an alphabet A to Z or a to z or an underscore _ followed by zero or more letters, underscores, and digits (0 to 9).\', \"In Swift 4, we can\'t use special characters such as @, $, and % within identifiers. Swift 4 is a case sensitive programming language, so Literal and literal are two different identifiers. \", \'If you want to use a reserved word as an identifier you will have to put a backtick (`) before and after that reserved word. For example, class is not a valid identifier, but `class` is valid. \', \"In Swift 4, the reserved keywords can\'t be used as constants or variables or any other identifier names. If you want to use them as identifiers, you will use them within backticks (\').\", \'In Swift 4, whitespace is used to describe blanks, tabs, newline characters, and comments. It separates one part of the statement from another. It makes the computer to identify that here one element ends and another begins. \', \'The first print statement adds \\n , newline Feed as terminator by default, where as in second print statement we\'ve given \" End \" as terminator, hence it\'ll print \"End \" instead of \\n.\']','[\"In Swift 4, you don\'t need to type a semicolon (;) in your code as a closing statement. Though, it is optional, you can use it without any problem. If you are using multiple statements in the same line, then you have to use a semicolon as a delimiter, otherwise the compiler will raise a syntax error.\", \'In Swift4, the \'print\' keyword is used to print anything. There are three different properties of print keyword.\n\nItems: Items that you want to print. \nSeparator: Used to separate items. \nTerminator: It specifies the last value where the line ends. \n\nFor example\n\r\nprint(\"Items you want to print\", separator: \"Value \" , terminator: \"Value\")\r\n// E.g. of print statement.\r\nprint(\"Value one\")\r\n// prints \"Value one \\n\" Adds, \\n as terminator and \" \" as separator by\r\ndefault.\r\nprint(\"Value one\",\"Value two\", separator: \" Next Value\" , terminator: \" End\")\r\n//prints \"Value one Next Value Value two End\"\r\n\nThe first print statement adds \\n , newline Feed as terminator by default, where as in second print statement we\'ve given \" End \" as terminator, hence it\'ll print \"End \" instead of \\n.\nWe can use custom separator and terminators according to our requirement. \n\n\nNext TopicSwift Datatypes\n\n\n\n← prev\nnext →\n\n\n\']','[\'/* This is multiline comment */\', \'/* This is a multi-line comment.\', \'/* This is the second line. */ */\', \'/* First Swift 4 program */\', \'var myString = \"Hello, World!\"; print(myString)\', \'/* First Swift 4 program */\', \'var myString = \"Hello, World!\"\', \'print(myString)\', \'Ajeet    sonoo     ak_47\', \'var age\', \'int courses = html + css   //discount on the combined course\', \'int courses = html + css   //Correct statement\', \'int courses= html+ css   //Incorrect statement\', \'3.14159\', \'String literal\', \'\"Hello, JavaTpoint!\"\', \'print(\"Items you want to print\", separator: \"Value \" , terminator: \"Value\")\', \'print(\"Value one\")\', \'default.\', \'print(\"Value one\",\"Value two\", separator: \" Next Value\" , terminator: \" End\")\']','[]','[\'Class|||Func|||Let|||public&&&deinit|||Enum|||extension|||import&&&Init|||internal|||operator|||private&&&protocol|||static|||struct|||subscript&&&typealias|||var||||||\', \'break|||case|||continue|||default&&&do|||else|||fallthrough|||for&&&if|||in|||return|||switch&&&where|||while||||||\', \'as|||dynamicType|||false|||is&&&nil|||self|||Self|||super&&&true|||_COLUMN_|||_FILE_|||_FUNCTION_&&&_LINE_|||||||||\', \'associativity|||convenience|||dynamic|||didSet&&&final|||get|||infix|||inout&&&lazy|||left|||mutating|||none&&&nonmutating|||optional|||override|||postfix&&&precedence|||prefix|||Protocol|||required&&&right|||set|||Type|||unowned&&&weak|||willSet||||||\']','[\'|||Items: Items that you want to print. |||Separator: Used to separate items. |||Terminator: It specifies the last value where the line ends. |||\']'),(4,'[\'Data Types in Swift \']','[\'In Swift 4 programming language, data types are used while creating a variable or a constant. In every programming language, we have to use different types of variables to store data. Variables are reserved memory locations for storing values. This means when you a variable, you reserve some space in memory. \']','[\'https://www.javatpoint.com/swift-variables\', \'https://www.javatpoint.com/swift-syntax\', \'https://www.javatpoint.com/swift-variables\', \'https://www.javatpoint.com/swift-syntax\', \'https://www.javatpoint.com/swift-variables\']','[]','[]','[\'Size of a Data Type \', \'Swift 4 Data types \', \'UInt Data type\', \'Float Data type\', \'Double Data type \', \'Character Data type \', \'String Data type \', \'Range of data type variables in tabular form\']','[\'For example, \', \'Boolean Data type example: \', \'Integer Data type example: \', \'Example of .min and .max Int8 data type \', \'Float data type example: \', \'Double data type example: \', \'Character data type example: \', \'String Data type example: \']','[]','[\'In Swift 4, you can do this by declaring variables and the data type as:\', \'Here, we declared Marks variable of type Int which stores value 70 and, Name variable of type String which stores value Alex. \', \'You will get a compile time error if you use the following syntax:\', \"It will show a message stating cannot convert value of type \'String\' to specify type \'Int\'.\", \'It shows that a number can only be stored in Int data type not in String data type. \', \'So, data type size 1 bit can store upto 21 =2 values: either 0 or 1. \', \'Data type size 2 bit can store up to 22 = 4 values. Which are: (00,01,10,11). It can be represented as: \', \'Same as a data type of n bit system can store up to 2n values. \', \'The most common Swift 4 data types are: \', \'Explanation: In the above program, we have declared a variable highScore of Int type and then assign a value of 50 so; it provides an output of 50. \', \'Later, we changed the value to 40 using assignment operator highScore = 40 so, it provides the output 40.\', \'There are some more variants of Int data type in Swift. \', \'Int8 data type can store both positive and negative small numbers. Its default value is 0, size is 8 bit and range varies from -128 to 127. \', \'It can store 28 values means values from -128 to 127 including 0. \', \'You can check the highest and lowest values Int8 data type can store by using .min and .max.\', \'UInt (Unsigned Integer) can only store unsigned numbers (positive and zero). Other remaining properties are same as Integer data type means: \', \'The Double data type can store decimal or fractional numbers as Float data type but larger decimal points than Float supports. \', \'Its default value is 0.0, size: 64-bit, range varies from 2.3*10-308 to 1.7*10308 (~15 digits)\', \'Character data type can store a single character string literal. It is used to add emoji or languages other than English. \', \'String data type can store collection of characters. It is Value type and its default value is \"\" (Empty String). \', \'Swift facilitates you to use a few special escape sequences to use them in string. For example,\']','[\'A data type is a type of data (value) a variable can store in it. This data can be a text/string (\"JavaTpoint\") or a number (12.34) or just bits (0 & 1). We have to define the data type to ensure that only defined type of data is stored. \', \'Suppose you have to store data of a student where you need to store his name and marks. The mark is a number (i.e. 70) and the name is a string (i.e. Alex) so, you need to create two variables or constants to store the data.\', \"Size of the data type specifies the size of data that can be stored in a given variable or constant. The data type\'s size is measured in bit and it can store a value up to 2bits. \", \'The float data type can store decimal and fractional numbers. Its default value is 0.0, size 32 bit and range varies from 1.2*10-38 to 3.4 * 1038 (~6 digits).\']','[]','[\'var Marks:Int = 70\', \'var Name:String = \"Alex\"\', \'var Score:Int = \"Alex\"\', \'0 -> a or 0\', \'1 -> b or 1\', \'00 -> a or 0\', \'01 -> b or 1\', \'11 -> c or 2\', \'10 -> d or 3\', \'let result:Bool = true\', \'print(result)\', \'var highScore:Int = 50\', \'print(highScore)\', \'highScore = 40\', \'print(highScore)\', \'var highScore:Int8 = -128//ok\', \'highScore = 127 //ok\', \'highScore = 128 // error occurred\', \'highScore = -129 //error occurred\', \'print(Int8.min)\', \'print(Int8.max)\', \'let highScore:Float = 3.1416\', \'print(highScore)\', \'let highScore:Double = 3.1416\', \'print(highScore)\', \'let playerName:Character = \"J\"\', \'let playerNameWithUnicode:Character = \"\\u{134}\"\', \'print(playerName)\', \'print(playerNameWithUnicode)\', \'\\0 (null character),\', \'\\\\ (a plain backslash \\),\', \'\\t (a tab character),\', \'\\v (a vertical tab),\', \'\\r (carriage return),\', \'\\\" (double quote),\', \"\\\' (single quote), and\", \'\\u{n} (unicode code point, n is in hexadecimal).\', \'let playerName = \"Jack\"\', \'let playerNameWithQuotes = \"\\\"Jack\\\"\"\', \'let playerNameWithUnicode = \"\\u{134}ack\"\', \'print(playerName)\', \'print(playerNameWithQuotes)\', \'print(playerNameWithUnicode)\']','[\'true\', \'50\', \'40\', \'-128\', \'127\', \'3.1416\', \'3.1416\', \'J\', \'Ĵ\', \'Jack\', \'\"Jack\"\', \'Ĵack\']','[\'Type|||Typical Bit Width|||Typical Range&&&Int8|||1byte|||-127 to 127&&&UInt8|||1byte|||0 to 255&&&Int32|||4bytes|||-2147483648 to 2147483647&&&UInt32|||4bytes|||0 to 4294967295&&&Int64|||8bytes|||-9223372036854775808 to 9223372036854775807&&&UInt64|||8bytes|||0 to 18446744073709551615&&&Float|||4bytes|||1.2E-38 to 3.4E+38 (~6 digits)&&&Double|||8bytes|||2.3E-308 to 1.7E+308 (~15 digits)\']','[\'|||The Bool data type can store only two values either true or false. |||Its default value is False. |||It is generally used in if-else statement. ||||||The integer data type can store both positive and negative numbers including zero with no fractional values. |||Its default value is 0. |||Its size depends on the platform type which may be 32 bits or 64 bits.|||Range: -2,147,483,648 to 2,147,483,647 (32 bit platform)|||-9223372036854775808 to 9223372036854775807 (64 bit platform|||Integer data type has many other variants such as UInt, Int8, Int16 etc. which can be used if you want to specify storage type specifically. ||||||Default Value: 0|||Size: 32/64 bit depends on the platform type.|||Range: 0 to 4294967295 (32 bit platform)|||0 to 18446744073709551615 (64 bit platform)|||\']'),(5,'[\'Swift variables\']','[\'Variables are used to store data in memory so that we can use them in program. Variables are like container that can hold data which can be changed later. Every variable has a unique name called identifier. \']','[\'https://www.javatpoint.com/swift-constants\', \'https://www.javatpoint.com/swift-data-types\', \'https://www.javatpoint.com/swift-constants\', \'https://www.javatpoint.com/swift-data-types\', \'https://www.javatpoint.com/swift-constants\']','[]','[]','[\'How to declare Swift Variables?\', \'How to assign values in Swift variable?\', \'How to change the value of Swift Variable?\', \'Print Current value of variables\']','[\'Example: \', \'Example: \', \'Note: As, Swift is a type inferred language, it automatically knows \"javatpoint.com\" is a String and declare siteName as a String. You can even remove the type (:String) from declaration and it will show the same result.\n\', \'Example: \', \'Example:\', \'Example: \']','[]','[\'In Swift 4, var keyword is used to declare variable. \', \"Let\'s see how to assign values to a Swift variable.\", \'Assignement operator (=) is used to assign value in Swift variable.\', \'We can change the value of a variable by using assignement operator but without var keyword.\']','[\'Here, we have declared a variable named siteName of type String. It can hold only string values. If you execute the above code, it will give a compile time error because we have only declared variable and not assigned any value.\', \'We can use the print function to print the current value of variable or constant. Wrap the value in parenthesis with a backslash before the opening parenthesis. \']','[]','[\'var siteName:String\', \'print(siteName)\', \'var siteName:String\', \'siteName = \"javatpoint.com\"\', \'print(siteName)\', \'var siteName:String = \"javatpoint.com\"\', \'print(siteName)\', \'var siteName = \"javatpoint.com\"\', \'print(siteName)\', \'var siteName = \"javatpoint.com\"\', \'siteName = \"hindi100.com\"\', \'print(siteName)\', \'var varA = \"Java\"\', \'var varB = 3\', \'print(\"The course duration of \\(varA) is \\(varB) months.\")\']','[\'javatpoint.com\', \'javatpoint.com\', \'hindi100.com\', \'The course duration of Java is 3 months.\']','[]','[]'),(6,'[\'Swift Constants \']','[\"As the name shows, constants are the special type of variables whose values can\'t be changed. They are like containers which are stored permanently with some items. \"]','[\'https://www.javatpoint.com/swift-literals\', \'https://www.javatpoint.com/swift-variables\', \'https://www.javatpoint.com/swift-literals\', \'https://www.javatpoint.com/swift-variables\', \'https://www.javatpoint.com/swift-literals\']','[]','[]','[\'How to declare Swift Constants?\', \'How to assign values in Swift constant?\']','[\'Example: \', \'Example: \', \'Example:\']','[\"Note: You can\'t change the value of the constant. \"]','[\'The let keyword is used to declare a variable. \', \"Let\'s see how to assign values to a Swift constant. \", \'We can assign a value in Swift constant by using Assignment operator (=).\', \'As Swift is a type inferred language, you can remove the type (:String) from declaration and even it will show the correct result.\']','[\'Here, we have declared a constant named siteName of type String. It can hold only string values. If you execute the above code, it will give a compile time error because we have only declared the constant and not assigned any value. \']','[]','[\'let siteName:String\', \'print(siteName)\', \'let siteName:String\', \'siteName = \"javatpoint.com\"\', \'print(siteName)\', \'let siteName:String = \"javatpoint.com\"\', \'print(siteName)\', \'let siteName = \"javatpoint.com\"\', \'print(siteName)\']','[\'javatpoint.com\', \'javatpoint.com\']','[]','[]'),(7,'[\'Swift Literals \']','[\'A Literal is the direct value of variable or constant. It may be a number, character or string. Literals are used to initialize or assign value to variables or constants. \']','[\'https://www.javatpoint.com/swift-vs-objective-c\', \'https://www.javatpoint.com/swift-constants\', \'https://www.javatpoint.com/swift-vs-objective-c\', \'https://www.javatpoint.com/swift-constants\', \'https://www.javatpoint.com/swift-vs-objective-c\']','[]','[]','[\'Types of Swift Literals \', \'String & Character Swift literals\', \'Floating Point Literals\', \'Boolean Literals \', \'Type Alias\', \'Type Safety \', \'Type Inference \']','[\'Example: \', \'Integer Literals\', \'Example of Integer Literal:\', \'Example: \', \'Decimal: \', \'Example:\', \'Hexadecimal: \', \'Example:\', \'Example:\', \'Syntax: \', \'Example:\', \'Example:\', \'Example:\']','[]','[\'Here, javatpoint.com is a literal and siteName is a constant. \', \'Floating point literals are used for float and double values. There are two types of floating point literals: \', \'There are two Boolean literals in Swift: true and false. \', \'The typealias is used to create a new name for an existing type. \', \'Let\'s take an example where we put \"Raj\" as another name for type Int. \', \'You can see that the above program get a compile time error just because of type safety.\']','[\"The above example contains two integer literals 0b11111111 (binary literal) and 1231 (decimal literal). 255 is the decimal value of 11111111 that\'s why the print(binaryNumber) statement outputs 255 in the screen. \", \'A sequence of characters covered by double quotes is called string literal and a single character covered by double quotes is called character literal. \', \'It can store an optional exponent, indicated by an uppercase or lowercase e. For decimal numbers with an exponent of exp, the base number is multiplied by 10exp. \', \'Hexadecimal floats must contain an exponent, indicated by an uppercase or lowercase p. For hexadecimal numbers with an exponent of exp, the base number is multiplied by 2exp.\', \"Swift 4 is a type-safe language. If your code requires Int, then you can\'t use String. It performs type-checks when compiling your code and flags any mismatched types as errors. \", \'Swift is a type inference language means when you compile the Swift code, it automatically check the type of value you provide. It automatically choose the appropriate data type for successful execution. \']','[]','[\'let siteName = \"javatpoint.com\"\', \'let binaryNumber = 0b11111111\', \'print(binaryNumber)\', \'print(1231)\', \'let randomCharacter:Character = \"C\"\', \'let randomString:String = \"C is an awesome programming language\"\', \'print(randomCharacter)\', \'print(randomString)\', \'let someFloat = 3.1416\', \'let someAnotherFloat = 3.14e2\', \'print(someFloat)\', \'print(someAnotherFloat)\', \'let someFloat = 0xFp10\', \'let someAnotherFloat = 0xFp-12\', \'print(someFloat)\', \'print(someAnotherFloat)\', \'let result1:Bool = false\', \'let result2:Bool = true\', \'print(result1)\', \'print(result2)\', \'typealias newname = type\', \'typealias Raj = Int\', \'var distance: Raj = 100\', \'print(distance)\', \'var varA = 12\', \'varA = \"Hello World!\"\', \'print(varA)\', \'var varA = \"Love is life\"\', \'print(varA)\', \'var varB = 143\', \'print(varB)\', \'var varC = 3.1416\', \'print(varC)\', \'var varD = 3 + 0.1416\', \'print(varD)\']','[\'255\', \'1231\', \'C\', \'C is an awesome programming language\', \'3.1416\', \'314.0\', \'15360.0\', \'0.003662109375\', \'false\', \'true\', \'100\', \"main.swift:2:8: error: cannot assign value of type \'String\' to type \'Int\'\", \'varA = \"Hello World!\"\', \'^~~~~~~~~~~~~~\', \'Love is life\', \'143\', \'3.1416\', \'3.1416\']','[]','[\'|||Binary Literals||||||It is used to represent binary values.|||It begins with 0b.|||||||||Octal Literals||||||It is used to represent octal values.|||It begins with 0o.|||||||||Hexadecimal Literals||||||It is used to represent hexadecimal value.|||It begins with 0x. |||||||||Decimal Literals||||||It is used represent decimal value.|||It begins with nothing. Everything you declare in integer literal is of type decimal.||||||||||||It is used to represent binary values.|||It begins with 0b.||||||It is used to represent octal values.|||It begins with 0o.||||||It is used to represent hexadecimal value.|||It begins with 0x. ||||||It is used represent decimal value.|||It begins with nothing. Everything you declare in integer literal is of type decimal.|||\']'),(8,'[\'Swift vs. Objective C \']','[\'If we talk about iOS development, there are two possibilities: \']','[\'https://www.javatpoint.com/first-swift-program\', \'https://www.javatpoint.com/swift-literals\', \'https://www.javatpoint.com/first-swift-program\', \'https://www.javatpoint.com/swift-literals\', \'https://www.javatpoint.com/first-swift-program\']','[]','[]','[\'Objective C \', \'Swift \']','[\'Advantages (Pros) of Objective C\', \'Disadvantages (Cons) of Objective C \', \'Advantages (Pros) of Swift\', \'Disadvantages (Cons) of Swift\n\nThe only one disadvantage of Swift app development is that it is not stable. You may get its upcoming versions and app changes and migration is not an easy task. \n\n\n\nNext TopicFirst Swift Program\n\n\n\n← prev\nnext →\n\n\n\']','[]','[]','[\'Here, we compare both languages and see what are the differences between them? What are the advantages and disadvantages of both and which one is better to deploy your project?\', \'Objective C was influenced by two languages i.e. C and Smalltalk and this is the reason why it has a complicated syntax. Objective-C uses dynamic typing and message passing. \', \'Swift is relatively a new language. Apple started to work on Swift in 2010 and it is first released to public in 2014. It has become open source in 2015. Swift follows the features of modern programming languages so, it is easier to learn. \']','[\'Objective C is a programming language created by the Stepstone Company in the early 1980s. It was released to the public in 1988. It was licensed by NeXT Computer, Inc. to develop the NeXTStep frameworks and finally acquired by Apple. It became the standard for many years for iOS apps development. \']','[]','[]','[]','[\"|||Objective C is well tested language because it has existed from many years. There is a lot of code written in Objective C. It has many well-documented, third-party frameworks. |||Objective C is compatible to C and C++ programming language. As Objective C is a superset of C thus, the code of C and C++ runs smoothly on this. |||Objective C is stable. You don\'t need to spend money on migrating if you have developed your app on Objective C. ||||||Objective C is hard to learn because its syntax is complicated. It is different from many other popular programming languages that\'s way Swift is preferred over it. |||A lower number of developers are interested to learn Swift because it is hard to learn. |||Objective C is not as secure as Swift. An app developed with Objective C is more prone to hack than Swift. ||||||Swift is safe. Swift has some features like generics, optional, type inference which make its apps less prone to errors.|||Apple is fully focused on Swift development so, it has a bright future. |||Swift is one of the most preferred programming languages while Objective C is a degrading one.|||Apps development in Swift is faster than in Objective C. ||||||The only one disadvantage of Swift app development is that it is not stable. You may get its upcoming versions and app changes and migration is not an easy task. |||&&&|||Objective-C|||Swift |||\"]'),(9,'[\'First Swift Program \']','[\'To run your first Swift program, you must have installed Xcode and Swift on your computer. \']','[\'https://www.javatpoint.com/swift-operators\', \'https://www.javatpoint.com/swift-vs-objective-c\', \'https://www.javatpoint.com/swift-operators\', \'https://www.javatpoint.com/swift-vs-objective-c\', \'https://www.javatpoint.com/swift-operators\']','[]','[]','[\'Program:\']','[\'Program Explanation \', \'The \"Hello World\" program on Terminal \', \'Example:\']','[\"Note: Unlike other programming language C, C++, Java, Python etc., Swift doesn\'t need to add a semicolon (;) at the end of the statement. It is optional.\nYou can add multiple lines in a single line by using semicolon (;) at the end of first statement. \"]','[\'Open the Xcode playground and write down the following code:\', \'xa0 xa0 xa0 3. print(\"Hello, World!\")\nThe above line is a print function in Swift. It is used to show the output on the screen.\', \'Follow the steps given below: \']','[\"xa0 xa0 xa0 2. import Swift\nThe import Swift keyword is used to access all the symbols defined inside the Swift language. Without using this keyword, you can\'t use print statement to print anything on Xcode.\"]','[\'xa0 xa0 xa0 1. // This is the first Swift program also called Hello, World! Program \nThe above line which is started with two slashes (//) is a comment. It is totally ignored by the compiler. Comments are used to make your code understandable by other person.\']','[\'import Swift\', \'print(\"Hello, World!\")\', \'print(\"Hello World\",\");print(\" Welcome to Javatpoint\")\']','[\'\"Hello World\"\', \'Hello, World!\']','[]','[\'|||Open the terminal |||Type swift and press enter. You will get a welcome message as Welcome to Apple Swift version x.x.x.|||Type print(\"Hello, World!\")|||Press Enter |||\']'),(10,'[\'Swift Operators\']','[\'In Swift 4, an operator is special symbol or phrase which is used to check, change or combine values. It tells the compiler to perform specific mathematical or logical manipulations. For example, the addition operator (+) adds two numbers, the logical AND operator (&&) combines two Boolean values etc.\']','[\'https://www.javatpoint.com/swift-switch-statement\', \'https://www.javatpoint.com/first-swift-program\', \'https://www.javatpoint.com/swift-assignment-operator\', \'https://www.javatpoint.com/swift-arithmetic-operators\', \'https://www.javatpoint.com/swift-remainder-operator\', \'https://www.javatpoint.com/swift-unary-minus-plus-operator\', \'https://www.javatpoint.com/swift-unary-minus-plus-operator#unary-plus-operator\', \'https://www.javatpoint.com/swift-compound-assignment-operators\', \'https://www.javatpoint.com/swift-comparison-operators\', \'https://www.javatpoint.com/swift-ternary-conditional-operator\', \'https://www.javatpoint.com/swift-range-operators\', \'https://www.javatpoint.com/swift-switch-statement\', \'https://www.javatpoint.com/first-swift-program\', \'https://www.javatpoint.com/swift-switch-statement\']','[]','[]','[\'Classification of Operators on Terminology\', \'The most common built-in operators in Swift 4\']','[]','[\'Note: The values associated with operator are operands. For example, in the expression 1 + 2, the + symbol is a binary operator and its two operands are the values 1 and 2.\']','[\'Swift 4 supports most of the standard C language operators. It enhances some capabilities to remove some common coding errors. \', \'There are three types of operators: unary, binary and ternary. \']','[\'Unary operator: Unary operators are used on a single target (like -a). Unary prefix operators appear immediately before their target (such as !b). Unary postfix operators appear immediately after their target (such as c!).\', \'Binary Operator: Binary operators are used when we have to operate on two targets. (like 2 + 3) and are infix because they appear in between their two targets. \', \'Ternary Operator: Ternary operators operate on three targets. Like C language, Swift also has only one ternary operator called the ternary conditional operator (a ? b : c).\']','[]','[]','[]','[]','[\'|||Assignment Operator|||Arithmetic Operators|||Remainder Operator|||Unary Minus Operator|||Unary Plus Operator|||Compound Assignment Operators |||Comparison Operators|||Ternary Conditional Operator|||Range Operators|||Logical Operators|||\']'),(11,'[\'Swift Switch Statement \']','[\'The Switch statement is used as a substitute for long if-else-if statement while matching complex patterns. It provides multiple cases to perform different actions according to different conditions. \']','[\'https://www.javatpoint.com/swift-if-statement\', \'https://www.javatpoint.com/swift-operators\', \'https://www.javatpoint.com/swift-if-statement\', \'https://www.javatpoint.com/swift-operators\', \'https://www.javatpoint.com/swift-if-statement\']','[\'https://static.javatpoint.com/tutorial/swift/images/swift-switch-statement.png\']','[]','[\'Working of Switch statement in Swift\', \'Switch Statement Example\', \'Switch statement with fallthrough in Swift \']','[\'Syntax: \', \'Example\']','[]','[\'The fallthrough statement is used in switch statement if you want to proceed the control to next case.\']','[\'In the above example, you can see that case 5 executes the statement print(\"It is Wednesday today\") and fallthrough keyword proceeds to case6 which prints print(\"It is Thursday today\").\']','[\"In the above program, switch statement starts by matching dayOfWeek value with case 1. Since dayOfWeek value doesn\'t match the first case value 1, it falls to the next case until it finds the match. It finds the match in case 6, print the declaration and the switch statement terminates.\"]','[\'switch variable/expression {\', \'case value1:\', \'case value2:\', \'default:\', \'let dayOfWeek = 6\', \'switch dayOfWeek {\', \'case 1:\', \'print(\"It is Sunday today\")\', \'case 2:\', \'print(\"It is Monday today\")\', \'case 3:\', \'print(\"It is Tuesday today\")\', \'case 4:\', \'print(\"It is Wednesday today\")\', \'case 5:\', \'print(\"It is Thursday today\")\', \'case 6:\', \'print(\"It is Friday today\")\', \'case 7:\', \'print(\"It is Saturday today\")\', \'default:\', \'print(\"Invalid day\")\', \'let dayOfWeek = 5\', \'switch dayOfWeek {\', \'case 1 :\', \'print(\"It is Sunday today\")\', \'case 2:\', \'print(\"It is Monday today\")\', \'case 3:\', \'print(\"It is Tuesday today\")\', \'case 4:\', \'print(\"It is Wednesday today\")\', \'case 5:\', \'print(\"It is Thursday today\")\', \'fallthrough\', \'case 6:\', \'print(\"It is Friday today\")\', \'case 7:\', \'print(\"It is Saturday today\")\', \'default:\', \'print(\"Invalid day\")\']','[\'It is Friday today\', \'It is Thursday today\', \'It is Friday today\']','[]','[\'|||The switch statement goes top to bottom, takes expressions and compares with each case values. |||If it matches the case, the statement inside the case is executed and the entire switch statement finishes its execution as soon as the first matching switch case is completed.|||If there is no match for the case, it goes to the next case.|||The default keyword is a code which runs if there is no case is matched. |||\']'),(12,'[\'Swift If Statement\']','[\'The if statement is a control flow statement which is used when we want to perform different actions according to some specified conditions which are either true or false. \']','[\'https://www.javatpoint.com/swift-if-else-statement\', \'https://www.javatpoint.com/swift-switch-statement\', \'https://www.javatpoint.com/swift-if-else-statement\', \'https://www.javatpoint.com/swift-switch-statement\', \'https://www.javatpoint.com/swift-if-else-statement\']','[]','[]','[]','[\'Syntax: \', \'Example: (if condition is true)\', \'Example: (if condition is false)\']','[]','[\'Here, expression is a Boolean expression which returns either true or false. \', \'In the above example, you can see that the statement inside the code block of if is not executed.\']','[\'In the above program, constant number is initialized with a value 5. Here, test expression evaluates true so inside the body of if statement is executed. \', \'If we initialise the value with negative number like -5 and the test condition is same then the test expression will evaluate false. So, the statement inside the code block of if is skipped without execution. \']','[]','[\'if expression {\', \'let number = 5\', \'if number > 0 {\', \'print(\"This is a positive number.\")\', \'print(\"This will be executed anyways.\")\', \'let number = -5\', \'if number > 0 {\', \'print(\"This is a positive number.\")\', \'print(\"This will be executed anyways.\")\']','[\'This is a positive number.\', \'This will be executed anyways.\', \'This will be executed anyways.\']','[]','[\'|||If the expression is evaluated to true, statements inside the code block of if is executed.|||If the expression is evaluated to false, statements inside the code block of if is skipped without execution. |||\']'),(13,'[\'Swift if-else Statement\']','[\'The Swift if-else statement contains two statements: if statement and else statement.\']','[\'https://www.javatpoint.com/swift-if-else-if-statement\', \'https://www.javatpoint.com/swift-if-statement\', \'https://www.javatpoint.com/swift-if-else-if-statement\', \'https://www.javatpoint.com/swift-if-statement\', \'https://www.javatpoint.com/swift-if-else-if-statement\']','[]','[]','[]','[\'Syntax: \', \'Example: \']','[]','[\'If the test evaluation is true, the if statement is executed and if the the test evaluation is false, then the else statement is executed. \', \'In the above program, the constant number is positive (5) so, the test case is evaluated true and statement inside the code block of if is executed.\', \'Let us change the constant number value to negative (-5) and the test condition is same.\', \'You can see that it executes the statement inside the code block of else.\']','[]','[]','[\'if expression {\', \'} else {\', \'let number = 5\', \'if number > 0 {\', \'print(\"This is a positive number.\")\', \'} else {\', \'print(\"This is not a positive number.\")\', \'print(\"This will be executed anyways.\")\', \'let number = -5\', \'if number > 0 {\', \'print(\"This is a positive number.\")\', \'} else {\', \'print(\"This is not a positive number.\")\', \'print(\"This will be executed anyways.\")\']','[\'This is a positive number.\', \'This will be executed anyways.\', \'This is not a positive number.\', \'This will be executed anyways.\']','[]','[]'),(14,'[\'Swift if-else-if Statement\']','[\'The if-else-if statement is used when you want to execute one block of code among many. \']','[\'https://www.javatpoint.com/swift-nested-if-else-statement\', \'https://www.javatpoint.com/swift-if-else-statement\', \'https://www.javatpoint.com/swift-nested-if-else-statement\', \'https://www.javatpoint.com/swift-if-else-statement\', \'https://www.javatpoint.com/swift-nested-if-else-statement\']','[]','[]','[]','[\'Syntax: \', \'Example: \']','[]','[\'If the test expression is false, code inside the else is executed. \', \'Hence, the statement print(\"This number is 0.\") inside the else statement.\']','[\'As long as the test expressions are true, the if statements are executed from top to bottom and then the control of program jumps outside if-else-if ladder.\']','[\'You can see that the constant number is initialized with value 0. Since if statements are executed from top to bottom, it checks the expression number > 0 which evaluates to false. It then checks the next expression number < 0 which also evaluates to false.\']','[\'if expression1 {\', \'else if expression2 {\', \'else if expression3 {\', \'let number = 0;\', \'if number > 0 {\', \'print(\"This is a positive number.\")\', \'else if (number < 0) {\', \'print(\"This is a negative number.\")\', \'print(\"This number is 0.\")\']','[\'This number is 0.\']','[]','[]'),(15,'[\'Swift Nested if-else Statement \']','[\'Swift language facilitates you to use an if-else statement inside an if-else statement. Nested if-else statement can also be used in switch statement in Swift. \']','[\'https://www.javatpoint.com/swift-gaurd-statement\', \'https://www.javatpoint.com/swift-if-else-if-statement\', \'https://www.javatpoint.com/swift-gaurd-statement\', \'https://www.javatpoint.com/swift-if-else-if-statement\', \'https://www.javatpoint.com/swift-gaurd-statement\']','[]','[]','[]','[\'Example: \']','[]','[]','[]','[]','[\'let n1 = 10, n2 = 22, n3 = 25\', \'if n1 >= n2 {\', \'if n1 >= n3 {\', \'print(\"The largest number is \", n1)\', \'else {\', \'print(\"The largest number is \", n3)\', \'if n2 >= n3 {\', \'print(\"The largest number is \",  n2)\', \'else {\', \'print(\"The largest number is \", n3)\']','[\'The largest number is 25\']','[]','[]'),(16,'[\'Swift Gaurd Statement\']','[\'Swift Guard statement is used as a substitute of Swift if statement. Guard statement provides benefits over if statement to control the program flow and write simple and clean code. \']','[\'https://www.javatpoint.com/swift-break-statement\', \'https://www.javatpoint.com/swift-nested-if-else-statement\', \'https://www.javatpoint.com/swift-break-statement\', \'https://www.javatpoint.com/swift-nested-if-else-statement\', \'https://www.javatpoint.com/swift-break-statement\']','[]','[]','[]','[\'Syntax: \', \'Example: \', \'Example 2: \']','[\'Note: The guard statement must contain a control statement return, break, continue or throw at the end of the code.\']','[\'Guard statement inside a function \', \'In Swift, we can also use a guard statement in function. \']','[]','[]','[\'guard expression else {\', \'guard true else {\', \'print(\"Condition is not satisfied.\")\', \'print(\"Condition is satisfied.\")\', \'func Function1() {\', \'guard false else {\', \'print(\"Condition is not satisfied.\")\', \'return\', \'print(\"Condition is satisfied.\")\', \'Function1()\', \'print(\"Hello after function call\")\']','[\'Condition is satisfied.\', \'Condition is not satisfied.\', \'Hello after function call\']','[]','[\'|||Here, expression is a Boolean expression which either evaluated to true or false. |||If the expression is evaluated to false, it will execute the statements inside the guard. |||If the expression is evaluated to true, it will skip the execution of the statements inside the guard.|||\']'),(17,'[\'Break Statement \']','[\'Swift 4 break statement is used in two cases:\']','[\'https://www.javatpoint.com/swift-continue-statement\', \'https://www.javatpoint.com/swift-gaurd-statement\', \'https://www.javatpoint.com/swift-continue-statement\', \'https://www.javatpoint.com/swift-gaurd-statement\', \'https://www.javatpoint.com/swift-continue-statement\']','[\'https://static.javatpoint.com/tutorial/swift/images/swift-break-statement.png\']','[]','[]','[\'Syntax: \', \'Example: \']','[]','[\'In the case of nested loops, the break statement terminates the inner most loop andstart executing the next line of the code after the block.\', \'The syntax of Swift 4 break statement is:\', \'Flow diagram of Swift 4 break Statement \']','[]','[]','[\'var index = 10\', \'repeat {\', \'index = index + 1\', \'if( index == 25 ){\', \'break\', \'print( \"Value of index is \\(index)\")\', \'} while index < 30\']','[\'Value of index is 11\', \'Value of index is 12\', \'Value of index is 13\', \'Value of index is 14\', \'Value of index is 15\', \'Value of index is 16\', \'Value of index is 17\', \'Value of index is 18\', \'Value of index is 19\', \'Value of index is 20\', \'Value of index is 21\', \'Value of index is 22\', \'Value of index is 23\', \'Value of index is 24\']','[]','[\'|||The break statement is used within a loop when you have toimmediately terminatea statement. The program control resumes at the next statement following the loop.|||It is also used to terminate a case in switch statement.|||\']'),(18,'[\'Control statementsin Loop\']','[\'Control statements are used in loop to change execution from its normal sequence. When the execution leaves the scope all the already created objects which are created automatically in that scope are destroyed. \']','[\'https://www.javatpoint.com/swift-fallthrough-statement\', \'https://www.javatpoint.com/swift-break-statement\', \'https://www.javatpoint.com/swift-fallthrough-statement\', \'https://www.javatpoint.com/swift-break-statement\', \'https://www.javatpoint.com/swift-fallthrough-statement\']','[\'https://static.javatpoint.com/tutorial/swift/images/swift-continue-statement.png\']','[]','[\'Continue Statement\']','[\'Syntax: \', \'Example:\']','[]','[\'A list of control statements supported in Swift 4: \', \"With \'for\' loop, the continue statement tests the conditions and increments the portions of the loop to execute.\", \"With \'while\' and \'do...while\' loops, the continue statement passes the program control to the conditional tests.\", \'The syntax of the continue statement for the Swift 4 loops is as follow:\', \'Flow diagram of Swift 4 Continue statement \']','[\'Swift 4 continue statement is used to stop currently executing statement and start again at the beginning of the next iteration through the loop. The continue statement is used with for loop, while loop and do... while loop. \']','[]','[\'continue\', \'var index = 10\', \'repeat {\', \'index = index + 1\', \'if( index == 25 ){\', \'continue\', \'print( \"Value of index is \\(index)\")\', \'} while index < 30\']','[\'Value of index is 11\', \'Value of index is 12\', \'Value of index is 13\', \'Value of index is 14\', \'Value of index is 15\', \'Value of index is 16\', \'Value of index is 17\', \'Value of index is 18\', \'Value of index is 19\', \'Value of index is 20\', \'Value of index is 21\', \'Value of index is 22\', \'Value of index is 23\', \'Value of index is 24\', \'Value of index is 25\', \'Value of index is 26\', \'Value of index is 27\', \'Value of index is 28\', \'Value of index is 29\', \'Value of index is 30\']','[]','[]'),(19,'[\'Fallthrough Statement\']','[\'Swift 4 fallthrough statementis used to simulate the behavior of Swift 4 switch to C/ C++ style switch. In Swift 4, the switch statementcompletes its execution as soon as the first matching case is completed unlike the C and C++ programming languages where falling through the bottom of subsequent cases happen.\']','[\'https://www.javatpoint.com/swift-4-loops\', \'https://www.javatpoint.com/swift-continue-statement\', \'https://www.javatpoint.com/swift-4-loops\', \'https://www.javatpoint.com/swift-continue-statement\', \'https://www.javatpoint.com/swift-4-loops\']','[]','[]','[\'Example: (Swift 4 example with fallthrough statement) \']','[\'Syntax of SwitchStatement in C/C++\', \'Syntax of Switch Statement in Swift 4\', \'Example 1:\', \'Example 2:\']','[]','[\"Let\'s see an example to make it clear. \", \"Let\'s see how to use a switch statement in Swift 4 without fallthrough statement:\", \"Let\'s see how to use a switch statement in Swift 4 programming with fallthrough statement.\"]','[\'In the above code, we need a break statement to come out of a case statement, otherwise the execution control will fall through the subsequent case statements available below the matching case statement.\', \"In the above code, if we don\'t usefallthrough statement, then the program will come out of the switch statement after executing the matching case statement. \"]','[]','[\'switch(expression){\', \'case constant-expression :\', \'statement(s);\', \'break; /* optional */\', \'case constant-expression :\', \'statement(s);\', \'break; /* optional */\', \'/* you can have any number of case statements */\', \'default : /* Optional */\', \'statement(s);\', \'switch expression {\', \'case expression1 :\', \'statement(s)\', \'fallthrough /* optional */\', \'case expression2, expression3 :\', \'statement(s)\', \'fallthrough /* optional */\', \'default : /* Optional */\', \'statement(s);\', \'var index = 4\', \'switch index {\', \'case 1:\', \'print( \"Hello Everyone\")\', \'case 2,3 :\', \'print( \"This is JavaTpoint\")\', \'case 4 :\', \'print( \"JavaTpoint is an educational portal\")\', \'default :\', \'print( \"It is free to everyone\")\', \'var index = 10\', \'switch index {\', \'case 100:\', \'print( \"Hello Everyone\")\', \'fallthrough\', \'case 10,15 :\', \'print( \"This is JavaTpoint\")\', \'fallthrough\', \'case 5 :\', \'print( \"JavaTpoint is an educational portal\")\', \'default :\', \'print( \"It is free to everyone\")\']','[\'JavaTpoint is an educational portal\', \'This is JavaTpoint\', \'JavaTpoint is an educational portal\']','[]','[]'),(20,'[\'Swift 4 Loops \']','[\'Loop is used when you want to execute a block of codes several times. It executes the statement sequentially. It means it executes the first statement within the function first, followed by second and third and so on. \']','[\'https://www.javatpoint.com/swift-for-in-loop\', \'https://www.javatpoint.com/swift-fallthrough-statement\', \'https://www.javatpoint.com/swift-for-in-loop\', \'https://www.javatpoint.com/swift-fallthrough-statement\', \'https://www.javatpoint.com/swift-for-in-loop\']','[\'https://static.javatpoint.com/tutorial/swift/images/swift-4-loops.png\']','[]','[]','[\'Loops used in Swift 4 programming language \']','[]','[\'Swift 4 provides several control structures to allow more complicated execution paths. \', \'In Swift 4 programming language, loops are used to execute a statement or a group of statements when you need to execute them multiple times. \', \'Every programming language has some general form of loop statement. \', \'A general structure of loop statement\', \'A list of most used loops in Swift 4 programming language: \', \'for-in loop: The for-in loop is used to execute a set of statements for each item in a range, selection, collection etc. \', \'repeat... while loop: It is same as the while loop but it checks the condition at the end of the loop body. \']','[\'while loop: The while loop is used to repeat a statement or a set of statements when the given condition is true. It checks the conditions before executing the loop body. \']','[]','[]','[]','[]','[]'),(21,'[\'Swift For-in Loop \']','[\'The Swift For-in loop is used to run a set of tasks for a certain number of times. This loop does repetitive process a number of times. \']','[\'https://www.javatpoint.com/swift-while-loop\', \'https://www.javatpoint.com/swift-4-loops\', \'https://www.javatpoint.com/swift-while-loop\', \'https://www.javatpoint.com/swift-4-loops\', \'https://www.javatpoint.com/swift-while-loop\']','[]','[]','[]','[\'For example\', \'Example 1: \', \'\']','[]','[\'If you want to write a syntax that prints \"Hello JavaTpoint\", the simple syntax will be:\', \'What would be if you have to write the same print statement 5 times? The simple solution would be:\', \'But, there is one solution. You can use for-in loop to print the same statement and make the code shorter. \', \'A Swift program to print the table of a specific number (Here, it is 5.)\']','[]','[]','[\'print(\"Hello JavaTpoint\")\', \'print(\"Hello JavaTpoint\")\', \'print(\"Hello JavaTpoint\")\', \'print(\"Hello JavaTpoint\")\', \'print(\"Hello JavaTpoint\")\', \'print(\"Hello JavaTpoint\")\', \'for i in 1...5 {\', \'print(\"Hello JavaTpoint\")\', \'let names = [\"Ajeet\", \"Aryan\", \"Ayan\", \"Alex\"]\', \'for name in names {\', \'print(\"Good Morning \\(name)\")\', \'for index in 1...10 {\', \'print(\"\\(index) times 5 is \\(index * 5)\")\']','[\'Good Morning Ajeet\', \'Good Morning Aryan\', \'Good Morning Ayan\', \'Good Morning Alex\', \'1 times 5 is 5\', \'2 times 5 is 10\', \'3 times 5 is 15\', \'4 times 5 is 20\', \'5 times 5 is 25\', \'6 times 5 is 30\', \'7 times 5 is 35\', \'8 times 5 is 40\', \'9 times 5 is 45\', \'10 times 5 is 50\']','[]','[]'),(22,'[\'Swift While and Repeat While Loop \']','[\"While and Repeat while loops are used as an alternative of for-in loops when the number of iteration is not known. The while loop executes a set of statements until a false condition occur. This loop is generally used when you don\'t know about the number of iterations. \"]','[\'https://www.javatpoint.com/swift-repeat-while-loop\', \'https://www.javatpoint.com/swift-for-in-loop\', \'https://www.javatpoint.com/#while-loop\', \'https://www.javatpoint.com/swift-repeat-while-loop\', \'https://www.javatpoint.com/swift-repeat-while-loop\', \'https://www.javatpoint.com/swift-for-in-loop\', \'https://www.javatpoint.com/swift-repeat-while-loop\']','[\'https://static.javatpoint.com/tutorial/swift/images/swift-while-loop.png\']','[]','[\'Swift While Loop \']','[\'Syntax: \', \'Example: \']','[]','[\'There are two types of loops in Swift:\', \'The Swift while loop evaluates its condition at the start of each pass. \', \'Here, TestExpression is a Boolean expression. If it is true,\', \'This process goes on until the TestExpression evaluates false. When the TestExpression gets the false condition, the while loop is terminated. \', \'Flow chart of While loop\']','[\'In the above program, the while loop is executed until the condition is evaluated to false and as soon as it gets the false condition, it terminates. \']','[]','[\'while (TestExpression) {\', \'var currentLevel:Int = 0, finalLevel:Int = 6\', \'let gameCompleted = true\', \'while (currentLevel <= finalLevel) {\', \'if gameCompleted {\', \'print(\"You have successfully completed level \\(currentLevel)\")\', \'currentLevel += 1\', \'print(\"Terminated! You are out of the game \")\']','[\'You have successfully completed level 0\', \'You have successfully completed level 1\', \'You have successfully completed level 2\', \'You have successfully completed level 3\', \'You have successfully completed level 4\', \'You have successfully completed level 5\', \'You have successfully completed level 6\', \'Terminated! You are out of the game\']','[]','[\'|||Statements inside the while loop are executed.|||And, the TestExpressionis evaluated again. |||&&&|||While loop|||Repeat While loop|||\']'),(23,'[\'Repeat While loop \']','[\'The Repeat While loop is same as while loop but a difference that the body of repeat...while loop is executed once before the test expression is checked.\']','[\'https://www.javatpoint.com/swift-strings\', \'https://www.javatpoint.com/swift-while-loop\', \'https://www.javatpoint.com/swift-strings\', \'https://www.javatpoint.com/swift-while-loop\', \'https://www.javatpoint.com/swift-strings\']','[\'https://static.javatpoint.com/tutorial/swift/images/swift-repeat-while-loop.png\']','[]','[]','[\'Syntax: \', \'Example: \']','[]','[\'In this loop, the body of repeat while loop is executed once and after that testExpression is checked. \', \'Flowchart of Repeat While loop \']','[]','[]','[\'repeat {\', \'...\', \'} while (testExpression)\', \'var currentLevel:Int = 0, finalLevel:Int = 5\', \'let gameCompleted = true\', \'repeat {\', \'if gameCompleted {\', \'print(\"You have successfully completed level \\(currentLevel)\")\', \'currentLevel += 1\', \'} while (currentLevel <= finalLevel)\', \'print(\"Terminated! outside of repeat while loop\")\']','[\'You have successfully completed level 0\', \'You have successfully completed level 1\', \'You have successfully completed level 2\', \'You have successfully completed level 3\', \'You have successfully completed level 4\', \'You have successfully completed level 5\', \'Terminated! outside of repeat while loop\']','[]','[]'),(24,'[\'Swift Strings \']','[\'Swift 4 strings are ordered collection of characters, such as \"Hello, World!\" and they are represented by the Swift 4 data type String, which in turn represents a collection of values of Character type. \']','[\'https://www.javatpoint.com/swift-functions\', \'https://www.javatpoint.com/swift-repeat-while-loop\', \'https://www.javatpoint.com/swift-functions\', \'https://www.javatpoint.com/swift-repeat-while-loop\', \'https://www.javatpoint.com/swift-functions\']','[]','[]','[\'How to create a string?\', \'Empty Strings\', \'Operations on Strings \', \'Swift 4 String Functions and Operators \']','[\'Example: \', \'String Concatenation \', \'String Interpolation \', \'String Length\', \'String Comparison \', \'String Iteration \', \'Iteration of Unicode Strings\', \'Example: \']','[\'Example:\', \'Example: \', \'Example: \', \'Example: \', \'Example: \']','[\'A string can be created by using a string literal or creating an instance of a String class. \', \'See this example:\', \'To create empty string, you can use an empty string literal or create an instance of string class. \', \'To check whether the string is empty or not, you can use the Boolean property isEmpty. \', \'We can operate a lot of operations on Swift strings. \', \'The + operator is used to concatenate two strings or a string and a character, or two characters in Swift. \', \"String 4 doesn\'t support length property, but we can use a global count() function to count the number of characters in a string. \", \'The == operator is used to compare two strings variables or constants.\', \'In Swift 4, strings are the collection of values, so we can iterate over strings using loops: \', \'We can access the UTF-8 and UTF-16 representation of the Unicode strings over its utf8 and utf16 properties.\', \'A list of functions and operators related to String in Swift 4: \']','[]','[\'String interpolation is used to construct a new string value by mixing the values of constants, variables, literals, and expressions and include them inside a string literal. The values of variables and constants which you insert into string literal is wrapped in a pair of parentheses, prefixed by a backslash. \']','[\'var stringA = \"Hello world!\"\', \'print( stringA )\', \'var stringB = String(\"This is JavaTpoint\")\', \'print( stringB )\', \'let stringC = \"\"\"\', \'This is an\', \'example of multiple line\', \'string by JavaTpoint\', \'print(stringC)\', \'var stringA = \"\"\', \'if stringA.isEmpty {\', \'print( \"stringA is empty\" )\', \'} else {\', \'print( \"stringA is not empty\" )\', \'let stringB = String()\', \'if stringB.isEmpty {\', \'print( \"stringB is empty\" )\', \'} else {\', \'print( \"stringB is not empty\" )\', \'let constA = \"Hello \"\', \'let constB = \"JavaTpoint\"\', \'var stringA = constA + constB\', \'print( stringA )\', \'var varA = 10\', \'let constA = 1000\', \'var varC:Float = 10.0\', \'var stringA = \"\\(varA) times \\(constA) is equal to \\(varC * 1000)\"\', \'print( stringA\', \'var varA = \"Hello JavaTpoint\"\', \'print( \"\\(varA), string length is \\((varA.count))\" )\', \'var varA = \"Hello, JavaTpoint\"\', \'var varB = \"Hello, World!\"\', \'if varA == varB {\', \'print( \"\\(varA) and \\(varB) are equal\" )\', \'} else {\', \'print( \"\\(varA) and \\(varB) are not equal\" )\', \'for chars in \"WelcometoJavaTpoint\" {\', \'print(chars, terminator: \" \")\', \'var unicodeString = \"JavaTpoint\"\', \'print(\"UTF-8 Codes: \")\', \'for code in unicodeString.utf8 {\', \'print(\"\\(code) \")\', \'print(\"\\n\")\', \'print(\"UTF-16 Codes: \")\', \'for code in unicodeString.utf16 {\', \'print(\"\\(code) \")\']','[\'Hello world!\', \'This is JavaTpoint\', \'This is an\', \'example of multiple line\', \'string by JavaTpoint\', \'stringA is empty\', \'stringB is empty\', \'Hello JavaTpoint\', \'10 times 1000 is equal to 10000.0\', \'Hello JavaTpoint, string length is 16\', \'Hello, JavaTpoint and Hello, World! are not equal\', \'W e l c o m e t o J a v a T p o i n t\', \'UTF-8 Codes:\', \'74\', \'97\', \'118\', \'97\', \'84\', \'112\', \'111\', \'105\', \'110\', \'116\', \'UTF-16 Codes:\', \'74\', \'97\', \'118\', \'97\', \'84\', \'112\', \'111\', \'105\', \'110\', \'116\']','[\'Index|||Functions/Operators|||Usage&&&1)|||isEmpty|||It is used to check whether a string is empty or not. It specifies a Boolean value.&&&2)|||hasPrefix(prefix: String)|||It is a function to check whether a given parameter string exists as a prefix of the string or not.&&&3)|||hasSuffix(suffix: String)|||It is a function to check whether a given parameter string exists as a suffix of the string or not.&&&4)|||toInt()|||It is a function to convert numeric String value into Integer.&&&5)|||count()|||It is a global function to count the number of Characters in a string.&&&6)|||utf8|||It specifies a property to return a UTF-8 representation of a string.&&&7)|||utf16|||It specifies a property to return a UTF-16 representation of a string.&&&8)|||unicodeScalars|||It specifies a property to return a Unicode Scalar representation of a string.&&&9)|||+|||It is an operator to concatenate two strings, or a string and a character, or two characters.&&&10)|||+=|||It is an operator to append a string or character to an existing string.&&&11)|||==|||It is an operator to determine the equality of two strings.&&&12)|||<|||It is an operator to perform a lexicographical comparison to determine whether one string evaluates as less than another.&&&13)|||startIndex|||It is used to get the value at starting index of string.&&&14)|||endIndex|||It is used to get the value at ending index of string.&&&15)|||Indices|||It is used to access the indices one by one. i.e. all the characters of string one by one.&&&16)|||insert(\"Value\", at: position)|||It is used to insert a value at a position.&&&17)|||remove(at: position)|||removeSubrange(range)|||It is used to remove a value at a position, or to remove a range of values from string.&&&18)|||reversed()|||It is used to return the reverse of a string.\']','[]'),(25,'[\'Swift Functions \']','[\'Functions are the set of codes which are used to perform a specific task. It Swift 4, a function is used to pass local as well as global parameter values inside the function calls. \']','[\'https://www.javatpoint.com/swift-nested-function\', \'https://www.javatpoint.com/swift-strings\', \'https://www.javatpoint.com/swift-nested-function\', \'https://www.javatpoint.com/swift-strings\', \'https://www.javatpoint.com/swift-nested-function\']','[]','[]','[\'Types of Functions \', \'Library Functions\', \'User-defined Functions\', \'Function Syntax\', \'Parameter Explanation\', \'How to define function in Swift 4?\', \'How to call function in Swift 4? \']','[\'Example: \', \'Example: \', \'Explanation of the above function definition: \', \'Example: \']','[\'Note: Always use a meaningful name of the function which reflects the purpose of the function. Make a function to do only one task. If a function does more than one task, break the function into multiple functions. \']','[\'Functions have a specific name which is used to \"call\" the function to perform its task when needed. \', \'Swift 4 functions contain parameter type and its return types. \', \'Types of functions depend on whether a function is predefined or created by programmer. In Swift 4, there are two types of functions: \', \'Library functions can be used directly by invoking (calling) it. For example: print() function\', \'func- This is a keyword which you have to write to create a function\', \'function_name- It specifies the name of the function. You can give it any name that defines what a function does.\', \'args... It defines the input a function accepts.\', \'-> This operator is used to indicate the return type of a function.\', \'ReturnType- It defines the type of a value you can return from a function. E.g. Int, String etc.\', \'value- It represents the actual data being returned from the function. The value type must match the ReturnType.\']','[\'You can see all the functions inside the Swift framework by importing Swift. Open command prompt and click on it. You will see a new page. Search all the statements starting with func keyword. \', \'When we run the above program, it will show an output JavaTpoint. It is just because, we have invoked a print function which is already defined in Swift Framework. The function is used to print output. \', \'Swift 4 facilitates you to define your own functions. User defined functions are mainly used to solve problems or perform tasks not available in Swift Framework. These functions can also be reused to perform similar tasks in the future. \', \"return- It is a keyword used to transfer the control of a program to the function call and also return value from a function. Even if you don\'t specify the return keyword the function returns automatically after execution of last statement.\"]','[\"Library functions are the user-defined functions which are already defined in Swift framework. These functions are used to solve common problems and simple operations in Swift like printing, finding minimum and maximum, etc. so that you don\'t have to solve them yourselves. \", \"We can execute a function by calling the function\'s name. When we define a new function, it may take one or many values as input parameters to the functions and it will process the functions in the main body and pass back the values to the functions as output \'return types\'. \", \'In the above program, wish(user: \"Ajeet\") calls the function and passes a String type value Ajeet. It returns \"Good Morning! \\(user). Have a Good day\" statement of type String and transfers the program to the function call. After that print statement executes inside the function. \']','[\'print(\"JavaTpoint\")\', \'func function_name(args...) -> ReturnType {\', \'return value\', \'func wish(user:String) {\', \'print(\"Good Morning \\(user). Have a Good day.\")\', \'func wish(user:String) {\', \'print(\"Good Morning \\(user). Have a Good day.\")\', \'wish(user: \"Ajeet\")\']','[\'Good Morning Ajeet. Have a Good day.\']','[]','[\'|||Keyword func specifies the start of function header.|||Wish specifies the function name to uniquely identify and call function in the program. |||(user:String) specifies the end of function header and accepts a parameter of type String. |||The function consists of a print statement inside the body which executes after you call the function. |||&&&|||Library functions (Built-in Functions) - Library functions are the type of functions which are defined already in Swift Framework.|||User-defined functions - User defined functions are created by the programmer themselves.|||\']'),(26,'[\'Swift Nested Function \']','[\'A function inside the body of another function is called nested function. \']','[\'https://www.javatpoint.com/swift-function-parameter-and-return-value\', \'https://www.javatpoint.com/swift-functions\', \'https://www.javatpoint.com/swift-function-parameter-and-return-value\', \'https://www.javatpoint.com/swift-functions\', \'https://www.javatpoint.com/swift-function-parameter-and-return-value\']','[]','[]','[\'Nested Function without Return Values\', \'Nested function with parameters and Return value\']','[\'Syntax: \', \'Parameter Explanation: \', \'Example: \', \'In the above program,\']','[\'Note: The inner function can only be called and used inside the outer function. \']','[\'Here, function1 is an outer function because there is another function named function2 (nested function) inside the function1. \', \'In the above program, the nested function wish2() is being called from the outerfunction wish1().\', \'You cannot call the function wish2 outside of the function wish1. \', \'The nested functions can also contain parameters and return values. \']','[\'The statement wish1(\"Ajeet\") calls the outer function and the statement wish2 () inside the outer function calls the method which gives the output Good Morning Ajeet. \', \'The nested function add() and subtract() in a way are being used outside of the enclosing function operate(). This is possible because the outer function returns one of these functions.\', \"We\'ve used the inner function outside the enclosing function operate() as operation(10, 20). The program internally calls add(10, 20) which provides an output 30. \"]','[]','[\'func function1() {\', \'func function2() {\', \'func wish1(_ message: String) {\', \'func wish2() {\', \'print(\"Good Morning! \\(message)\")\', \'wish2 ()\', \'wish1(\"Ajeet\")\', \'func operate(with symbol:String) -> (Int, Int) -> Int {\', \'func add(num1:Int, num2:Int) -> Int {\', \'return num1 + num2\', \'func subtract(num1:Int, num2:Int) -> Int {\', \'return num1 - num2\', \'let operation = (symbol == \"+\") ?  add : subtract\', \'return operation\', \'let operation = operate(with: \"+\")\', \'let result = operation(10, 20)\', \'print(result)\']','[\'Good Morning! Ajeet\', \'30\']','[]','[\'|||The outer function is operate(), with return value of type Function (Int,Int) -> Int.|||The inner (nested) functions are add() and subtract().|||\']'),(27,'[\'Swift Function Parameter and Return Value\']','[\'The Swift 4 user-defined function can have multiple parameters and different return values. \']','[\'https://www.javatpoint.com/swift-recursion\', \'https://www.javatpoint.com/swift-nested-function\', \'https://www.javatpoint.com/swift-recursion\', \'https://www.javatpoint.com/swift-nested-function\', \'https://www.javatpoint.com/swift-recursion\']','[]','[]','[\'a) Functions with no parameter and no return value\', \'b) Functions with no parameters but having return value \', \'c) Function with Parameter but having no return value \', \'d) Functions with Parameter and Return Value \', \'e) Function with multiple parameters and multiple return values\']','[\'Syntax: \', \'Example: \', \'Example: \', \'Syntax: \', \'Example: \', \'Syntax: \', \'Example: \', \'Syntax: \', \'Example: \']','[]','[\'The Swift 4 functions with no parameter and no return value do not take any input and return value. \', \'In Swift 4, some functions have parameters but don?t have return value. Parameters are used to take input in the function.\', \'After that, the statement print(msg) gives the output Good Morning Everyone. \', \'When a function takes parameters and also returns value.\']','[\'In the above program, the return type is String. Now, the statement must return a string from the statement inside the function, otherwise it will give an error. \', \'The return keyword transfers control of the program from body of the function to the function call. To return value from the function, we have to add value after the return keyword. \', \'You can see that in the above program, the function accepts a single parameter of type String and also returns value Welcome to JavaTpoint Ajeet of type String.\', \'These functions are used to take multiple parameters separated by comma and return multiple return values. In Swift, tuples are used to return multiple values.\']','[\'In the above program, the function accepts a single parameter of type String. The parameter can only be used inside the function. You can call the function by passing it a string value with the parameter name as greeting(msg: \"Good Morning Evryone\"). The msg parameter name is visible only inside the function greeting().\']','[\'func funcname() {\', \'func funcname() -> () {\', \'func funcname() -> Void {\', \'func greeting() {\', \'print(\"Good Morning Everyone\")\', \'greeting()\', \'func greeting() -> String {\', \'return \"Good Morning Everyone\"\', \'let msg = greeting()\', \'print(msg)\', \'func funcname(parameterName:Type) {\', \'func greeting(msg:String) {\', \'print(msg)\', \'greeting(msg: \"Good Morning Everyone\")\', \'func funcname(parameterName:Type) -> ReturnType {\', \'func greeting(name:String) -> String {\', \'return \"Welcome to JavaTpoint \" + name\', \'let msg = greeting(name: \"Ajeet\")\', \'print(msg)\', \'func funcname(parameterName:Type, parameterName2:Type ,...) -> (ReturnType, ReturnType...) {\', \'func greeting(name:String, coin:Int) -> (String, Int) {\', \'let msg = \"Hello Mr./Ms.\" + name\', \'var userCoin = coin\', \'if coin < 0 {\', \'userCoin = 0\', \'return (msg, userCoin)\', \'let msg = greeting(name: \"Ajeet\", coin: 20)\', \'print(msg.0)\', \'print(\"You have \\(msg.1) coins left in your wallet.\")\']','[\'Good Morning Everyone\', \'Good Morning Everyone\', \'Good Morning Everyone\', \'Welcome to JavaTpoint Ajeet\', \'Hello Mr./Ms.Ajeet\', \'You have 20 coins left in your wallet.\']','[]','[]'),(28,'[\'Swift Recursion \']','[\'A function that calls itself repeatedly is known as recursive function and this technique is called recursion. When you create a recursive function, you must create a condition so that the function does not call itself indefinitely.\']','[\'https://www.javatpoint.com/swift-function-overloading\', \'https://www.javatpoint.com/swift-function-parameter-and-return-value\', \'https://www.javatpoint.com/swift-function-overloading\', \'https://www.javatpoint.com/swift-function-parameter-and-return-value\', \'https://www.javatpoint.com/swift-function-overloading\']','[\'https://static.javatpoint.com/tutorial/swift/images/swift-recursion.png\']','[]','[]','[\'Example: \', \'Example: Swift 4 Program to print N positive numbers\', \'Execution Steps\', \'Example2: Swift 4 program to find factorial of a number \', \'Execution Steps \']','[]','[\'When the condition is not fulfilled, the function call is not done and the recursion stops. \']','[\'You can see in the above diagram that recursion is executed indefinitely. To get rid of these type of indefinite recursive, we use control statements. \', \'You can see in the above program that the statement print(\"Countdown:\") gives the output and the statement countDownToZero(num:3) calls the function that takes a parameter Integer.\', \'The statement inside the function countDownToZero() executes and if the condition num > 0 is fulfilled, the function countDownToZero() is called again as countDownToZero(num: num - 1).\']','[]','[\'func recurse() {\', \'recurse()\', \'recurse()\', \'func countDownToZero(num: Int) {\', \'print(num)\', \'if num > 0 {\', \'countDownToZero(num: num - 1)\', \'print(\"Countdown:\")\', \'countDownToZero(num:6)\', \'func findFactorial(of num: Int) -> Int {\', \'if num == 1 {\', \'return 1\', \'} else {\', \'return num * findFactorial(of:num - 1)\', \'let x = 6\', \'let result = findFactorial(of: x)\', \'print(\"The factorial of \\(x) is \\(result)\")\']','[\'Countdown:\', \'6\', \'5\', \'4\', \'3\', \'2\', \'1\', \'0\', \'The factorial of 6 is 720\']','[\'Steps|||Function call|||Printed|||Is num > 0 ?&&&1|||countDownToZero(6)|||6|||Yes&&&2|||countDownToZero(5)|||5|||Yes&&&3|||countDownToZero(4)|||4|||Yes&&&4|||countDownToZero(3)|||3|||Yes&&&5|||countDownToZero(2)|||2|||Yes&&&6|||countDownToZero(1)|||1|||Yes&&&7|||countDownToZero(0)|||0|||No (Recursion Ends)\', \'Steps|||Argument passed|||Return statement|||Value&&&1|||6|||return 6 * findFactorial(of:5)|||6 * findFactorial(of:5)&&&2|||5|||return 5 * findFactorial(of:4)|||6 *5 findFactorial(of:4)&&&3|||4|||return 4 * findFactorial(of:3)|||6 *5*4 findFactorial(of:3)&&&4|||3|||return 3 * findFactorial(of:2)|||6 *5*4*3 findFactorial(of:2)&&&5|||2|||return 2 * findFactorial(of:1)|||6*5*4*3*2 findFactorial(of:1)&&&6|||1|||return 1|||6*5*4*3*2*1\']','[]'),(29,'[\'Swift Function Overloading \']','[\'When two are more functions have same name but different arguments then they are known as overloaded functions and this process in known as function overloading. \']','[\'https://www.javatpoint.com/swift-arrays\', \'https://www.javatpoint.com/swift-recursion\', \'https://www.javatpoint.com/swift-arrays\', \'https://www.javatpoint.com/swift-recursion\', \'https://www.javatpoint.com/swift-arrays\']','[]','[]','[\'Need of Function Overloading\', \'Same example with Function Overloading \', \'Program explanation \', \'Function Overloading with Different Parameter types \']','[\'Example:\']','[]','[]','[\"Let\'s suppose a condition. You have to develop a shooter game where the player can attack its enemies using a knife, a grenade and a gun. Let\'s see how your solution for the attack functionality might be defining the actions into functions: \", \'In the above program, three different functions are created with a same name ?attack?. It takes different parameter types and by this way, we call this function in different conditions. \', \'In the above program, both functions have same name output() and same number of parameter but the different parameter type. The first output() function takes a string as a parameter, and the second output() function takes an integer as a parameter. \']','[\"You can see that the above program is confusing for the compiler and you will get a compile time error while executing the program in Swift as \'attack()\' previously declared here. However, another solution might be defining different function names for the particular functionality as: \", \'In the above example, you have used struct to create the physical objects like Knife, Grenade, and Gun. There is also a problem with the above example that we have to remember the different function?s name to call that particular action attack. To overcome with this problem, function overloading is used where the name of the different functions are same but passed parameters are different. \']','[\'func attack() {\', \'print(\"Attacking with Knife\")\', \'func attack() {\', \'print(\"Attacking with Blade\")\', \'func attack() {\', \'print(\"Attacking with Gun\")\', \'struct Knife {\', \'struct Grenade {\', \'struct Gun {\', \'func attackUsingKnife(weapon:Knife) {\', \'print(\"Attacking with Knife\")\', \'func attackUsingGrenade(weapon:Grenade) {\', \'print(\"Attacking with Grenade\")\', \'func attackUsingGun(weapon:Gun) {\', \'print(\"Attacking with Gun\")\', \'struct Knife {\', \'struct Grenade {\', \'struct Gun {\', \'func attack(with weapon:Knife) {\', \'print(\"Attacking with Knife\")\', \'func attack(with weapon:Grenade) {\', \'print(\"Attacking with Grenade\")\', \'func attack(with weapon:Gun) {\', \'print(\"Attacking with Gun\")\', \'attack(with: Knife())\', \'attack(with: Grenade())\', \'attack(with: Gun())\', \'func output(x:String) {\', \'print(\"Welcome to \\(x)\")\', \'func output(x:Int) {\', \'print(\" \\(x)\")\', \'output(x: \"Special\")\', \'output(x: 26)\']','[\'Attacking with Knife\', \'Attacking with Grenade\', \'Attacking with Gun\', \'Welcome to Special\', \'26\']','[]','[\'|||The call attack(with: Gun()) triggers the statement inside the function func attack(with weapon:Gun).|||The call attack(with: Grenade()) triggers the statement inside the function func attack(with weapon:Grenade).|||The call attack(with: Knife()) statement inside the function func attack(with weapon:Knife).||||||The call to output(x: \"Special\") triggers the statement inside the function func output(x:String).|||And the call to output(x: 26) triggers the statement inside the function func output(x:Int).|||\']'),(30,'[\'Swift Arrays \']','[\'Arrays are used to store multiple values of same data type. An Array is just like a container which holds multiple data/ values of a data type in an ordered list. When you fetch the data, you will get the elements in the same order as you defined in the array.\']','[\'https://www.javatpoint.com/swift-dictionary\', \'https://www.javatpoint.com/swift-function-overloading\', \'https://www.javatpoint.com/swift-dictionary\', \'https://www.javatpoint.com/swift-function-overloading\', \'https://www.javatpoint.com/swift-dictionary\']','[\'https://static.javatpoint.com/tutorial/swift/images/swift-arrays.png\']','[]','[\'How to declare array in Swift 4? \', \'Create an array directly \', \'Declare an array with specified number of single repeated value \', \'How to store values in Array? \', \'How to access array elements in Swift? \', \'How to modify elements in Array? \']','[\'Example: \', \'Example: \', \'Example: \', \'Example:\', \'Example:\']','[\'Note: In Swift 4, we cannot create an array of fixed length size as we can do in other programming languages. \']','[\'An array can store values of any data type e.g. Int, String, class etc. \', \'Here, we have declared a constant emptyIntArr that can store array of integer and initialized with 0 values. \', \'We can repeat a value to specific number of times to make an array in Swift. It is done by using the array initializer with repeating and count. \', \"Let\'s take a constant IntArray to store some strings: \", \'The index of an array starts with 0 means the first element is stored in index 0, second element in index (1) and so on. \', \'You have to use index of the value of that array you want to access within square brackets immediately after the name of the array. \', \'You can also modify the whole array completely. \', \'A list of built in Array functions and their properties: \']','[\'Specify the data type inside the square brackets [] to create an empty array. You have to specify the type inside the square bracket [], otherwise Swift will treat it as a normal data type and you can store only a single value in it. \', \'Swift is a type inference language so, we can also create an array directly without specifying the data type but we have to initialise with some values so that compiler can finds out its type. \', \'Here, we have declared a constant someIntArr that can store array of Integer without specifying the type explicitly. Also, we have initialized array which gives the output as 1, 2, 3, 4, 5. \', \'Here, we have defined a constant arrWithRepeatingValues that stores an array of string JavaTpoint and repeats the same value for 5 times as specified in the count.\', \"Suppose, we declared an array intArray as above. The first element is intArray[0], second element is intArray[1] and so on. We use them to access the array\'s values. \", \'We can modify elements of the array by using assignment operator. We have to add the index of the value we want to update within square brackets after the name of the array followed by the assignment operator and new value. \']','[]','[\'let emptyIntArr:[Int] = []\', \'print(emptyIntArr)\', \'let emptyIntArr:Array = Array()\', \'print(emptyIntArr)\', \'let someIntArr = [1, 2, 3, 4, 5]\', \'print(someIntArr)\', \'let arrWithRepeatingValues = Array(repeating: \"JavaTpoint\", count: 5)\', \'print(arrWithRepeatingValues)\', \'let intArray = [10, 11, 12, 13, 14, 15]\', \'let intArr = [10, 11, 12, 13, 14]\', \'print(intArr[0])\', \'print(intArr[1])\', \'print(intArr[2])\', \'print(intArr[3])\', \'print(intArr[4])\', \'var intArray = [10, 11, 12, 13, 14]\', \'intArray[0] = 12\', \'intArray[1] = 42\', \'intArray[2] = 45\', \'intArray[3] = 21\', \'intArray[3] = 36\', \'print(intArray)\', \'var intArr = [1, 2, 3, 4]\', \'intArr = [10,20,30, 40]\', \'print(intArr)\']','[\'[]\', \'[1, 2, 3, 4, 5]\', \'[\"JavaTpoint\", \"JavaTpoint\", \"JavaTpoint\", \"JavaTpoint\", \"JavaTpoint\"]\', \'10\', \'11\', \'12\', \'13\', \'14\', \'[12, 42, 45, 36, 14]\', \'[10, 20, 30, 40]\']','[\'Index|||Array function|||Explanation&&&1.|||isEmpty|||The isEmpty property is used to determine wheather an array is empty or not. It returns true if the array does not contain any value otherwise, returns false.&&&2.|||first|||This property is used to access first element of an array.&&&3.|||append|||The append function is used to insert/append element at the end of the array.&&&4.|||insert|||This function is used to insert/append element at specific index of the array.&&&5.|||remove|||This function removes and returns the value specified at the specific position from the array.&&&6.|||reversed|||This function returns the elements of array in reverse order.&&&7.|||count|||This property returns the total number of elements in an array.\']','[]'),(31,'[\'Swift Dictionary \']','[\'A Swift dictionary is a simple container that can contain multiple data as key-value pair in an unordered way. \']','[\'https://www.javatpoint.com/swift-sets\', \'https://www.javatpoint.com/swift-arrays\', \'https://www.javatpoint.com/swift-sets\', \'https://www.javatpoint.com/swift-arrays\', \'https://www.javatpoint.com/swift-sets\']','[]','[]','[\'Dictionary declaration in Swift \']','[\'Declaring an empty dictionary \', \'Example: \', \'Declaring a dictionary with some values \', \'Creating Dictionary from two arrays \', \'Example: \', \'Access Dictionary elements in Swift \', \'Example: \', \'Access Dictionary elements in Swift using for-in loop \', \'Example: \', \'Modify dictionary elements in Swift \', \'Example: \', \'Changing elements in Dictionary \', \'Example: \']','[]','[\'To create an empty dictionary, we specify the key:value Data type inside square brackets [].\', \'We can also create dictionary from arrays. \', \'We can add a new element in a Swift dictionary by using a new key as index and assign to a new value.\']','[\'In the above program, we have not declared the type explicitly but we initialize with some default elements. The element is in key:value pair where key is of type String and value is of Int type.\', \'We can access elements of a Swift dictionary by including key of the value we want to access within square brackets immediately after the name of the dictionary. \']','[\'Swift dictionary is used instead of array when you want to look up value with some identifier in the collection. Suppose, we have to search the capital city of country. In this case, we will create a dictionary with key country and value capital city. Now, you get the capital city from the collection by searching with the key country. Here, we have paired a country to its capital city. \']','[\'let emptyDictionary:[Int:String] = [:]\', \'print(emptyDictionary)\', \'let emptyDictionary:Dictionary = [:]\', \'print(emptyDictionary)\', \'let valDictionary = [\"a\":10, \"b\":20, \"c\":30, \"d\":40, \"e\":50, \"f\":60, \"g\":70, \"h\":80, \"i\":90]\', \'print(valDictionary)\', \'let customKeys = [\"India\", \"Pakistan\", \"United Kingdom\"]\', \'let customValues = [\"New Delhi\", \"Islamabad\", \"London\"]\', \'let newDictionary = Dictionary(uniqueKeysWithValues: zip(customKeys,customValues))\', \'print(newDictionary)\', \'let valDictionary = [\"a\":10, \"b\":20, \"c\":30, \"d\":40, \"e\":50, \"f\":60, \"g\":70, \"h\":80, \"i\":90]\', \'print(valDictionary[\"c\"])\', \'print(valDictionary[\"f\"])\', \'let valDictionary = [\"a\":10, \"b\":20, \"c\":30, \"d\":40, \"e\":50, \"f\":60, \"g\":70, \"h\":80, \"i\":90]\', \'for (key,value) in valDictionary {\', \'print(\"key:\\(key) value:\\(value)\")\', \'var valDictionary = [\"India\":\"New Delhi\", \"China\":\"Beijing\", \"USA\":\"Washington D.C.\"]\', \'valDictionary[\"Germany\"] = \"Berlin\"\', \'print(valDictionary)\', \'var valDictionary = [\"India\":\"New Delhi\", \"China\":\"Beijing\", \"USA\":\"Washington D.C.\"]\', \'valDictionary[\"India\"] = \"NEW DELHI\"\', \'print(valDictionary)\']','[\'[:]\', \'[\"c\": 30, \"d\": 40, \"g\": 70, \"b\": 20, \"a\": 10, \"f\": 60, \"h\": 80, \"i\": 90, \"e\": 50]\', \'[\"India\": \"New Delhi\", \"United Kingdom\": \"London\", \"Pakistan\": \"Islamabad\"]\', \'Optional(30)\', \'Optional(60)\', \'key:h value:80\', \'key:d value:40\', \'key:a value:10\', \'key:g value:70\', \'key:e value:50\', \'key:b value:20\', \'key:c value:30\', \'key:f value:60\', \'key:i value:90\', \'[\"Germany\": \"Berlin\", \"China\": \"Beijing\", \"USA\": \"Washington D.C.\", \"India\": \"New Delhi\"]\', \'[\"USA\": \"Washington D.C.\", \"China\": \"Beijing\", \"India\": \"NEW DELHI\"]\']','[]','[]'),(32,'[\'What is Swift Sets?\']','[\"Swift set is a simple container which can hold multiple values of a data type in an unordered list. It can\'t store same value twice. Here, the unordered list means you won\'t get the items in the same manner in which you have enter in the set. \"]','[\'https://www.javatpoint.com/swift-closures\', \'https://www.javatpoint.com/swift-dictionary\', \'https://www.javatpoint.com/swift-closures\', \'https://www.javatpoint.com/swift-dictionary\', \'https://www.javatpoint.com/swift-closures\']','[]','[]','[\'Swift Sets vs. Swift Arrays\', \'How to declare a set in Swift? \', \'Using remove() method to access selective set elements \', \'Set operations in Swift\']','[\'Example: \', \'Declare a set containing duplicate values\', \'Access set elements in Swift\', \'Access all set elements in Swift\', \'Example: \', \'Example: \', \'Optional handling for using remove() method \', \'Example: \', \'Add new elements in a set in Swift \', \'Example: \', \'Example: \', \'Union Set Operation \', \'Example: \', \'Intersection Set Operation \', \'Example: \', \'Subtracting Set Operation \', \'Example: \', \'Symmetric Difference Set Operation \', \'Example: \']','[]','[\'We can declare a set that can store some values. \', \'In the above program, we have entered the repeated value of 5 and 8. But in output, we can see that the repeated values have been removed. \', \'We cannot access elements of set in the same way we access elements of array in Swift because set elements are unordered. \', \'So, we have to access set elements using its methods and properties or using for-in loops. \', \'We can access the selective elements from the set by using remove() method. \', \'In the above program, you can see that the remove() method returns an optional string. It is recommended to do optional handling as follows.\', \'The insert() method is used to add new elements in set in Swift. \', \'To add single element\', \'In the above example, we have added a new element 7 in a predefined set. \', \'To add multiple elements\', \'The union of two sets a and b is the set of all elements combined in set a and set b. It is accessed by using a.union(b).\', \'The intersection of two sets a and b is the set of elements which are common in both sets. It is accessed by using a.intercection(b). \', \'Some Built in functions and properties \']','[\"The main difference between the Swift set and Swift array is that the Swift set can\'t store the same value twice unlike the Swift array. Swift sets ensure you that an item appears only once and order of items is not important. \", \'Values stored in a Swift set must be hashable. Hashable means, it must provide a hashValue property. HashValue is used to access the elements of the sets because sets are unordered. \', \'All Swift basic data types (such as String, Int, Double, and Bool) are hashable by default, and can be used as set value types. We can also create our Hashable Type in Swift that can be stored in a set. \', \'Another advantage of using set is that it facilitates you to perform set operations, i.e. union, intersection etc. It is same as set operation in Mathematics. \', \'The subtraction of two sets a and b is the set which contains all elements of a but excludes the elements that also belongs to b. It is accessed by using a.subtracting(b). \', \'The symmetric difference of two sets a and b is the set which contains all elements which are in either of the sets but not in both of them. It is accessed by using a.symmetricDifference(b).\']','[]','[\'let someIntSet:Set = [1, 2, 3, 4, 5, 6, 7, 8, 9]\', \'print(someIntSet)\', \'let someIntSet:Set = [1, 2, 3, 4, 8, 8, 8, 5, 5]\', \'print(someIntSet)\', \'var someIntSet:Set = [1, 2, 3, 4, 5, 6]\', \'for val in someIntSet {\', \'print(val)\', \'var someIntSet:Set = [1, 2, 3, 4, 5, 6]\', \'let someVal = someIntSet.remove(5)\', \'print(someVal)\', \'print(someIntSet)\', \'var someIntSet:Set = [1, 2, 3, 4, 5, 6]\', \'if let someVal = someIntSet.remove(5) {\', \'print(someVal)\', \'print(someIntSet)\', \'} else {\', \'print(\"cannot find element to remove\")\', \'var someIntSet:Set = [1, 2, 3, 4, 5, 6]\', \'someIntSet.insert(7)\', \'print(someIntSet)\', \'var someIntSet:Set = [1, 2, 3, 4, 5, 6]\', \'someIntSet.insert(7)\', \'someIntSet.insert(8)\', \'someIntSet.insert(9)\', \'someIntSet.insert(10)\', \'print(someIntSet)\', \'let a: Set = [1, 3, 5, 7, 9]\', \'let b: Set = [0, 2, 4, 6, 8]\', \'print(a.union(b))\', \'let a: Set = [1, 3, 5, 7, 9]\', \'let b: Set = [0, 3, 4, 7, 8]\', \'print(a.intersection(b))\', \'let a: Set = [1, 3, 5, 7, 9]\', \'let b: Set = [0, 3, 4, 7, 8]\', \'print(a.subtracting(b))\', \'let a: Set = [1, 3, 5, 7, 9]\', \'let b: Set = [1, 3, 7, 6, 8]\', \'print(a.symmetricDifference(b))\']','[\'[2, 4, 9, 5, 6, 7, 3, 1, 8]\', \'[2, 4, 5, 3, 1, 8]\', \'5\', \'6\', \'2\', \'3\', \'1\', \'4\', \'Optional(5)\', \'[6, 2, 3, 1, 4]\', \'5\', \'[6, 2, 3, 1, 4]\', \'[2, 4, 5, 6, 7, 3, 1]\', \'[10, 2, 4, 9, 5, 6, 7, 3, 1, 8]\', \'[8, 2, 9, 4, 5, 7, 6, 3, 1, 0]\', \'[7, 3]\', \'[5, 9, 1]\', \'[5, 6, 9, 8]\']','[\'Inde\']','[]'),(33,'[\'Swift Closures \']','[\'Swift Closures are other types of Swift functions which can be defined without using keyword func and a function name.\']','[\'https://www.javatpoint.com/swift-typealias\', \'https://www.javatpoint.com/swift-sets\', \'https://www.javatpoint.com/swift-typealias\', \'https://www.javatpoint.com/swift-sets\', \'https://www.javatpoint.com/swift-typealias\']','[]','[]','[\'Reason behind using Swift Closures\', \'Closure that contains statements \', \'Closure that contains parameter \', \'Closure that returns values \']','[\'Completion blocks\', \'Higher order functions\', \'Syntax:\', \'Example:\', \'Example: \', \'Example: \', \'Example: \']','[]','[\'There are mainly two reasons why swift closures are used: \', \'Closures are used to provide notification when some task has finished its execution.\', \'Here, in is a keyword which is used to separate the return Type and statements inside the closure. A closure can accept parameter and return value. \', \"Let\'s create our own closure: \", \'Simple Closure \', \'Here, the closure accepts a String, we need to pass the string while we call the closure as simpleClosure(\"Hello JavaTpoint\").\']','[\'Like Swift functions, swift closures also can accept parameters and return values. It also contains a set of statements which executes after you call it and can be assigned to a variable/constant as functions.\', \'Here, we have declared a simple closure { } that takes no parameters, contains no statements and does not return a value. This closure is assigned to the constant simpleClosure. \', \"In the above program, we have defined a closure named simpleClosure inferred to be of () -> () because it doesn\'t accept any parameter and does not return any value.\", \"In the above program, the type closure (String) -> () takes an input of type string but doesn\'t return value. To use the value passed inside the statements of the closure, we have placed a parameter name name followed by in keyword. \", \'Closures can return values like functions. To return a value from closure, we must explicitly add the type to return inside braces () followed by ->. \']','[\'Closures can be passed as input parameters for higher order functions. A higher order function is just a type of function that accepts function as an input and returns value of type function as output. In this case, closures are used because closure omits the func keyword and function name that makes the code more readable and short. \', \'You can see that in the above program we have defined type as simpleClosure: (String) -> (String) because Swift cannot automatically infer the closure that returns a value. The type (String) -> (String) specifies that the closure takes an input of type String and also returns a value of type String.\']','[\'{ (parameters) -> return type in\', \'statements\', \'let simpleClosure = {\', \'simpleClosure()\', \'let simpleClosure = {\', \'print(\"Hello JavaTpoint\")\', \'simpleClosure()\', \'let simpleClosure:(String) -> () = { name in\', \'print(name)\', \'simpleClosure(\"Hello JavaTpoint\")\', \'let simpleClosure:(String) -> (String) = { name in\', \'let greeting = \"Hello JavaTpoint \" + \"A platform for all technologies\"\', \'return greeting\', \'let result = simpleClosure(\"Hello JavaTpoint\")\', \'print(result)\']','[\'Hello JavaTpoint\', \'Hello JavaTpoint\', \'Hello JavaTpoint A platform for all technologies\']','[]','[]'),(34,'[\'Swift TypeAlias\']','[\'Swift Typealias is used to provide a new name for an existing data type in the program. Once you create a typealias, you can use the aliased name instead of the exsisting name throughout the program. \']','[\'https://www.javatpoint.com/swift-enum\', \'https://www.javatpoint.com/swift-closures\', \'https://www.javatpoint.com/swift-enum\', \'https://www.javatpoint.com/swift-closures\', \'https://www.javatpoint.com/swift-enum\']','[]','[]','[\'Purpose of using Typealias\', \'Create a typealias\', \'Typealias for Built-in Types\', \'Typealias for user defined types\']','[\'For example: \', \'For example: \']','[]','[\"Typealias doesn\'t create a new data type, it simply provides a new name to the existing data type. \", \'The main purpose of using typealias is make our code clearer and human readable. \', \'Typealias is declared using the keyword typealias:\', \'Swift facilitates you to use typealias for most of the types:\', \'Typealias can be used for all built-in data types i.e. String, Int, Float etc.\', \'Here, we have declared EmployeeName as typealias of String. So, we can use it later instead of String type. \', \'Without using Typealias, the declaration would be: \', \'By creating Typealias EmployeeName, we can write the same above declaration as:\', \'You can see that both examples create the same constant type string but the later one is more understandable for human. \', \'In Swift, you can create your own data type. Suppose you have to create a data type Employee, so you can create it using a class as:\', \'Now, you can create a group of employees in an array as:\', \'Here, you can create your own type for array  using Typealias to make the code more readable:\', \'Now, the declaration would look like: \', \'It is easy to understand in your code. \']','[]','[]','[\'typealias name = existing type\', \'typealias EmployeeName = String\', \'let name:String = \"Alex\"\', \'let name:EmployeeName = \"Alex\"\', \'class Employee {\', \'var employees:Array = []\', \'typealias Employees = Array\', \'var employees:Employees = []\']','[]','[]','[\'|||Built-in types (for.eg: String, Int)|||User-defined types (for.e.g: class, struct, enum)|||Complex types (for e.g: closures)|||\']'),(35,'[\'Swift Enumerations / Swift Enum \']','[\'Swift Enumeration is also known as Swift Enum. It is a data type which consists of set of related values. It is declared in a class and its values are accessed through the instance members of that class. \']','[\'https://www.javatpoint.com/swift-structures\', \'https://www.javatpoint.com/swift-typealias\', \'https://www.javatpoint.com/swift-structures\', \'https://www.javatpoint.com/swift-typealias\', \'https://www.javatpoint.com/swift-structures\']','[]','[]','[]','[\'Syntax: \', \'Example:\', \'Example:\']','[]','[\'Let\'s take an example to understand it well. Here, we shall an enum named \"Connection Status\" and see the possible condition using switch statement. \', \'This is how we use enumeration in Swift.\']','[\'In the above example, there are 4 cases: Unknown, Disconnected, Connecting, and Connected. The output is showing as \"Connected\" as it is set as connected. If you set it \"Disconnected\", it will show \"Disconnected\" as output. \']','[]','[\'enum enum_name\', \'enum ConnectionStatus\', \'case Unknown\', \'case Disconnected\', \'case Connecting\', \'case Connected\', \'var connectionStatus = ConnectionStatus.Connecting\', \'connectionStatus = .Connected\', \'switch connectionStatus {\', \'case .Disconnected:\', \'print(\"Disconnected\")\', \'case .Connecting:\', \'print(\"Connecting\")\', \'case .Connected:\', \'print(\"Connected\")\', \'default:\', \'print(\"Unknown Status\")\', \'enum ConnectionStatus\', \'case Unknown\', \'case Disconnected\', \'case Connecting\', \'case Connected\', \'var connectionStatus = ConnectionStatus.Connecting\', \'connectionStatus = .Disconnected\', \'switch connectionStatus {\', \'case .Disconnected:\', \'print(\"Disconnected\")\', \'case .Connecting:\', \'print(\"Connecting\")\', \'case .Connected:\', \'print(\"Connected\")\', \'default:\', \'print(\"Unknown Status\")\']','[\'Connected\', \'Disconnected\']','[]','[]'),(36,'[\'Swift Structures \']','[\'Swift structures are the flexible basic building blocks of the programs. The \"struct\" keyword is used to define structures. By using structures, you can define constructs methods and properties. \']','[\'https://www.javatpoint.com/swift-classes\', \'https://www.javatpoint.com/swift-enum\', \'https://www.javatpoint.com/swift-classes\', \'https://www.javatpoint.com/swift-enum\', \'https://www.javatpoint.com/swift-classes\']','[]','[]','[\'Swift Structures vs C Structure/ Objective-C Structure\', \'Definition of a structure \', \'Access the structure and its properties \', \'Swift Structure Usage\']','[\'Syntax:\', \'Example:\']','[\'Note: In Structure, the variable values are copied and passed in subsequent codes by returning a copy of the old values so we cannot alter the values. \']','[\'You need to make instances of that structure to make use of structure properties. Dot operator is used to access properties of structures. \', \"Let\'s see the implementation of the structures in Swift. Here, we shall assign some values in structure and then access them. \"]','[\"Unlike the C structures and Object-C structures, the Swift structures don\'t require implementation files and interface. Also, Swift structures allow us to create a single file and to extend its interface automatically to other blocks.\", \"Suppose, you have to access your bank account having some amount in rupees and paisa here, Here Amount is structure\'s name which is used to initialize a structure with rupees and paisa as datatype \'Int\'\", \'Here, structure\'s name is \"Amount\" and there are two variables used \"rupees\" and \"paisa\" which are later accessed by using print statement and dot operator. \', \'Swift4 language facilitates you to define structures as custom data types for building the function blocks. The instances of structure are passed by its value to the defined blocks for further changes.\']','[]','[\'Struct StructureName\', \'struct  Amount\', \'var rupees: Int\', \'var paisa: Int\', \'struct  Amount\', \'var rupees: Int\', \'var paisa: Int\', \'var x = Amount (rupees: 10000, paisa: 50)\', \'print(x)\', \'print(\"Amount in rupees is \\(x.rupees)\")\', \'print(\"Amount in paisa is \\(x.paisa)\")\']','[\'Amount(rupees: 10000, paisa: 50)\', \'Amount in rupees is 10000\', \'Amount in paisa is 50\']','[]','[\"|||Structures are used to encapsulate simple data values.|||Structures are used to copy the encapsulated data and its associated properties by \'values\' rather than by \'references\'.|||\"]'),(37,'[\'Swift Classes\']','[\"Classes in Swift are similar to Structures in Swift. These are building blocks of flexible constructs. You can define class properties and methods like constants, variables and functions are defined. In Swift 4, you don\'t need to create interfaces or implementation files while declaring classes. Swift 4 facilitates you to create classes as a single file and the external interfaces will be created by default when the class is initialized. \"]','[\'https://www.javatpoint.com/swift-properties\', \'https://www.javatpoint.com/swift-structures\', \'https://www.javatpoint.com/swift-properties\', \'https://www.javatpoint.com/swift-structures\', \'https://www.javatpoint.com/swift-properties\']','[]','[]','[\'Benefits of Swift Classes \', \'Characteristics of Classes and Structures in Swift\', \'Class Identity Operators \']','[\'Syntax\', \'Example\', \'Identical to Operators \', \'Not Identical to Operators\']','[\"Note: In the above example, class properties are accessed by the \'.\' syntax. Property name is separated by a \'.\' after the instance name.\"]','[\'In the following program there are two classes Salary and EmpSalary. \', \'After running the above program, you will see the following output:\']','[]','[\'Swift4 classes refer multiple constants and variables pointing to a single instance. To know about the constants and variables pointing to a particular class, instance identity operators are used. Class instances are always passed by reference. In Classes, NSString, NSArray, and NSDictionary instances are always assigned and passed around as a reference to an existing instance, rather than as a copy.\']','[\'Class classname\', \'class Salary{\', \'var salary: Int\', \'init(salary: Int) {\', \'self.salary = salary\', \'class EmpSalary {\', \'var salary = 10000\', \'let Income = EmpSalary()\', \'print(\"Employee salary is \\(Income.salary)\")\', \'print(\"Employee salary is \\(Income.salary)\")\']','[\'Employee salary is 10000\']','[]','[\'|||By using classes, you can apply inheritance to acquire properties of one class to another class. |||Type casting enables the user to check class type at run time.|||Deinitializers take care of releasing memory resources.|||Reference counting allows the class instance to have more than one reference.||||||In classes, properties are defined to store values.|||Subscripts are defined for providing access to values.|||Methods are initialized to improve functionality.|||Initial states are defined by initializers.|||Functionalities are expanded beyond default values.||||||Operator used is (===).|||Returns true when two constants or variables pointing to a same instance.||||||Operator used is (!==).|||Returns true when two constants or variables pointing to a different instance.|||\']'),(38,'[\'Swift Properties\']','[\'We can define properties to associate values with a class, structure, and enumerations. In swift, we can define two types of properties as Stored property and computed property. However, the stored property store variables and constant values as the class attributes. On the other hand, the computed properties calculate values based on a particular value. We can define computed properties in Classes, Structures, and Enumerations; however, the stored properties can only be defined in classes and structures.\']','[\'https://www.javatpoint.com/swift-inheritance\', \'https://www.javatpoint.com/swift-classes\', \'https://www.javatpoint.com/https://www.javatpoint.com/swift-tutorial\', \'https://www.javatpoint.com/swift-inheritance\', \'https://www.javatpoint.com/swift-classes\', \'https://www.javatpoint.com/swift-inheritance\']','[]','[]','[]','[\'Stored Properties\', \'Lazy Stored Property\', \'Computed Properties\']','[]','[\'In this section of the tutorial, we will discuss the various type of swift properties like Stored and Computed properties.\', \'This prints the following output on the console.\', \"If we print the person\'s message, the following message will be printed on the console.\", \'Example 2:\', \'It prints the following on the console.\', \'Example 3: \', \"Let\'s extend the Circle class defined in example 2 and calculate the radius if the circle area is given.\", \"If we assign some value for the circle\'s area, it will calculate the radius according to the area and assign it to the stored property radius.\", \'It will print the new radius of the circle based on the modified area, as shown below. \']','[\"Let\'s consider the following example, which defines a class as a Person. It contains variable stored properties as name and age. Every person has a default name and age, which can be changed later while initializing it.\", \"Now, if we create an instance of the Person class and mark it as constant, it doesn\'t affect our variable stored properties as we can still change their values, as shown below.\", \"However, the same is not true for Structure types as structure are value types. If we mark a structure as constant, we can\'t change all of its stored properties despite the property being a variable. Consider the following example.\", \"Consider the following example where the class Circle contains two properties. The radius is the stored property, whereas; the area is computed depending upon the circle\'s radius.\"]','[\'The instance of a particular type, including Structure, Class, and Enum, is associated with all the properties defined in the type. However, instead of instances, the properties can also be associated with types only. Such properties are called Type properties.\', \"In simple words, the Stored Property is the constant or variable defined as the part of an instance of a particular Class or Structure. The stored properties are either constant (defined using let keyword) or variable (defined using var keyword). We can give the default values to stored properties at the time of declaring it. However, we can modify the stored property\'s default value later when initializing the Class or Structure.\", \'A lazy stored property doesn\'t occupy memory in the system until the first time it is used. In other words, the value of the lazy stored property is not calculated until the first time it is accessed. We can use the \"lazy\" keyword in swift to define a property as lazy. However, we can\'t define lazy stored property as constant since its value might not be retrieved at the time of declaration.\', \'Lazy properties are useful in the scenario where the value of our property depends on the outside factors and needs to be calculated once those values are known. We can also use lazy properties if the property requires complex setup while initialization and is not needed until the value is accessed the first time.\', \'Consider the following example, which defines the relationship between classes Employee and Department. Here, the class Department contains a lazy stored property of type Employee indicating that the Employee property will be created whenever the Department will be associated with the Employee.\', \"We can define computed properties as the part of the instance of Classes, Structure, and Enum types. Unlike stored properties, the computed properties don\'t store the values. Instead, they provide getter and optional setter to retrieve and set other properties and values indirectly.\", \"Consider the following example that defines a class Person. The Person has a name, age, and a special message for the world. While the name and age are stored properties, the message is a computed property whose value is determined based on Person\'s name and age.\", \"The class Person includes stored properties like name, age, and festival for which the person wishes. However, the message is being calculated. Therefore, it is a computed property whose value is based on a person\'s name, age, and festival for which the message will be delivered.\"]','[\'class Person{\', \'var name:String = \"Anonymous\"\', \'var age:Int = 20\', \'init() {\', \'\', \'init(name:String, age:Int) {\', \'self.name = name\', \'self.age = age\', \'var person = Person()\', \'person.name = \"John\"\', \'person.age = 23\', \'debugPrint(person.name + \" \" + person.age.description)\', \'struct Person{\', \'var name:String = \"Anonymous\"\', \'var age:Int = 20\', \'let person = Person()\', \'person.name = \"John\" // will give compiler error as \"Cannot assign to property: \'person\' is a \'let\' constant\"\', \'person.age = 23\', \'debugPrint(person.name + \" \" + person.age.description)\', \'import Foundation\', \'class Employee{\', \'var name:String\', \'var id:Int\', \'var salary:Double\', \'var department:Department?\', \'init(name:String,id:Int,salary:Double) {\', \'self.name = name\', \'self.id = id\', \'self.salary = salary\', \'class Department{\', \'var name:String = \"IT\"\', \'lazy var employees = Array()\', \'var dep = Department()\', \'dep.name = \"CS\"\', \'var emp = Employee(name: \"John\", id: 102, salary: 25000.0)\', \'emp.department = dep\', \'dep.employees.append(emp) //the employee property will be created now\', \'class Person{\', \'var name:String\', \'var age:Int\', \'var festival:String\', \'var message: String{\', \'return \"Hi I am \\(name), and I am \\(age) years old. I wish you all a very Happy \\(festival)\"\', \'init(name:String,age:Int,festival:String) {\', \'self.name = name\', \'self.age = age\', \'self.festival = festival\', \'var person = Person(name: \"John\", age: 23, festival: \"Diwali\")\', \'debugPrint(person.message)\', \'class Circle{\', \'var radius:Double\', \'var area:Double{\', \'get{\', \'return 3.14 * radius * radius\', \'}\', \'init(radius:Double) {\', \'self.radius = radius\', \'var circle = Circle(radius: 100)\', \'debugPrint(\"Area of circle is \\(circle.area)\")\', \'class Circle{\', \'var radius:Double\', \'var area:Double{\', \'get{\', \'return 3.14 * radius * radius\', \'}\', \'set(newValue){\', \'radius = sqrt(newValue/3.14)\', \'}\', \'init(radius:Double) {\', \'self.radius = radius\', \'var circle = Circle(radius: 100)\', \'circle.area = 31400\', \'debugPrint(\"Radius of Circle is \\(circle.radius)\")\']','[\'\"John 23\"\', \'\"Hi I am John, and I am 23 years old. I wish you all a very Happy Diwali\"\', \'\"Area of circle is 31400.0\"\', \'\"Radius of Circle is 316.2287731100305\"\']','[]','[]'),(39,'[\'Inheritance in Swift \']','[\'In Swift programming language, a class can inherit properties, methods and other characteristics from another class. Inheriting these properties and attributes from one class to another class is known as inheritance.\']','[\'https://www.javatpoint.com/swift-methods\', \'https://www.javatpoint.com/swift-properties\', \'https://www.javatpoint.com/swift-methods\', \'https://www.javatpoint.com/swift-properties\', \'https://www.javatpoint.com/swift-methods\']','[]','[]','[\'Base Class \', \'Subclass \', \'Overriding\']','[\'Syntax:\', \'Example\', \'Example\', \'Use of super keyword\']','[]','[\'Sub class: The class which inherits the properties from other class is called child class or sub class.\', \'Super class: The main class from where the subclass inherits the properties is known as parent class or super class.\', \'A Base Class is a class which does not inherit methods, properties or functions from another class. \', \"The subclass inherits properties, methods and functions of its base class. To define a subclass \':\' is used before the base class name.\", \"\'super\' keyword is used as a prefix to access the methods, properties and subscripts declared in the super class.\"]','[\'Swift4 classes consist of superclass which calls and accesses methods, properties, functions and overriding methods. Property observers are used to add a property and modify the stored and computed property methods.\', \"Overriding is used to access the super class instance, type methods, instance, type properties and subscripts. It uses a keyword \'override\' to override the methods declared in the superclass. \"]','[\"Here, class with classname StudentDetails is defined as a base class which contains student\'s name, and three subjects mark as mark1, mark2 and mark3. The \'let\' keyword is used to initialize the value for the base class and base class value is displayed using \'print\' function. \"]','[\'class class_name: Superclass_name\', \'class StudentDetails {\', \'var stname: String!\', \'var mark1: Int!\', \'var mark2: Int!\', \'var mark3: Int!\', \'init(stname: String, mark1: Int, mark2: Int, mark3: Int) {\', \'self.stname = stname\', \'self.mark1 = mark1\', \'self.mark2 = mark2\', \'self.mark3 = mark3\', \'let stname = \"Aryan\"\', \'let mark1 = 70\', \'let mark2 = 80\', \'let mark3 = 85\', \'print(stname)\', \'print(mark1)\', \'print(mark2)\', \'print(mark3)\', \'class Person {\', \'var firstName: String\', \'var lastName: String\', \'let birthPlace: String\', \'init(birthPlace: String) {\', \'self.birthPlace = birthPlace\', \'class Student: Person\', \'var school: String\', \'let student = Student(birthPlace: \"India\")\', \'student.lastName  = \"Head\"\', \'student.firstName  = \"Travis\"\', \'print(student.birthPlace)\', \'print(student.firstName)\', \'print(student.lastName)\']','[\'Aryan\', \'70\', \'80\', \'India\', \'Travis\', \'Head\']','[\'Overriding|||Access to methods,properties and subscripts&&&Methods|||super.somemethod()&&&Properties|||super.someProperty()&&&Subscripts|||super[someIndex]\']','[]'),(40,'[\'Swift4 Methods \']','[\'In Swift4, methods are the functions which are associated with a particular type. In Objective-C, classes are used to define methods whereas in Swift4, we have methods for Classes, Structures and Enumerations. \']','[\'https://www.javatpoint.com/swift-subscripts\', \'https://www.javatpoint.com/swift-inheritance\', \'https://www.javatpoint.com/swift-subscripts\', \'https://www.javatpoint.com/swift-inheritance\', \'https://www.javatpoint.com/swift-subscripts\']','[]','[]','[\'Instance Methods \', \'Local and External Parameter Names\', \'Self property in Methods \', \'Modify Value Types from Instance Methods\']','[\'Syntax: \', \'Example: \', \'Example\', \'Example\', \'Example\']','[]','[\'In the above example, class calculate defines two instance methods: \', \'In Swift 4, you can declare first parameter name as local parameter and the remaining parameter names as global parameter names.\', \"Let\'s see an example. Here \'no1\' is declared as local parameter names and \'no2\' is used for global declarations and accessed through out the program.\"]','[\'Instance methods are the methods which are associated with instances of class, structure or enum. Instance methods are written inside the body of that type. \', \"Methods have an implicit property called \'self\' for all its defined type instances. \'Self\' property or Self method is provided with methods to access the instance itself. \"]','[\"Instance methods provide functionalities related to instance\'s need and also to access and modify instance properties. Instance methods are written inside the curly barces {}. It has implicit access to methods and properties of the type instance. When a specific instance of the type is called, it will get access to that particular instance. \", \"In Swift4, function can describe both local and global declarations for their variables. The characteristics of local and global parameter name declarations are different for functions and methods. The first parameter in Swift 4 is referred by preposition named as \'with\', \'for\' and \'by\' for easy to access naming conventions.\", \"In Swift 4, structures and enums belong to value types which cannot be altered by its instance methods but we can modify the value types by \'mutating\' behavior. Mutate will make any changes in the instance methods and will return back to the original form after the execution of the method. Also, by the \'self\' property new instance is created for its implicit function and will replace the existing method after its execution. \"]','[\'func funcname(Parameters) -> returntype {\', \'Statement1\', \'Statement2\', \'Statement N\', \'return parameters\', \'class calculate {\', \'let a: Int\', \'let b: Int\', \'let res: Int\', \'init(a: Int, b: Int) {\', \'self.a = a\', \'self.b = b\', \'res = a + b\', \'func tot(c: Int) -> Int {\', \'return res - c\', \'func result() {\', \'print(\"Result is: \\(tot(c: 20))\")\', \'print(\"Result is: \\(tot(c: 50))\")\', \'let pri = calculate(a: 200, b: 300)\', \'pri.result()\', \'class divide {\', \'var count: Int = 0\', \'func incrementBy(no1: Int, no2: Int) {\', \'count = no1 / no2\', \'print(count)\', \'let counter = divide()\', \'counter.incrementBy(no1: 100, no2: 3)\', \'counter.incrementBy(no1: 200, no2: 5)\', \'counter.incrementBy(no1: 400, no2: 7)\', \'class calculate {\', \'let a: Int\', \'let b: Int\', \'let res: Int\', \'init(a: Int, b: Int) {\', \'self.a = a\', \'self.b = b\', \'res = a + b\', \'print(\"Result Inside Self Block: \\(res)\")\', \'func tot(c: Int) -> Int {\', \'return res - c\', \'func result() {\', \'print(\"Result is: \\(tot(c: 20))\")\', \'print(\"Result is: \\(tot(c: 50))\")\', \'let pri = calculate(a: 100, b: 200)\', \'let sum = calculate(a: 300, b: 400)\', \'pri.result()\', \'sum.result()\', \'struct area {\', \'var length = 1\', \'var breadth = 1\', \'func area() -> Int {\', \'return length * breadth\', \'mutating func scaleBy(res: Int) {\', \'length *= res\', \'breadth *= res\', \'print(length)\', \'print(breadth)\', \'var val = area(length: 3, breadth: 5)\', \'val.scaleBy(res: 2)\', \'val.scaleBy(res: 20)\', \'val.scaleBy(res: 200)\']','[\'Result is: 480\', \'Result is: 450\', \'33\', \'40\', \'57\', \'Result Inside Self Block: 300\', \'Result Inside Self Block: 700\', \'Result is: 280\', \'Result is: 250\', \'Result is: 680\', \'Result is: 650\', \'6\', \'10\', \'120\', \'200\', \'24000\', \'40000\']','[]','[\"|||init() is defined to add two numbers a and b and store it in result \'res\'.|||tot() is used to subtract the \'res\' from passing \'c\' value. |||\"]'),(41,'[\'Swift4 Subscripts \']','[\'In Swift4, subscripts are the shortcuts which are used to access elements of a list, sequence or a collection. Subscript is used to set or retrieve a value using index instead of writing functions. \']','[\'https://www.javatpoint.com/swift-deinitialization\', \'https://www.javatpoint.com/swift-methods\', \'https://www.javatpoint.com/swift-deinitialization\', \'https://www.javatpoint.com/swift-methods\', \'https://www.javatpoint.com/swift-deinitialization\']','[]','[]','[\'Subscript Overloading \']','[\'Syntax:\', \'Example: \', \'Example2: \']','[]','[\'For example: \']','[\"Subscript can be a single or multiple type declaration. It also ranges from single dimension to multiple dimensions according to the user\'s requirement for their input data type declaration. \", \'The syntax of subscripts is same as computed properties. For querying type instances, subscripts are written inside a square bracket followed with the instance name. \', \'In Swift4, subscript can take single to multiple input parameters belong to any data type. Defining multiple subscripts is known as subscript overloading where a class or structure can provide multiple subscript definitions. \']','[]','[\'Array[Index], Dictionary[Key]\', \'subscript(index: Int) ?> Int {\', \'get {\', \'set(newValue) {\', \'struct subscriptexample {\', \'let decrementer: Int\', \'subscript(index: Int) -> Int {\', \'return decrementer / index\', \'let division = subscriptexample(decrementer: 100)\', \'print(\"The number is divisible by \\(division[2]) times\")\', \'print(\"The number is divisible by \\(division[3]) times\")\', \'print(\"The number is divisible by \\(division[4]) times\")\', \'print(\"The number is divisible by \\(division[5]) times\")\', \'print(\"The number is divisible by \\(division[6]) times\")\', \'class daysofaweek {\', \'private var days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\', \'\"Thursday\", \"Friday\", \"Saturday\"]\', \'subscript(index: Int) -> String {\', \'get {\', \'return days[index]\', \'}\', \'set(newValue) {\', \'self.days[index] = newValue\', \'}\', \'var p = daysofaweek()\', \'print(p[0])\', \'print(p[1])\', \'print(p[2])\', \'print(p[3])\', \'print(p[4])\', \'print(p[5])\', \'print(p[6])\']','[\'The number is divisible by 50 times\', \'The number is divisible by 33 times\', \'The number is divisible by 25 times\', \'The number is divisible by 20 times\', \'The number is divisible by 16 times\', \'Sunday\', \'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\', \'Saturday\']','[]','[]'),(42,'[\'Swift Deinitialization \']','[\"Swift Deinitialization is a process where \'deinitializer\' is called to deallocate the memory space before a class instance deallocated. The\'deinit\' keyword is used to deallocate the memory spaces occupied by the system resources. Deinitialization is available only on class types. \"]','[\'https://www.javatpoint.com/swift-initialization\', \'https://www.javatpoint.com/swift-subscripts\', \'https://www.javatpoint.com/swift-initialization\', \'https://www.javatpoint.com/swift-subscripts\', \'https://www.javatpoint.com/swift-initialization\']','[]','[]','[\'How Deinitialization Works\']','[\'Syntax:\', \'Swift Deinitialization Example\']','[]','[\'Here, print = nil statement values of the counter retains the same since it is not deinitialized. \']','[\'For example: If you create a custom class to open a file and write some data to it, you might need to close the file before the class instance is deallocated.\']','[\'Swift automatically deallocates instances which are no longer needed, to free up resources. Swift uses Automatic Reference Counting (ARC) to handle the memory management of Instances. Usually, you don?t need to perform manual cleanup when your instances are deallocated. But, when you work with your own resources, you need to perform some additional cleanup.\']','[\'deinit {\', \'var counter = 0; // for reference counting\', \'class baseclass {\', \'init() {\', \'counter++;\', \'deinit {\', \'counter--;\', \'var print: baseclass? = baseclass()\', \'print(counter)\', \'print = nil\', \'print(counter)\', \'var counter = 0; // for reference counting\', \'class baseclass {\', \'init() {\', \'counter++;\', \'deinit {\', \'counter--;\', \'var print: baseclass? = baseclass()\', \'print(counter)\', \'print(counter)\']','[\'1\', \'0\', \'1\', \'1\']','[]','[]'),(43,'[\'Swift4 Initialization \']','[\"Swift Classes, structures and enumerations are used for preparing instance of a class once declared in Swift4. Initial value is initialized for stored property. The values are initialized to proceed further. The \'init()\' method is used to create initialization function. Swift 4 initializer is different from Objective-C as it does not return any values. Its function is to check for initialization of newly created instances before its processing. Swift 4 also provides \'deinitialization\' process for performing memory management operations once the instances are deallocated.\"]','[\'https://www.javatpoint.com/swift-typecasting\', \'https://www.javatpoint.com/swift-deinitialization\', \'https://www.javatpoint.com/swift-typecasting\', \'https://www.javatpoint.com/swift-deinitialization\', \'https://www.javatpoint.com/swift-typecasting\']','[]','[]','[\'Initializer for Stored Properties \', \'Setting Property Values by Default \', \'Parameter Initialization\']','[\'Syntax:\', \'Example\', \'Example:\', \'Example:\']','[]','[\"In Swift4 language, the user can initialize parameters as part of the initializer\'s definition using init(). \"]','[\'Stored properties have to initialize the instances for their classes and structures before processing the instances. Stored properties use initializer to assign and initialize values without need to call property observers. \']','[\'In Swift4 programming language, the init() function is used to initialize the property values by default while declaring the class or structure members. When the property takes the same value alone throughout the program, we can declare it in the declaration section alone rather than initializing it in init(). Setting property values by default enables the user when inheritance is defined for classes or structures. \']','[\'init() {\', \'struct cube {\', \'var length: Double\', \'var breadth: Double\', \'var height: Double\', \'init() {\', \'length = 6\', \'breadth = 12\', \'height = 4\', \'var volume = cube()\', \'print(\"volume of cube is \\(volume.length*volume.breadth*volume.height)\")\', \'struct cube {\', \'var length = 6\', \'var breadth = 12\', \'var height = 4\', \'var volume = cube()\', \'print(\"volume of the cube is \\(volume.length*volume.breadth*volume.height)\")\', \'struct Rectangle {\', \'var length: Double\', \'var breadth: Double\', \'var area: Double\', \'init(fromLength length: Double, fromBreadth breadth: Double) {\', \'self.length = length\', \'self.breadth = breadth\', \'area = length * breadth\', \'init(fromL l: Double, fromB b: Double) {\', \'self.length = l\', \'self.breadth = b\', \'area = l * b\', \'let a1 = Rectangle(fromLength: 6, fromBreadth: 12)\', \'print(\"area is: \\(a1.area)\")\', \'let a2 = Rectangle(fromL: 36, fromB: 12)\', \'print(\"area is: \\(a2.area)\")\']','[\'volume of cube is 288.0\', \'volume of cube is 288\', \'area is: 72.0\', \'area is: 432.0\']','[]','[\'|||To create an initial value.|||To assign default property value within the property definition.|||To initialize an instance for a particular data type \'init()\' is used. No arguments are passed inside the init() function. ||||||The structure \"cube\" is initialized with member length, breadth and height as \"Double\" datatype.|||Init() method is used to initialize the values for the newly created members.|||Volume of cube is calculated and returned by calling the cube function. |||\']'),(44,'[\'Swift4 Typecasting \']','[\'Typecasting is used in Swift4 to validate the type of an instance. It is used to check whether the instance type belongs to a particular super class or subclass or it is defined in its own hierarchy.\']','[\'https://www.javatpoint.com/#\', \'https://www.javatpoint.com/swift-initialization\', \'https://www.javatpoint.com/difference-between-function-and-method-in-swift\', \'https://www.javatpoint.com/swift-initialization\', \'https://www.javatpoint.com/difference-between-function-and-method-in-swift\']','[]','[]','[\'To Define a Class Hierarchy\', \'How to do Type Checking\']','[\'Example: \']','[]','[\'Swift 4 type casting provides two operators:\']','[\'Type casting is also used to check whether the instance type follows particular protocol conformance standard or not. It also checks hierarchy of classes, its subclasses and its instances to make it as a same hierarchy. \', \'The \"is\" operator is used to do type checking. It checks whether the instance belongs to particular subclass type and returns \'true\' if it belongs otherwise returns \'false\'. \']','[]','[\'class Subjects {\', \'var physics: String\', \'init(physics: String) {\', \'self.physics = physics\', \'class Chemistry: Subjects {\', \'var equations: String\', \'init(physics: String, equations: String) {\', \'self.equations = equations\', \'super.init(physics: physics)\', \'class Maths: Subjects {\', \'var formulae: String\', \'init(physics: String, formulae: String) {\', \'self.formulae = formulae\', \'super.init(physics: physics)\', \'let sa = [ Chemistry(physics: \"Mechanics\", equations: \"Hertz\"),\', \'Maths(physics: \"Fluid Dynamics\", formulae: \"Giga Hertz\")]\', \'let samplechem = Chemistry(physics: \"Mechanics\", equations: \"Hertz\")\', \'print(\"Instance physics is: \\(samplechem.physics)\")\', \'print(\"Instance equation is: \\(samplechem.equations)\")\', \'let samplemaths = Maths(physics: \"Fluid Dynamics\", formulae: \"Giga Hertz\")\', \'print(\"Instance physics is: \\(samplemaths.physics)\")\', \'print(\"Instance formulae is: \\(samplemaths.formulae)\")\']','[\'Instance physics is: Mechanics\', \'Instance equation is: Hertz\', \'Instance physics is: Fluid Dynamics\', \'Instance formulae is: Giga Hertz\']','[]','[\"|||\'is\': This operator is used to check the type of a value.|||\'as\': This operator is used to cast the type value to a different type.|||\"]'),(45,'[\'Difference between function and method in Swift \']','[\'Some people think functions and methods are same and use the terms interchangeably. But, these two are slightly different. \"Methods belong to classes, structs, and enums, whereas functions do not.\" \']','[\'https://www.javatpoint.com/timers-in-swif\', \'https://www.javatpoint.com/swift-initialization\', \'https://www.javatpoint.com/timers-in-swif\', \'https://www.javatpoint.com/swift-initialization\', \'https://www.javatpoint.com/timers-in-swif\']','[]','[]','[]','[\'Example:\']','[]','[\"Let\'s see some differences between a function and a method:\"]','[]','[]','[\'func thisIsAFunction() {\', \'struct Employee {\', \'func thisIsAMethod() {\']','[]','[\"Function|||Method&&&Functions have independent existence. You can define them outside of the class.|||Methods do not have independent existence. They are always defined within a class, struct, or enum.&&&Functions are the properties of structured languages like C, C++, Pascal and object based language like JavaScript. |||Note: There is no concept of function in Java.|||Methods are the properties of Object-oriented language like C#, Java, Swift etc.&&&Functions don\'t have any reference variables.|||Methods are called using reference variables. &&&Functions are a self describing piece of code.|||Methods are used to manipulate instance variable of a class.&&&Functions are called independently.|||Methods are called using instance or object.\"]','[]'),(46,'[\'Timers in Swift\']','[\"In Swift, timers are used to create repeating tasks to schedule a work with a delay. It is a class which is formerly known as NSTimer. Swift\'s timer class provides a flexible way to schedule work to happen in future either once or repeatedly.\"]','[\'https://www.javatpoint.com/swiftyjson\', \'https://www.javatpoint.com/difference-between-function-and-method-in-swift\', \'https://www.javatpoint.com/swiftyjson\', \'https://www.javatpoint.com/difference-between-function-and-method-in-swift\', \'https://www.javatpoint.com/swiftyjson\']','[]','[]','[\'Creating a Repeating Timer \', \'Parameter explanation \', \'Creating a Nonrepeating Timer \', \'Create a timer using Closure \', \'Difference between Repeating and Nonrepeating Timers\']','[\'Syntax\', \'Example:\', \'Example:\']','[\'Note: The above code must run in a class context, for example in a view controller class. The fire() function is part of the class, and self refers to the current class instance. \']','[\'We can create and start a repeating counter by using the following syntax: \', \"Let\'s see an example to demonstrate how to create a repeating counter: \", \'In the above example, \', \'In this example, 5 parameters are used to create a timer.\', \'In the above code, the last parameter block takes a closure. The closure has one parameter timer itself. \', \'A nonrepeating timer fires once and then invalidates itself automatically, so, it prevents the timer from firing again. \']','[\"Let\'s see how to create repeating and non-repeating timers, using run loops, keeping track of timers, and how you can reduce their energy and power impact.\", \'To create a nonrepeating timer, you have to just set the repeats parameter to false. The timer will only fire once and immediately invalidate itself after. \', \'Here, the @objc attribute is used because it makes the fire() function available in Objective-C. The Timer class is part of the Objective-C runtime that is the reason we use that @objc attribute. \', \'You have to specify whether a timer is repeating or nonrepeating at the time of creation. The main difference between repeating and nonrepeating timer is:\', \'A repeating timer fires and then reschedules itself on the same run loop. A repeating timer always schedules itself based on the scheduled firing time, as opposed to the actual firing time. \', \'For example, if a timer is scheduled to fire at a specific time and every 10 seconds after that, the scheduled firing time will always fall on the original 10-second time intervals, even if the actual firing time gets delayed. \']','[]','[\'let timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(fireTimer), userInfo: nil, repeats: true)\', \'let timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(fire), userInfo: nil, repeats: true)\', \'@objc func fire()\', \'print(\"FIRE!!!\")\', \'let timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(fire), userInfo: nil, repeats: false)\', \'@objc func fire()\', \'print(\"FIRE!!!\")\', \'let timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true, block: { timer in\', \'print(\"FIRE!!!\")\']','[]','[]','[\"|||A timer is created using the Timer.scheduledTimer(...) class method. The return value of this method is assigned to the constant timer. This constant now contains a reference to the timer, which will be used later. |||The parameters of scheduledTimer() are the timer interval of 1 second. It uses a mechanism known as target-action, some userInfo that\'s set to nil, and the parameter repeats set to true.|||We\'ve also coded a function fire(). This is the function that\'s called when the timer fires, i.e. roughly every second. By setting target to self and selector to #selector(fire) you\'re indicating that whenever the timer fires, the function fire() of self needs to be called. ||||||timeInterval: It specifies the interval between timer fires in seconds, type is Double.|||target: It specifies a class instance that the function for selector should be called on|||selector: It specifies the function to call when the timer fires, with #selector(...)|||userInfo: It specifies a dictionary with data that\'s provided to the selector, or nil.|||repeats: It specifies whether this timer is repeating or non-repeating.|||\"]'),(47,'[\'SwiftyJSON\']','[\'SwiftyJSON is an open-source library that helps developers use JSON in Swift without much difficulty. Swift is very strict about types so, it is very difficult to work with JSON in Swift. SwiftyJSON provides a better way to deal with JSON data in Swift. \']','[\'https://www.javatpoint.com/optional-in-swift\', \'https://www.javatpoint.com/timers-in-swift\', \'https://www.javatpoint.com/https://github.com/SwiftyJSON/SwiftyJSON\', \'https://www.javatpoint.com/optional-in-swift\', \'https://www.javatpoint.com/timers-in-swift\', \'https://www.javatpoint.com/optional-in-swift\']','[]','[]','[\'The problem with JSON in Swift\', \'Download SwiftJSON \', \'How to use SwiftyJSON\']','[]','[]','[\'SwiftyJSON is a Swift framework which was built to remove the need for optional chaining in normal JSON serialization. \', \'You can see that the above code is complicated and difficult to read.\', \'By using SwiftyJSON, it will be highly simplified like this:\', \'SwiftyJSON removes the requirement of checking every field, as it returns nil if any of them are invalid.\', \'You can download or clone SwityJSON directly from GitHub:\', \'https://github.com/SwiftyJSON/SwiftyJSON\', \'You can create your own JSON object by using initializers. There are two ways to create your own JSON object: \', \'You can use subscripts to access your data. \', \'You can parse your value to a certain data type, which will return an optional value: \', \'You can also compile your paths into a swift Array:\', \'It is same as: \', \'SwiftyJSON has the functionality to print its own errors: \', \'If you need to write to your JSON object, you can use subscripts again:\', \'If you want the original String for the JSON, for example if you need to write it to a file, you can get the raw value. \']','[\"Before using SwiftyJSON, let\'s see the mess a user can face while dealing with JSON in Swift. For example, your code would look like this if you find the name of the first book in a JSON object: \", \'To use SwiftyJSON, you have to download the correct version from the Git repository. Simply, drag the \"SwiftyJSON.swift\" into your project and import into your class:\']','[]','[\'if let jsonObject = try NSJSONSerialization.JSONObjectWithData(data, options: .AllowFragments) as? [[String: AnyObject]],\', \'let bookName = (jsonObject[0][\"book\"] as? [String: AnyObject])?[\"name\"] as? String {\', \'let json = JSON(data: data)\', \'if let bookName = json[0][\"book\"][\"name\"].string {\', \'import SwiftyJSON\', \'let jsonObject = JSON(data: dataObject)\', \'let jsonObject = JSON(jsonObject) //This could be a string in a JSON format for example\', \'let firstObjectInAnArray = jsonObject[0]\', \'let nameOfFirstObject = jsonObject[0][\"name\"]\', \'let nameOfFirstObject = jsonObject[0][\"name\"].string //This will return the name as a string\', \'let nameOfFirstObject = jsonObject[0][\"name\"].double //This will return null\', \'let convolutedPath = jsonObject[0][\"name\"][2][\"lastName\"][\"firstLetter\"].string\', \'let convolutedPath = jsonObject[0, \"name\", 2, \"lastName\", \"firstLetter\"].string\', \'if let name = json[1337].string {\', \'} else {\', \'print(json[1337].error) // \"Array[1337] is out of bounds\" - You cant use the value\', \'var originalJSON:JSON = [\"name\": \"Jack\", \"age\": 18]\', \'originalJSON[\"age\"] = 25 //This changes the age to 25\', \'originalJSON[\"surname\"] = \"Smith\" //This creates a new field called \"surname\" and adds the value to it.\', \'if let string = json.rawString() { //This is a String object\', \'if let data = json.rawData() { //This is an NSData object\']','[]','[]','[]'),(48,'[\'Optional in Swift\']','[\'Swift Optional is the fundamental part of the Swift coding. Optional is used to separate the good code from the bad code and prevent crashes. Every programming language has some preventive measures to avoid a crash. Swift is more practical in this case and optional make your code crash free. \']','[\'https://www.javatpoint.com/swift-optional-chaining\', \'https://www.javatpoint.com/swiftyjson\', \'https://www.javatpoint.com/swift-optional-chaining\', \'https://www.javatpoint.com/swiftyjson\', \'https://www.javatpoint.com/swift-optional-chaining\']','[]','[]','[\'Declaration\', \'Forced Unwrapping \', \'Automatic Unwrapping \', \'Swift Optional Binding \']','[\'Example\', \'Example: (Before applying unwrapping)\', \'Example: (After applying unwrapping)\', \'Example:\', \'Example:\']','[]','[\'See the following example.\', \'Here, the types of shortForm and longForm in the following code sample are the same:\', \'Optional either hold no value or some value. Optional allows storing nil as the absence of a value. Optional is a generic enum with two cases: \', \'Now, see this example:\', \"Here we try to print the value of the variable \'numberOfStudents\'.\", \'Set a value to the variable \', \'You can do a nil check before you force unwrap an optional. \', \'For example:\', \'Now, your program will not crash as you are force unwrapping the optional variable only after a nil check.\', \"Let\'s check an example to make it clear.\", \'Output: When you execute the above code, it will give the following output:\', \'Now, we apply unwrapping to get the correct value of the variable. \', \"Let\'s see an example.\", \"Let\'s take an example to see the optional binding for the if statement:\"]','[\"Optional type is used whenever you use optional values, even if you never typed the word Optional. Swift\'s type system usually shows the wrapped type\'s name along with a question mark (?) instead of showing the full type name.\", \'For example, if a variable has the type Int?, it is same and just another way of writing Optional. This short form is used just to keep code easy and simple.\', \'If you set a value to the variable before you force unwrap the value, the code will not crash but this is not a good coding practice and an abuse of optional variable. \', \"The above method will check if the optional variable \'numberOfStudents\' contains some value or not. If exists, then it will be copied to a constant called studentCount and then only the code block will get executed.\", \'When you define a variable as optional then to fetch the value from this variable, you will have to unwrap it. Force unwrapping is the process of putting an exclamation mark at the end of the variable.\', \'Optional Binding is used to find out whether an optional contains a value, and if so, to make that value available as a temporary constant or variable. You can use any of the optional binding control structures, including if let, guard let, and etc.\']','[\"The question mark (?) in the above program denotes that it is an optional variable. If you see a question mark at the end of a variable declaration, it is definitely an optional and it may or may not contain a value in it. So, at some part of your program, you don\'t know if there is a value or not for a variable, then mark it as optional.\", \'Here, the exclamation point (!) at the end of the variable is used to unwrap the value. But, if will try to execute the code the code will crash. That is because, you just force unwrap an optional variable with no value in it. If there is no value in the variable, the program will be crashed. \', \'Automatic unwrapping provides a way where the optional variable is declared using exclamation mark instead of a question mark. By this way, variables will be unwrapped automatically and you do not need to use any further exclamation mark at the end of the variable to fetch the assigned value. \']','[\'enum Optional\', \'let shortForm: Int? = Int(\"143\")\', \'let longForm: Optional = Int(\"143\")\', \'let number: Int? = Optional.some(143)\', \'let noNumber: Int? = Optional.none\', \'print(noNumber == nil)\', \'var numberOfStudents : Int?\', \'print(numberOfStudents!)\', \'var numberOfStudents : Int?\', \'numberOfStudents = 30\', \'print(numberOfStudents!)\', \'var numberOfStudents : Int?\', \'if numberOfStudents != nil {\', \'print(numberOfStudents!)\', \'var numberOfStudents : Int?\', \'if let studentCount = numberOfStudents {\', \'print(studentCount) // It is same as print(numberOfStudents!)\', \'var userString:String?\', \'userString = \"Hello World\"\', \'if userString != nil {\', \'print(userString)\', \'} else {\', \'print(\"userString has nil value\")\', \'var userString:String?\', \'userString = \"Hello World\"\', \'if userString != nil {\', \'print(userString!)\', \'} else {\', \'print(\"userString has nil value\")\', \'var userString:String!\', \'userString = \"Hello World\"\', \'if userString != nil {\', \'print(userString)\', \'} else {\', \'print(\"userString has nil value\")\', \'var userString:String?\', \'userString = \"Hello world\"\', \'if let myString = userString {\', \'print(\"The value of my string is - \\(myString)\")\', \'} else {\', \'print(\"My string does not have a value\")\']','[\'true\', \'30\', \'Optional(\"Hello World\")\', \'Hello World\', \'Hello World\', \'The value of my string is - Hello world\']','[]','[\'|||Optional.none: It is equivalent to nil literal.|||Optional.some(Wrapped): It stores a wrapped value. |||\']'),(49,'[\'Swift Optional Chaining\']','[\'Optional Chaining is process which is used to call properties, methods, and subscripts on an optional that might currently be nil. If the optional have a value then the property, method, or subscript call succeeds and if the optional is nil thenthe property, method, or subscript call returns nil.\']','[\'https://www.javatpoint.com/convert-string-to-int-swift\', \'https://www.javatpoint.com/optional-in-swift\', \'https://www.javatpoint.com/convert-string-to-int-swift\', \'https://www.javatpoint.com/optional-in-swift\', \'https://www.javatpoint.com/convert-string-to-int-swift\']','[]','[]','[\'Optional Chaining as Forced Unwrapping Alternative \', \'Optional Chaining example (without declaring value in base class) \', \'Model Class for Optional Chaining & Accessing Properties\']','[\'Program for Optional Chaining with ? Operator \', \'Example\']','[]','[\'You can chain multiple queries together but if any chain in the link is nil, the entire chain will fail.\', \"Let\'s take an example to see the difference between optional chaining and forced alternative:\", \'Since, the value is not declared in the base class so, nil is stored and displayed by else handler block.\']','[\'Optional chaining is specified by placing a question mark (?) after the optional value where you call a property, method or subscript if optional is not nil. \', \'The result of the optional chaining is the same as the expected return value but wrapped in an optional. It means that a property which generally returns Int will return Int? when accessed through optional chaining.\', \'It is used when you have to declare more than one subclass as a model class. It facilitates you to define complex model and to access the methods, properties, subscripts, sub properties.\']','[\'Here, Exam is a class name and contains student as membership function. Subclass is declared as Toppers and name is a membership function which is initialized as \"Intelligent\". The call to the superclass is initialized by creating an instance \"stud\" with optional \"?\".\']','[\'class Exam {\', \'var student: Toppers?\', \'class Toppers {\', \'var name = \"Intelligent\"\', \'let stud = Exam()\', \'if let studname = stud.student?.name {\', \'print(\"Student name is \\(studname)\")\', \'} else {\', \'print(\"Student name cannot be retrieved\")\', \'class rectangle {\', \'var print: circle?\', \'class circle {\', \'var area = [radius]()\', \'var cprint: Int {\', \'return area.count\', \'subscript(i: Int) -> radius {\', \'get {\', \'return area[i]\', \'}\', \'set {\', \'area[i] = newValue\', \'}\', \'func circleprint() {\', \'print(\"The number of rooms is \\(cprint)\")\', \'var rectarea: circumference?\', \'class radius {\', \'let radiusname: String\', \'init(radiusname: String) { self.radiusname = radiusname }\', \'class circumference {\', \'var circumName: String?\', \'var circumNumber: String?\', \'var street: String?\', \'func buildingIdentifier() -> String? {\', \'if circumName != nil {\', \'return circumName\', \'} else if circumNumber != nil {\', \'return circumNumber\', \'} else {\', \'return nil\', \'}\', \'let rectname = rectangle()\', \'if let rectarea = rectname.print?.cprint {\', \'print(\"Area of rectangle is \\(rectarea)\")\', \'} else {\', \'print(\"Rectangle Area is not specified\")\']','[\'Student name cannot be retrieved\', \'Rectangle Area is not specified\']','[\'Optional Chaining|||Forced Unwrapping&&&Optional chaining fails when the optional is nil.|||Forced unwrapping triggers a runtime error when the optional is nil.&&&The operator ? is placed after the optional value to call property, method or subscript|||! is placed after the optional value to call property, method or subscript to force unwrapping of value.\']','[]'),(50,'[\'Convert String to Int Swift\']','[\"In this article, we will discuss how we can convert String to its equivalent integer value in swift. However, we can convert a string that contains integers only. The Integer\'s initializer can be used to convert a string that includes integers, as shown below.\"]','[\'https://www.javatpoint.com/higher-order-functions\', \'https://www.javatpoint.com/swift-optional-chaining\', \'https://www.javatpoint.com/https://www.javatpoint.com/swift-tutorial\', \'https://www.javatpoint.com/higher-order-functions\', \'https://www.javatpoint.com/swift-optional-chaining\', \'https://www.javatpoint.com/higher-order-functions\']','[]','[]','[]','[]','[]','[\'We can convert a string into an integer by converting it first into NSString and use the integerValue property of it as shown below.\']','[]','[\"It returns an optional value which means that it may or may not return a value. We need to use this int value very safely in our code because converting a string that doesn\'t contain an integer will result in nil. However, we can safely unwrap this, as shown below.\"]','[\'let myString = \"654\"\', \'let int = Int(myString)\', \'let int = Int(myString) ?? 0\', \'let myString = \"654\"\', \'let int = (myString as NSString).integerValue\']','[]','[]','[]'),(51,'[\'Higher-Order Functions\']','[\'As iOS developers, we must aware of Higher-order functions. Using higher-order functions in our code enhances the execution speed of our code and speed up our development skills. A higher-order function can be defined as a function that accepts one or more functions as arguments and returns a function as a result.\']','[\'https://www.javatpoint.com/singleton-class-in-swift\', \'https://www.javatpoint.com/convert-string-to-int-swift\', \'https://www.javatpoint.com/https://www.javatpoint.com/swift-tutorial\', \'https://www.javatpoint.com/singleton-class-in-swift\', \'https://www.javatpoint.com/convert-string-to-int-swift\', \'https://www.javatpoint.com/singleton-class-in-swift\']','[]','[]','[]','[\'forEach function\', \'map\', \'compactMap\', \'flatMap\', \'filter\', \'reduce\', \'Sort(by: ) and sorted(by: )\']','[]','[\'In this article, we will discuss some swift higher-order functions, including forEach, map, CompactMap, flatMap, filter, reduce, sort, and sorted.\', \'It prints the following output on the console.\', \'It prints the following output on the console.\', \'It prints the following output on the console.\', \'The flatMap function is used to convert a 2-D array to a 1-D array. Consider the following example.\', \'It prints the following output on the console.\', \'Consider the following example in which we filter all the even and odd numbers in an array separately.\', \'It prints the following output on the console.\', \'Consider the following example in which we calculate the sum of all elements in an array by setting the initial result to 0.\', \'It prints the following output on the console.\']','[\"The forEach iterates through all elements of an array and doesn\'t return anything to the compiler. Consider the following example in which we use forEach to iterate through an array of integers.\", \"A compactMap iterates the array and returns an updated array that includes only the elements that satisfy the condition written inside the compactMap body. The element that doesn\'t satisfy the condition is excluded from the modified array.\", \'Consider the following example in which we have an array of marks. The compactMap() returns the updated array, including those marks that can be converted to Integer.\', \'As the name suggests, the filter () is used to filter the array based on some particular condition. It iterates through an array and returns a modified array where elements satisfy the condition written inside the filter body.\', \'The reduce () is used to iterate through all array elements and returns the object with a combined value of initial result and current result. Consider the following syntax to use reduce in the code.\', \'The sort (by:) and sorted (by:) functions are used to sort an array of elements based on some particular condition. However, the sorted (by:) returns a new array that contains the sorted elements. Consider the following example.\']','[\'In the first statement, we have used the basic syntax of forEach() to print array integers. In the second statement, we use the shorthand syntax of forEach(). The forEach() works similarly to the for-in loop. However, we cannot use the break and continue statements to exit from the closures in forEach.\', \'The map is used to iterate through all array elements and returns a modified array after performing some operations on each element of it. Consider the following example in which we have an array of names that include first and last names. We use the map function to split the last name from each name and assign it back to names.\']','[\'let marks = [10,20,21,65,32,21]\', \'marks.forEach{(marks) in\', \'debugPrint(marks, terminator:\" \")\', \'debugPrint()\', \'marks.forEach{ debugPrint($0, terminator:\" \")}\', \'var names = [\"John K\", \"David Garner\", \"Mike Smith\", \"Will lee\"]\', \'let firstNames = names.map{(name) -> String in\', \'name.split(separator: \" \").first!.description\', \'debugPrint(firstNames)\', \'let newNames = names.map{$0.split(separator: \" \").first!.description}\', \'debugPrint(newNames)\', \'var marks = [\"ten \", \"10\", \"20\", \"thrty one\"]\', \'intMarks = marks.compactMap{(marks) in\', \'Int(marks)?.description\', \'debugPrint(intMarks)\', \'newMarks = marks.compactMap{Int($0)?.description}\', \'debugPrint(newMarks)\', \'var arrayOfNames = [[\"John\", \"Rockey\", \"David\"],\', \'[\"Smith\",\"Roy\",\"Max\"]]\', \'let names = arrayOfNames.flatMap{name in\', \'name\', \'debugPrint(names)\', \'let arrnames = arrayOfNames.flatMap{$0}\', \'debugPrint(arrnames)\', \'var numbers = [1,2,3,4,5,6,7,8,9,10,11,12]\', \'let evenNumbers = numbers.filter{(num) in\', \'num%2 == 0\', \'debugPrint(evenNumbers)\', \'let oddNumbers = numbers.filter{$0%3 == 0}\', \'debugPrint(oddNumbers)\', \'reduce(,  Result(Result, Int) throws -> Result>)\', \'var numbers = [1,2,3,4,5,6,7,8,9]\', \'let sum = numbers.reduce(0) { (result, num)  in\', \'result + num\', \'debugPrint(sum)\', \'let s = numbers.reduce(0){$0 + $1}\', \'debugPrint(s)\', \'var numbers = [10,12,3,14,52,61,17,82,19]\', \'var nums = numbers\', \'let sortedNumbers = numbers.sorted { (a, b) -> Bool in\', \'a<b\', \'debugPrint(sortedNumbers)\', \'numbers.sort{(a,b) -> Bool in\', \'a<b\', \'debugPrint(numbers)\', \'let sortedNums = numbers.sorted{$0 < $1}\', \'debugPrint(sortedNums)\', \'nums.sort{$0 < $1}\', \'debugPrint(nums)\']','[\'10 20 21 65 32 21\', \'10 20 21 65 32 21\', \'[\"John\", \"David\", \"Mike\", \"Will\"]\', \'[\"John\", \"David\", \"Mike\", \"Will\"]\', \'[\"10\", \"20\"]\', \'[\"10\", \"20\"]\', \'[\"John\", \"Rockey\", \"David\", \"Smith\", \"Roy\", \"Max\"]\', \'[\"John\", \"Rockey\", \"David\", \"Smith\", \"Roy\", \"Max\"]\', \'[2, 4, 6, 8, 10, 12]\', \'[3, 6, 9, 12]\', \'[3, 10, 12, 14, 17, 19, 52, 61, 82]\', \'[3, 10, 12, 14, 17, 19, 52, 61, 82]\', \'[3, 10, 12, 14, 17, 19, 52, 61, 82]\', \'[3, 10, 12, 14, 17, 19, 52, 61, 82]\']','[]','[]'),(52,'[\'Singleton class in swift\']','[\"Singleton is a design pattern that is widely used in iOS development. Most of the developers use this design pattern to develop applications. Singleton\'s design pattern allows us to share our class instance globally within our application. Singleton class is the one that can be instantiated using only once during the lifetime of the application.\"]','[\'https://www.javatpoint.com/swift-inout-parameters\', \'https://www.javatpoint.com/higher-order-functions\', \'https://www.javatpoint.com/https://www.javatpoint.com/ios-development-using-swift\', \'https://www.javatpoint.com/swift-inout-parameters\', \'https://www.javatpoint.com/higher-order-functions\', \'https://www.javatpoint.com/swift-inout-parameters\']','[]','[]','[]','[]','[]','[\"Let\'s consider the following example, which contains a simple class without using the Singleton design pattern.\"]','[\"If we notice, we have already used many of the singleton classes provided as Apple\'s Foundation APIs like UserDefaults.standard, FileManager.default, etc.\", \'The above class has become Singleton if we make its constructor private. However, the singleton class must have a static variable that returns the object of the class.\']','[\"In the above example, the class LocationPermission is not a Singleton class. To use the getPersmission() method of LocationPermission class, we need to instantiate the class every time. Let\'s consider the following example to look into the process of creating the Singleton class.\"]','[\'class LocationPermission{\', \'func getPermission(){\', \'debugPrint(\"Permission granted\")\', \'let location = LocationPermission()\', \'location.getPermission()\', \'class LocationPermission{\', \'static let sharedInstance = LocationPermission()\', \'private init(){\', \'func getPermission(){\', \'debugPrint(\"Permission granted\")\', \'let location = LocationPermission.sharedInstance\', \'location.getPermission()\']','[]','[]','[]'),(53,'[\'Swift Inout Parameters\']','[\"In programming, there are scenarios where we need to change the parameters we passed into a function. However, Swift doesn\'t allow us to change function parameters as function parameters are constant by default. If we try to change function parameters within the body of the function, we will get a compile-time error. It is a kind of security implemented so that we can\'t change the parameters by mistake.\"]','[\'https://www.javatpoint.com/swift-iterate-arrays-and-dictionaries\', \'https://www.javatpoint.com/singleton-class-in-swift\', \'https://www.javatpoint.com/https://www.javatpoint.com/swift-tutorial\', \'https://www.javatpoint.com/swift-iterate-arrays-and-dictionaries\', \'https://www.javatpoint.com/singleton-class-in-swift\', \'https://www.javatpoint.com/swift-iterate-arrays-and-dictionaries\']','[]','[]','[]','[]','[]','[\'The in-out parameters are used as follows.\', \"We also must notice that the inout parameters can\'t have default values, and variadic parameters can\'t be defined as inout.\", \"Let\'s consider the following example, which defines a function swap() used to swap two integers by using a third variable.\", \'It prints the following output on the console. \']','[\'However, if we want a function parameter to be changed inside a function body and we want the changes to persist outside the function scope. We can define the parameters as in-out parameters.\', \"To define a parameter as in-out, swift provides an inout keyword before the parameter\'s type. The in-out parameter has the value changed inside the function and returned to replace the original value.\", \'This is called call by value or copy-in-copy-out. When the computed property is passed as an in-out parameter, its getter method is called at the time of function call, and its setter method is called at the time of function return.\', \'The above example shows that the original values of two integer variables, a and b, are modified by the swap(_:_:) function, even though they were originally defined outside of the function.\']','[\"However, we can\'t define a constant or literal value as an in-out parameter since constant and literal values can\'t be modified. When we pass a variable as an inout parameter, we use an ampersand (&) before variable names to indicate that the variables are being passed as inout parameters in the function.\"]','[\'func swap(_ a:inout Int, _ b:inout Int){\', \'let temp = a\', \'a = b\', \'b = temp\', \'var a = 10\', \'var b = 20\', \'debugPrint(\"a = \\(a) b = \\(b)\")\', \'swap(&a, &b)\', \'debugPrint(\"a = \\(a) b = \\(b)\")\']','[\'\"a = 10 b = 20\"\', \'\"a = 20 b = 10\"\']','[]','[\"|||When the function gets called, the argument value is copied.|||The copy is modified inside the function body.|||When the function returns, the copy\'s value is assigned to the original argument.|||\"]'),(54,'[\'Swift Iterate Arrays and Dictionaries\']','[\'In programming, we often need to loop over the arrays to perform operations on an individual item of the arrays and dictionaries. However, Swift provides various ways to loop over the collections. We will discuss the ways to iterate collections in swift.\']','[\'https://www.javatpoint.com/swift-random-number\', \'https://www.javatpoint.com/swift-inout-parameters\', \'https://www.javatpoint.com/https://www.javatpoint.com/swift-tutorial\', \'https://www.javatpoint.com/swift-random-number\', \'https://www.javatpoint.com/swift-inout-parameters\', \'https://www.javatpoint.com/swift-random-number\']','[]','[]','[]','[]','[]','[\"First, let\'s create a dictionary which we will iterate in this example.\", \"Let\'s use the for-in loop to iterate over the employee dictionary.\", \'It will print all the keys and values of the dictionary. However, we can also iterate over the reverse of the dictionary like an array.\', \'It prints the values along with their index in the dictionary on the console.\']','[\'It will print the keys and values of the dictionary in reverse order. We can also use enumerated() to get the keys, value relative to their dictionary positions.\', \'We can also use the higher-order function like forEach() to iterate over any collection. Using forEach() is similar to the for-in loop, as shown below.\']','[\"However, we cannot use jump statements like break and continue using the forEach() method. We can perform various stuff using the forEach() method. Let\'s consider the following example, which prints the square of the first 100 numbers on the console.\"]','[\'var employee = [\"name\":\"John\",\"Id\":\"1\",\"age\":\"20\"]\', \'for emp in employee{\', \'debugPrint(emp.value)\', \'debugPrint(emp.key)\', \'for emp in employee.reversed(){\', \'debugPrint(emp.value)\', \'debugPrint(emp.key)\', \'for (index,emp) in employee.enumerated(){\', \'debugPrint(emp.value)\', \'debugPrint(index)\', \'var nums = [1,2,3,12,3,43,4]\', \'nums.forEach{\', \'debugPrint($0)\', \'func calculateSquare(_ number:Int){\', \'print(number * number)\', \'(1...100).forEach(calculateSquare)\']','[]','[]','[]'),(55,'[\'Swift Random Number\']','[\'In-app development, we often need to generate random numbers to provide randomness to the user. However, Swift 4.2 introduced a new random API that is native to swift. In this article, we will discuss the ways to generate random numbers are. In swift, we can use the random () method for any numeric type to develop the random number.\']','[\'https://www.javatpoint.com/swift-timer\', \'https://www.javatpoint.com/swift-iterate-arrays-and-dictionaries\', \'https://www.javatpoint.com/https://www.javatpoint.com/swift-tutorial\', \'https://www.javatpoint.com/swift-timer\', \'https://www.javatpoint.com/swift-iterate-arrays-and-dictionaries\', \'https://www.javatpoint.com/swift-timer\']','[]','[]','[]','[]','[]','[\"Let\'s generate a random number within a given range, inclusive of both sides.\", \'We can also generate Random numbers of type Int, Double, and CGFloat.\', \'We can also use the random() method for Boolean values as well.\', \'Swift also provides shuffle() and shuffled() methods to provide randomness in arrays as shown below.\', \'It will print any random element from the nums array on the console.\']','[\'It prints the shuffled number arrays on the console. However, we can also use the randomElement() method for arrays to get the random element in the array. If the array is empty, it provides nil.\']','[]','[\'let random = Float.random(in: 1..<4)\', \'let intRandom = Int.random(in: 1..<10)\', \'let doubleRandom = Double.random(in: 1..<10)\', \'let cgFloatRandom = CGFloat.random(in: 1..<10)\', \'let booleanRandom = Bool.random()\', \'var nums = [1,2,3,2,1,3,4]\', \'debugPrint(nums.shuffled())\', \'var nums = [1,2,3,2,1,3,4]\', \'if let num = nums.randomElement(){\', \'debugPrint(num)\']','[]','[]','[]'),(56,'[\'Swift Timer\']','[\'While developing mobile applications, there are scenarios where we need to schedule some tasks to happen in the future. Swift provides a Timer class using which we can perform a task after a certain time interval.\']','[\'https://www.javatpoint.com/escaping-and-non-escaping-closures-in-swift\', \'https://www.javatpoint.com/swift-random-number\', \'https://www.javatpoint.com/https://www.javatpoint.com/swift-tutorial\', \'https://www.javatpoint.com/escaping-and-non-escaping-closures-in-swift\', \'https://www.javatpoint.com/swift-random-number\', \'https://www.javatpoint.com/escaping-and-non-escaping-closures-in-swift\']','[]','[]','[]','[\'Creating non-repeating timer\', \'Ending a timer\']','[]','[\'The following code creates and run a Repeating Timer.\', \'The above code requires an @objc method fireTimer() method defined in the same class.\', \'It prints the following output on the console.\']','[\'In this article, we will discuss how we can use swift Timers to schedule the tasks. Also, we will discuss how we can use Repeating and Non-Repeating Timers.\', \'Here, we have set the timer to be executed every 1 second. Therefore, the fireTimer() method will be called every 1 second. However, Swift allows us to define closures while creating a repeating timer, as shown below.\', \'Both of the initializers are used to return the timer that is created. However, we can store the returned value in a property so that we can invalidate it later.\', \'The non-repeating timers are created if we want to run the code only once. For this purpose, we need to change the repeats attribute to false while creating the timer.\', \'We can end an existing timer by calling invalidate () method for the timer object. Consider the following example, which runs a code four times every 1 second and then invalidate the timer.\', \'We have used a closure while creating a timer in the above example. We could have used the method approach here. However, invalidate the timer object in the method as shown below.\']','[]','[\'let timer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(fireTimer), userInfo: nil, repeats: true)\', \'@objc func fireTimer(){\', \'debugPrint(\"Timer fired\")\', \'let timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { (timer) in\', \'debugPrint(\"Timer fired\")\', \'let timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: false) { (timer) in\', \'debugPrint(\"Timer fired\")\', \'var count = 0\', \'let timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { (timer) in\', \'debugPrint(\"Timer fired\")\', \'count = count + 1\', \'if(count == 4){\', \'timer.invalidate()\', \'class TimerExample:NSObject{\', \'var count = 0\', \'let timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(fireTimer), userInfo: nil, repeats: true)\', \'@objc func fireTimer(){\', \'debugPrint(\"Timer Fired\")\', \'count = count + 1\', \'if(count == 4){\', \'timer.invalidate()\', \'}\']','[\'\"Timer fired\"\', \'\"Timer fired\"\', \'\"Timer fired\"\', \'\"Timer fired\"\']','[]','[]'),(57,'[\'Escaping and Non-Escaping Closures in Swift\']','[\'In swift, closures can be defined as the self-contained block of code that can be passed in methods or used in our code. However, we can define two types of closures, i.e., escaping and non-escaping closures. In swift 5, closure parameters are non-escaping by default.\']','[\'https://www.javatpoint.com/#\', \'https://www.javatpoint.com/swift-timer\', \'https://www.javatpoint.com/#\', \'https://www.javatpoint.com/swift-timer\', \'https://www.javatpoint.com/#\']','[]','[]','[]','[\'Non-Escaping Closures\', \'Escaping Closures\', \'1. Storage\', \'Asynchronous Execution\']','[]','[\'In this article, we will discuss escaping and non-escaping closures. We will also discuss why we should use escaping closures in our code.\', \"Let\'s consider the following example in which the function accepts a non-escaping closure as the argument.\", \'Here, we are not escaping the execution of the closure. Therefore, the closure has no existence in the memory once it gets executed.\']','[\'In the above example, we passed the closure in a function that prints the sum of the array being passed as other argument in the same function. Here, the function calculate_Sum performs the closure execution at the end of the body.\', \'Consider the following example in which the calculate_Sum() accepts an escaping closure as the argument preserved in completionHandler, which is a similar closure type variable. Here, the completionHandler is called after the function gets executed.\', \'When we execute closures asynchronously on DispatchQueue, the closure is preserved in the memory by the queue to use in the future. In this case, we cannot determine when the closure will get executed. Consider the following example.\']','[\"Closures can also be executed within the function body; if we require escaping closure, we can mark it as @escaping. Closures can capture and store references to any constants and variables from the context in which they\'re defined. This is known as closing over those constants and variables.\", \'When we pass a closure as an argument to the function, the function executes the closure and returns the compiler. Here, as soon as the closure gets executed and execution ends, the passed closure goes out of the scope, and therefore, it has no more existence in the memory. The non-escaping closures transitions into the following states in their lifecycle span.\', \'Escaping closures are different from non-escaping closures since we can preserve escaping closures to execute them later on. Meanwhile, the function body can execute and returns the compiler back. The scope of the escaping closure exists and has existence in memory as well until it gets executed. We can use the escaping closures according to our requirements. There are the following ways to escape the closure.\', \'One way to escape closure is to preserve the closure in the variable defined outside of the function and execute it later. This approach is used in the scenario where we need to use the function that starts an asynchronous operation and takes closure argument as the completion handler. The function returns after it starts then operation, but the closure argument is preserved to be called later on.\']','[\'func calculate_Sum(_ array:Array, performSum:((Int) -> Void)){\', \'var sum = 0\', \'for i in array{\', \'sum = sum + i\', \'performSum(sum)\', \'func calculation(){\', \'var array = [0,1,2,3,4,5,6,7,8,9]\', \'calculate_Sum(array) { (sum) in\', \'debugPrint(sum)\', \'var complitionHandler: ((Int)->Void)?\', \'var sum = 0\', \'func calculate_Sum(_ array:Array, performSum: @escaping ((Int) -> Void)){\', \'for i in array{\', \'sum = sum + i\', \'complitionHandler = performSum\', \'func calculation(){\', \'sum = 0\', \'var array = [0,1,2,3,4,5,6,7,8,9]\', \'calculate_Sum(array) { (sum) in\', \'debugPrint(sum)\', \'calculation()\', \'complitionHandler!(sum)\', \'func calculate_Sum(_ array:Array, performSum: @escaping ((Int) -> Void)){\', \'var sum = 0\', \'for i in array{\', \'sum = sum + i\', \'DispatchQueue.global().asyncAfter(deadline: .now() + 0.5) {\', \'performSum(sum)\', \'func calculation(){\', \'let array = [0,1,2,3,4,5,6,7,8,9]\', \'calculate_Sum(array) { (sum) in\', \'debugPrint(sum)\', \'calculation()\']','[]','[]','[\'|||Closure gets passed as the function argument in the function call.|||Function body gets executed.|||The closure gets executed along with the function body.|||The function returns the compiler back.|||\']');
/*!40000 ALTER TABLE `javatpoint_swift_data` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-02-01  2:16:30
