,main_headings,sub_headings_h2,sub_headings_h3,links,image_urls,facts,definitions,explanations,codes,outputs,table_data,list_items
0,"['Swift Tutorial', 'Audience', 'Prerequisites']",['Useful Video Courses'],[],"['https://www.tutorialspoint.com/swift/swift_pdf_version.htm', 'https://www.tutorialspoint.com/swift/swift_quick_guide.htm', 'https://www.tutorialspoint.com/swift/swift_useful_resources.htm', 'https://www.tutorialspoint.com/swift/swift_discussion.htm', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/index.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_overview.htm']","['https://www.tutorialspoint.com/swift/images/swift.jpg', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']",[],[],"['Swift 4 is a new programming language developed by Apple Inc for iOS and OS X development. Swift 4 adopts the best of C and Objective-C, without the constraints of C compatibility. Swift 4 uses the same runtime as the existing Obj-C system on Mac OS and iOS, which enables Swift 4 programs to run on many existing iOS 6 and OS X 10.8 platforms.', 'This tutorial is designed for software programmers who would like to learn the basics of Swift 4 programming language from scratch. This tutorial will give you enough understanding on Swift 4 programming language from where you can take yourself to higher levels of expertise.', 'Before proceeding with this tutorial, you should have a basic understanding of Computer Programming terminologies and exposure to any programming language.']",[],[],[],[]
1,['Swift - Overview'],['Useful Video Courses'],[],"['https://www.tutorialspoint.com/swift/index.htm', 'https://www.tutorialspoint.com/swift/swift_environment.htm', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/index.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_environment.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Swift 4 makes use of safe programming patterns.', 'Swift 4 provides modern programming features.', 'Swift 4 provides Objective-C like syntax.', 'Swift 4 is a fantastic way to write iOS and OS X apps.', 'Swift 4 provides seamless access to existing Cocoa frameworks.', 'Swift 4 unifies the procedural and object-oriented portions of the language.']",['Swift 4 does not need a separate library import to support functionalities like input/output or string handling.'],"['Swift 4 is a new programming language developed by Apple Inc for iOS and OS X development. Swift 4 adopts the best of C and Objective-C, without the constraints of C compatibility.', 'Swift 4 uses the same runtime as the existing Obj-C system on Mac OS and iOS, which enables Swift 4 programs to run on many existing iOS 6 and OS X 10.8 platforms.', 'Swift 4 comes with playground feature where Swift 4 programmers can write their code and execute it to see the results immediately.', 'The first public release of Swift was released in 2010. It took Chris Lattner almost 14 years to come up with the first official version, and later, it was supported by many other contributors. Swift 4 has been included in Xcode 6 beta.', 'Swift designers took ideas from various other popular languages such as Objective-C, Rust, Haskell, Ruby, Python, C#, and CLU.']",[],[],[],['Swift 4 makes use of safe programming patterns.|||Swift 4 provides modern programming features.|||Swift 4 provides Objective-C like syntax.|||Swift 4 is a fantastic way to write iOS and OS X apps.|||Swift 4 provides seamless access to existing Cocoa frameworks.|||Swift 4 unifies the procedural and object-oriented portions of the language.|||Swift 4 does not need a separate library import to support functionalities like input/output or string handling.|||']
2,['Swift - Environment'],"['Local Environment Setup', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_overview.htm', 'https://www.tutorialspoint.com/swift/swift_basic_syntax.htm', 'https://idmsa.apple.com/IDMSWebAuth/login?appIdKey=891bd3417a7776362562d2197f89480a8547b108fd934911bcbea0110d07f757&path=%2Fdownload%2Fmore%2F&rv=1', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_overview.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_basic_syntax.htm']","['https://www.tutorialspoint.com/swift/images/software_list.jpg', 'https://www.tutorialspoint.com/swift/images/xcode.jpg', 'https://www.tutorialspoint.com/swift/images/open_xcode.jpg', 'https://www.tutorialspoint.com/swift/images/playground_window.jpg', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['This will list down a number of software available as follows −', 'Following is the code taken from the default Swift 4 Playground Window.']","['When the above program gets loaded, it should display the following result in Playground result area (Right Hand Side).']","['Swift 4 provides a Playground platform for learning purpose and we are going to setup the same. You need xCode software to start your Swift 4 coding in Playground. Once you are comfortable with the concepts of Swift 4, you can use xCode IDE for iOS/OS x application development.', 'To start with, we consider you already have an account at Apple Developer website. Once you are logged in, go to the following link −Download for Apple Developers', 'Now select xCode and download it by clicking on the given link near to disc image. After downloading the dmg file, you can install it by simply double-clicking on it and following the given instructions. Finally, follow the given instructions and drop xCode icon into the Application folder.', 'Now you have xCode installed on your machine. Next, open Xcode from the Application folder and proceed after accepting the terms and conditions. If everything is fine, you will get the following screen −', 'Select Get started with a playground option and enter a name for playground and select iOS as platform. Finally, you will get the Playground window as follows −', 'If you create the same program for OS X program, then it will include import Cocoa andthe program will look like as follows −', 'Congratulations, you have your Swift 4 programming environment ready and you can proceed with your learning vehicle ""Tutorials Point"".']","['\nimport UIKit\nvar str = ""Hello, playground""\n', '\nimport Cocoa\nvar str = ""Hello, playground""\n', '\nHello, playground\n']","['\nHello, playground\n']",[],[]
3,['Swift - Basic Syntax'],"['Import in Swift 4', 'Tokens in Swift 4', 'Comments', 'Semicolons', 'Identifiers', 'Keywords', 'Whitespaces', 'Literals', 'Printing in Swift', 'Useful Video Courses']","['Keywords used in declarations', 'Keywords used in statements', 'Keywords used in expressions and types', 'Keywords used in particular contexts']","['https://www.tutorialspoint.com/swift/swift_environment.htm', 'https://www.tutorialspoint.com/swift/swift_data_types.htm', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_environment.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_data_types.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Single-line comments are written using // at the beginning of the comment.', 'Space on both side of a operator should be equal, for eg.', 'To print anything in swift we have ‘ print ‘ keyword.', 'Print has three different properties.', 'We can give our custom separator and terminators according to our requirement.']","['When we run the above program using an appropriate playground, we will get the following result −', 'Multi-line comments can be nested in Swift 4. Following is a valid comment in Swift 4 −', 'Terminator – the value with which line should end, let’s see a example and syntax of same.']","[""We have already seen a piece of Swift 4 program while setting up the environment. Let's start once again with the following Hello, World! program created for OS X playground, which includes import Cocoa as shown below −"", 'If you create the same program for iOS playground, then it will include import UIKit and the program will look as follows −', 'Let us now see the basic structure of a Swift 4 program, so that it will be easy for you to understand the basic building blocks of the Swift 4 programming language.', 'You can use the import statement to import any Objective-C framework (or C library) directly into your Swift 4 program. For example, the above import cocoa statement makes all Cocoa libraries, APIs, and runtimes that form the development layer for all of OS X, available in Swift 4.', 'Cocoa is implemented in Objective-C, which is a superset of C, so it is easy to mix C and even C++ into your Swift 4 applications.', 'A Swift 4 program consists of various tokens and a token is either a keyword, an identifier, a constant, a string literal, or a symbol. For example, the following Swift 4 statement consists of three tokens −', 'Comments are like helping texts in your Swift 4 program. They are ignored by the compiler. Multi-line comments start with /* and terminate with the characters */ as shown below −', 'Swift 4 does not require you to type a semicolon (;) after each statement in your code, though it’s optional; and if you use a semicolon, then the compiler does not complain about it.', 'However, if you are using multiple statements in the same line, then it is required to use a semicolon as a delimiter, otherwise the compiler will raise a syntax error. You can write the above Hello, World! program as follows −', 'A Swift 4 identifier is a name used to identify a variable, function, or any other userdefined item. An identifier starts with an alphabet A to Z or a to z or an underscore _ followed by zero or more letters, underscores, and digits (0 to 9).', 'Swift 4 does not allow special characters such as @, $, and % within identifiers. Swift 4 is a case sensitive programming language. Thus, Manpower and manpower are two different identifiers in Swift 4. Here are some examples of acceptable identifiers −', 'To use a reserved word as an identifier, you will need to put a backtick (`) before and after it. For example, class is not a valid identifier, but `class` is valid.', ""The following keywords are reserved in Swift 4. These reserved words may not be used as constants or variables or any other identifier names, unless they're escaped with backticks −"", 'A line containing only whitespace, possibly with a comment, is known as a blank line, and a Swift 4 compiler totally ignores it.', 'Whitespace is the term used in Swift 4 to describe blanks, tabs, newline characters, and comments. Whitespaces separate one part of a statement from another and enable the compiler to identify where one element in a statement, such as int, ends and the next element begins. Therefore, in the following statement −', 'There must be at least one whitespace character (usually a space) between var and age for the compiler to be able to distinguish them. On the other hand, in the following statement −', 'No whitespace characters are necessary between fruit and =, or between = and apples, although you are free to include some for better readability.', 'A literal is the source code representation of a value of an integer, floating-point number, or string type. The following are examples of literals −', 'In the above code first print statement adds \\n , newline Feed as terminator by default, where as in second print statement we’ve given "" End "" as terminator, hence it’ll print ""End "" instead of \\n.']","['\n/* My first program in Swift 4 */\nvar myString = ""Hello, World!""\n\nprint(myString)\n', '\nimport UIKit\nvar myString = ""Hello, World!""\nprint(myString)\n', '\nHello, World!\n', '\nprint(""test!"")\nThe individual tokens are:\nprint(""test!"")\n', '\n/* My first program in Swift 4 */\n', '\n/* My first program in Swift 4 is Hello, World!\n/* Where as second program is Hello, Swift 4! */ */\n', '\n// My first program in Swift 4\n', '\n/* My first program in Swift 4 */\nvar myString = ""Hello, World!""; print(myString)\n', '\nAzad        zara   abc   move_name   a_123\nmyname50    _temp  j     a23b9       retVal\n', '\nvar age\n', '\nint fruit = apples + oranges   //get the total fruits\n', '\nint fruit = apples +oranges    //is a wrong statement\nint fruit = apples + oranges   //is a Correct statement\n', '\n92               // Integer literal\n4.24159          // Floating-point literal\n""Hello, World!""  // String literal\n', '\nprint(""Items to print"", separator: ""Value "" , terminator: ""Value"")\n// E.g. of print statement.\n\nprint(""Value one"")\n// prints ""Value one \\n"" Adds, \\n as terminator and "" "" as separator by\ndefault.\n\nprint(""Value one"",""Value two"", separator: "" Next Value"" , terminator: "" End"")\n//prints ""Value one Next Value Value two End""\n']","['\nHello, World!\n', '\nprint(""test!"")\nThe individual tokens are:\nprint(""test!"")\n', '\n/* My first program in Swift 4 */\n', '\n/* My first program in Swift 4 is Hello, World!\n/* Where as second program is Hello, Swift 4! */ */\n', '\n// My first program in Swift 4\n', '\nAzad        zara   abc   move_name   a_123\nmyname50    _temp  j     a23b9       retVal\n', '\nvar age\n', '\nint fruit = apples + oranges   //get the total fruits\n', '\nint fruit = apples +oranges    //is a wrong statement\nint fruit = apples + oranges   //is a Correct statement\n', '\n92               // Integer literal\n4.24159          // Floating-point literal\n""Hello, World!""  // String literal\n', '\nprint(""Items to print"", separator: ""Value "" , terminator: ""Value"")\n// E.g. of print statement.\n\nprint(""Value one"")\n// prints ""Value one \\n"" Adds, \\n as terminator and "" "" as separator by\ndefault.\n\nprint(""Value one"",""Value two"", separator: "" Next Value"" , terminator: "" End"")\n//prints ""Value one Next Value Value two End""\n']","['Class|||deinit|||Enum|||extension&&&Func|||import|||Init|||internal&&&Let|||operator|||private|||protocol&&&public|||static|||struct|||subscript&&&typealias|||var||||||', 'break|||case|||continue|||default&&&do|||else|||fallthrough|||for&&&if|||in|||return|||switch&&&where|||while||||||', 'as|||dynamicType|||false|||is&&&nil|||self|||Self|||super&&&true|||_COLUMN_|||_FILE_|||_FUNCTION_&&&_LINE_|||||||||', 'associativity|||convenience|||dynamic|||didSet&&&final|||get|||infix|||inout&&&lazy|||left|||mutating|||none&&&nonmutating|||optional|||override|||postfix&&&precedence|||prefix|||Protocol|||required&&&right|||set|||Type|||unowned&&&weak|||willSet||||||']",[]
4,['Swift - Data Types'],"['Built-in Data Types', 'Bound Values', 'Type Aliases', 'Type Safety', 'Type Inference', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_basic_syntax.htm', 'https://www.tutorialspoint.com/swift/swift_variables.htm', 'http://tpcg.io/vSbVmA', 'http://tpcg.io/jFXibe', 'http://tpcg.io/c8ggtx', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_basic_syntax.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_variables.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Bool − This represents a Boolean value which is either true or false.', 'Character − This is a single-character string literal. For example, ""C""', 'Optional − This represents a variable that can hold either a value or no value.', 'Tuples − This is used to group multiple values in single Compound Value.', 'We have listed here a few important points related to Integer types −', 'On a 32-bit platform, Int is the same size as Int32.', 'On a 64-bit platform, Int is the same size as Int64.', 'On a 32-bit platform, UInt is the same size as UInt32.', 'On a 64-bit platform, UInt is the same size as UInt64.', 'When we run the above program using playground, we get the following result.', 'When we run the above program using playground, we get the following result −']","['String − This is an ordered collection of characters. For example, ""Hello, World!""', 'Int8, Int16, Int32, Int64 can be used to represent 8 Bit, 16 Bit, 32 Bit, and 64 Bit forms of signed integer.', 'UInt8, UInt16, UInt32, and UInt64 can be used to represent 8 Bit, 16 Bit, 32 Bit and 64 Bit forms of unsigned integer.', 'For example, the following line instructs the compiler that Feet is another name for Int −', 'Now, the following declaration is perfectly legal and creates an integer variable called distance −', 'As Swift 4 is type-safe, it performs type-checks when compiling your code and flags any mismatched types as errors.', 'When we compile the above program, it produces the following compile time error.']","['While doing programming in any programming language, you need to use different types of variables to store information. Variables are nothing but reserved memory locations to store values. This means that when you create a variable, you reserve some space in memory.', 'You may like to store information of various data types like string, character, wide character, integer, floating point, Boolean, etc. Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory.', 'Swift 4 offers the programmer a rich assortment of built-in as well as user-defined data types. The following types of basic data types are most frequently when declaring variables −', 'Int or UInt − This is used for whole numbers. More specifically, you can use Int32, Int64 to define 32 or 64 bit signed integer, whereas UInt32 or UInt64 to define 32 or 64 bit unsigned integer variables. For example, 42 and -23.', 'Float − This is used to represent a 32-bit floating-point number and numbers with smaller decimal points. For example, 3.14159, 0.1, and -273.158.', 'Double − This is used to represent a 64-bit floating-point number and used when floating-point values must be very large. For example, 3.14159, 0.1, and -273.158.', 'The following table shows the variable type, how much memory it takes to store the value in memory, and what is the maximum and minimum value which can be stored in such type of variables.', 'You can create a new name for an existing type using typealias. Here is the simple syntax to define a new type using typealias −', ""Swift 4 is a type-safe language which means if a part of your code expects a String, you can't pass it an Int by mistake."", 'Type inference enables a compiler to deduce the type of a particular expression automatically when it compiles your code, simply by examining the values you provide. Swift 4 uses type inference to work out the appropriate type as follows.']","['\ntypealias newname = type\n', '\ntypealias Feet = Int\n', '\ntypealias Feet = Int\nvar distance: Feet = 100\nprint(distance)\n', '\n100\n', '\nvar varA = 42\nvarA = ""This is hello""\nprint(varA)\n', '\nmain.swift:2:8: error: cannot assign value of type \'String\' to type \'Int\'\nvarA = ""This is hello""\n', '\n// varA is inferred to be of type Int\nvar varA = 42\nprint(varA)\n\n// varB is inferred to be of type Double\nvar varB = 3.14159\nprint(varB)\n\n// varC is also inferred to be of type Double\nvar varC = 3 + 0.14159\nprint(varC)\n', '\n42\n3.14159\n3.14159\n']","['\ntypealias newname = type\n', '\ntypealias Feet = Int\n', '\n100\n', '\nmain.swift:2:8: error: cannot assign value of type \'String\' to type \'Int\'\nvarA = ""This is hello""\n', '\n42\n3.14159\n3.14159\n']",['Type|||Typical Bit Width|||Typical Range&&&Int8|||1byte|||-127 to 127&&&UInt8|||1byte|||0 to 255&&&Int32|||4bytes|||-2147483648 to 2147483647&&&UInt32|||4bytes|||0 to 4294967295&&&Int64|||8bytes|||-9223372036854775808 to 9223372036854775807&&&UInt64|||8bytes|||0 to 18446744073709551615&&&Float|||4bytes|||1.2E-38 to 3.4E+38 (~6 digits)&&&Double|||8bytes|||2.3E-308 to 1.7E+308 (~15 digits)'],"['Int or UInt − This is used for whole numbers. More specifically, you can use Int32, Int64 to define 32 or 64 bit signed integer, whereas UInt32 or UInt64 to define 32 or 64 bit unsigned integer variables. For example, 42 and -23.|||Float − This is used to represent a 32-bit floating-point number and numbers with smaller decimal points. For example, 3.14159, 0.1, and -273.158.|||Double − This is used to represent a 64-bit floating-point number and used when floating-point values must be very large. For example, 3.14159, 0.1, and -273.158.|||Bool − This represents a Boolean value which is either true or false.|||String − This is an ordered collection of characters. For example, ""Hello, World!""|||Character − This is a single-character string literal. For example, ""C""|||Optional − This represents a variable that can hold either a value or no value.|||Tuples − This is used to group multiple values in single Compound Value.|||On a 32-bit platform, Int is the same size as Int32.|||On a 64-bit platform, Int is the same size as Int64.|||On a 32-bit platform, UInt is the same size as UInt32.|||On a 64-bit platform, UInt is the same size as UInt64.|||Int8, Int16, Int32, Int64 can be used to represent 8 Bit, 16 Bit, 32 Bit, and 64 Bit forms of signed integer.|||UInt8, UInt16, UInt32, and UInt64 can be used to represent 8 Bit, 16 Bit, 32 Bit and 64 Bit forms of unsigned integer.|||']"
5,['Swift - Variables'],"['Variable Declaration', 'Type Annotations', 'Naming Variables', 'Printing Variables', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_data_types.htm', 'https://www.tutorialspoint.com/swift/swift_optionals.htm', 'http://tpcg.io/g00yjy', 'http://tpcg.io/qO0hsg', 'http://tpcg.io/G7jThR', 'http://tpcg.io/nzhtrM', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_data_types.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_optionals.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Swift 4 supports the following basic types of variables −', 'Bool − This represents a Boolean value which is either true or false.', 'Character − This is a single-character string literal. For example, ""C""', 'The following example shows how to declare a variable in Swift 4 −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result.', 'When we run the above program using playground, we get the following result.']","['String − This is an ordered collection of characters. For example, ""Hello, World!""', 'The following section will cover how to declare and use various types of variables in Swift 4 programming.']","[""A variable provides us with named storage that our programs can manipulate. Each variable in Swift 4 has a specific type, which determines the size and layout of the variable's memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable."", 'Int or UInt − This is used for whole numbers. More specifically, you can use Int32, Int64 to define 32 or 64 bit signed integer, whereas UInt32 or UInt64 to define 32 or 64 bit unsigned integer variables. For example, 42 and -23.', 'Float − This is used to represent a 32-bit floating-point number. It is used to hold numbers with smaller decimal points. For example, 3.14159, 0.1, and -273.158.', 'Double − This is used to represent a 64-bit floating-point number and used when floating-point values must be very large. For example 3.14159, 0.1, and -273.158.', 'Swift 4 also allows to define various other types of variables, which we will cover in subsequent chapters, such as Optional, Array, Dictionaries, Structures, and Classes.', 'A variable declaration tells the compiler where and how much to create the storage for the variable. Before you use variables, you must declare them using var keyword as follows −', 'You can provide a type annotation when you declare a variable, to be clear about the kind of values the variable can store. Here is the syntax −', 'The following example shows how to declare a variable in Swift 4 using Annotation. Here it is important to note that if we are not using type annotation, then it becomes mandatory to provide an initial value for the variable, otherwise we can just declare our variable using type annotation.', 'The name of a variable can be composed of letters, digits, and the underscore character. It must begin with either a letter or an underscore. Upper and lowercase letters are distinct because Swift 4 is a case-sensitive programming language.', 'You can use simple or Unicode characters to name your variables. The following examples shows how you can name the variables −', 'You can print the current value of a constant or variable with the print function. You can interpolate a variable value by wrapping the name in parentheses and escape it with a backslash before the opening parenthesis: Following are valid examples −']","['\nvar variableName = <initial value>\n', '\nvar varA = 42\nprint(varA)\n', '\n42\n', '\nvar variableName:<data type> = <optional initial value>\n', '\nvar varA = 42\nprint(varA)\n\nvar varB:Float\n\nvarB = 3.14159\nprint(varB)\n', '\n42\n3.1415901184082\n', '\nvar _var = ""Hello, Swift 4!""\nprint(_var)\n\nvar 你好 = ""你好世界""\nprint(你好)\n', '\nHello, Swift 4!\n你好世界\n', '\nvar varA = ""Godzilla""\nvar varB = 1000.00\n\nprint(""Value of \\(varA) is more than \\(varB) millions"")\n', '\nValue of Godzilla is more than 1000.0 millions\n']","['\nvar variableName = <initial value>\n', '\n42\n', '\nvar variableName:<data type> = <optional initial value>\n', '\n42\n3.1415901184082\n', '\nHello, Swift 4!\n你好世界\n', '\nValue of Godzilla is more than 1000.0 millions\n']",[],"['Int or UInt − This is used for whole numbers. More specifically, you can use Int32, Int64 to define 32 or 64 bit signed integer, whereas UInt32 or UInt64 to define 32 or 64 bit unsigned integer variables. For example, 42 and -23.|||Float − This is used to represent a 32-bit floating-point number. It is used to hold numbers with smaller decimal points. For example, 3.14159, 0.1, and -273.158.|||Double − This is used to represent a 64-bit floating-point number and used when floating-point values must be very large. For example 3.14159, 0.1, and -273.158.|||Bool − This represents a Boolean value which is either true or false.|||String − This is an ordered collection of characters. For example, ""Hello, World!""|||Character − This is a single-character string literal. For example, ""C""|||']"
6,['Swift - Optionals'],"['Forced Unwrapping', 'Automatic Unwrapping', 'Optional Binding', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_variables.htm', 'https://www.tutorialspoint.com/swift/swift_tuples.htm', 'http://tpcg.io/AAyulu', 'http://tpcg.io/dRXJwb', 'http://tpcg.io/aq2hql', 'http://tpcg.io/qLIL3Z', 'http://tpcg.io/hv4K70', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_variables.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_tuples.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Here’s an optional Integer declaration −', 'Here’s an optional String declaration −', ""Let's take the following example to understand how optionals work in Swift 4 −"", 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', ""Now let's apply unwrapping to get the correct value of the variable −"", 'When we run the above program using playground, we get the following result.', 'When we run the above program using playground, we get the following result −', 'An optional binding for the if statement is as follows −', ""Let's take a simple example to understand the usage of optional binding −"", 'When we run the above program using playground, we get the following result −']","['The above declaration is equivalent to explicitly initializing it to nil which means no value −', 'Optionals are similar to using nil with pointers in Objective-C, but they work for any type, not just classes.']","['Swift 4 also introduces Optionals type, which handles the absence of a value. Optionals say either ""there is a value, and it equals x"" or ""there isn\'t a value at all"".', 'An Optional is a type on its own, actually one of Swift 4’s new super-powered enums. It has two possible values, None and Some(T), where T is an associated value of the correct data type available in Swift 4.', 'If you defined a variable as optional, then to get the value from this variable, you will have to unwrap it. This just means putting an exclamation mark at the end of the variable.', ""You can declare optional variables using exclamation mark instead of a question mark. Such optional variables will unwrap automatically and you do not need to use any further exclamation mark at the end of the variable to get the assigned value. Let's take a simple example −"", 'Use optional binding to find out whether an optional contains a value, and if so, to make that value available as a temporary constant or variable.']","['\nvar perhapsInt: Int?\n', '\nvar perhapsStr: String?\n', '\nvar perhapsStr: String? = nil\n', '\nvar myString:String? = nil\n\nif myString != nil {\n   print(myString)\n} else {\n   print(""myString has nil value"")\n}\n', '\nmyString has nil value\n', '\nvar myString:String?\n\nmyString = ""Hello, Swift 4!""\n\nif myString != nil {\n   print(myString)\n} else {\n   print(""myString has nil value"")\n}\n', '\nOptional(""Hello, Swift 4!"")\n', '\nvar myString:String?\n\nmyString = ""Hello, Swift 4!""\n\nif myString != nil {\n   print( myString! )\n} else {\n   print(""myString has nil value"")\n}\n', '\nHello, Swift 4!\n', '\nvar myString:String!\nmyString = ""Hello, Swift 4!""\n\nif myString != nil {\n   print(myString)\n} else {\n   print(""myString has nil value"")\n}\n', '\nHello, Swift 4!\n', '\nif let constantName = someOptional {\n   statements\n}\n', '\nvar myString:String?\nmyString = ""Hello, Swift 4!""\n\nif let yourString = myString {\n   print(""Your string has - \\(yourString)"")\n} else {\n   print(""Your string does not have a value"")\n}\n', '\nYour string has - Hello, Swift 4!\n']","['\nvar perhapsInt: Int?\n', '\nvar perhapsStr: String?\n', '\nvar perhapsStr: String? = nil\n', '\nmyString has nil value\n', '\nOptional(""Hello, Swift 4!"")\n', '\nHello, Swift 4!\n', '\nHello, Swift 4!\n', '\nYour string has - Hello, Swift 4!\n']",[],[]
7,['Swift - Tuples'],['Useful Video Courses'],[],"['https://www.tutorialspoint.com/swift/swift_optionals.htm', 'https://www.tutorialspoint.com/swift/swift_constants.htm', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_optionals.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_constants.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['The values in a tuple can be of any type, and do not need to be of same type.', 'Here’s the syntax of Tuple declaration −', 'You can access the values of tuple using the index numbers that start from 0.', 'Here’s an example of accessing tuple Values −']","['Swift 4 also introduces Tuples type, which are used to group multiple values in a single compound Value.', 'You can create tuples from as many values as you want and from any number of different data types.', 'You can name the variables of a tuple while declaring , and you can call them using their names', 'By returning different values in a tuple we can make decisions depending on different tuple types.', 'Note − Tuples are useful for temporary values and are not suited for complex data.']","['For example, (""Tutorials Point"", 123) is a tuple with two values, one of string Type, and other is integer type. It is a legal command.', 'let ImplementationError = (501, ""Not implemented"") is an error when something on the server is not implemented, It returns two values. Error Code, and Description.', 'Tuples are helpful in returning multiple values from a function. Like, a web application might return a tuple of type (""String"", Int) to show whether the loading was successful or failed.']","['\nvar TupleName = (Value1, value2,… any number of values)\n', '\nvar error501 = (501, “Not implemented”)\n', '\nprint(“The code is\\(error501.0)”)\nprint(“The definition of error is\\(error501.1)”)\n', '\nvar error501 = (errorCode: 501, description: “Not Implemented”)\nprint(error501.errorCode)   // prints 501.\n']","['\nvar TupleName = (Value1, value2,… any number of values)\n', '\nvar error501 = (501, “Not implemented”)\n', '\nprint(“The code is\\(error501.0)”)\nprint(“The definition of error is\\(error501.1)”)\n', '\nvar error501 = (errorCode: 501, description: “Not Implemented”)\nprint(error501.errorCode)   // prints 501.\n']",[],[]
8,['Swift - Constants'],"['Constants Declaration', 'Type Annotations', 'Naming Constants', 'Printing Constants', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_tuples.htm', 'https://www.tutorialspoint.com/swift/swift_literals.htm', 'http://tpcg.io/w8JCZm', 'http://tpcg.io/oV7D3m', 'http://tpcg.io/b9WKDv', 'http://tpcg.io/2bMHgO', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_tuples.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_literals.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Before you use constants, you must declare them using let keyword as follows −', 'Following is a simple example to show how to declare a constant in Swift 4 −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result.', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']",['You can use simple or Unicode characters to name your variables. Following are valid examples −'],"['Constants refer to fixed values that a program may not alter during its execution. Constants can be of any of the basic data types like an integer constant, a floating constant, a character constant, or a string literal. There are enumeration constants as well.', 'Constants are treated just like regular variables except the fact that their values cannot be modified after their definition.', 'You can provide a type annotation when you declare a constant, to be clear about the kind of values the constant can store. Following is the syntax −', 'The following example shows how to declare a constant in Swift 4 using Annotation. Here it is important to note that it is mandatory to provide an initial value while creating a constant −', 'The name of a constant can be composed of letters, digits, and the underscore character. It must begin with either a letter or an underscore. Upper and lowercase letters are distinct because Swift 4 is a case-sensitive programming language.', 'You can print the current value of a constant or variable using print function. You can interpolate a variable value by wrapping the name in parentheses and escape it with a backslash before the opening parenthesis: Following are valid examples −']","['\nlet constantName = <initial value>\n', '\nlet constA = 42\nprint(constA)\n', '\n42\n', '\nvar constantName:<data type> = <optional initial value>\n', '\nlet constA = 42\nprint(constA)\n\nlet constB:Float = 3.14159\nprint(constB)\n', '\n42\n3.1415901184082\n', '\nlet _const = ""Hello, Swift 4!""\nprint(_const)\n\nlet 你好 = ""你好世界""\nprint(你好)\n', '\nHello, Swift 4!\n你好世界\n', '\nlet constA = ""Godzilla""\nlet constB = 1000.00\n\nprint(""Value of \\(constA) is more than \\(constB) millions"")\n', '\nValue of Godzilla is more than 1000.0 millions\n']","['\nlet constantName = <initial value>\n', '\n42\n', '\nvar constantName:<data type> = <optional initial value>\n', '\n42\n3.1415901184082\n', '\nHello, Swift 4!\n你好世界\n', '\nValue of Godzilla is more than 1000.0 millions\n']",[],[]
9,['Swift - Literals'],"['Integer Literals', 'Floating-point Literals', 'String Literals', 'Boolean Literals', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_constants.htm', 'https://www.tutorialspoint.com/swift/swift_operators.htm', 'http://tpcg.io/Po5ogy', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_constants.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_operators.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Here are some examples of integer literals −', 'Here are some examples of floating-point literals −', 'The following example shows how to use a few string literals −', 'When we run the above program using playground, we get the following result −', 'A value of false representing false.', 'A value of nil representing no value.']","['A string literal is a sequence of characters surrounded by double quotes, with the following form −', 'There are three Boolean literals and they are part of standard Swift 4 keywords −']","['A literal is the source code representation of a value of an integer, floating-point number, or string type. The following are examples of literals −', 'An integer literal can be a decimal, binary, octal, or hexadecimal constant. Binary literals begin with 0b, octal literals begin with 0o, and hexadecimal literals begin with 0x and nothing for decimal.', 'A floating-point literal has an integer part, a decimal point, a fractional part, and an exponent part. You can represent floating point literals either in decimal form or hexadecimal form.', 'Decimal floating-point literals consist of a sequence of decimal digits followed by either a decimal fraction, a decimal exponent, or both.', 'Hexadecimal floating-point literals consist of a 0x prefix, followed by an optional hexadecimal fraction, followed by a hexadecimal exponent.', 'String literals cannot contain an unescaped double quote (""), an unescaped backslash (\\), a carriage return, or a line feed. Special characters can be included in string literals using the following escape sequences −']","['\n42                // Integer literal\n3.14159           // Floating-point literal\n""Hello, world!""   // String literal\n', '\nlet decimalInteger = 17         // 17 in decimal notation\nlet binaryInteger = 0b10001     // 17 in binary notation\nlet octalInteger = 0o21         // 17 in octal notation\nlet hexadecimalInteger = 0x11   // 17 in hexadecimal notation\n', '\nlet decimalDouble = 12.1875\nlet exponentDouble = 1.21875e1\nlet hexadecimalDouble = 0xC.3p0\n', '\n""characters""\n', '\nlet stringL = ""Hello\\tWorld\\n\\nHello\\\'Swift 4\\\'""\nprint(stringL)\n', ""\nHello World\n\nHello'Swift 4'\n""]","['\n42                // Integer literal\n3.14159           // Floating-point literal\n""Hello, world!""   // String literal\n', '\nlet decimalInteger = 17         // 17 in decimal notation\nlet binaryInteger = 0b10001     // 17 in binary notation\nlet octalInteger = 0o21         // 17 in octal notation\nlet hexadecimalInteger = 0x11   // 17 in hexadecimal notation\n', '\nlet decimalDouble = 12.1875\nlet exponentDouble = 1.21875e1\nlet hexadecimalDouble = 0xC.3p0\n', '\n""characters""\n', ""\nHello World\n\nHello'Swift 4'\n""]","['Escape sequence|||Meaning&&&\\0|||Null Character&&&\\\\|||\\character&&&\\b|||Backspace&&&\\f|||Form feed&&&\\n|||Newline&&&\\r|||Carriage return&&&\\t|||Horizontal tab&&&\\v|||Vertical tab&&&\\\'|||Single Quote&&&\\""|||Double Quote&&&\\000|||Octal number of one to three digits&&&\\xhh...|||Hexadecimal number of one or more digits']",['A value of true representing true.|||A value of false representing false.|||A value of nil representing no value.|||']
10,['Swift - Operators'],"['Arithmetic Operators', 'Comparison Operators', 'Logical Operators', 'Bitwise Operators', 'Assignment Operators', 'Range Operators', 'Misc Operators', 'Operators Precedence', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_literals.htm', 'https://www.tutorialspoint.com/swift/swift_decision_making.htm', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_literals.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_decision_making.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['SSwift 4 supports the following assignment operators −', 'a… , defines a range that runs from a to end of elements', '…a , defines a range starting from start to a']","['This tutorial will explain the arithmetic, relational, logical, bitwise, assignment and other operators one by one.', 'Bitwise operators work on bits and perform bit by bit operation. The truth tables for &, |, and ^ are as follows −', 'Swift 4 supports a few other important operators including range and ? : which are explained in the following table.']","['An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulations. Objective-C is rich in built-in operators and provides the following types of operators −', 'The following table shows all the arithmetic operators supported by Swift 4 language. Assume variable A holds 10 and variable B holds 20, then −', 'The following table shows all the relational operators supported by Swift 4 language. Assume variable A holds 10 and variable B holds 20, then −', 'The following table shows all the logical operators supported by Swift 4 language. Assume variable A holds 1 and variable B holds 0, then −', 'Bitwise operators supported by Swift 4 language are listed in the following table. Assume variable A holds 60 and variable B holds 13, then 7−', 'Swift 4 includes two range operators, which are shortcuts for expressing a range of values. The following table explains these two operators.', 'Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator.', 'For example, x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7.', 'Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.']","['\nAssume A = 60; and B = 13;\n\nIn binary format, they will be as follows:\n\nA = 0011 1100\n\nB = 0000 1101\n\n-----------------\n\nA & B = 0000 1100\n\nA|B = 0011 1101\n\nA^B = 0011 0001\n\n~A = 1100 0011\n']","['\nAssume A = 60; and B = 13;\n\nIn binary format, they will be as follows:\n\nA = 0011 1100\n\nB = 0000 1101\n\n-----------------\n\nA & B = 0000 1100\n\nA|B = 0011 1101\n\nA^B = 0011 0001\n\n~A = 1100 0011\n']","['Operator|||Description|||Example&&&+|||Adds two operands|||A + B will give 30&&&−|||Subtracts second operand from the first|||A − B will give -10&&&*|||Multiplies both operands|||A * B will give 200&&&/|||Divides numerator by denominator|||B / A will give 2&&&%|||Modulus Operator and remainder of after an integer/float division|||B % A will give 0', 'Operator|||Description|||Example&&&==|||Checks if the values of two operands are equal or not; if yes, then the condition becomes true.|||(A == B) is not true.&&&!=|||Checks if the values of two operands are equal or not; if values are not equal, then the condition becomes true.|||(A != B) is true.&&&>|||Checks if the value of left operand is greater than the value of right operand; if yes, then the condition becomes true.|||(A > B) is not true.&&&<|||Checks if the value of left operand is less than the value of right operand; if yes, then the condition becomes true.|||(A < B) is true.&&&>=|||Checks if the value of left operand is greater than or equal to the value of right operand; if yes, then the condition becomes true.|||(A >= B) is not true.&&&<=|||Checks if the value of left operand is less than or equal to the value of right operand; if yes, then the condition becomes true.|||(A <= B) is true.', 'Operator|||Description|||Example&&&&&|||Called Logical AND operator. If both the operands are non-zero, then the condition becomes true.|||(A && B) is false.&&&|||||Called Logical OR Operator. If any of the two operands is non-zero, then the condition becomes true.|||(A || B) is true.&&&!|||Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true, then the Logical NOT operator will make it false.|||!(A && B) is true.', 'p|||q|||p&q|||p|q|||p^q&&&0|||0|||0|||0|||0&&&0|||1|||0|||1|||1&&&1|||1|||1|||1|||0&&&1|||0|||0|||1|||1', ""Operator|||Description|||Example&&&&|||Binary AND Operator copies a bit to the result, if it exists in both operands.|||(A & B) will give 12, which is 0000 1100&&&||||Binary OR Operator copies a bit, if it exists in either operand.|||(A | B) will give 61, which is 0011 1101&&&^|||Binary XOR Operator copies the bit, if it is set in one operand but not both.|||(A ^ B) will give 49, which is 0011 0001&&&~|||Binary Ones Complement Operator is unary and has the effect of 'flipping' bits.|||(~A ) will give -61, which is 1100 0011 in 2's complement form.&&&<<|||Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.|||(A << 2 will give 240, which is 1111 0000&&&>>|||Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.|||A >> 2 will give 15, which is 0000 1111"", 'Operator|||Description|||Example&&&=|||Simple assignment operator, Assigns values from right side operands to left side operand|||C = A + B will assign value of A + B into C&&&+=|||Add AND assignment operator, It adds right operand to the left operand and assigns the result to left operand|||C += A is equivalent to C = C + A&&&-=|||Subtract AND assignment operator, It subtracts right operand from the left operand and assigns the result to left operand|||C -= A is equivalent to C = C - A&&&*=|||Multiply AND assignment operator, It multiplies right operand with the left operand and assigns the result to left operand|||C *= A is equivalent to C = C * A&&&/=|||Divide AND assignment operator, It divides left operand with the right operand and assigns the result to left operand|||C /= A is equivalent to C = C / A&&&%=|||Modulus AND assignment operator, It takes modulus using two operands and assigns the result to left operand|||C %= A is equivalent to C = C % A&&&<<=|||Left shift AND assignment operator|||C <<= 2 is same as C = C << 2&&&>>=|||Right shift AND assignment operator|||C >>= 2 is same as C = C >> 2&&&&=|||Bitwise AND assignment operator|||C &= 2 is same as C = C & 2&&&^=|||bitwise exclusive OR and assignment operator|||C ^= 2 is same as C = C ^ 2&&&|=|||bitwise inclusive OR and assignment operator|||C |= 2 is same as C = C | 2', 'Operator|||Description|||Example&&&Closed Range|||(a...b) defines a range that runs from a to b, and includes the values a and b.|||1...5 gives 1, 2, 3, 4 and 5&&&Half-Open Range|||(a..< b) defines a range that runs from a to b, but does not include b.|||1..< 5 gives 1, 2, 3, and 4&&&One- sided Range||||||a… , defines a range that runs from a to end of elements|||…a , defines a range starting from start to a|||||||||1… gives 1 , 2,3… end of elements|||…2 gives beginning… to 1,2', 'Operator|||Description|||Example&&&Unary Minus|||The sign of a numeric value can be toggled using a prefixed -|||-3 or -4&&&Unary Plus|||Returns the value it operates on, without any change.|||+6 gives 6&&&Ternary Conditional|||Condition ? X : Y|||If Condition is true ? Then value X : Otherwise value Y', 'Operator|||Description|||Example&&&Primary Expression Operators|||() [] . expr++ expr--|||left-to-right&&&Unary Operators||||||* & + - ! ~ ++expr --expr|||* / %|||+ -|||>> <<|||< > <= >=|||== !=||||||right-to-left&&&Binary Operators||||||&|||^|||||||&&|||||||||||left-to-right&&&Ternary Operator|||?:|||right-to-left&&&Assignment Operators|||= += -= *= /= %= >>= <<= &=^= |=|||right-to-left&&&Comma|||,|||left-to-right']",['Arithmetic Operators|||Comparison Operators|||Logical Operators|||Bitwise Operators|||Assignment Operators|||Range Operators|||Misc Operators|||']
11,['Swift - Decision Making'],"['The ? : Operator', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_operators.htm', 'https://www.tutorialspoint.com/swift/swift_loops.htm', 'https://www.tutorialspoint.com/swift/swift_if_statement.htm', 'https://www.tutorialspoint.com/swift/swift_if_else_statement.htm', 'https://www.tutorialspoint.com/swift/swift_if_else_if_else_statement.htm', 'https://www.tutorialspoint.com/swift/swift_nested_if_statement.htm', 'https://www.tutorialspoint.com/swift/swift_switch_statement.htm', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_operators.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_loops.htm']","['https://www.tutorialspoint.com/swift/images/decision_making.jpg', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']",[],"['Following is the general from of a typical decision making structure found in most of the programming languages −', 'Swift 4 provides the following types of decision making statements. Click the following links to check their detail.', 'An if statement consists of a Boolean expression followed by one or more statements.', 'An if statement can be followed by an optional else statement, which executes when the Boolean expression is false.', 'You can use one if or else if statement inside another if or else if statement(s).', 'A switch statement allows a variable to be tested for equality against a list of values.', 'Where Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.']","['Decision making structures require that the programmer specifies one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.', 'An if statement can be followed by an optional else if...else statement, which is very useful to test various conditions using single if...else if statement.', 'We have covered conditional operator ? : in the previous chapter which can be used to replace if...else statements. It has the following general form −', 'The value of a ? expression is determined like this: Exp1 is evaluated. If it is true, then Exp2 is evaluated and becomes the value of the entire ? expression. If Exp1 is false, then Exp3 is evaluated and its value becomes the value of the expression.']",['\nExp1 ? Exp2 : Exp3;\n'],['\nExp1 ? Exp2 : Exp3;\n'],"['Sr.No|||Statement & Description&&&1|||if statement|||An if statement consists of a Boolean expression followed by one or more statements.&&&2|||if...else statement|||An if statement can be followed by an optional else statement, which executes when the Boolean expression is false.&&&3|||if...else if...else Statement|||An if statement can be followed by an optional else if...else statement, which is very useful to test various conditions using single if...else if statement.&&&4|||nested if statements|||You can use one if or else if statement inside another if or else if statement(s).&&&5|||switch statement|||A switch statement allows a variable to be tested for equality against a list of values.']",[]
12,['Swift - Loops'],"['Loop Control Statements', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_decision_making.htm', 'https://www.tutorialspoint.com/swift/swift_strings.htm', 'https://www.tutorialspoint.com/swift/swift_for_in.htm', 'https://www.tutorialspoint.com/swift/swift_while_loop.htm', 'https://www.tutorialspoint.com/swift/swift_repeat_while_loop.htm', 'https://www.tutorialspoint.com/swift/swift_continue_statement.htm', 'https://www.tutorialspoint.com/swift/swift_break_statement.htm', 'https://www.tutorialspoint.com/swift/swift_fallthrough_statement.htm', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_decision_making.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_strings.htm']","['https://www.tutorialspoint.com/swift/images/loops.jpg', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']",[],"['Programming languages provide various control structures that allow for more complicated execution paths.', 'This loop performs a set of statements for each item in a range, sequence, collection, or progression.', 'Like a while statement, except that it tests the condition at the end of the loop body.', 'Swift 4 supports the following control statements. Click the following links to check their detail.', 'Terminates the loop statement and transfers execution to the statement immediately following the loop.', 'The fallthrough statement simulates the behavior of Swift 4 switch to C-style switch.']","['There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.', 'A loop statement allows us to execute a statement or group of statements multiple times. Following is the general from of a loop statement in most of the programming languages −', 'Swift 4 programming language provides the following kinds of loop to handle looping requirements. Click the following links to check their detail.', 'Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.', 'Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.', 'This statement tells a loop to stop what it is doing and start again at the beginning of the next iteration through the loop.']",[],[],"['Sr.No|||Loop Type & Description&&&1|||for-in|||This loop performs a set of statements for each item in a range, sequence, collection, or progression.&&&2|||while loop|||Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.&&&3|||repeat...while loop|||Like a while statement, except that it tests the condition at the end of the loop body.', 'Sr.No|||Control Statement & Description&&&1|||continue statement|||This statement tells a loop to stop what it is doing and start again at the beginning of the next iteration through the loop.&&&2|||break statement|||Terminates the loop statement and transfers execution to the statement immediately following the loop.&&&3|||fallthrough statement|||The fallthrough statement simulates the behavior of Swift 4 switch to C-style switch.']",[]
13,['Swift - Strings'],"['Create a String', 'Empty String', 'String Constants', 'String Interpolation', 'String Concatenation', 'String Length', 'String Comparison', 'String Iterating', 'Unicode Strings', 'String Functions & Operators', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_loops.htm', 'https://www.tutorialspoint.com/swift/swift_characters.htm', 'http://tpcg.io/uGvvOt', 'http://tpcg.io/YVgngG', 'http://tpcg.io/JGiVHf', 'http://tpcg.io/W1noAH', 'http://tpcg.io/Mw9XXH', 'http://tpcg.io/wPompT', 'http://tpcg.io/hDJxmV', 'http://tpcg.io/6XSjjo', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_loops.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_characters.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['When the above code is compiled and executed, it produces the following result', 'Swift 4 supports a wide range of methods and operators related to Strings −', 'A Boolean value that determines whether a string is empty or not.', 'Function to convert numeric String value into Integer.', 'Global function to count the number of Characters in a string.', 'Property to return a UTF-8 representation of a string.', 'Property to return a UTF-16 representation of a string.', 'Property to return a Unicode Scalar representation of a string.', 'Operator to append a string or character to an existing string.', 'Operator to determine the equality of two strings.', 'To get the value at starting index of string.', 'To get the value at ending index of string.', 'To access the indeces one by one. i.e all the characters of string one by one.', 'to remove a value at a position, or to remove a range of values from string.']","['You can create a String either by using a string literal or creating an instance of a String class as follows −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'You can use the == operator to compare two strings variables or constants. Here is a simple example −', 'When the above code is compiled and executed, it produces the following result −', 'Strings are again a collection of values in swift 4, so we can iterate over string using loops. −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'Function to check whether a given parameter string exists as a prefix of the string or not.', 'Function to check whether a given parameter string exists as a suffix of the string or not.', 'Operator to concatenate two strings, or a string and a character, or two characters.', 'Operator to perform a lexicographical comparison to determine whether one string evaluates as less than another.']","['Strings in Swift 4 are an ordered collection of characters, such as ""Hello, World!"" and they are represented by the Swift 4 data type String, which in turn represents a collection of values of Character type.', 'You can create an empty String either by using an empty string literal or creating an instance of String class as shown below. You can also check whether a string is empty or not using the Boolean property isEmpty.', 'You can specify whether your String can be modified (or mutated) by assigning it to a variable, or it will be constant by assigning it to a constant using let keyword as shown below −', 'String interpolation is a way to construct a new String value from a mix of constants, variables, literals, and expressions by including their values inside a string literal.', 'Each item (variable or constant) that you insert into the string literal is wrapped in a pair of parentheses, prefixed by a backslash. Here is a simple example −', 'You can use the + operator to concatenate two strings or a string and a character, or two characters. Here is a simple example −', 'Swift 4 strings do not have a length property, but you can use the global count() function to count the number of characters in a string. Here is a simple example −', 'You can access a UTF-8 and UTF-16 representation of a String by iterating over its utf8 and utf16 properties as demonstrated in the following example −']","['\n// String creation using String literal\nvar stringA = ""Hello, Swift 4!""\nprint( stringA )\n\n// String creation using String instance\nvar stringB = String(""Hello, Swift 4!"")\nprint( stringB )\n\n//Multiple line string\n\nlet stringC = """"""\nHey this is a\nexample of multiple Line\nstring by tutorialsPoint \n\n""""""\nprint(stringC)\n', '\nHello, Swift 4!\nHello, Swift 4!\nHey this is a\nexample of multiple Line\nstring by tutorialsPoint\n', '\n// Empty string creation using String literal\nvar stringA = """"\n\nif stringA.isEmpty {\n   print( ""stringA is empty"" )\n} else {\n   print( ""stringA is not empty"" )\n}\n\n// Empty string creation using String instance\nlet stringB = String()\n\nif stringB.isEmpty {\n   print( ""stringB is empty"" )\n} else {\n   print( ""stringB is not empty"" )\n}\n', '\nstringA is empty\nstringB is empty\n', '\n// stringA can be modified\nvar stringA = ""Hello, Swift 4!""\nstringA + = ""--Readers--""\nprint( stringA )\n\n// stringB can not be modified\nlet stringB = String(""Hello, Swift 4!"")\nstringB + = ""--Readers--""\nprint( stringB )\n', '\nPlayground execution failed: error: <EXPR>:10:1: error: \'String\' is not\nconvertible to \'@lvalue UInt8\'\nstringB + = ""--Readers--""\n', '\nvar varA = 20\nlet constA = 100\nvar varC:Float = 20.0\n\nvar stringA = ""\\(varA) times \\(constA) is equal to \\(varC * 100)""\nprint( stringA )\n', '\n20 times 100 is equal to 2000.0\n', '\nlet constA = ""Hello,""\nlet constB = ""World!""\n\nvar stringA = constA + constB\nprint( stringA )\n', '\nHello,World!\n', '\nvar varA = ""Hello, Swift 4!""\n\nprint( ""\\(varA), length is \\((varA.count))"" )\n', '\nHello, Swift 4!, length is 15\n', '\nvar varA = ""Hello, Swift 4!""\nvar varB = ""Hello, World!""\n\nif varA == varB {\n   print( ""\\(varA) and \\(varB) are equal"" )\n} else {\n   print( ""\\(varA) and \\(varB) are not equal"" )\n}\n', '\nHello, Swift 4! and Hello, World! are not equal\n', '\nfor chars in ""ThisString"" {\n   print(chars, terminator: "" "")\n}\n', '\nT h i s S t r i n g\n', '\nvar unicodeString = ""Dog???""\n\nprint(""UTF-8 Codes: "")\nfor code in unicodeString.utf8 {\n   print(""\\(code) "")\n}\n\nprint(""\\n"")\n\nprint(""UTF-16 Codes: "")\nfor code in unicodeString.utf16 {\n   print(""\\(code) "")\n}\n', '\nUTF-8 Codes: \n68 \n111 \n103 \n63 \n63 \n63 \n\n\nUTF-16 Codes: \n68 \n111 \n103 \n63 \n63 \n63 \n']","['\nHello, Swift 4!\nHello, Swift 4!\nHey this is a\nexample of multiple Line\nstring by tutorialsPoint\n', '\nstringA is empty\nstringB is empty\n', '\nPlayground execution failed: error: <EXPR>:10:1: error: \'String\' is not\nconvertible to \'@lvalue UInt8\'\nstringB + = ""--Readers--""\n', '\n20 times 100 is equal to 2000.0\n', '\nHello,World!\n', '\nHello, Swift 4!, length is 15\n', '\nHello, Swift 4! and Hello, World! are not equal\n', '\nT h i s S t r i n g\n', '\nUTF-8 Codes: \n68 \n111 \n103 \n63 \n63 \n63 \n\n\nUTF-16 Codes: \n68 \n111 \n103 \n63 \n63 \n63 \n']","['Sr.No|||Functions/Operators & Purpose&&&1|||isEmpty|||A Boolean value that determines whether a string is empty or not.|||&&&2|||hasPrefix(prefix: String)|||Function to check whether a given parameter string exists as a prefix of the string or not.&&&3|||hasSuffix(suffix: String)|||Function to check whether a given parameter string exists as a suffix of the string or not.&&&4|||toInt()|||Function to convert numeric String value into Integer.&&&5|||count()|||Global function to count the number of Characters in a string.&&&6|||utf8|||Property to return a UTF-8 representation of a string.&&&7|||utf16|||Property to return a UTF-16 representation of a string.&&&8|||unicodeScalars|||Property to return a Unicode Scalar representation of a string.&&&9|||+|||Operator to concatenate two strings, or a string and a character, or two characters.&&&10|||+=|||Operator to append a string or character to an existing string.&&&11|||==|||Operator to determine the equality of two strings.&&&12|||<|||Operator to perform a lexicographical comparison to determine whether one string evaluates as less than another.&&&13|||startIndex|||To get the value at starting index of string.&&&14|||endIndex|||To get the value at ending index of string.&&&15|||Indices|||To access the indeces one by one. i.e all the characters of string one by one.&&&16|||insert(""Value"", at: position)|||To insert a value at a position.&&&17||||||remove(at: position)|||removeSubrange(range)|||to remove a value at a position, or to remove a range of values from string.&&&18|||reversed()|||returns the reverse of a string']",[]
14,['Swift - Characters'],"['Empty Character Variables', 'Accessing Characters from Strings', 'Concatenating Strings with Characters', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_strings.htm', 'https://www.tutorialspoint.com/swift/swift_arrays.htm', 'http://tpcg.io/7VJ1Gm', 'http://tpcg.io/mFLEoV', 'http://tpcg.io/hgffuu', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_strings.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_arrays.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']",[],"['When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', ""The following example demonstrates how a Swift 4's Character can be concatenated with Swift 4's String."", 'When the above code is compiled and executed, it produces the following result −']","['A character in Swift is a single character String literal, addressed by the data type Character. Take a look at the following example. It uses two Character constants −', 'If you try to store more than one character in a Character type variable or constant, then Swift 4 will not allow that. Try to type the following example in Swift 4 Playground and you will get an error even before compilation.', 'It is not possible to create an empty Character variable or constant which will have an empty value. The following syntax is not possible −', ""As explained while discussing Swift 4's Strings, String represents a collection of Character values in a specified order. So we can access individual characters from the given String by iterating over that string with a for-in loop −""]","['\nlet char1: Character = ""A""\nlet char2: Character = ""B""\n\nprint(""Value of char1 \\(char1)"")\nprint(""Value of char2 \\(char2)"")\n', '\nValue of char1 A\nValue of char2 B\n', '\n// Following is wrong in Swift 4\nlet char: Character = ""AB""\n\nprint(""Value of char \\(char)"")\n', '\n// Following is wrong in Swift 4\nlet char1: Character = """"\nvar char2: Character = """"\n\nprint(""Value of char1 \\(char1)"")\nprint(""Value of char2 \\(char2)"")\n', '\nfor ch in ""Hello"" {\n   print(ch)\n}\n', '\nH\ne\nl\nl\no\n', '\nvar varA:String = ""Hello ""\nlet varB:Character = ""G""\n\nvarA.append( varB )\n\nprint(""Value of varC = \\(varA)"")\n', '\nValue of varC = Hello G\n']","['\nValue of char1 A\nValue of char2 B\n', '\nH\ne\nl\nl\no\n', '\nValue of varC = Hello G\n']",[],[]
15,['Swift - Arrays'],"['Creating Arrays', 'Accessing Arrays', 'Modifying Arrays', 'Iterating Over an Array', 'Adding Two Arrays', 'The count Property', 'The empty Property', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_characters.htm', 'https://www.tutorialspoint.com/swift/swift_sets.htm', 'http://tpcg.io/XkFMfs', 'http://tpcg.io/wdEQwh', 'http://tpcg.io/rbtBOT', 'http://tpcg.io/hBfnJ8', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_characters.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_sets.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']",[],"['You can create an empty array of a certain type using the following initializer syntax −', 'Here is the syntax to create an array of a given size a* and initialize it with a value −', 'Following is one more example to create an array of three elements and assign three values to that array −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'You can use for-in loop to iterate over the entire set of values in an array as shown in the following example −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'You can use the read-only count property of an array to find out the number of items in an array shown below −', 'When the above code is compiled and executed, it produces the following result −', 'You can use the read-only empty property of an array to find out whether an array isempty or not as shown below −', 'When the above code is compiled and executed, it produces the following result −']","['Swift 4 arrays are used to store ordered lists of values of the same type. Swift 4 puts strict checking which does not allow you to enter a wrong type in an array, even by mistake.', 'If you assign a created array to a variable, then it is always mutable, which means you can change it by adding, removing, or changing its items; but if you assign an array to a constant, then that array is immutable, and its size and contents cannot be changed.', 'You can use the following statement to create an empty array of Int type having 3 elements and the initial value as zero −', 'You can retrieve a value from an array by using subscript syntax, passing the index of the value you want to retrieve within square brackets immediately after the name of the array as follows −', 'Here, the index starts from 0 which means the first element can be accessed using the index as 0, the second element can be accessed using the index as 1 and so on. The following example shows how to create, initialize, and access arrays −', 'You can use append() method or addition assignment operator (+=) to add a new item at the end of an array. Take a look at the following example. Here, initially, we create an empty array and then add new elements into the same array −', 'You can modify an existing element of an Array by assigning a new value at a given index as shown in the following example −', 'You can use enumerate() function which returns the index of an item along with its valueas shown below in the following example −', 'You can use the addition operator (+) to add two arrays of the same type which will yield a new array with a combination of values from the two arrays as follows −']","['\nvar someArray = [SomeType]()\n', '\nvar someArray = [SomeType](count: NumbeOfElements, repeatedValue: InitialValue)\n', '\nvar someInts = [Int](count: 3, repeatedValue: 0)\n', '\nvar someInts:[Int] = [10, 20, 30]\n', '\nvar someVar = someArray[index]\n', '\nvar someInts = [Int](count: 3, repeatedValue: 10)\n\nvar someVar = someInts[0]\nprint( ""Value of first element is \\(someVar)"" )\nprint( ""Value of second element is \\(someInts[1])"" )\nprint( ""Value of third element is \\(someInts[2])"" )\n', '\nValue of first element is 10\nValue of second element is 10\nValue of third element is 10\n', '\nvar someInts = [Int]()\n\nsomeInts.append(20)\nsomeInts.append(30)\nsomeInts += [40]\n\nvar someVar = someInts[0]\n\nprint( ""Value of first element is \\(someVar)"" )\nprint( ""Value of second element is \\(someInts[1])"" )\nprint( ""Value of third element is \\(someInts[2])"" )\n', '\nValue of first element is 20\nValue of second element is 30\nValue of third element is 40\n', '\nvar someInts = [Int]()\n\nsomeInts.append(20)\nsomeInts.append(30)\nsomeInts += [40]\n\n// Modify last element\nsomeInts[2] = 50\n\nvar someVar = someInts[0]\n\nprint( ""Value of first element is \\(someVar)"" )\nprint( ""Value of second element is \\(someInts[1])"" )\nprint( ""Value of third element is \\(someInts[2])"" )\n', '\nValue of first element is 20\nValue of second element is 30\nValue of third element is 50\n', '\nvar someStrs = [String]()\n\nsomeStrs.append(""Apple"")\nsomeStrs.append(""Amazon"")\nsomeStrs += [""Google""]\nfor item in someStrs {\n   print(item)\n}\n', '\nApple\nAmazon\nGoogle\n', '\nvar someStrs = [String]()\n\nsomeStrs.append(""Apple"")\nsomeStrs.append(""Amazon"")\nsomeStrs += [""Google""]\n\nfor (index, item) in someStrs.enumerated() {\n   print(""Value at index = \\(index) is \\(item)"")\n}\n', '\nValue at index = 0 is Apple\nValue at index = 1 is Amazon\nValue at index = 2 is Google\n', '\nvar intsA = [Int](count:2, repeatedValue: 2)\nvar intsB = [Int](count:3, repeatedValue: 1)\n\nvar intsC = intsA + intsB\nfor item in intsC {\n   print(item)\n}\n', '\n2\n2\n1\n1\n1\n', '\nvar intsA = [Int](count:2, repeatedValue: 2)\nvar intsB = [Int](count:3, repeatedValue: 1)\n\nvar intsC = intsA + intsB\n\nprint(""Total items in intsA = \\(intsA.count)"")\nprint(""Total items in intsB = \\(intsB.count)"")\nprint(""Total items in intsC = \\(intsC.count)"")\n', '\nTotal items in intsA = 2\nTotal items in intsB = 3\nTotal items in intsC = 5\n', '\nvar intsA = [Int](count:2, repeatedValue: 2)\nvar intsB = [Int](count:3, repeatedValue: 1)\nvar intsC = [Int]()\n\nprint(""intsA.isEmpty = \\(intsA.isEmpty)"")\nprint(""intsB.isEmpty = \\(intsB.isEmpty)"")\nprint(""intsC.isEmpty = \\(intsC.isEmpty)"")\n', '\nintsA.isEmpty = false\nintsB.isEmpty = false\nintsC.isEmpty = true\n']","['\nvar someArray = [SomeType]()\n', '\nvar someArray = [SomeType](count: NumbeOfElements, repeatedValue: InitialValue)\n', '\nvar someInts = [Int](count: 3, repeatedValue: 0)\n', '\nvar someInts:[Int] = [10, 20, 30]\n', '\nvar someVar = someArray[index]\n', '\nValue of first element is 10\nValue of second element is 10\nValue of third element is 10\n', '\nValue of first element is 20\nValue of second element is 30\nValue of third element is 40\n', '\nValue of first element is 20\nValue of second element is 30\nValue of third element is 50\n', '\nApple\nAmazon\nGoogle\n', '\nValue at index = 0 is Apple\nValue at index = 1 is Amazon\nValue at index = 2 is Google\n', '\n2\n2\n1\n1\n1\n', '\nTotal items in intsA = 2\nTotal items in intsB = 3\nTotal items in intsC = 5\n', '\nintsA.isEmpty = false\nintsB.isEmpty = false\nintsC.isEmpty = true\n']",[],[]
16,['Swift - Sets'],"['Creating Sets', 'Accessing and modifying Sets', 'Iterating over a Set', 'Performing Set Operations', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_arrays.htm', 'https://www.tutorialspoint.com/swift/swift_dictionaries.htm', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_arrays.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_dictionaries.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['You can access or modify a set using its methods and properties −', '""count"" method can be used to show the number of elements in the set.', '""insert"" method can be used to insert values in set.', 'Similarly, isEmpty can be used to check if set is empty.', '""remove"" method can be used to remove value in set.', '""contains"" method can be used to check existence of value in a set.', 'You can iterate over a set using for-in loop −', 'You can perform basic set operations on swift Sets.', 'Following are the methods for performing set operations −']","['Swift 4 sets are used to store distinct values of same types but they don’t have definite ordering as arrays have.', 'All the basic swift values are of hashable type by default and may be used as set values.', 'You can create an empty set of a certain type using the following initializer syntax −']","['You can use sets instead of arrays if ordering of elements is not an issue, or if you want to ensure that there are no duplicate values. (sets allow only distinct values.)', 'A type must be hashable to be stored in a set. A hash value is a Int value that is equal for equal objects. For example, if x == y, then x.hashvalue == y.hashvalue.']","['\nvar someSet = Set<Character>()     //Character can be replaced by data type of set.\n', '\nsomeSet.count        // prints the number of elements\n', '\nsomeSet.insert(""c"")   // adds the element to Set.\n', '\nsomeSet.isEmpty       // returns true or false depending on the set Elements.\n', '\nsomeSet.remove(""c"")     // removes a element , removeAll() can be used to remove all elements\n', '\nsomeSet.contains(""c"")     // to check if set contains this value.\n', '\nfor items in someSet {\n   print(someSet)\n}\n\n//Swift sets are not in an ordered way, to iterate over a set in ordered way use\n\nfor items in someSet.sorted() {\n   print(someSet)\n}  \n', '\nlet evens: Set = [10,12,14,16,18]\nlet odds: Set = [5,7,9,11,13]\nlet primes = [2,3,5,7]\nodds.union(evens).sorted()\n// [5,7,9,10,11,12,13,14,16,18]\nodds.intersection(evens).sorted()\n//[]\nodds.subtracting(primes).sorted()\n//[9, 11, 13]\n']","['\nvar someSet = Set<Character>()     //Character can be replaced by data type of set.\n', '\nsomeSet.count        // prints the number of elements\n', '\nsomeSet.insert(""c"")   // adds the element to Set.\n', '\nsomeSet.isEmpty       // returns true or false depending on the set Elements.\n', '\nsomeSet.remove(""c"")     // removes a element , removeAll() can be used to remove all elements\n', '\nsomeSet.contains(""c"")     // to check if set contains this value.\n', '\nlet evens: Set = [10,12,14,16,18]\nlet odds: Set = [5,7,9,11,13]\nlet primes = [2,3,5,7]\nodds.union(evens).sorted()\n// [5,7,9,10,11,12,13,14,16,18]\nodds.intersection(evens).sorted()\n//[]\nodds.subtracting(primes).sorted()\n//[9, 11, 13]\n']",[],['Intersection|||Union|||subtracting|||']
17,['Swift - Dictionaries'],"['Creating Dictionary', 'Sequence Based Initialization', 'Filtering', 'Dictionary Grouping', 'Accessing Dictionaries', 'Modifying Dictionaries', 'Remove Key-Value Pairs', 'Iterating Over a Dictionary', 'Convert to Arrays', 'The count Property', 'The empty Property', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_sets.htm', 'https://www.tutorialspoint.com/swift/swift_functions.htm', 'http://tpcg.io/0gdWyc', 'http://tpcg.io/scEfn4', 'http://tpcg.io/gPJO3n', 'http://tpcg.io/3koetk', 'http://tpcg.io/K0VW0R', 'http://tpcg.io/jiHzRb', 'http://tpcg.io/Mn7TSg', 'http://tpcg.io/WX2eNz', 'http://tpcg.io/7W7A8i', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_sets.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_functions.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Here is an example to create a dictionary from a set of given values −', 'Swift 4 allows you to create Dictionary from arrays (Key-Value Pairs.)', 'Here is an example to create a dictionary from a set of given values −', 'Swift 4 allows you to filter values from a dictionary.', 'If we run the above code our closeCities Dictionary will be.', 'Swift 4 allows you to create grouping of Dictionary values.']","['You can create an empty dictionary of a certain type using the following initializer syntax −', 'The above lines of code will create a dictionary with Cities as key and Distance as Value −', 'You can use the following simple syntax to group the values of dictionary according to first alphabet.', ""Let's check the following example to create, initialize, and access values from a dictionary −"", 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'When the above code is compiled and executed, it produces the following result −', 'You can use read-only empty property of a dictionary to find out whether a dictionary is empty or not, as shown below −', 'When the above code is compiled and executed, it produces the following result −']","['Swift 4 dictionaries are used to store unordered lists of values of the same type. Swift 4 puts strict checking which does not allow you to enter a wrong type in a dictionary even by mistake.', 'Swift 4 dictionaries use unique identifier known as a key to store a value which later can be referenced and looked up through the same key. Unlike items in an array, items in a dictionary do not have a specified order. You can use a dictionary when you need to look up values based on their identifiers.', 'A dictionary key can be either an integer or a string without a restriction, but it should be unique within a dictionary.', 'If you assign a created dictionary to a variable, then it is always mutable which means you can change it by adding, removing, or changing its items. But if you assign a dictionary to a constant, then that dictionary is immutable, and its size and contents cannot be changed.', 'You can use the following simple syntax to create an empty dictionary whose key will be of Int type and the associated values will be strings −', 'You can use the following simple syntax to create an empty dictionary whose key will be of Int type and the associated values will be strings −', 'You can retrieve a value from a dictionary by using subscript syntax, passing the key of the value you want to retrieve within square brackets immediately after the name of the dictionary as follows −', ""You can use updateValue(forKey:) method to add an existing value to a given key of the dictionary. This method returns an optional value of the dictionary's value type. Here is a simple example −"", 'You can modify an existing element of a dictionary by assigning new value at a given key as shown in the following example −', 'You can use removeValueForKey() method to remove a key-value pair from a dictionary. This method removes the key-value pair if it exists and returns the removed value, or returns nil if no value existed. Here is a simple example −', 'You can also use subscript syntax to remove a key-value pair from a dictionary by assigning a value of nil for that key. Here is a simple example −', 'You can use a for-in loop to iterate over the entire set of key-value pairs in a Dictionary as shown in the following example −', 'You can use enumerate() function which returns the index of the item along with its (key, value) pair as shown below in the example −', 'You can extract a list of key-value pairs from a given dictionary to build separate arrays for both keys and values. Here is an example −', 'You can use the read-only count property of a dictionary to find out the number of items in a dictionary as shown below −']","['\nvar someDict = [KeyType: ValueType]()\n', '\nvar someDict = [Int: String]()\n', '\nvar someDict:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\n', '\nvar cities = [“Delhi”,”Bangalore”,”Hyderabad”]\n', '\nvar Distance = [2000,10, 620]\n', '\nlet cityDistanceDict = Dictionary(uniqueKeysWithValues: zip(cities, Distance))\n', '\nvar closeCities = cityDistanceDict.filter { $0.value < 1000 }\n', '\n[""Bangalore"" : 10 , ""Hyderabad"" : 620]\n', '\nvar cities = [""Delhi"",""Bangalore"",""Hyderabad"",""Dehradun"",""Bihar""]\n', '\nvar GroupedCities = Dictionary(grouping: cities ) { $0.first! }\n', '\n[""D"" :[""Delhi"",""Dehradun""], ""B"" : [""Bengaluru"",""Bihar""], ""H"" : [""Hyderabad""]]\n', '\nvar someVar = someDict[key]\n', '\nvar someDict:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\nvar someVar = someDict[1]\n\nprint( ""Value of key = 1 is \\(someVar)"" )\nprint( ""Value of key = 2 is \\(someDict[2])"" )\nprint( ""Value of key = 3 is \\(someDict[3])"" )\n', '\nValue of key = 1 is Optional(""One"")\nValue of key = 2 is Optional(""Two"")\nValue of key = 3 is Optional(""Three"")\n', '\nvar someDict:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\nvar oldVal = someDict.updateValue(""New value of one"", forKey: 1)\nvar someVar = someDict[1]\n\nprint( ""Old value of key = 1 is \\(oldVal)"" )\nprint( ""Value of key = 1 is \\(someVar)"" )\nprint( ""Value of key = 2 is \\(someDict[2])"" )\nprint( ""Value of key = 3 is \\(someDict[3])"" )\n', '\nOld value of key = 1 is Optional(""One"")\nValue of key = 1 is Optional(""New value of one"")\nValue of key = 2 is Optional(""Two"")\nValue of key = 3 is Optional(""Three"")\n', '\nvar someDict:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\nvar oldVal = someDict[1]\nsomeDict[1] = ""New value of one""\nvar someVar = someDict[1]\n\nprint( ""Old value of key = 1 is \\(oldVal)"" )\nprint( ""Value of key = 1 is \\(someVar)"" )\nprint( ""Value of key = 2 is \\(someDict[2])"" )\nprint( ""Value of key = 3 is \\(someDict[3])"" )\n', '\nOld value of key = 1 is Optional(""One"")\nValue of key = 1 is Optional(""New value of one"")\nValue of key = 2 is Optional(""Two"")\nValue of key = 3 is Optional(""Three"")\n', '\nvar someDict:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\nvar removedValue = someDict.removeValue(forKey: 2)\n\nprint( ""Value of key = 1 is \\(someDict[1])"" )\nprint( ""Value of key = 2 is \\(someDict[2])"" )\nprint( ""Value of key = 3 is \\(someDict[3])"" )\n', '\nValue of key = 1 is Optional(""One"")\nValue of key = 2 is nil\nValue of key = 3 is Optional(""Three"")\n', '\nvar someDict:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\n\nsomeDict[2] = nil\n\nprint( ""Value of key = 1 is \\(someDict[1])"" )\nprint( ""Value of key = 2 is \\(someDict[2])"" )\nprint( ""Value of key = 3 is \\(someDict[3])"" )\n', '\nValue of key = 1 is Optional(""One"")\nValue of key = 2 is nil\nValue of key = 3 is Optional(""Three"")\n', '\nvar someDict:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\n\nfor (index, keyValue) in someDict.enumerated() {\n   print(""Dictionary key \\(index) - Dictionary value \\(keyValue)"")\n}\n', '\nDictionary key 2 - Dictionary value Two\nDictionary key 3 - Dictionary value Three\nDictionary key 1 - Dictionary value One\n', '\nvar someDict:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\nfor (key, value) in someDict.enumerated() {\n   print(""Dictionary key \\(key) - Dictionary value \\(value)"")\n}\n', '\nDictionary key 0 - Dictionary value (key: 2, value: ""Two"")\nDictionary key 1 - Dictionary value (key: 3, value: ""Three"")\nDictionary key 2 - Dictionary value (key: 1, value: ""One"")\n', '\nvar someDict:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\n\nlet dictKeys = [Int](someDict.keys)\nlet dictValues = [String](someDict.values)\n\nprint(""Print Dictionary Keys"")\n\nfor (key) in dictKeys {\n   print(""\\(key)"")\n}\nprint(""Print Dictionary Values"")\n\nfor (value) in dictValues {\n   print(""\\(value)"")\n}\n', '\nPrint Dictionary Keys\n2\n3\n1\nPrint Dictionary Values\nTwo\nThree\nOne\n', '\nvar someDict1:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\nvar someDict2:[Int:String] = [4:""Four"", 5:""Five""]\n\nprint(""Total items in someDict1 = \\(someDict1.count)"")\nprint(""Total items in someDict2 = \\(someDict2.count)"")\n', '\nTotal items in someDict1 = 3\nTotal items in someDict2 = 2\n', '\nvar someDict1:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\nvar someDict2:[Int:String] = [4:""Four"", 5:""Five""]\nvar someDict3:[Int:String] = [Int:String]()\n\nprint(""someDict1 = \\(someDict1.isEmpty)"")\nprint(""someDict2 = \\(someDict2.isEmpty)"")\nprint(""someDict3 = \\(someDict3.isEmpty)"")\n', '\nsomeDict1 = false\nsomeDict2 = false\nsomeDict3 = true\n']","['\nvar someDict = [KeyType: ValueType]()\n', '\nvar someDict = [Int: String]()\n', '\nvar someDict:[Int:String] = [1:""One"", 2:""Two"", 3:""Three""]\n', '\nvar cities = [“Delhi”,”Bangalore”,”Hyderabad”]\n', '\nvar Distance = [2000,10, 620]\n', '\nlet cityDistanceDict = Dictionary(uniqueKeysWithValues: zip(cities, Distance))\n', '\nvar closeCities = cityDistanceDict.filter { $0.value < 1000 }\n', '\n[""Bangalore"" : 10 , ""Hyderabad"" : 620]\n', '\nvar cities = [""Delhi"",""Bangalore"",""Hyderabad"",""Dehradun"",""Bihar""]\n', '\nvar GroupedCities = Dictionary(grouping: cities ) { $0.first! }\n', '\n[""D"" :[""Delhi"",""Dehradun""], ""B"" : [""Bengaluru"",""Bihar""], ""H"" : [""Hyderabad""]]\n', '\nvar someVar = someDict[key]\n', '\nValue of key = 1 is Optional(""One"")\nValue of key = 2 is Optional(""Two"")\nValue of key = 3 is Optional(""Three"")\n', '\nOld value of key = 1 is Optional(""One"")\nValue of key = 1 is Optional(""New value of one"")\nValue of key = 2 is Optional(""Two"")\nValue of key = 3 is Optional(""Three"")\n', '\nOld value of key = 1 is Optional(""One"")\nValue of key = 1 is Optional(""New value of one"")\nValue of key = 2 is Optional(""Two"")\nValue of key = 3 is Optional(""Three"")\n', '\nValue of key = 1 is Optional(""One"")\nValue of key = 2 is nil\nValue of key = 3 is Optional(""Three"")\n', '\nValue of key = 1 is Optional(""One"")\nValue of key = 2 is nil\nValue of key = 3 is Optional(""Three"")\n', '\nDictionary key 2 - Dictionary value Two\nDictionary key 3 - Dictionary value Three\nDictionary key 1 - Dictionary value One\n', '\nDictionary key 0 - Dictionary value (key: 2, value: ""Two"")\nDictionary key 1 - Dictionary value (key: 3, value: ""Three"")\nDictionary key 2 - Dictionary value (key: 1, value: ""One"")\n', '\nPrint Dictionary Keys\n2\n3\n1\nPrint Dictionary Values\nTwo\nThree\nOne\n', '\nTotal items in someDict1 = 3\nTotal items in someDict2 = 2\n', '\nsomeDict1 = false\nsomeDict2 = false\nsomeDict3 = true\n']",[],[]
18,['Swift - Functions'],"['Function Definition', 'Calling a Function', 'Parameters and Return Values', 'Functions without Parameters', 'Functions with Return Values', 'Functions without Return Values', 'Functions with Optional Return Types', 'Functions Local Vs External Parameter Names', 'External Parameter Names', 'Variadic Parameters', 'Constant, Variable and I/O Parameters', 'Function Types & its Usage', 'Using Function Types', 'Function Types as Parameter Types & Return Types', 'Nested Functions', 'Useful Video Courses']","['Syntax', 'Functions with Parameters', 'Syntax', 'Local Parameter Names']","['https://www.tutorialspoint.com/swift/swift_dictionaries.htm', 'https://www.tutorialspoint.com/swift/swift_closures.htm', 'http://tpcg.io/LRdK5a', 'http://tpcg.io/aIm6Wj', 'http://tpcg.io/mOvrdL', 'http://tpcg.io/pot0RK', 'http://tpcg.io/sfuXsE', 'http://tpcg.io/AeI1yi', 'http://tpcg.io/E6SvAs', 'http://tpcg.io/fYWC4G', 'http://tpcg.io/cSpDwh', 'http://tpcg.io/kvKSr6', 'http://tpcg.io/WZ7Trc', 'http://tpcg.io/svjmOF', 'http://tpcg.io/mN0NVs', 'http://tpcg.io/7R2x1q', 'http://tpcg.io/WWsZ2D', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_dictionaries.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_closures.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Function Definition − It provides the actual body of the function.', 'Swift 4 functions contain parameter type and its return types.', 'When we run the above program using playground, we get the following result −', 'When we run above program using playground, we get the following result −', 'When we run above program using playground, we get the following result −', 'We may also have functions without any parameters.', 'Following is an example having a function without a parameter −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run above program using playground, we get following result −', 'Local parameter names are accessed inside the function alone.', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'Here the function is declared as string datatype.', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'We can also pass the function itself as parameter types to another function.', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","[""Function Declaration − tells the compiler about a function's name, return type, and parameters."", ""Functions may also have void data types and such functions won't return anything."", 'The above function is declared as a void function with no arguments and no return values.', 'A nested function provides the facility to call the outer function by invoking the inside function.']","['A function is a set of statements organized together to perform a specific task. A Swift 4 function can be as simple as a simple C function to as complex as an Objective C language function. It allows us to pass local and global parameter values inside the function calls.', 'In Swift 4, a function is defined by the ""func"" keyword. When a function is newly defined, it may take one or several values as input \'parameters\' to the function and it will process the functions in the main body and pass back the values to the functions as output \'return types\'.', 'Every function has a function name, which describes the task that the function performs. To use a function, you ""call"" that function with its name and pass input values (known as arguments) that match the types of the function\'s parameters. Function parameters are also called as \'tuples\'.', ""A function's arguments must always be provided in the same order as the function's parameter list and the return values are followed by →."", ""Take a look at the following code. The student’s name is declared as string datatype declared inside the function 'student' and when the function is called, it will return student’s name."", ""Let us suppose we defined a function called 'display' to Consider for example to display the numbers a function with function name 'display' is initialized first with argument 'no1' which holds integer data type. Then the argument 'no1' is assigned to argument 'a' which hereafter will point to the same data type integer. Now the argument 'a' is returned to the function. Here display() function will hold the integer value and return the integer values when each and every time the function is invoked."", 'Swift 4 provides flexible function parameters and its return values from simple to complex values. Similar to that of C and Objective C, functions in Swift 4 may also take several forms.', 'A function is accessed by passing its parameter values to the body of the function. We can pass single to multiple parameter values as tuples inside the function.', ""Functions are also used to return string, integer, and float data type values as return types. To find out the largest and smallest number in a given array function 'ls' is declared with large and small integer datatypes."", ""An array is initialized to hold integer values. Then the array is processed and each and every value in the array is read and compared for its previous value. When the value is lesser than the previous one it is stored in 'small' argument, otherwise it is stored in 'large' argument and the values are returned by calling the function."", 'Some functions may have arguments declared inside the function without any return values. The following program declares a and b as arguments to the sum() function. inside the function itself the values for arguments a and b are passed by invoking the function call sum() and its values are printed thereby eliminating return values.', ""Swift 4 introduces 'optional' feature to get rid of problems by introducing a safety measure. Consider for example we are declaring function values return type as integer but what will happen when the function returns a string value or either a nil value. In that case compiler will return an error value. 'optional' are introduced to get rid of these problems."", ""Optional functions will take two forms 'value' and a 'nil'. We will mention 'Optionals' with the key reserved character '?' to check whether the tuple is returning a value or a nil value."", ""''Optionals' are used to check 'nil' or garbage values thereby consuming lot of time in debugging and make the code efficient and readable for the user."", ""Here, the func sample argument number is declared as internal variable since it is accessed internally by the function sample(). Here the 'number' is declared as local variable but the reference to the variable is made outside the function with the following statement −"", 'External parameter names allow us to name a function parameters to make their purpose more clear. For example below you can name two function parameters and then call that function as follows −', ""When we want to define function with multiple number of arguments, then we can declare the members as 'variadic' parameters. Parameters can be specified as variadic by (···) after the parameter name."", ""Functions by default consider the parameters as 'constant', whereas the user can declare the arguments to the functions as variables also. We already discussed that 'let' keyword is used to declare constant parameters and variable parameters is defined with 'var' keyword."", ""I/O parameters in Swift 4 provide functionality to retain the parameter values even though its values are modified after the function call. At the beginning of the function parameter definition, 'inout' keyword is declared to retain the member values."", ""It derives the keyword 'inout' since its values are passed 'in' to the function and its values are accessed and modified by its function body and it is returned back 'out' of the function to modify the original argument."", ""Variables are only passed as an argument for in-out parameter since its values alone are modified inside and outside the function. Hence no need to declare strings and literals as in-out parameters. '&' before a variable name refers that we are passing the argument to the in-out parameter."", 'Each and every function follows the specific function by considering the input parameters and outputs the desired result.', ""Here the function is initialized with two arguments no1 and no2 as integer data types and its return type is also declared as 'int'"", 'Functions are first passed with integer, float or string type arguments and then it is passed as constants or variables to the function as mentioned below.', ""Here sum is a function name having 'a' and 'b' integer variables which is now declared as a variable to the function name addition. Hereafter both addition and sum function both have same number of arguments declared as integer datatype and also return integer values as references.""]","['\nfunc funcname(Parameters) -> returntype {\n   Statement1\n   Statement2\n   ---\n   Statement N\n   return parameters\n}\n', '\nfunc student(name: String) -> String {\n   return name\n}\n\nprint(student(name: ""First Program""))\nprint(student(name: ""About Functions""))\n', '\nFirst Program\nAbout Functions\n', '\nfunc display(no1: Int) -> Int {\n   let a = no1\n   return a\n}\n\nprint(display(no1: 100))\nprint(display(no1: 200))\n', '\n100\n200\n', '\nfunc mult(no1: Int, no2: Int) -> Int {\n   return no1*no2\n}\n\nprint(mult(no1: 2, no2: 20))\nprint(mult(no1: 3, no2: 15))\nprint(mult(no1: 4, no2: 30))\n', '\n40\n45\n120\n', '\nfunc funcname() -> datatype {\n   return datatype\n}\n', '\nfunc votersname() -> String {\n   return ""Alice""\n}\nprint(votersname()) \n', '\nAlice\n', '\nfunc ls(array: [Int]) -> (large: Int, small: Int) {\n   var lar = array[0]\n   var sma = array[0]\n\n   for i in array[1..<array.count] {\n      if i < sma {\n         sma = i\n      } else if i > lar {\n         lar = i\n      }\n   }\n   return (lar, sma)\n}\n\nlet num = ls(array: [40,12,-5,78,98])\nprint(""Largest number is: \\(num.large) and smallest number is: \\(num.small)"")\n', '\nLargest number is: 98 and smallest number is: -5\n', '\nfunc sum(a: Int, b: Int) {\n   let a = a + b\n   let b = a - b\n   print(a, b)\n}\n\nsum(a: 20, b: 10)\nsum(a: 40, b: 10)\nsum(a: 24, b: 6)\n', '\n30 20\n50 40\n30 24\n', '\nfunc minMax(array: [Int]) -> (min: Int, max: Int)? {\n   if array.isEmpty { return nil }\n   var currentMin = array[0]\n   var currentMax = array[0]\n   \n   for value in array[1..<array.count] {\n      if value < currentMin {\n         currentMin = value\n      } else if value > currentMax {\n         currentMax = value\n      }\n   }\n   return (currentMin, currentMax)\n}\n\nif let bounds = minMax(array: [8, -6, 2, 109, 3, 71]) {\n   print(""min is \\(bounds.min) and max is \\(bounds.max)"")\n}\n', '\nmin is -6 and max is 109\n', '\nfunc sample(number: Int) {\n   print(number)\n}\n', '\nfunc sample(number: Int) {\n   print(number)\n}\n\nsample(number: 1)\nsample(number: 2)\nsample(number: 3)\n', '\n1\n2\n3\n', '\nfunc pow(firstArg a: Int, secondArg b: Int) -> Int {\n   var res = a\n   for _ in 1..<b {\n      res = res * a\n   }\n   print(res)\n   return res\n}\n\npow(firstArg:5, secondArg:3)\n', '\n125\n', '\nfunc vari<N>(members: N...){\n   for i in members {\n      print(i)\n   }\n}\n\nvari(members: 4,3,5)\nvari(members: 4.5, 3.1, 5.6)\nvari(members: ""Swift 4"", ""Enumerations"", ""Closures"")\n', '\n4\n3\n5\n4.5\n3.1\n5.6\nSwift 4\nEnumerations\nClosures\n', '\nfunc temp(a1: inout Int, b1: inout Int) {\n   let t = a1\n   a1 = b1\n   b1 = t\n}\n\nvar no = 2\nvar co = 10\ntemp(a1: &no, b1: &co)\nprint(""Swapped values are \\(no), \\(co)"")\n', '\nSwapped values are 10, 2\n', '\nfunc inputs(no1: Int, no2: Int) -> Int {\n   return no1/no2\n}\n', '\nfunc inputs(no1: Int, no2: Int) -> Int {\n   return no1/no2\n}\n\nprint(inputs(no1: 20, no2: 10))\nprint(inputs(no1: 36, no2: 6))\n', '\n2\n6\n', '\nFunc inputstr(name: String) -> String {\n   return name\n}\n', '\nfunc inputstr() {\n   print(""Swift 4 Functions"")\n   print(""Types and its Usage"")\n}\ninputstr()\n', '\nSwift 4 Functions\nTypes and its Usage\n', '\nvar addition: (Int, Int) -> Int = sum\n', '\nfunc sum(a: Int, b: Int) -> Int {\n   return a + b\n}\nvar addition: (Int, Int) -> Int = sum\nprint(""Result: \\(addition(40, 89))"")\n', '\nResult: 129\n', '\nfunc sum(a: Int, b: Int) -> Int {\n   return a + b\n}\nvar addition: (Int, Int) -> Int = sum\nprint(""Result: \\(addition(40, 89))"")\n\nfunc another(addition: (Int, Int) -> Int, a: Int, b: Int) {\n   print(""Result: \\(addition(a, b))"")\n}\nanother(sum, 10, 20)\n', '\nResult: 129\nResult: 30\n', '\nfunc calcDecrement(forDecrement total: Int) -> () -> Int {\n   var overallDecrement = 0\n   func decrementer() -> Int {\n      overallDecrement -= total\n      return overallDecrement\n   }\n   return decrementer\n}\n\nlet decrem = calcDecrement(forDecrement: 30)\nprint(decrem())\n', '\n-30\n']","['\nfunc funcname(Parameters) -> returntype {\n   Statement1\n   Statement2\n   ---\n   Statement N\n   return parameters\n}\n', '\nFirst Program\nAbout Functions\n', '\n100\n200\n', '\n40\n45\n120\n', '\nfunc funcname() -> datatype {\n   return datatype\n}\n', '\nAlice\n', '\nLargest number is: 98 and smallest number is: -5\n', '\n30 20\n50 40\n30 24\n', '\nmin is -6 and max is 109\n', '\nfunc sample(number: Int) {\n   print(number)\n}\n', '\n1\n2\n3\n', '\n125\n', '\n4\n3\n5\n4.5\n3.1\n5.6\nSwift 4\nEnumerations\nClosures\n', '\nSwapped values are 10, 2\n', '\nfunc inputs(no1: Int, no2: Int) -> Int {\n   return no1/no2\n}\n', '\n2\n6\n', '\nFunc inputstr(name: String) -> String {\n   return name\n}\n', '\nSwift 4 Functions\nTypes and its Usage\n', '\nResult: 129\n', '\nResult: 129\nResult: 30\n', '\n-30\n']",[],"[""Function Declaration − tells the compiler about a function's name, return type, and parameters.|||Function Definition − It provides the actual body of the function.|||""]"
19,['Swift - Closures'],"['Expressions in Closures', 'Single Expression Implicit Returns', 'Known Type Closures', 'Declaring Shorthand Argument Names as Closures', 'Closures as Operator Functions', 'Closures as Trailers', 'Capturing Values and Reference Types', 'Useful Video Courses']","['Syntax', 'Ascending Order Program']","['https://www.tutorialspoint.com/swift/swift_functions.htm', 'https://www.tutorialspoint.com/swift/swift_enumerations.htm', 'http://tpcg.io/DuMfZt', 'http://tpcg.io/YvXb02', 'http://tpcg.io/I5GJsx', 'http://tpcg.io/qYObrX', 'http://tpcg.io/4b6in0', 'http://tpcg.io/VgOve2', 'http://tpcg.io/uW5XF5', 'http://tpcg.io/vCst8N', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_functions.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_enumerations.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['When we run the above program using playground, we get the following result −', 'The following closure accepts two parameters and returns a Bool value −', 'When we run the above program using playground, we get the following result −', 'Two arguments are represented inside the sorted function −', 'Values of Known type represented as arrays.', 'When we run above program using playground, we get following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', ""Here, $0 and $1 refer to the closure's first and second String arguments."", 'When we run the above program using playground, we get the following result −', 'The expression is made even simpler by operator function in closure as −', 'When we run the above program using playground, we get the following result −', 'where {$0 > $1} are represented as trailing closures declared outside (names).', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","['Closure expressions in Swift 4 language follow crisp, optimization, and lightweight syntax styles which includes.', 'Following is a generic syntax to define closure which accepts parameters and returns a data type −', ""To return a Single expression statement in expression closures 'return' keyword is omitted in its declaration part."", 'Here oneDecrement and Decrement variables will both point the same memory block as closure reference.']","['Closures in Swift 4 are similar to that of self-contained functions organized as blocks and called anywhere like C and Objective C languages. Constants and variable references defined inside the functions are captured and stored in closures. Functions are considered as special cases of closures and it takes the following three forms −', 'Nested functions provide a convenient way of naming and defining blocks of code. Instead of representing the whole function declaration and name constructs are used to denote shorter functions. Representing the function in a clear brief statement with focused syntax is achieved through closure expressions.', 'Sorting a string is achieved by the Swift 4s key reserved function ""sorted"" which is already available in the standard library. The function will sort the given strings in the ascending order and returns the elements in a new array with same size and data type mentioned in the old array. The old array remains the same.', 'Array contents (Int, Int) and returns a Boolean value (Bool) if the array is sorted properly it will return true value otherwise it will return false.', 'A normal function with input string is written and passed to the sorted function to get the strings sorted to new array which is shown below −', 'The initial array to be sorted for icecream is given as ""Swift 4"" and ""great"". Function to sort the array is declared as string datatype and its return type is mentioned as Boolean. Both the strings are compared and sorted in ascending order and stored in a new array. If the sorting is performed successful the function will return a true value else it will return false.', 'Closure expression did not support default values. Variadic parameters and Tuples can also be used as parameter types and return types.', ""The parameters and return type declarations mentioned in the function statement can also be represented by the inline closure expression function with 'in' keyword. Once declaring parameter and return types 'in' keyword is used to denote that the body of the closure."", ""Here, the function type of the sorted function's second argument makes it clear that a Bool value must be returned by the closure. Because the closure's body contains a single expression (s1 > s2) that returns a Bool value, there is no ambiguity, and the return keyword can be omitted."", 'The statement itself clearly defines that when string1 is greater than string 2 return true otherwise false hence return statement is omitted here.', 'Consider the addition of two numbers. We know that addition will return the integer datatype. Hence known type closures are declared as −', ""Swift 4 automatically provides shorthand argument names to inline closures, which can be used to refer to the values of the closure's arguments by the names $0, $1, $2, and so on."", 'Swift 4 facilitates the user to represent Inline closures as shorthand argument names by representing $0, $1, $2 --- $n.', ""Closures argument list is omitted in definition section when we represent shorthand argument names inside closure expressions. Based on the function type the shorthand argument names will be derived. Since the shorthand argument is defined in expression body the 'in' keyword is omitted."", ""Swift 4 provides an easy way to access the members by just providing operator functions as closures. In the previous examples keyword 'Bool' is used to return either 'true' when the strings are equal otherwise it returns 'false'."", ""Passing the function's final argument to a closure expression is declared with the help of 'Trailing Closures'. It is written outside the function () with {}. Its usage is needed when it is not possible to write the function inline on a single line."", 'In Swift 4, capturing constants and variables values is done with the help of closures. It further refers and modify the values for those constants and variables inside the closure body even though the variables no longer exists.', 'Capturing constant and variable values is achieved by using nested function by writing function with in the body of other function.', 'In Swift 4, when a constant or a variable is declared inside a function, reference to that variables are also automatically created by the closure. It also provides the facility to refer more than two variables as the same closure as follows −', 'When each and every time the outer function calcDecrement is called it invokes the decrementer() function and decrements the value by 18 and returns the result with the help of outer function calcDecrement. Here calcDecrement acts as a closure.', ""Even though the function decrementer() does not have any arguments closure by default refers to variables 'overallDecrement' and 'total' by capturing its existing values. The copy of the values for the specified variables are stored with the new decrementer() function. Swift 4 handles memory management functions by allocating and deallocating memory spaces when the variables are not in use.""]","['\n{\n   (parameters) −> return type in\n   statements\n}\n', '\nlet studname = { print(""Welcome to Swift Closures"") }\nstudname()\n', '\nWelcome to Swift Closures\n', '\n{     \n   (Int, Int) −> Bool in\n   Statement1\n   Statement 2\n   ---\n   Statement n\n}\n', '\nlet divide = {\n   (val1: Int, val2: Int) -> Int in \n   return val1 / val2 \n}\n\nlet result = divide(200, 20)\nprint (result)\n', '\n10\n', '\nfunc ascend(s1: String, s2: String) -> Bool {\n   return s1 > s2\n}\n\nlet stringcmp = ascend(s1: ""Swift 4"", s2: ""great"")\nprint (stringcmp)\n', '\ntrue\n', '\nlet sum = {\n   (no1: Int, no2: Int) -> Int in \n   return no1 + no2 \n}\n\nlet digits = sum(10, 20)\nprint(digits)\n', '\n30\n', '\nvar count:[Int] = [5, 10, -6, 75, 20]\nlet descending = count.sorted(by: { n1, n2 in n1 > n2 })\nlet ascending = count.sorted(by: { n1, n2 in n1 < n2 })\n\nprint(descending)\nprint(ascending)\n', '\n[75, 20, 10, 5, -6]\n[-6, 5, 10, 20, 75]\n', '\nlet sub = {\n   (no1: Int, no2: Int) -> Int in \n   return no1 - no2 \n}\n\nlet digits = sub(10, 20)\nprint(digits)\n', '\n-10\n', '\nvar shorthand: (String, String) -> String\nshorthand = { $1 }\nprint(shorthand(""100"", ""200""))\n', '\n200\n', '\nlet numb = [98, -20, -30, 42, 18, 35]\nvar sortedNumbers = numb.sorted ({\n   (left: Int, right: Int) -> Bool in\n   return left < right\n})\n\nlet asc = numb.sorted(<)\nprint(asc)\n', '\n[-30, -20, 18, 35, 42, 98]\n', '\nreversed = sorted(names) { $0 > $1}\n', '\nimport Foundation\nvar letters = [""North"", ""East"", ""West"", ""South""]\n\nlet twoletters = letters.map({ \n   (state: String) -> String in\n   return state.substringToIndex(advance(state.startIndex, 2)).uppercaseString\n})\n\nlet stletters = letters.map() { \n   $0.substringToIndex(advance($0.startIndex, 2)).uppercaseString \n}\nprint(stletters)\n', '\n[NO, EA, WE, SO]\n', '\nlet decrem = calcDecrement(forDecrement: 18)\ndecrem()\n', '\nfunc calcDecrement(forDecrement total: Int) -> () -> Int {\n   var overallDecrement = 100\n   func decrementer() -> Int {\n      overallDecrement -= total\n      print(overallDecrement)\n      return overallDecrement\n   }\n   return decrementer\n}\n\nlet decrem = calcDecrement(forDecrement: 18)\ndecrem()\ndecrem()\ndecrem()\n', '\n82\n64\n46\n']","['\n{\n   (parameters) −> return type in\n   statements\n}\n', '\nWelcome to Swift Closures\n', '\n{     \n   (Int, Int) −> Bool in\n   Statement1\n   Statement 2\n   ---\n   Statement n\n}\n', '\n10\n', '\ntrue\n', '\n30\n', '\n[75, 20, 10, 5, -6]\n[-6, 5, 10, 20, 75]\n', '\n-10\n', '\n200\n', '\n[-30, -20, 18, 35, 42, 98]\n', '\nreversed = sorted(names) { $0 > $1}\n', '\n[NO, EA, WE, SO]\n', '\nlet decrem = calcDecrement(forDecrement: 18)\ndecrem()\n', '\n82\n64\n46\n']",['Global Functions|||Nested Functions|||Closure Expressions&&&Have a name. Do not capture any values|||Have a name. Capture values from enclosing function|||Unnamed Closures capture values from the adjacent blocks'],"['Inferring parameter and return value types from context.|||Implicit returns from single-expression closures.|||Shorthand argument names and|||Trailing closure syntax|||Values of Known type represented as arrays.|||Array contents (Int, Int) and returns a Boolean value (Bool) if the array is sorted properly it will return true value otherwise it will return false.|||constant parameters,|||variable parameters, and|||inout parameters.|||Outer function arguments.|||Capture constants and variables defined within the Outer function.|||']"
20,['Swift - Enumerations'],"['Enumeration Functionality', 'Enumeration with Switch Statement', 'Difference between Associated Values and Raw Values', 'Enum with Associated Values', 'Enum with Raw Values', 'Useful Video Courses']","['Syntax', 'Example']","['https://www.tutorialspoint.com/swift/swift_closures.htm', 'https://www.tutorialspoint.com/swift/swift_structures.htm', 'http://tpcg.io/j4buaO', 'http://tpcg.io/b0g0Vv', 'http://tpcg.io/wgfBB1', 'http://tpcg.io/xVkYwT', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_closures.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_structures.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Enumeration in Swift 4 also resembles the structure of C and Objective C.', 'Initial member value is defined using enum intializers.', 'Its functionality is also extended by ensuring standard protocol functionality.', 'For example, you can define an enumeration for days of week as follows −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'Enumeration can be further classified in to associated values and raw values.', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","['It is declared in a class and its values are accessed through the instance of that class.', 'Enumerations are introduced with the enum keyword and place their entire definition within a pair of braces −']","['An enumeration is a user-defined data type which consists of set of related values. Keyword enum is used to defined enumerated data type.', 'Swift 4 enumeration does not assign its members default value like C and Objective C. Instead the members are explicitly defined by their enumeration names. Enumeration name should start with a capital letter (Ex: enum DaysofaWeek).', ""Here the Enumeration name 'DaysofaWeek' is assigned to a variable weekday.Sunday. It informs the compiler that the datatype belongs to Sunday will be assigned to subsequent enum members of that particular class. Once the enum member datatype is defined, the members can be accessed by passing values and further computations."", ""Swift 4 'Switch' statement also follows the multi way selection. Only one variable is accessed at a particular time based on the specified condition. Default case in switch statement is used to trap unspecified cases."", 'The program first defines Climate as the enumeration name. Then its members like \'India\', \'America\', \'Africa\' and \'Australia\' are declared belonging to class \'Climate\'. Now the member America is assigned to a Season Variable. Further, Switch case will see the values corresponding to .America and it will branch to that particular statement. The output will be displayed as ""Climate is Cold"". Likewise all the members can be accessed through switch statements. When the condition is not satisfied it prints by default \'Climate is not predictable\'.', 'Consider for example to access the students name and marks secured in three subjects enumeration name is declared as student and the members present in enum class are name which belongs to string datatype, marks are represented as mark1, mark2 and mark3 of datatype Integer. To access either the student name or marks they have scored', 'Now, the switch case will print student name if that case block is executed otherwise it will print the marks secured by the student. If both the conditions fail, the default block will be executed.', 'Raw values can be strings, characters, or any of the integer or floating-point number types. Each raw value must be unique within its enumeration declaration. When integers are used for raw values, they auto-increment if no value is specified for some of the enumeration members.']","['\nenum enumname {\n   // enumeration values are described here\n}\n', '\nenum DaysofaWeek {\n   case Sunday\n   case Monday\n   ---\n   case Saturday\n}\n', '\nenum names {\n   case Swift\n   case Closures\n}\n\nvar lang = names.Closures\nlang = .Closures\n\nswitch lang {\n   case .Swift:\n      print(""Welcome to Swift"")\n   case .Closures:\n      print(""Welcome to Closures"")\n   default:\n      print(""Introduction"")\n}\n', '\nWelcome to Closures\n', '\nvar weekDay = DaysofaWeek.Sunday \n', '\nenum Climate {\n   case India\n   case America\n   case Africa\n   case Australia\n}\n\nvar season = Climate.America\nseason = .America\nswitch season {\n   case .India:\n      print(""Climate is Hot"")\n   case .America:\n      print(""Climate is Cold"")\n   case .Africa:\n      print(""Climate is Moderate"")\n   case .Australia:\n      print(""Climate is Rainy"")\n   \n}\n', '\nClimate is Cold\n', '\nenum Student {\n   case Name(String)\n   case Mark(Int,Int,Int)\n}\n\nvar studDetails = Student.Name(""Swift 4"")\nvar studMarks = Student.Mark(98,97,95)\n\nswitch studMarks {\n   case .Name(let studName):\n      print(""Student name is: \\(studName)."")\n   case .Mark(let Mark1, let Mark2, let Mark3):\n      print(""Student Marks are: \\(Mark1),\\(Mark2),\\(Mark3)."")\n}\n', '\nStudent Marks are: 98,97,95.\n', '\nvar studDetails = Student.Name(""Swift"")\nvar studMarks = Student.Mark(98,97,95)\n', '\nenum Month: Int {\n   case January = 1, February, March, April, May, June, July, August,\n      September, October, November, December\n}\n\nlet yearMonth = Month.May.rawValue\nprint(""Value of the Month is: \\(yearMonth)."")\n', '\nValue of the Month is: 5.\n']","['\nenum enumname {\n   // enumeration values are described here\n}\n', '\nenum DaysofaWeek {\n   case Sunday\n   case Monday\n   ---\n   case Saturday\n}\n', '\nWelcome to Closures\n', '\nvar weekDay = DaysofaWeek.Sunday \n', '\nClimate is Cold\n', '\nStudent Marks are: 98,97,95.\n', '\nvar studDetails = Student.Name(""Swift"")\nvar studMarks = Student.Mark(98,97,95)\n', '\nValue of the Month is: 5.\n']","['Associated Values|||Raw Values&&&Different Datatypes|||Same Datatypes&&&Ex: enum {10,0.8,""Hello""}|||Ex: enum {10,35,50}&&&Values are created based on constant or variable|||Prepopulated Values&&&Varies when declared each time|||Value for member is same']",['It is declared in a class and its values are accessed through the instance of that class.|||Initial member value is defined using enum intializers.|||Its functionality is also extended by ensuring standard protocol functionality.|||']
21,['Swift - Structures'],"['Definition of a Structure', 'Accessing the Structure and its Properties', 'Best Usage Practices of Structures', 'Useful Video Courses']","['Unlike C and Objective C', 'Syntax', 'Need for having structures', 'Another Example']","['https://www.tutorialspoint.com/swift/swift_enumerations.htm', 'https://www.tutorialspoint.com/swift/swift_classes.htm', 'http://tpcg.io/OpHzFn', 'http://tpcg.io/TH6OBG', 'http://tpcg.io/SxkTXC', 'http://tpcg.io/mJ834J', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_enumerations.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_classes.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Structure need not require implementation files and interface.', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', ""Structure to 'Copy' and 'Reference'."", 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","['Structure allows us to create a single file and to extend its interface automatically to other blocks.', ""To copy the encapsulated data and its associated properties by 'values' rather than by 'references'."", 'Structures in Swift 4 pass their members with their values rather than by its references.']","['Swift 4 provides a flexible building block of making use of constructs as Structures. By making use of these structures once can define constructs methods and properties.', 'In Structure the variable values are copied and passed in subsequent codes by returning a copy of the old values so that the values cannot be altered.', ""Consider for example, suppose we have to access students record containing marks of three subjects and to find out the total of three subjects. Here markStruct is used to initialize a structure with three marks as datatype 'Int'."", ""The members of the structure are accessed by its structure name. The instances of the structure are initialized by the 'let' keyword."", ""Students marks are accessed by the structure name 'studentMarks'. The structure members are initialized as mark1, mark2, mark3 with integer type values. Then the structure studentMarks() is passed to the 'marks' with 'let' keyword. Hereafter 'marks' will contain the structure member values. Now the values are printed by accessing the structure member values by '.' with its initialized names."", 'Swift 4 language provides the functionality to define structures as custom data types for building the function blocks. The instances of structure are passed by its value to the defined blocks for further manipulations.', ""The structure 'markStruct' is defined first with its members mark1, mark2 and mark3. Now the variables of member classes are initialized to hold integer values. Then the copy of the structure members are created with 'self' Keyword. Once the copy of the structure members are created structure block with its parameter marks are passed to 'marks' variable which will now hold the students marks. Then the marks are printed as 98, 96, 100. Next step for the same structure members another instance named 'fail' is used to point the same structure members with different marks. Then the results are now printed as 34, 42, 13. This clearly explains that structures will have a copy of the member variables then pass the members to their upcoming function blocks.""]","[""\nStructures are defined with a 'Struct' Keyword.\nstruct nameStruct {\n   Definition 1\n   Definition 2\n   ---\n   Definition N\n}\n"", '\nstruct MarkStruct {\n   var mark1: Int\n   var mark2: Int\n   var mark3: Int\n}\n', '\nstruct studentMarks {\n   var mark1 = 100\n   var mark2 = 200\n   var mark3 = 300\n}\n\nlet marks = studentMarks()\nprint(""Mark1 is \\(marks.mark1)"")\nprint(""Mark2 is \\(marks.mark2)"")\nprint(""Mark3 is \\(marks.mark3)"")\n', '\nMark1 is 100\nMark2 is 200\nMark3 is 300\n', '\nstruct MarksStruct {\n   var mark: Int\n\n   init(mark: Int) {\n      self.mark = mark\n   }\n}\n\nvar aStruct = MarksStruct(mark: 98)\nvar bStruct = aStruct     // aStruct and bStruct are two structs with the same value!\nbStruct.mark = 97\n\nprint(aStruct.mark)      // 98\nprint(bStruct.mark)      // 97\n', '\n98\n97\n', '\nstruct markStruct {\n   var mark1: Int\n   var mark2: Int\n   var mark3: Int\n\n   init(mark1: Int, mark2: Int, mark3: Int) {\n      self.mark1 = mark1\n      self.mark2 = mark2\n      self.mark3 = mark3\n   }\n}\n\nvar marks = markStruct(mark1: 98, mark2: 96, mark3:100)\nprint(marks.mark1)\nprint(marks.mark2)\nprint(marks.mark3)\n', '\n98\n96\n100\n', '\nstruct markStruct {\n   var mark1: Int\n   var mark2: Int\n   var mark3: Int\n   \n   init(mark1: Int, mark2: Int, mark3: Int) {\n      self.mark1 = mark1\n      self.mark2 = mark2\n      self.mark3 = mark3\n   }\n}\n\nvar fail = markStruct(mark1: 34, mark2: 42, mark3: 13)\n\nprint(fail.mark1)\nprint(fail.mark2)\nprint(fail.mark3)\n', '\n34\n42\n13\n']","[""\nStructures are defined with a 'Struct' Keyword.\nstruct nameStruct {\n   Definition 1\n   Definition 2\n   ---\n   Definition N\n}\n"", '\nstruct MarkStruct {\n   var mark1: Int\n   var mark2: Int\n   var mark3: Int\n}\n', '\nMark1 is 100\nMark2 is 200\nMark3 is 300\n', '\n98\n97\n', '\n98\n96\n100\n', '\n34\n42\n13\n']",[],"[""Structure need not require implementation files and interface.|||Structure allows us to create a single file and to extend its interface automatically to other blocks.|||To encapsulate simple data values.|||To copy the encapsulated data and its associated properties by 'values' rather than by 'references'.|||Structure to 'Copy' and 'Reference'.|||""]"
22,['Swift - Classes'],"['Class Identity Operators', 'Useful Video Courses']","['Benefits of having Classes', 'Common Characteristics of Classes and structures', 'Syntax', 'Class Definition', 'Example', 'Accessing Class Properties as Reference Types']","['https://www.tutorialspoint.com/swift/swift_structures.htm', 'https://www.tutorialspoint.com/swift/swift_properties.htm', 'http://tpcg.io/qQHgz1', 'http://tpcg.io/6awEDv', 'http://tpcg.io/2gZOav', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_structures.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_properties.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Inheritance acquires the properties of one class to another class', 'Type casting enables the user to check class type at run time', 'Deinitializers take care of releasing memory resources', 'Reference counting allows the class instance to have more than one reference', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","[""Class properties can be accessed by the '.' syntax. Property name is separated by a '.' after the instance name.""]","['Classes in Swift 4 are building blocks of flexible constructs. Similar to constants, variables and functions the user can define class properties and methods. Swift 4 provides us the functionality that while declaring classes the users need not create interfaces or implementation files. Swift 4 allows us to create classes as a single file and the external interfaces will be created by default once the classes are initialized.', 'Classes in Swift 4 refers multiple constants and variables pointing to a single instance. To know about the constants and variables pointing to a particular class instance identity operators are used. Class instances are always passed by reference. In Classes NSString, NSArray, and NSDictionary instances are always assigned and passed around as a reference to an existing instance, rather than as a copy.']","['\nClass classname {\n   Definition 1\n   Definition 2\n   --- \n   Definition N\n}\n', '\nclass student {\n   var studname: String\n   var mark: Int \n   var mark2: Int \n}\n', '\nlet studrecord = student()\n', '\nclass MarksStruct {\n   var mark: Int\n   init(mark: Int) {\n      self.mark = mark\n   }\n}\n\nclass studentMarks {\n   var mark = 300\n}\n\nlet marks = studentMarks()\nprint(""Mark is \\(marks.mark)"")\n', '\nMark is 300\n', '\nclass MarksStruct {\n   var mark: Int\n   init(mark: Int) {\n      self.mark = mark\n   }\n}\n\nclass studentMarks {\n   var mark1 = 300\n   var mark2 = 400\n   var mark3 = 900\n}\n\nlet marks = studentMarks()\nprint(""Mark1 is \\(marks.mark1)"")\nprint(""Mark2 is \\(marks.mark2)"")\nprint(""Mark3 is \\(marks.mark3)"")\n', '\nMark1 is 300\nMark2 is 400\nMark3 is 900\n', '\nclass SampleClass: Equatable {\n   let myProperty: String\n   init(s: String) {\n      myProperty = s\n   }\n}\n\nfunc ==(lhs: SampleClass, rhs: SampleClass) -> Bool {\n   return lhs.myProperty == rhs.myProperty\n}\n\nlet spClass1 = SampleClass(s: ""Hello"")\nlet spClass2 = SampleClass(s: ""Hello"")\n\nspClass1 === spClass2 // false\nprint(""\\(spClass1)"")\n\nspClass1 !== spClass2 // true\nprint(""\\(spClass2)"")\n', '\nmain.SampleClass\nmain.SampleClass\n']","['\nClass classname {\n   Definition 1\n   Definition 2\n   --- \n   Definition N\n}\n', '\nclass student {\n   var studname: String\n   var mark: Int \n   var mark2: Int \n}\n', '\nlet studrecord = student()\n', '\nMark is 300\n', '\nMark1 is 300\nMark2 is 400\nMark3 is 900\n', '\nmain.SampleClass\nmain.SampleClass\n']",['Identical to Operators|||Not Identical to Operators&&&Operator used is (===)|||Operator used is (!==)&&&Returns true when two constants or variables pointing to a same instance|||Returns true when two constants or variables pointing to a different instance'],['Inheritance acquires the properties of one class to another class|||Type casting enables the user to check class type at run time|||Deinitializers take care of releasing memory resources|||Reference counting allows the class instance to have more than one reference|||Properties are defined to store values|||Subscripts are defined for providing access to values|||Methods are initialized to improve functionality|||Initial state are defined by initializers|||Functionality are expanded beyond default values|||Confirming protocol functionality standards|||']
23,['Swift - Properties'],"['Stored Properties', 'Lazy Stored Property', 'Instance Variables', 'Computed Properties', 'Local and Global Variables', 'Type Properties', 'Querying and Setting Properties', 'Useful Video Courses']","['Computed Properties as Read-Only Properties', 'Computed Properties as Property Observers', 'Syntax']","['https://www.tutorialspoint.com/swift/swift_classes.htm', 'https://www.tutorialspoint.com/swift/swift_methods.htm', 'http://tpcg.io/WK9y4e', 'http://tpcg.io/q0VFh4', 'http://tpcg.io/YHugWB', 'http://tpcg.io/5PWSPE', 'http://tpcg.io/zcGe06', 'http://tpcg.io/pNBxWl', 'http://tpcg.io/Iaxg0u', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_classes.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_methods.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Difference between Stored Properties and Computed Properties', 'When we run the above program using playground, we get the following result −', 'Consider the following line in the above code −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'Property Observers can be defined by either', 'After Storing the new value - didset', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","['When a computed property left the new value as undefined, the default value will be set for that particular variable.', 'When a property is set in an initializer willset and didset observers cannot be called.', 'Local and global variable are declared for computing and observing the properties.']","['Swift 4 language provides properties for class, enumeration or structure to associate values. Properties can be further classified into Stored properties and Computed properties.', ""Both Stored and Computed properties are associated with instances type. When the properties are associated with its type values then it is defined as 'Type Properties'. Stored and computed properties are usually associated with instances of a particular type. However, properties can also be associated with the type itself. Such properties are known as type properties. Property observers are also used"", ""Swift 4 introduces Stored Property concept to store the instances of constants and variables. Stored properties of constants are defined by the 'let' keyword and Stored properties of variables are defined by the 'var' keyword."", 'Here, the variable pi is initialized as a stored property value with the instance pi = 3.1415. So, whenever the instance is referred it will hold the value 3.1415 alone.', ""Another method to have stored property is to have as constant structures. So the whole instance of the structures will be considered as 'Stored Properties of Constants'."", ""Instead of reinitializing the 'number' to 8.7 it will return an error message indicating that the 'number' is declared as constant."", ""Swift 4 provides a flexible property called 'Lazy Stored Property' where it won't calculate the initial values when the variable is initialized for the first time. 'lazy' modifier is used before the variable declaration to have it as a lazy stored property."", 'In Objective C, Stored properties also have instance variables for back up purposes to store the values declared in stored property.', ""Swift 4 integrates both these concepts into a single 'stored property' declaration. Instead of having a corresponding instance variable and back up value 'stored property' contains all integrated information defined in a single location about the variables property by variable name, data type and memory management functionalities."", 'Rather than storing the values computed properties provide a getter and an optional setter to retrieve and set other properties and values indirectly.', ""A read-only property in computed property is defined as a property with getter but no setter. It is always used to return a value. The variables are further accessed through a '.' Syntax but cannot be set to another value."", ""In Swift 4 to observe and respond to property values Property Observers are used. Each and every time when property values are set property observers are called. Except lazy stored properties we can add property observers to 'inherited' property by method 'overriding'."", ""Properties are defined in the Type definition section with curly braces {} and scope of the variables are also defined previously. For defining type properties for value types 'static' keyword is used and for class types 'class' keyword is used."", ""Just like instance properties Type properties are queried and set with '.' Syntax just on the type alone instead of pointing to the instance.""]","['\nstruct Number {\n   var digits: Int\n   let pi = 3.1415\n}\n\nvar n = Number(digits: 12345)\nn.digits = 67\n\nprint(""\\(n.digits)"")\nprint(""\\(n.pi)"")\n', '\n67\n3.1415\n', '\nlet pi = 3.1415\n', '\nstruct Number {\n   var digits: Int\n   let numbers = 3.1415\n}\n\nvar n = Number(digits: 12345)\nn.digits = 67\n\nprint(""\\(n.digits)"")\nprint(""\\(n.numbers)"")\nn.numbers = 8.7\n', ""\nerror: cannot assign to 'numbers' in 'n'\nn.numbers = 8.7\n"", '\nclass sample {\n   lazy var no = number()    // `var` declaration is required.\n}\n\nclass number {\n   var name = ""Swift 4""\n}\n\nvar firstsample = sample()\nprint(firstsample.no.name)\n', '\nSwift 4\n', '\nclass sample {\n   var no1 = 0.0, no2 = 0.0\n   var length = 300.0, breadth = 150.0\n\n   var middle: (Double, Double) {\n      get {\n         return (length / 2, breadth / 2)\n      }\n      \n      set(axis){\n         no1 = axis.0 - (length / 2)\n         no2 = axis.1 - (breadth / 2)\n      }\n   }\n}\n\nvar result = sample()\nprint(result.middle)\nresult.middle = (0.0, 10.0)\n\nprint(result.no1)\nprint(result.no2)\n', '\n(150.0, 75.0)\n-150.0\n-65.0\n', '\nclass film {\n   var head = """"\n   var duration = 0.0\n   var metaInfo: [String:String] {\n      return [\n         ""head"": self.head,\n         ""duration"":""\\(self.duration)""\n      ]\n   }\n}\n\nvar movie = film()\nmovie.head = ""Swift 4 Properties""\nmovie.duration = 3.09\n\nprint(movie.metaInfo[""head""]!)\nprint(movie.metaInfo[""duration""]!)\n', '\nSwift 4 Properties\n3.09\n', '\nclass Samplepgm {\n   var counter: Int = 0 {\n      willSet(newTotal){\n         print(""Total Counter is: \\(newTotal)"")\n      }\n      \n      didSet {\n         if counter > oldValue {\n            print(""Newly Added Counter \\(counter - oldValue)"")\n         }\n      }\n   }\n}\n\nlet NewCounter = Samplepgm()\nNewCounter.counter = 100\nNewCounter.counter = 800\n', '\nTotal Counter is: 100\nNewly Added Counter 100\nTotal Counter is: 800\nNewly Added Counter 700\n', '\nstruct Structname {\n   static var storedTypeProperty = "" ""\n   static var computedTypeProperty: Int {\n      // return an Int value here\n   }\n}\n\nenum Enumname {\n   static var storedTypeProperty = "" ""\n   static var computedTypeProperty: Int {\n      // return an Int value here\n   }\n}\n\nclass Classname {\n   class var computedTypeProperty: Int {\n      // return an Int value here\n   }\n}\n', '\nstruct StudMarks {\n   static let markCount = 97\n   static var totalCount = 0\n   \n   var InternalMarks: Int = 0 {\n      didSet {\n         if InternalMarks > StudMarks.markCount {\n            InternalMarks = StudMarks.markCount\n         }\n         if InternalMarks > StudMarks.totalCount {\n            StudMarks.totalCount = InternalMarks\n         }\n      }\n   }\n}\n\nvar stud1Mark1 = StudMarks()\nvar stud1Mark2 = StudMarks()\n\nstud1Mark1.InternalMarks = 98\nprint(stud1Mark1.InternalMarks)\n\nstud1Mark2.InternalMarks = 87\nprint(stud1Mark2.InternalMarks)\n', '\n97\n87\n']","['\n67\n3.1415\n', '\nlet pi = 3.1415\n', ""\nerror: cannot assign to 'numbers' in 'n'\nn.numbers = 8.7\n"", '\nSwift 4\n', '\n(150.0, 75.0)\n-150.0\n-65.0\n', '\nSwift 4 Properties\n3.09\n', '\nTotal Counter is: 100\nNewly Added Counter 100\nTotal Counter is: 800\nNewly Added Counter 700\n', '\nstruct Structname {\n   static var storedTypeProperty = "" ""\n   static var computedTypeProperty: Int {\n      // return an Int value here\n   }\n}\n\nenum Enumname {\n   static var storedTypeProperty = "" ""\n   static var computedTypeProperty: Int {\n      // return an Int value here\n   }\n}\n\nclass Classname {\n   class var computedTypeProperty: Int {\n      // return an Int value here\n   }\n}\n', '\n97\n87\n']","['Stored Property|||Computed Property&&&Store constant and variable values as instance|||Calculate a value rather than storing the value&&&Provided by classes and structures|||Provided by classes, enumerations and structures', 'Local Variables|||Global Variables&&&Variables that are defined within a function, method, or closure context.|||Variables that are defined outside function, method, closure, or type context.&&&Used to store and retrieve values.|||Used to store and retrieve values.&&&Stored properties is used to get and set the values.|||Stored properties is used to get and set the values.&&&Computed properties are also used.|||Computed properties are also used.']","[""To observe the value of the stored properties|||To observe the property of inherited subclass derived from superclass|||During definition Stored property provides 'default value'|||During Initialization the user can initialize and modify the initial values|||To delay object creation.|||When the property is dependent on other parts of a class, that are not known yet|||Before Storing the value - willset|||After Storing the new value - didset|||When a property is set in an initializer willset and didset observers cannot be called.|||""]"
24,['Swift - Methods'],"['Instance Methods', 'Local and External Parameter Names', 'External Parameter Name with # and _ Symbol', 'Self property in Methods', 'Modifying Value Types from Instance Methods', 'Self Property for Mutating Method', 'Type Methods', 'Useful Video Courses']","['Syntax', 'Example']","['https://www.tutorialspoint.com/swift/swift_properties.htm', 'https://www.tutorialspoint.com/swift/swift_subscripts.htm', 'http://tpcg.io/aKDyr5', 'http://tpcg.io/o4ptDb', 'http://tpcg.io/y96mQb', 'http://tpcg.io/jVsIKd', 'http://tpcg.io/SG7J0i', 'http://tpcg.io/FtPoYo', 'http://tpcg.io/UGkMFe', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_properties.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_subscripts.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Instance methods provide functionality', 'When we run the above program using playground, we get the following result −', 'Class Calculations defines two instance methods −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result. −', 'When we run the above program using playground, we get the following result. −']","['In Swift 4 language, Classes, Structures and Enumeration instances are accessed through the instance methods.', ""Mutating methods combined with 'self' property assigns a new instance to the defined method.""]","['In Swift 4 language Functions associated with particular types are referred to as Methods. In Objective C Classes are used to define methods, whereas Swift 4 language provides the user flexibility to have methods for Classes, Structures and Enumerations.', 'Instance method can be written inside the {} curly braces. It has implicit access to methods and properties of the type instance. When a specific instance of the type is called it will get access to that particular instance.', ""Finally, to print the calculations methods with values for a and b is called. Instance methods are accessed with '.' dot syntax"", ""Swift 4 Functions describe both local and global declarations for their variables. Similarly, Swift 4 Methods naming conventions also resembles as that of Objective C. But the characteristics of local and global parameter name declarations are different for functions and methods. The first parameter in Swift 4 are referred by preposition names as 'with', 'for' and 'by' for easy to access naming conventions."", ""Swift 4 provides the flexibility in methods by declaring first parameter name as local parameter names and the remaining parameter names to be of global parameter names. Here 'no1' is declared by Swift 4 methods as local parameter names. 'no2' is used for global declarations and accessed through out the program."", ""Even though Swift 4 methods provide first parameter names for local declarations, the user has the provision to modify the parameter names from local to global declarations. This can be done by prefixing '#' symbol with the first parameter name. By doing so, the first parameter can be accessed globally throughout the modules."", ""When the user needs to access the subsequent parameter names with an external name, the methods name is overridden with the help of '_' symbol."", ""Methods have an implicit property known as 'self' for all its defined type instances. 'Self' property is used to refer the current instances for its defined methods."", ""In Swift 4 language structures and enumerations belong to value types which cannot be altered by its instance methods. However, Swift 4 language provides flexibility to modify the value types by 'mutating' behavior. Mutate will make any changes in the instance methods and will return back to the original form after the execution of the method. Also, by the 'self' property new instance is created for its implicit function and will replace the existing method after its execution"", ""When a particular instance of a method is called, it is called as an Instance method; and when the method calls a particular type of a method, it is called as 'Type Methods'. Type methods for 'classes' are defined by the 'func' keyword and structures and enumerations type methods are defined with the 'static' keyword before the 'func' keyword."", ""Type methods are called and accessed by '.' syntax where instead of calling a particular instance the whole method is invoked.""]","['\nfunc funcname(Parameters) -> returntype {\n   Statement1\n   Statement2\n   ---\n   Statement N\n   return parameters\n}\n', '\nclass calculations {\n   let a: Int\n   let b: Int\n   let res: Int\n\n   init(a: Int, b: Int) {\n      self.a = a\n      self.b = b\n      res = a + b\n   }\n   \n   func tot(c: Int) -> Int {\n      return res - c\n   }\n   \n   func result() {\n      print(""Result is: \\(tot(c: 20))"")\n      print(""Result is: \\(tot(c: 50))"")\n   }\n}\nlet pri = calculations(a: 600, b: 300)\npri.result()\n', '\nResult is: 880\nResult is: 850\n', '\nclass division {\n   var count: Int = 0\n   func incrementBy(no1: Int, no2: Int) {\n      count = no1 / no2\n      print(count)\n   }\n}\n\nlet counter = division()\ncounter.incrementBy(no1: 1800, no2: 3)\ncounter.incrementBy(no1: 1600, no2: 5)\ncounter.incrementBy(no1: 11000, no2: 3)\n', '\n600\n320\n3666\n', '\nclass multiplication {\n   var count: Int = 0\n   func incrementBy(no1: Int, no2: Int) {\n      count = no1 * no2\n      print(count)\n   }\n}\n\nlet counter = multiplication()\n\ncounter.incrementBy(no1: 800, no2: 3)\ncounter.incrementBy(no1: 100, no2: 5)\ncounter.incrementBy(no1: 15000, no2: 3)\n', '\n2400\n500\n45000\n', '\nclass calculations {\n   let a: Int\n   let b: Int\n   let res: Int\n\n   init(a: Int, b: Int) {\n      self.a = a\n      self.b = b\n      res = a + b\n      print(""Inside Self Block: \\(res)"")\n   }\n   \n   func tot(c: Int) -> Int {\n      return res - c\n   }\n   \n   func result() {\n      print(""Result is: \\(tot(c: 20))"")\n      print(""Result is: \\(tot(c: 50))"")\n   }\n}\n\nlet pri = calculations(a: 600, b: 300)\nlet sum = calculations(a: 1200, b: 300)\n\npri.result()\nsum.result()\n', '\nInside Self Block: 900\nInside Self Block: 1500\nResult is: 880\nResult is: 850\nResult is: 1480\nResult is: 1450\n', '\nstruct area {\n   var length = 1\n   var breadth = 1\n   \n   func area() -> Int {\n      return length * breadth\n   }\n   mutating func scaleBy(res: Int) {\n      length *= res\n      breadth *= res\n      print(length)\n      print(breadth)\n   }\n}\n\nvar val = area(length: 3, breadth: 5)\nval.scaleBy(res: 3)\nval.scaleBy(res: 30)\nval.scaleBy(res: 300)\n', '\n9\n15\n270\n450\n81000\n135000\n', '\nstruct area {\n   var length = 1\n   var breadth = 1\n   func area() -> Int {\n      return length * breadth\n   }\n   mutating func scaleBy(res: Int) {\n      self.length *= res\n      self.breadth *= res\n      print(length)\n      print(breadth)\n   }\n}\n\nvar val = area(length: 3, breadth: 5)\nval.scaleBy(res: 13)\n', '\n39\n65\n', '\nclass Math {\n   class func abs(number: Int) -> Int {\n      if number < 0 {\n         return (-number)\n      } else {\n         return number\n      }\n   }\n}\n\nstruct absno {\n   static func abs(number: Int) -> Int {\n      if number < 0 {\n         return (-number)\n      } else {\n         return number\n      }\n   }\n}\n\nlet no = Math.abs(number: -35)\nlet num = absno.abs(number: -5)\n\nprint(no)\nprint(num)\n', '\n35\n5\n']","['\nfunc funcname(Parameters) -> returntype {\n   Statement1\n   Statement2\n   ---\n   Statement N\n   return parameters\n}\n', '\nResult is: 880\nResult is: 850\n', '\n600\n320\n3666\n', '\n2400\n500\n45000\n', '\nInside Self Block: 900\nInside Self Block: 1500\nResult is: 880\nResult is: 850\nResult is: 1480\nResult is: 1450\n', '\n9\n15\n270\n450\n81000\n135000\n', '\n39\n65\n', '\n35\n5\n']",[],"[""To access and modify instance properties|||functionality related to the instance's need|||init() is defined to add two numbers a and b and store it in result 'res'|||tot() is used to subtract the 'res' from passing 'c' value|||""]"
25,['Swift - Subscripts'],"['Subscript Declaration Syntax and its Usage', 'Options in Subscript', 'Useful Video Courses']","['Syntax', 'Example1', 'Example2']","['https://www.tutorialspoint.com/swift/swift_methods.htm', 'https://www.tutorialspoint.com/swift/swift_inheritance.htm', 'http://tpcg.io/wiWNmS', 'http://tpcg.io/ApRnzX', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_methods.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_inheritance.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","['New instance for the Matrix is created by passing row and column count to the initialize as shown below.', 'Matrix values can be defined by passing row and column values into the subscript, separated by a comma as shown below.']","['Accessing the element members of a collection, sequence and a list in Classes, Structures and Enumerations are carried out with the help of subscripts. These subscripts are used to store and retrieve the values with the help of index. Array elements are accessed with the help of someArray[index] and its subsequent member elements in a Dictionary instance can be accessed as someDicitonary[key].', 'For a single type, subscripts can range from single to multiple declarations. We can use the appropriate subscript to overload the type of index value passed to the subscript. Subscripts also ranges from single dimension to multiple dimension according to the users requirements for their input data type declarations.', ""Let's have a recap to the computed properties. Subscripts too follow the same syntax as that of computed properties. For querying type instances, subscripts are written inside a square bracket followed with the instance name. Subscript syntax follows the same syntax structure as that of 'instance method' and 'computed property' syntax. 'subscript' keyword is used for defining subscripts and the user can specify single or multiple parameters with their return types. Subscripts can have read-write or read-only properties and the instances are stored and retrieved with the help of 'getter' and 'setter' properties as that of computed properties."", 'Subscripts takes single to multiple input parameters and these input parameters also belong to any datatype. They can also use variable and variadic parameters. Subscripts cannot provide default parameter values or use any in-out parameters.', ""Defining multiple subscripts are termed as 'subscript overloading' where a class or structure can provide multiple subscript definitions as required. These multiple subscripts are inferred based on the types of values that are declared within the subscript braces."", ""Swift 4 subscript supports single parameter to multiple parameter declarations for appropriate data types. The program declares 'Matrix' structure as a 2 * 2 dimensional array matrix to store 'Double' data types. The Matrix parameter is inputted with Integer data types for declaring rows and columns.""]","['\nsubscript(index: Int) −> Int {\n   get {\n      // used for subscript value declarations\n   }\n   set(newValue) {\n      // definitions are written here\n   }\n}\n', '\nstruct subexample {\n   let decrementer: Int\n   subscript(index: Int) -> Int {\n      return decrementer / index\n   }\n}\nlet division = subexample(decrementer: 100)\n\nprint(""The number is divisible by \\(division[9]) times"")\nprint(""The number is divisible by \\(division[2]) times"")\nprint(""The number is divisible by \\(division[3]) times"")\nprint(""The number is divisible by \\(division[5]) times"")\nprint(""The number is divisible by \\(division[7]) times"")\n', '\nThe number is divisible by 11 times\nThe number is divisible by 50 times\nThe number is divisible by 33 times\nThe number is divisible by 20 times\nThe number is divisible by 14 times\n', '\nclass daysofaweek {\n   private var days = [""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"",\n      ""Thursday"", ""Friday"", ""saturday""]\n   subscript(index: Int) -> String {\n      get {\n         return days[index]\n      }\n      set(newValue) {\n         self.days[index] = newValue\n      }\n   }\n}\nvar p = daysofaweek()\n\nprint(p[0])\nprint(p[1])\nprint(p[2])\nprint(p[3])\n', '\nSunday\nMonday\nTuesday\nWednesday\n', '\nstruct Matrix {\n   let rows: Int, columns: Int\n   var print: [Double]\n   init(rows: Int, columns: Int) {\n      self.rows = rows\n      self.columns = columns\n      print = Array(count: rows * columns, repeatedValue: 0.0)\n   }\n   subscript(row: Int, column: Int) -> Double {\n      get {\n         return print[(row * columns) + column]\n      }\n      set {\n         print[(row * columns) + column] = newValue\n      }\n   }\n}\nvar mat = Matrix(rows: 3, columns: 3)\n\nmat[0,0] = 1.0\nmat[0,1] = 2.0\nmat[1,0] = 3.0\nmat[1,1] = 5.0\n\nprint(""\\(mat[0,0])"")\n', '\n1.0\n', '\nvar mat = Matrix(rows: 3, columns: 3)\n', '\nmat[0,0] = 1.0  \nmat[0,1] = 2.0\nmat[1,0] = 3.0\nmat[1,1] = 5.0\n']","['\nsubscript(index: Int) −> Int {\n   get {\n      // used for subscript value declarations\n   }\n   set(newValue) {\n      // definitions are written here\n   }\n}\n', '\nThe number is divisible by 11 times\nThe number is divisible by 50 times\nThe number is divisible by 33 times\nThe number is divisible by 20 times\nThe number is divisible by 14 times\n', '\nSunday\nMonday\nTuesday\nWednesday\n', '\n1.0\n', '\nvar mat = Matrix(rows: 3, columns: 3)\n', '\nmat[0,0] = 1.0  \nmat[0,1] = 2.0\nmat[1,0] = 3.0\nmat[1,1] = 5.0\n']",[],[]
26,['Swift - Inheritance'],"['Base Class', 'Subclass', 'Overriding', 'Methods Overriding', 'Property Overriding', 'Overriding Property Observers', 'Final Property to prevent Overriding', 'Useful Video Courses']","['Access to Super class Methods, Properties and Subscripts', 'Overriding Property Getters and Setters']","['https://www.tutorialspoint.com/swift/swift_subscripts.htm', 'https://www.tutorialspoint.com/swift/swift_initialization.htm', 'http://tpcg.io/jOmufM', 'http://tpcg.io/JMuoU2', 'http://tpcg.io/cgmgxh', 'http://tpcg.io/nTApGJ', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_subscripts.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_initialization.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","['Sub Class − when a class inherits properties, methods and functions from another class it is called as sub class', ""A Class that does not inherit methods, properties or functions from another class is called as 'Base Class'."", ""'super' keyword is used as a prefix to access the methods, properties and subscripts declared in the super class"", 'When setter is defined for overriding property the user has to define getter too.']","['The ability to take than more form is defined as Inheritance. Generally a class can inherit methods, properties and functionalities from another class. Classes can be further categorized in to sub class and super class.', 'Super Class − Class containing properties, methods and functions to inherit other classes from itself is called as a super class', 'Swift 4 classes contain superclass which calls and access methods, properties, functions and overriding methods. Also, property observers are also used to add a property and modify the stored or computed property methods.', ""Class with classname StudDetails are defined as a base class here which is used to contain students name, and three subjects mark as mark1, mark2 and mark3. 'let' keyword is used to initialize the value for the base class and base class value is displayed in the playground with the help of 'print' function."", ""The act of basing a new class on an existing class is defined as 'Subclass'. The subclass inherits the properties, methods and functions of its base class. To define a subclass ':' is used before the base class name"", ""Class 'StudDetails' is defined as super class where student marks are declared and the subclass 'display' is used to inherit the marks from its super class. Sub class defines students marks and calls the print() method to display the students mark."", ""Accessing the super class instance, type methods, instance, type properties and subscripts subclass provides the concept of overriding. 'override' keyword is used to override the methods declared in the superclass."", ""Inherited instance and type methods can be overridden by the 'override' keyword to our methods defined in our subclass. Here print() is overridden in subclass to access the type property mentioned in the super class print(). Also new instance of cricket() super class is created as 'cricinstance'."", 'You can override an inherited instance or class property to provide your own custom getter and setter for that property, or to add property observers to enable the overriding property to observe when the underlying property value changes.', 'Swift 4 allows the user to provide custom getter and setter to override the inherited property whether it is a stored or computed property. The subclass does not know the inherited property name and type. Therefore it is essential that the user needs to specify in subclass, the name and type of the overriding property specified in super class.', ""When we don't want to modify the inherited property getter, we can simply pass the inherited value by the syntax 'super.someProperty' to the super class."", ""When a new property needs to be added for an inherited property, 'property overriding' concept is introduced in Swift 4. This notifies the user when the inherited property value is altered. But overriding is not applicable for inherited constant stored properties and inherited read-only computed properties."", ""When the user need not want others to access super class methods, properties or subscripts Swift 4 introduces 'final' property to prevent overriding. Once 'final' property is declared the subscripts won't allow the super class methods, properties and its subscripts to be overridden. There is no provision to have 'final' property in 'super class'. When 'final' property is declared the user is restricted to create further sub classes."", ""Since the super class is declared as 'final' and its data types are also declared as 'final' the program won't allow to create subclasses further and it will throw errors.""]","['\nclass StudDetails {\n   var stname: String!\n   var mark1: Int!\n   var mark2: Int!\n   var mark3: Int!\n   \n   init(stname: String, mark1: Int, mark2: Int, mark3: Int) {\n      self.stname = stname\n      self.mark1 = mark1\n      self.mark2 = mark2\n      self.mark3 = mark3\n   }\n}\n\nlet stname = ""Swift 4""\nlet mark1 = 98\nlet mark2 = 89\nlet mark3 = 76\n\nprint(stname)\nprint(mark1)\nprint(mark2)\nprint(mark3)\n', '\nSwift 4\n98\n89\n76\n', '\nclass StudDetails {\n   var mark1: Int;\n   var mark2: Int;\n   \n   init(stm1:Int, results stm2:Int) {\n      mark1 = stm1;\n      mark2 = stm2;\n   }\n   func print() {\n      print(""Mark1:\\(mark1), Mark2:\\(mark2)"")\n   }\n}\n\nclass display : StudDetails {\n   init() {\n      super.init(stm1: 93, results: 89)\n   }\n}\n\nlet marksobtained = display()\nmarksobtained.print()\n', '\nMark1:93, Mark2:89\n', '\nclass cricket {\n   func print() {\n      print(""Welcome to Swift 4 Super Class"")\n   }\n}\n\nclass tennis: cricket {\n   override func print() {\n      print(""Welcome to Swift 4 Sub Class"")\n   }\n}\n\nlet cricinstance = cricket()\ncricinstance.print()\n\nlet tennisinstance = tennis()\ntennisinstance.print()\n', '\nWelcome to Swift Super Class\nWelcome to Swift Sub Class\n', '\nclass Circle {\n   var radius = 12.5\n   var area: String {\n      return ""of rectangle for \\(radius) ""\n   }\n}\n\nclass Rectangle: Circle {\n   var print = 7\n   override var area: String {\n      return super.area + "" is now overridden as \\(print)""\n   }\n}\n\nlet rect = Rectangle()\nrect.radius = 25.0\nrect.print = 3\nprint(""Radius \\(rect.area)"")\n', '\nRadius of rectangle for 25.0  is now overridden as 3\n', '\nclass Circle {\n   var radius = 12.5\n   var area: String {\n     return ""of rectangle for \\(radius) ""\n   }\n}\n\nclass Rectangle: Circle {\n   var print = 7\n   override var area: String {\n      return super.area + "" is now overridden as \\(print)""\n   }\n}\n\nlet rect = Rectangle()\nrect.radius = 25.0\nrect.print = 3\nprint(""Radius \\(rect.area)"")\n\nclass Square: Rectangle {\n   override var radius: Double {\n      didSet {\n         print = Int(radius/5.0)+1\n      }\n   }\n}\n\nlet sq = Square()\nsq.radius = 100.0\nprint(""Radius \\(sq.area)"")\n', '\nRadius of rectangle for 25.0  is now overridden as 3\nRadius of rectangle for 100.0  is now overridden as 21\n', '\nfinal class Circle {\n   final var radius = 12.5\n   var area: String {\n      return ""of rectangle for \\(radius) ""\n   }\n}\n\nclass Rectangle: Circle {\n   var print = 7\n   override var area: String {\n      return super.area + "" is now overridden as \\(print)""\n   }\n}\n\nlet rect = Rectangle()\nrect.radius = 25.0\nrect.print = 3\nprint(""Radius \\(rect.area)"")\n\nclass Square: Rectangle {\n   override var radius: Double {\n      didSet {\n         print = Int(radius/5.0)+1\n      }\n   }\n}\n\nlet sq = Square()\nsq.radius = 100.0\nprint(""Radius \\(sq.area)"")\n', ""\n<stdin>:14:18: error: var overrides a 'final' var\noverride var area: String {\n^\n<stdin>:7:9: note: overridden declaration is here\nvar area: String {\n^\n<stdin>:12:11: error: inheritance from a final class 'Circle'\nclass Rectangle: Circle {\n^\n<stdin>:25:14: error: var overrides a 'final' var\noverride var radius: Double {\n^\n<stdin>:6:14: note: overridden declaration is here\nfinal var radius = 12.5\n""]","['\nSwift 4\n98\n89\n76\n', '\nMark1:93, Mark2:89\n', '\nWelcome to Swift Super Class\nWelcome to Swift Sub Class\n', '\nRadius of rectangle for 25.0  is now overridden as 3\n', '\nRadius of rectangle for 25.0  is now overridden as 3\nRadius of rectangle for 100.0  is now overridden as 21\n', ""\n<stdin>:14:18: error: var overrides a 'final' var\noverride var area: String {\n^\n<stdin>:7:9: note: overridden declaration is here\nvar area: String {\n^\n<stdin>:12:11: error: inheritance from a final class 'Circle'\nclass Rectangle: Circle {\n^\n<stdin>:25:14: error: var overrides a 'final' var\noverride var radius: Double {\n^\n<stdin>:6:14: note: overridden declaration is here\nfinal var radius = 12.5\n""]","['Overriding|||Access to methods,properties and subscripts&&&Methods|||super.somemethod()&&&Properties|||super.someProperty()&&&Subscripts|||super[someIndex]']","[""Sub Class − when a class inherits properties, methods and functions from another class it is called as sub class|||Super Class − Class containing properties, methods and functions to inherit other classes from itself is called as a super class|||When setter is defined for overriding property the user has to define getter too.|||When we don't want to modify the inherited property getter, we can simply pass the inherited value by the syntax 'super.someProperty' to the super class.|||""]"
27,['Swift - Initialization'],"['Initializer Role for Stored Properties', 'Setting Property Values by Default', 'Parameters Initialization', 'Local & External Parameters', 'Parameters without External Names', 'Optional Property Types', 'Modifying Constant Properties During Initialization', 'Default Initializers', 'Memberwise Initializers for Structure Types', 'Initializer Delegation for Value Types', 'Class Inheritance and Initialization', 'Initializer Inheritance and Overriding', 'Failable Initializer', 'Failable Initializers for Enumerations', 'Failable Initializers for Classes', 'Overriding a Failable Initializer', 'The init! Failable Initializer', 'Required Initializers', 'Useful Video Courses']","['Syntax', 'Example', 'Rules for Initializer Delegation', 'Designated Initializers and Convenience Initializers', 'Program for Designated Initializers', 'Program for Convenience Initializers', 'Designated and Convenience Initializers in Action']","['https://www.tutorialspoint.com/swift/swift_inheritance.htm', 'https://www.tutorialspoint.com/swift/swift_deinitialization.htm', 'http://tpcg.io/X5zRRH', 'http://tpcg.io/jCzRRw', 'http://tpcg.io/MHKCft', 'http://tpcg.io/Jv2fQ2', 'http://tpcg.io/b4atZm', 'http://tpcg.io/xwQ1wL', 'http://tpcg.io/xrywb1', 'http://tpcg.io/VAxuth', 'http://tpcg.io/hVGFrC', 'http://tpcg.io/QHNnVu', 'http://tpcg.io/0tmzpd', 'http://tpcg.io/ND1mpA', 'http://tpcg.io/aeCn5F', 'http://tpcg.io/O8nUkv', 'http://tpcg.io/YdvGV5', 'http://tpcg.io/WFpOXw', 'http://tpcg.io/0cfrCT', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_inheritance.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_deinitialization.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['To assign default property value within the property definition.', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run above program using playground, we get following result. −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'A non-failable initializer can never delegate to a failable initializer.', 'The program given below describes the failable and non-failable initializers.', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","['Here instead of declaring length and breadth in init() the values are initialized in declaration itself.', ""When an external name is not needed for an initialize underscore '_' is used to override the default behavior."", ""To declare each and every subclass of the initialize 'required' keyword needs to be defined before the init() function.""]","[""Classes, structures and enumerations once declared in Swift 4 are initialized for preparing instance of a class. Initial value is initialized for stored property and also for new instances too the values are initialized to proceed further. The keyword to create initialization function is carried out by 'init()' method. Swift 4 initializer differs from Objective-C that it does not return any values. Its function is to check for initialization of newly created instances before its processing. Swift 4 also provides 'deinitialization' process for performing memory management operations once the instances are deallocated."", 'Stored property have to initialize the instances for its classes and structures before processing the instances. Stored properties use initializer to assign and initialize values thereby eradicating the need to call property observers. Initializer is used in stored property', ""To initialize an instance for a particular data type 'init()' is used. No arguments are passed inside the init() function."", ""Here the structure 'rectangle' is initialized with members length and breadth as 'Double' datatypes. Init() method is used to initialize the values for the newly created members length and double. Area of rectangle is calculated and returned by calling the rectangle function."", 'Swift 4 language provides Init() function to initialize the stored property values. Also, the user has provision to initialize the property values by default while declaring the class or structure members. When the property takes the same value alone throughout the program we can declare it in the declaration section alone rather than initializing it in init(). Setting property values by default enables the user when inheritance is defined for classes or structures.', ""In Swift 4 language the user has the provision to initialize parameters as part of the initializer's definition using init()."", 'Initialization parameters have both local and global parameter names similar to that of function and method parameters. Local parameter declaration is used to access within the initialize body and external parameter declaration is used to call the initializer. Swift 4 initializers differ from function and method initializer that they do not identify which initializer are used to call which functions.', 'To overcome this, Swift 4 introduces an automatic external name for each and every parameter in init(). This automatic external name is as equivalent as local name written before every initialization parameter.', ""When the stored property at some instance does not return any value that property is declared with an 'optional' type indicating that 'no value' is returned for that particular type. When the stored property is declared as 'optional' it automatically initializes the value to be 'nil' during initialization itself."", ""Initialization also allows the user to modify the value of constant property too. During initialization, class property allows its class instances to be modified by the super class and not by the subclass. Consider for example in the previous program 'length' is declared as 'variable' in the main class. The below program variable 'length' is modified as 'constant' variable."", 'Default initializers provide a new instance to all its declared properties of base class or structure with default values.', ""The above program is defined with class name as 'defaultexample'. Three member functions are initialized by default as 'studname?' to store 'nil' values, 'stmark' as 98 and 'pass' as Boolean value 'true'. Likewise the member values in the class can be initialized as default before processing the class member types."", ""When the custom initializers are not provided by the user, Structure types in Swift 4 will automatically receive the 'memberwise initializer'. Its main function is to initialize the new structure instances with the default memberwise initialize and then the new instance properties are passed to the memberwise initialize by name."", ""Structures are initialized by default for their membership functions during initialization for 'length' as '100.0' and 'breadth' as '200.0'. But the values are overridden during the processing of variables length and breadth as 24.0 and 32.0."", 'Initializer Delegation is defined as calling initializers from other initializers. Its main function is to act as reusability to avoid code duplication across multiple initializers.', 'Class types have two kinds of initializers to check whether defined stored properties receive an initial value namely designated initializers and convenience initializers.', 'Swift 4 does not allow its subclasses to inherit its superclass initializers for their member types by default. Inheritance is applicable to Super class initializers only to some extent which will be discussed in Automatic Initializer Inheritance.', ""When the user needs to have initializers defined in super class, subclass with initializers has to be defined by the user as custom implementation. When overriding has to be taken place by the sub class to the super class 'override' keyword has to be declared."", 'The user has to be notified when there are any initializer failures while defining a class, structure or enumeration values. Initialization of variables sometimes become a failure one due to−', ""To catch exceptions thrown by initialization method, Swift 4 produces a flexible initialize called 'failable initializer' to notify the user that something is left unnoticed while initializing the structure, class or enumeration members. Keyword to catch the failable initializer is 'init?'. Also, failable and non failable initializers cannot be defined with same parameter types and names."", 'Swift 4 language provides the flexibility to have Failable initializers for enumerations too to notify the user when the enumeration members are left from initializing values.', 'A failable initializer when declared with enumerations and structures alerts an initialization failure at any circumstance within its implementation. However, failable initializer in classes will alert the failure only after the stored properties have been set to an initial value.', 'Like that of initialize the user also has the provision to override a superclass failable initializer inside the sub class. Super class failable initialize can also be overridden with in a sub class non-failable initializer.', 'Subclass initializer cannot delegate up to the superclass initializer when overriding a failable superclass initializer with a non-failable subclass initialize.', ""Swift 4 provides 'init?' to define an optional instance failable initializer. To define an implicitly unwrapped optional instance of the specific type 'init!' is specified.""]","['\ninit() {\n   //New Instance initialization goes here\n}\n', '\nstruct rectangle {\n   var length: Double\n   var breadth: Double\n   init() {\n      length = 6\n      breadth = 12\n   }\n}\n\nvar area = rectangle()\nprint(""area of rectangle is \\(area.length*area.breadth)"")\n', '\narea of rectangle is 72.0\n', '\nstruct rectangle {\n   var length = 6\n   var breadth = 12\n}\n\nvar area = rectangle()\nprint(""area of rectangle is \\(area.length*area.breadth)"")\n', '\narea of rectangle is 72\n', '\nstruct Rectangle {\n   var length: Double\n   var breadth: Double\n   var area: Double\n   \n   init(fromLength length: Double, fromBreadth breadth: Double) {\n      self.length = length\n      self.breadth = breadth\n      area = length * breadth\n   }\n   init(fromLeng leng: Double, fromBread bread: Double) {\n      self.length = leng\n      self.breadth = bread\n      area = leng * bread\n   }\n}\n\nlet ar = Rectangle(fromLength: 6, fromBreadth: 12)\nprint(""area is: \\(ar.area)"")\n\nlet are = Rectangle(fromLeng: 36, fromBread: 12)\nprint(""area is: \\(are.area)"")\n', '\narea is: 72.0\narea is: 432.0\n', '\nstruct Days {\n   let sunday, monday, tuesday: Int\n   init(sunday: Int, monday: Int, tuesday: Int) {\n      self.sunday = sunday\n      self.monday = monday\n      self.tuesday = tuesday\n   }\n   init(daysofaweek: Int) {\n      sunday = daysofaweek\n      monday = daysofaweek\n      tuesday = daysofaweek\n   }\n}\n\nlet week = Days(sunday: 1, monday: 2, tuesday: 3)\nprint(""Days of a Week is: \\(week.sunday)"")\nprint(""Days of a Week is: \\(week.monday)"")\nprint(""Days of a Week is: \\(week.tuesday)"")\n\nlet weekdays = Days(daysofaweek: 4)\nprint(""Days of a Week is: \\(weekdays.sunday)"")\nprint(""Days of a Week is: \\(weekdays.monday)"")\nprint(""Days of a Week is: \\(weekdays.tuesday)"")\n', '\nDays of a Week is: 1\nDays of a Week is: 2\nDays of a Week is: 3\nDays of a Week is: 4\nDays of a Week is: 4\nDays of a Week is: 4\n', '\nstruct Rectangle {\n   var length: Double\n   \n   init(frombreadth breadth: Double) {\n      length = breadth * 10\n   }\n   init(frombre bre: Double) {\n      length = bre * 30\n   }\n   init(_ area: Double) {\n      length = area\n   }\n}\n\nlet rectarea = Rectangle(180.0)\nprint(""area is: \\(rectarea.length)"")\n\nlet rearea = Rectangle(370.0)\nprint(""area is: \\(rearea.length)"")\n\nlet recarea = Rectangle(110.0)\nprint(""area is: \\(recarea.length)"")\n', '\narea is: 180.0\narea is: 370.0\narea is: 110.0\n', '\nstruct Rectangle {\n   var length: Double?\n   \n   init(frombreadth breadth: Double) {\n      length = breadth * 10\n   }\n   init(frombre bre: Double) {\n      length = bre * 30\n   }\n   init(_ area: Double) {\n      length = area\n   }\n}\n\nlet rectarea = Rectangle(180.0)\nprint(""area is: \\(rectarea.length)"")\n\nlet rearea = Rectangle(370.0)\nprint(""area is: \\(rearea.length)"")\n\nlet recarea = Rectangle(110.0)\nprint(""area is: \\(recarea.length)"")\n', '\narea is: Optional(180.0)\narea is: Optional(370.0)\narea is: Optional(110.0)\n', '\nstruct Rectangle {\n   let length: Double?\n   \n   init(frombreadth breadth: Double) {\n      length = breadth * 10\n   }\n   init(frombre bre: Double) {\n      length = bre * 30\n   }\n   init(_ area: Double) {\n      length = area\n   }\n}\n\nlet rectarea = Rectangle(180.0)\nprint(""area is: \\(rectarea.length)"")\n\nlet rearea = Rectangle(370.0)\nprint(""area is: \\(rearea.length)"")\n\nlet recarea = Rectangle(110.0)\nprint(""area is: \\(recarea.length)"")\n', '\narea is: Optional(180.0)\narea is: Optional(370.0)\narea is: Optional(110.0)\n', '\nclass defaultexample {\n   var studname: String?\n   var stmark = 98\n   var pass = true\n}\nvar result = defaultexample()\n\nprint(""result is: \\(result.studname)"")\nprint(""result is: \\(result.stmark)"")\nprint(""result is: \\(result.pass)"")\n', '\nresult is: nil\nresult is: 98\nresult is: true\n', '\nstruct Rectangle {\n   var length = 100.0, breadth = 200.0\n}\nlet area = Rectangle(length: 24.0, breadth: 32.0)\n\nprint(""Area of rectangle is: \\(area.length)"")\nprint(""Area of rectangle is: \\(area.breadth)"")\n', '\nArea of rectangle is: 24.0\nArea of rectangle is: 32.0\n', '\nstruct Stmark {\n   var mark1 = 0.0, mark2 = 0.0\n}\nstruct stdb {\n   var m1 = 0.0, m2 = 0.0\n}\n\nstruct block {\n   var average = stdb()\n   var result = Stmark()\n   init() {}\n   init(average: stdb, result: Stmark) {\n      self.average = average\n      self.result = result\n   }\n\n   init(avg: stdb, result: Stmark) {\n      let tot = avg.m1 - (result.mark1 / 2)\n      let tot1 = avg.m2 - (result.mark2 / 2)\n      self.init(average: stdb(m1: tot, m2: tot1), result: result)\n   }\n}\n\nlet set1 = block()\nprint(""student result is: \\(set1.average.m1, set1.average.m2)\n\\(set1.result.mark1, set1.result.mark2)"")\n\nlet set2 = block(average: stdb(m1: 2.0, m2: 2.0),\nresult: Stmark(mark1: 5.0, mark2: 5.0))\nprint(""student result is: \\(set2.average.m1, set2.average.m2)\n\\(set2.result.mark1, set2.result.mark2)"")\n\nlet set3 = block(avg: stdb(m1: 4.0, m2: 4.0),\nresult: Stmark(mark1: 3.0, mark2: 3.0))\nprint(""student result is: \\(set3.average.m1, set3.average.m2)\n\\(set3.result.mark1, set3.result.mark2)"")\n', '\n(0.0,0.0) (0.0,0.0)\n(2.0,2.0) 5.0,5.0)\n(2.5,2.5) (3.0,3.0)\n', '\nclass mainClass {\n   var no1 : Int // local storage\n   init(no1 : Int) {\n      self.no1 = no1 // initialization\n   }\n}\n\nclass subClass : mainClass {\n   var no2 : Int // new subclass storage\n   init(no1 : Int, no2 : Int) {\n      self.no2 = no2 // initialization\n      super.init(no1:no1) // redirect to superclass\n   }\n}\n\nlet res = mainClass(no1: 10)\nlet print = subClass(no1: 10, no2: 20)\n\nprint(""res is: \\(res.no1)"")\nprint(""res is: \\(print.no1)"")\nprint(""res is: \\(print.no2)"")\n', '\nres is: 10\nres is: 10\nres is: 20\n', '\nclass mainClass {\n   var no1 : Int // local storage\n   init(no1 : Int) {\n      self.no1 = no1 // initialization\n   }\n}\n\nclass subClass : mainClass {\n   var no2 : Int\n   init(no1 : Int, no2 : Int) {\n      self.no2 = no2\n      super.init(no1:no1)\n   }\n   // Requires only one parameter for convenient method\n   override convenience init(no1: Int) {\n      self.init(no1:no1, no2:0)\n   }\n}\n\nlet res = mainClass(no1: 20)\nlet print = subClass(no1: 30, no2: 50)\n\nprint(""res is: \\(res.no1)"")\nprint(""res is: \\(print.no1)"")\nprint(""res is: \\(print.no2)"")\n', '\nres is: 20\nres is: 30\nres is: 50\n', '\nclass sides {\n   var corners = 4\n   var description: String {\n      return ""\\(corners) sides""\n   }\n}\n\nlet rectangle = sides()\nprint(""Rectangle: \\(rectangle.description)"")\n\nclass pentagon: sides {\n   override init() {\n      super.init()\n      corners = 5\n   }\n}\n\nlet bicycle = pentagon()\nprint(""Pentagon: \\(bicycle.description)"")\n', '\nRectangle: 4 sides\nPentagon: 5 sides\n', '\nclass Planet {\n   var name: String\n   init(name: String) {\n      self.name = name\n   }\n   convenience init() {\n      self.init(name: ""[No Planets]"")\n   }\n}\n\nlet plName = Planet(name: ""Mercury"")\nprint(""Planet name is: \\(plName.name)"")\n\nlet noplName = Planet()\nprint(""No Planets like that: \\(noplName.name)"")\n\nclass planets: Planet {\n   var count: Int\n   init(name: String, count: Int) {\n      self.count = count\n      super.init(name: name)\n   }\n   override convenience init(name: String) {\n      self.init(name: name, count: 1)\n   }\n}\n', '\nPlanet name is: Mercury\nNo Planets like that: [No Planets]\n', '\nstruct studrecord {\n   let stname: String\n   init?(stname: String) {\n      if stname.isEmpty {return nil }\n      self.stname = stname\n   }\n}\nlet stmark = studrecord(stname: ""Swing"")\n\nif let name = stmark {\n   print(""Student name is specified"")\n}\nlet blankname = studrecord(stname: """")\n\nif blankname == nil {\n   print(""Student name is left blank"")\n}\n', '\nStudent name is specified\nStudent name is left blank\n', '\nenum functions {\n   case a, b, c, d\n   init?(funct: String) {\n      switch funct {\n      case ""one"":\n         self = .a\n      case ""two"":\n         self = .b\n      case ""three"":\n         self = .c\n      case ""four"":\n         self = .d\n      default:\n         return nil\n      }\n   }\n}\nlet result = functions(funct: ""two"")\n\nif result != nil {\n   print(""With In Block Two"")\n}\nlet badresult = functions(funct: ""five"")\n\nif badresult == nil {\n   print(""Block Does Not Exist"")\n}\n', '\nWith In Block Two\nBlock Does Not Exist\n', '\nclass studrecord {\n   let studname: String!\n   init?(studname: String) {\n      self.studname = studname\n      if studname.isEmpty { return nil }\n   }\n}\n\nif let stname = studrecord(studname: ""Failable Initializers"") {\n   print(""Module is \\(stname.studname)"")\n}\n', '\nModule is Optional(""Failable Initializers"")\n', '\nclass Planet {\n   var name: String\n   \n   init(name: String) {\n      self.name = name\n   }\n   convenience init() {\n      self.init(name: ""[No Planets]"")\n   }\n}\nlet plName = Planet(name: ""Mercury"")\nprint(""Planet name is: \\(plName.name)"")\n\nlet noplName = Planet()\nprint(""No Planets like that: \\(noplName.name)"")\n   \nclass planets: Planet {\n   var count: Int\n   \n   init(name: String, count: Int) {\n      self.count = count\n      super.init(name: name)\n   }\n   override convenience init(name: String) {\n      self.init(name: name, count: 1)\n   }\n}\n', '\nPlanet name is: Mercury\nNo Planets like that: [No Planets]\n', '\nstruct studrecord {\nlet stname: String\n\n   init!(stname: String) {\n      if stname.isEmpty {return nil }\n      self.stname = stname\n   }\n}\nlet stmark = studrecord(stname: ""Swing"")\n\nif let name = stmark {\n   print(""Student name is specified"")\n}\n\nlet blankname = studrecord(stname: """")\n\nif blankname == nil {\n   print(""Student name is left blank"")\n}\n', '\nStudent name is specified\nStudent name is left blank\n', '\nclass classA {\n   required init() {\n      var a = 10\n      print(a)\n   }\n}\n\nclass classB: classA {\n   required init() {\n      var b = 30\n      print(b)\n   }\n}\n\nlet res = classA()\nlet print = classB()\n', '\n10\n30\n10\n']","['\ninit() {\n   //New Instance initialization goes here\n}\n', '\narea of rectangle is 72.0\n', '\narea of rectangle is 72\n', '\narea is: 72.0\narea is: 432.0\n', '\nDays of a Week is: 1\nDays of a Week is: 2\nDays of a Week is: 3\nDays of a Week is: 4\nDays of a Week is: 4\nDays of a Week is: 4\n', '\narea is: 180.0\narea is: 370.0\narea is: 110.0\n', '\narea is: Optional(180.0)\narea is: Optional(370.0)\narea is: Optional(110.0)\n', '\narea is: Optional(180.0)\narea is: Optional(370.0)\narea is: Optional(110.0)\n', '\nresult is: nil\nresult is: 98\nresult is: true\n', '\nArea of rectangle is: 24.0\nArea of rectangle is: 32.0\n', '\n(0.0,0.0) (0.0,0.0)\n(2.0,2.0) 5.0,5.0)\n(2.5,2.5) (3.0,3.0)\n', '\nres is: 10\nres is: 10\nres is: 20\n', '\nres is: 20\nres is: 30\nres is: 50\n', '\nRectangle: 4 sides\nPentagon: 5 sides\n', '\nPlanet name is: Mercury\nNo Planets like that: [No Planets]\n', '\nStudent name is specified\nStudent name is left blank\n', '\nWith In Block Two\nBlock Does Not Exist\n', '\nModule is Optional(""Failable Initializers"")\n', '\nPlanet name is: Mercury\nNo Planets like that: [No Planets]\n', '\nStudent name is specified\nStudent name is left blank\n', '\n10\n30\n10\n']","['Value Types|||Class Types&&&Inheritance is not supported for value types like structures and enumerations. Referring other initializers is done through self.init|||Inheritance is supported. Checks all stored property values are initialized', 'Designated Initializer|||Convenience Initializer&&&Considered as primary initializes for a class|||Considered as supporting initialize for a class&&&All class properties are initialized and appropriate superclass initializer are called for further initialization|||Designated initializer is called with convenience initializer to create class instance for a specific use case or input value type&&&At least one designated initializer is defined for every class|||No need to have convenience initializers compulsory defined when the class does not require initializers.&&&Init(parameters) { statements }|||convenience init(parameters) { statements }']","[""To create an initial value.|||To assign default property value within the property definition.|||To initialize an instance for a particular data type 'init()' is used. No arguments are passed inside the init() function.|||Invalid parameter values.|||Absence of required external source.|||Condition preventing initialization from succeeding.|||""]"
28,['Swift - Deinitialization'],"['Deinitialization to Deallocate Memory Space', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_initialization.htm', 'https://www.tutorialspoint.com/swift/swift_arc_overview.htm', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_initialization.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_arc_overview.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']",['When print = nil statement is omitted the values of the counter retains the same since it is not deinitialized.'],"[""Before a class instance needs to be deallocated 'deinitializer' has to be called to deallocate the memory space. The keyword 'deinit' is used to deallocate the memory spaces occupied by the system resources. Deinitialization is available only on class types."", ""Swift 4 automatically deallocates your instances when they are no longer needed, to free up resources. Swift 4 handles the memory management of instances through automatic reference counting (ARC), as described in Automatic Reference Counting. Typically you don't need to perform manual clean-up when your instances are deallocated. However, when you are working with your own resources, you might need to perform some additional clean-up yourself. For example, if you create a custom class to open a file and write some data to it, you might need to close the file before the class instance is deallocated.""]","['\nvar counter = 0; // for reference counting\nclass baseclass {\n   init() {\n      counter++;\n   }\n   deinit {\n      counter--;\n   }\n}\nvar print: baseclass? = baseclass()\n\nprint(counter)\nprint = nil\nprint(counter)\n', '\n1\n0\n', '\nvar counter = 0; // for reference counting\n\nclass baseclass {\n   init() {\n      counter++;\n   }\n   deinit {\n      counter--;\n   }\n}\nvar print: baseclass? = baseclass()\nprint(counter)\nprint(counter)\n', '\n1\n1\n']","['\n1\n0\n', '\n1\n1\n']",[],[]
29,['Swift - ARC Overview'],"['Functions of ARC', 'ARC Program', 'ARC Strong Reference Cycles Class Instances', 'ARC Weak and Unowned References', 'Strong Reference Cycles for Closures', 'Weak and Unowned References', 'Useful Video Courses']","['Weak Reference Program', 'Unowned Reference Program']","['https://www.tutorialspoint.com/swift/swift_deinitialization.htm', 'https://www.tutorialspoint.com/swift/swift_optional_chaining.htm', 'http://tpcg.io/i8lsK8', 'http://tpcg.io/o29EmD', 'http://tpcg.io/pqtRco', 'http://tpcg.io/nYJWCQ', 'http://tpcg.io/JnpLeq', 'http://tpcg.io/6mp89Y', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_deinitialization.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_optional_chaining.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Information about the instance type and its values are stored in memory.', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'Class type properties has two ways to resolve strong reference cycles −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']",[],"['Memory management functions and its usage are handled in Swift 4 language through Automatic reference counting (ARC). ARC is used to initialize and deinitialize the system resources thereby releasing memory spaces used by the class instances when the instances are no longer needed. ARC keeps track of information about the relationships between our code instances to manage the memory resources effectively.', 'ARC allocates a chunk of memory to store the information each and every time when a new class instance is created by init().', 'When the class instance is no longer needed it automatically frees the memory space by deinit() for further class instance storage and retrieval.', 'ARC keeps in track of currently referring class instances properties, constants and variables so that deinit() is applied only to those unused instances.', ""ARC maintains a 'strong reference' to those class instance property, constants and variables to restrict deallocation when the class instance is currently in use."", ""These references are used to enable one instance to refer other instances in a reference cycle. Then the instances may refer to each and every instances instead of caring about strong reference cycle. When the user knows that some instance may return 'nil' values we may point that using weak reference. When the instance going to return something rather than nil then declare it with unowned reference."", ""When we assign a closure to the class instance property and to the body of the closure to capture particular instance strong reference cycle can occur. Strong reference to the closure is defined by 'self.someProperty' or 'self.someMethod()'. Strong reference cycles are used as reference types for the closures."", ""When the closure and the instance refer to each other the user may define the capture in a closure as an unowned reference. Then it would not allow the user to deallocate the instance at the same time. When the instance sometime return a 'nil' value define the closure with the weak instance.""]","['\nclass StudDetails {\n   var stname: String!\n   var mark: Int!\n   \n   init(stname: String, mark: Int) {\n      self.stname = stname\n      self.mark = mark\n   }\n   deinit {\n      print(""Deinitialized \\(self.stname)"")\n      print(""Deinitialized \\(self.mark)"")\n   }\n}\n\nlet stname = ""Swift 4""\nlet mark = 98\n\nprint(stname)\nprint(mark)\n', '\nSwift 4\n98\n', '\nclass studmarks {\n   let name: String\n   var stud: student?\n   \n   init (name: String) {\n      print(""Initializing: \\(name)"")\n      self.name = name\n   }\n   deinit {\n      print(""Deallocating: \\(self.name)"")\n   }\n}\n\nclass student {\n   let name: String\n   var strname: studmarks?\n   \n   init (name: String) {\n      print(""Initializing: \\(name)"")\n      self.name = name\n   }\n   deinit {\n      print(""Deallocating: \\(self.name)"")\n   }\n}\n\nvar shiba: studmarks?\nvar mari: student?\n\nshiba = studmarks(name: ""Swift 4"")\nmari = student(name: ""ARC"")\n\nshiba!.stud = mari\nmari!.strname = shiba\n', '\nInitializing: Swift 4\nInitializing: ARC\n', '\nclass module {\n   let name: String\n   init(name: String) { self.name = name }\n   var sub: submodule?\n   deinit { print(""\\(name) Is The Main Module"") }\n}\n\nclass submodule {\n   let number: Int\n   init(number: Int) { self.number = number }\n   weak var topic: module?\n\n   deinit { print(""Sub Module with its topic number is \\(number)"") }\n}\n\nvar toc: module?\nvar list: submodule?\ntoc = module(name: ""ARC"")\nlist = submodule(number: 4)\ntoc!.sub = list\nlist!.topic = toc\n\ntoc = nil\nlist = nil\n', '\nARC Is The Main Module\nSub Module with its topic number is 4\n', '\nclass student {\n   let name: String\n   var section: marks?\n   init(name: String) {\n      self.name = name\n   }\n   deinit { print(""\\(name)"") }\n}\n\nclass marks {\n   let marks: Int\n   unowned let stname: student\n   \n   init(marks: Int, stname: student) {\n      self.marks = marks\n      self.stname = stname\n   }\n   deinit { print(""Marks Obtained by the student is \\(marks)"") }\n}\n\nvar module: student?\nmodule = student(name: ""ARC"")\nmodule!.section = marks(marks: 98, stname: module!)\nmodule = nil\n', '\nARC\nMarks Obtained by the student is 98\n', '\nclass HTMLElement {\n   let samplename: String\n   let text: String?\n   \n   lazy var asHTML: () -> String = {\n      if let text = self.text {\n         return ""<\\(self.samplename)>\\(text)</\\(self.samplename)>""\n      } else {\n         return ""<\\(self.samplename) />""\n      }\n   }\n   init(samplename: String, text: String? = nil) {\n      self.samplename = samplename\n      self.text = text\n   }\n   deinit {\n      print(""\\(samplename) is being deinitialized"")\n   }\n}\n\nvar paragraph: HTMLElement? = HTMLElement(samplename: ""p"", text: ""Welcome to Closure SRC"")\nprint(paragraph!.asHTML())\n', '\n<p>Welcome to Closure SRC</p>\n', '\nclass HTMLElement {\n   let module: String\n   let text: String?\n   \n   lazy var asHTML: () -> String = {\n      [unowned self] in\n      if let text = self.text {\n         return ""<\\(self.module)>\\(text)</\\(self.module)>""\n      } else {\n         return ""<\\(self.module) />""\n      }\n   }\n   init(module: String, text: String? = nil) {\n      self.module = module\n      self.text = text\n   }\n   deinit {\n      print(""\\(module) the deinit()"")\n   }\n}\n\nvar paragraph: HTMLElement? = HTMLElement(module: ""Inside"", text: ""ARC Weak References"")\nprint(paragraph!.asHTML())\nparagraph = nil\n', '\n<Inside>ARC Weak References</Inside>\nInside the deinit()\n']","['\nSwift 4\n98\n', '\nInitializing: Swift 4\nInitializing: ARC\n', '\nARC Is The Main Module\nSub Module with its topic number is 4\n', '\nARC\nMarks Obtained by the student is 98\n', '\n<p>Welcome to Closure SRC</p>\n', '\n<Inside>ARC Weak References</Inside>\nInside the deinit()\n']",[],"[""ARC allocates a chunk of memory to store the information each and every time when a new class instance is created by init().|||Information about the instance type and its values are stored in memory.|||When the class instance is no longer needed it automatically frees the memory space by deinit() for further class instance storage and retrieval.|||ARC keeps in track of currently referring class instances properties, constants and variables so that deinit() is applied only to those unused instances.|||ARC maintains a 'strong reference' to those class instance property, constants and variables to restrict deallocation when the class instance is currently in use.|||Weak References|||Unowned References|||""]"
30,['Swift - Optional Chaining'],"['Optional Chaining as an Alternative to Forced Unwrapping', 'Defining Model Classes for Optional Chaining & Accessing Properties', 'Calling Methods Through Optional Chaining', 'Accessing Subscripts through Optional Chaining', 'Accessing Subscripts of Optional Type', 'Linking Multiple Levels of Chaining', 'Chaining on Methods with Optional Return Values', 'Useful Video Courses']","[""Program for Optional Chaining with '!'"", ""Program for Optional Chaining with '?'"", 'Program 1', 'Program 2']","['https://www.tutorialspoint.com/swift/swift_arc_overview.htm', 'https://www.tutorialspoint.com/swift/swift_type_casting.htm', 'http://tpcg.io/7a0pK5', 'http://tpcg.io/NsL74O', 'http://tpcg.io/7Oz1bR', 'http://tpcg.io/GNLRhc', 'http://tpcg.io/17WZuu', 'http://tpcg.io/NJBdPX', 'http://tpcg.io/eQEWbI', 'http://tpcg.io/E5DouI', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_arc_overview.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_type_casting.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'Multiple chaining of optional can be linked −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'Optional chaining is used to access subclasses defined methods too.', 'When we run the above program using playground, we get the following result −']","[""if the optional contains a 'value' then calling its related property, methods and subscripts returns values"", ""if the optional contains a 'nil' value all its its related property, methods and subscripts returns nil"", 'Multiple sub classes can also be linked with its super class methods, properties and subscripts by optional chaining.']","[""The process of querying, calling properties, subscripts and methods on an optional that may be 'nil' is defined as optional chaining. Optional chaining return two values −"", ""Since multiple queries to methods, properties and subscripts are grouped together failure to one chain will affect the entire chain and results in 'nil' value."", ""Optional chaining is specified after the optional value with '?' to call a property, method or subscript when the optional value returns some values."", ""The above program declares 'election poll' as class name and contains 'candidate' as membership function. The subclass is declared as 'poll booth' and 'name' as its membership function which is initialized as 'MP'. The call to the super class is initialized by creating an instance 'cand' with optional '!'. Since the values are not declared in its base class, 'nil' value is stored thereby returning a fatal error by the force unwrapping procedure."", ""The program above declares 'election poll' as class name and contains 'candidate' as membership function. The subclass is declared as 'poll booth' and 'name' as its membership function which is initialized as 'MP'. The call to the super class is initialized by creating an instance 'cand' with optional '?'. Since the values are not declared in its base class 'nil' value is stored and printed in the console by the else handler block."", 'Swift 4 language also provides the concept of optional chaining, to declare more than one subclasses as model classes. This concept will be very useful to define complex models and to access the properties, methods and subscripts sub properties.', ""The function circleprint() declared inside the circle() sub class is called by creating an instance named 'circname'. The function will return a value if it contains some value otherwise it will return some user defined print message by checking the statement 'if circname.print?.circleprint() != nil'."", ""Optional chaining is used to set and retrieve a subscript value to validate whether call to that subscript returns a value. '?' is placed before the subscript braces to access the optional value on the particular subscript."", ""In the above program the instance values for the membership function 'radiusName' is not specified. Hence program call to the function will return only else part whereas to return the values we have to define the values for the particular membership function."", ""In the above program, the instance values for the membership function 'radiusName' is specified. Hence program call to the function will now return values."", ""The optional values for subscripts can be accessed by referring their subscript values. It can be accessed as subscript[0], subscript[1] etc. The default subscript values for 'radius' are first assigned as [35, 45, 78, 101] and for 'Circle' [90, 45, 56]]. Then the subscript values are changed as Radius[0] to 78 and Circle[1] to 45."", 'If retrieving type is not optional, optional chaining will return an optional value. For example if String through optional chaining it will return String? Value', ""In the above program, the instance values for the membership function 'radiusName' is not specified. Hence, the program call to the function will return only else part whereas to return the values we have to define the values for the particular membership function."", 'If the retrieving type is already optional, then optional chaining will also return an optional value. For example if String? Is accessed through optional chaining it will return String? Value..', ""In the above program, the instance values for the membership function 'radiusName' is specified. Hence, the program call to the function will now return values.""]","['\nclass ElectionPoll {\n   var candidate: Pollbooth?\n}\n\nlass Pollbooth {\n   var name = ""MP""\n}\n\nlet cand = ElectionPoll()\nlet candname = cand.candidate!.name\n', ""\nfatal error: unexpectedly found nil while unwrapping an Optional value\n0 Swift 4 0x0000000103410b68\nllvm::sys::PrintStackTrace(__sFILE*) + 40\n1 Swift 4 0x0000000103411054 SignalHandler(int) + 452\n2 libsystem_platform.dylib 0x00007fff9176af1a _sigtramp + 26\n3 libsystem_platform.dylib 0x000000000000000b _sigtramp + 1854492939\n4 libsystem_platform.dylib 0x00000001074a0214 _sigtramp + 1976783636\n5 Swift 4 0x0000000102a85c39\nllvm::JIT::runFunction(llvm::Function*, std::__1::vector > const&) + 329\n6 Swift 4 0x0000000102d320b3\nllvm::ExecutionEngine::runFunctionAsMain(llvm::Function*,\nstd::__1::vector<std::__1::basic_string, std::__1::allocator >,\nstd::__1::allocator<std::__1::basic_string, std::__1::allocator > > > const&,\nchar const* const*) + 1523\n7 Swift 4 0x000000010296e6ba Swift 4::RunImmediately(Swift\n4::CompilerInstance&, std::__1::vector<std::__1::basic_string,\nstd::__1::allocator >, std::__1::allocator<std::__1::basic_string,\nstd::__1::allocator > > > const&, Swift 4::IRGenOptions&, Swift 4::SILOptions\nconst&) + 1066\n8 Swift 4 0x000000010275764b frontend_main(llvm::ArrayRef,\nchar const*, void*) + 5275\n9 Swift 4 0x0000000102754a6d main + 1677\n10 libdyld.dylib 0x00007fff8bb9e5c9 start + 1\n11 libdyld.dylib 0x000000000000000c start + 1950751300\nStack dump:\n0. Program arguments:\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/\nusr/bin/Swift 4 -frontend -interpret - -target x86_64-apple-darwin14.0.0 -\ntarget-cpu core2 -sdk\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/\nSDKs/MacOSX10.10.sdk -module-name main\n/bin/sh: line 47: 15672 Done cat <<'SWIFT 4'\nimport Foundation\n</std::__1::basic_string</std::__1::basic_string</std::__1::basic_string</std::\n__1::basic_string\n"", '\nclass ElectionPoll {\n   var candidate: Pollbooth?\n}\n\nclass Pollbooth {\n   var name = ""MP""\n}\nlet cand = ElectionPoll()\n\nif let candname = cand.candidate?.name {\n   print(""Candidate name is \\(candname)"")\n} else {\n   print(""Candidate name cannot be retreived"")\n}\n', '\nCandidate name cannot be retreived\n', '\nclass rectangle {\n   var print: circle?\n}\n\nclass circle {\n   var area = [radius]()\n   var cprint: Int {\n      return area.count\n   }\n   subscript(i: Int) -> radius {\n      get {\n         return area[i]\n      }\n      set {\n         area[i] = newValue\n      }\n   }\n   func circleprint() {\n      print(""The number of rooms is \\(cprint)"")\n   }\n   var rectarea: circumference?\n}\n\nclass radius {\n   let radiusname: String\n   init(radiusname: String) { self.radiusname = radiusname }\n}\n\nclass circumference {\n   var circumName: String?\n   var circumNumber: String?\n   var street: String?\n\n   func buildingIdentifier() -> String? {\n      if circumName != nil {\n         return circumName\n      } else if circumNumber != nil {\n         return circumNumber\n      } else {\n         return nil\n      }\n   }\n}\n\nlet rectname = rectangle()\nif let rectarea = rectname.print?.cprint {\n   print(""Area of rectangle is \\(rectarea)"")\n} else {\n   print(""Rectangle Area is not specified"")\n}\n', '\nRectangle Area is not specified\n', '\nclass rectangle {\n   var print: circle?\n}\n\nclass circle {\n   var area = [radius]()\n   var cprint: Int {\n      return area.count\n   }\n   subscript(i: Int) -> radius {\n      get {\n         return area[i]\n      }\n      set {\n         area[i] = newValue\n      }\n   }\n\n   func circleprint() {\n      print(""Area of Circle is: \\(cprint)"")\n   }\n   var rectarea: circumference?\n}\n\nclass radius {\n   let radiusname: String\n   init(radiusname: String) { self.radiusname = radiusname }\n}\n\nclass circumference {\n   var circumName: String?\n   var circumNumber: String?\n   var circumarea: String?\n   \n   func buildingIdentifier() -> String? {\n      if circumName != nil {\n         return circumName\n      } else if circumNumber != nil {\n         return circumNumber\n      } else {\n         return nil\n      }\n   }\n}\n\nlet circname = rectangle()\n\nif circname.print?.circleprint() != nil {\n   print(""Area of circle is specified)"")\n} else {\n   print(""Area of circle is not specified"")\n}\n', '\nArea of circle is not specified\n', '\nclass rectangle {\n   var print: circle?\n}\n\nclass circle {\n   var area = [radius]()\n   var cprint: Int {\n      return area.count\n   }\n   subscript(i: Int) -> radius {\n      get {\n         return area[i]\n      }\n      set {\n         area[i] = newValue\n      }\n   }\n   func circleprint() {\n      print(""The number of rooms is \\(cprint)"")\n   }\n   var rectarea: circumference?\n}\n\nclass radius {\n   let radiusname: String\n   init(radiusname: String) { self.radiusname =  radiusname }\n}\n\nclass circumference {\n   var circumName: String?\n   var circumNumber: String?\n   var circumarea: String?\n   \n   func buildingIdentifier() -> String? {\n      if circumName != nil {\n         return circumName\n      } else if circumNumber != nil {\n         return circumNumber\n      } else {\n         return nil\n      }\n   }\n}\n\nlet circname = rectangle()\n\nif let radiusName = circname.print?[0].radiusname {\n   print(""The first room name is \\(radiusName)."")\n} else {\n   print(""Radius is not specified."")\n}\n', '\nRadius is not specified.\n', '\nclass rectangle {\n   var print: circle?\n}\n\nclass circle {\n   var area = [radius]()\n   var cprint: Int {\n      return area.count\n   }\n   subscript(i: Int) -> radius {\n      get {\n         return area[i]\n      }\n      set {\n         area[i] = newValue\n      }\n   }\n   func circleprint() {\n      print(""The number of rooms is \\(cprint)"")\n   }\n   var rectarea: circumference?\n}\n\nclass radius {\n   let radiusname: String\n   init(radiusname: String) { self.radiusname = radiusname }\n}\n\nclass circumference {\n   var circumName: String?\n   var circumNumber: String?\n   var circumarea: String?\n   \n   func buildingIdentifier() -> String? {\n      if circumName != nil {\n         return circumName\n      } else if circumNumber != nil {\n         return circumNumber\n      } else {\n         return nil\n      }\n   }\n}\n\nlet circname = rectangle()\ncircname.print?[0] = radius(radiusname: ""Diameter"")\nlet printing = circle()\n\nprinting.area.append(radius(radiusname: ""Units""))\nprinting.area.append(radius(radiusname: ""Meter""))\ncircname.print = printing\n\nif let radiusName = circname.print?[0].radiusname {\n   print(""Radius is measured in \\(radiusName)."")\n} else {\n   print(""Radius is not specified."")\n}\n', '\nRadius is measured in Units.\n', '\nclass rectangle {\n   var print: circle?\n}\n\nclass circle {\n   var area = [radius]()\n   var cprint: Int {\n      return area.count\n   }\n\n   subscript(i: Int) -> radius {\n      get {\n         return area[i]\n      }\n      set {\n         area[i] = newValue\n      }\n   }\n   func circleprint() {\n      print(""The number of rooms is \\(cprint)"")\n   }\n   var rectarea: circumference?\n}\n\nclass radius {\n   let radiusname: String\n   init(radiusname: String) { self.radiusname = radiusname }\n}\n\nclass circumference {\n   var circumName: String?\n   var circumNumber: String?\n   var circumarea: String?\n   \n   func buildingIdentifier() -> String? {\n      if circumName != nil {\n         return circumName\n      } else if circumNumber != nil {\n         return circumNumber\n      } else {\n         return nil\n      }\n   }\n}\n\nlet circname = rectangle()\ncircname.print?[0] = radius(radiusname: ""Diameter"")\n\nlet printing = circle()\nprinting.area.append(radius(radiusname: ""Units""))\nprinting.area.append(radius(radiusname: ""Meter""))\ncircname.print = printing\n\nvar area = [""Radius"": [35, 45, 78, 101], ""Circle"": [90, 45, 56]]\narea[""Radius""]?[1] = 78\narea[""Circle""]?[1]--\n\nprint(area[""Radius""]?[0])\nprint(area[""Radius""]?[1])\nprint(area[""Radius""]?[2])\nprint(area[""Radius""]?[3])\n\nprint(area[""Circle""]?[0])\nprint(area[""Circle""]?[1])\nprint(area[""Circle""]?[2])\n', '\nOptional(35)\nOptional(78)\nOptional(78)\nOptional(101)\nOptional(90)\nOptional(44)\nOptional(56)\n', '\nclass rectangle {\n   var print: circle?\n}\n\nclass circle {\n   var area = [radius]()\n   var cprint: Int {\n      return area.count\n   }\n   subscript(i: Int) -> radius {\n      get {\n         return area[i]\n      }\n      set {\n         area[i] = newValue\n      }\n   }\n   func circleprint() {\n      print(""The number of rooms is \\(cprint)"")\n   }\n   var rectarea: circumference?\n}\n\nclass radius {\n   let radiusname: String\n   init(radiusname: String) { self.radiusname = radiusname }\n}\n\nclass circumference {\n   var circumName: String?\n   var circumNumber: String?\n   var circumarea: String?\n\n   func buildingIdentifier() -> String? {\n      if circumName != nil {\n         return circumName\n      } else if circumNumber != nil {\n         return circumNumber\n      } else {\n         return nil\n      }\n   }\n}\n\nlet circname = rectangle()\n\nif let radiusName = circname.print?[0].radiusname {\n   print(""The first room name is \\(radiusName)."")\n} else {\n   print(""Radius is not specified."")\n}\n', '\nRadius is not specified.\n', '\nclass rectangle {\n   var print: circle?\n}\n\nclass circle {\n   var area = [radius]()\n   var cprint: Int {\n      return area.count\n   }\n   subscript(i: Int) -> radius {\n      get {\n         return area[i]\n      }\n      set {\n         area[i] = newValue\n      }\n   }\n   func circleprint() {\n      print(""The number of rooms is \\(cprint)"")\n   }\n   var rectarea: circumference?\n}\n\nclass radius {\n   let radiusname: String\n   init(radiusname: String) { self.radiusname = radiusname }\n}\n\nclass circumference {\n   var circumName: String?\n   var circumNumber: String?\n   var circumarea: String?\n   \n   func buildingIdentifier() -> String? {\n      if circumName != nil {\n         return circumName\n      } else if circumNumber != nil {\n         return circumNumber\n      } else {\n         return nil\n      }\n   }\n}\n\nlet circname = rectangle()\ncircname.print?[0] = radius(radiusname: ""Diameter"")\nlet printing = circle()\n\nprinting.area.append(radius(radiusname: ""Units""))\nprinting.area.append(radius(radiusname: ""Meter""))\ncircname.print = printing\n\nif let radiusName = circname.print?[0].radiusname {\n   print(""Radius is measured in \\(radiusName)."")\n} else {\n   print(""Radius is not specified."")\n}\n', '\nRadius is measured in Units.\n', '\nclass rectangle {\n   var print: circle?\n}\n\nclass circle {\n   var area = [radius]()\n   var cprint: Int {\n      return area.count\n   }\n   subscript(i: Int) -> radius {\n      get {\n         return area[i]\n      }\n      set {\n         area[i] = newValue\n      }\n   }\n   func circleprint() {\n      print(""Area of Circle is: \\(cprint)"")\n   }\n   var rectarea: circumference?\n}\n\nclass radius {\n   let radiusname: String\n   init(radiusname: String) { self.radiusname = radiusname }\n}\n\nclass circumference {\n   var circumName: String?\n   var circumNumber: String?\n   var circumarea: String?\n   \n   func buildingIdentifier() -> String? {\n      if circumName != nil {\n         return circumName\n      } else if circumNumber != nil {\n         return circumNumber\n      } else {\n         return nil\n      }\n   }\n}\n\nlet circname = rectangle()\n\nif circname.print?.circleprint() != nil {\n   print(""Area of circle is specified)"")\n} else {\n   print(""Area of circle is not specified"")\n}\n', '\nArea of circle is not specified\n']","[""\nfatal error: unexpectedly found nil while unwrapping an Optional value\n0 Swift 4 0x0000000103410b68\nllvm::sys::PrintStackTrace(__sFILE*) + 40\n1 Swift 4 0x0000000103411054 SignalHandler(int) + 452\n2 libsystem_platform.dylib 0x00007fff9176af1a _sigtramp + 26\n3 libsystem_platform.dylib 0x000000000000000b _sigtramp + 1854492939\n4 libsystem_platform.dylib 0x00000001074a0214 _sigtramp + 1976783636\n5 Swift 4 0x0000000102a85c39\nllvm::JIT::runFunction(llvm::Function*, std::__1::vector > const&) + 329\n6 Swift 4 0x0000000102d320b3\nllvm::ExecutionEngine::runFunctionAsMain(llvm::Function*,\nstd::__1::vector<std::__1::basic_string, std::__1::allocator >,\nstd::__1::allocator<std::__1::basic_string, std::__1::allocator > > > const&,\nchar const* const*) + 1523\n7 Swift 4 0x000000010296e6ba Swift 4::RunImmediately(Swift\n4::CompilerInstance&, std::__1::vector<std::__1::basic_string,\nstd::__1::allocator >, std::__1::allocator<std::__1::basic_string,\nstd::__1::allocator > > > const&, Swift 4::IRGenOptions&, Swift 4::SILOptions\nconst&) + 1066\n8 Swift 4 0x000000010275764b frontend_main(llvm::ArrayRef,\nchar const*, void*) + 5275\n9 Swift 4 0x0000000102754a6d main + 1677\n10 libdyld.dylib 0x00007fff8bb9e5c9 start + 1\n11 libdyld.dylib 0x000000000000000c start + 1950751300\nStack dump:\n0. Program arguments:\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/\nusr/bin/Swift 4 -frontend -interpret - -target x86_64-apple-darwin14.0.0 -\ntarget-cpu core2 -sdk\n/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/\nSDKs/MacOSX10.10.sdk -module-name main\n/bin/sh: line 47: 15672 Done cat <<'SWIFT 4'\nimport Foundation\n</std::__1::basic_string</std::__1::basic_string</std::__1::basic_string</std::\n__1::basic_string\n"", '\nCandidate name cannot be retreived\n', '\nRectangle Area is not specified\n', '\nArea of circle is not specified\n', '\nRadius is not specified.\n', '\nRadius is measured in Units.\n', '\nOptional(35)\nOptional(78)\nOptional(78)\nOptional(101)\nOptional(90)\nOptional(44)\nOptional(56)\n', '\nRadius is not specified.\n', '\nRadius is measured in Units.\n', '\nArea of circle is not specified\n']","[""Optional Chaining '?'|||Access to methods,properties and subscriptsOptional Chaining '!' to force Unwrapping&&&? is placed after the optional value to call property, method or subscript|||! is placed after the optional value to call property, method or subscript to force unwrapping of value&&&Fails gracefully when the optional is 'nil'|||Forced unwrapping triggers a run time error when the optional is 'nil'""]","[""if the optional contains a 'value' then calling its related property, methods and subscripts returns values|||if the optional contains a 'nil' value all its its related property, methods and subscripts returns nil|||""]"
31,['Swift - Type Casting'],"['Defining a Class Hierarchy', 'Type Checking', 'Downcasting', 'Typecasting: Any and Any Object', 'AnyObject', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_optional_chaining.htm', 'https://www.tutorialspoint.com/swift/swift_extensions.htm', 'http://tpcg.io/6GsqA1', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_optional_chaining.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_extensions.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', ""To represent the instance of any class type, 'AnyObject' keyword is used."", 'When we run the above program using playground, we get the following result −']","[""The keyword 'Any' is used to represent an instance which belongs to any type including function types.""]","[""To validate the type of an instance 'Type Casting' comes into play in Swift 4 language. It is used to check whether the instance type belongs to a particular super class or subclass or it is defined in its own hierarchy."", ""Swift 4 type casting provides two operators 'is' to check the type of a value and 'as' and to cast the type value to a different type. Type casting also checks whether the instance type follows particular protocol conformance standard."", 'Type casting is used to check the type of instances to find out whether it belongs to particular class type. Also, it checks hierarchy of classes and its subclasses to check and cast those instances to make it as a same hierarchy.', ""Type checking is done with the 'is' operator. The 'is' type check operator checks whether the instance belongs to particular subclass type and returns 'true' if it belongs to that instance else it will return 'false'."", ""Downcasting the subclass type can be done with two operators (as? and as!).'as?' returns an optional value when the value returns nil. It is used to check successful downcast."", ""'as!' returns force unwrapping as discussed in the optional chaining when the downcasting returns nil value. It is used to trigger runtime error in case of downcast failure""]","['\nclass Subjects {\n   var physics: String\n   init(physics: String) {\n      self.physics = physics\n   }\n}\n\nclass Chemistry: Subjects {\n   var equations: String\n   init(physics: String, equations: String) {\n      self.equations = equations\n      super.init(physics: physics)\n   }\n}\n\nclass Maths: Subjects {\n   var formulae: String\n   init(physics: String, formulae: String) {\n      self.formulae = formulae\n      super.init(physics: physics)\n   }\n}\n\nlet sa = [ Chemistry(physics: ""solid physics"", equations: ""Hertz""),\n   Maths(physics: ""Fluid Dynamics"", formulae: ""Giga Hertz"")]\n\nlet samplechem = Chemistry(physics: ""solid physics"", equations: ""Hertz"")\nprint(""Instance physics is: \\(samplechem.physics)"")\nprint(""Instance equation is: \\(samplechem.equations)"")\n\nlet samplemaths = Maths(physics: ""Fluid Dynamics"", formulae: ""Giga Hertz"")\nprint(""Instance physics is: \\(samplemaths.physics)"")\nprint(""Instance formulae is: \\(samplemaths.formulae)"")\n', '\nInstance physics is: solid physics\nInstance equation is: Hertz\nInstance physics is: Fluid Dynamics\nInstance formulae is: Giga Hertz\n', '\nclass Subjects {\n   var physics: String\n   init(physics: String) {\n      self.physics = physics\n   }\n}\n\nclass Chemistry: Subjects {\n   var equations: String\n   init(physics: String, equations: String) {\n      self.equations = equations\n      super.init(physics: physics)\n   }\n}\n\nclass Maths: Subjects {\n   var formulae: String\n   init(physics: String, formulae: String) {\n      self.formulae = formulae\n      super.init(physics: physics)\n   }\n}\n\nlet sa = [\n   Chemistry(physics: ""solid physics"", equations: ""Hertz""),\n   Maths(physics: ""Fluid Dynamics"", formulae: ""Giga Hertz""),\n   Chemistry(physics: ""Thermo physics"", equations: ""Decibels""),\n   Maths(physics: ""Astro Physics"", formulae: ""MegaHertz""),\n   Maths(physics: ""Differential Equations"", formulae: ""Cosine Series"")]\n\nlet samplechem = Chemistry(physics: ""solid physics"", equations: ""Hertz"")\nprint(""Instance physics is: \\(samplechem.physics)"")\nprint(""Instance equation is: \\(samplechem.equations)"")\n\nlet samplemaths = Maths(physics: ""Fluid Dynamics"", formulae: ""Giga Hertz"")\nprint(""Instance physics is: \\(samplemaths.physics)"")\nprint(""Instance formulae is: \\(samplemaths.formulae)"")\n\nvar chemCount = 0\nvar mathsCount = 0\nfor item in sa {\n   if item is Chemistry {\n      ++chemCount\n   } else if item is Maths {\n      ++mathsCount\n   }\n}\n\nprint(""Subjects in chemistry contains \\(chemCount) topics and maths contains \\(mathsCount) topics"")\n', '\nInstance physics is: solid physics\nInstance equation is: Hertz\nInstance physics is: Fluid Dynamics\nInstance formulae is: Giga Hertz\nSubjects in chemistry contains 2 topics and maths contains 3 topics\n', '\nclass Subjects {\n   var physics: String\n   init(physics: String) {\n      self.physics = physics\n   }\n}\n\nclass Chemistry: Subjects {\n   var equations: String\n   init(physics: String, equations: String) {\n      self.equations = equations\n      super.init(physics: physics)\n   }\n}\n\nclass Maths: Subjects {\n   var formulae: String\n   init(physics: String, formulae: String) {\n      self.formulae = formulae\n      super.init(physics: physics)\n   }\n}\n\nlet sa = [\n   Chemistry(physics: ""solid physics"", equations: ""Hertz""),\n   Maths(physics: ""Fluid Dynamics"", formulae: ""Giga Hertz""),\n   Chemistry(physics: ""Thermo physics"", equations: ""Decibels""),\n   Maths(physics: ""Astro Physics"", formulae: ""MegaHertz""),\n   Maths(physics: ""Differential Equations"", formulae: ""Cosine Series"")]\n\nlet samplechem = Chemistry(physics: ""solid physics"", equations: ""Hertz"")\nprint(""Instance physics is: \\(samplechem.physics)"")\nprint(""Instance equation is: \\(samplechem.equations)"")\n\nlet samplemaths = Maths(physics: ""Fluid Dynamics"", formulae: ""Giga Hertz"")\nprint(""Instance physics is: \\(samplemaths.physics)"")\nprint(""Instance formulae is: \\(samplemaths.formulae)"")\n\nvar chemCount = 0\nvar mathsCount = 0\n\nfor item in sa {\n   if let print = item as? Chemistry {\n      print(""Chemistry topics are: \'\\(print.physics)\', \\(print.equations)"")\n   } else if let example = item as? Maths {\n      print(""Maths topics are: \'\\(example.physics)\', \\(example.formulae)"")\n   }\n}\n', ""\nInstance physics is: solid physics\nInstance equation is: Hertz\nInstance physics is: Fluid Dynamics\nInstance formulae is: Giga Hertz\nChemistry topics are: 'solid physics', Hertz\nMaths topics are: 'Fluid Dynamics', Giga Hertz\nChemistry topics are: 'Thermo physics', Decibels\nMaths topics are: 'Astro Physics', MegaHertz\nMaths topics are: 'Differential Equations', Cosine Series\n"", '\nclass Subjects {\n   var physics: String\n   init(physics: String) {\n      self.physics = physics\n   }\n}\n\nclass Chemistry: Subjects {\n   var equations: String\n   init(physics: String, equations: String) {\n      self.equations = equations\n      super.init(physics: physics)\n   }\n}\n\nclass Maths: Subjects {\n   var formulae: String\n   init(physics: String, formulae: String) {\n      self.formulae = formulae\n      super.init(physics: physics)\n   }\n}\n\nlet sa = [\n   Chemistry(physics: ""solid physics"", equations: ""Hertz""),\n   Maths(physics: ""Fluid Dynamics"", formulae: ""Giga Hertz""),\n   Chemistry(physics: ""Thermo physics"", equations: ""Decibels""),\n   Maths(physics: ""Astro Physics"", formulae: ""MegaHertz""),\n   Maths(physics: ""Differential Equations"", formulae: ""Cosine Series"")]\n\nlet samplechem = Chemistry(physics: ""solid physics"", equations: ""Hertz"")\nprint(""Instance physics is: \\(samplechem.physics)"")\nprint(""Instance equation is: \\(samplechem.equations)"")\n\nlet samplemaths = Maths(physics: ""Fluid Dynamics"", formulae: ""Giga Hertz"")\nprint(""Instance physics is: \\(samplemaths.physics)"")\nprint(""Instance formulae is: \\(samplemaths.formulae)"")\n\nvar chemCount = 0\nvar mathsCount = 0\n\nfor item in sa {\n   if let print = item as? Chemistry {\n      print(""Chemistry topics are: \'\\(print.physics)\', \\(print.equations)"")\n   } else if let example = item as? Maths {\n      print(""Maths topics are: \'\\(example.physics)\', \\(example.formulae)"")\n   }\n}\n\nvar exampleany = [Any]()\n\nexampleany.append(12)\nexampleany.append(3.14159)\nexampleany.append(""Example for Any"")\nexampleany.append(Chemistry(physics: ""solid physics"", equations: ""Hertz""))\n\nfor print in exampleany {\n   switch print {\n      case let someInt as Int:\n         print(""Integer value is \\(someInt)"")\n      case let someDouble as Double where someDouble > 0:\n         print(""Pi value is \\(someDouble)"")\n      case let someString as String:\n         print(""\\(someString)"")\n      case let phy as Chemistry:   \n         print(""Topics \'\\(phy.physics)\', \\(phy.equations)"")\n      default:\n         print(""None"")\n   }\n}\n', ""\nInstance physics is: solid physics\nInstance equation is: Hertz\nInstance physics is: Fluid Dynamics\nInstance formulae is: Giga Hertz\nChemistry topics are: 'solid physics', Hertz\nMaths topics are: 'Fluid Dynamics', Giga Hertz\nChemistry topics are: 'Thermo physics', Decibels\nMaths topics are: 'Astro Physics', MegaHertz\nMaths topics are: 'Differential Equations', Cosine Series\nInteger value is 12\nPi value is 3.14159\nExample for Any\nTopics 'solid physics', Hertz\n"", '\nclass Subjects {\n   var physics: String\n   init(physics: String) {\n      self.physics = physics\n   }\n}\n\nclass Chemistry: Subjects {\n   var equations: String\n   init(physics: String, equations: String) {\n      self.equations = equations\n      super.init(physics: physics)\n   }\n}\n\nclass Maths: Subjects {\n   var formulae: String\n   init(physics: String, formulae: String) {\n      self.formulae = formulae\n      super.init(physics: physics)\n   }\n}\n\nlet saprint: [AnyObject] = [Chemistry(physics: ""solid physics"", equations: ""Hertz""),\n   Maths(physics: ""Fluid Dynamics"", formulae: ""Giga Hertz""),\n   Chemistry(physics: ""Thermo physics"", equations: ""Decibels""),\n   Maths(physics: ""Astro Physics"", formulae: ""MegaHertz""),\n   Maths(physics: ""Differential Equations"", formulae: ""Cosine Series"")]\n\nlet samplechem = Chemistry(physics: ""solid physics"", equations: ""Hertz"")\nprint(""Instance physics is: \\(samplechem.physics)"")\nprint(""Instance equation is: \\(samplechem.equations)"")\n\nlet samplemaths = Maths(physics: ""Fluid Dynamics"", formulae: ""Giga Hertz"")\nprint(""Instance physics is: \\(samplemaths.physics)"")\nprint(""Instance formulae is: \\(samplemaths.formulae)"")\n\nvar chemCount = 0\nvar mathsCount = 0\n\nfor item in saprint {\n   if let print = item as? Chemistry {\n      print(""Chemistry topics are: \'\\(print.physics)\', \\(print.equations)"")\n   } else if let example = item as? Maths {\n      print(""Maths topics are: \'\\(example.physics)\', \\(example.formulae)"")\n   }\n}\n\nvar exampleany = [Any]()\nexampleany.append(12)\nexampleany.append(3.14159)\nexampleany.append(""Example for Any"")\nexampleany.append(Chemistry(physics: ""solid physics"", equations: ""Hertz""))\n\nfor print in exampleany {\n   switch print {\n      case let someInt as Int:\n         print(""Integer value is \\(someInt)"")\n      case let someDouble as Double where someDouble > 0:\n         print(""Pi value is \\(someDouble)"")\n      case let someString as String:\n         print(""\\(someString)"")\n      case let phy as Chemistry:\n         print(""Topics \'\\(phy.physics)\', \\(phy.equations)"")\n      default:\n         print(""None"")\n   }\n}\n', ""\nInstance physics is: solid physics\nInstance equation is: Hertz\nInstance physics is: Fluid Dynamics\nInstance formulae is: Giga Hertz\nChemistry topics are: 'solid physics', Hertz\nMaths topics are: 'Fluid Dynamics', Giga Hertz\nChemistry topics are: 'Thermo physics', Decibels\nMaths topics are: 'Astro Physics', MegaHertz\nMaths topics are: 'Differential Equations', Cosine Series\nInteger value is 12\nPi value is 3.14159\nExample for Any\nTopics 'solid physics', Hertz\n""]","['\nInstance physics is: solid physics\nInstance equation is: Hertz\nInstance physics is: Fluid Dynamics\nInstance formulae is: Giga Hertz\n', '\nInstance physics is: solid physics\nInstance equation is: Hertz\nInstance physics is: Fluid Dynamics\nInstance formulae is: Giga Hertz\nSubjects in chemistry contains 2 topics and maths contains 3 topics\n', ""\nInstance physics is: solid physics\nInstance equation is: Hertz\nInstance physics is: Fluid Dynamics\nInstance formulae is: Giga Hertz\nChemistry topics are: 'solid physics', Hertz\nMaths topics are: 'Fluid Dynamics', Giga Hertz\nChemistry topics are: 'Thermo physics', Decibels\nMaths topics are: 'Astro Physics', MegaHertz\nMaths topics are: 'Differential Equations', Cosine Series\n"", ""\nInstance physics is: solid physics\nInstance equation is: Hertz\nInstance physics is: Fluid Dynamics\nInstance formulae is: Giga Hertz\nChemistry topics are: 'solid physics', Hertz\nMaths topics are: 'Fluid Dynamics', Giga Hertz\nChemistry topics are: 'Thermo physics', Decibels\nMaths topics are: 'Astro Physics', MegaHertz\nMaths topics are: 'Differential Equations', Cosine Series\nInteger value is 12\nPi value is 3.14159\nExample for Any\nTopics 'solid physics', Hertz\n"", ""\nInstance physics is: solid physics\nInstance equation is: Hertz\nInstance physics is: Fluid Dynamics\nInstance formulae is: Giga Hertz\nChemistry topics are: 'solid physics', Hertz\nMaths topics are: 'Fluid Dynamics', Giga Hertz\nChemistry topics are: 'Thermo physics', Decibels\nMaths topics are: 'Astro Physics', MegaHertz\nMaths topics are: 'Differential Equations', Cosine Series\nInteger value is 12\nPi value is 3.14159\nExample for Any\nTopics 'solid physics', Hertz\n""]",[],[]
32,['Swift - Extensions'],"['Computed Properties', 'Initializers', 'Methods', 'Mutating Instance Methods', 'Subscripts', 'Nested Types', 'Useful Video Courses']",['Syntax'],"['https://www.tutorialspoint.com/swift/swift_type_casting.htm', 'https://www.tutorialspoint.com/swift/swift_protocols.htm', 'http://tpcg.io/4s8KA8', 'http://tpcg.io/Qg3OVJ', 'http://tpcg.io/FX15jk', 'http://tpcg.io/YnkL9T', 'http://tpcg.io/diM4Zf', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_type_casting.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_protocols.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","[""Extensions are declared with the keyword 'extension'"", 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'Instance methods can also be mutated when declared as extensions.', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","[""Computed 'instance' and 'type' properties can also be extended with the help of extensions."", 'New instance methods and type methods can be added further to the subclass with the help of extensions.', 'Adding new subscripts to already declared instances can also be possible with extensions.', 'Nested types for class, structure and enumeration instances can also be extended with the help of extensions.']","['Functionality of an existing class, structure or enumeration type can be added with the help of extensions. Type functionality can be added with extensions but overriding the functionality is not possible with extensions.', 'Existing type can also be added with extensions to make it as a protocol standard and its syntax is similar to that of classes or structures.', 'Swift 4 provides the flexibility to add new initializers to an existing type by extensions. The user can add their own custom types to extend the types already defined and additional initialization options are also possible. Extensions supports only init(). deinit() is not supported by the extensions.', ""topics() function takes argument of type '(summation: () → ())' to indicate the function does not take any arguments and it won't return any values. To call that function multiple number of times, for block is initialized and call to the method with topic() is initialized."", 'Structure and enumeration methods that modify self or its properties must mark the instance method as mutating, just like mutating methods from an original implementation.']","['\nextension SomeType {\n   // new functionality can be added here\n}\n', '\nextension SomeType: SomeProtocol, AnotherProtocol {\n   // protocol requirements is described here\n}\n', '\nextension Int {\n   var add: Int {return self + 100 }\n   var sub: Int { return self - 10 }\n   var mul: Int { return self * 10 }\n   var div: Int { return self / 5 }\n}\n\nlet addition = 3.add\nprint(""Addition is \\(addition)"")\n\nlet subtraction = 120.sub\nprint(""Subtraction is \\(subtraction)"")\n\nlet multiplication = 39.mul\nprint(""Multiplication is \\(multiplication)"")\n\nlet division = 55.div\nprint(""Division is \\(division)"")\n\nlet mix = 30.add + 34.sub\nprint(""Mixed Type is \\(mix)"")\n', '\nAddition is 103\nSubtraction is 110\nMultiplication is 390\nDivision is 11\nMixed Type is 154\n', '\nstruct sum {\n   var num1 = 100, num2 = 200\n}\n\nstruct diff {\n   var no1 = 200, no2 = 100\n}\n\nstruct mult {\n   var a = sum()\n   var b = diff()\n}\n\nlet calc = mult()\nprint (""Inside mult block \\(calc.a.num1, calc.a.num2)"")\nprint(""Inside mult block \\(calc.b.no1, calc.b.no2)"")\n\nlet memcalc = mult(a: sum(num1: 300, num2: 500),b: diff(no1: 300, no2: 100))\nprint(""Inside mult block \\(memcalc.a.num1, memcalc.a.num2)"")\nprint(""Inside mult block \\(memcalc.b.no1, memcalc.b.no2)"")\n\nextension mult {\n   init(x: sum, y: diff) {\n      let X = x.num1 + x.num2\n      let Y = y.no1 + y.no2\n   }\n}\n\nlet a = sum(num1: 100, num2: 200)\nprint(""Inside Sum Block:\\( a.num1, a.num2)"")\n\nlet b = diff(no1: 200, no2: 100)\nprint(""Inside Diff Block: \\(b.no1, b.no2)"")\n', '\nInside mult block (100, 200)\nInside mult block (200, 100)\nInside mult block (300, 500)\nInside mult block (300, 100)\nInside Sum Block:(100, 200)\nInside Diff Block: (200, 100)\n', '\nextension Int {\n   func topics(summation: () -> ()) {\n      for _ in 0..<self {\n         summation()\n      }\n   }\n}\n\n4.topics(summation: {\n   print(""Inside Extensions Block"")\n})\n\n3.topics(summation: {\n   print(""Inside Type Casting Block"")\n})\n', '\nInside Extensions Block\nInside Extensions Block\nInside Extensions Block\nInside Extensions Block\nInside Type Casting Block\nInside Type Casting Block\nInside Type Casting Block\n', '\nextension Double {\n   mutating func square() {\n      let pi = 3.1415\n      self = pi * self * self\n   }\n}\n\nvar Trial1 = 3.3\nTrial1.square()\nprint(""Area of circle is: \\(Trial1)"")\n\nvar Trial2 = 5.8\nTrial2.square()\nprint(""Area of circle is: \\(Trial2)"")\n\nvar Trial3 = 120.3\nTrial3.square()\nprint(""Area of circle is: \\(Trial3)"")\n', '\nArea of circle is: 34.210935\nArea of circle is: 105.68006\nArea of circle is: 45464.070735\n', '\nextension Int {\n   subscript(var multtable: Int) -> Int {\n      var no1 = 1\n      while multtable > 0 {\n         no1 *= 10\n         --multtable\n      }\n      return (self / no1) % 10\n   }\n}\n\nprint(12[0])\nprint(7869[1])\nprint(786543[2])\n', '\n2\n6\n5\n', '\nextension Int {\n   enum calc {\n      case add\n      case sub\n      case mult\n      case div\n      case anything\n   }\n   var print: calc {\n      switch self {\n         case 0:\n            return .add\n         case 1:\n            return .sub\n         case 2:\n            return .mult\n         case 3:\n            return .div\n         default:\n            return .anything\n      }\n   }\n}\n\nfunc result(numb: [Int]) {\n   for i in numb {\n      switch i.print {\n         case .add:\n            print("" 10 "")\n         case .sub:\n            print("" 20 "")\n         case .mult:\n            print("" 30 "")\n         case .div:\n            print("" 40 "")\n         default:\n            print("" 50 "")\n      }\n   }\n}\nresult(numb: [0, 1, 2, 3, 4, 7])\n', '\n10\n20\n30\n40\n50\n50\n']","['\nextension SomeType {\n   // new functionality can be added here\n}\n', '\nextension SomeType: SomeProtocol, AnotherProtocol {\n   // protocol requirements is described here\n}\n', '\nAddition is 103\nSubtraction is 110\nMultiplication is 390\nDivision is 11\nMixed Type is 154\n', '\nInside mult block (100, 200)\nInside mult block (200, 100)\nInside mult block (300, 500)\nInside mult block (300, 100)\nInside Sum Block:(100, 200)\nInside Diff Block: (200, 100)\n', '\nInside Extensions Block\nInside Extensions Block\nInside Extensions Block\nInside Extensions Block\nInside Type Casting Block\nInside Type Casting Block\nInside Type Casting Block\n', '\nArea of circle is: 34.210935\nArea of circle is: 105.68006\nArea of circle is: 45464.070735\n', '\n2\n6\n5\n', '\n10\n20\n30\n40\n50\n50\n']",[],['Adding computed properties and computed type properties|||Defining instance and type methods.|||Providing new initializers.|||Defining subscripts|||Defining and using new nested types|||Making an existing type conform to a protocol|||']
33,['Swift - Protocols'],"['Property and Method Requirements', 'Mutating Method Requirements', 'Initializer Requirements', 'Class Implementations of Protocol Initializer Requirements', 'Protocols as Types', 'Adding Protocol Conformance with an Extension', 'Protocol Inheritance', 'Class Only Protocols', 'Protocol Composition', 'Checking for Protocol Conformance', 'Useful Video Courses']","['Syntax', 'Syntax', 'For example', 'Syntax', 'Example']","['https://www.tutorialspoint.com/swift/swift_extensions.htm', 'https://www.tutorialspoint.com/swift/swift_generics.htm', 'http://tpcg.io/sAGIrG', 'http://tpcg.io/6ovdeF', 'http://tpcg.io/jOonDg', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_extensions.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_generics.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'Protocols can be accessed as types in −', 'Function, method or initialize as a parameter or return type', 'Arrays, dictionaries or other containers as items', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","['Protocols also follow the similar syntax as that of classes, structures, and enumerations −', 'When a protocol has to be defined for super class, the protocol name should follow the super class name with a comma.', 'Swing allows the user to initialize protocols to follow type conformance similar to that of normal initializers.', ""Protocol conformance is ensured on all subclasses for explicit or inherited implementation by 'required' modifier."", 'Instead of implementing functionalities in a protocol they are used as types for functions, classes, methods etc.', 'Swift 4 allows multiple protocols to be called at once with the help of protocol composition.', ""Protocol conformance is tested by 'is' and 'as' operators similar to that of type casting."", 'The is operator returns true if an instance conforms to protocol standard and returns false if it fails.']","['Protocols provide a blueprint for Methods, properties and other requirements functionality. It is just described as a methods or properties skeleton instead of implementation. Methods and properties implementation can further be done by defining classes, functions and enumerations. Conformance of a protocol is defined as the methods or properties satisfying the requirements of the protocol.', 'Protocols are declared after the class, structure or enumeration type names. Single and Multiple protocol declarations are also possible. If multiple protocols are defined they have to be separated by commas.', ""Protocol is used to specify particular class type property or instance property. It just specifies the type or instance property alone rather than specifying whether it is a stored or computed property. Also, it is used to specify whether the property is 'gettable' or 'settable'."", ""Property requirements are declared by 'var' keyword as property variables. {get set} is used to declare gettable and settable properties after their type declaration. Gettable is mentioned by {get} property after their type declaration."", ""Designated or convenience initializer allows the user to initialize a protocol to conform its standard by the reserved 'required' keyword."", ""When a subclass overrides its super class initialization requirement it is specified by the 'override' modifier keyword."", 'Existing type can be adopted and conformed to a new protocol by making use of extensions. New properties, methods and subscripts can be added to existing types with the help of extensions.', 'Swift 4 allows protocols to inherit properties from its defined properties. It is similar to that of class inheritance, but with the choice of listing multiple inherited protocols separated by commas.', ""When protocols are defined and the user wants to define protocol with classes it should be added by defining class first followed by protocol's inheritance list."", ""The as? version of the downcast operator returns an optional value of the protocol's type, and this value is nil if the instance does not conform to that protocol."", 'The as version of the downcast operator forces the downcast to the protocol type and triggers a runtime error if the downcast does not succeed.']","['\nprotocol SomeProtocol {\n   // protocol definition \n}\n', '\nstruct SomeStructure: Protocol1, Protocol2 {\n   // structure definition \n}\n', '\nclass SomeClass: SomeSuperclass, Protocol1, Protocol2 {\n   // class definition \n}\n', '\nprotocol classa {\n   var marks: Int { get set }\n   var result: Bool { get }\n   \n   func attendance() -> String\n   func markssecured() -> String\n}\n\nprotocol classb: classa {\n   var present: Bool { get set }\n   var subject: String { get set }\n   var stname: String { get set }\n}\n\nclass classc: classb {\n   var marks = 96\n   let result = true\n   var present = false\n   var subject = ""Swift 4 Protocols""\n   var stname = ""Protocols""\n\n   func attendance() -> String {\n      return ""The \\(stname) has secured 99% attendance""\n   }\n   func markssecured() -> String {\n      return ""\\(stname) has scored \\(marks)""\n   }\n}\n\nlet studdet = classc()\nstuddet.stname = ""Swift 4""\nstuddet.marks = 98\nstuddet.markssecured()\n\nprint(studdet.marks)\nprint(studdet.result)\nprint(studdet.present)\nprint(studdet.subject)\nprint(studdet.stname)\n', '\n98\ntrue\nfalse\nSwift 4 Protocols\nSwift 4\n', '\nprotocol daysofaweek {\n   mutating func print()\n}\n\nenum days: daysofaweek {\n   case sun, mon, tue, wed, thurs, fri, sat \n   mutating func print() {\n      switch self {\n         case sun:\n            self = sun\n            print(""Sunday"")\n         case mon:\n            self = mon\n            print(""Monday"")\n         case tue:\n            self = tue\n            print(""Tuesday"")\n         case wed:\n            self = wed\n            print(""Wednesday"")\n         case mon:\n            self = thurs\n            print(""Thursday"")\n         case tue:\n            self = fri\n            print(""Friday"")\n         case sat:\n            self = sat\n            print(""Saturday"")\n         default:\n            print(""NO Such Day"")\n      }\n   }\n}\n\nvar res = days.wed\nres.print()\n', '\nWednesday\n', '\nprotocol SomeProtocol {\n   init(someParameter: Int)\n}\n', '\nprotocol tcpprotocol {\n   init(aprot: Int)\n}\n', '\nclass SomeClass: SomeProtocol {\n   required init(someParameter: Int) {\n      // initializer implementation statements\n   }\n}\n\nprotocol tcpprotocol {\n   init(aprot: Int)\n}\n\nclass tcpClass: tcpprotocol {\n   required init(aprot: Int) {\n   }\n}\n', '\nprotocol tcpprotocol {\n   init(no1: Int)\n}\n\nclass mainClass {\n   var no1: Int        // local storage\n   init(no1: Int) {\n      self.no1 = no1  // initialization\n   }\n}\n\nclass subClass: mainClass, tcpprotocol {\n   var no2: Int\n   init(no1: Int, no2 : Int) {\n      self.no2 = no2\n      super.init(no1:no1)\n   }\n   // Requires only one parameter for convenient method\n   required override convenience init(no1: Int) {\n      self.init(no1:no1, no2:0)\n   }\n}\n\nlet res = mainClass(no1: 20)\nlet print = subClass(no1: 30, no2: 50)\n\nprint(""res is: \\(res.no1)"")\nprint(""res is: \\(print.no1)"")\nprint(""res is: \\(print.no2)"")\n', '\nres is: 20\nres is: 30\nres is: 50\n', '\nprotocol Generator {\n   typealias members\n   func next() -> members?\n}\n\nvar items = [10,20,30].generate()\nwhile let x = items.next() {\n   print(x)\n}\n\nfor lists in map([1,2,3], {i in i*5}) {\n   print(lists)\n}\n\nprint([100,200,300])\nprint(map([1,2,3], {i in i*10}))\n', '\n10\n20\n30\n5\n10\n15\n[100, 200, 300]\n[10, 20, 30]\n', '\nprotocol AgeClasificationProtocol {\n   var age: Int { get }\n   func agetype() -> String\n}\nclass Person {\n   let firstname: String\n   let lastname: String\n   var age: Int\n   \n   init(firstname: String, lastname: String) {\n      self.firstname = firstname\n      self.lastname = lastname\n      self.age = 10\n   }\n}\n\nextension Person : AgeClasificationProtocol {\n   func fullname() -> String {\n      var c: String\n      c = firstname + "" "" + lastname\n      return c\n   }\n   func agetype() -> String {\n      switch age {\n         case 0...2:\n            return ""Baby""\n         case 2...12:\n            return ""Child""\n         case 13...19:\n            return ""Teenager""\n         case let x where x > 65:\n            return ""Elderly""\n         default:\n            return ""Normal""\n      }\n   }\n}\n', '\nprotocol classa {\n   var no1: Int { get set }\n   func calc(sum: Int)\n}\nprotocol result {\n   func print(target: classa)\n}\nclass student2: result {\n   func print(target: classa) {\n      target.calc(sum: 1)\n   }\n}\nclass classb: result {\n   func print(target: classa) {\n      target.calc(sum: 5)\n   }\n}\n\nclass student: classa {\n   var no1: Int = 10\n   \n   func calc(sum: Int) {\n      no1 -= sum\n      print(""Student attempted \\(sum) times to pass"")\n         \n      if no1 <= 0 {\n         print(""Student is absent for exam"")\n      }\n   }\n}\n\nclass Player {\n   var stmark: result!\n\n   init(stmark: result) {\n      self.stmark = stmark\n   }\n   func print(target: classa) {\n      stmark.print(target: target)\n   }\n}\n\nvar marks = Player(stmark: student2())\nvar marksec = student()\n\nmarks.print(target: marksec)\nmarks.print(target: marksec)\nmarks.print(target: marksec)\nmarks.stmark = classb()\nmarks.print(target: marksec)\nmarks.print(target: marksec)\nmarks.print(target: marksec)\n', '\nStudent attempted 1 times to pass\nStudent attempted 1 times to pass\nStudent attempted 1 times to pass\nStudent attempted 5 times to pass\nStudent attempted 5 times to pass\nStudent is absent for exam\nStudent attempted 5 times to pass\nStudent is absent for exam\n', '\nprotocol tcpprotocol {\n   init(no1: Int)\n}\nclass mainClass {\n   var no1: Int        // local storage\n   init(no1: Int) {\n      self.no1 = no1  // initialization\n   }\n}\nclass subClass: mainClass, tcpprotocol {\n   var no2: Int\n   init(no1: Int, no2 : Int) {\n      self.no2 = no2\n      super.init(no1:no1)\n   }\n   \n   // Requires only one parameter for convenient method\n   required override convenience init(no1: Int) {\n      self.init(no1:no1, no2:0)\n   }\n}\n\nlet res = mainClass(no1: 20)\nlet print = subClass(no1: 30, no2: 50)\n\nprint(""res is: \\(res.no1)"")\nprint(""res is: \\(print.no1)"")\nprint(""res is: \\(print.no2)"")\n', '\nres is: 20\nres is: 30\nres is: 50\n', '\nprotocol<SomeProtocol, AnotherProtocol>\n', '\nprotocol stname {\n   var name: String { get }\n}\nprotocol stage {\n   var age: Int { get }\n}\nstruct Person: stname, stage {\n   var name: String\n   var age: Int\n}\nfunc print(celebrator: stname & stage) {\n   print(""\\(celebrator.name) is \\(celebrator.age) years old"")\n}\nlet studname = Person(name: ""Priya"", age: 21)\nprint(studname)\n\nlet stud = Person(name: ""Rehan"", age: 29)\nprint(stud)\n\nlet student = Person(name: ""Roshan"", age: 19)\nprint(student)\n', '\nPerson(name: ""Priya"", age: 21)\nPerson(name: ""Rehan"", age: 29)\nPerson(name: ""Roshan"", age: 19)\n', '\nimport Foundation\n\n@objc protocol rectangle {\n   var area: Double { get }\n}\n@objc class Circle: rectangle {\n   let pi = 3.1415927\n   var radius: Double\n   var area: Double { return pi * radius * radius }\n   init(radius: Double) { self.radius = radius }\n}\n@objc class result: rectangle {\n   var area: Double\n   init(area: Double) { self.area = area }\n}\nclass sides {\n   var rectsides: Int\n   init(rectsides: Int) { self.rectsides = rectsides }\n}\nlet objects: [AnyObject] = [Circle(radius: 2.0),result(area:198),sides(rectsides: 4)]\n\nfor object in objects {\n   if let objectWithArea = object as? rectangle {\n      print(""Area is \\(objectWithArea.area)"")\n   } else {\n      print(""Rectangle area is not defined"")\n   }\n}\n', '\nArea is 12.5663708\nArea is 198.0\nRectangle area is not defined\n']","['\nprotocol SomeProtocol {\n   // protocol definition \n}\n', '\nclass SomeClass: SomeSuperclass, Protocol1, Protocol2 {\n   // class definition \n}\n', '\n98\ntrue\nfalse\nSwift 4 Protocols\nSwift 4\n', '\nWednesday\n', '\nprotocol SomeProtocol {\n   init(someParameter: Int)\n}\n', '\nres is: 20\nres is: 30\nres is: 50\n', '\n10\n20\n30\n5\n10\n15\n[100, 200, 300]\n[10, 20, 30]\n', '\nStudent attempted 1 times to pass\nStudent attempted 1 times to pass\nStudent attempted 1 times to pass\nStudent attempted 5 times to pass\nStudent attempted 5 times to pass\nStudent is absent for exam\nStudent attempted 5 times to pass\nStudent is absent for exam\n', '\nres is: 20\nres is: 30\nres is: 50\n', '\nprotocol<SomeProtocol, AnotherProtocol>\n', '\nPerson(name: ""Priya"", age: 21)\nPerson(name: ""Rehan"", age: 29)\nPerson(name: ""Roshan"", age: 19)\n', '\nArea is 12.5663708\nArea is 198.0\nRectangle area is not defined\n']",[],"[""Function, method or initialize as a parameter or return type|||Constant, variable or property|||Arrays, dictionaries or other containers as items|||The is operator returns true if an instance conforms to protocol standard and returns false if it fails.|||The as? version of the downcast operator returns an optional value of the protocol's type, and this value is nil if the instance does not conform to that protocol.|||The as version of the downcast operator forces the downcast to the protocol type and triggers a runtime error if the downcast does not succeed.|||""]"
34,['Swift - Generics'],"['Generic Functions: Type Parameters', 'Extending a Generic Type', 'Type Constraints', 'Associated Types', 'Where Clauses', 'Useful Video Courses']",[],"['https://www.tutorialspoint.com/swift/swift_protocols.htm', 'https://www.tutorialspoint.com/swift/swift_access_control.htm', 'http://tpcg.io/Nfqsrx', 'http://tpcg.io/675k1d', 'http://tpcg.io/lS3iC1', 'http://tpcg.io/woZPNm', 'http://tpcg.io/faDhlV', 'http://tpcg.io/jsHG6Y', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_protocols.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/swift_access_control.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['When we run the above program using playground, we get the following result −', ""Generic functions can be used to access any data type like 'Int' or 'String'."", 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −']","[""Extending the stack property to know the top of the item is included with 'extension' keyword."", ""Swift 4 allows associated types to be declared inside the protocol definition by the keyword 'associatedtype'.""]","[""Swift 4 language provides 'Generic' features to write flexible and reusable functions and types. Generics are used to avoid duplication and to provide abstraction. Swift 4 standard libraries are built with generics code. Swift 4s 'Arrays' and 'Dictionary' types belong to generic collections. With the help of arrays and dictionaries the arrays are defined to hold 'Int' values and 'String' values or any other types."", ""The function exchange() is used to swap values which is described in the above program and <T> is used as a type parameter. For the first time, function exchange() is called to return 'Int' values and second call to the function exchange() will return 'String' values. Multiple parameter types can be included inside the angle brackets separated by commas."", ""Type parameters are named as user defined to know the purpose of the type parameter that it holds. Swift 4 provides <T> as generic type parameter name. However type parameters like Arrays and Dictionaries can also be named as key, value to identify that they belong to type 'Dictionary'."", ""Swift 4 language allows 'type constraints' to specify whether the type parameter inherits from a specific class, or to ensure protocol conformance standard."", ""Type constraints enable the user to define requirements on the type parameters associated with a generic function or type. For defining requirements for associated types 'where' clauses are declared as part of type parameter list. 'where' keyword is placed immediately after the list of type parameters followed by constraints of associated types, equality relationships between types and associated types.""]","['\nfunc exchange(a: inout Int, b: inout Int) {\n   let temp = a\n   a = b\n   b = temp\n}\n\nvar numb1 = 100\nvar numb2 = 200\n\nprint(""Before Swapping values are: \\(numb1) and \\(numb2)"")\nexchange(a: &numb1, b: &numb2)\nprint(""After Swapping values are: \\(numb1) and \\(numb2)"")\n', '\nBefore Swapping values are: 100 and 200\nAfter Swapping values are: 200 and 100\n', '\nfunc exchange<T>(a: inout T, b: inout T) {\n   let temp = a\n   a = b\n   b = temp\n}\nvar numb1 = 100\nvar numb2 = 200\n\nprint(""Before Swapping Int values are: \\(numb1) and \\(numb2)"")\nexchange(a: &numb1, b: &numb2)\nprint(""After Swapping Int values are: \\(numb1) and \\(numb2)"")\n\nvar str1 = ""Generics""\nvar str2 = ""Functions""\n\nprint(""Before Swapping String values are: \\(str1) and \\(str2)"")\nexchange(a: &str1, b: &str2)\nprint(""After Swapping String values are: \\(str1) and \\(str2)"")\n', '\nBefore Swapping Int values are: 100 and 200\nAfter Swapping Int values are: 200 and 100\nBefore Swapping String values are: Generics and Functions\nAfter Swapping String values are: Functions and Generics\n', '\nstruct TOS<T> {\n   var items = [T]()\n   mutating func push(item: T) {\n      items.append(item)\n   }\n   mutating func pop() -> T {\n      return items.removeLast()\n   }\n}\n\nvar tos = TOS<String>()\ntos.push(item: ""Swift 4"")\nprint(tos.items)\n\ntos.push(item: ""Generics"")\nprint(tos.items)\n\ntos.push(item: ""Type Parameters"")\nprint(tos.items)\n\ntos.push(item: ""Naming Type Parameters"")\nprint(tos.items)\n\nlet deletetos = tos.pop()\n', '\n[Swift 4]\n[Swift 4, Generics]\n[Swift 4, Generics, Type Parameters]\n[Swift 4, Generics, Type Parameters, Naming Type Parameters]\n', '\nstruct TOS<T> {\n   var items = [T]()\n   mutating func push(item: T) {\n      items.append(item)\n   }\n   mutating func pop() -> T {\n      return items.removeLast()\n   }\n}\nvar tos = TOS<String>()\ntos.push(item: ""Swift 4"")\nprint(tos.items)\n\ntos.push(item: ""Generics"")\nprint(tos.items)\n\ntos.push(item: ""Type Parameters"")\nprint(tos.items)\n\ntos.push(item: ""Naming Type Parameters"")\nprint(tos.items)\n\nextension TOS {\n   var first: T? {\n      return items.isEmpty ? nil : items[items.count - 1]\n   }\n}\nif let first = tos.first {\n   print(""The top item on the stack is \\(first)."")\n}\n', '\n[""Swift 4""]\n[""Swift 4"", ""Generics""]\n[""Swift 4"", ""Generics"", ""Type Parameters""]\n[""Swift 4"", ""Generics"", ""Type Parameters"", ""Naming Type Parameters""]\nThe top item on the stack is Naming Type Parameters.\n', '\nfunc exchange<T>(a: inout T, b: inout T) {\n   let temp = a\n   a = b\n   b = temp\n}\nvar numb1 = 100\nvar numb2 = 200\n\nprint(""Before Swapping Int values are: \\(numb1) and \\(numb2)"")\nexchange(a: &numb1, b: &numb2)\nprint(""After Swapping Int values are: \\(numb1) and \\(numb2)"")\n\nvar str1 = ""Generics""\nvar str2 = ""Functions""\n\nprint(""Before Swapping String values are: \\(str1) and \\(str2)"")\nexchange(a: &str1, b: &str2)\nprint(""After Swapping String values are: \\(str1) and \\(str2)"")\n', '\nBefore Swapping Int values are: 100 and 200\nAfter Swapping Int values are: 200 and 100\nBefore Swapping String values are: Generics and Functions\nAfter Swapping String values are: Functions and Generics\n', '\nprotocol Container {\n   associatedtype ItemType\n   mutating func append(item: ItemType)\n   var count: Int { get }\n   subscript(i: Int) -> ItemType { get }\n}\nstruct TOS<T>: Container {\n   // original Stack<T> implementation\n   var items = [T]()\n   mutating func push(item: T) {\n      items.append(item)\n   }\n   mutating func pop() -> T {\n      return items.removeLast()\n   }\n   \n   // conformance to the Container protocol\n   mutating func append(item: T) {\n      self.push(item: item)\n   }\n   var count: Int {\n      return items.count\n   }\n   subscript(i: Int) -> T {\n      return items[i]\n   }\n}\nvar tos = TOS<String>()\ntos.push(item: ""Swift 4"")\nprint(tos.items)\n\ntos.push(item: ""Generics"")\nprint(tos.items)\n\ntos.push(item: ""Type Parameters"")\nprint(tos.items)\n\ntos.push(item: ""Naming Type Parameters"")\nprint(tos.items)\n', '\n[Swift 4]\n[Swift 4, Generics]\n[Swift 4, Generics, Type Parameters]\n[Swift 4, Generics, Type Parameters, Naming Type Parameters]\n', '\nprotocol Container {\n   associatedtype ItemType\n   mutating func append(item: ItemType)\n   var count: Int { get }\n   subscript(i: Int) -> ItemType { get }\n}\nstruct Stack<T>: Container {\n   // original Stack<T> implementation\n   var items = [T]()\n   mutating func push(item: T) {\n      items.append(item)\n   }\n   mutating func pop() -> T {\n      return items.removeLast()\n   }\n\n   // conformance to the Container protocol\n   mutating func append(item: T) {\n      self.push(item: item)\n   }\n   var count: Int {\n      return items.count\n   }\n   subscript(i: Int) -> T {\n      return items[i]\n   }\n}\nfunc allItemsMatch<\nC1: Container, C2: Container\nwhere C1.ItemType == C2.ItemType, C1.ItemType: Equatable>\n(someContainer: C1, anotherContainer: C2) -> Bool {\n   // check that both containers contain the same number of items\n   if someContainer.count != anotherContainer.count {\n      return false\n   }\n   \n   // check each pair of items to see if they are equivalent\n   for i in 0..<someContainer.count {\n      if someContainer[i] != anotherContainer[i] {\n         return false\n      }\n   }\n   // all items match, so return true\n   return true\n}  \nvar tos = Stack<String>()\n\ntos.push(item: ""Swift 4"")\nprint(tos.items)\n\ntos.push(item: ""Generics"")\nprint(tos.items)\n\ntos.push(item: ""Where Clause"")\nprint(tos.items)\n\nvar eos = [""Swift 4"", ""Generics"", ""Where Clause""]\nprint(eos)\n', '\n[Swift 4]\n[Swift 4, Generics]\n[Swift 4, Generics, Where Clause]\n[Swift 4, Generics, Where Clause]\n']","['\nBefore Swapping values are: 100 and 200\nAfter Swapping values are: 200 and 100\n', '\nBefore Swapping Int values are: 100 and 200\nAfter Swapping Int values are: 200 and 100\nBefore Swapping String values are: Generics and Functions\nAfter Swapping String values are: Functions and Generics\n', '\n[Swift 4]\n[Swift 4, Generics]\n[Swift 4, Generics, Type Parameters]\n[Swift 4, Generics, Type Parameters, Naming Type Parameters]\n', '\n[""Swift 4""]\n[""Swift 4"", ""Generics""]\n[""Swift 4"", ""Generics"", ""Type Parameters""]\n[""Swift 4"", ""Generics"", ""Type Parameters"", ""Naming Type Parameters""]\nThe top item on the stack is Naming Type Parameters.\n', '\nBefore Swapping Int values are: 100 and 200\nAfter Swapping Int values are: 200 and 100\nBefore Swapping String values are: Generics and Functions\nAfter Swapping String values are: Functions and Generics\n', '\n[Swift 4]\n[Swift 4, Generics]\n[Swift 4, Generics, Type Parameters]\n[Swift 4, Generics, Type Parameters, Naming Type Parameters]\n', '\n[Swift 4]\n[Swift 4, Generics]\n[Swift 4, Generics, Where Clause]\n[Swift 4, Generics, Where Clause]\n']",[],[]
35,['Swift - Access Control'],"['Access Control for Function types', 'Access Control for Enumeration types', 'Access Control for SubClasses', 'Access Control for Constants, variables, properties and subscripts', 'Getters and Setters', 'Access Control for Initializers and Default Initializers', 'Access Control for Protocols', 'Access Control for Extensions', 'Access Control for Generics', 'Access Control for Type Aliases', 'Swift Encoding and Decoding', 'Useful Video Courses']",['Syntax'],"['https://www.tutorialspoint.com/swift/swift_generics.htm', 'https://www.tutorialspoint.com/swift/compile_swift_online.htm', 'http://tpcg.io/xoUxcZ', 'http://tpcg.io/j59DRD', 'http://tpcg.io/l0RBn8', 'http://tpcg.io/T1cg8J', 'http://tpcg.io/OtTo4k', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/profile/-645748', 'https://www.tutorialspoint.com/swift_4_online_training/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/swift_basics_learn_to_code_from_scratch/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/profile/three_millennials', 'https://www.tutorialspoint.com/how_to_create_tic_tac_toe_game_for_iphone_using_swift_in_xcode_ios_app/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/profile/frahaan_hussain', 'https://www.tutorialspoint.com/swift_the_ultimate_guide_to_mac_and_ios_development/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/profile/devasena-rajendran', 'https://www.tutorialspoint.com/ios_native_xcuitest_uitest_automation_using_swift_and_xcode/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/profile/grant_klimaytys', 'https://www.tutorialspoint.com/basic_swift_code_for_ios_apps/index.asp', 'https://www.tutorialspoint.com/swift/swift_generics.htm', 'https://www.tutorialspoint.comjavascript:printPage();', 'https://www.tutorialspoint.com/swift/compile_swift_online.htm']","['https://d3mxt5v3yxgcsr.cloudfront.net/courses/1913/course_1913_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2667/course_2667_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2669/course_2669_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2671/course_2671_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2896/course_2896_image.png', 'https://d3mxt5v3yxgcsr.cloudfront.net/courses/3850/course_3850_image.png']","['Access control model is based on modules and source files.', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'When we run the above program using playground, we get the following result −', 'Swift will automatically encode all the values inside your data type.', 'You can decode the data using Decoder function like']","['Three different access levels are provided by Swift 4 language. They are Public, Internal and Private access.', ""To declare each and every subclass of the initialize 'required' keyword needs to be defined before the init() function."", 'Generics allow the user to specify minimum access levels to access the type constraints on its type parameters.']","[""To restrict access to code blocks, modules and abstraction is done through access control. Classes, structures and enumerations can be accessed according to their properties, methods, initializers and subscripts by access control mechanisms. Constants, variables and functions in a protocol are restricted and allowed access as global and local through access control. Access control applied to properties, types and functions can be referred as 'entities'."", ""Module is defined as a single unit of code distribution and can be imported using the keyword 'import'. A source file is defined as a single source code file with in a module to access multiple types and functions."", 'Enables entities to be processed with in any source file from their defining module, a source file from another module that imports the defining module.', 'Enables entities to be used within any source file from their defining module, but not in any source file outside of that module.', 'Restricts the use of an entity to its own defining source file. Private access plays role to hide the implementation details of a specific code functionality.', ""Some functions may have arguments declared inside the function without any return values. The following program declares a and b as arguments to the sum() function. Inside the function itself the values for arguments a and b are passed by invoking the function call sum() and its values are printed thereby eliminating return values. To make the function's return type as private, declare the function's overall access level with the private modifier."", 'Enumeration in Swift 4 language automatically receive the same access level for individual cases of an enumeration. Consider for example to access the students name and marks secured in three subjects enumeration name is declared as student and the members present in enum class are name which belongs to string datatype, marks are represented as mark1, mark2 and mark3 of datatype Integer. To access either the student name or marks they have scored. Now, the switch case will print student name if that case block is executed otherwise it will print the marks secured by the student. If both condition fails the default block will be executed.', 'Swift 4 allows the user to subclass any class that can be accessed in the current access context. A subclass cannot have a higher access level than its superclass. The user is restricted from writing a public subclass of an internal superclass.', 'Swift 4 constant, variable, or property cannot be defined as public than its type. It is not valid to write a public property with a private type. Similarly, a subscript cannot be more public than its index or return type.', 'When a constant, variable, property, or subscript makes use of a private type, the constant, variable, property, or subscript must also be marked as private −', 'Getters and setters for constants, variables, properties, and subscripts automatically receive the same access level as the constant, variable, property, or subscript they belong to.', ""Custom initializers can be assigned an access level less than or equal to the type that they initialize. A required initializer must have the same access level as the class it belongs to. The types of an initializer's parameters cannot be more private than the initializer's own access level."", ""A default initializer has the same access level as the type it initializes, unless that type is defined as public. When default initialize is defined as public it is considered internal. When the user needs a public type to be initializable with a no-argument initializer in another module, provide explicitly a public no-argument initializer as part of the type's definition."", ""When we define a new protocol to inherit functionalities from an existing protocol, both has to be declared the same access levels to inherit the properties of each other. Swift 4 access control won’t allow the users to define a 'public' protocol that inherits from an 'internal' protocol."", 'Swift 4 does not allow the users to provide an explicit access level modifier for an extension when the user uses that extension to add protocol conformance. The default access level for each protocol requirement implementation within the extension is provided with its own protocol access level.', ""The user can define type aliases to treat distinct access control types. Same access level or different access levels can be defined by the user. When type alias is 'private' its associated members can be declared as 'private, internal of public type'. When type alias is public the members cannot be alias as an 'internal' or 'private' name"", 'Any type aliases you define are treated as distinct types for the purposes of access control. A type alias can have an access level less than or equal to the access level of the type it aliases. For example, a private type alias can alias a private, internal, or public type, but a public type alias cannot alias an internal or private type.', 'Swift 4 introduces a new Codable Protocol, that let’s you serialize and De-serialize custom data types without writing any special code – and without having to worry about losing your value types.', 'Notice that Langauage is conforming to Codable Protocol. Now we’ll convert it to a Json Data Representation using one simple line.', 'Both JSONEncoder and its property list counterpart PropertyListEncoder have lots of options for customizing how they work.']","['\npublic class SomePublicClass {}\ninternal class SomeInternalClass {}\nprivate class SomePrivateClass {}\n\npublic var somePublicVariable = 0\ninternal let someInternalConstant = 0\nprivate func somePrivateFunction() {}\n', '\nprivate func sum(a: Int, b: Int) {\n   let a = a + b\n   let b = a - b\n   print(a, b)\n}\n\nsum(a: 20, b: 10)\nsum(a: 40, b: 10)\nsum(a: 24, b: 6)\n', '\n30 20\n50 40\n30 24\n', '\npublic enum Student {\n   case Name(String)\n   case Mark(Int,Int,Int)\n}\nvar studDetails = Student.Name(""Swift 4"")\nvar studMarks = Student.Mark(98,97,95)\n\nswitch studMarks {\n   case .Name(let studName):\n      print(""Student name is: \\(studName)."")\n   case .Mark(let Mark1, let Mark2, let Mark3):\n      print(""Student Marks are: \\(Mark1),\\(Mark2),\\(Mark3)."")\n   \n}\n', '\nStudent Marks are: 98,97,95\n', '\npublic class cricket {\n   internal func printIt() {\n      print(""Welcome to Swift 4 Super Class"")\n   }\n}\n\ninternal class tennis: cricket {\n   override internal func printIt() {\n      print(""Welcome to Swift 4 Sub Class"")\n   }\n}\n\nlet cricinstance = cricket()\ncricinstance.printIt()\n\nlet tennisinstance = tennis()\ntennisinstance.printIt()\n', '\nWelcome to Swift Super Class\nWelcome to Swift Sub Class\n', '\nprivate var privateInstance = SomePrivateClass()\n', '\nclass Samplepgm {\n   var counter: Int = 0{\n      willSet(newTotal) {\n         print(""Total Counter is: \\(newTotal)"")\n      }\n      didSet {\n         if counter > oldValue {\n            print(""Newly Added Counter \\(counter - oldValue)"")\n         }\n      }\n   }\n}\n\nlet NewCounter = Samplepgm()\nNewCounter.counter = 100\nNewCounter.counter = 800\n', '\nTotal Counter is: 100\nNewly Added Counter 100\nTotal Counter is: 800\nNewly Added Counter 700\n', '\nclass classA {\n   required init() {\n      let a = 10\n      print(a)\n   }\n}\nclass classB: classA {\n   required init() {\n      let b = 30\n      print(b)\n   }\n}\nlet res = classA()\nlet print = classB()\n', '\n10\n30\n10\n', '\npublic protocol tcpprotocol {\n   init(no1: Int)\n}\npublic class mainClass {\n   var no1: Int      // local storage\n   init(no1: Int) {\n      self.no1 = no1 // initialization\n   }\n}\nclass subClass: mainClass, tcpprotocol {\n   var no2: Int\n   init(no1: Int, no2 : Int) {\n      self.no2 = no2\n      super.init(no1:no1)\n   }\n   \n   // Requires only one parameter for convenient method\n   required override convenience init(no1: Int) {\n      self.init(no1:no1, no2:0)\n   }\n}\n\nlet res = mainClass(no1: 20)\nlet print = subClass(no1: 30, no2: 50)\n\nprint(""res is: \\(res.no1)"")\nprint(""res is: \\(print.no1)"")\nprint(""res is: \\(print.no2)"")\n', '\nres is: 20\nres is: 30\nres is: 50\n', '\npublic struct TOS<T> {\n   var items = [T]()\n   mutating func push(item: T) {\n      items.append(item)\n   }\n   mutating func pop() -> T {\n      return items.removeLast()\n   }\n}\n\nvar tos = TOS<String>()\ntos.push(item: ""Swift 4"")\nprint(tos.items)\n\ntos.push(item: ""Generics"")\nprint(tos.items)\n\ntos.push(item: ""Type Parameters"")\nprint(tos.items)\n\ntos.push(item: ""Naming Type Parameters"")\nprint(tos.items)\nlet deletetos = tos.pop()\n', '\n[Swift 4]\n[Swift 4, Generics]\n[Swift 4, Generics, Type Parameters]\n[Swift 4, Generics, Type Parameters, Naming Type Parameters]\n', '\npublic protocol Container {\n   associatedtype ItemType\n   mutating func append(item: ItemType)\n   var count: Int { get }\n   subscript(i: Int) -> ItemType { get }\n}\nstruct Stack<T>: Container {\n   // original Stack<T> implementation\n   var items = [T]()\n   mutating func push(item: T) {\n      items.append(item)\n   }\n   mutating func pop() -> T {\n      return items.removeLast()\n   }\n   \n   // conformance to the Container protocol\n   mutating func append(item: T) {\n      self.push(item: item)\n   }\n   var count: Int {\n      return items.count\n   }\n   subscript(i: Int) -> T {\n      return items[i]\n   }\n}\nfunc allItemsMatch<\n   C1: Container, C2: Container\n   where C1.ItemType == C2.ItemType, C1.ItemType: Equatable>\n   (someContainer: C1, anotherContainer: C2) -> Bool {\n   \n   // check that both containers contain the same number of items\n   if someContainer.count != anotherContainer.count {\n      return false\n   }\n   \n   // check each pair of items to see if they are equivalent\n   for i in 0..<someContainer.count {\n      if someContainer[i] != anotherContainer[i] {\n         return false\n      }\n   }\n   // all items match, so return true\n   return true\n}\nvar tos = Stack<String>()\ntos.push(item: ""Swift 4"")\nprint(tos.items)\n\ntos.push(item: ""Generics"")\nprint(tos.items)\n\ntos.push(item: ""Where Clause"")\nprint(tos.items)\n\nvar eos = [""Swift 4"", ""Generics"", ""Where Clause""]\nprint(eos)\n', '\n[Swift 4]\n[Swift 4, Generics]\n[Swift 4, Generics, Where Clause]\n[Swift 4, Generics, Where Clause]\n', '\nstruct Language: Codable {\n   var name: String\n   var version: Int\n}\nlet swift = Language(name: ""Swift"", version: 4)\nlet java = Language(name: ""java"", version: 8)\nlet R = Language(name: ""R"", version: 3\n', '\nlet encoder = JSONEncoder()\nif let encoded = try? encoder.encode(java) {\n   //Perform some operations on this value.\n}\n', '\nlet decoder = JSONDecoder()\nif let decoded = try? decoder.decode(Language.self, from: encoded) {\n   //Perform some operations on this value.\n}\n']","['\npublic class SomePublicClass {}\ninternal class SomeInternalClass {}\nprivate class SomePrivateClass {}\n\npublic var somePublicVariable = 0\ninternal let someInternalConstant = 0\nprivate func somePrivateFunction() {}\n', '\n30 20\n50 40\n30 24\n', '\nStudent Marks are: 98,97,95\n', '\nWelcome to Swift Super Class\nWelcome to Swift Sub Class\n', '\nprivate var privateInstance = SomePrivateClass()\n', '\nTotal Counter is: 100\nNewly Added Counter 100\nTotal Counter is: 800\nNewly Added Counter 700\n', '\n10\n30\n10\n', '\nres is: 20\nres is: 30\nres is: 50\n', '\n[Swift 4]\n[Swift 4, Generics]\n[Swift 4, Generics, Type Parameters]\n[Swift 4, Generics, Type Parameters, Naming Type Parameters]\n', '\n[Swift 4]\n[Swift 4, Generics]\n[Swift 4, Generics, Where Clause]\n[Swift 4, Generics, Where Clause]\n']","['S.No|||Access Levels & Definition&&&1|||Public|||Enables entities to be processed with in any source file from their defining module, a source file from another module that imports the defining module.&&&2|||Internal|||Enables entities to be used within any source file from their defining module, but not in any source file outside of that module.&&&3|||Private|||Restricts the use of an entity to its own defining source file. Private access plays role to hide the implementation details of a specific code functionality.']",[]
