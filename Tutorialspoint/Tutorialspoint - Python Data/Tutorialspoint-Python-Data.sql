CREATE DATABASE  IF NOT EXISTS `web_scraped_data` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;
USE `web_scraped_data`;
-- MySQL dump 10.13  Distrib 8.0.26, for Win64 (x86_64)
--
-- Host: localhost    Database: web_scraped_data
-- ------------------------------------------------------
-- Server version	8.0.26

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `tutorialspoint_python_data`
--

DROP TABLE IF EXISTS `tutorialspoint_python_data`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `tutorialspoint_python_data` (
  `page_no` int NOT NULL,
  `main_headings` varchar(43) DEFAULT NULL,
  `sub_headings_h2` varchar(747) DEFAULT NULL,
  `sub_headings_h3` varchar(221) DEFAULT NULL,
  `links` text,
  `image_urls` varchar(527) DEFAULT NULL,
  `facts` text,
  `definitions` varchar(2418) DEFAULT NULL,
  `explanations` text,
  `codes` text,
  `outputs` varchar(1289) DEFAULT NULL,
  `table_data` text,
  `list_items` text,
  PRIMARY KEY (`page_no`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tutorialspoint_python_data`
--

LOCK TABLES `tutorialspoint_python_data` WRITE;
/*!40000 ALTER TABLE `tutorialspoint_python_data` DISABLE KEYS */;
INSERT INTO `tutorialspoint_python_data` VALUES (0,'[\'Python 3 Tutorial\']','[\'Why to Learn Python 3?\', \'Characteristics of Python\', \'Hello World using Python.\', \'Applications of Python\', \'Audience\', \'Prerequisites\', \'Useful Video Courses\']','[]','[\'https://www.tutorialspoint.com/python3/python3_pdf_version.htm\', \'https://www.tutorialspoint.com/python3/python_quick_guide.htm\', \'https://www.tutorialspoint.com/python3/python_useful_resources.htm\', \'https://www.tutorialspoint.com/python3/python_discussion.htm\', \'https://www.tutorialspoint.com/python/index.htm\', \'http://tpcg.io/GBhBAj\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/index.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python3_whatisnew.htm\']','[\'https://www.tutorialspoint.com/python3/images/python.jpg\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'Following are important characteristics of python −\', \'It supports functional and structured programming methods as well as OOP.\', \'It supports automatic garbage collection.\', \'It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java.\', \'Easy-to-read − Python code is more clearly defined and visible to the eyes.\', \"Easy-to-maintain − Python\'s source code is fairly easy-to-maintain.\", \'Databases − Python provides interfaces to all major commercial databases.\']','[\'It can be used as a scripting language or can be compiled to byte-code for building large applications.\', \'It provides very high-level dynamic data types and supports dynamic type checking.\', \"As mentioned before, Python is one of the most widely used language over the web. I\'m going to list few of them here:\", \'Portable − Python can run on a wide variety of hardware platforms and has the same interface on all platforms.\', \'Scalable − Python provides a better structure and support for large programs than shell scripting.\']','[\'Python is a general-purpose interpreted, interactive, object-oriented, and high-level programming language. It was created by Guido van Rossum during 1985- 1990. Like Perl, Python source code is also available under the GNU General Public License (GPL). Python is named after a TV Show called ëMonty Pythonís Flying Circusí and not after Python-the snake.\', \' Python 3.0 was released in 2008. Although this version is supposed to be backward incompatibles, later on many of its important features have been backported to be compatible with version 2.7.This tutorial gives enough understanding on Python 3 version programming language. Please refer to this link for our Python 2 tutorial.\', \'Python is a high-level, interpreted, interactive and object-oriented scripting language. Python is designed to be highly readable. It uses English keywords frequently where as other languages use punctuation, and it has fewer syntactical constructions than other languages.\', \'Python is a MUST for students and working professionals to become a great Software Engineer specially when they are working in Web Development Domain. I will list down some of the key advantages of learning Python:\', \'Python is Interpreted − Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP.\', \'Python is Interactive − You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.\', \'Python is Object-Oriented − Python supports Object-Oriented style or technique of programming that encapsulates code within objects.\', \"Python is a Beginner\'s Language − Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.\", \"Just to give you a little excitement about Python, I\'m going to give you a small conventional Python Hello World program, You can try it using Demo link.\", \'Easy-to-learn − Python has few keywords, simple structure, and a clearly defined syntax. This allows the student to pick up the language quickly.\', \"A broad standard library − Python\'s bulk of the library is very portable and cross-platform compatible on UNIX, Windows, and Macintosh.\", \'Interactive Mode − Python has support for an interactive mode which allows interactive testing and debugging of snippets of code.\', \'Extendable − You can add low-level modules to the Python interpreter. These modules enable programmers to add to or customize their tools to be more efficient.\', \'GUI Programming − Python supports GUI applications that can be created and ported to many system calls, libraries and windows systems, such as Windows MFC, Macintosh, and the X Window system of Unix.\', \'This tutorial is designed for software programmers who want to upgrade their Python skills to Python 3. This tutorial can also be used to learn Python programming language from scratch.\', \'You should have a basic understanding of Computer Programming terminologies. A basic understanding of any of the programming languages is a plus.\']','[\'\nprint \"Hello, Python!\"\n\']','[]','[]','[\"Python is Interpreted − Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP.|||Python is Interactive − You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.|||Python is Object-Oriented − Python supports Object-Oriented style or technique of programming that encapsulates code within objects.|||Python is a Beginner\'s Language − Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.|||It supports functional and structured programming methods as well as OOP.|||It can be used as a scripting language or can be compiled to byte-code for building large applications.|||It provides very high-level dynamic data types and supports dynamic type checking.|||It supports automatic garbage collection.|||It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java.|||Easy-to-learn − Python has few keywords, simple structure, and a clearly defined syntax. This allows the student to pick up the language quickly.|||Easy-to-read − Python code is more clearly defined and visible to the eyes.|||Easy-to-maintain − Python\'s source code is fairly easy-to-maintain.|||A broad standard library − Python\'s bulk of the library is very portable and cross-platform compatible on UNIX, Windows, and Macintosh.|||Interactive Mode − Python has support for an interactive mode which allows interactive testing and debugging of snippets of code.|||Portable − Python can run on a wide variety of hardware platforms and has the same interface on all platforms.|||Extendable − You can add low-level modules to the Python interpreter. These modules enable programmers to add to or customize their tools to be more efficient.|||Databases − Python provides interfaces to all major commercial databases.|||GUI Programming − Python supports GUI applications that can be created and ported to many system calls, libraries and windows systems, such as Windows MFC, Macintosh, and the X Window system of Unix.|||Scalable − Python provides a better structure and support for large programs than shell scripting.|||\"]'),(1,'[\'What is New in Python 3\']','[\'The __future__ module\', \'The print Function\', \'Reading Input from Keyboard\', \'Integer Division\', \'Unicode Representation\', \'xrange() Function Removed\', \'raise exception\', \'Arguments in Exceptions\', \'next() Function and .next() Method\', \'2to3 Utility\', \'Useful Video Courses\']','[]','[\'https://www.tutorialspoint.com/python3/index.htm\', \'https://www.tutorialspoint.com/python3/python_overview.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/index.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_overview.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\"In Python 3, arguments to exception should be declared with \'as\' keyword.\"]','[\"For example, if we want Python 3.x\'s integer division behavior in Python 2, add the following import statement.\", \'In Python 3, raw_input() function is deprecated. Further, the received data is always treated as string.\', \'Python 3 evaluates 3 / 2 as 1.5 by default, which is more intuitive for new programmers.\', \'Python 2 requires you to mark a string with a u if you want to store it as Unicode. \']','[\'Python 3.x introduced some Python 2-incompatible keywords and features that can beimported via the in-built __future__ module in Python 2. It is recommended to use __future__ imports, if you are planning Python 3.x support for your code.\', \'Most notable and most widely known change in Python 3 is how the print function is used. Use of parenthesis () with print function is now mandatory. It was optional in Python 2.\', \'The print() function inserts a new line at the end, by default. In Python 2, it can be suppressed by putting \',\' at the end. In Python 3, \"end =\' \'\" appends space instead of newline.\', \'Python 2 has two versions of input functions, input() and raw_input(). The input() function treats the received data as string if it is included in quotes \'\' or \"\", otherwise the data is treated as number.\', \'In Python 2, the result of division of two integers is rounded to the nearest integer. As a result, 3/2 will show 1. In order to obtain a floating-point division, numerator or denominator must be explicitly used as float. Hence, either 3.0/2 or 3/2.0 or 3.0/2.0 will result in 1.5\', \'Python 3 stores strings as Unicode, by default. We have Unicode (utf-8) strings, and 2 byte classes: byte and byte arrays.\', \'In Python 2 range() returns a list, and xrange() returns an object that will only generate the items in the range when needed, saving memory.\', \'In Python 3, the range() function is removed, and xrange() has been renamed as range(). In addition, the range() object supports slicing in Python 3.2 and later.\', \"Python 2 accepts both notations, the \'old\' and the \'new\' syntax; Python 3 raises a SyntaxError if we do not enclose the exception argument in parenthesis.\", \'In Python 2, next() as a method of generator object, is allowed. In Python 2, the next() function, to iterate over generator object, is also accepted. In Python 3, however, next(0 as a generator method is discontinued and raises AttributeError.\', \'Along with Python 3 interpreter, 2to3.py script is usually installed in tools/scripts folder. It reads Python 2.x source code and applies a series of fixers to transform it into a valid Python 3.x code.\']','[\'\nfrom __future__ import division\n\', \'\nprint \"Hello World\" #is acceptable in Python 2\nprint (\"Hello World\") # in Python 3, print must be followed by ()\n\', \'\nprint x,           # Trailing comma suppresses newline in Python 2\nprint(x, end=\" \")  # Appends a space instead of a newline in Python 3\n\', \'\nIn Python 2\n\n>>> x = input(\'something:\') \nsomething:10 #entered data is treated as number\n>>> x\n10\n\n>>> x = input(\'something:\')\nsomething:\'10\' #entered data is treated as string\n>>> x\n\'10\'\n\n>>> x = raw_input(\"something:\")\nsomething:10 #entered data is treated as string even without \'\'\n>>> x\n\'10\'\n\n>>> x = raw_input(\"something:\")\nsomething:\'10\' #entered data treated as string including \'\'\n>>> x\n\"\'10\'\"\n\nIn Python 3\n\n>>> x = input(\"something:\")\nsomething:10\n>>> x\n\'10\'\n\n>>> x = input(\"something:\")\nsomething:\'10\' #entered data treated as string with or without \'\'\n>>> x\n\"\'10\'\"\n\n>>> x = raw_input(\"something:\") # will result NameError\nTraceback (most recent call last):\n   File \"<pyshell#3>\", line 1, in \n  <module>\n   x = raw_input(\"something:\")\nNameError: name \'raw_input\' is not defined\n\', \'\nraise IOError, \"file error\" #This is accepted in Python 2\nraise IOError(\"file error\") #This is also accepted in Python 2\nraise IOError, \"file error\" #syntax error is raised in Python 3\nraise IOError(\"file error\") #this is the recommended syntax in Python 3\n\', \'\nexcept Myerror, err: # In Python2\nexcept Myerror as err: #In Python 3\n\', \"\ngen = (letter for letter in \'Hello World\') # creates generator object\nnext(my_generator) #allowed in Python 2 and Python 3\nmy_generator.next() #allowed in Python 2. raises AttributeError in Python 3\n\", \'\nHere is a sample Python 2 code (area.py):\n\ndef area(x,y = 3.14): \n   a = y*x*x\n   print a\n   return a\n\na = area(10)\nprint \"area\",a\n\nTo convert into Python 3 version:\n\n$2to3 -w area.py\n\nConverted code :\n\ndef area(x,y = 3.14): # formal parameters\n   a = y*x*x\n   print (a)\n   return a\n\na = area(10)\nprint(\"area\",a)\n\']','[]','[]','[]'),(2,'[\'Python 3 - Overview\']','[\'History of Python\', \'Python Features\', \'Useful Video Courses\']','[]','[\'https://www.tutorialspoint.com/python3/python3_whatisnew.htm\', \'https://www.tutorialspoint.com/python3/python_environment.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python3_whatisnew.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_environment.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'Easy-to-read − Python code is more clearly defined and visible to the eyes.\', \"Easy-to-maintain − Python\'s source code is fairly easy-to-maintain.\", \'Databases − Python provides interfaces to all major commercial databases.\', \'It supports functional and structured programming methods as well as OOP.\', \'It supports automatic garbage collection.\', \'It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java.\']','[\'Python is copyrighted. Like Perl, Python source code is now available under the GNU General Public License (GPL).\', \'Portable − Python can run on a wide variety of hardware platforms and has the same interface on all platforms.\', \'Scalable − Python provides a better structure and support for large programs than shell scripting.\', \'Apart from the above-mentioned features, Python has a big list of good features. A, few are listed below −\', \'It can be used as a scripting language or can be compiled to byte-code for building large applications.\', \'It provides very high-level dynamic data types and supports dynamic type checking.\']','[\'Python is a high-level, interpreted, interactive and object-oriented scripting language. Python is designed to be highly readable. It uses English keywords frequently whereas the other languages use punctuations. It has fewer syntactical constructions than other languages.\', \'Python is Interpreted − Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP.\', \'Python is Interactive − You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.\', \'Python is Object-Oriented − Python supports Object-Oriented style or technique of programming that encapsulates code within objects.\', \"Python is a Beginner\'s Language − Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.\", \'Python was developed by Guido van Rossum in the late eighties and early nineties at the National Research Institute for Mathematics and Computer Science in the Netherlands.\', \'Python is derived from many other languages, including ABC, Modula-3, C, C++, Algol-68, SmallTalk, and Unix shell and other scripting languages.\', \'Python is now maintained by a core development team at the institute, although Guido van Rossum still holds a vital role in directing its progress.\', \'Python 1.0 was released in November 1994. In 2000, Python 2.0 was released. Python 2.7.11 is the latest edition of Python 2.\', \'Meanwhile, Python 3.0 was released in 2008. Python 3 is not backward compatible with Python 2. The emphasis in Python 3 had been on the removal of duplicate programming constructs and modules so that \"There should be one -- and preferably only one -- obvious way to do it.\" Python 3.5.1 is the latest version of Python 3.\', \'Easy-to-learn − Python has few keywords, simple structure, and a clearly defined syntax. This allows a student to pick up the language quickly.\', \"A broad standard library − Python\'s bulk of the library is very portable and cross-platform compatible on UNIX, Windows, and Macintosh.\", \'Interactive Mode − Python has support for an interactive mode which allows interactive testing and debugging of snippets of code.\', \'Extendable − You can add low-level modules to the Python interpreter. These modules enable programmers to add to or customize their tools to be more efficient.\', \'GUI Programming − Python supports GUI applications that can be created and ported to many system calls, libraries and windows systems, such as Windows MFC, Macintosh, and the X Window system of Unix.\']','[]','[]','[]','[\'Python is Interpreted − Python is processed at runtime by the interpreter. You do not need to compile your program before executing it. This is similar to PERL and PHP.|||Python is Interactive − You can actually sit at a Python prompt and interact with the interpreter directly to write your programs.|||Python is Object-Oriented − Python supports Object-Oriented style or technique of programming that encapsulates code within objects.|||Python is a Beginner\'s Language − Python is a great language for the beginner-level programmers and supports the development of a wide range of applications from simple text processing to WWW browsers to games.|||Python is derived from many other languages, including ABC, Modula-3, C, C++, Algol-68, SmallTalk, and Unix shell and other scripting languages.|||Python is copyrighted. Like Perl, Python source code is now available under the GNU General Public License (GPL).|||Python is now maintained by a core development team at the institute, although Guido van Rossum still holds a vital role in directing its progress.|||Python 1.0 was released in November 1994. In 2000, Python 2.0 was released. Python 2.7.11 is the latest edition of Python 2.|||Meanwhile, Python 3.0 was released in 2008. Python 3 is not backward compatible with Python 2. The emphasis in Python 3 had been on the removal of duplicate programming constructs and modules so that \"There should be one -- and preferably only one -- obvious way to do it.\" Python 3.5.1 is the latest version of Python 3.|||Easy-to-learn − Python has few keywords, simple structure, and a clearly defined syntax. This allows a student to pick up the language quickly.|||Easy-to-read − Python code is more clearly defined and visible to the eyes.|||Easy-to-maintain − Python\'s source code is fairly easy-to-maintain.|||A broad standard library − Python\'s bulk of the library is very portable and cross-platform compatible on UNIX, Windows, and Macintosh.|||Interactive Mode − Python has support for an interactive mode which allows interactive testing and debugging of snippets of code.|||Portable − Python can run on a wide variety of hardware platforms and has the same interface on all platforms.|||Extendable − You can add low-level modules to the Python interpreter. These modules enable programmers to add to or customize their tools to be more efficient.|||Databases − Python provides interfaces to all major commercial databases.|||GUI Programming − Python supports GUI applications that can be created and ported to many system calls, libraries and windows systems, such as Windows MFC, Macintosh, and the X Window system of Unix.|||Scalable − Python provides a better structure and support for large programs than shell scripting.|||It supports functional and structured programming methods as well as OOP.|||It can be used as a scripting language or can be compiled to byte-code for building large applications.|||It provides very high-level dynamic data types and supports dynamic type checking.|||It supports automatic garbage collection.|||It can be easily integrated with C, C++, COM, ActiveX, CORBA, and Java.|||\']'),(3,'[\'Python 3 - Environment Setup\']','[\'Local Environment Setup\', \'Getting Python\', \'Setting up PATH\', \'Setting Path at Unix/Linux\', \'Setting Path at Windows\', \'Python Environment Variables\', \'Running Python\', \'Useful Video Courses\']','[\'Windows platform\', \'Linux platform\', \'Mac OS\', \'Interactive Interpreter\', \'Script from the Command-line\', \'Integrated Development Environment\']','[\'https://www.tutorialspoint.com/python3/python_overview.htm\', \'https://www.tutorialspoint.com/python3/python_basic_syntax.htm\', \'https://www.python.org/downloads/windows/\', \'https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz\', \'https://www.python.org/downloads/mac-osx/\', \'https://www.python.org/\', \'https://www.python.org/doc/\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_overview.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_basic_syntax.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'The following different installation options are available.\', \'Double click this package file and follow the wizard instructions to install.\', \'Python Official Website − https://www.python.org/\', \'Python Documentation Website − www.python.org/doc/\', \'To add the Python directory to the path for a particular session in Unix −\', \'Note − /usr/local/bin/python3 is the path of the Python directory.\', \'To add the Python directory to the path for a particular session in Windows −\', \'At the command prompt − type path %path%;C:\\Python and press Enter.\', \'Note − C:\\Python is the path of the Python directory\', \'Here are important environment variables, which are recognized by Python −\', \'There are three different ways to start Python −\', \'Start coding right away in the interactive interpreter.\', \'Here is the list of all the available command line options −\', \'generate optimized bytecode (resulting in .pyo files)\', \'do not run import site to look for Python paths on startup\', \'verbose output (detailed trace on import statements)\', \'run Python script sent in as cmd string\', \'Note − Be sure the file permission mode allows execution.\', \'Unix − IDLE is the very first Unix IDE for Python.\']','[\'Open a terminal window and type \"python\" to find out if it is already installed and which version is installed.\', \'Binaries of latest version of Python 3 (Python 3.5.1) are available on this download page\', \'Different flavors of Linux use different package managers for installation of new packages.\', \'On Ubuntu Linux, Python 3 is installed using the following command from the terminal.\', \"Download Gzipped source tarball from Python\'s download URL − https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz\", \'Download Mac OS installers from this URL − https://www.python.org/downloads/mac-osx/\', \'The path variable is named as PATH in Unix or Path in Windows (Unix is case-sensitive; Windows is not).\', \'In the csh shell − type setenv PATH \"$PATH:/usr/local/bin/python3\" and press Enter.\', \'In the bash shell (Linux) − type export PYTHONPATH=/usr/local/bin/python3.4 and press Enter.\', \'In the sh or ksh shell − type PATH = \"$PATH:/usr/local/bin/python3\" and press Enter.\', \'You can start Python from Unix, DOS, or any other system that provides you a command-line interpreter or shell window.\', \'disable class-based built-in exceptions (just use strings); obsolete starting with version 1.6\', \'Windows − PythonWin is the first Windows interface for Python and is an IDE with a GUI.\']','[\'Python 3 is available for Windows, Mac OS and most of the flavors of Linux operating system. Even though Python 2 is available for many other OSs, Python 3 support either has not been made available for them or has been dropped.\', \'Note − In order to install Python 3.5.1, minimum OS requirements are Windows 7 with SP1. For versions 3.0 to 3.4.x Windows XP is acceptable.\', \'The most up-to-date and current source code, binaries, documentation, news, etc., is available on the official website of Python −\', \'You can download Python documentation from the following site. The documentation is available in HTML, PDF and PostScript formats.\', \'Programs and other executable files can be in many directories. Hence, the operating systems provide a search path that lists the directories that it searches for executables.\', \'The path is stored in an environment variable, which is a named string maintained by the operating system. This variable contains information available to the command shell and other programs.\', \'In Mac OS, the installer handles the path details. To invoke the Python interpreter from any particular directory, you must add the Python directory to your path.\', \'It has a role similar to PATH. This variable tells the Python interpreter where to locate the module files imported into a program. It should include the Python source library directory and the directories containing Python source code. PYTHONPATH is sometimes preset by the Python installer.\', \'It contains the path of an initialization file containing Python source code. It is executed every time you start the interpreter. It is named as .pythonrc.py in Unix and it contains commands that load utilities or modify PYTHONPATH.\', \'It is used in Windows to instruct Python to find the first case-insensitive match in an import statement. Set this variable to any value to activate it.\', \'It is an alternative module search path. It is usually embedded in the PYTHONSTARTUP or PYTHONPATH directories to make switching module libraries easy.\', \'A Python script can be executed at the command line by invoking the interpreter on your application, as shown in the following example.\', \'You can run Python from a Graphical User Interface (GUI) environment as well, if you have a GUI application on your system that supports Python.\', \"Macintosh − The Macintosh version of Python  along with the IDLE IDE is available from the main website, downloadable as either MacBinary or BinHex\'d files.\", \'If you are not able to set up the environment properly, then you can take the help of your system admin. Make sure the Python environment is properly set up and working perfectly fine.\', \'Note − All the examples given in subsequent chapters are executed with Python 3.4.1 version available on Windows 7 and Ubuntu Linux.\', \'We have already set up Python Programming environment online, so that you can execute all the available examples online while you are learning theory. Feel free to modify any example and execute it online.\']','[\'\n$sudo apt-get install python3-minimal\n\', \'\nExtract the tarball\ntar xvfz Python-3.5.1.tgz\nConfigure and Install:\ncd Python-3.5.1\n./configure --prefix = /opt/python3.5.1\nmake  \nsudo make install\n\', \'\n$python             # Unix/Linux\nor\npython%             # Unix/Linux\nor\nC:>python           # Windows/DOS\n\', \'\n$python  script.py          # Unix/Linux\nor\npython% script.py           # Unix/Linux\nor \nC:>python script.py         # Windows/DOS\n\']','[\'\n$python             # Unix/Linux\nor\npython%             # Unix/Linux\nor\nC:>python           # Windows/DOS\n\', \'\n$python  script.py          # Unix/Linux\nor\npython% script.py           # Unix/Linux\nor \nC:>python script.py         # Windows/DOS\n\']','[\'Sr.No.|||Variable & Description&&&1|||PYTHONPATH|||It has a role similar to PATH. This variable tells the Python interpreter where to locate the module files imported into a program. It should include the Python source library directory and the directories containing Python source code. PYTHONPATH is sometimes preset by the Python installer.&&&2|||PYTHONSTARTUP|||It contains the path of an initialization file containing Python source code. It is executed every time you start the interpreter. It is named as .pythonrc.py in Unix and it contains commands that load utilities or modify PYTHONPATH.&&&3|||PYTHONCASEOK|||It is used in Windows to instruct Python to find the first case-insensitive match in an import statement. Set this variable to any value to activate it.&&&4|||PYTHONHOME|||It is an alternative module search path. It is usually embedded in the PYTHONSTARTUP or PYTHONPATH directories to make switching module libraries easy.\', \'Sr.No.|||Option & Description&&&1|||-d|||provide debug output&&&2|||-O|||generate optimized bytecode (resulting in .pyo files)&&&3|||-S|||do not run import site to look for Python paths on startup&&&4|||-v|||verbose output (detailed trace on import statements)&&&5|||-X|||disable class-based built-in exceptions (just use strings); obsolete starting with version 1.6&&&6|||-c cmd|||run Python script sent in as cmd string&&&7|||file|||run Python script from given file\']','[\'Windows x86-64 embeddable zip file|||Windows x86-64 executable installer|||Windows x86-64 web-based installer|||Windows x86 embeddable zip file|||Windows x86 executable installer|||Windows x86 web-based installer|||Mac OS X 64-bit/32-bit installer − python-3.5.1-macosx10.6.pkg|||Mac OS X 32-bit i386/PPC installer − python-3.5.1-macosx10.5.pkg|||The path is stored in an environment variable, which is a named string maintained by the operating system. This variable contains information available to the command shell and other programs.|||The path variable is named as PATH in Unix or Path in Windows (Unix is case-sensitive; Windows is not).|||In Mac OS, the installer handles the path details. To invoke the Python interpreter from any particular directory, you must add the Python directory to your path.|||In the csh shell − type setenv PATH \"$PATH:/usr/local/bin/python3\" and press Enter.|||In the bash shell (Linux) − type export PYTHONPATH=/usr/local/bin/python3.4 and press Enter.|||In the sh or ksh shell − type PATH = \"$PATH:/usr/local/bin/python3\" and press Enter.|||At the command prompt − type path %path%;C:\\Python and press Enter.|||Unix − IDLE is the very first Unix IDE for Python.|||Windows − PythonWin is the first Windows interface for Python and is an IDE with a GUI.|||Macintosh − The Macintosh version of Python  along with the IDLE IDE is available from the main website, downloadable as either MacBinary or BinHex\'d files.|||\']'),(4,'[\'Python 3 - Basic Syntax\']','[\'First Python Program\', \'Python Identifiers\', \'Reserved Words\', \'Lines and Indentation\', \'Multi-Line Statements\', \'Quotation in Python\', \'Comments in Python\', \'Using Blank Lines\', \'Waiting for the User\', \'Multiple Statements on a Single Line\', \'Multiple Statement Groups as Suites\', \'Command Line Arguments\', \'Useful Video Courses\']','[\'Interactive Mode Programming\', \'Script Mode Programming\']','[\'https://www.tutorialspoint.com/python3/python_environment.htm\', \'https://www.tutorialspoint.com/python3/python_variable_types.htm\', \'http://tpcg.io/GBhBAj\', \'http://tpcg.io/LheT18\', \'http://tpcg.io/e9zmst\', \'https://www.tutorialspoint.com/python3/python_command_line_arguments.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_environment.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_variable_types.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'Let us execute the programs in different modes of programming.\', \'Type the following text at the Python prompt and press Enter −\', \'This produces the following result −\', \'This produces the following result −\', \'This produces the following result −\', \'Here are naming conventions for Python identifiers −\', \'However, the following block generates an error −\', \'This produces the following result −\', \'You can type a comment on the same line after a statement or expression −\']','[\'Invoking the interpreter without passing a script file as a parameter brings up the following prompt −\', \'We assume that you have the Python interpreter set in PATH variable. Now, try to run this program as follows −\', \'Let us try another way to execute a Python script in Linux. Here is the modified test.py file −\', \'Class names start with an uppercase letter. All other identifiers start with a lowercase letter.\', \'Starting an identifier with a single leading underscore indicates that the identifier is private.\', \'Starting an identifier with two leading underscores indicates a strong private identifier.\', \'If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.\', \'The triple quotes are used to span the string across multiple lines. For example, all the following are legal −\', \'Python does not have multiple-line commenting feature. You have to comment each line individually as follows −\', \'A line containing only whitespace, possibly with a comment, is known as a blank line and Python totally ignores it.\', \'In an interactive interpreter session, you must enter an empty physical line to terminate a multiline statement.\']','[\'The Python language has many similarities to Perl, C, and Java. However, there are some definite differences between the languages.\', \'If you are running the older version of Python (Python 2.x), use of parenthesis as inprint function is optional. This produces the following result −\', \'Invoking the interpreter with a script parameter begins execution of the script and continues until the script is finished. When the script is finished, the interpreter is no longer active.\', \'Let us write a simple Python program in a script. Python files have the extension .py. Type the following source code in a test.py file −\', \'We assume that you have Python interpreter available in the /usr/bin directory. Now, try to run this program as follows −\', \'A Python identifier is a name used to identify a variable, function, class, module or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9).\', \'Python does not allow punctuation characters such as @, $, and % within identifiers. Python is a case sensitive programming language. Thus, Manpower and manpower are two different identifiers in Python.\', \'The following list shows the Python keywords. These are reserved words and you cannot use them as constants or variables or any other identifier names. All the Python keywords contain lowercase letters only.\', \'Python does not use braces({}) to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced.\', \'The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. For example −\', \'Thus, in Python all the continuous lines indented with the same number of spaces would form a block. The following example has various statement blocks −\', \'Note − Do not try to understand the logic at this point of time. Just make sure you understood the various blocks even if they are without braces.\', \'Statements in Python typically end with a new line. Python, however, allows the use of the line continuation character (\\) to denote that the line should continue. For example −\', \'The statements contained within the [], {}, or () brackets do not need to use the line continuation character. For example −\', \'Python accepts single (\'), double (\") and triple (\'\'\' or \"\"\") quotes to denote string literals, as long as the same type of quote starts and ends the string.\', \'A hash sign (#) that is not inside a string literal is the beginning of a comment. All characters after the #, up to the end of the physical line, are part of the comment and the Python interpreter ignores them.\', \'The following line of the program displays the prompt and, the statement saying “Press the enter key to exit”, and then waits for the user to take action −\', \'Here, \"\\n\\n\" is used to create two new lines before displaying the actual line. Once the user presses the key, the program ends. This is a nice trick to keep a console window open until the user is done with an application.\', \'The semicolon ( ; ) allows multiple statements on a single line given that no statement starts a new code block. Here is a sample snip using the semicolon −\', \'Groups of individual statements, which make a single code block are called suites in Python. Compound or complex statements, such as if, while, def, and class require a header line and a suite.\', \'Header lines begin the statement (with the keyword) and terminate with a colon ( : ) and are followed by one or more lines which make up the suite. For example −\', \'Many programs can be run to provide you with some basic information about how they should be run. Python enables you to do this with -h −\', \'You can also program your script in such a way that it should accept various options. Command Line Arguments is an advanced topic. Let us understand it.\']','[\'\r\n$ python\r\n\r\nPython 3.3.2 (default, Dec 10 2013, 11:35:01)\r\n[GCC 4.6.3] on Linux\r\nType \"help\", \"copyright\", \"credits\", or \"license\" for more information.\r\n>>>\r\n\r\nOn Windows:\r\n\r\nPython 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:43:06) [MSC v.1600 32 bit (Intel)] on win32\r\nType \"copyright\", \"credits\" or \"license()\" for more information.\r\n>>>\r\n\', \'\r\n>>> print (\"Hello, Python!\")\r\n\', \'\r\nHello, Python!\r\n\', \'\r\nprint (\"Hello, Python!\")\r\n\', \'\r\n$ python test.py \r\n\', \'\r\nHello, Python!\r\n\', \'\r\nC:\\Python34>Python test.py\r\n\', \'\r\nHello, Python!\r\n\', \'\r\n#!/usr/bin/python3\r\nprint (\"Hello, Python!\")\r\n\', \'\r\n$ chmod +x test.py     # This is to make file executable\r\n$./test.py\r\n\', \'\r\nHello, Python!\r\n\', \'\r\nif True:\r\n   print (\"True\")\r\n\r\nelse:\r\n   print (\"False\")\r\n\', \'\r\nif True:\r\n   print (\"Answer\")\r\n   print (\"True\")\r\n\r\nelse:\r\n   print \"(Answer\")\r\n   print (\"False\")\r\n\', \'\r\n#!/usr/bin/python3\r\nimport sys\r\n\r\nfile_finish = \"end\"\r\nfile_text = \"\"\r\ncontents=[]\r\n\r\nfile_name=input(\"Enter filename: \")\r\nif len(file_name) == 0:\r\n   print(\"Please enter filename\")\r\n   sys.exit()\r\n\r\ntry:\r\n   # open file stream\r\n   file = open(file_name, \"w\")\r\n\r\nexcept IOError:\r\n   print (\"There was an error writing to\", file_name)\r\n   sys.exit()\r\n\r\nprint (\"Enter \'\", file_finish,)\r\nprint (\"\' When finished\")\r\n\r\nwhile file_text != file_finish:\r\n   file_text = input(\"Enter text: \")\r\n   contents.append(file_text)\r\n\r\n   if file_text == file_finish:\r\n      # close the file\r\n      file.close()\r\n      break\r\n\r\nprint(contents)\r\ndata = \' \'.join([str(elem) for elem in contents])  \r\nprint(data)\r\nfile.write(data)\r\nfile.close()\r\nfile_name = input(\"Enter filename: \")\r\n\r\nif len(file_name) == 0:\r\n   print (\"Next time please enter something\")\r\n   sys.exit()\r\n\r\ntry:\r\n   file = open(file_name, \"r\")\r\n\r\nexcept IOError:\r\n   print (\"There was an error reading file\")\r\n   sys.exit()\r\nfile_text = file.read()\r\nfile.close()\r\nprint (file_text)\r\n\', \'\r\ntotal = item_one + \\\r\n   item_two + \\\r\n   item_three\r\n\', \"\r\ndays = [\'Monday\', \'Tuesday\', \'Wednesday\', \'Thursday\', \'Friday\']\r\n\", \'\r\nword = \'word\'\r\nsentence = \"This is a sentence.\"\r\nparagraph = \"\"\"This is a paragraph. It is\r\nmade up of multiple lines and sentences.\"\"\"\r\n\', \'\r\n#!/usr/bin/python3\r\n\r\n# First comment\r\nprint (\"Hello, Python!\") # second comment\r\n\', \'\r\nHello, Python!\r\n\', \'\r\nname = \"Madisetti\" # This is again comment\r\n\', \'\r\n# This is a comment.\r\n# This is a comment, too.\r\n# This is a comment, too.\r\n# I said that already.\r\n\', \'\r\n#!/usr/bin/python3\r\n\r\ninput(\"\\n\\nPress the enter key to exit.\")\r\n\', \"\r\nimport sys; x = \'foo\'; sys.stdout.write(x + \'\\n\')\r\n\", \'\r\nif expression : \r\n   suite\r\nelif expression : \r\n   suite \r\nelse : \r\n   suite\r\n\', \'\r\n$ python -h\r\nusage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...\r\nOptions and arguments (and corresponding environment variables):\r\n-c cmd : program passed in as string (terminates option list)\r\n-d     : debug output from parser (also PYTHONDEBUG=x)\r\n-E     : ignore environment variables (such as PYTHONPATH)\r\n-h     : print this help message and exit\r\n\r\n[ etc. ]\r\n\']','[\'\r\nHello, Python!\r\n\', \'\r\nHello, Python!\r\n\', \'\r\nHello, Python!\r\n\', \'\r\nHello, Python!\r\n\']','[\'and|||exec|||not&&&as|||finally|||or&&&assert|||for|||pass&&&break|||from|||print&&&class|||global|||raise&&&continue|||if|||return&&&def|||import|||try&&&del|||in|||while&&&elif|||is|||with &&&else|||lambda|||yield&&&except||||||\']','[\'Class names start with an uppercase letter. All other identifiers start with a lowercase letter.|||Starting an identifier with a single leading underscore indicates that the identifier is private.|||Starting an identifier with two leading underscores indicates a strong private identifier.|||If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.|||\']'),(5,'[\'Python 3 - Variable Types\']','[\'Assigning Values to Variables\', \'Multiple Assignment\', \'Standard Data Types\', \'Python Numbers\', \'Python Strings\', \'Python Lists\', \'Python Tuples\', \'Python Dictionary\', \'Data Type Conversion\', \'Useful Video Courses\']','[\'Examples\']','[\'https://www.tutorialspoint.com/python3/python_basic_syntax.htm\', \'https://www.tutorialspoint.com/python3/python_basic_operators.htm\', \'http://tpcg.io/DF7KqE\', \'http://tpcg.io/I93mP1\', \'http://tpcg.io/qZUZTc\', \'http://tpcg.io/ZvI4k3\', \'http://tpcg.io/N2CwyM\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_basic_syntax.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_basic_operators.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'Python allows you to assign a single value to several variables simultaneously.\', \'Python has five standard data types −\', \'You can delete a single object or multiple objects by using the del statement.\', \'Python supports three different numerical types −\', \'This will produce the following result −\', \'This produces the following result −\', \'This produces the following result −\', \'This produces the following result −\', \'Converts x to an integer. The base specifies the base if x is a string.\', \'Converts x to a floating-point number.\', \'Converts object x to a string representation.\', \'Converts object x to an expression string.\', \'Evaluates a string and returns an object.\', \'Creates a dictionary. d must be a sequence of (key,value) tuples.\', \'Converts an integer to a Unicode character.\', \'Converts a single character to its integer value.\', \'Converts an integer to a hexadecimal string.\', \'Converts an integer to an octal string.\']','[\'Number data types store numeric values. Number objects are created when you assign a value to them. For example −\', \'You can also delete the reference to a number object by using the del statement. The syntax of the del statement is −\', \'All integers in Python3 are represented as long integers. Hence, there is no separate number type as long.\', \'The plus (+) sign is the string concatenation operator and the asterisk (*) is the repetition operator. For example −\']','[\'Variables are nothing but reserved memory locations to store values. It means that when you create a variable, you reserve some space in the memory.\', \'Based on the data type of a variable, the interpreter allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to the variables, you can store integers, decimals or characters in these variables.\', \'Python variables do not need explicit declaration to reserve memory space. The declaration happens automatically when you assign a value to a variable. The equal sign (=) is used to assign values to variables.\', \'The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. For example −\', \'Here, 100, 1000.0 and  \"John\" are the values assigned to counter, miles, and name variables, respectively. This produces the following result −\', \'Here, an integer object is created with the value 1, and all the three variables are assigned to the same memory location. You can also assign multiple objects to multiple variables. For example −\', \'Here, two integer objects with values 1 and 2 are assigned to the variables a and b respectively, and one string object with the value \"john\" is assigned to the variable c.\', \"The data stored in memory can be of many types. For example, a person\'s age is stored as a numeric value and his or her address is stored as alphanumeric characters. Python has various standard data types that are used to define the operations possible on them and the storage method for each of them.\", \'A complex number consists of an ordered pair of real floating-point numbers denoted by x + yj, where x and y are real numbers and j is the imaginary unit.\', \'Strings in Python are identified as a contiguous set of characters represented in the quotation marks. Python allows either pair of single or double quotes. Subsets of strings can be taken using the slice operator ([ ] and [:] ) with indexes starting at 0 in the beginning of the string and working their way from -1 to the end.\', \"Lists are the most versatile of Python\'s compound data types. A list contains items separated by commas and enclosed within square brackets ([]). To some extent, lists are similar to arrays in C. One of the differences between them is that all the items belonging to a list can be of different data type.\", \'The values stored in a list can be accessed using the slice operator ([ ] and [:]) with indexes starting at 0 in the beginning of the list and working their way to end -1. The plus (+) sign is the list concatenation operator, and the asterisk (*) is the repetition operator. For example −\', \'A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parenthesis.\', \'The main difference between lists and tuples are − Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as read-only lists. For example −\', \'The following code is invalid with tuple, because we attempted to update a tuple, which is not allowed. Similar case is possible with lists −\', \"Python\'s dictionaries are kind of hash-table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.\", \'Dictionaries are enclosed by curly braces ({ }) and values can be assigned and accessed using square braces ([]). For example −\', \'Dictionaries have no concept of order among the elements. It is incorrect to say that the elements are \"out of order\"; they are simply unordered.\', \'Sometimes, you may need to perform conversions between the built-in types. To convert between types, you simply use the type-names as a function.\', \'There are several built-in functions to perform conversion from one data type to another. These functions return a new object representing the converted value.\']','[\'\n#!/usr/bin/python3\n\ncounter = 100          # An integer assignment\nmiles   = 1000.0       # A floating point\nname    = \"John\"       # A string\n\nprint (counter)\nprint (miles)\nprint (name)\n\', \'\n100\n1000.0\nJohn\n\', \'\na = b = c = 1\n\', \'\na, b, c = 1, 2, \"john\"\n\', \'\nvar1 = 1\nvar2 = 10\n\', \'\ndel var1[,var2[,var3[....,varN]]]]\n\', \'\ndel var\ndel var_a, var_b\n\', \'\n#!/usr/bin/python3\n\nstr = \'Hello World!\'\n\nprint (str)          # Prints complete string\nprint (str[0])       # Prints first character of the string\nprint (str[2:5])     # Prints characters starting from 3rd to 5th\nprint (str[2:])      # Prints string starting from 3rd character\nprint (str * 2)      # Prints string two times\nprint (str + \"TEST\") # Prints concatenated string\n\', \'\nHello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST\n\', \"\n#!/usr/bin/python3\n\nlist = [ \'abcd\', 786 , 2.23, \'john\', 70.2 ]\ntinylist = [123, \'john\']\n\nprint (list)          # Prints complete list\nprint (list[0])       # Prints first element of the list\nprint (list[1:3])     # Prints elements starting from 2nd till 3rd \nprint (list[2:])      # Prints elements starting from 3rd element\nprint (tinylist * 2)  # Prints list two times\nprint (list + tinylist) # Prints concatenated lists\n\", \"\n[\'abcd\', 786, 2.23, \'john\', 70.200000000000003]\nabcd\n[786, 2.23]\n[2.23, \'john\', 70.200000000000003]\n[123, \'john\', 123, \'john\']\n[\'abcd\', 786, 2.23, \'john\', 70.200000000000003, 123, \'john\']\n\", \"\n#!/usr/bin/python3\n\ntuple = ( \'abcd\', 786 , 2.23, \'john\', 70.2  )\ntinytuple = (123, \'john\')\n\nprint (tuple)           # Prints complete tuple\nprint (tuple[0])        # Prints first element of the tuple\nprint (tuple[1:3])      # Prints elements starting from 2nd till 3rd \nprint (tuple[2:])       # Prints elements starting from 3rd element\nprint (tinytuple * 2)   # Prints tuple two times\nprint (tuple + tinytuple) # Prints concatenated tuple\n\", \"\n(\'abcd\', 786, 2.23, \'john\', 70.200000000000003)\nabcd\n(786, 2.23)\n(2.23, \'john\', 70.200000000000003)\n(123, \'john\', 123, \'john\')\n(\'abcd\', 786, 2.23, \'john\', 70.200000000000003, 123, \'john\')\n\", \"\n#!/usr/bin/python3\n\ntuple = ( \'abcd\', 786 , 2.23, \'john\', 70.2  )\nlist = [ \'abcd\', 786 , 2.23, \'john\', 70.2  ]\ntuple[2] = 1000    # Invalid syntax with tuple\nlist[2] = 1000     # Valid syntax with list\n\", \'\n#!/usr/bin/python3\n\ndict = {}\ndict[\'one\'] = \"This is one\"\ndict[2]     = \"This is two\"\n\ntinydict = {\'name\': \'john\',\'code\':6734, \'dept\': \'sales\'}\n\nprint (dict[\'one\'])       # Prints value for \'one\' key\nprint (dict[2])           # Prints value for 2 key\nprint (tinydict)          # Prints complete dictionary\nprint (tinydict.keys())   # Prints all the keys\nprint (tinydict.values()) # Prints all the values\n\', \"\nThis is one\nThis is two\n{\'name\': \'john\', \'dept\': \'sales\', \'code\': 6734}\ndict_keys([\'name\', \'dept\', \'code\'])\ndict_values([\'john\', \'sales\', 6734])\n\"]','[\'\n100\n1000.0\nJohn\n\', \'\na = b = c = 1\n\', \'\na, b, c = 1, 2, \"john\"\n\', \'\nvar1 = 1\nvar2 = 10\n\', \'\ndel var1[,var2[,var3[....,varN]]]]\n\', \'\ndel var\ndel var_a, var_b\n\', \'\nHello World!\nH\nllo\nllo World!\nHello World!Hello World!\nHello World!TEST\n\', \"\n[\'abcd\', 786, 2.23, \'john\', 70.200000000000003]\nabcd\n[786, 2.23]\n[2.23, \'john\', 70.200000000000003]\n[123, \'john\', 123, \'john\']\n[\'abcd\', 786, 2.23, \'john\', 70.200000000000003, 123, \'john\']\n\", \"\n(\'abcd\', 786, 2.23, \'john\', 70.200000000000003)\nabcd\n(786, 2.23)\n(2.23, \'john\', 70.200000000000003)\n(123, \'john\', 123, \'john\')\n(\'abcd\', 786, 2.23, \'john\', 70.200000000000003, 123, \'john\')\n\", \"\nThis is one\nThis is two\n{\'name\': \'john\', \'dept\': \'sales\', \'code\': 6734}\ndict_keys([\'name\', \'dept\', \'code\'])\ndict_values([\'john\', \'sales\', 6734])\n\"]','[\'int|||float|||complex&&&10|||0.0|||3.14j&&&100|||15.20|||45.j&&&-786|||-21.9|||9.322e-36j&&&080|||32.3+e18|||.876j&&&-0490|||-90.|||-.6545+0J&&&-0x260|||-32.54e100|||3e+26J&&&0x69|||70.2-E12|||4.53e-7j\', \'Sr.No.|||Function & Description&&&1|||int(x [,base])|||Converts x to an integer. The base specifies the base if x is a string.&&&2|||float(x)|||Converts x to a floating-point number.&&&3|||complex(real [,imag])|||Creates a complex number.&&&4|||str(x)|||Converts object x to a string representation.&&&5|||repr(x)|||Converts object x to an expression string.&&&6|||eval(str)|||Evaluates a string and returns an object.&&&7|||tuple(s)|||Converts s to a tuple.&&&8|||list(s)|||Converts s to a list.&&&9|||set(s)|||Converts s to a set.&&&10|||dict(d)|||Creates a dictionary. d must be a sequence of (key,value) tuples.&&&11|||frozenset(s)|||Converts s to a frozen set.&&&12|||chr(x)|||Converts an integer to a character.&&&13|||unichr(x)|||Converts an integer to a Unicode character.&&&14|||ord(x)|||Converts a single character to its integer value.&&&15|||hex(x)|||Converts an integer to a hexadecimal string.&&&16|||oct(x)|||Converts an integer to an octal string.\']','[\'Numbers|||String|||List|||Tuple|||Dictionary|||int (signed integers)|||float (floating point real values)|||complex (complex numbers)|||\']'),(6,'[\'Python 3 - Basic Operators\']','[\'Types of Operator\', \'Python Arithmetic Operators\', \'Python Comparison Operators\', \'Python Assignment Operators\', \'Python Bitwise Operators\', \'Python Logical Operators\', \'Python Membership Operators\', \'Python Identity Operators\', \'Python Operators Precedence\', \'Useful Video Courses\']','[]','[\'https://www.tutorialspoint.com/python3/python_variable_types.htm\', \'https://www.tutorialspoint.com/python3/python_decision_making.htm\', \'https://www.tutorialspoint.com/python3/arithmetic_operators_example.htm\', \'https://www.tutorialspoint.com/python3/comparison_operators_example.htm\', \'https://www.tutorialspoint.com/python3/assignment_operators_example.htm\', \'https://www.tutorialspoint.com/python3/bitwise_operators_example.htm\', \'https://www.tutorialspoint.com/python3/logical_operators_example.htm\', \'https://www.tutorialspoint.com/python3/membership_operators_example.htm\', \'https://www.tutorialspoint.com/python3/identity_operators_example.htm\', \'https://www.tutorialspoint.com/python3/operators_precedence_example.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_variable_types.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_decision_making.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'Python language supports the following types of operators −\', \'Let us have a look at all the operators one by one.\', \'Assume variable a holds the value 10 and variable b holds the value 21, then −\', \'Assume variable a holds the value 10 and variable b holds the value 20, then −\', \'Assume variable a holds the value 10 and variable b holds the value 20, then −\', \'The following Bitwise operators are supported by Python language −\', \'The following table lists all operators from highest precedence to the lowest.\', \'Complement, unary plus and minus (method names for the last two are +@ and -@)\', \'Multiply, divide, modulo and floor division\', \"Bitwise exclusive `OR\' and regular `OR\'\"]','[\"Python\'s built-in function bin() can be used to obtain binary representation of an integer number. \", \'Identity operators compare the memory locations of two objects. There are two Identity operators as explained below −\']','[\'Operators are the constructs, which can manipulate the value of operands. Consider the expression 4 + 5 = 9. Here, 4 and 5 are called the operands and + is called the operator.\', \'These operators compare the values on either side of them and decide the relation among them. They are also called Relational operators.\', \'Bitwise operator works on bits and performs bit-by-bit operation. Assume if a = 60; and b = 13; Now in binary format they will be as follows −\', \'The following logical operators are supported by Python language. Assume variable a holds True and variable b holds False then −\', \'Python’s membership operators test for membership in a sequence, such as strings, lists, or tuples. There are two membership operators as explained below −\']','[]','[]','[\'Operator|||Description|||Example&&&+ Addition|||Adds values on either side of the operator.|||a + b = 31&&&- Subtraction|||Subtracts right hand operand from left hand operand.|||a – b = -11&&&* Multiplication|||Multiplies values on either side of the operator|||a * b = 210&&&/ Division|||Divides left hand operand by right hand operand|||b / a = 2.1&&&% Modulus|||Divides left hand operand by right hand operand and returns remainder|||b % a = 1&&&** Exponent|||Performs exponential (power) calculation on operators|||a**b =10 to the power 20&&&//|||Floor Division - The division of operands where the result is the quotient in which the digits after the decimal point are removed. But if one of the operands is negative, the result is floored, i.e., rounded away from zero (towards negative infinity):|||9//2 = 4 and 9.0//2.0 = 4.0, -11//3 = -4, -11.0//3 = -4.0\', \'Operator|||Description|||Example&&&==|||If the values of two operands are equal, then the condition becomes true.|||(a == b) is not true.&&&!=|||If values of two operands are not equal, then condition becomes true.|||(a!= b) is true. &&&>|||If the value of left operand is greater than the value of right operand, then condition becomes true.|||(a > b) is not true.&&&<|||If the value of left operand is less than the value of right operand, then condition becomes true.|||(a < b) is true.&&&>=|||If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.|||(a >= b) is not true.&&&<=|||If the value of left operand is less than or equal to the value of right operand, then condition becomes true.|||(a <= b) is true.\', \'Operator|||Description|||Example&&&=|||Assigns values from right side operands to left side operand|||c = a + b assigns value of a + b into c&&&+= Add AND|||It adds right operand to the left operand and assign the result to left operand|||c += a is equivalent to c = c + a&&&-= Subtract AND|||It subtracts right operand from the left operand and assign the result to left operand|||c -= a is equivalent to c = c - a&&&*= Multiply AND|||It multiplies right operand with the left operand and assign the result to left operand|||c *= a is equivalent to c = c * a&&&/= Divide AND|||It divides left operand with the right operand and assign the result to left operand|||c /= a is equivalent to c = c / ac /= a is equivalent to c = c / a&&&%= Modulus AND|||It takes modulus using two operands and assign the result to left operand|||c %= a is equivalent to c = c % a&&&**= Exponent AND|||Performs exponential (power) calculation on operators and assign value to the left operand|||c **= a is equivalent to c = c ** a&&&//= Floor Division|||It performs floor division on operators and assign value to the left operand|||c //= a is equivalent to c = c // a\', \"Operator|||Description|||Example&&&& Binary AND|||Operator copies a bit, to the result, if it exists in both operands|||(a & b) (means 0000 1100)&&&| Binary OR|||It copies a bit, if it exists in either operand.|||(a | b) = 61 (means 0011 1101)&&&^ Binary XOR|||It copies the bit, if it is set in one operand but not both.|||(a ^ b) = 49 (means 0011 0001)&&&~ Binary Ones Complement|||It is unary and has the effect of \'flipping\' bits.|||(~a ) = -61 (means 1100 0011 in 2\'s complement form due to a signed binary number.&&&<< Binary Left Shift|||The left operand\'s value is moved left by the number of bits specified by the right operand.|||a << 2 = 240 (means 1111 0000)&&&>> Binary Right Shift|||The left operand\'s value is moved right by the number of bits specified by the right operand.|||a >> 2 = 15 (means 0000 1111)\", \'Operator|||Description|||Example&&&and Logical AND|||If both the operands are true then condition becomes true.|||(a and b) is False.&&&or Logical OR|||If any of the two operands are non-zero then condition becomes true.||| (a or b) is True.&&&not Logical NOT|||Used to reverse the logical state of its operand.|||Not(a and b) is True.\', \'Operator|||Description|||Example&&&in|||Evaluates to true if it finds a variable in the specified sequence and false otherwise.|||x in y, here in results in a 1 if x is a member of sequence y.&&&not in|||Evaluates to true if it does not finds a variable in the specified sequence and false otherwise.|||x not in y, here not in results in a 1 if x is not a member of sequence y.\', \'Operator|||Description|||Example&&&is|||Evaluates to true if the variables on either side of the operator point to the same object and false otherwise.|||x is y, here is results in 1 if id(x) equals id(y).&&&is not|||Evaluates to false if the variables on either side of the operator point to the same object and true otherwise.|||x is not y, here is not results in 1 if id(x) is not equal to id(y).\', \"Sr.No.|||Operator & Description&&&1|||**|||Exponentiation (raise to the power)&&&2|||~ + -|||Complement, unary plus and minus (method names for the last two are +@ and -@)&&&3|||* / % //|||Multiply, divide, modulo and floor division&&&4|||+ -|||Addition and subtraction&&&5|||>> <<|||Right and left bitwise shift&&&6|||&|||Bitwise \'AND\'&&&7|||^ ||||Bitwise exclusive `OR\' and regular `OR\'&&&8|||<= < > >=|||Comparison operators&&&9|||<> == !=|||Equality operators&&&10|||= %= /= //= -= += *= **=|||Assignment operators&&&11|||is is not|||Identity operators&&&12|||in not in|||Membership operators&&&13|||not or and|||Logical operators\"]','[\'Arithmetic Operators|||Comparison (Relational) Operators|||Assignment Operators|||Logical Operators|||Bitwise Operators|||Membership Operators|||Identity Operators|||\']'),(7,'[\'Python 3 - Decision Making\']','[\'Single Statement Suites\', \'Useful Video Courses\']','[\'Example\', \'Output\']','[\'https://www.tutorialspoint.com/python3/python_basic_operators.htm\', \'https://www.tutorialspoint.com/python3/python_loops.htm\', \'https://www.tutorialspoint.com/python3/python_if_statement.htm\', \'https://www.tutorialspoint.com/python3/python_if_else.htm\', \'https://www.tutorialspoint.com/python3/nested_if_statements_in_python.htm\', \'http://tpcg.io/eJSqVe\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_basic_operators.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_loops.htm\']','[\'https://www.tutorialspoint.com/python3/images/decision_making.jpg\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'Let us go through each decision-making statement quickly.\', \'Here is an example of a one-line if clause −\', \'When the above code is executed, it produces the following result −\']','[\'Following is the general form of a typical decision making structure found in most of the programming languages −\', \'Python programming language provides the following types of decision-making statements.\', \'An if statement consists of a boolean expression followed by one or more statements.\', \'An if statement can be followed by an optional else statement, which executes when the boolean expression is FALSE.\', \'You can use one if or else if statement inside another if or else if statement(s).\', \'If the suite of an if clause consists only of a single line, it may go on the same line as the header statement.\']','[\'Decision-making is the anticipation of conditions occurring during the execution of a program and specified actions taken according to the conditions.\', \'Decision structures evaluate multiple expressions, which produce TRUE or FALSE as the outcome. You need to determine which action to take and which statements to execute if the outcome is TRUE or FALSE otherwise.\', \'Python programming language assumes any non-zero and non-null values as TRUE, and any zero or null values as FALSE value.\']','[\'\n#!/usr/bin/python3\n\nvar = 100\nif ( var  == 100 ) : print (\"Value of expression is 100\")\nprint (\"Good bye!\")\n\', \'\nValue of expression is 100\nGood bye!\n\']','[\'\nValue of expression is 100\nGood bye!\n\']','[\'Sr.No.|||Statement & Description&&&1|||if statements|||An if statement consists of a boolean expression followed by one or more statements.&&&2|||if...else statements|||An if statement can be followed by an optional else statement, which executes when the boolean expression is FALSE.&&&3|||nested if statements|||You can use one if or else if statement inside another if or else if statement(s).\']','[]'),(8,'[\'Python 3 - Loops\']','[\'Loop Control Statements\', \'Iterator and Generator\', \'Useful Video Courses\']','[\'Example\']','[\'https://www.tutorialspoint.com/python3/python_decision_making.htm\', \'https://www.tutorialspoint.com/python3/python_numbers.htm\', \'https://www.tutorialspoint.com/python3/python_while_loop.htm\', \'https://www.tutorialspoint.com/python3/python_for_loop.htm\', \'https://www.tutorialspoint.com/python3/python_nested_loops.htm\', \'https://www.tutorialspoint.com/python3/python_break_statement.htm\', \'https://www.tutorialspoint.com/python3/python_continue_statement.htm\', \'https://www.tutorialspoint.com/python3/python_pass_statement.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_decision_making.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_numbers.htm\']','[\'https://www.tutorialspoint.com/python3/images/loop_architecture.jpg\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'You can use one or more loop inside any another while, or for loop.\', \'Python supports the following control statements.\', \'Let us go through the loop control statements briefly.\', \'String, List or Tuple objects can be used to create an Iterator.\']','[\'Programming languages provide various control structures that allow more complicated execution paths.\', \'Python programming language provides the following types of loops to handle looping requirements.\', \'Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.\', \'Terminates the loop statement and transfers execution to the statement immediately following the loop.\', \'Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.\', \'A generator is a function that produces or yields a sequence of values using yield method.\', \'The following example defines a generator, which generates an iterator for all the Fibonacci numbers.\']','[\'In general, statements are executed sequentially − The first statement in a function is executed first, followed by the second, and so on. There may be a situation when you need to execute a block of code several number of times.\', \'A loop statement allows us to execute a statement or group of statements multiple times. The following diagram illustrates a loop statement −\', \'Repeats a statement or group of statements while a given condition is TRUE. It tests the condition before executing the loop body.\', \'The Loop control statements change the execution from its normal sequence. When the execution leaves a scope, all automatic objects that were created in that scope are destroyed.\', \'The pass statement in Python is used when a statement is required syntactically but you do not want any command or code to execute.\', \'Iterator is an object which allows a programmer to traverse through all the elements of a collection, regardless of its specific implementation. In Python, an iterator object implements two methods, iter() and next().\', \'When a generator function is called, it returns a generator object without even beginning execution of the function. When the next() method is called for the first time, the function starts executing until it reaches the yield statement, which returns the yielded value. The yield keeps track i.e. remembers the last execution and the second next() call continues from previous value.\']','[\'\r\n#!/usr/bin/python3\r\nimport sys\r\n\r\nlist = [1,2,3,4]\r\nit = iter(list) # this builds an iterator object\r\nprint (next(it)) #prints next available element in iterator\r\n#Iterator object can be traversed using regular for statement\r\nfor x in it:\r\n   print (x, end=\" \")\r\n#or using next() function\r\nwhile True:\r\n   try:\r\n      print (next(it))\r\n   except StopIteration:\r\n      sys.exit()\r\n\', \'\r\n#!usr/bin/python3\r\n\r\nimport sys\r\ndef fibonacci(n): #generator function\r\n   a, b, counter = 0, 1, 0\r\n   while True:\r\n      if (counter > n): \r\n         return\r\n      yield a\r\n      a, b = b, a + b\r\n      counter += 1\r\nf = fibonacci(5) #f is iterator object\r\n\r\nwhile True:\r\n   try:\r\n      print (next(f), end=\" \")\r\n   except StopIteration:\r\n      sys.exit()\r\n\']','[]','[\'Sr.No.|||Loop Type & Description&&&1|||while loop|||Repeats a statement or group of statements while a given condition is TRUE. It tests the condition before executing the loop body.&&&2|||for loop|||Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.&&&3||||||nested loops|||You can use one or more loop inside any another while, or for loop.\', \'Sr.No.|||Control Statement & Description&&&1||||||break statement|||Terminates the loop statement and transfers execution to the statement immediately following the loop.&&&2||||||continue statement|||Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.&&&3||||||pass statement|||The pass statement in Python is used when a statement is required syntactically but you do not want any command or code to execute.\']','[]'),(9,'[\'Python 3 - Numbers\']','[\'Number Type Conversion\', \'Mathematical Functions\', \'Random Number Functions\', \'Trigonometric Functions\', \'Mathematical Constants\', \'Useful Video Courses\']','[\'Examples\']','[\'https://www.tutorialspoint.com/python3/python_loops.htm\', \'https://www.tutorialspoint.com/python3/python_strings.htm\', \'https://www.tutorialspoint.com/python3/number_abs.htm\', \'https://www.tutorialspoint.com/python3/number_ceil.htm\', \'https://www.tutorialspoint.com/python3/number_exp.htm\', \'https://www.tutorialspoint.com/python3/number_fabs.htm\', \'https://www.tutorialspoint.com/python3/number_floor.htm\', \'https://www.tutorialspoint.com/python3/number_log.htm\', \'https://www.tutorialspoint.com/python3/number_log10.htm\', \'https://www.tutorialspoint.com/python3/number_max.htm\', \'https://www.tutorialspoint.com/python3/number_min.htm\', \'https://www.tutorialspoint.com/python3/number_modf.htm\', \'https://www.tutorialspoint.com/python3/number_pow.htm\', \'https://www.tutorialspoint.com/python3/number_round.htm\', \'https://www.tutorialspoint.com/python3/number_sqrt.htm\', \'https://www.tutorialspoint.com/python3/number_choice.htm\', \'https://www.tutorialspoint.com/python3/number_randrange.htm\', \'https://www.tutorialspoint.com/python3/number_random.htm\', \'https://www.tutorialspoint.com/python3/number_seed.htm\', \'https://www.tutorialspoint.com/python3/number_shuffle.htm\', \'https://www.tutorialspoint.com/python3/number_uniform.htm\', \'https://www.tutorialspoint.com/python3/number_acos.htm\', \'https://www.tutorialspoint.com/python3/number_asin.htm\', \'https://www.tutorialspoint.com/python3/number_atan.htm\', \'https://www.tutorialspoint.com/python3/number_atan2.htm\', \'https://www.tutorialspoint.com/python3/number_cos.htm\', \'https://www.tutorialspoint.com/python3/number_hypot.htm\', \'https://www.tutorialspoint.com/python3/number_sin.htm\', \'https://www.tutorialspoint.com/python3/number_tan.htm\', \'https://www.tutorialspoint.com/python3/number_degrees.htm\', \'https://www.tutorialspoint.com/python3/number_radians.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_loops.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_strings.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'Number objects are created when you assign a value to them. For example −\', \'Python supports  different numerical types −\', \'It is possible to represent an integer in hexa-decimal or octal form\', \'Type int(x) to convert x to a plain integer.\', \'Type long(x) to convert x to a long integer.\', \'Type float(x) to convert x to a floating-point number.\', \'Python includes the following functions that perform mathematical calculations.\', \'The absolute value of x: the (positive) distance between x and zero.\', \'The ceiling of x: the smallest integer not less than x.\', \'The floor of x: the largest integer not greater than x.\', \'The natural logarithm of x, for x > 0.\', \'The base-10 logarithm of x for x > 0.\', \'The largest of its arguments: the value closest to positive infinity\', \'The smallest of its arguments: the value closest to negative infinity.\', \'A random item from a list, tuple, or string.\', \'A randomly selected element from range(start, stop, step).\', \'A random float r, such that 0 is less than or equal to r and r is less than 1\', \'Randomizes the items of a list in place. Returns None.\', \'A random float r, such that x is less than or equal to r and r is less than y.\', \'Return the arc cosine of x, in radians.\', \'Return the arc sine of x, in radians.\', \'Return the arc tangent of x, in radians.\', \'Return the Euclidean norm, sqrt(x*x + y*y).\', \'Converts angle x from radians to degrees.\', \'Converts angle x from degrees to radians.\', \'The module also defines two mathematical constants −\']','[\'You can also delete the reference to a number object by using the del statement. The syntax of the del statement is −\', \'You can delete a single object or multiple objects by using the del statement. For example −\', \'Type complex(x) to convert x to a complex number with real part x and imaginary part zero.\', \'-1 if x < y, 0 if x == y, or 1 if x > y. Deprecated in Python 3. Instead use  return (x>y)-(x<y).\', \'Python includes the following functions that perform trigonometric calculations.\']','[\'Number data types store numeric values. They are immutable data types. This means, changing the value of a number data type results in a newly allocated object.\', \"int (signed integers) − They are often called just integers or ints. They are positive or negative whole numbers with no decimal point. Integers in Python 3 are of unlimited size. Python 2 has two integer types - int and long. There is no \'long integer\' in Python 3 anymore.\", \'float (floating point real values) − Also called floats, they represent real numbers and are written with a decimal point dividing the integer and the fractional parts. Floats may also be in scientific notation, with E or e indicating the power of 10 (2.5e2 = 2.5 x 102 = 250).\', \'complex (complex numbers) − are of the form a + bJ, where a and b are floats and J (or j) represents the square root of -1 (which is an imaginary number). The real part of the number is a, and the imaginary part is b. Complex numbers are not used much in Python programming.\', \'A complex number consists of an ordered pair of real floating-point numbers denoted by a + bj, where a is the real part and b is the imaginary part of the complex number.\', \'Python converts numbers internally in an expression containing mixed types to a common type for evaluation. Sometimes, you need to coerce a number explicitly from one type to another to satisfy the requirements of an operator or function parameter.\', \'Type complex(x, y) to convert x and y to a complex number with real part x and imaginary part y. x and y are numeric expressions\', \'The fractional and integer parts of x in a two-item tuple. Both parts have the same sign as x. The integer part is returned as a float.\', \'x rounded to n digits from the decimal point. Python rounds away from zero as a tie-breaker: round(0.5) is 1.0 and round(-0.5) is -1.0.\', \'Random numbers are used for games, simulations, testing, security, and privacy applications. Python includes the following functions that are commonly used.\', \'Sets the integer starting value used in generating random numbers. Call this function before calling any other random module function. Returns None.\']','[\'\nvar1 = 1\nvar2 = 10\n\', \'\ndel var1[,var2[,var3[....,varN]]]]\n\', \'\ndel var\ndel var_a, var_b\n\', \'\n>>> number = 0xA0F #Hexa-decimal\n>>> number\n2575\n\n>>> number = 0o37 #Octal\n>>> number\n31\n\']','[]','[\'int|||float|||comple&&&10|||0.0|||3.14j&&&100|||15.20|||45.j&&&-786|||-21.9|||9.322e-36j&&&080|||32.3+e18|||.876j&&&-0490|||-90.|||-.6545+0J&&&-0×260|||-32.54e100|||3e+26J&&&0×69|||70.2-E12|||4.53e-7j\', \'Sr.No.|||Function & Returns ( Description )&&&1||||||abs(x)|||The absolute value of x: the (positive) distance between x and zero.&&&2||||||ceil(x)|||The ceiling of x: the smallest integer not less than x.&&&3|||cmp(x, y)|||-1 if x < y, 0 if x == y, or 1 if x > y. Deprecated in Python 3. Instead use  return (x>y)-(x<y).&&&4||||||exp(x)|||The exponential of x: ex&&&5||||||fabs(x)|||The absolute value of x.&&&6||||||floor(x)|||The floor of x: the largest integer not greater than x.&&&7||||||log(x)|||The natural logarithm of x, for x > 0.&&&8||||||log10(x)|||The base-10 logarithm of x for x > 0.&&&9||||||max(x1, x2,...)|||The largest of its arguments: the value closest to positive infinity&&&10||||||min(x1, x2,...)|||The smallest of its arguments: the value closest to negative infinity.&&&11||||||modf(x)|||The fractional and integer parts of x in a two-item tuple. Both parts have the same sign as x. The integer part is returned as a float.&&&12||||||pow(x, y)|||The value of x**y.&&&13||||||round(x [,n])|||x rounded to n digits from the decimal point. Python rounds away from zero as a tie-breaker: round(0.5) is 1.0 and round(-0.5) is -1.0.&&&14||||||sqrt(x)|||The square root of x for x > 0.\', \'Sr.No.|||Function & Description&&&1||||||choice(seq)|||A random item from a list, tuple, or string.&&&2||||||randrange ([start,] stop [,step])|||A randomly selected element from range(start, stop, step).&&&3||||||random()|||A random float r, such that 0 is less than or equal to r and r is less than 1&&&4||||||seed([x])|||Sets the integer starting value used in generating random numbers. Call this function before calling any other random module function. Returns None.&&&5||||||shuffle(lst)|||Randomizes the items of a list in place. Returns None&&&6||||||uniform(x, y)|||A random float r, such that x is less than or equal to r and r is less than y.\', \'Sr.No.|||Function & Descriptio&&&1||||||acos(x)|||Return the arc cosine of x, in radians&&&2||||||asin(x)|||Return the arc sine of x, in radians&&&3||||||atan(x)|||Return the arc tangent of x, in radians&&&4||||||atan2(y, x)|||Return atan(y / x), in radians&&&5||||||cos(x)|||Return the cosine of x radians&&&6||||||hypot(x, y)|||Return the Euclidean norm, sqrt(x*x + y*y)&&&7||||||sin(x)|||Return the sine of x radians&&&8||||||tan(x)|||Return the tangent of x radians&&&9||||||degrees(x)|||Converts angle x from radians to degrees&&&10||||||radians(x)|||Converts angle x from degrees to radians\', \'Sr.No.|||Constants & Descriptio&&&1|||pi|||The mathematical constant pi.&&&2|||e|||The mathematical constant e.\']','[\"int (signed integers) − They are often called just integers or ints. They are positive or negative whole numbers with no decimal point. Integers in Python 3 are of unlimited size. Python 2 has two integer types - int and long. There is no \'long integer\' in Python 3 anymore.|||float (floating point real values) − Also called floats, they represent real numbers and are written with a decimal point dividing the integer and the fractional parts. Floats may also be in scientific notation, with E or e indicating the power of 10 (2.5e2 = 2.5 x 102 = 250).|||complex (complex numbers) − are of the form a + bJ, where a and b are floats and J (or j) represents the square root of -1 (which is an imaginary number). The real part of the number is a, and the imaginary part is b. Complex numbers are not used much in Python programming.|||Type int(x) to convert x to a plain integer.|||Type long(x) to convert x to a long integer.|||Type float(x) to convert x to a floating-point number.|||Type complex(x) to convert x to a complex number with real part x and imaginary part zero.|||Type complex(x, y) to convert x and y to a complex number with real part x and imaginary part y. x and y are numeric expressions|||\"]'),(10,'[\'Python 3 - Strings\']','[\'Accessing Values in Strings\', \'Updating Strings\', \'Escape Characters\', \'String Special Operators\', \'String Formatting Operator\', \'Triple Quotes\', \'Unicode String\', \'Useful Video Courses\']','[\'Built-in String Methods\']','[\'https://www.tutorialspoint.com/python3/python_numbers.htm\', \'https://www.tutorialspoint.com/python3/python_lists.htm\', \'http://tpcg.io/53XKOs\', \'http://tpcg.io/pDICcS\', \'http://tpcg.io/5lu2E8\', \'http://tpcg.io/3kxxUj\', \'http://tpcg.io/NvFyWy\', \'http://tpcg.io/BDtCUu\', \'https://www.tutorialspoint.com/python3/string_capitalize.htm\', \'https://www.tutorialspoint.com/python3/string_center.htm\', \'https://www.tutorialspoint.com/python3/string_count.htm\', \'https://www.tutorialspoint.com/python3/string_decode.htm\', \'https://www.tutorialspoint.com/python3/string_encode.htm\', \'https://www.tutorialspoint.com/python3/string_endswith.htm\', \'https://www.tutorialspoint.com/python3/string_expandtabs.htm\', \'https://www.tutorialspoint.com/python3/string_find.htm\', \'https://www.tutorialspoint.com/python3/string_index.htm\', \'https://www.tutorialspoint.com/python3/string_isalnum.htm\', \'https://www.tutorialspoint.com/python3/string_isalpha.htm\', \'https://www.tutorialspoint.com/python3/string_isdigit.htm\', \'https://www.tutorialspoint.com/python3/string_islower.htm\', \'https://www.tutorialspoint.com/python3/string_isnumeric.htm\', \'https://www.tutorialspoint.com/python3/string_isspace.htm\', \'https://www.tutorialspoint.com/python3/string_istitle.htm\', \'https://www.tutorialspoint.com/python3/string_isupper.htm\', \'https://www.tutorialspoint.com/python3/string_join.htm\', \'https://www.tutorialspoint.com/python3/string_len.htm\', \'https://www.tutorialspoint.com/python3/string_ljust.htm\', \'https://www.tutorialspoint.com/python3/string_lower.htm\', \'https://www.tutorialspoint.com/python3/string_lstrip.htm\', \'https://www.tutorialspoint.com/python3/string_maketrans.htm\', \'https://www.tutorialspoint.com/python3/string_max.htm\', \'https://www.tutorialspoint.com/python3/string_min.htm\', \'https://www.tutorialspoint.com/python3/string_replace.htm\', \'https://www.tutorialspoint.com/python3/string_rfind.htm\', \'https://www.tutorialspoint.com/python3/string_rindex.htm\', \'https://www.tutorialspoint.com/python3/string_rjust.htm\', \'https://www.tutorialspoint.com/python3/string_rstrip.htm\', \'https://www.tutorialspoint.com/python3/string_split.htm\', \'https://www.tutorialspoint.com/python3/string_splitlines.htm\', \'https://www.tutorialspoint.com/python3/string_startswith.htm\', \'https://www.tutorialspoint.com/python3/string_strip.htm\', \'https://www.tutorialspoint.com/python3/string_swapcase.htm\', \'https://www.tutorialspoint.com/python3/string_title.htm\', \'https://www.tutorialspoint.com/python3/string_translate.htm\', \'https://www.tutorialspoint.com/python3/string_upper.htm\', \'https://www.tutorialspoint.com/python3/string_zfill.htm\', \'https://www.tutorialspoint.com/python3/string_isdecimal.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_numbers.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_lists.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'When the above code is executed, it produces the following result −\', \'When the above code is executed, it produces the following result −\', \"Assume string variable a holds \'Hello\' and variable b holds \'Python\', then −\", \'When the above code is executed, it produces the following result −\', \'Here is the list of complete set of symbols which can be used along with % −\', \'string conversion via str() prior to formatting\', \'hexadecimal integer (lowercase letters)\', \'hexadecimal integer (UPPERcase letters)\', \"exponential notation (with lowercase \'e\')\", \"exponential notation (with UPPERcase \'E\')\", \'Other supported symbols and functionality are listed in the following table −\', \'argument specifies width or precision\', \'leave a blank space before a positive number\', \'pad from left with zeros (instead of spaces)\', \"\'%%\' leaves you with a single literal \'%\'\", \'mapping variable (dictionary arguments)\', \'When the above code is executed, it produces the following result −\', \'When the above code is executed, it produces the following result −\', \'Python includes the following built-in methods to manipulate strings −\', \'Same as find(), but raises an exception if str not found.\', \'Returns true if string contains only digits and false otherwise.\', \'Returns true if string contains only whitespace characters and false otherwise.\', \'Returns true if string is properly \"titlecased\" and false otherwise.\', \'Converts all uppercase letters in string to lowercase.\', \'Removes all leading whitespace in string.\', \'Returns a translation table to be used in translate function.\', \'Returns the max alphabetical character from the string str.\', \'Returns the min alphabetical character from the string str.\', \'Same as find(), but search backwards in string.\', \'Same as index(), but search backwards in string.\', \'Removes all trailing whitespace of string.\', \'Performs both lstrip() and rstrip() on string\', \'Inverts case for all letters in string.\', \'Converts lowercase letters in string to uppercase.\']','[\'Python does not support a character type; these are treated as strings of length one, thus also considered a substring.\', \'Following table is a list of escape or non-printable characters that can be represented with backslash notation.\', \'An escape character gets interpreted; in a single quoted as well as double quoted strings.\', \"add the octal leading zero ( \'0\' ) or hexadecimal leading \'0x\' or \'0X\', depending on whether \'x\' or \'X\' were used.\", \'m is the minimum total width and n is the number of digits to display after the decimal point (if appl.)\', \'The syntax for triple quotes consists of three consecutive single or double quotes.\', \"Now let\'s make use of raw string. We would put expression in r\'expression\' as follows −\", \'Returns a string padded with fillchar with the original string centered to a total of width columns.\', \'Decodes the string using the codec registered for encoding. encoding defaults to the default string encoding.\', \'Expands tabs in string to multiple spaces; defaults to 8 spaces per tab if tabsize not provided.\', \'Returns true if string has at least 1 character and all characters are alphanumeric and false otherwise.\', \'Returns true if string has at least 1 character and all characters are alphabetic and false otherwise.\', \'Returns true if string has at least 1 cased character and all cased characters are in lowercase and false otherwise.\', \'Returns true if a unicode string contains only numeric characters and false otherwise.\', \'Returns true if string has at least one cased character and all cased characters are in uppercase and false otherwise.\', \'Merges (concatenates) the string representations of elements in sequence seq into a string, with separator string.\', \'Returns a space-padded string with the original string left-justified to a total of width columns.\', \'Replaces all occurrences of old in string with new or at most max occurrences if max given.\', \'Returns a space-padded string with the original string right-justified to a total of width columns.\', \'Splits string at all (or num) NEWLINEs and returns a list of each line with NEWLINEs removed.\', \'Returns \"titlecased\" version of string, that is, all words begin with uppercase and the rest are lowercase.\', \'Translates string according to translation table str(256 chars), removing those in the del string.\', \'Returns true if a unicode string contains only decimal characters and false otherwise.\']','[\'Strings are amongst the most popular types in Python. We can create them simply by enclosing characters in quotes. Python treats single quotes the same as double quotes. Creating strings is as simple as assigning a value to a variable. For example −\', \'To access substrings, use the square brackets for slicing along with the index or indices to obtain your substring. For example −\', \'You can \"update\" an existing string by (re)assigning a variable to another string. The new value can be related to its previous value or to a completely different string altogether. For example −\', \"One of Python\'s coolest features is the string format operator %. This operator is unique to strings and makes up for the pack of having functions from C\'s printf() family. Following is a simple example −\", \"Python\'s triple quotes comes to the rescue by allowing strings to span multiple lines, including verbatim NEWLINEs, TABs, and any other special characters.\", \'When the above code is executed, it produces the following result. Note how every single special character has been converted to its printed form, right down to the last NEWLINE at the end of the string between the \"up.\" and closing triple quotes. Also note that NEWLINEs occur either with an explicit carriage return at the end of a line or its escape code (\\n) −\', \'Raw strings do not treat the backslash as a special character at all. Every character you put into a raw string stays the way you wrote it −\', \"In Python 3, all strings are represented in Unicode.In Python 2 are stored internally as 8-bit ASCII, hence it is required to attach \'u\' to make it Unicode. It is no longer necessary now.\", \'Counts how many times str occurs in string or in a substring of string if starting index beg and ending index end are given.\', \"Returns encoded string version of string; on error, default is to raise a ValueError unless errors is given with \'ignore\' or \'replace\'.\", \'Determines if string or a substring of string (if starting index beg and ending index end are given) ends with suffix; returns true if so and false otherwise.\', \'Determine if str occurs in string or in a substring of string if starting index beg and ending index end are given returns index if found and -1 otherwise.\', \'Splits string according to delimiter str (space if not provided) and returns list of substrings; split into at most num substrings if given.\', \'Determines if string or a substring of string (if starting index beg and ending index end are given) starts with substring str; returns true if so and false otherwise.\', \'Returns original string leftpadded with zeros to a total of width characters; intended for numbers, zfill() retains any sign given (less one zero).\']','[\'\nvar1 = \'Hello World!\'\nvar2 = \"Python Programming\"\n\', \'\n#!/usr/bin/python3\n\nvar1 = \'Hello World!\'\nvar2 = \"Python Programming\"\n\nprint (\"var1[0]: \", var1[0])\nprint (\"var2[1:5]: \", var2[1:5])\n\', \'\nvar1[0]:  H\nvar2[1:5]:  ytho\n\', \'\n#!/usr/bin/python3\n\nvar1 = \'Hello World!\'\nprint (\"Updated String :- \", var1[:6] + \'Python\')\n\', \'\nUpdated String :-  Hello Python\n\', \'\n#!/usr/bin/python3\n\nprint (\"My name is %s and weight is %d kg!\" % (\'Zara\', 21)) \n\', \'\nMy name is Zara and weight is 21 kg!\n\', \'\n#!/usr/bin/python3\n\npara_str = \"\"\"this is a long string that is made up of\nseveral lines and non-printable characters such as\nTAB ( \\t ) and they will show up that way when displayed.\nNEWLINEs within the string, whether explicitly given like\nthis within the brackets [ \\n ], or just a NEWLINE within\nthe variable assignment will also show up.\n\"\"\"\nprint (para_str)\n\', \'\nthis is a long string that is made up of\nseveral lines and non-printable characters such as\nTAB (    ) and they will show up that way when displayed.\nNEWLINEs within the string, whether explicitly given like\nthis within the brackets [\n ], or just a NEWLINE within\nthe variable assignment will also show up.\n\', \"\n#!/usr/bin/python3\n\nprint (\'C:\\\\nowhere\')\n\", \'\nC:\\nowhere\n\', \"\n#!/usr/bin/python3\n\nprint (r\'C:\\\\nowhere\')\n\", \'\nC:\\\\nowhere\n\']','[\'\nvar1[0]:  H\nvar2[1:5]:  ytho\n\', \'\nUpdated String :-  Hello Python\n\', \'\nMy name is Zara and weight is 21 kg!\n\', \'\nthis is a long string that is made up of\nseveral lines and non-printable characters such as\nTAB (    ) and they will show up that way when displayed.\nNEWLINEs within the string, whether explicitly given like\nthis within the brackets [\n ], or just a NEWLINE within\nthe variable assignment will also show up.\n\', \'\nC:\\nowhere\n\', \'\nC:\\\\nowhere\n\']','[\'Backslash notation|||Hexadecimal character|||Description&&&\\a|||0x07|||Bell or alert&&&\\b|||0x08|||Backspace&&&\\cx||||||Control-x&&&\\C-x||||||Control-x&&&\\e|||0x1b|||Escape&&&\\f|||0x0c|||Formfeed&&&\\M-\\C-x||||||Meta-Control-x&&&\\n|||0x0a|||Newline&&&\\nnn||||||Octal notation, where n is in the range 0.7&&&\\r|||0x0d|||Carriage return&&&\\s|||0x20|||Space&&&\\t|||0x09|||Tab&&&\\v|||0x0b|||Vertical tab&&&\\x||||||Character x&&&\\xnn||||||Hexadecimal notation, where n is in the range 0.9, a.f, or A.F\', \'Operator|||Description|||Example&&&+|||Concatenation - Adds values on either side of the operator|||a + b will give HelloPython&&&*|||Repetition - Creates new strings, concatenating multiple copies of the same string|||a*2 will give -HelloHello&&&[]|||Slice - Gives the character from the given index|||a[1] will give e&&&[ : ]Range Slice - Gives the characters from the given range|||a[1:4] will give ell&&&inMembership - Returns true if a character exists in the given stringH in a will give 1&&&not in|||Membership - Returns true if a character does not exist in the given string|||M not in a will give 1&&&r/R|||Raw String - Suppresses actual meaning of Escape characters. The syntax for raw strings is exactly the same as for normal strings with the exception of the raw string operator, the letter \"r,\" which precedes the quotation marks. The \"r\" can be lowercase (r) or uppercase (R) and must be placed immediately preceding the first quote mark.|||print r\'\\n\' prints \\n and print R\'\\n\'prints \\n&&&%|||Format - Performs String formatting|||See at next section\', \"Sr.No.|||Format Symbol & Conversion&&&1|||%c|||character&&&2|||%s|||string conversion via str() prior to formatting&&&3|||%i|||signed decimal integer&&&4|||%d|||signed decimal integer&&&5|||%u|||unsigned decimal integer&&&6|||%o|||octal integer&&&7|||%x|||hexadecimal integer (lowercase letters)&&&8|||%X|||hexadecimal integer (UPPERcase letters)&&&9|||%e|||exponential notation (with lowercase \'e\')&&&10|||%E|||exponential notation (with UPPERcase \'E\')&&&11|||%f|||floating point real number&&&12|||%g|||the shorter of %f and %e&&&13|||%G|||the shorter of %f and %E\", \"Sr.No.|||Symbol & Functionality&&&1|||*|||argument specifies width or precision&&&2|||-|||left justification&&&3|||+|||display the sign&&&4|||<sp>|||leave a blank space before a positive number&&&5|||#|||add the octal leading zero ( \'0\' ) or hexadecimal leading \'0x\' or \'0X\', depending on whether \'x\' or \'X\' were used.&&&6|||0|||pad from left with zeros (instead of spaces)&&&7|||%|||\'%%\' leaves you with a single literal \'%\'&&&8|||(var)|||mapping variable (dictionary arguments)&&&9|||m.n.|||m is the minimum total width and n is the number of digits to display after the decimal point (if appl.)\", \'Sr.No.|||Methods & Description&&&1||||||capitalize()|||Capitalizes first letter of string&&&2||||||center(width, fillchar)|||Returns a string padded with fillchar with the original string centered to a total of width columns.&&&3||||||count(str, beg = 0,end = len(string))|||Counts how many times str occurs in string or in a substring of string if starting index beg and ending index end are given.&&&4||||||decode(encoding = \'UTF-8\',errors = \'strict\')|||Decodes the string using the codec registered for encoding. encoding defaults to the default string encoding.&&&5||||||encode(encoding = \'UTF-8\',errors = \'strict\')|||Returns encoded string version of string; on error, default is to raise a ValueError unless errors is given with \'ignore\' or \'replace\'.&&&6||||||endswith(suffix, beg = 0, end = len(string))|||Determines if string or a substring of string (if starting index beg and ending index end are given) ends with suffix; returns true if so and false otherwise.&&&7||||||expandtabs(tabsize = 8)|||Expands tabs in string to multiple spaces; defaults to 8 spaces per tab if tabsize not provided.&&&8||||||find(str, beg = 0 end = len(string))|||Determine if str occurs in string or in a substring of string if starting index beg and ending index end are given returns index if found and -1 otherwise.&&&9||||||index(str, beg = 0, end = len(string))|||Same as find(), but raises an exception if str not found.&&&10||||||isalnum()|||Returns true if string has at least 1 character and all characters are alphanumeric and false otherwise.&&&11||||||isalpha()|||Returns true if string has at least 1 character and all characters are alphabetic and false otherwise.&&&12||||||isdigit()|||Returns true if string contains only digits and false otherwise.&&&13||||||islower()|||Returns true if string has at least 1 cased character and all cased characters are in lowercase and false otherwise.&&&14||||||isnumeric()|||Returns true if a unicode string contains only numeric characters and false otherwise.&&&15||||||isspace()|||Returns true if string contains only whitespace characters and false otherwise.&&&16||||||istitle()|||Returns true if string is properly \"titlecased\" and false otherwise.&&&17||||||isupper()|||Returns true if string has at least one cased character and all cased characters are in uppercase and false otherwise.&&&18||||||join(seq)|||Merges (concatenates) the string representations of elements in sequence seq into a string, with separator string.&&&19||||||len(string)|||Returns the length of the string&&&20||||||ljust(width[, fillchar])|||Returns a space-padded string with the original string left-justified to a total of width columns.&&&21||||||lower()|||Converts all uppercase letters in string to lowercase.&&&22||||||lstrip()|||Removes all leading whitespace in string.&&&23||||||maketrans()|||Returns a translation table to be used in translate function.&&&24||||||max(str)|||Returns the max alphabetical character from the string str.&&&25||||||min(str)|||Returns the min alphabetical character from the string str.&&&26||||||replace(old, new [, max])|||Replaces all occurrences of old in string with new or at most max occurrences if max given.&&&27||||||rfind(str, beg = 0,end = len(string))|||Same as find(), but search backwards in string.&&&28||||||rindex( str, beg = 0, end = len(string))|||Same as index(), but search backwards in string.&&&29||||||rjust(width,[, fillchar])|||Returns a space-padded string with the original string right-justified to a total of width columns.&&&30||||||rstrip()|||Removes all trailing whitespace of string.&&&31||||||split(str=\"\", num=string.count(str))|||Splits string according to delimiter str (space if not provided) and returns list of substrings; split into at most num substrings if given.&&&32||||||splitlines( num=string.count(\'\\n\'))|||Splits string at all (or num) NEWLINEs and returns a list of each line with NEWLINEs removed.&&&33||||||startswith(str, beg=0,end=len(string))|||Determines if string or a substring of string (if starting index beg and ending index end are given) starts with substring str; returns true if so and false otherwise.&&&34||||||strip([chars])|||Performs both lstrip() and rstrip() on string&&&35||||||swapcase()|||Inverts case for all letters in string.&&&36||||||title()|||Returns \"titlecased\" version of string, that is, all words begin with uppercase and the rest are lowercase.&&&37||||||translate(table, deletechars=\"\")|||Translates string according to translation table str(256 chars), removing those in the del string.&&&38||||||upper()|||Converts lowercase letters in string to uppercase.&&&39||||||zfill (width)|||Returns original string leftpadded with zeros to a total of width characters; intended for numbers, zfill() retains any sign given (less one zero).&&&40||||||isdecimal()|||Returns true if a unicode string contains only decimal characters and false otherwise.\']','[]'),(11,'[\'Python 3 - Lists\']','[\'Python Lists\', \'Accessing Values in Lists\', \'Updating Lists\', \'Delete List Elements\', \'Basic List Operations\', \'Indexing, Slicing and Matrixes\', \'Built-in List Functions and Methods\', \'Useful Video Courses\']','[]','[\'https://www.tutorialspoint.com/python3/python_strings.htm\', \'https://www.tutorialspoint.com/python3/python_tuples.htm\', \'http://tpcg.io/WMFil4\', \'http://tpcg.io/CottRC\', \'http://tpcg.io/sKywHN\', \'https://www.tutorialspoint.com/python3/list_len.htm\', \'https://www.tutorialspoint.com/python3/list_max.htm\', \'https://www.tutorialspoint.com/python3/list_min.htm\', \'https://www.tutorialspoint.com/python3/list_list.htm\', \'https://www.tutorialspoint.com/python3/list_append.htm\', \'https://www.tutorialspoint.com/python3/list_count.htm\', \'https://www.tutorialspoint.com/python3/list_extend.htm\', \'https://www.tutorialspoint.com/python3/list_index.htm\', \'https://www.tutorialspoint.com/python3/list_insert.htm\', \'https://www.tutorialspoint.com/python3/list_pop.htm\', \'https://www.tutorialspoint.com/python3/list_remove.htm\', \'https://www.tutorialspoint.com/python3/list_reverse.htm\', \'https://www.tutorialspoint.com/python3/list_sort.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_strings.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_tuples.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'When the above code is executed, it produces the following result −\', \'Note − The append() method is discussed in the subsequent section.\', \'When the above code is executed, it produces the following result −\', \'When the above code is executed, it produces the following result −\', \'Note − remove() method is discussed in subsequent section.\', \'Python includes the following list functions −\', \'Returns item from the list with max value.\', \'Returns item from the list with min value.\', \'Python includes the following list methods −\', \'Returns count of how many times obj occurs in list\', \'Returns the lowest index in list that obj appears\', \'Inserts object obj into list at offset index\', \'Removes and returns last object or obj from list\', \'Sorts objects of list, use compare func if given\']','[\'Creating a list is as simple as putting different comma-separated values between square brackets. For example −\', \'Similar to string indices, list indices start at 0, and lists can be sliced, concatenated and so on.\', \'In fact, lists respond to all of the general sequence operations we used on strings in the prior chapter.\', \'Since lists are sequences, indexing and slicing work the same way for lists as they do for strings.\']','[\'The most basic data structure in Python is the sequence. Each element of a sequence is assigned a number - its position or index. The first index is zero, the second index is one, and so forth.\', \'Python has six built-in types of sequences, but the most common ones are lists and tuples, which we would see in this tutorial.\', \'There are certain things you can do with all the sequence types. These operations include indexing, slicing, adding, multiplying, and checking for membership. In addition, Python has built-in functions for finding the length of a sequence and for finding its largest and smallest elements.\', \'The list is the most versatile datatype available in Python, which can be written as a list of comma-separated values (items) between square brackets. Important thing about a list is that the items in a list need not be of the same type.\', \'To access values in lists, use the square brackets for slicing along with the index or indices to obtain value available at that index. For example −\', \'You can update single or multiple elements of lists by giving the slice on the left-hand side of the assignment operator, and you can add to elements in a list with the append() method. For example −\', \'To remove a list element, you can use either the del statement if you know exactly which element(s) you are deleting. You can use the remove() method if you do not know exactly which items to delete. For example −\', \'Lists respond to the + and * operators much like strings; they mean concatenation and repetition here too, except that the result is a new list, not a string.\']','[\'\nlist1 = [\'physics\', \'chemistry\', 1997, 2000];\nlist2 = [1, 2, 3, 4, 5 ];\nlist3 = [\"a\", \"b\", \"c\", \"d\"];\n\', \'\n#!/usr/bin/python3\n\nlist1 = [\'physics\', \'chemistry\', 1997, 2000]\nlist2 = [1, 2, 3, 4, 5, 6, 7 ]\n\nprint (\"list1[0]: \", list1[0])\nprint (\"list2[1:5]: \", list2[1:5])\n\', \'\nlist1[0]:  physics\nlist2[1:5]:  [2, 3, 4, 5]\n\', \'\n#!/usr/bin/python3\n\nlist = [\'physics\', \'chemistry\', 1997, 2000]\nprint (\"Value available at index 2 : \", list[2])\n\nlist[2] = 2001\nprint (\"New value available at index 2 : \", list[2])\n\', \'\nValue available at index 2 :  1997\nNew value available at index 2 :  2001\n\', \'\n#!/usr/bin/python3\n\nlist = [\'physics\', \'chemistry\', 1997, 2000]\nprint (list)\n\ndel list[2]\nprint (\"After deleting value at index 2 : \", list)\n\', \"\n[\'physics\', \'chemistry\', 1997, 2000]\nAfter deleting value at index 2 :  [\'physics\', \'chemistry\', 2000]\n\", \"\nL = [\'C++\'\', \'Java\', \'Python\']\n\"]','[\'\nlist1[0]:  physics\nlist2[1:5]:  [2, 3, 4, 5]\n\', \'\nValue available at index 2 :  1997\nNew value available at index 2 :  2001\n\', \"\n[\'physics\', \'chemistry\', 1997, 2000]\nAfter deleting value at index 2 :  [\'physics\', \'chemistry\', 2000]\n\"]','[\"Python Expression|||Results|||Description&&&len([1, 2, 3])|||3|||Length&&&[1, 2, 3] + [4, 5, 6]|||[1, 2, 3, 4, 5, 6]|||Concatenation&&&[\'Hi!\'] * 4|||[\'Hi!\', \'Hi!\', \'Hi!\', \'Hi!\']|||Repetition&&&3 in [1, 2, 3]|||True|||Membership&&&for x in [1,2,3] : print (x,end = \' \')|||1 2 3|||Iteration\", \"Python Expression|||Results|||Description&&&L[2]|||\'Python\'|||Offsets start at zero&&&L[-2]|||\'Java\'|||Negative: count from the right&&&L[1:]|||[\'Java\', \'Python\']|||Slicing fetches sections\", \'Sr.No.|||Function & Description&&&1||||||len(list)|||Gives the total length of the list.&&&2||||||max(list)|||Returns item from the list with max value.|||&&&3||||||min(list)|||Returns item from the list with min value.&&&4||||||list(seq)|||Converts a tuple into list.\', \'Sr.No.|||Methods & Description&&&1||||||list.append(obj)|||Appends object obj to list|||&&&2||||||list.count(obj)|||Returns count of how many times obj occurs in list&&&3||||||list.extend(seq)|||Appends the contents of seq to list&&&4||||||list.index(obj)|||Returns the lowest index in list that obj appears&&&5||||||list.insert(index, obj)|||Inserts object obj into list at offset index&&&6||||||list.pop(obj = list[-1])|||Removes and returns last object or obj from list&&&7||||||list.remove(obj)|||Removes object obj from list&&&8||||||list.reverse()|||Reverses objects of list in place&&&9||||||list.sort([func])|||Sorts objects of list, use compare func if given\']','[]'),(12,'[\'Python 3 - Tuples\']','[\'Accessing Values in Tuples\', \'Updating Tuples\', \'Delete Tuple Elements\', \'Basic Tuples Operations\', \'Indexing, Slicing, and Matrixes\', \'No Enclosing Delimiters\', \'Built-in Tuple Functions\', \'Useful Video Courses\']','[]','[\'https://www.tutorialspoint.com/python3/python_lists.htm\', \'https://www.tutorialspoint.com/python3/python_dictionary.htm\', \'http://tpcg.io/f2A4XX\', \'http://tpcg.io/ektEVm\', \'https://www.tutorialspoint.com/python3/tuple_len.htm\', \'https://www.tutorialspoint.com/python3/tuple_max.htm\', \'https://www.tutorialspoint.com/python3/tuple_min.htm\', \'https://www.tutorialspoint.com/python3/tuple_tuple.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_lists.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_dictionary.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'The empty tuple is written as two parentheses containing nothing −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is executed, it produces the following result −\', \'To explicitly remove an entire tuple, just use the del statement. For example −\', \'Python includes the following tuple functions −\', \'Gives the total length of the tuple.\', \'Returns item from the tuple with max value.\', \'Returns item from the tuple with min value.\']','[\'To write a tuple containing a single value you have to include a comma, even though there is only one value −\', \'Like string indices, tuple indices start at 0, and they can be sliced, concatenated, and so on.\', \'Note − An exception is raised. This is because after del tup, tuple does not exist any more.\', \'In fact, tuples respond to all of the general sequence operations we used on strings in the previous chapter.\']','[\'A tuple is a sequence of immutable Python objects. Tuples are sequences, just like lists. The main difference between the tuples and the lists is that the tuples cannot be changed unlike lists. Tuples use parentheses, whereas lists use square brackets.\', \'Creating a tuple is as simple as putting different comma-separated values. Optionally, you can put these comma-separated values between parentheses also. For example −\', \'To access values in tuple, use the square brackets for slicing along with the index or indices to obtain the value available at that index. For example −\', \'Tuples are immutable, which means you cannot update or change the values of tuple elements. You are able to take portions of the existing tuples to create new tuples as the following example demonstrates −\', \'Removing individual tuple elements is not possible. There is, of course, nothing wrong with putting together another tuple with the undesired elements discarded.\', \'Tuples respond to the + and * operators much like strings; they mean concatenation and repetition here too, except that the result is a new tuple, not a string.\', \'Since tuples are sequences, indexing and slicing work the same way for tuples as they do for strings, assuming the following input −\', \'No enclosing Delimiters is any set of multiple objects, comma-separated, written without identifying symbols, i.e., brackets for lists, parentheses for tuples, etc., default to tuples, as indicated in these short examples.\']','[\'\r\ntup1 = (\'physics\', \'chemistry\', 1997, 2000)\r\ntup2 = (1, 2, 3, 4, 5 )\r\ntup3 = \"a\", \"b\", \"c\", \"d\"\r\n\', \'\r\ntup1 = ();\r\n\', \'\r\ntup1 = (50,)\r\n\', \'\r\n#!/usr/bin/python3\r\n\r\ntup1 = (\'physics\', \'chemistry\', 1997, 2000)\r\ntup2 = (1, 2, 3, 4, 5, 6, 7 )\r\n\r\nprint (\"tup1[0]: \", tup1[0])\r\nprint (\"tup2[1:5]: \", tup2[1:5])\r\n\', \'\r\ntup1[0]:  physics\r\ntup2[1:5]:  (2, 3, 4, 5)\r\n\', \"\r\n#!/usr/bin/python3\r\n\r\ntup1 = (12, 34.56)\r\ntup2 = (\'abc\', \'xyz\')\r\n\r\n# Following action is not valid for tuples\r\n# tup1[0] = 100;\r\n\r\n# So let\'s create a new tuple as follows\r\ntup3 = tup1 + tup2\r\nprint (tup3)\r\n\", \"\r\n(12, 34.56, \'abc\', \'xyz\')\r\n\", \'\r\n#!/usr/bin/python3\r\n\r\ntup = (\'physics\', \'chemistry\', 1997, 2000);\r\n\r\nprint (tup)\r\ndel tup;\r\nprint (\"After deleting tup : \")\r\nprint (tup)\r\n\', \'\r\n(\'physics\', \'chemistry\', 1997, 2000)\r\nAfter deleting tup :\r\nTraceback (most recent call last):\r\n   File \"test.py\", line 9, in <module>\r\n      print tup;\r\nNameError: name \'tup\' is not defined\r\n\', \"\r\nT=(\'C++\', \'Java\', \'Python\')\r\n\"]','[\'\r\ntup1 = ();\r\n\', \'\r\ntup1 = (50,)\r\n\', \'\r\ntup1[0]:  physics\r\ntup2[1:5]:  (2, 3, 4, 5)\r\n\', \"\r\n(12, 34.56, \'abc\', \'xyz\')\r\n\", \'\r\n(\'physics\', \'chemistry\', 1997, 2000)\r\nAfter deleting tup :\r\nTraceback (most recent call last):\r\n   File \"test.py\", line 9, in <module>\r\n      print tup;\r\nNameError: name \'tup\' is not defined\r\n\', \"\r\nT=(\'C++\', \'Java\', \'Python\')\r\n\"]','[\"Python Expression|||Results|||Descriptio&&&len((1, 2, 3))|||3|||Length&&&(1, 2, 3) + (4, 5, 6)|||(1, 2, 3, 4, 5, 6)|||Concatenatio&&&(\'Hi!\',) * 4|||(\'Hi!\', \'Hi!\', \'Hi!\', \'Hi!\')|||Repetition&&&3 in (1, 2, 3)|||True|||Membership&&&for x in (1,2,3) : print (x, end = \' \')|||1 2 3|||Iteration\", \"Python Expression|||Results|||Descriptio&&&T[2]|||\'Python\'|||Offsets start at zero&&&T[-2]|||\'Java\'|||Negative: count from the right&&&T[1:]|||(\'Java\', \'Python\')|||Slicing fetches sections\", \'Sr.No.|||Function & Description&&&1||||||len(tuple)|||Gives the total length of the tuple.&&&2||||||max(tuple)|||Returns item from the tuple with max value.&&&3||||||min(tuple)|||Returns item from the tuple with min value&&&4||||||tuple(seq)|||Converts a list into tuple.\']','[]'),(13,'[\'Python 3 - Dictionary\']','[\'Accessing Values in Dictionary\', \'Updating Dictionary\', \'Delete Dictionary Elements\', \'Properties of Dictionary Keys\', \'Built-in Dictionary Functions and Methods\', \'Useful Video Courses\']','[]','[\'https://www.tutorialspoint.com/python3/python_tuples.htm\', \'https://www.tutorialspoint.com/python3/python_date_time.htm\', \'http://tpcg.io/MHnJJD\', \'http://tpcg.io/vQGIzw\', \'http://tpcg.io/cXjIA7\', \'http://tpcg.io/oCEFM1\', \'http://tpcg.io/K4elKR\', \'http://tpcg.io/psctl5\', \'https://www.tutorialspoint.com/python3/dictionary_cmp.htm\', \'https://www.tutorialspoint.com/python3/dictionary_len.htm\', \'https://www.tutorialspoint.com/python3/dictionary_str.htm\', \'https://www.tutorialspoint.com/python3/dictionary_type.htm\', \'https://www.tutorialspoint.com/python3/dictionary_clear.htm\', \'https://www.tutorialspoint.com/python3/dictionary_copy.htm\', \'https://www.tutorialspoint.com/python3/dictionary_fromkeys.htm\', \'https://www.tutorialspoint.com/python3/dictionary_get.htm\', \'https://www.tutorialspoint.com/python3/dictionary_has_key.htm\', \'https://www.tutorialspoint.com/python3/dictionary_items.htm\', \'https://www.tutorialspoint.com/python3/dictionary_keys.htm\', \'https://www.tutorialspoint.com/python3/dictionary_setdefault.htm\', \'https://www.tutorialspoint.com/python3/dictionary_update.htm\', \'https://www.tutorialspoint.com/python3/dictionary_values.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_tuples.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_date_time.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is executed, it produces the following result −\', \'Note − The del() method is discussed in subsequent section.\', \'There are two important points to remember about dictionary keys −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is executed, it produces the following result −\', \'Python includes the following dictionary functions −\', \'Produces a printable string representation of a dictionary\', \'Python includes the following dictionary methods −\', \'Removes all elements of dictionary dict\', \'Returns a shallow copy of dictionary dict\', \' Create a new dictionary with keys from seq and values set to value.\', \'For key key, returns value or default if key not in dictionary\', \'Removed, use the in operation instead.\', \"Returns a list of dict\'s (key, value) tuple pairs\", \"Returns list of dictionary dict\'s keys\", \"Adds dictionary dict2\'s key-values pairs to dict\", \"Returns list of dictionary dict\'s values\"]','[\'If we attempt to access a data item with a key, which is not a part of the dictionary, we get an error as follows −\', \'To explicitly remove an entire dictionary, just use the del statement. Following is a simple example −\', \'An exception is raised because after del dict, the dictionary does not exist anymore.\', \'Gives the total length of the dictionary. This would be equal to the number of items in the dictionary.\', \'Returns the type of the passed variable. If passed variable is dictionary, then it would return a dictionary type.\', \'Similar to get(), but will set dict[key] = default if key is not already in dict\']','[\'Each key is separated from its value by a colon (:), the items are separated by commas, and the whole thing is enclosed in curly braces. An empty dictionary without any items is written with just two curly braces, like this: {}.\', \'Keys are unique within a dictionary while values may not be. The values of a dictionary can be of any type, but the keys must be of an immutable data type such as strings, numbers, or tuples.\', \'To access dictionary elements, you can use the familiar square brackets along with the key to obtain its value. Following is a simple example −\', \'You can update a dictionary by adding a new entry or a key-value pair, modifying an existing entry, or deleting an existing entry as shown in a simple example given below.\', \'You can either remove individual dictionary elements or clear the entire contents of a dictionary. You can also delete entire dictionary in a single operation.\', \'Dictionary values have no restrictions. They can be any arbitrary Python object, either standard objects or user-defined objects. However, same is not true for the keys.\', \'(a) More than one entry per key is not allowed. This means no duplicate key is allowed. When duplicate keys are encountered during assignment, the last assignment wins. For example −\', \"(b) Keys must be immutable. This means you can use strings, numbers or tuples as dictionary keys but something like [\'key\'] is not allowed. Following is a simple example −\"]','[\'\n#!/usr/bin/python3\n\ndict = {\'Name\': \'Zara\', \'Age\': 7, \'Class\': \'First\'}\nprint (\"dict[\'Name\']: \", dict[\'Name\'])\nprint (\"dict[\'Age\']: \", dict[\'Age\'])\n\', \"\ndict[\'Name\']:  Zara\ndict[\'Age\']:  7\n\", \'\n#!/usr/bin/python3\n\ndict = {\'Name\': \'Zara\', \'Age\': 7, \'Class\': \'First\'};\nprint (\"dict[\'Alice\']: \", dict[\'Alice\'])\n\', \'\ndict[\'Zara\']:\nTraceback (most recent call last):\n   File \"test.py\", line 4, in <module>\n      print \"dict[\'Alice\']: \", dict[\'Alice\'];\nKeyError: \'Alice\'\n\', \'\n#!/usr/bin/python3\n\ndict = {\'Name\': \'Zara\', \'Age\': 7, \'Class\': \'First\'}\ndict[\'Age\'] = 8; # update existing entry\ndict[\'School\'] = \"DPS School\" # Add new entry\n\nprint (\"dict[\'Age\']: \", dict[\'Age\'])\nprint (\"dict[\'School\']: \", dict[\'School\'])\n\', \"\ndict[\'Age\']:  8\ndict[\'School\']:  DPS School\n\", \'\n#!/usr/bin/python3\n\ndict = {\'Name\': \'Zara\', \'Age\': 7, \'Class\': \'First\'}\n\ndel dict[\'Name\'] # remove entry with key \'Name\'\ndict.clear()     # remove all entries in dict\ndel dict         # delete entire dictionary\n\nprint (\"dict[\'Age\']: \", dict[\'Age\'])\nprint (\"dict[\'School\']: \", dict[\'School\'])\n\', \'\ndict[\'Age\']:\nTraceback (most recent call last):\n   File \"test.py\", line 8, in <module>\n      print \"dict[\'Age\']: \", dict[\'Age\'];\nTypeError: \'type\' object is unsubscriptable\n\', \'\n#!/usr/bin/python3\n\ndict = {\'Name\': \'Zara\', \'Age\': 7, \'Name\': \'Manni\'}\nprint (\"dict[\'Name\']: \", dict[\'Name\'])\n\', \"\ndict[\'Name\']:  Manni\n\", \'\n#!/usr/bin/python3\n\ndict = {[\'Name\']: \'Zara\', \'Age\': 7}\nprint (\"dict[\'Name\']: \", dict[\'Name\'])\n\', \'\nTraceback (most recent call last):\n   File \"test.py\", line 3, in <module>\n      dict = {[\'Name\']: \'Zara\', \'Age\': 7}\nTypeError: list objects are unhashable\n\']','[\"\ndict[\'Name\']:  Zara\ndict[\'Age\']:  7\n\", \'\ndict[\'Zara\']:\nTraceback (most recent call last):\n   File \"test.py\", line 4, in <module>\n      print \"dict[\'Alice\']: \", dict[\'Alice\'];\nKeyError: \'Alice\'\n\', \"\ndict[\'Age\']:  8\ndict[\'School\']:  DPS School\n\", \'\ndict[\'Age\']:\nTraceback (most recent call last):\n   File \"test.py\", line 8, in <module>\n      print \"dict[\'Age\']: \", dict[\'Age\'];\nTypeError: \'type\' object is unsubscriptable\n\', \"\ndict[\'Name\']:  Manni\n\", \'\nTraceback (most recent call last):\n   File \"test.py\", line 3, in <module>\n      dict = {[\'Name\']: \'Zara\', \'Age\': 7}\nTypeError: list objects are unhashable\n\']','[\'Sr.No.|||Function & Description&&&1||||||cmp(dict1, dict2)|||No longer available in Python 3.&&&2||||||len(dict)|||Gives the total length of the dictionary. This would be equal to the number of items in the dictionary.&&&3||||||str(dict)|||Produces a printable string representation of a dictionary&&&4||||||type(variable)|||Returns the type of the passed variable. If passed variable is dictionary, then it would return a dictionary type.\', \"Sr.No.|||Method & Description&&&1||||||dict.clear()|||Removes all elements of dictionary dict&&&2||||||dict.copy()|||Returns a shallow copy of dictionary dict&&&3||||||dict.fromkeys()||| Create a new dictionary with keys from seq and values set to value.&&&4||||||dict.get(key, default=None)|||For key key, returns value or default if key not in dictionary&&&5||||||dict.has_key(key)|||Removed, use the in operation instead.&&&6||||||dict.items()|||Returns a list of dict\'s (key, value) tuple pairs&&&7||||||dict.keys()|||Returns list of dictionary dict\'s keys&&&8||||||dict.setdefault(key, default = None)|||Similar to get(), but will set dict[key] = default if key is not already in dict&&&9||||||dict.update(dict2)|||Adds dictionary dict2\'s key-values pairs to dict&&&10||||||dict.values()|||Returns list of dictionary dict\'s values\"]','[]'),(14,'[\'Python 3 - Date & Time\']','[\'What is Tick?\', \'What is TimeTuple?\', \'Getting current time\', \'Getting formatted time\', \'Getting calendar for a month\', \'The time Module\', \'The calendar Module\', \'Other Modules and Functions\', \'Useful Video Courses\']','[\'Example\']','[\'https://www.tutorialspoint.com/python3/python_dictionary.htm\', \'https://www.tutorialspoint.com/python3/python_functions.htm\', \'http://tpcg.io/b5IfW3\', \'http://tpcg.io/JznzAJ\', \'http://tpcg.io/KO5lOd\', \'https://www.tutorialspoint.com\', \'http://tpcg.io/srMQHp\', \'http://tpcg.io/K5F8pR\', \'https://www.tutorialspoint.com/python3/time_altzone.htm\', \'https://www.tutorialspoint.com/python3/time_asctime.htm\', \'https://www.tutorialspoint.com/python3/time_clock.htm\', \'https://www.tutorialspoint.com/python3/time_ctime.htm\', \'https://www.tutorialspoint.com/python3/time_gmtime.htm\', \'https://www.tutorialspoint.com/python3/time_localtime.htm\', \'https://www.tutorialspoint.com/python3/time_mktime.htm\', \'https://www.tutorialspoint.com/python3/time_sleep.htm\', \'https://www.tutorialspoint.com/python3/time_strftime.htm\', \'https://www.tutorialspoint.com/python3/time_strptime.htm\', \'https://www.tutorialspoint.com/python3/time_time.htm\', \'https://www.tutorialspoint.com/python3/time_tzset.htm\', \'https://docs.python.org/library/datetime.html#module-datetime\', \'http://www.twinsun.com/tz/tz-link.htm\', \'https://labix.org/python-dateutil\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_dictionary.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_functions.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'This would produce a result something as follows −\', \'This would produce a result as follows −\', \'This would produce the following result −\', \'This would produce the following result −\', \'Like asctime(localtime(secs)) and without arguments is like asctime( )\', \'Suspends the calling thread for secs seconds.\', \'There are two important attributes available with time module. They are −\', \'Here is a list of functions available with the calendar module −\', \'calendar.calendar(year,w = 2,l = 1,c = 6)\', \'Returns True if year is a leap year; otherwise, False.\', \'Returns the total number of leap days in the years within range(y1,y2).\', \'calendar.month(year,month,w = 2,l = 1)\', \'calendar.prcal(year,w = 2,l = 1,c = 6)\', \'Like print calendar.calendar(year,w,l,c).\', \'calendar.prmonth(year,month,w = 2,l = 1)\', \'Like print calendar.month(year,month,w,l).\']','[\"Many of the Python\'s time functions handle time as a tuple of 9 numbers, as shown below −\", \'The above tuple is equivalent to struct_time structure. This structure has following attributes −\', \'This would produce the following result, which could be formatted in any other presentable form −\', \'You can format any time as per your requirement, but a simple method to get time in a readable format is asctime() −\', \"Accepts a time-tuple and returns a readable 24-character string such as \'Tue Dec 11 18:07:14 2008\'.\", \'Parses str according to format string fmt and returns the instant in time-tuple format.\', \'Returns the current time instant, a floating-point number of seconds since the epoch.\', \'Resets the time conversion rules used by the library routines. The environment variable TZ specifies how this is done.\', \'Sets the first day of each week to weekday code weekday. Weekday codes are 0 (Monday) to 6 (Sunday).\']','[\"A Python program can handle date and time in several ways. Converting between date formats is a common chore for computers. Python\'s time and calendar modules help track dates and times.\", \'Time intervals are floating-point numbers in units of seconds. Particular instants in time are expressed in seconds since 12:00am, January 1, 1970(epoch).\', \'There is a popular time module available in Python which provides functions for working with times, and for converting between representations. The function time.time() returns the current system time in ticks since 12:00am, January 1, 1970(epoch).\', \'Date arithmetic is easy to do with ticks. However, dates before the epoch cannot be represented in this form. Dates in the far future also cannot be represented this way - the cutoff point is sometime in 2038 for UNIX and Windows.\', \'To translate a time instant from seconds since the epoch floating-point value into a timetuple, pass the floating-point value to a function (e.g., localtime) that returns a time-tuple with all valid nine items.\', \'The calendar module gives a wide range of methods to play with yearly and monthly calendars. Here, we print a calendar for a given month ( Jan 2008 ) −\', \'There is a popular time module available in Python, which provides functions for working with times and for converting between representations. Here is the list of all available methods.\', \'The offset of the local DST timezone, in seconds west of UTC, if one is defined. This is negative if the local DST timezone is east of UTC (as in Western Europe, including the UK). Use this if the daylight is nonzero.\', \'Returns the current CPU time as a floating-point number of seconds. To measure computational costs of different approaches, the value of time.clock is more useful than that of time.time().\', \'Accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the UTC time. Note − t.tm_isdst is always 0\', \'Accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the local time (t.tm_isdst is 0 or 1, depending on whether DST applies to instant secs by local rules).\', \'Accepts an instant expressed as a time-tuple in local time and returns a floating-point value with the instant expressed in seconds since the epoch.\', \'Accepts an instant expressed as a time-tuple in local time and returns a string representing the instant as specified by string fmt.\', \'Attribute time.timezone is the offset in seconds of the local time zone (without DST) from UTC (>0 in the Americas; <=0 in most of Europe, Asia, Africa).\', \'Attribute time.tzname is a pair of locale-dependent strings, which are the names of the local time zone without and with DST, respectively.\', \'The calendar module supplies calendar-related functions, including functions to print a text calendar for a given month or year.\', \' By default, calendar takes Monday as the first day of the week and Sunday as the last one. To change this, call the calendar.setfirstweekday() function.\', \'Returns a multiline string with a calendar for year year formatted into three columns separated by c spaces. w is the width in characters of each date; each line has length 21*w+18+2*c. l is the number of lines for each week.\', \'Returns the current setting for the weekday that starts each week. By default, when calendar is first imported, this is 0, meaning Monday.\', \'Returns a multiline string with a calendar for month month of year year, one line per week plus two header lines. w is the width in characters of each date; each line has length 7*w+6. l is the number of lines for each week.\', \'Returns a list of lists of ints. Each sublist denotes a week. Days outside month month of year year are set to 0; days within the month are set to their day-of-month, 1 and up.\', \'Returns two integers. The first one is the code of the weekday for the first day of the month month in year year; the second one is the number of days in the month. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 to 12.\', \'The inverse of time.gmtime: accepts a time instant in time-tuple form and returns the same instant as a floating-point number of seconds since the epoch.\', \'Returns the weekday code for the given date. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 (January) to 12 (December).\', \'If you are interested, then here you would find a list of other important modules and functions to play with date & time in Python −\']','[\'\n#!/usr/bin/python3\nimport time;      # This is required to include time module.\n\nticks = time.time()\nprint (\"Number of ticks since 12:00am, January 1, 1970:\", ticks)\n\', \'\nNumber of ticks since 12:00am, January 1, 1970: 1455508609.34375\n\', \'\nimport time\n\nprint (time.localtime());\n\', \'\ntime.struct_time(tm_year = 2016, tm_mon = 2, tm_mday = 15, tm_hour = 9, \n   tm_min = 29, tm_sec = 2, tm_wday = 0, tm_yday = 46, tm_isdst = 0)\n\', \'\n#!/usr/bin/python3\nimport time\n\nlocaltime = time.localtime(time.time())\nprint (\"Local current time :\", localtime)\n\', \'\nLocal current time : time.struct_time(tm_year = 2016, tm_mon = 2, tm_mday = 15, \n   tm_hour = 9, tm_min = 29, tm_sec = 2, tm_wday = 0, tm_yday = 46, tm_isdst = 0)\n\', \'\n#!/usr/bin/python3\nimport time\n\nlocaltime = time.asctime( time.localtime(time.time()) )\nprint (\"Local current time :\", localtime)\n\', \'\nLocal current time : Mon Feb 15 09:34:03 2016\n\', \'\n#!/usr/bin/python3\nimport calendar\n\ncal = calendar.month(2016, 2)\nprint (\"Here is the calendar:\")\nprint (cal)\n\', \'\nHere is the calendar:\n   February 2016\nMo Tu We Th Fr Sa Su\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29\n\']','[\'\nNumber of ticks since 12:00am, January 1, 1970: 1455508609.34375\n\', \'\ntime.struct_time(tm_year = 2016, tm_mon = 2, tm_mday = 15, tm_hour = 9, \n   tm_min = 29, tm_sec = 2, tm_wday = 0, tm_yday = 46, tm_isdst = 0)\n\', \'\nLocal current time : time.struct_time(tm_year = 2016, tm_mon = 2, tm_mday = 15, \n   tm_hour = 9, tm_min = 29, tm_sec = 2, tm_wday = 0, tm_yday = 46, tm_isdst = 0)\n\', \'\nLocal current time : Mon Feb 15 09:34:03 2016\n\', \'\nHere is the calendar:\n   February 2016\nMo Tu We Th Fr Sa Su\n 1  2  3  4  5  6  7\n 8  9 10 11 12 13 14\n15 16 17 18 19 20 21\n22 23 24 25 26 27 28\n29\n\']','[\'Index|||Field|||Values&&&0|||4-digit year|||2016&&&1|||Month|||1 to 12&&&2|||Day|||1 to 31&&&3|||Hour|||0 to 23&&&4|||Minute|||0 to 59&&&5|||Second|||0 to 61 (60 or 61 are leap-seconds)&&&6|||Day of Week|||0 to 6 (0 is Monday)&&&7|||Day of year|||1 to 366 (Julian day)&&&8|||Daylight savings|||-1, 0, 1, -1 means library determines DST\', \'Index|||Attributes|||Values&&&0|||tm_year|||2016&&&1|||tm_mon|||1 to 12&&&2|||tm_mday|||1 to 31&&&3|||tm_hour|||0 to 23&&&4|||tm_min|||0 to 59&&&5|||tm_sec|||0 to 61 (60 or 61 are leap-seconds)&&&6|||tm_wday|||0 to 6 (0 is Monday)&&&7|||tm_yday|||1 to 366 (Julian day)&&&8|||tm_isdst|||-1, 0, 1, -1 means library determines DST\', \"Sr.No.|||Function & Description&&&1||||||time.altzone|||The offset of the local DST timezone, in seconds west of UTC, if one is defined. This is negative if the local DST timezone is east of UTC (as in Western Europe, including the UK). Use this if the daylight is nonzero.&&&2||||||time.asctime([tupletime])|||Accepts a time-tuple and returns a readable 24-character string such as \'Tue Dec 11 18:07:14 2008\'.&&&3||||||time.clock( )|||Returns the current CPU time as a floating-point number of seconds. To measure computational costs of different approaches, the value of time.clock is more useful than that of time.time().&&&4||||||time.ctime([secs])|||Like asctime(localtime(secs)) and without arguments is like asctime( )&&&5||||||time.gmtime([secs])|||Accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the UTC time. Note − t.tm_isdst is always 0&&&6||||||time.localtime([secs])|||Accepts an instant expressed in seconds since the epoch and returns a time-tuple t with the local time (t.tm_isdst is 0 or 1, depending on whether DST applies to instant secs by local rules).&&&7||||||time.mktime(tupletime)|||Accepts an instant expressed as a time-tuple in local time and returns a floating-point value with the instant expressed in seconds since the epoch.&&&8||||||time.sleep(secs)|||Suspends the calling thread for secs seconds.&&&9||||||time.strftime(fmt[,tupletime])|||Accepts an instant expressed as a time-tuple in local time and returns a string representing the instant as specified by string fmt.&&&10||||||time.strptime(str,fmt = \'%a %b %d %H:%M:%S %Y\')|||Parses str according to format string fmt and returns the instant in time-tuple format.&&&11||||||time.time( )|||Returns the current time instant, a floating-point number of seconds since the epoch.&&&12||||||time.tzset()|||Resets the time conversion rules used by the library routines. The environment variable TZ specifies how this is done.\", \'Sr.No.|||Attribute & Description&&&1|||time.timezone|||Attribute time.timezone is the offset in seconds of the local time zone (without DST) from UTC (>0 in the Americas; <=0 in most of Europe, Asia, Africa).&&&2|||time.tzname|||Attribute time.tzname is a pair of locale-dependent strings, which are the names of the local time zone without and with DST, respectively.\', \'Sr.No.|||Function & Description&&&1|||calendar.calendar(year,w = 2,l = 1,c = 6)|||Returns a multiline string with a calendar for year year formatted into three columns separated by c spaces. w is the width in characters of each date; each line has length 21*w+18+2*c. l is the number of lines for each week.&&&2|||calendar.firstweekday( )|||Returns the current setting for the weekday that starts each week. By default, when calendar is first imported, this is 0, meaning Monday.&&&3|||calendar.isleap(year)|||Returns True if year is a leap year; otherwise, False.&&&4|||calendar.leapdays(y1,y2)|||Returns the total number of leap days in the years within range(y1,y2).&&&5|||calendar.month(year,month,w = 2,l = 1)|||Returns a multiline string with a calendar for month month of year year, one line per week plus two header lines. w is the width in characters of each date; each line has length 7*w+6. l is the number of lines for each week&&&6|||calendar.monthcalendar(year,month)|||Returns a list of lists of ints. Each sublist denotes a week. Days outside month month of year year are set to 0; days within the month are set to their day-of-month, 1 and up&&&7|||calendar.monthrange(year,month)|||Returns two integers. The first one is the code of the weekday for the first day of the month month in year year; the second one is the number of days in the month. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 to 12.&&&8|||calendar.prcal(year,w = 2,l = 1,c = 6)|||Like print calendar.calendar(year,w,l,c).&&&9|||calendar.prmonth(year,month,w = 2,l = 1)|||Like print calendar.month(year,month,w,l).&&&10|||calendar.setfirstweekday(weekday)|||Sets the first day of each week to weekday code weekday. Weekday codes are 0 (Monday) to 6 (Sunday).&&&11|||calendar.timegm(tupletime)|||The inverse of time.gmtime: accepts a time instant in time-tuple form and returns the same instant as a floating-point number of seconds since the epoch.&&&12|||calendar.weekday(year,month,day)|||Returns the weekday code for the given date. Weekday codes are 0 (Monday) to 6 (Sunday); month numbers are 1 (January) to 12 (December).\']','[\'The datetime Module|||The pytz Module|||The dateutil Module|||\']'),(15,'[\'Python 3 - Functions\']','[\'Calling a Function\', \'Pass by Reference vs Value\', \'Function Arguments\', \'Required Arguments\', \'Keyword Arguments\', \'Default Arguments\', \'Variable-length Arguments\', \'The Anonymous Functions\', \'The return Statement\', \'Scope of Variables\', \'Global vs. Local variables\', \'Useful Video Courses\']','[\'Defining a Function\', \'Syntax\', \'Example\', \'Syntax\']','[\'https://www.tutorialspoint.com/python3/python_date_time.htm\', \'https://www.tutorialspoint.com/python3/python_modules.htm\', \'http://tpcg.io/gh41CO\', \'http://tpcg.io/89otk5\', \'http://tpcg.io/tJpndT\', \'http://tpcg.io/ceXIug\', \'http://tpcg.io/cOAFB8\', \'http://tpcg.io/6Vv9cq\', \'http://tpcg.io/e6K9mu\', \'http://tpcg.io/JFDYk7\', \'http://tpcg.io/GXNTkx\', \'http://tpcg.io/d2UiXP\', \'http://tpcg.io/mR877c\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_date_time.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_modules.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'The code block within every function starts with a colon (:) and is indented.\', \'When the above code is executed, it produces the following result −\', \'You can call a function by using the following types of formal arguments −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\', \'Syntax for a function with non-keyword variable arguments is given below −\', \'When the above code is  executed, it produces the following result −\', \'Following is an example to show how lambda form of function works −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\']','[\'You can define functions to provide the required functionality. Here are simple rules to define a function in Python.\', \'Function blocks begin with the keyword def followed by the function name and parentheses ( ( ) ).\', \'The first statement of a function can be an optional statement - the documentation string of the function or docstring.\', \'By default, parameters have a positional behavior and you need to inform them in the same order that they were defined.\', \'The following function takes a string as input parameter and prints it on standard screen.\', \'The following example gives a clearer picture. Note that the order of parameters does not matter.\', \'An anonymous function cannot be a direct call to print because lambda requires an expression.\', \'The syntax of lambda functions contains only a single statement, which is as follows −\', \'All the examples given below are not returning any value. You can return a value from a function as follows −\', \'Variables that are defined inside a function body have a local scope, and those defined outside have a global scope.\']','[\'A function is a block of organized, reusable code that is used to perform a single, related action. Functions provide better modularity for your application and a high degree of code reusing.\', \'As you already know, Python gives you many built-in functions like print(), etc. but you can also create your own functions. These functions are called user-defined functions.\', \'Any input parameters or arguments should be placed within these parentheses. You can also define parameters inside these parentheses.\', \'The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None.\', \'Defining a function gives it a name, specifies the parameters that are to be included in the function and structures the blocks of code.\', \'Once the basic structure of a function is finalized, you can execute it by calling it from another function or directly from the Python prompt. Following is an example to call the printme() function −\', \'All parameters (arguments) in the Python language are passed by reference. It means if you change what a parameter refers to within a function, the change also reflects back in the calling function. For example −\', \'Here, we are maintaining reference of the passed object and appending values in the same object. Therefore, this would produce the following result −\', \'There is one more example where argument is being passed by reference and the reference is being overwritten inside the called function.\', \'The parameter mylist is local to the function changeme. Changing mylist within the function does not affect mylist. The function accomplishes nothing and finally this would produce the following result −\', \'Required arguments are the arguments passed to a function in correct positional order. Here, the number of arguments in the function call should match exactly with the function definition.\', \'To call the function printme(), you definitely need to pass one argument, otherwise it gives a syntax error as follows −\', \'Keyword arguments are related to the function calls. When you use keyword arguments in a function call, the caller identifies the arguments by the parameter name.\', \'This allows you to skip arguments or place them out of order because the Python interpreter is able to use the keywords provided to match the values with parameters. You can also make keyword calls to the printme() function in the following ways −\', \'A default argument is an argument that assumes a default value if a value is not provided in the function call for that argument. The following example gives an idea on default arguments, it prints default age if it is not passed −\', \'You may need to process a function for more arguments than you specified while defining the function. These arguments are called variable-length arguments and are not named in the function definition, unlike required and default arguments.\', \'An asterisk (*) is placed before the variable name that holds the values of all nonkeyword variable arguments. This tuple remains empty if no additional arguments are specified during the function call. Following is a simple example −\', \'These functions are called anonymous because they are not declared in the standard manner by using the def keyword. You can use the lambda keyword to create small anonymous functions.\', \'Lambda forms can take any number of arguments but return just one value in the form of an expression. They cannot contain commands or multiple expressions.\', \'Lambda functions have their own local namespace and cannot access variables other than those in their parameter list and those in the global namespace.\', \'Although it appears that lambdas are a one-line version of a function, they are not equivalent to inline statements in C or C++, whose purpose is to stack allocation by passing function, during invocation for performance reasons.\', \'The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None.\', \'All variables in a program may not be accessible at all locations in that program. This depends on where you have declared a variable.\', \'The scope of a variable determines the portion of the program where you can access a particular identifier. There are two basic scopes of variables in Python −\', \'This means that local variables can be accessed only inside the function in which they are declared, whereas global variables can be accessed throughout the program body by all functions. When you call a function, the variables declared inside it are brought into scope. Following is a simple example −\']','[\'\ndef functionname( parameters ):\n   \"function_docstring\"\n   function_suite\n   return [expression]\n\', \'\ndef printme( str ):\n   \"This prints a passed string into this function\"\n   print (str)\n   return\n\', \'\n#!/usr/bin/python3\n\n# Function definition is here\ndef printme( str ):\n   \"This prints a passed string into this function\"\n   print (str)\n   return\n\n# Now you can call printme function\nprintme(\"This is first call to the user defined function!\")\nprintme(\"Again second call to the same function\")\n\', \'\nThis is first call to the user defined function!\nAgain second call to the same function\n\', \'\n#!/usr/bin/python3\n\n# Function definition is here\ndef changeme( mylist ):\n   \"This changes a passed list into this function\"\n   print (\"Values inside the function before change: \", mylist)\n   \n   mylist[2]=50\n   print (\"Values inside the function after change: \", mylist)\n   return\n\n# Now you can call changeme function\nmylist = [10,20,30]\nchangeme( mylist )\nprint (\"Values outside the function: \", mylist)\n\', \'\nValues inside the function before change:  [10, 20, 30]\nValues inside the function after change:  [10, 20, 50]\nValues outside the function:  [10, 20, 50]\n\', \'\n#!/usr/bin/python3\n\n# Function definition is here\ndef changeme( mylist ):\n   \"This changes a passed list into this function\"\n   mylist = [1,2,3,4] # This would assi new reference in mylist\n   print (\"Values inside the function: \", mylist)\n   return\n\n# Now you can call changeme function\nmylist = [10,20,30]\nchangeme( mylist )\nprint (\"Values outside the function: \", mylist)\n\', \'\nValues inside the function:  [1, 2, 3, 4]\nValues outside the function:  [10, 20, 30]\n\', \'\n#!/usr/bin/python3\n\n# Function definition is here\ndef printme( str ):\n   \"This prints a passed string into this function\"\n   print (str)\n   return\n\n# Now you can call printme function\nprintme()\n\', \'\nTraceback (most recent call last):\n   File \"test.py\", line 11, in <module>\n      printme();\nTypeError: printme() takes exactly 1 argument (0 given)\n\', \'\n#!/usr/bin/python3\n\n# Function definition is here\ndef printme( str ):\n   \"This prints a passed string into this function\"\n   print (str)\n   return\n\n# Now you can call printme function\nprintme( str = \"My string\")\n\', \'\nMy string\n\', \'\n#!/usr/bin/python3\n\n# Function definition is here\ndef printinfo( name, age ):\n   \"This prints a passed info into this function\"\n   print (\"Name: \", name)\n   print (\"Age \", age)\n   return\n\n# Now you can call printinfo function\nprintinfo( age = 50, name = \"miki\" )\n\', \'\nName:  miki\nAge  50\n\', \'\n#!/usr/bin/python3\n\n# Function definition is here\ndef printinfo( name, age = 35 ):\n   \"This prints a passed info into this function\"\n   print (\"Name: \", name)\n   print (\"Age \", age)\n   return\n\n# Now you can call printinfo function\nprintinfo( age = 50, name = \"miki\" )\nprintinfo( name = \"miki\" )\n\', \'\nName:  miki\nAge  50\nName:  miki\nAge  35\n\', \'\ndef functionname([formal_args,] *var_args_tuple ):\n   \"function_docstring\"\n   function_suite\n   return [expression]\n\', \'\n#!/usr/bin/python3\n\n# Function definition is here\ndef printinfo( arg1, *vartuple ):\n   \"This prints a variable passed arguments\"\n   print (\"Output is: \")\n   print (arg1)\n   \n   for var in vartuple:\n      print (var)\n   return\n\n# Now you can call printinfo function\nprintinfo( 10 )\nprintinfo( 70, 60, 50 )\n\', \'\nOutput is:\n10\nOutput is:\n70\n60\n50\n\', \'\nlambda [arg1 [,arg2,.....argn]]:expression\n\', \'\n#!/usr/bin/python3\n\n# Function definition is here\nsum = lambda arg1, arg2: arg1 + arg2\n\n# Now you can call sum as a function\nprint (\"Value of total : \", sum( 10, 20 ))\nprint (\"Value of total : \", sum( 20, 20 ))\n\', \'\nValue of total :  30\nValue of total :  40\n\', \'\n#!/usr/bin/python3\n\n# Function definition is here\ndef sum( arg1, arg2 ):\n   # Add both the parameters and return them.\"\n   total = arg1 + arg2\n   print (\"Inside the function : \", total)\n   return total\n\n# Now you can call sum function\ntotal = sum( 10, 20 )\nprint (\"Outside the function : \", total )\n\', \'\nInside the function :  30\nOutside the function :  30\n\', \'\n#!/usr/bin/python3\n\ntotal = 0   # This is global variable.\n# Function definition is here\ndef sum( arg1, arg2 ):\n   # Add both the parameters and return them.\"\n   total = arg1 + arg2; # Here total is local variable.\n   print (\"Inside the function local total : \", total)\n   return total\n\n# Now you can call sum function\nsum( 10, 20 )\nprint (\"Outside the function global total : \", total )\n\', \'\nInside the function local total :  30\nOutside the function global total :  0\n\']','[\'\ndef functionname( parameters ):\n   \"function_docstring\"\n   function_suite\n   return [expression]\n\', \'\nThis is first call to the user defined function!\nAgain second call to the same function\n\', \'\nValues inside the function before change:  [10, 20, 30]\nValues inside the function after change:  [10, 20, 50]\nValues outside the function:  [10, 20, 50]\n\', \'\nValues inside the function:  [1, 2, 3, 4]\nValues outside the function:  [10, 20, 30]\n\', \'\nTraceback (most recent call last):\n   File \"test.py\", line 11, in <module>\n      printme();\nTypeError: printme() takes exactly 1 argument (0 given)\n\', \'\nMy string\n\', \'\nName:  miki\nAge  50\n\', \'\nName:  miki\nAge  50\nName:  miki\nAge  35\n\', \'\ndef functionname([formal_args,] *var_args_tuple ):\n   \"function_docstring\"\n   function_suite\n   return [expression]\n\', \'\nOutput is:\n10\nOutput is:\n70\n60\n50\n\', \'\nlambda [arg1 [,arg2,.....argn]]:expression\n\', \'\nValue of total :  30\nValue of total :  40\n\', \'\nInside the function :  30\nOutside the function :  30\n\', \'\nInside the function local total :  30\nOutside the function global total :  0\n\']','[]','[\'Function blocks begin with the keyword def followed by the function name and parentheses ( ( ) ).|||Any input parameters or arguments should be placed within these parentheses. You can also define parameters inside these parentheses.|||The first statement of a function can be an optional statement - the documentation string of the function or docstring.|||The code block within every function starts with a colon (:) and is indented.|||The statement return [expression] exits a function, optionally passing back an expression to the caller. A return statement with no arguments is the same as return None.|||Required arguments|||Keyword arguments|||Default arguments|||Variable-length arguments|||Lambda forms can take any number of arguments but return just one value in the form of an expression. They cannot contain commands or multiple expressions.|||An anonymous function cannot be a direct call to print because lambda requires an expression.|||Lambda functions have their own local namespace and cannot access variables other than those in their parameter list and those in the global namespace.|||Although it appears that lambdas are a one-line version of a function, they are not equivalent to inline statements in C or C++, whose purpose is to stack allocation by passing function, during invocation for performance reasons.|||Global variables|||Local variables|||\']'),(16,'[\'Python 3 - Modules\']','[\'The import Statement\', \'The from...import Statement\', \'The from...import * Statement\', \'Executing Modules as Scripts\', \'Locating Modules\', \'The PYTHONPATH Variable\', \'Namespaces and Scoping\', \'The dir( ) Function\', \'The globals() and locals() Functions\', \'The reload() Function\', \'Packages in Python\', \'Useful Video Courses\']','[\'Example\']','[\'https://www.tutorialspoint.com/python3/python_functions.htm\', \'https://www.tutorialspoint.com/python3/python_files_io.htm\', \'http://tpcg.io/m8xId0\', \'http://tpcg.io/lHdtHD\', \'http://tpcg.io/NLz0dc\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_functions.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_files_io.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'When the above code is  executed, it produces the following result −\', \'Add this code at the end of your module −\', \'When you run the above code, the following output will be displayed.\', \'Here is a typical PYTHONPATH from a Windows system −\', \'And here is a typical PYTHONPATH from a UNIX system −\', \'When the above code is  executed, it produces the following result −\', \'Phone/Isdn.py file having function Isdn()\', \'Phone/G3.py file having function G3()\', \'Now, create one more file __init__.py in the Phone directory −\', \'When the above code is  executed, it produces the following result −\']','[\'For example, to import the function fibonacci from the module fib, use the following statement −\', \'When you import a module, the Python interpreter searches for the module in the following sequences −\', \'If the module is not found, Python then searches each directory in the shell variable PYTHONPATH.\', \'If all else fails, Python checks the default path. On UNIX, this default path is normally /usr/local/lib/python3/.\', \'Each function has its own local namespace. Class methods follow the same scoping rule as ordinary functions.\', \'Therefore, in order to assign a value to a global variable within a function, you must first use the global statement.\', \'The dir() built-in function returns a sorted list of strings containing the names defined by a module.\', \'The return type of both these functions is dictionary. Therefore, names can be extracted using the keys() function.\', \'When a module is imported into a script, the code in the top-level portion of a module is executed only once.\', \'Consider a file Pots.py  available in Phone directory. This file has the following line of source code −\', \'Similar, we have other two files having different functions with the same name as above. They are −\', \'After you add these lines to __init__.py, you have all of these classes available when you import the Phone package.\']','[\'A module allows you to logically organize your Python code. Grouping related code into a module makes the code easier to understand and use. A module is a Python object with arbitrarily named attributes that you can bind and reference.\', \'Simply, a module is a file consisting of Python code. A module can define functions, classes and variables. A module can also include runnable code.\', \'The Python code for a module named aname normally resides in a file namedaname.py. Here is an example of a simple module, support.py −\', \'You can use any Python source file as a module by executing an import statement in some other Python source file. The import has the following syntax −\', \'When the interpreter encounters an import statement, it imports the module if the module is present in the search path. A search path is a list of directories that the interpreter searches before importing a module. For example, to import the module hello.py, you need to put the following command at the top of the script −\', \'A module is loaded only once, regardless of the number of times it is imported. This prevents the module execution from happening repeatedly, if multiple imports occur.\', \"Python\'s from statement lets you import specific attributes from a module into the current namespace. The from...import has the following syntax −\", \'This statement does not import the entire module fib into the current namespace; it just introduces the item fibonacci from the module fib into the global symboltable of the importing module.\', \'It is also possible to import all the names from a module into the current namespace by using the following import statement −\', \'This provides an easy way to import all the items from a module into the current namespace; however, this statement should be used sparingly.\', \'Within a module, the module’s name (as a string) is available as the value of the global variable __name__. The code in the module will be executed, just as if you imported it, but with the __name__ set to \"__main__\".\', \'The module search path is stored in the system module sys as the sys.path variable. The sys.path variable contains the current directory, PYTHONPATH, and the installation-dependent default.\', \'The PYTHONPATH is an environment variable, consisting of a list of directories. The syntax of PYTHONPATH is the same as that of the shell variable PATH.\', \'Variables are names (identifiers) that map to objects. A namespace is a dictionary of variable names (keys) and their corresponding objects (values).\', \'A Python statement can access variables in a local namespace and in the global namespace. If a local and a global variable have the same name, the local variable shadows the global variable.\', \'Python makes educated guesses on whether variables are local or global. It assumes that any variable assigned a value in a function is local.\', \'For example, we define a variable Money in the global namespace. Within the function Money, we assign Money a value,  therefore Python assumes Money as a local variable.\', \'However, we accessed the value of the local variable Money before setting it, so an UnboundLocalError is the result. Uncommenting the global statement fixes the problem.\', \'The list contains the names of all the modules, variables and functions that are defined in a module. Following is a simple example −\', \"Here, the special string variable __name__ is the module\'s name, and  __file__ is the filename from which the module was loaded.\", \'The globals() and locals() functions can be used to return the names in the global and local namespaces depending on the location from where they are called.\', \'If locals() is called from within a function, it will return all the names that can be accessed locally from that function.\', \'If globals() is called from within a function, it will return all the names that can be accessed globally from that function.\', \'Therefore, if you want to reexecute the top-level code in a module, you can use the reload() function. The reload() function imports a previously imported module again. The syntax of the reload() function is this −\', \'Here, module_name is the name of the module you want to reload and not the string containing the module name. For example, to reload hello module, do the following −\', \'A package is a hierarchical file directory structure that defines a single Python application environment that consists of modules and subpackages and sub-subpackages, and so on.\', \'To make all of your functions available when you have imported Phone, you need to put explicit import statements in __init__.py as follows −\', \'In the above example, we have taken example of a single function in each file,  but you can keep multiple functions in your files. You can also define different Python classes in those files and then you can create your packages out of those classes.\']','[\'\ndef print_func( par ):\n   print \"Hello : \", par\n   return\n\', \'\nimport module1[, module2[,... moduleN]\n\', \'\n#!/usr/bin/python3\n\n# Import module support\nimport support\n\n# Now you can call defined function that module as follows\nsupport.print_func(\"Zara\")\n\', \'\nHello : Zara\n\', \'\nfrom modname import name1[, name2[, ... nameN]]\n\', \'\n#!/usr/bin/python3\n\n# Fibonacci numbers module\n\ndef fib(n): # return Fibonacci series up to n\n   result = []\n   a, b = 0, 1\n   while b < n:\n      result.append(b)\n      a, b = b, a + b\n   return result\n>>> from fib import fib\n>>> fib(100)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\', \'\nfrom modname import *\n\', \'\n#!/usr/bin/python3\n\n# Fibonacci numbers module\n\ndef fib(n): # return Fibonacci series up to n\n   result = []\n   a, b = 0, 1\n   while b < n:\n      result.append(b)\n      a, b = b, a + b\n   return result\nif __name__ == \"__main__\":\n   f = fib(100)\n   print(f)\n\', \'\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\', \'\nset PYTHONPATH = c:\\python34\\lib;\n\', \'\nset PYTHONPATH = /usr/local/lib/python\n\', \'\n#!/usr/bin/python3\n\nMoney = 2000\ndef AddMoney():\n   # Uncomment the following line to fix the code:\n   # global Money\n   Money = Money + 1\n\nprint (Money)\nAddMoney()\nprint (Money)\n\', \'\n#!/usr/bin/python3\n\n# Import built-in module math\nimport math\n\ncontent = dir(math)\nprint (content)\n\', \"\n[\'__doc__\', \'__file__\', \'__name__\', \'acos\', \'asin\', \'atan\', \n\'atan2\', \'ceil\', \'cos\', \'cosh\', \'degrees\', \'e\', \'exp\', \n\'fabs\', \'floor\', \'fmod\', \'frexp\', \'hypot\', \'ldexp\', \'log\',\n\'log10\', \'modf\', \'pi\', \'pow\', \'radians\', \'sin\', \'sinh\', \n\'sqrt\', \'tan\', \'tanh\']\n\", \'\nreload(module_name)\n\', \'\nreload(hello)\n\', \'\n#!/usr/bin/python3\n\ndef Pots():\nprint (\"I\'m Pots Phone\")  \n\', \'\nfrom Pots import Pots\nfrom Isdn import Isdn\nfrom G3 import G3\n\', \'\n#!/usr/bin/python3\n\n# Now import your Phone Package.\nimport Phone\n\nPhone.Pots()\nPhone.Isdn()\nPhone.G3()\n\', \"\nI\'m Pots Phone\nI\'m 3G Phone\nI\'m ISDN Phone\n\"]','[\'\nimport module1[, module2[,... moduleN]\n\', \'\nHello : Zara\n\', \'\nfrom modname import name1[, name2[, ... nameN]]\n\', \'\nfrom modname import *\n\']','[]','[\'The current directory.|||If the module is not found, Python then searches each directory in the shell variable PYTHONPATH.|||If all else fails, Python checks the default path. On UNIX, this default path is normally /usr/local/lib/python3/.|||A Python statement can access variables in a local namespace and in the global namespace. If a local and a global variable have the same name, the local variable shadows the global variable.|||Each function has its own local namespace. Class methods follow the same scoping rule as ordinary functions.|||Python makes educated guesses on whether variables are local or global. It assumes that any variable assigned a value in a function is local.|||Therefore, in order to assign a value to a global variable within a function, you must first use the global statement.|||The statement global VarName tells Python that VarName is a global variable. Python stops searching the local namespace for the variable.|||If locals() is called from within a function, it will return all the names that can be accessed locally from that function.|||If globals() is called from within a function, it will return all the names that can be accessed globally from that function.|||Phone/Isdn.py file having function Isdn()|||Phone/G3.py file having function G3()|||Phone/__init__.py|||\']'),(17,'[\'Python 3 - Files I/O\']','[\'Printing to the Screen\', \'Reading Keyboard Input\', \'The input Function\', \'Opening and Closing Files\', \'The open Function\', \'The file Object Attributes\', \'The close() Method\', \'Reading and Writing Files\', \'The write() Method\', \'The read() Method\', \'File Positions\', \'Renaming and Deleting Files\', \'The rename() Method\', \'The remove() Method\', \'Directories in Python\', \'The mkdir() Method\', \'The chdir() Method\', \'The getcwd() Method\', \'The rmdir() Method\', \'File and Directory Related Methods\', \'Useful Video Courses\']','[\'Syntax\', \'Example\', \'Syntax\', \'Example\', \'Syntax\', \'Example\', \'Syntax\', \'Example\', \'Example\', \'Syntax\', \'Example\', \'Syntax\', \'Example\', \'Syntax\', \'Example\', \'Syntax\', \'Example\', \'Syntax\', \'Example\', \'Syntax\', \'Example\']','[\'https://www.tutorialspoint.com/python3/python_modules.htm\', \'https://www.tutorialspoint.com/python3/python_exceptions.htm\', \'http://tpcg.io/fYN916\', \'http://tpcg.io/Ux8rpv\', \'http://tpcg.io/xXErpK\', \'https://www.tutorialspoint.com/python3/file_methods.htm\', \'https://www.tutorialspoint.com/python3/os_file_methods.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_modules.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_exceptions.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'This produces the following result on your standard screen −\', \'Here is a list of the different modes of opening a file −\', \'Here is a list of all the attributes related to a file object −\', \'Returns true if file is closed, false otherwise.\', \'Returns access mode with which file was opened.\', \'Note − softspace attribute is not supported in Python 3.x\', \'This produces the following result −\', \'This produces the following result −\', \'Here, passed parameter is the content to be written into the opened file.\', \' Let us take a file foo.txt, which we created above.\', \'This produces the following result −\', \' Let us take a file foo.txt, which we created above.\', \'This produces the following result −\', \'Following is an example to rename an existing file test1.txt −\', \'Following is an example to delete an existing file test2.txt −\', \'Following is an example to create a directory test in the current directory −\', \'Following is an example to go into \"/home/newdir\" directory −\', \'The getcwd() method displays the current working directory.\', \'Following is an example to give current directory −\', \'Before removing a directory, all the contents in it should be removed.\', \'The file object provides functions to manipulate files.\', \'This provides methods to process files as well as directories.\']','[\'file_name − The file_name argument is a string value that contains the name of the file that you want to access.\', \'Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.\', \'Opens a file for both reading and writing. The file pointer placed at the beginning of the file.\', \'Opens a file for both reading and writing in binary format. The file pointer placed at the beginning of the file.\', \'Once a file is opened and you have one file object, you can get various information related to that file.\', \"The write() method does not add a newline character (\'\\n\') to the end of the string −\", \'To use this module, you need to import it first and then you can call any related functions.\', \'The rename() method takes two arguments, the current filename and the new filename.\', \'You can use the remove() method to delete files by supplying the name of the file to be deleted as the argument.\', \'The rmdir() method deletes the directory, which is passed as an argument in the method.\']','[\'This chapter covers all the basic I/O functions available in Python 3. For more functions, please refer to the standard Python documentation.\', \'The simplest way to produce output is using the print statement where you can pass zero or more expressions separated by commas. This function converts the expressions you pass into a string and writes the result to standard output as follows −\', \'Python 2 has two built-in functions to read data from standard input, which by default comes from the keyboard. These functions are input() and raw_input()\', \'In Python 3, raw_input() function is deprecated. Moreover, input() functions read data from keyboard as string, irrespective of whether it is enclosed with quotes (\'\' or \"\" ) or not.\', \'The input([prompt]) function is equivalent to raw_input, except that it assumes that the input is a valid Python expression and returns the evaluated result to you.\', \'Until now, you have been reading and writing to the standard input and output. Now, we will see how to use actual data files.\', \'Python provides basic functions and methods necessary to manipulate files by default. You can do most of the file manipulation using a file object.\', \"Before you can read or write a file, you have to open it using Python\'s built-in open() function. This function creates a file object, which would be utilized to call other support methods associated with it.\", \'access_mode − The access_mode determines the mode in which the file has to be opened, i.e., read, write, append, etc. A complete list of possible values is given below in the table. This is an optional parameter and the default file access mode is read (r).\', \'buffering − If the buffering value is set to 0, no buffering  takes place. If the buffering value is 1, line buffering is performed while accessing a file. If you specify the buffering value as an integer greater than 1, then buffering action is performed with the indicated buffer size. If negative, the buffer size is the system default(default behavior).\', \'Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.\', \'Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.\', \'Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.\', \'Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.\', \'Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.\', \'Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.\', \'Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.\', \'Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.\', \'Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.\', \'The close() method of a file object flushes any unwritten information and closes the file object, after which no more writing can be done.\', \'Python automatically closes a file when the reference object of a file is reassigned to another file. It is a good practice to use the close() method to close a file.\', \'The file object provides a set of access methods to make our lives easier. We would see how to use read() and write() methods to read and write files.\', \'The write() method writes any string to an open file. It is important to note that Python strings can have binary data and not just text.\', \'The above method would create foo.txt file and would write given content in that file and finally it would close that file. If you would open this file, it would have the following content −\', \'The read() method reads a string from an open file. It is important to note that Python strings can have binary data. apart from text data.\', \'Here, passed parameter is the number of bytes to be read from the opened file. This method starts reading from the beginning of the file and if count is missing, then it tries to read as much as possible, maybe until the end of file.\', \'The tell() method tells you the current position within the file; in other words, the next read or write will occur at that many bytes from the beginning of the file.\', \'The seek(offset[, from]) method changes the current file position. The offset argument indicates the number of bytes to be moved. The from argument specifies the reference position from where the bytes are to be moved.\', \'If from is set to 0, the beginning of the file is used as the reference position. If it is set to 1, the current position is used as the reference position. If it is set to 2 then the end of the file would be taken as the reference position.\', \'Python os module provides methods that help you perform file-processing operations, such as renaming and deleting files.\', \'All files are contained within various directories, and Python has no problem handling these too. The os module has several methods that help you create, remove, and change directories.\', \'You can use the mkdir() method of the os module to create directories in the current directory. You need to supply an argument to this method, which contains the name of the directory to be created.\', \'You can use the chdir() method to change the current directory. The chdir() method takes an argument, which is the name of the directory that you want to make the current directory.\', \'Following is an example to remove the \"/tmp/test\" directory. It is required to give fully qualified name of the directory, otherwise it would search for that directory in the current directory.\', \'There are three important sources, which provide a wide range of utility methods to handle and manipulate files & directories on Windows and Unix operating systems. They are as follows −\']','[\'\n#!/usr/bin/python3\n\nprint (\"Python is really a great language,\", \"isn\'t it?\")\n\', \"\nPython is really a great language, isn\'t it?\n\", \'\n#!/usr/bin/python3\n\n>>> x = input(\"something:\")\nsomething:10\n\n>>> x\n\'10\'\n\n>>> x = input(\"something:\")\nsomething:\'10\' #entered data treated as string with or without \'\'\n\n>>> x\n\"\'10\'\"\n\', \'\nfile object = open(file_name [, access_mode][, buffering])\n\', \'\n#!/usr/bin/python3\n\n# Open a file\nfo = open(\"foo.txt\", \"wb\")\nprint (\"Name of the file: \", fo.name)\nprint (\"Closed or not : \", fo.closed)\nprint (\"Opening mode : \", fo.mode)\nfo.close()\n\', \'\nName of the file:  foo.txt\nClosed or not :  False\nOpening mode :  wb\n\', \'\nfileObject.close();\n\', \'\n#!/usr/bin/python3\n\n# Open a file\nfo = open(\"foo.txt\", \"wb\")\nprint (\"Name of the file: \", fo.name)\n\n# Close opened file\nfo.close()\n\', \'\nName of the file:  foo.txt\n\', \'\nfileObject.write(string);\n\', \'\n#!/usr/bin/python3\n\n# Open a file\nfo = open(\"foo.txt\", \"w\")\nfo.write( \"Python is a great language.\\nYeah its great!!\\n\")\n\n# Close opend file\nfo.close()\n\', \'\nPython is a great language.\nYeah its great!!\n\', \'\nfileObject.read([count]);\n\', \'\n#!/usr/bin/python3\n\n# Open a file\nfo = open(\"foo.txt\", \"r+\")\nstr = fo.read(10)\nprint (\"Read String is : \", str)\n\n# Close opened file\nfo.close()\n\', \'\nRead String is :  Python is\n\', \'\n#!/usr/bin/python3\n\n# Open a file\nfo = open(\"foo.txt\", \"r+\")\nstr = fo.read(10)\nprint (\"Read String is : \", str)\n\n# Check current position\nposition = fo.tell()\nprint (\"Current file position : \", position)\n\n# Reposition pointer at the beginning once again\nposition = fo.seek(0, 0)\nstr = fo.read(10)\nprint (\"Again read String is : \", str)\n\n# Close opened file\nfo.close()\n\', \'\nRead String is :  Python is\nCurrent file position :  10\nAgain read String is :  Python is\n\', \'\nos.rename(current_file_name, new_file_name)\n\', \'\n#!/usr/bin/python3\nimport os\n\n# Rename a file from test1.txt to test2.txt\nos.rename( \"test1.txt\", \"test2.txt\" )\n\', \'\nos.remove(file_name)\n\', \'\n#!/usr/bin/python3\nimport os\n\n# Delete file test2.txt\nos.remove(\"text2.txt\")\n\', \'\nos.mkdir(\"newdir\")\n\', \'\n#!/usr/bin/python3\nimport os\n\n# Create a directory \"test\"\nos.mkdir(\"test\")\n\', \'\nos.chdir(\"newdir\")\n\', \'\n#!/usr/bin/python3\nimport os\n\n# Changing a directory to \"/home/newdir\"\nos.chdir(\"/home/newdir\")\n\', \'\nos.getcwd()\n\', \'\n#!/usr/bin/python3\nimport os\n\n# This would give location of the current directory\nos.getcwd()\n\', \"\nos.rmdir(\'dirname\')\n\", \'\n#!/usr/bin/python3\nimport os\n\n# This would  remove \"/tmp/test\"  directory.\nos.rmdir( \"/tmp/test\"  )\n\']','[\"\nPython is really a great language, isn\'t it?\n\", \'\nfile object = open(file_name [, access_mode][, buffering])\n\', \'\nName of the file:  foo.txt\nClosed or not :  False\nOpening mode :  wb\n\', \'\nfileObject.close();\n\', \'\nName of the file:  foo.txt\n\', \'\nfileObject.write(string);\n\', \'\nPython is a great language.\nYeah its great!!\n\', \'\nfileObject.read([count]);\n\', \'\nRead String is :  Python is\n\', \'\nRead String is :  Python is\nCurrent file position :  10\nAgain read String is :  Python is\n\', \'\nos.rename(current_file_name, new_file_name)\n\', \'\nos.remove(file_name)\n\', \'\nos.mkdir(\"newdir\")\n\', \'\nos.chdir(\"newdir\")\n\', \'\nos.getcwd()\n\', \"\nos.rmdir(\'dirname\')\n\"]','[\'Sr.No.|||Mode & Description&&&1|||r|||Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.&&&2|||rb|||Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.&&&3|||r+|||Opens a file for both reading and writing. The file pointer placed at the beginning of the file.&&&4|||rb+|||Opens a file for both reading and writing in binary format. The file pointer placed at the beginning of the file.&&&5|||w|||Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.&&&6|||wb|||Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.&&&7|||w+|||Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.&&&8|||wb+|||Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.&&&9|||a|||Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.&&&10|||ab|||Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.&&&11|||a+|||Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.&&&12|||ab+|||Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.\', \'Sr.No.|||Attribute & Description&&&1|||file.closed|||Returns true if file is closed, false otherwise.&&&2|||file.mode|||Returns access mode with which file was opened.&&&3|||file.name|||Returns name of the file.\']','[\'file_name − The file_name argument is a string value that contains the name of the file that you want to access.|||access_mode − The access_mode determines the mode in which the file has to be opened, i.e., read, write, append, etc. A complete list of possible values is given below in the table. This is an optional parameter and the default file access mode is read (r).|||buffering − If the buffering value is set to 0, no buffering  takes place. If the buffering value is 1, line buffering is performed while accessing a file. If you specify the buffering value as an integer greater than 1, then buffering action is performed with the indicated buffer size. If negative, the buffer size is the system default(default behavior).|||File Object Methods|||The file object provides functions to manipulate files.|||OS Object Methods|||This provides methods to process files as well as directories.||||||\']'),(18,'[\'Python 3 - Exceptions Handling\']','[\'Standard Exceptions\', \'Assertions in Python\', \'What is Exception?\', \'Handling an exception\', \'The except Clause with No Exceptions\', \'The except Clause with Multiple Exceptions\', \'The try-finally Clause\', \'Argument of an Exception\', \'Raising an Exception\', \'User-Defined Exceptions\', \'Useful Video Courses\']','[\'The assert Statement\', \'Example\', \'Syntax\', \'Example\', \'Example\', \'Example\', \'Example\', \'Syntax\', \'Example\']','[\'https://www.tutorialspoint.com/python3/python_files_io.htm\', \'https://www.tutorialspoint.com/python3/python_classes_objects.htm\', \'https://www.tutorialspoint.com/python3/python_exceptions.htm#standard_exceptions\', \'https://www.tutorialspoint.com/python3/python_exceptions.htm#assertion_python\', \'http://tpcg.io/r1PgMi\', \'http://tpcg.io/oxCWSE\', \'http://tpcg.io/ceZWjn\', \'http://tpcg.io/RR5c1J\', \'http://tpcg.io/s2jDA4\', \'http://tpcg.io/aP6Dfo\', \'http://tpcg.io/j1AB30\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_files_io.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_classes_objects.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'Assertions − This would be covered in Assertions in Python 3 tutorial.\', \'Here is a list of Standard Exceptions available in Python. −\', \'Raised when the next() method of an iterator does not point to any object.\', \'Base class for all built-in exceptions except StopIteration and SystemExit.\', \'Base class for all errors that occur for numeric calculation.\', \'Raised when a calculation exceeds maximum limit for a numeric type.\', \'Raised when a floating point calculation fails.\', \'Raised when division or modulo by zero takes place for all numeric types.\', \'Raised in case of failure of the Assert statement.\', \'Raised in case of failure of attribute reference or assignment.\', \'Raised when an import statement fails.\', \'Raised when the user interrupts program execution, usually by pressing Ctrl+c.\', \'Raised when an index is not found in a sequence.\', \'Raised when the specified key is not found in the dictionary.\', \'Raised when an identifier is not found in the local or global namespace.\', \'Base class for all exceptions that occur outside the Python environment.\', \'Raised for operating system-related errors.\', \'Raised when there is an error in Python syntax.\', \'Raised when indentation is not specified properly.\', \'Raised when a generated error does not fall into any category.\', \'When the above code is executed, it produces the following result −\', \'Here is simple syntax of try....except...else blocks −\', \'Here are few important points about the above-mentioned syntax −\', \'You can also provide a generic except clause, which handles any exception.\', \'This produces the following result −\', \'This produces the following result −\', \'You can also use the except statement with no exceptions defined as follows −\', \'Same example can be written more cleanly as follows −\', \'This produces the following result −\', \'Following is an example for a single exception −\', \'This produces the following result −\', \'The following example illustrates the use of raising an exception −\', \'This will produce the following result\']','[\'Raised when there is no input from either the raw_input() or input() function and the end of file is reached.\', \'Raised when trying to access a local variable in a function or method but no value has been assigned to it.\', \'Raised when an operation or function is attempted that is invalid for the specified data type.\', \'Raised when an abstract method that needs to be implemented in an inherited class is not actually implemented.\', \'An assertion is a sanity-check that you can turn on or turn off when you are done with your testing of the program.\', \'Assertions are carried out by the assert statement, the newest keyword to Python, introduced in version 1.5.\', \"The else-block is a good place for code that does not need the try: block\'s protection.\", \'This example opens a file, writes content in the, file and comes out gracefully because there is no problem at all −\', \'This example tries to open a file where you do not have the write permission, so it raises an exception −\', \'You can also use the same except statement to handle multiple exceptions as follows −\', \'If you do not have permission to open the file in writing mode, then this will produce the following result −\', \'Python also allows you to create your own exceptions by deriving classes from the standard built-in exceptions.\', \'So once you have defined the above class, you can raise the exception as follows −\']','[\'Python provides two very important features to handle any unexpected error in your Python programs and to add debugging capabilities in them −\', \'Exception Handling − This would be covered in this tutorial. Here is a list standard Exceptions available in Python − Standard Exceptions.\', \'Raised when an input/ output operation fails, such as the print statement or the open() function when trying to open a file that does not exist.\', \'Raised when the interpreter finds an internal problem, but when this error is encountered the Python interpreter does not exit.\', \'Raised when Python interpreter is quit by using the sys.exit() function. If not handled in the code, causes the interpreter to exit.\', \'Raised when the built-in function for a data type has the valid type of arguments, but the arguments have invalid values specified.\', \'The easiest way to think of an assertion is to liken it to a raise-if statement (or to be more accurate, a raise-if-not statement). An expression is tested, and if the result comes up false, an exception is raised.\', \'Programmers often place assertions at the start of a function to check for valid input, and after a function call to check for valid output.\', \'When it encounters an assert statement, Python evaluates the accompanying expression, which is hopefully true. If the expression is false, Python raises an AssertionError exception.\', \'If the assertion fails, Python uses ArgumentExpression as the argument for the AssertionError. AssertionError exceptions can be caught and handled like any other exception, using the try-except statement. If they are not handled, they will terminate the program and produce a traceback.\', \'Here is a function that converts a given temperature from degrees Kelvin to degrees Fahrenheit. Since 0° K is as cold as it gets, the function bails out if it sees a negative temperature −\', \"An exception is an event, which occurs during the execution of a program that disrupts the normal flow of the program\'s instructions. In general, when a Python script encounters a situation that it cannot cope with, it raises an exception. An exception is a Python object that represents an error.\", \'When a Python script raises an exception, it must either handle the exception immediately otherwise it terminates and quits.\', \'If you have some suspicious code that may raise an exception, you can defend your program by placing the suspicious code in a try: block. After the try: block, include an except: statement, followed by a block of code which handles the problem as elegantly as possible.\', \'A single try statement can have multiple except statements. This is useful when the try block contains statements that may throw different types of exceptions.\', \'After the except clause(s), you can include an else-clause. The code in the else-block executes if the code in the try: block does not raise an exception.\', \'This kind of a try-except statement catches all the exceptions that occur. Using this kind of try-except statement is not considered a good programming practice though, because it catches all exceptions but does not make the programmer identify the root cause of the problem that may occur.\', \'You can use a finally: block along with a try: block. The finally: block is a place to put any code that must execute, whether the try-block raised an exception or not. The syntax of the try-finally statement is this −\', \'Note − You can provide except clause(s), or a finally clause, but not both. You cannot use else clause as well along with a finally clause.\', \'When an exception is thrown in the try block, the execution immediately passes to the finally block. After all the statements in the finally block are executed, the exception is raised again and is handled in the except statements if present in the next higher layer of the try-except statement.\', \"An exception can have an argument, which is a value that gives additional information about the problem. The contents  of the argument vary by exception. You capture an exception\'s argument by supplying a variable in the except clause as follows −\", \'If you write the code to handle a single exception, you can have a variable follow the name of the exception in the except statement. If you are trapping multiple exceptions, you can have a variable follow the tuple of the exception.\', \'This variable receives the value of the exception mostly containing the cause of the exception. The variable can receive a single value or multiple values in the form of a tuple. This tuple usually contains the error string, the error number, and an error location.\', \'You can raise exceptions in several ways by using the raise statement. The general syntax for the raise statement is as follows −\', \'Here, Exception is the type of exception (for example, NameError) and argument is a value for the exception argument. The argument is optional; if not supplied, the exception argument is None.\', \'The final argument, traceback, is also optional (and rarely used in practice), and if present, is the traceback object used for the exception.\', \'An exception can be a string, a class or an object. Most of the exceptions that the Python core raises are classes, with an argument that is an instance of the class. Defining new exceptions is quite easy and can be done as follows −\', \'Note − In order to catch an exception, an \"except\" clause must refer to the same exception thrown either as a class object or a simple string. For example, to capture the above exception, we must write the except clause as follows −\', \'Here is an example related to RuntimeError. Here, a class is created that is subclassed from RuntimeError. This is useful when you need to display more specific information when an exception is caught.\', \'In the try block, the user-defined exception is raised and caught in the except block. The variable e is used to create an instance of the class Networkerror.\']','[\'\nassert Expression[, Arguments]\n\', \'\n#!/usr/bin/python3\n\ndef KelvinToFahrenheit(Temperature):\n   assert (Temperature >= 0),\"Colder than absolute zero!\"\n   return ((Temperature-273)*1.8)+32\n\nprint (KelvinToFahrenheit(273))\nprint (int(KelvinToFahrenheit(505.78)))\nprint (KelvinToFahrenheit(-5))\n\', \'\n32.0\n451\nTraceback (most recent call last):\nFile \"test.py\", line 9, in <module>\nprint KelvinToFahrenheit(-5)\nFile \"test.py\", line 4, in KelvinToFahrenheit\nassert (Temperature >= 0),\"Colder than absolute zero!\"\nAssertionError: Colder than absolute zero!\n\', \'\ntry:\n   You do your operations here\n   ......................\nexcept ExceptionI:\n   If there is ExceptionI, then execute this block.\nexcept ExceptionII:\n   If there is ExceptionII, then execute this block.\n   ......................\nelse:\n   If there is no exception then execute this block. \n\', \'\n#!/usr/bin/python3\n\ntry:\n   fh = open(\"testfile\", \"w\")\n   fh.write(\"This is my test file for exception handling!!\")\nexcept IOError:\n   print (\"Error: can\\\'t find file or read data\")\nelse:\n   print (\"Written content in the file successfully\")\n   fh.close()\n\', \'\nWritten content in the file successfully\n\', \'\n#!/usr/bin/python3\n\ntry:\n   fh = open(\"testfile\", \"r\")\n   fh.write(\"This is my test file for exception handling!!\")\nexcept IOError:\n   print (\"Error: can\\\'t find file or read data\")\nelse:\n   print (\"Written content in the file successfully\")\n\', \"\nError: can\'t find file or read data\n\", \'\ntry:\n   You do your operations here\n   ......................\nexcept:\n   If there is any exception, then execute this block.\n   ......................\nelse:\n   If there is no exception then execute this block. \n\', \'\ntry:\n   You do your operations here\n   ......................\nexcept(Exception1[, Exception2[,...ExceptionN]]]):\n   If there is any exception from the given exception list, \n   then execute this block.\n   ......................\nelse:\n   If there is no exception then execute this block. \n\', \'\ntry:\n   You do your operations here;\n   ......................\n   Due to any exception, this may be skipped.\nfinally:\n   This would always be executed.\n   ......................\n\', \'\n#!/usr/bin/python3\n\ntry:\n   fh = open(\"testfile\", \"w\")\n   fh.write(\"This is my test file for exception handling!!\")\nfinally:\n   print (\"Error: can\\\'t find file or read data\")\n   fh.close()\n\', \"\nError: can\'t find file or read data\n\", \'\n#!/usr/bin/python3\n\ntry:\n   fh = open(\"testfile\", \"w\")\n   try:\n      fh.write(\"This is my test file for exception handling!!\")\n   finally:\n      print (\"Going to close the file\")\n      fh.close()\nexcept IOError:\n   print (\"Error: can\\\'t find file or read data\")\n\', \'\nGoing to close the file\n\', \'\ntry:\n   You do your operations here\n   ......................\nexcept ExceptionType as Argument:\n   You can print value of Argument here...\n\', \'\n#!/usr/bin/python3\n\n# Define a function here.\ndef temp_convert(var):\n   try:\n      return int(var)\n   except ValueError as Argument:\n      print (\"The argument does not contain numbers\\n\", Argument)\n\n# Call above function here.\ntemp_convert(\"xyz\")\n\', \"\nThe argument does not contain numbers\ninvalid literal for int() with base 10: \'xyz\'\n\", \'\nraise [Exception [, args [, traceback]]]\n\', \'\ndef functionName( level ):\n   if level <1:\n      raise Exception(level)\n      # The code below to this would not be executed\n      # if we raise the exception\n   return level\n\', \'\ntry:\n   Business Logic here...\nexcept Exception as e:\n   Exception handling here using e.args...\nelse:\n   Rest of the code here...\n\', \'\n#!/usr/bin/python3\n\ndef functionName( level ):\n   if level <1:\n      raise Exception(level)\n      # The code below to this would not be executed\n      # if we raise the exception\n   return level\n\ntry:\n   l = functionName(-10)\n   print (\"level = \",l)\nexcept Exception as e:\n   print (\"error in level argument\",e.args[0])\n\', \'\nerror in level argument -10\n\', \'\nclass Networkerror(RuntimeError):\n   def __init__(self, arg):\n      self.args = arg\n\', \'\ntry:\n   raise Networkerror(\"Bad hostname\")\nexcept Networkerror,e:\n   print e.args\n\']','[\'\nassert Expression[, Arguments]\n\', \'\n32.0\n451\nTraceback (most recent call last):\nFile \"test.py\", line 9, in <module>\nprint KelvinToFahrenheit(-5)\nFile \"test.py\", line 4, in KelvinToFahrenheit\nassert (Temperature >= 0),\"Colder than absolute zero!\"\nAssertionError: Colder than absolute zero!\n\', \'\nWritten content in the file successfully\n\', \"\nError: can\'t find file or read data\n\", \"\nError: can\'t find file or read data\n\", \'\nGoing to close the file\n\', \"\nThe argument does not contain numbers\ninvalid literal for int() with base 10: \'xyz\'\n\", \'\nraise [Exception [, args [, traceback]]]\n\', \'\nerror in level argument -10\n\']','[\'Sr.No.|||Exception Name & Description&&&1|||Exception|||Base class for all exceptions&&&2|||StopIteration|||Raised when the next() method of an iterator does not point to any object.&&&3|||SystemExit|||Raised by the sys.exit() function.&&&4|||StandardError|||Base class for all built-in exceptions except StopIteration and SystemExit.&&&5|||ArithmeticError|||Base class for all errors that occur for numeric calculation.&&&6|||OverflowError|||Raised when a calculation exceeds maximum limit for a numeric type.&&&7|||FloatingPointError|||Raised when a floating point calculation fails.&&&8|||ZeroDivisonError|||Raised when division or modulo by zero takes place for all numeric types.&&&9|||AssertionError|||Raised in case of failure of the Assert statement.&&&10|||AttributeError|||Raised in case of failure of attribute reference or assignment.&&&11|||EOFError|||Raised when there is no input from either the raw_input() or input() function and the end of file is reached.&&&12|||ImportError|||Raised when an import statement fails.&&&13|||KeyboardInterrupt|||Raised when the user interrupts program execution, usually by pressing Ctrl+c.&&&14|||LookupError|||Base class for all lookup errors.&&&15|||IndexError|||Raised when an index is not found in a sequence.&&&16|||KeyError|||Raised when the specified key is not found in the dictionary.&&&17|||NameError|||Raised when an identifier is not found in the local or global namespace.&&&18|||UnboundLocalError|||Raised when trying to access a local variable in a function or method but no value has been assigned to it.&&&19|||EnvironmentError|||Base class for all exceptions that occur outside the Python environment.&&&20|||IOError|||Raised when an input/ output operation fails, such as the print statement or the open() function when trying to open a file that does not exist.&&&21|||OSError|||Raised for operating system-related errors.&&&22|||SyntaxError|||Raised when there is an error in Python syntax.&&&23|||IndentationError|||Raised when indentation is not specified properly.&&&24|||SystemError|||Raised when the interpreter finds an internal problem, but when this error is encountered the Python interpreter does not exit.&&&25|||SystemExit|||Raised when Python interpreter is quit by using the sys.exit() function. If not handled in the code, causes the interpreter to exit.&&&26|||TypeError|||Raised when an operation or function is attempted that is invalid for the specified data type.&&&27|||ValueError|||Raised when the built-in function for a data type has the valid type of arguments, but the arguments have invalid values specified.&&&28|||RuntimeError|||Raised when a generated error does not fall into any category.&&&29|||NotImplementedError|||Raised when an abstract method that needs to be implemented in an inherited class is not actually implemented.\']','[\"Exception Handling − This would be covered in this tutorial. Here is a list standard Exceptions available in Python − Standard Exceptions.|||Assertions − This would be covered in Assertions in Python 3 tutorial.|||The easiest way to think of an assertion is to liken it to a raise-if statement (or to be more accurate, a raise-if-not statement). An expression is tested, and if the result comes up false, an exception is raised.|||Assertions are carried out by the assert statement, the newest keyword to Python, introduced in version 1.5.|||Programmers often place assertions at the start of a function to check for valid input, and after a function call to check for valid output.|||A single try statement can have multiple except statements. This is useful when the try block contains statements that may throw different types of exceptions.|||You can also provide a generic except clause, which handles any exception.|||After the except clause(s), you can include an else-clause. The code in the else-block executes if the code in the try: block does not raise an exception.|||The else-block is a good place for code that does not need the try: block\'s protection.|||\"]'),(19,'[\'Python 3 - Object Oriented\']','[\'Overview of OOP Terminology\', \'Creating Classes\', \'Creating Instance Objects\', \'Accessing Attributes\', \'Built-In Class Attributes\', \'Destroying Objects (Garbage Collection)\', \'Class Inheritance\', \'Overriding Methods\', \'Base Overloading Methods\', \'Overloading Operators\', \'Data Hiding\', \'Useful Video Courses\']','[\'Example\', \'Example\', \'Syntax\', \'Example\', \'Example\', \'Example\', \'Example\']','[\'https://www.tutorialspoint.com/python3/python_exceptions.htm\', \'https://www.tutorialspoint.com/python3/python_reg_expressions.htm\', \'http://tpcg.io/vWFIez\', \'http://tpcg.io/YzU4mJ\', \'http://tpcg.io/IQRoOS\', \'http://tpcg.io/WygN4z\', \'http://tpcg.io/fPAqko\', \'http://tpcg.io/ShqzOr\', \'http://tpcg.io/e2b3LI\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_exceptions.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_reg_expressions.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'Instantiation − The creation of an instance of a class.\', \'Method  − A special kind of function that is defined in a class definition.\', \'Following is an example of a simple Python class −\', \'Now, putting all  the concepts together −\', \'When the above code is  executed, it produces the following result −\', \'You can add, remove, or modify attributes of classes and objects at any time −\', \'The getattr(obj, name[, default]) − to access the attribute of object.\', \'The hasattr(obj,name) − to check if an attribute exists or not.\', \'The delattr(obj, name) − to delete an attribute.\', \"__dict__ − Dictionary containing the class\'s namespace.\", \'__doc__ − Class documentation string or none, if undefined. \', \'For the above class let us try to access all these attributes −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\', \'Constructor (with any optional arguments)\', \'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\']','[\'However, here is a small introduction of Object-Oriented Programming (OOP) to help you −\', \'Data member − A class variable or instance variable that holds data associated with a class and its objects.\', \'Instance variable − A variable that is defined inside a method and belongs only to the current instance of a class.\', \'Inheritance − The transfer of the characteristics of a class to other classes that are derived from it.\', \'Operator overloading − The assignment of more than one function to a particular operator.\', \'The class has a documentation string, which can be accessed via ClassName.__doc__.\', \'The class_suite consists of all the component statements defining class members, data attributes and functions.\', \'Instead of using the normal statements to access attributes, you can use the following functions −\', \'The setattr(obj,name,value) − to set an attribute. If attribute does not exist, then it would be created.\', \'__module__ − Module name in which the class is defined. This attribute is \"__main__\" in interactive mode. \', \'This __del__() destructor prints the class name of an instance that is about to be destroyed −\', \'In a similar way, you can drive a class from multiple parent classes as follows −\', \'You can use issubclass() or isinstance() functions to check a relationships of two classes and instances.\', \'The following table lists some generic functionality that you can override in your own classes −\']','[\"Python has been an object-oriented language since the time it existed. Due to this, creating and using classes and objects are downright easy. This chapter helps you become an expert in using Python\'s object-oriented programming support.\", \'If you do not have any previous experience with object-oriented (OO) programming, you may want to consult an introductory course on it or at least a tutorial of some sort so that you have a grasp of the basic concepts.\', \'Class − A user-defined prototype for an object that defines a set of attributes that characterize any object of the class. The attributes are data members (class variables and instance variables) and methods, accessed via dot notation.\', \"Class variable − A variable that is shared by all instances of a class. Class variables are defined within a class but outside any of the class\'s methods. Class variables are not used as frequently as instance variables are.\", \'Function overloading − The assignment of more than one behavior to a particular function. The operation performed varies by the types of objects or arguments involved.\', \'Instance −  An individual object of a certain class. An object obj that belongs to a class Circle, for example, is an instance of the class Circle.\', \'Object − A unique instance of a data structure that is defined by its class. An object comprises both data members (class variables and instance variables) and methods.\', \'The class statement creates a new class definition. The name of the class immediately follows the keyword class followed by a colon as follows −\', \'The variable empCount is a class variable whose value is shared among all the instances of a in this class. This can be accessed as Employee.empCount from inside the class or outside the class.\', \'The first method __init__() is a special method, which is called class constructor or initialization method that Python calls when you create a new instance of this class.\', \'You declare other class methods like normal functions with the exception that the first argument to each method is self. Python adds the self argument to the list for you; you do not need to include it when you call the methods.\', \'To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.\', \"You access the object\'s attributes using the dot operator with object. Class variable would be accessed using class name as follows −\", \'Every Python class keeps following built-in attributes and they can be accessed using dot operator like any other attribute −\', \'__bases__ − A possibly empty tuple containing the base classes, in the order of their occurrence in the base class list.\', \'Python deletes unneeded objects (built-in types or class instances) automatically to free the memory space. The process by which Python periodically reclaims blocks of memory that no longer are in use is termed as Garbage Collection.\', \"Python\'s garbage collector runs during program execution and is triggered when an object\'s reference count reaches zero. An object\'s reference count changes as the number of aliases that point to it changes.\", \"An object\'s reference count increases when it is assigned a new name or placed in a container (list, tuple, or dictionary). The object\'s reference count decreases when it is deleted with del, its reference is reassigned, or its reference goes out of scope. When an object\'s reference count reaches zero, Python collects it automatically.\", \'You normally will not notice when the garbage collector destroys an orphaned instance and reclaims its space. However, a class can implement the special method __del__(), called a destructor, that is invoked when the instance is about to be destroyed. This method might be used to clean up any non-memory resources used by an instance.\', \'Note − Ideally, you should define your classes in a separate file, then you should import them in your main program file using import statement.\', \'In the above example, assuming definition of a Point class is contained in point.py and there is no other executable code in it.\', \'Instead of starting from a scratch, you can create a class by deriving it from a pre-existing class by listing the parent class in parentheses after the new class name.\', \'The child class inherits the attributes of its parent class, and you can use those attributes as if they were defined in the child class. A child class can also override data members and methods from the parent.\', \'Derived classes are declared much like their parent class; however, a list of base classes to inherit from is given after the class name −\', \'The issubclass(sub, sup) boolean function returns True, if the given subclass sub is indeed a subclass of the superclass sup.\', \'The isinstance(obj, Class) boolean function returns True, if obj is an instance of class Class or is an instance of a subclass of Class\', \"You can always override your parent class methods. One reason for overriding parent\'s methods is that you may want special or different functionality in your subclass.\", \'Suppose you have created a Vector class to represent two-dimensional vectors. What happens when you use the plus operator to add them? Most likely Python will yell at you.\', \'You could, however, define the __add__ method in your class to perform vector addition and then the plus operator would behave as per expectation −\', \"An object\'s attributes may or may not be visible outside the class definition. You need to name attributes with a double underscore prefix, and those attributes then will not be directly visible to outsiders.\", \'Python protects those members by internally changing the name to include the class name. You can access such attributes as object._className__attrName. If you would replace your last line as following, then it works for you −\']','[\"\nclass ClassName:\n   \'Optional class documentation string\'\n   class_suite\n\", \'\nclass Employee:\n   \'Common base class for all employees\'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print (\"Total Employee %d\" % Employee.empCount)\n\n   def displayEmployee(self):\n      print (\"Name : \", self.name,  \", Salary: \", self.salary)\n\', \'\nThis would create first object of Employee class\nemp1 = Employee(\"Zara\", 2000)\nThis would create second object of Employee class\nemp2 = Employee(\"Manni\", 5000)\n\', \'\nemp1.displayEmployee()\nemp2.displayEmployee()\nprint (\"Total Employee %d\" % Employee.empCount)\n\', \'\n#!/usr/bin/python3\n\nclass Employee:\n   \'Common base class for all employees\'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print (\"Total Employee %d\" % Employee.empCount)\n\n   def displayEmployee(self):\n      print (\"Name : \", self.name,  \", Salary: \", self.salary)\n\n\n#This would create first object of Employee class\"\nemp1 = Employee(\"Zara\", 2000)\n#This would create second object of Employee class\"\nemp2 = Employee(\"Manni\", 5000)\nemp1.displayEmployee()\nemp2.displayEmployee()\nprint (\"Total Employee %d\" % Employee.empCount)\n\', \'\nName :  Zara ,Salary:  2000\nName :  Manni ,Salary:  5000\nTotal Employee 2\n\', \"\nemp1.salary = 7000  # Add an \'salary\' attribute.\nemp1.name = \'xyz\'  # Modify \'age\' attribute.\ndel emp1.salary  # Delete \'age\' attribute.\n\", \"\nhasattr(emp1, \'salary\')    # Returns true if \'salary\' attribute exists\ngetattr(emp1, \'salary\')    # Returns value of \'salary\' attribute\nsetattr(emp1, \'salary\', 7000) # Set attribute \'salary\' at 7000\ndelattr(emp1, \'salary\')    # Delete attribute \'salary\'\n\", \'\n#!/usr/bin/python3\n\nclass Employee:\n   \'Common base class for all employees\'\n   empCount = 0\n\n   def __init__(self, name, salary):\n      self.name = name\n      self.salary = salary\n      Employee.empCount += 1\n   \n   def displayCount(self):\n     print (\"Total Employee %d\" % Employee.empCount)\n\n   def displayEmployee(self):\n      print (\"Name : \", self.name,  \", Salary: \", self.salary)\n\nemp1 = Employee(\"Zara\", 2000)\nemp2 = Employee(\"Manni\", 5000)\nprint (\"Employee.__doc__:\", Employee.__doc__)\nprint (\"Employee.__name__:\", Employee.__name__)\nprint (\"Employee.__module__:\", Employee.__module__)\nprint (\"Employee.__bases__:\", Employee.__bases__)\nprint (\"Employee.__dict__:\", Employee.__dict__ )\n\', \"\nEmployee.__doc__: Common base class for all employees\nEmployee.__name__: Employee\nEmployee.__module__: __main__\nEmployee.__bases__: (<class \'object\'>,)\nEmployee.__dict__: {\n   \'displayCount\': <function Employee.displayCount at 0x0160D2B8>, \n   \'__module__\': \'__main__\', \'__doc__\': \'Common base class for all employees\', \n   \'empCount\': 2, \'__init__\': \n   <function Employee.__init__ at 0x0124F810>, \'displayEmployee\': \n   <function Employee.displayEmployee at 0x0160D300>,\n   \'__weakref__\': \n   <attribute \'__weakref__\' of \'Employee\' objects>, \'__dict__\': \n   <attribute \'__dict__\' of \'Employee\' objects>\n}\n\", \'\na = 40      # Create object <40>\nb = a       # Increase ref. count  of <40> \nc = [b]     # Increase ref. count  of <40> \n\ndel a       # Decrease ref. count  of <40>\nb = 100     # Decrease ref. count  of <40> \nc[0] = -1   # Decrease ref. count  of <40> \n\', \'\n#!/usr/bin/python3\n\nclass Point:\n   def __init__( self, x=0, y=0):\n      self.x = x\n      self.y = y\n   def __del__(self):\n      class_name = self.__class__.__name__\n      print (class_name, \"destroyed\")\n\npt1 = Point()\npt2 = pt1\npt3 = pt1\nprint (id(pt1), id(pt2), id(pt3))   # prints the ids of the obejcts\ndel pt1\ndel pt2\ndel pt3\n\', \'\n140338326963984 140338326963984 140338326963984\nPoint destroyed\n\', \'\n#!/usr/bin/python3\nimport point\n\np1 = point.Point()\n\', \"\nclass SubClassName (ParentClass1[, ParentClass2, ...]):\n   \'Optional class documentation string\'\n   class_suite\n\", \'\n#!/usr/bin/python3\n\nclass Parent:        # define parent class\n   parentAttr = 100\n   def __init__(self):\n      print (\"Calling parent constructor\")\n\n   def parentMethod(self):\n      print (\'Calling parent method\')\n\n   def setAttr(self, attr):\n      Parent.parentAttr = attr\n\n   def getAttr(self):\n      print (\"Parent attribute :\", Parent.parentAttr)\n\nclass Child(Parent): # define child class\n   def __init__(self):\n      print (\"Calling child constructor\")\n\n   def childMethod(self):\n      print (\'Calling child method\')\n\nc = Child()          # instance of child\nc.childMethod()      # child calls its method\nc.parentMethod()     # calls parent\'s method\nc.setAttr(200)       # again call parent\'s method\nc.getAttr()          # again call parent\'s method\n\', \'\nCalling child constructor\nCalling child method\nCalling parent method\nParent attribute : 200\n\', \'\nclass A:        # define your class A\n.....\n\nclass B:         # define your calss B\n.....\n\nclass C(A, B):   # subclass of A and B\n.....\n\', \"\n#!/usr/bin/python3\n\nclass Parent:        # define parent class\n   def myMethod(self):\n      print (\'Calling parent method\')\n\nclass Child(Parent): # define child class\n   def myMethod(self):\n      print (\'Calling child method\')\n\nc = Child()          # instance of child\nc.myMethod()         # child calls overridden method\n\", \'\nCalling child method\n\', \"\n#!/usr/bin/python3\n\nclass Vector:\n   def __init__(self, a, b):\n      self.a = a\n      self.b = b\n\n   def __str__(self):\n      return \'Vector (%d, %d)\' % (self.a, self.b)\n   \n   def __add__(self,other):\n      return Vector(self.a + other.a, self.b + other.b)\n\nv1 = Vector(2,10)\nv2 = Vector(5,-2)\nprint (v1 + v2)\n\", \'\nVector(7,8)\n\', \'\n#!/usr/bin/python3\n\nclass JustCounter:\n   __secretCount = 0\n  \n   def count(self):\n      self.__secretCount += 1\n      print (self.__secretCount)\n\ncounter = JustCounter()\ncounter.count()\ncounter.count()\nprint (counter.__secretCount)\n\', \'\n1\n2\nTraceback (most recent call last):\n   File \"test.py\", line 12, in <module>\n      print counter.__secretCount\nAttributeError: JustCounter instance has no attribute \'__secretCount\'\n\', \'\n.........................\nprint (counter._JustCounter__secretCount)\n\', \'\n1\n2\n2\n\']','[\'\nName :  Zara ,Salary:  2000\nName :  Manni ,Salary:  5000\nTotal Employee 2\n\', \"\nemp1.salary = 7000  # Add an \'salary\' attribute.\nemp1.name = \'xyz\'  # Modify \'age\' attribute.\ndel emp1.salary  # Delete \'age\' attribute.\n\", \"\nEmployee.__doc__: Common base class for all employees\nEmployee.__name__: Employee\nEmployee.__module__: __main__\nEmployee.__bases__: (<class \'object\'>,)\nEmployee.__dict__: {\n   \'displayCount\': <function Employee.displayCount at 0x0160D2B8>, \n   \'__module__\': \'__main__\', \'__doc__\': \'Common base class for all employees\', \n   \'empCount\': 2, \'__init__\': \n   <function Employee.__init__ at 0x0124F810>, \'displayEmployee\': \n   <function Employee.displayEmployee at 0x0160D300>,\n   \'__weakref__\': \n   <attribute \'__weakref__\' of \'Employee\' objects>, \'__dict__\': \n   <attribute \'__dict__\' of \'Employee\' objects>\n}\n\", \'\n140338326963984 140338326963984 140338326963984\nPoint destroyed\n\', \'\nCalling child constructor\nCalling child method\nCalling parent method\nParent attribute : 200\n\', \'\nCalling child method\n\', \'\nVector(7,8)\n\', \'\n1\n2\nTraceback (most recent call last):\n   File \"test.py\", line 12, in <module>\n      print counter.__secretCount\nAttributeError: JustCounter instance has no attribute \'__secretCount\'\n\', \'\n1\n2\n2\n\']','[\'Sr.No.|||Method, Description & Sample Call&&&1|||__init__ ( self [,args...] )|||Constructor (with any optional arguments)|||Sample Call : obj = className(args)&&&2|||__del__( self )|||Destructor, deletes an object|||Sample Call : del obj&&&3|||__repr__( self )|||Evaluatable string representation|||Sample Call : repr(obj)&&&4|||__str__( self )|||Printable string representation|||Sample Call : str(obj)&&&5|||__cmp__ ( self, x )|||Object comparison|||Sample Call : cmp(obj, x)\']','[\'Class − A user-defined prototype for an object that defines a set of attributes that characterize any object of the class. The attributes are data members (class variables and instance variables) and methods, accessed via dot notation.|||Class variable − A variable that is shared by all instances of a class. Class variables are defined within a class but outside any of the class\'s methods. Class variables are not used as frequently as instance variables are.|||Data member − A class variable or instance variable that holds data associated with a class and its objects.|||Function overloading − The assignment of more than one behavior to a particular function. The operation performed varies by the types of objects or arguments involved.|||Instance variable − A variable that is defined inside a method and belongs only to the current instance of a class.|||Inheritance − The transfer of the characteristics of a class to other classes that are derived from it.|||Instance −  An individual object of a certain class. An object obj that belongs to a class Circle, for example, is an instance of the class Circle.|||Instantiation − The creation of an instance of a class.|||Method  − A special kind of function that is defined in a class definition.|||Object − A unique instance of a data structure that is defined by its class. An object comprises both data members (class variables and instance variables) and methods.|||Operator overloading − The assignment of more than one function to a particular operator.|||The class has a documentation string, which can be accessed via ClassName.__doc__.|||The class_suite consists of all the component statements defining class members, data attributes and functions.|||The variable empCount is a class variable whose value is shared among all the instances of a in this class. This can be accessed as Employee.empCount from inside the class or outside the class.|||The first method __init__() is a special method, which is called class constructor or initialization method that Python calls when you create a new instance of this class.|||You declare other class methods like normal functions with the exception that the first argument to each method is self. Python adds the self argument to the list for you; you do not need to include it when you call the methods.|||The getattr(obj, name[, default]) − to access the attribute of object.|||The hasattr(obj,name) − to check if an attribute exists or not.|||The setattr(obj,name,value) − to set an attribute. If attribute does not exist, then it would be created.|||The delattr(obj, name) − to delete an attribute.|||__dict__ − Dictionary containing the class\'s namespace.|||__doc__ − Class documentation string or none, if undefined. |||__name__ − Class name. |||__module__ − Module name in which the class is defined. This attribute is \"__main__\" in interactive mode. |||__bases__ − A possibly empty tuple containing the base classes, in the order of their occurrence in the base class list.|||The issubclass(sub, sup) boolean function returns True, if the given subclass sub is indeed a subclass of the superclass sup.|||The isinstance(obj, Class) boolean function returns True, if obj is an instance of class Class or is an instance of a subclass of Class|||\']'),(20,'[\'Python 3 - Regular Expressions\']','[\'The match Function\', \'The search Function\', \'Matching Versus Searching\', \'Search and Replace\', \'Regular Expression Modifiers: Option Flags\', \'Regular Expression Patterns\', \'Regular Expression Examples\', \'Character classes\', \'Special Character Classes\', \'Repetition Cases\', \'Nongreedy repetition\', \'Grouping with Parentheses\', \'Backreferences\', \'Alternatives\', \'Anchors\', \'Special Syntax with Parentheses\', \'Useful Video Courses\']','[\'Basic patterns that match single chars\', \'Compilation flags\', \'Example\', \'Example\', \'Example\', \'Syntax\', \'Example\', \'Literal characters\']','[\'https://www.tutorialspoint.com/python3/python_classes_objects.htm\', \'https://www.tutorialspoint.com/python3/python_cgi_programming.htm\', \'http://tpcg.io/qdhjSh\', \'http://tpcg.io/whH8IF\', \'http://tpcg.io/bQalTd\', \'http://tpcg.io/O89PGM\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_classes_objects.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_cgi_programming.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'ordinary characters just match themselves exactly.\', \"matches any single character except newline \'\\n\'\", \'matches a \"word\" character: a letter or digit or underbar [a-zA-Z0-9_].\', \'matches a single whitespace character -- space, newline, return, tab\', \'matches any non-whitespace character.\', \'inhibit the \"specialness\" of a character.\', \'Make, match any character, including newlines\', \'Multi-line matching, affecting ^ and $\', \'Enable verbose REs, which can be organized more cleanly and understandably\', \'This function attempts to match RE pattern to string with optional flags.\', \'Here is the syntax for this function −\', \'Here is the description of the parameters −\', \'This is the regular expression to be matched.\', \'This method returns entire match (or specific subgroup num)\', \'When the above code is  executed, it produces the following result −\', \'Here is the syntax for this function −\', \'Here is the description of the parameters −\', \'This is the regular expression to be matched.\', \'This method returns entire match (or specific subgroup num)\', \'When the above code is  executed, it produces the following result −\', \'When the above code is  executed, it produces the following result −\', \'One of the most important re methods that use regular expressions is sub.\', \'When the above code is  executed, it produces the following result −\', \'Makes a period (dot) match any character, including a newline.\', \'Matches any single character in brackets.\', \'Matches any single character not in brackets\', \'Matches 0 or more occurrences of preceding expression.\', \'Matches 1 or more occurrence of preceding expression.\', \'Matches 0 or 1 occurrence of preceding expression.\', \'Matches exactly n number of occurrences of preceding expression.\', \'Matches n or more occurrences of preceding expression.\', \'Matches at least n and at most m occurrences of preceding expression.\', \'Groups regular expressions and remembers matched text.\', \'Groups regular expressions without remembering matched text.\', \'Temporarily toggles on i, m, or x options within parentheses.\', \'Temporarily toggles off i, m, or x options within parentheses.\', \'Specifies position using a pattern. Does not have a range.\', \'Specifies position using pattern negation. Does not have a range.\', \'Matches independent pattern without backtracking.\', \'Matches whitespace. Equivalent to [\\t\\n\\r\\f].\', \'Matches digits. Equivalent to [0-9].\', \'Matches end of string. If a newline exists, it matches just before newline.\', \'Matches point where last match finished.\', \'Matches newlines, carriage returns, tabs, etc.\', \'Match any digit; same as [0123456789]\', \'Match anything other than a lowercase vowel\', \'Match a whitespace character: [ \\t\\r\\n\\f]\', \'Match a single word character: [A-Za-z0-9_]\', \'Match a nonword character: [^A-Za-z0-9_]\', \'Match \"rub\" or \"ruby\": the y is optional\', \'This matches the smallest number of repetitions −\', \'Greedy repetition: matches \"<python>perl>\"\', \'Nongreedy: matches \"<python>\" in \"<python>perl>\"\', \'Match \"Python\", \"Python, python, python\", etc.\', \'This matches a previously matched group again −\', \'\"Python\" followed by one or more ! or one ?\', \'This needs to specify match position.\', \'Match \"Python\" at the start of a string or internal line\', \'Match \"Python\" at the end of a string or line\', \'Match \"Python\" at the start of a string\', \'Match \"Python\" at the end of a string\', \'\\B is nonword boundary: match \"rub\" in \"rube\" and \"ruby\" but not alone\', \'Match \"Python\", if followed by an exclamation point.\', \'Match \"Python\", if not followed by an exclamation point.\', \'Matches \"R\". All the rest is a comment\', \'Case-insensitive while matching \"uby\"\', \'Group only without creating \\1 backreference\']','[\'Makes several escapes like \\w, \\b, \\s and \\d match only on ASCII characters with the respective   property.\', \'This is the string, which would be searched to match the pattern at the beginning of string.\', \'You can specify different flags using bitwise OR (|). These are modifiers, which are listed in the table below.\', \"This method returns all matching subgroups in a tuple (empty if there weren\'t any)\", \'This function searches for first occurrence of RE pattern within string with optional flags.\', \'This is the string, which would be searched to match the pattern anywhere in the string.\', \'You can specify different flags using bitwise OR (|). These are modifiers, which are listed in the table below.\', \"This method returns all matching subgroups in a tuple (empty if there weren\'t any)\", \'Interprets letters according to the Unicode character set. This flag affects the behavior of \\w, \\W, \\b, \\B.\', \'The following table lists the regular expression syntax that is available in Python −\', \'Matches any single character except newline. Using m option allows it to match newline as well.\', \'Temporarily toggles on i, m, or x options within a regular expression. If in parentheses, only that area is affected.\', \'Temporarily toggles off i, m, or x options within a regular expression. If in parentheses, only that area is affected.\', \'Matches word boundaries when outside brackets. Matches backspace (0x08) when inside brackets.\']','[\'A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern. Regular expressions are widely used in UNIX world.\', \'The module re provides full support for Perl-like regular expressions in Python. The re module raises the exception re.error if an error occurs while compiling or using a regular expression.\', \"We would cover two important functions, which would be used to handle regular expressions. Nevertheless, a small thing first: There are various characters, which would have special meaning when they are used in regular expression. To avoid any confusion while dealing with regular expressions, we would use Raw Strings as r\'expression\'.\", \'Compilation flags let you modify some aspects of how regular expressions work. Flags are available in the re module under two names, a long name such as IGNORECASE and a short, one-letter form such as I.\', \'The re.match function returns a match object on success, None on failure. We usegroup(num) or groups() function of match object to get matched expression.\', \'The re.search function returns a match object on success, none on failure. We use group(num)  or groups()  function of match object to get the matched expression.\', \'Python offers two different primitive operations based on regular expressions: match checks for a match only at the beginning of the string, while search checks for a match anywhere in the string (this is what Perl does by default).\', \'This method replaces all occurrences of the RE pattern in string with repl, substituting all occurrences unless max is provided. This method returns modified string.\', \'Regular expression literals may include an optional modifier to control various aspects of matching. The modifiers are specified as an optional flag. You can provide multiple modifiers using exclusive OR (|), as shown previously and may be represented by one of these −\', \'Interprets words according to the current locale. This interpretation affects the alphabetic group (\\w and \\W), as well as word boundary behavior (\\b and \\B).\', \'Makes $ match the end of a line (not just the end of the string) and makes ^ match the start of any line (not just the start of the string).\', \'Permits \"cuter\" regular expression syntax. It ignores whitespace (except inside a set [] or when escaped by a backslash) and treats unescaped # as a comment marker.\', \'Except for the control characters, (+ ? . * ^ $ ( ) [ ] { } | \\), all characters match themselves. You can escape a control character by preceding it with a backslash.\', \'Matches nth grouped subexpression if it matched already. Otherwise refers to the octal representation of a character code.\', \'Single or double-quoted string. \\1 matches whatever the 1st group matched. \\2 matches whatever the 2nd group matched, etc.\']','[\'\nre.match(pattern, string, flags = 0)\n\', \'\n#!/usr/bin/python3\nimport re\n\nline = \"Cats are smarter than dogs\"\n\nmatchObj = re.match( r\'(.*) are (.*?) .*\', line, re.M|re.I)\n\nif matchObj:\n   print (\"matchObj.group() : \", matchObj.group())\n   print (\"matchObj.group(1) : \", matchObj.group(1))\n   print (\"matchObj.group(2) : \", matchObj.group(2))\nelse:\n   print (\"No match!!\")\n\', \'\nmatchObj.group() :  Cats are smarter than dogs\nmatchObj.group(1) :  Cats\nmatchObj.group(2) :  smarter\n\', \'\nre.search(pattern, string, flags = 0)\n\', \'\n#!/usr/bin/python3\nimport re\n\nline = \"Cats are smarter than dogs\";\n\nsearchObj = re.search( r\'(.*) are (.*?) .*\', line, re.M|re.I)\n\nif searchObj:\n   print (\"searchObj.group() : \", searchObj.group())\n   print (\"searchObj.group(1) : \", searchObj.group(1))\n   print (\"searchObj.group(2) : \", searchObj.group(2))\nelse:\n   print (\"Nothing found!!\")\n\', \'\nmatchObj.group() :  Cats are smarter than dogs\nmatchObj.group(1) :  Cats\nmatchObj.group(2) :  smarter\n\', \'\n#!/usr/bin/python3\nimport re\n\nline = \"Cats are smarter than dogs\";\n\nmatchObj = re.match( r\'dogs\', line, re.M|re.I)\nif matchObj:\n   print (\"match --> matchObj.group() : \", matchObj.group())\nelse:\n   print (\"No match!!\")\n\nsearchObj = re.search( r\'dogs\', line, re.M|re.I)\nif searchObj:\n   print (\"search --> searchObj.group() : \", searchObj.group())\nelse:\n   print (\"Nothing found!!\")\n\', \'\nNo match!!\nsearch --> matchObj.group() :  dogs\n\', \'\nre.sub(pattern, repl, string, max=0)\n\', \'\n#!/usr/bin/python3\nimport re\n\nphone = \"2004-959-559 # This is Phone Number\"\n\n# Delete Python-style comments\nnum = re.sub(r\'#.*$\', \"\", phone)\nprint (\"Phone Num : \", num)\n\n# Remove anything other than digits\nnum = re.sub(r\'\\D\', \"\", phone)    \nprint (\"Phone Num : \", num)\n\', \'\nPhone Num :  2004-959-559\nPhone Num :  2004959559\n\']','[\'\nre.match(pattern, string, flags = 0)\n\', \'\nmatchObj.group() :  Cats are smarter than dogs\nmatchObj.group(1) :  Cats\nmatchObj.group(2) :  smarter\n\', \'\nmatchObj.group() :  Cats are smarter than dogs\nmatchObj.group(1) :  Cats\nmatchObj.group(2) :  smarter\n\', \'\nNo match!!\nsearch --> matchObj.group() :  dogs\n\', \'\nre.sub(pattern, repl, string, max=0)\n\', \'\nPhone Num :  2004-959-559\nPhone Num :  2004959559\n\']','[\'Sr.No.|||Expression & Matches&&&1|||a, X, 9, <|||ordinary characters just match themselves exactly.|||&&&2|||. (a period)|||matches any single character except newline \'\\n\'|||&&&3|||\\w|||matches a \"word\" character: a letter or digit or underbar [a-zA-Z0-9_].|||&&&4|||\\W|||matches any non-word character.|||&&&5|||\\b|||boundary between word and non-word|||&&&6|||\\s|||matches a single whitespace character -- space, newline, return, tab|||&&&7|||\\S|||matches any non-whitespace character.|||&&&8|||\\t, \\n, \\r|||tab, newline, return|||&&&9|||\\d|||decimal digit [0-9]|||&&&10|||^|||matches start of the string|||&&&11|||$|||match the end of the string|||&&&12|||\\|||inhibit the \"specialness\" of a character.|||\', \'Sr.No.|||Flag & Meaning&&&1|||ASCII, A|||Makes several escapes like \\w, \\b, \\s and \\d match only on ASCII characters with the respective   property.&&&2|||DOTALL, S|||Make, match any character, including newlines&&&3|||IGNORECASE, I|||Do case-insensitive matches&&&4|||LOCALE, L|||Do a locale-aware match&&&5|||MULTILINE, M|||Multi-line matching, affecting ^ and $&&&6|||VERBOSE, X (for ‘extended’)|||Enable verbose REs, which can be organized more cleanly and understandably\', \'Sr.No.|||Parameter & Description&&&1|||pattern|||This is the regular expression to be matched.&&&2|||string|||This is the string, which would be searched to match the pattern at the beginning of string.&&&3|||flags|||You can specify different flags using bitwise OR (|). These are modifiers, which are listed in the table below.\', \"Sr.No.|||Match Object Method & Description&&&1|||group(num = 0)|||This method returns entire match (or specific subgroup num)&&&2|||groups()|||This method returns all matching subgroups in a tuple (empty if there weren\'t any)\", \'Sr.No.|||Parameter & Description&&&1|||pattern|||This is the regular expression to be matched.&&&2|||string|||This is the string, which would be searched to match the pattern anywhere in the string.&&&3|||flags|||You can specify different flags using bitwise OR (|). These are modifiers, which are listed in the table below.\', \"Sr.No.|||Match Object Method & Description&&&1|||group(num = 0)|||This method returns entire match (or specific subgroup num)&&&2|||groups()|||This method returns all matching subgroups in a tuple (empty if there weren\'t any)\", \'Sr.No.|||Modifier & Description&&&1|||re.I|||Performs case-insensitive matching.&&&2|||re.L|||Interprets words according to the current locale. This interpretation affects the alphabetic group (\\w and \\W), as well as word boundary behavior (\\b and \\B).&&&3|||re.M|||Makes $ match the end of a line (not just the end of the string) and makes ^ match the start of any line (not just the start of the string).&&&4|||re.S|||Makes a period (dot) match any character, including a newline.&&&5|||re.U|||Interprets letters according to the Unicode character set. This flag affects the behavior of \\w, \\W, \\b, \\B.&&&6|||re.X|||Permits \"cuter\" regular expression syntax. It ignores whitespace (except inside a set [] or when escaped by a backslash) and treats unescaped # as a comment marker.\', \'Sr.No.|||Parameter & Description&&&1|||^|||Matches beginning of line.&&&2|||$|||Matches end of line.&&&3|||.|||Matches any single character except newline. Using m option allows it to match newline as well.&&&4|||[...]|||Matches any single character in brackets.&&&5|||[^...]|||Matches any single character not in brackets&&&6|||re*|||Matches 0 or more occurrences of preceding expression.&&&7|||re+|||Matches 1 or more occurrence of preceding expression.&&&8|||re?|||Matches 0 or 1 occurrence of preceding expression.&&&9|||re{ n}|||Matches exactly n number of occurrences of preceding expression.&&&10|||re{ n,}|||Matches n or more occurrences of preceding expression.&&&11|||re{ n, m}|||Matches at least n and at most m occurrences of preceding expression.&&&12|||a|b|||Matches either a or b.&&&13|||(re)|||Groups regular expressions and remembers matched text.&&&14|||(?imx)|||Temporarily toggles on i, m, or x options within a regular expression. If in parentheses, only that area is affected.&&&15|||(?-imx)|||Temporarily toggles off i, m, or x options within a regular expression. If in parentheses, only that area is affected.&&&16|||(?: re)|||Groups regular expressions without remembering matched text.&&&17|||(?imx: re)|||Temporarily toggles on i, m, or x options within parentheses.&&&18|||(?-imx: re)|||Temporarily toggles off i, m, or x options within parentheses.&&&19|||(?#...)|||Comment.&&&20|||(?= re)|||Specifies position using a pattern. Does not have a range.&&&21|||(?! re)|||Specifies position using pattern negation. Does not have a range.&&&22|||(?> re)|||Matches independent pattern without backtracking.&&&23|||\\w|||Matches word characters.&&&24|||\\W|||Matches nonword characters.&&&25|||\\s|||Matches whitespace. Equivalent to [\\t\\n\\r\\f].&&&26|||\\S|||Matches nonwhitespace.&&&27|||\\d|||Matches digits. Equivalent to [0-9].&&&28|||\\D|||Matches nondigits.&&&29|||\\A|||Matches beginning of string.&&&30|||\\Z|||Matches end of string. If a newline exists, it matches just before newline.&&&31|||\\z|||Matches end of string.&&&32|||\\G|||Matches point where last match finished.&&&33|||\\b|||Matches word boundaries when outside brackets. Matches backspace (0x08) when inside brackets.&&&34|||\\B|||Matches non-word boundaries.&&&35|||\\n, \\t, etc.|||Matches newlines, carriage returns, tabs, etc.&&&36|||\\1...\\9|||Matches nth grouped subexpression.&&&37|||\\10|||Matches nth grouped subexpression if it matched already. Otherwise refers to the octal representation of a character code.\', \'Sr.No.|||Example & Description&&&1|||python|||Match \"python\".\', \'Sr.No.|||Example & Description&&&1|||[Pp]ython|||Match \"Python\" or \"python\"&&&2|||rub[ye]|||Match \"ruby\" or \"rube\"&&&3|||[aeiou]|||Match any one lowercase vowel&&&4|||[0-9]|||Match any digit; same as [0123456789]&&&5|||[a-z]|||Match any lowercase ASCII letter&&&6|||[A-Z]|||Match any uppercase ASCII letter&&&7|||[a-zA-Z0-9]|||Match any of the above&&&8|||[^aeiou]|||Match anything other than a lowercase vowel&&&9|||[^0-9]|||Match anything other than a digit\', \'Sr.No.|||Example & Description&&&1|||.|||Match any character except newline&&&2|||\\d|||Match a digit: [0-9]&&&3|||\\D|||Match a nondigit: [^0-9]&&&4|||\\s|||Match a whitespace character: [ \\t\\r\\n\\f]&&&5|||\\S|||Match nonwhitespace: [^ \\t\\r\\n\\f]&&&6|||\\w|||Match a single word character: [A-Za-z0-9_]&&&7|||\\W|||Match a nonword character: [^A-Za-z0-9_]\', \'Sr.No.|||Example & Description&&&1|||ruby?|||Match \"rub\" or \"ruby\": the y is optional&&&2|||ruby*|||Match \"rub\" plus 0 or more ys&&&3|||ruby+|||Match \"rub\" plus 1 or more ys&&&4|||\\d{3}|||Match exactly 3 digits&&&5|||\\d{3,}|||Match 3 or more digits&&&6|||\\d{3,5}|||Match 3, 4, or 5 digits\', \'Sr.No.|||Example & Description&&&1|||<.*>|||Greedy repetition: matches \"<python>perl>\"&&&2|||<.*?>|||Nongreedy: matches \"<python>\" in \"<python>perl>\"\', \'Sr.No.|||Example & Description&&&1|||\\D\\d+|||No group: + repeats \\d&&&2|||(\\D\\d)+|||Grouped: + repeats \\D\\d pair&&&3|||([Pp]ython(,)?)+|||Match \"Python\", \"Python, python, python\", etc.\', \'Sr.No.|||Example & Description&&&1|||([Pp])ython&\\1ails|||Match python&pails or Python&Pails&&&2|||([\'\"])[^\\1]*\\1|||Single or double-quoted string. \\1 matches whatever the 1st group matched. \\2 matches whatever the 2nd group matched, etc.\', \'Sr.No.|||Example & Description&&&1|||python|perl|||Match \"python\" or \"perl\"&&&2|||rub(y|le)|||Match \"ruby\" or \"ruble\"&&&3|||Python(!+|\\?)|||\"Python\" followed by one or more ! or one ?\', \'Sr.No.|||Example & Description&&&1|||^Python|||Match \"Python\" at the start of a string or internal line&&&2|||Python$|||Match \"Python\" at the end of a string or line&&&3|||\\APython|||Match \"Python\" at the start of a string&&&4|||Python\\Z|||Match \"Python\" at the end of a string&&&5|||\\bPython\\b|||Match \"Python\" at a word boundary&&&6|||\\brub\\B|||\\B is nonword boundary: match \"rub\" in \"rube\" and \"ruby\" but not alone&&&7|||Python(?=!)|||Match \"Python\", if followed by an exclamation point.&&&8|||Python(?!!)|||Match \"Python\", if not followed by an exclamation point.\', \'Sr.No.|||Example & Description&&&1|||R(?#comment)|||Matches \"R\". All the rest is a comment&&&2|||R(?i)uby|||Case-insensitive while matching \"uby\"&&&3|||R(?i:uby)|||Same as above&&&4|||rub(?:y|le))|||Group only without creating \\1 backreference\']','[]'),(21,'[\'Python 3 - CGI Programming\']','[\'What is CGI?\', \'Web Browsing\', \'CGI Architecture Diagram\', \'Web Server Support and Configuration\', \'First CGI Program\', \'Hello Word! This is my first CGI program\', \'HTTP Header\', \'CGI Environment Variables\', \'GET and POST Methods\', \'Passing Information using GET method\', \'Simple URL Example:Get Method\', \'Hello ZARA ALI\', \'Simple FORM Example:GET Method\', \'Passing Information Using POST Method\', \'Passing Checkbox Data to CGI Program\', \'Passing Radio Button Data to CGI Program\', \'Passing Text Area Data to CGI Program\', \'Passing Drop Down Box Data to CGI Program\', \'Using Cookies in CGI\', \'How It Works?\', \'Setting up Cookies\', \'Retrieving Cookies\', \'File Upload Example\', \'How To Raise a \"File Download\" Dialog Box?\', \'Useful Video Courses\']','[]','[\'https://www.tutorialspoint.com/python3/python_reg_expressions.htm\', \'https://www.tutorialspoint.com/python3/python_database_access.htm\', \'https://www.tutorialspoint.com/cgi-bin/hello.py\', \'http://tpcg.io/A8eYTd\', \'http://www.tutorialspoint.com/cgi-bin/get_env.py\', \'http://tpcg.io/2otJ04\', \'https://www.tutorialspoint.com/cgi-bin/hello_get.py?first_name=ZARA&last_name=ALI\', \'https://www.tutorialspoint.com/about/contact_us.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_reg_expressions.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_database_access.htm\']','[\'https://www.tutorialspoint.com/python3/images/cgiarch.gif\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'The current version is CGI/1.1 and CGI/1.2 is under progress.\', \'The date of last modification of the resource.\', \'Set the cookie passed through the string\', \'The length of the query information. It is available only for POST requests.\', \'Returns the set cookies in the form of key & value pair.\', \'The URL-encoded information that is sent with GET method request.\', \'The method used to make the request. The most common methods are GET and POST.\', \'The name and version of the software the server is running.\', \'This would generate the following result −\', \'Below is same hello_get.py script which handles GET as well as POST method.\', \'Checkboxes are used when more than one option is required to be selected.\', \'Here is example HTML code for a form with two checkboxes −\', \'The result of this code is the following form −\', \'Radio Buttons are used when only one option is required to be selected.\', \'Here is example HTML code for a form with two radio buttons −\', \'The result of this code is the following form −\', \'Here is example HTML code for a form with a TEXTAREA box −\', \'The result of this code is the following form −\', \'Below is textarea.cgi script to handle input given by web browser −\', \'Here is example HTML code for a form with one drop down box −\', \'The result of this code is the following form −\', \'Below is dropdown.py script to handle input given by web browser.\', \'Cookies are a plain text data record of 5 variable-length fields −\', \'Domain − The domain name of your site.\', \'Here is an example of how to retrieve cookies.\', \'This produces the following result for the cookies set by above script −\', \'The result of this code is the following form −\', \'Here is the script save_file.py to handle file upload −\']','[\'Your browser contacts the HTTP web server and demands for the URL, i.e., filename.\', \'Web browser takes response from web server and displays either the received file or error message.\', \'Note − First line in the script must be path to Python executable. In Linux it should be #!/usr/bin/python3\', \'There are few other important HTTP headers, which you will use frequently in your CGI Programming.\', \'A MIME string defining the format of the file being returned. Example is Content-type:text/html\', \'The URL that is returned instead of the URL requested. You can use this field to redirect a request to any file.\', \'The data type of the content. Used when the client is sending attached content to the server. For example, file upload.\', \'The IP address of the remote host making the request. This is useful logging or for authentication.\', \'Here is small CGI program to list out all the CGI variables. Click this link to see the result Get Environment\', \'Never use GET method if you have password or other sensitive information to pass to the server.\', \'The GET method has size limtation: only 1024 characters can be sent in a request string.\', \'Here is a simple URL, which passes two values to hello_get.py program using GET method.\', \'Below is checkbox.cgi script to handle input given by web browser for checkbox button.\', \'Below is radiobutton.py script to handle input given by web browser for radio button −\', \'TEXTAREA element is used when multiline text has to be passed to the CGI Program.\', \'Drop Down Box is used when we have many options available but only one or two will be selected.\', \'Expires − The date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.\', \'Name = Value − Cookies are set and retrieved in the form of key and value pairs.\', \'From this example, you must have understood how to set cookies. We use Set-Cookie HTTP header to set cookies.\', \'For example, if you want make a FileName file downloadable from a given link, then its syntax is as follows −\', \'Hope you enjoyed this tutorial. If yes, please send me your feedback at: Contact Us\']','[\'The Common Gateway Interface, or CGI, is a set of standards that define how information is exchanged between the web server and a custom script. The CGI specs are currently maintained by the NCSA.\', \'The Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.\', \'To understand the concept of CGI, let us see what happens when we click a hyper link to browse a particular web page or URL.\', \'Web Server parses the URL and looks for the filename. If it finds that file then sends it back to the browser, otherwise sends an error message indicating that you requested a wrong file.\', \'However, it is possible to set up the HTTP server so that whenever a file in a certain directory is requested that file is not sent back; instead it is executed as a program, and whatever that program outputs is sent back for your browser to display. This function is called the Common Gateway Interface or CGI and the programs are called CGI scripts. These CGI programs can be a Python Script, PERL Script, Shell Script, C or C++ program, etc.\', \'Before you proceed with CGI Programming, make sure that your Web Server supports CGI and it is configured to handle CGI Programs. All the CGI Programs to be executed by the HTTP server are kept in a pre-configured directory. This directory is called CGI Directory and by convention it is named as /var/www/cgi-bin. By convention, CGI files have extension as. cgi, but you can keep your files with python extension .py as well.\', \'By default, the Linux server is configured to run only the scripts in the cgi-bin directory in /var/www. If you want to specify any other directory to run your CGI scripts, comment the following lines in the httpd.conf file −\', \'Here, we assume that you have Web Server up and running successfully and you are able to run any other CGI program like Perl or Shell, etc.\', \'Here is a simple link, which is linked to a CGI script called hello.py. This file is kept in /var/www/cgi-bin directory and it has following content. Before running your CGI program, make sure you have change mode of file using chmod 755 hello.py UNIX command to make file executable.\', \'This hello.py script is a simple Python script, which writes its output on STDOUT file, i.e., screen. There is one important and extra feature available which is first line to be printed Content-type:text/html\\r\\n\\r\\n. This line is sent back to the browser and it specifies the content type to be displayed on the browser screen.\', \'By now you must have understood basic concept of CGI and you can write many complicated CGI programs using Python. This script can interact with any other external system also to exchange information such as RDBMS.\', \'The line Content-type:text/html\\r\\n\\r\\n is part of HTTP header which is sent to the browser to understand the content. All the HTTP header will be in the following form −\', \'The date the information becomes invalid. It is used by the browser to decide when a page needs to be refreshed. A valid date string is in the format 01 Jan 1998 12:00:00 GMT.\', \'The length, in bytes, of the data being returned. The browser uses this value to report the estimated download time for a file.\', \'All the CGI programs have access to the following environment variables. These variables play an important role while writing any CGI program.\', \'The User-Agent request-header field contains information about the user agent originating the request. It is name of the web browser.\', \'The fully qualified name of the host making the request. If this information is not available, then REMOTE_ADDR can be used to get IR address.\', \'You must have come across many situations when you need to pass some information from your browser to web server and ultimately to your CGI Program. Most frequently, browser uses two methods two pass this information to web server. These methods are GET Method and POST Method.\', \'The GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? character as follows −\', \"The GET method is the default method to pass information from the browser to the web server and it produces a long string that appears in your browser\'s Location:box.\", \'The GET method sends information using QUERY_STRING header and will be accessible in your CGI Program through QUERY_STRING environment variable.\', \'You can pass information by simply concatenating key and value pairs along with any URL or you can use HTML <FORM> tags to pass information using GET method.\', \'Below is hello_get.py script to handle input given by web browser. We are going to use cgi module, which makes it very easy to access passed information −\', \'This example passes two values using HTML FORM and submit button. We use same CGI script hello_get.py to handle this input.\', \'Here is the actual output of the above form, you enter First and Last Name and then click submit button to see the result.\', \'A generally more reliable method of passing information to a CGI program is the POST method. This packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message. This message comes into the CGI script in the form of the standard input.\', \'Let us take again same example as above which passes two values using HTML FORM and submit button. We use same CGI script hello_get.py to handle this input.\', \'Here is the actual output of the above form. You enter First and Last Name and then click submit button to see the result.\', \"HTTP protocol is a stateless protocol. For a commercial website, it is required to maintain session information  among different pages. For example, one user registration ends after completing many pages. How to maintain user\'s session information across all the web pages?\", \'In many situations, using cookies is the most efficient method of remembering and tracking preferences, purchases, commissions, and other information required for better visitor experience or site statistics.\', \"Your server sends some data to the visitor\'s browser in the form of a cookie. The browser may accept the cookie. If it does, it is stored as a plain text record on the visitor\'s hard drive. Now, when the visitor arrives at another page on your site, the cookie is available for retrieval. Once retrieved, your server knows/remembers what was stored.\", \'Path − The path to the directory or web page that sets the cookie. This may be blank if you want to retrieve the cookie from any directory or page.\', \'Secure − If this field contains the word \"secure\", then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.\', \'It is very easy to send cookies to browser. These cookies are sent along with HTTP Header before to Content-type field. Assuming you want to set UserID and Password as cookies. Setting the cookies is done as follows −\', \'It is optional to set cookies attributes like Expires, Domain, and Path. It is notable that cookies are set before sending magic line \"Content-type:text/html\\r\\n\\r\\n.\', \'It is very easy to retrieve all the set cookies. Cookies are stored in CGI environment variable HTTP_COOKIE and they will have following form −\', \'To upload a file, the HTML form must have the enctype attribute set to multipart/form-data. The input tag with the file type creates a \"Browse\" button.\', \'Above example has been disabled intentionally to save people uploading file on our server, but you can try above code with your server.\', \'If you run the above script on Unix/Linux, then you need to take care of replacing  file separator as follows, otherwise on your windows machine above open() statement should work fine.\', \'Sometimes, it is desired that you want to give option where a user can click a link and it will pop up a \"File Download\" dialogue box to the user instead of displaying actual content. This is very easy and can be achieved through HTTP header. This HTTP header is be different from the header mentioned in previous section.\']','[\'\n<Directory \"/var/www/cgi-bin\">\n   AllowOverride None\n   Options ExecCGI\n   Order allow,deny\n   Allow from all\n</Directory>\n\n<Directory \"/var/www/cgi-bin\">\nOptions All\n</Directory>\n\', \'\n#!/usr/bin/python\n\nprint (\"Content-type:text/html\\r\\n\\r\\n\")\nprint (\'<html>\')\nprint (\'<head>\')\nprint (\'<title>Hello Word - First CGI Program</title>\')\nprint (\'</head>\')\nprint (\'<body>\')\nprint (\'<h2>Hello Word! This is my first CGI program</h2>\')\nprint (\'</body>\')\nprint (\'</html>\')\n\', \'\nhttp://localhost:8080/cgi-bin/hello.py\n\', \'\nHello Word! This is my first CGI program\n\', \'\nHTTP Field Name: Field Content\n\nFor Example\nContent-type: text/html\\r\\n\\r\\n\n\', \'\n#!/usr/bin/python\n\nimport os\n\nprint (\"Content-type: text/html\\r\\n\\r\\n\");\nprint (\"<font size=+1>Environment</font><\\br>\");\nfor param in os.environ.keys():\n   print (\"<b>%20s</b>: %s<\\br>\" % (param, os.environ[param]))\n\', \'\nhttp://www.test.com/cgi-bin/hello.py?key1=value1&key2=value2\n\', \'\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nfirst_name = form.getvalue(\'first_name\')\nlast_name  = form.getvalue(\'last_name\')\n\nprint (\"Content-type:text/html\\r\\n\\r\\n\")\nprint (\"<html>\")\nprint (\"<head>\")\nprint (\"<title>Hello - Second CGI Program</title>\")\nprint (\"</head>\")\nprint (\"<body>\")\nprint (\"<h2>Hello %s %s</h2>\" % (first_name, last_name))\nprint (\"</body>\")\nprint (\"</html>\")\n\', \'\nHello ZARA ALI\n\', \'\n<form action = \"/cgi-bin/hello_get.py\" method = \"get\">\n   First Name: <input type = \"text\" name = \"first_name\">  <br />\n\n   Last Name: <input type = \"text\" name = \"last_name\" />\n   <input type = \"submit\" value = \"Submit\" />\n</form>\n\', \'\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nfirst_name = form.getvalue(\'first_name\')\nlast_name  = form.getvalue(\'last_name\')\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\"\nprint \"<title>Hello - Second CGI Program</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2>Hello %s %s</h2>\" % (first_name, last_name)\nprint \"</body>\"\nprint \"</html>\"\n\', \'\n<form action = \"/cgi-bin/hello_get.py\" method = \"post\">\nFirst Name: <input type = \"text\" name = \"first_name\"><br />\nLast Name: <input type = \"text\" name = \"last_name\" />\n\n<input type = \"submit\" value = \"Submit\" />\n</form>\n\', \'\n<form action = \"/cgi-bin/checkbox.cgi\" method = \"POST\" target = \"_blank\">\n   <input type = \"checkbox\" name = \"maths\" value = \"on\" /> Maths\n   <input type = \"checkbox\" name = \"physics\" value = \"on\" /> Physics\n   <input type = \"submit\" value = \"Select Subject\" />\n</form>\n\', \'\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue(\'maths\'):\n   math_flag = \"ON\"\nelse:\n   math_flag = \"OFF\"\n\nif form.getvalue(\'physics\'):\n   physics_flag = \"ON\"\nelse:\n   physics_flag = \"OFF\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\"\nprint \"<title>Checkbox - Third CGI Program</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2> CheckBox Maths is : %s</h2>\" % math_flag\nprint \"<h2> CheckBox Physics is : %s</h2>\" % physics_flag\nprint \"</body>\"\nprint \"</html>\"\n\', \'\n<form action = \"/cgi-bin/radiobutton.py\" method = \"post\" target = \"_blank\">\n   <input type = \"radio\" name = \"subject\" value = \"maths\" /> Maths\n   <input type = \"radio\" name = \"subject\" value = \"physics\" /> Physics\n   <input type = \"submit\" value = \"Select Subject\" />\n</form>\n\', \'\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue(\'subject\'):\n   subject = form.getvalue(\'subject\')\nelse:\n   subject = \"Not set\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\"\nprint \"<title>Radio - Fourth CGI Program</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2> Selected Subject is %s</h2>\" % subject\nprint \"</body>\"\nprint \"</html>\"\n\', \'\n<form action = \"/cgi-bin/textarea.py\" method = \"post\" target = \"_blank\">\n   <textarea name = \"textcontent\" cols = \"40\" rows = \"4\">\n      Type your text here...\n   </textarea>\n   <input type = \"submit\" value = \"Submit\" />\n</form>\n\', \'\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue(\'textcontent\'):\n   text_content = form.getvalue(\'textcontent\')\nelse:\n   text_content = \"Not entered\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\";\nprint \"<title>Text Area - Fifth CGI Program</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2> Entered Text Content is %s</h2>\" % text_content\nprint \"</body>\"\n\', \'\n<form action = \"/cgi-bin/dropdown.py\" method = \"post\" target = \"_blank\">\n   <select name = \"dropdown\">\n      <option value = \"Maths\" selected>Maths</option>\n      <option value = \"Physics\">Physics</option>\n   </select>\n   <input type = \"submit\" value = \"Submit\"/>\n</form>\n\', \'\n#!/usr/bin/python\n\n# Import modules for CGI handling \nimport cgi, cgitb \n\n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n\n# Get data from fields\nif form.getvalue(\'dropdown\'):\n   subject = form.getvalue(\'dropdown\')\nelse:\n   subject = \"Not entered\"\n\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\"\nprint \"<title>Dropdown Box - Sixth CGI Program</title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2> Selected Subject is %s</h2>\" % subject\nprint \"</body>\"\nprint \"</html>\"\n\', \'\n#!/usr/bin/python\nprint \"Set-Cookie:UserID = XYZ;\\r\\n\"\nprint \"Set-Cookie:Password = XYZ123;\\r\\n\"\nprint \"Set-Cookie:Expires = Tuesday, 31-Dec-2007 23:12:40 GMT;\\r\\n\"\nprint \"Set-Cookie:Domain = www.tutorialspoint.com;\\r\\n\"\nprint \"Set-Cookie:Path = /perl;\\n\"\nprint \"Content-type:text/html\\r\\n\\r\\n\"\n...........Rest of the HTML Content....\n\', \'\nkey1 = value1;key2 = value2;key3 = value3....\n\', \'\n#!/usr/bin/python\n\n# Import modules for CGI handling \nfrom os import environ\nimport cgi, cgitb\n\nif environ.has_key(\'HTTP_COOKIE\'):\n   for cookie in map(strip, split(environ[\'HTTP_COOKIE\'], \';\')):\n      (key, value ) = split(cookie, \'=\');\n      if key == \"UserID\":\n         user_id = value\n\n      if key == \"Password\":\n         password = value\n\nprint \"User ID  = %s\" % user_id\nprint \"Password = %s\" % password\n\', \'\nUser ID = XYZ\nPassword = XYZ123\n\', \'\n<html>\n   <body>\n      <form enctype = \"multipart/form-data\" action = \"save_file.py\" method = \"post\">\n      <p>File: <input type = \"file\" name = \"filename\" /></p>\n      <p><input type = \"submit\" value = \"Upload\" /></p>\n      </form>\n   </body>\n</html>\n\', \'\n#!/usr/bin/python\n\nimport cgi, os\nimport cgitb; cgitb.enable()\n\nform = cgi.FieldStorage()\n\n# Get filename here.\nfileitem = form[\'filename\']\n\n# Test if the file was uploaded\nif fileitem.filename:\n   # strip leading path from file name to avoid \n   # directory traversal attacks\n   fn = os.path.basename(fileitem.filename)\n   open(\'/tmp/\' + fn, \'wb\').write(fileitem.file.read())\n\n   message = \'The file \"\' + fn + \'\" was uploaded successfully\'\n   \nelse:\n   message = \'No file was uploaded\'\n   \nprint \"\"\"\\\nContent-Type: text/html\\n\n<html>\n   <body>\n      <p>%s</p>\n   </body>\n</html>\n\"\"\" % (message,)\n\', \'\nfn = os.path.basename(fileitem.filename.replace(\"\\\\\", \"/\" ))\n\', \'\n#!/usr/bin/python\n\n# HTTP Header\nprint \"Content-Type:application/octet-stream; name = \\\"FileName\\\"\\r\\n\";\nprint \"Content-Disposition: attachment; filename = \\\"FileName\\\"\\r\\n\\n\";\n\n# Actual File Content will go here.\nfo = open(\"foo.txt\", \"rb\")\n\nstr = fo.read();\nprint str\n\n# Close opend file\nfo.close()\n\']','[\'\nhttp://localhost:8080/cgi-bin/hello.py\n\', \'\nHello Word! This is my first CGI program\n\', \'\nHTTP Field Name: Field Content\n\nFor Example\nContent-type: text/html\\r\\n\\r\\n\n\', \'\nhttp://www.test.com/cgi-bin/hello.py?key1=value1&key2=value2\n\', \'\nHello ZARA ALI\n\', \'\nkey1 = value1;key2 = value2;key3 = value3....\n\', \'\nUser ID = XYZ\nPassword = XYZ123\n\', \'\nfn = os.path.basename(fileitem.filename.replace(\"\\\\\", \"/\" ))\n\']','[\'Sr.No.|||Header & Description&&&1|||Content-type:|||A MIME string defining the format of the file being returned. Example is Content-type:text/html&&&2|||Expires: Date|||The date the information becomes invalid. It is used by the browser to decide when a page needs to be refreshed. A valid date string is in the format 01 Jan 1998 12:00:00 GMT.&&&3|||Location: URL|||The URL that is returned instead of the URL requested. You can use this field to redirect a request to any file.&&&4|||Last-modified: Date|||The date of last modification of the resource.&&&5|||Content-length: N|||The length, in bytes, of the data being returned. The browser uses this value to report the estimated download time for a file.&&&6|||Set-Cookie: String|||Set the cookie passed through the string\', \"Sr.No.|||Variable Name & Description&&&1|||CONTENT_TYPE|||The data type of the content. Used when the client is sending attached content to the server. For example, file upload.&&&2|||CONTENT_LENGTH|||The length of the query information. It is available only for POST requests.&&&3|||HTTP_COOKIE|||Returns the set cookies in the form of key & value pair.&&&4|||HTTP_USER_AGENT|||The User-Agent request-header field contains information about the user agent originating the request. It is name of the web browser.&&&5|||PATH_INFO|||The path for the CGI script.&&&6|||QUERY_STRING|||The URL-encoded information that is sent with GET method request.&&&7|||REMOTE_ADDR|||The IP address of the remote host making the request. This is useful logging or for authentication.&&&8|||REMOTE_HOST|||The fully qualified name of the host making the request. If this information is not available, then REMOTE_ADDR can be used to get IR address.&&&9|||REQUEST_METHOD|||The method used to make the request. The most common methods are GET and POST.&&&10|||SCRIPT_FILENAME|||The full path to the CGI script.&&&11|||SCRIPT_NAME|||The name of the CGI script.&&&12|||SERVER_NAME|||The server\'s hostname or IP Address&&&13|||SERVER_SOFTWARE|||The name and version of the software the server is running.\"]','[\'The Common Gateway Interface, or CGI, is a standard for external gateway programs to interface with information servers such as HTTP servers.|||The current version is CGI/1.1 and CGI/1.2 is under progress.|||Your browser contacts the HTTP web server and demands for the URL, i.e., filename.|||Web Server parses the URL and looks for the filename. If it finds that file then sends it back to the browser, otherwise sends an error message indicating that you requested a wrong file.|||Web browser takes response from web server and displays either the received file or error message.|||The GET method is the default method to pass information from the browser to the web server and it produces a long string that appears in your browser\'s Location:box.|||Never use GET method if you have password or other sensitive information to pass to the server.|||The GET method has size limtation: only 1024 characters can be sent in a request string.|||The GET method sends information using QUERY_STRING header and will be accessible in your CGI Program through QUERY_STRING environment variable.|||Expires − The date the cookie will expire. If this is blank, the cookie will expire when the visitor quits the browser.|||Domain − The domain name of your site.|||Path − The path to the directory or web page that sets the cookie. This may be blank if you want to retrieve the cookie from any directory or page.|||Secure − If this field contains the word \"secure\", then the cookie may only be retrieved with a secure server. If this field is blank, no such restriction exists.|||Name = Value − Cookies are set and retrieved in the form of key and value pairs.|||\']'),(22,'[\'Python 3 - MySQL Database Access\']','[\'What is PyMySQL ?\', \'How do I Install PyMySQL?\', \'Database Connection\', \'Creating Database Table\', \'INSERT Operation\', \'READ Operation\', \'Update Operation\', \'DELETE Operation\', \'Performing Transactions\', \'COMMIT Operation\', \'ROLLBACK Operation\', \'Disconnecting Database\', \'Handling Errors\', \'Useful Video Courses\']','[\'Example\', \'Example\', \'Example\', \'Example\', \'Example\', \'Output\', \'Example\', \'Example\', \'Example\']','[\'https://www.tutorialspoint.com/python3/python_cgi_programming.htm\', \'https://www.tutorialspoint.com/python3/python_networking.htm\', \'https://wiki.python.org/moin/DatabaseInterfaces\', \'http://www.pymysql.org/\', \'https://github.com/PyMySQL/PyMySQL\', \'https://www.tutorialspoint.com/mysql/index.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_cgi_programming.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_networking.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'The last stable release is available on PyPI and can be installed with pip −\', \'Note − Make sure you have root privilege to install the above module.\', \'Before connecting to a MySQL database, make sure of the following points −\', \'You have created a table EMPLOYEE in TESTDB.\', \'This table has fields FIRST_NAME, LAST_NAME, AGE, SEX and INCOME.\', \'User ID \"testuser\" and password \"test123\" are set to access TESTDB.\', \'Python module PyMySQL is installed properly on your machine.\', \'You have gone through MySQL tutorial to understand MySQL Basics.\', \'Following is an example of connecting with MySQL database \"TESTDB\" −\', \'While running this script, it produces the following result.\', \'Let us create a Database table EMPLOYEE −\', \'The above example can be written as follows to create SQL queries dynamically −\', \'This will produce the following result −\', \'Atomicity − Either a transaction completes or nothing happens at all.\', \'You already know how to implement transactions. Here is a similar example −\', \'Here is a simple example to call the commit method.\', \'Here is a simple example to call the rollback() method.\', \'To disconnect the Database connection, use the close() method.\', \'Used for non-fatal issues. Must subclass StandardError.\', \'Base class for errors. Must subclass StandardError.\', \'Used for errors in the database. Must subclass Error.\', \'Subclass of DatabaseError that refers to errors in the data.\']','[\'If it produces the following result, then it means MySQLdb module is not installed −\', \'The INSERT Operation is required when you want to create your records into a database table.\', \'The following example, executes SQL INSERT statement to create a record in the EMPLOYEE table −\', \'The following code segment is another form of execution where you can pass parameters directly −\', \'READ Operation on any database means to fetch some useful information from the database.\', \'rowcount − This is a read-only attribute and returns the number of rows that were affected by an execute() method.\', \'The following procedure queries all the records from EMPLOYEE table having salary more than 1000 −\', \'UPDATE Operation on any database means to update one or more records, which are already available in the database.\', \'Transactions are a mechanism that ensures data consistency. Transactions have the following four properties −\', \'Consistency − A transaction must start in a consistent state and leave the system in a consistent state.\', \'Isolation − Intermediate results of a transaction are not visible outside the current transaction.\', \'Durability − Once a transaction was committed, the effects are persistent, even after a system failure.\', \'The Python DB API 2.0 provides two methods to either commit or rollback a transaction.\', \'Used for errors in the database module, not the database itself. Must subclass Error.\', \'Subclass of DatabaseError that refers to trying to call unsupported functionality.\']','[\'The Python standard for database interfaces is the Python DB-API. Most Python database interfaces adhere to this standard.\', \'You can choose the right database for your application. Python Database API supports a wide range of database servers such as −\', \'Here is the list of available Python database interfaces − Python Database Interfaces and APIs. You must download a separate DB API module for each database you need to access. For example, if you need to access an Oracle database as well as a MySQL database, you must download both the Oracle and the MySQL database modules.\', \'The DB API provides a minimal standard for working with databases using Python structures and syntax wherever possible. This API includes the following −\', \'Python has an in-built support for SQLite. In this section, we would learn all the concepts using MySQL. MySQLdb module, a popular interface with MySQL is not compatible with Python 3. Instead, we shall use PyMySQL module.\', \'PyMySQL is an interface for connecting to a MySQL database server from Python. It implements the Python Database API v2.0 and contains a pure-Python MySQL client library. The goal of PyMySQL is to be a drop-in replacement for MySQLdb.\', \'Before proceeding further, you make sure you have PyMySQL installed on your machine. Just type the following in your Python script and execute it −\', \'Alternatively (e.g. if pip is not available), a tarball can be downloaded from GitHub and installed with Setuptools as follows −\', \'If a connection is established with the datasource, then a Connection Object is returned and saved into db for further use, otherwise db is set to None. Next, db object is used to create a cursor object, which in turn is used to execute SQL queries. Finally, before coming out, it ensures that the database connection is closed and resources are released.\', \'Once a database connection is established, we are ready to create tables or records into the database tables using execute method of the created cursor.\', \'Once the database connection is established, you are ready to make a query into this database. You can use either fetchone() method to fetch a single record or fetchall() method to fetch multiple values from a database table.\', \'fetchone() − It fetches the next row of a query result set. A result set is an object that is returned when a cursor object is used to query a table.\', \'fetchall() − It fetches all the rows in a result set. If some rows have already been extracted from the result set, then it retrievesthe remaining rows from the result set.\', \"The following procedure updates all the records having SEX as \'M\'. Here, we increase the AGE of all the males by one year.\", \'DELETE operation is required when you want to delete some records from your database. Following is the  procedure to delete all the records from EMPLOYEE where AGE is more than 20 −\', \'Commit is an operation, which gives a green signal to the database to finalize the changes, and after this operation, no change can be reverted back.\', \'If you are not satisfied with one or more of the changes and you want to revert back those changes completely, then use the rollback() method.\', \'If the connection to a database is closed by the user with the close() method, any outstanding transactions are rolled back by the DB. However, instead of depending on any of the DB lower level implementation details, your application would be better off calling commit or rollback explicitly.\', \'There are many sources of errors. A few examples are a syntax error in an executed SQL statement, a connection failure, or calling the fetch method for an already canceled or finished statement handle.\', \'The DB API defines a number of errors that must exist in each database module. The following table lists these exceptions.\', \'Subclass of DatabaseError that refers to errors such as the loss of a connection to the database. These errors are generally outside of the control of the Python scripter.\', \'Subclass of DatabaseError for situations that would damage the relational integrity, such as uniqueness constraints or foreign keys.\', \'Subclass of DatabaseError that refers to errors internal to the database module, such as a cursor no longer being active.\', \'Subclass of DatabaseError that refers to errors such as a bad table name and other things that can safely be blamed on you.\', \'Your Python scripts should handle these errors, but before using any of the above exceptions, make sure your MySQLdb has support for that exception. You can get more information about them by reading the DB API 2.0 specification.\']','[\'\n#!/usr/bin/python3\n\nimport pymysql\n\', \'\nTraceback (most recent call last):\n   File \"test.py\", line 3, in <module>\n      Import pymysql\nImportError: No module named pymysql\n\', \'\npip install pymysql\n\', \'\n$ # X.X is the desired pymysql version (e.g. 0.5 or 0.6).\n$ curl -L https://github.com/PyMySQL/PyMySQL/tarball/pymysql-X.X | tar xz\n$ cd PyMySQL*\n$ python setup.py install\n$ # The folder PyMySQL* can be safely removed now.\n\', \'\n#!/usr/bin/python3\n\nimport pymysql\n\n# Open database connection\ndb = pymysql.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# execute SQL query using execute() method.\ncursor.execute(\"SELECT VERSION()\")\n\n# Fetch a single row using fetchone() method.\ndata = cursor.fetchone()\nprint (\"Database version : %s \" % data)\n\n# disconnect from server\ndb.close()\n\', \'\nDatabase version : 5.5.20-log\n\', \'\n#!/usr/bin/python3\n\nimport pymysql\n\n# Open database connection\ndb = pymysql.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# Drop table if it already exist using execute() method.\ncursor.execute(\"DROP TABLE IF EXISTS EMPLOYEE\")\n\n# Create table as per requirement\nsql = \"\"\"CREATE TABLE EMPLOYEE (\n   FIRST_NAME  CHAR(20) NOT NULL,\n   LAST_NAME  CHAR(20),\n   AGE INT,  \n   SEX CHAR(1),\n   INCOME FLOAT )\"\"\"\n\ncursor.execute(sql)\n\n# disconnect from server\ndb.close()\n\', \'\n#!/usr/bin/python3\n\nimport pymysql\n\n# Open database connection\ndb = pymysql.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# Prepare SQL query to INSERT a record into the database.\nsql = \"\"\"INSERT INTO EMPLOYEE(FIRST_NAME,\n   LAST_NAME, AGE, SEX, INCOME)\n   VALUES (\'Mac\', \'Mohan\', 20, \'M\', 2000)\"\"\"\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Commit your changes in the database\n   db.commit()\nexcept:\n   # Rollback in case there is any error\n   db.rollback()\n\n# disconnect from server\ndb.close()\n\', \'\n#!/usr/bin/python3\n\nimport pymysql\n\n# Open database connection\ndb = pymysql.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# Prepare SQL query to INSERT a record into the database.\nsql = \"INSERT INTO EMPLOYEE(FIRST_NAME, \\\n   LAST_NAME, AGE, SEX, INCOME) \\\n   VALUES (\'%s\', \'%s\', \'%d\', \'%c\', \'%d\' )\" % \\\n   (\'Mac\', \'Mohan\', 20, \'M\', 2000)\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Commit your changes in the database\n   db.commit()\nexcept:\n   # Rollback in case there is any error\n   db.rollback()\n\n# disconnect from server\ndb.close()\n\', \'\n..................................\nuser_id = \"test123\"\npassword = \"password\"\n\ncon.execute(\'insert into Login values(\"%s\", \"%s\")\' % \\\n             (user_id, password))\n..................................\n\', \'\n#!/usr/bin/python3\n\nimport pymysql\n\n# Open database connection\ndb = pymysql.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# Prepare SQL query to INSERT a record into the database.\nsql = \"SELECT * FROM EMPLOYEE \\\n      WHERE INCOME > \'%d\'\" % (1000)\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Fetch all the rows in a list of lists.\n   results = cursor.fetchall()\n   for row in results:\n      fname = row[0]\n      lname = row[1]\n      age = row[2]\n      sex = row[3]\n      income = row[4]\n      # Now print fetched result\n      print (\"fname = %s,lname = %s,age = %d,sex = %s,income = %d\" % \\\n         (fname, lname, age, sex, income ))\nexcept:\n   print (\"Error: unable to fetch data\")\n\n# disconnect from server\ndb.close()\n\', \'\nfname = Mac, lname = Mohan, age = 20, sex = M, income = 2000\n\', \'\n#!/usr/bin/python3\n\nimport pymysql\n\n# Open database connection\ndb = pymysql.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# Prepare SQL query to UPDATE required records\nsql = \"UPDATE EMPLOYEE SET AGE = AGE + 1\n                          WHERE SEX = \'%c\'\" % (\'M\')\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Commit your changes in the database\n   db.commit()\nexcept:\n   # Rollback in case there is any error\n   db.rollback()\n\n# disconnect from server\ndb.close()\n\', \'\n#!/usr/bin/python3\n\nimport pymysql\n\n# Open database connection\ndb = pymysql.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# Prepare SQL query to DELETE required records\nsql = \"DELETE FROM EMPLOYEE WHERE AGE > \'%d\'\" % (20)\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Commit your changes in the database\n   db.commit()\nexcept:\n   # Rollback in case there is any error\n   db.rollback()\n\n# disconnect from server\ndb.close()\n\', \'\n# Prepare SQL query to DELETE required records\nsql = \"DELETE FROM EMPLOYEE WHERE AGE > \'%d\'\" % (20)\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Commit your changes in the database\n   db.commit()\nexcept:\n   # Rollback in case there is any error\n   db.rollback()\n\', \'\ndb.commit()\n\', \'\ndb.rollback()\n\', \'\ndb.close()\n\']','[\'\nTraceback (most recent call last):\n   File \"test.py\", line 3, in <module>\n      Import pymysql\nImportError: No module named pymysql\n\', \'\npip install pymysql\n\', \'\nDatabase version : 5.5.20-log\n\', \'\n..................................\nuser_id = \"test123\"\npassword = \"password\"\n\ncon.execute(\'insert into Login values(\"%s\", \"%s\")\' % \\\n             (user_id, password))\n..................................\n\', \'\nfname = Mac, lname = Mohan, age = 20, sex = M, income = 2000\n\', \'\ndb.commit()\n\', \'\ndb.rollback()\n\', \'\ndb.close()\n\']','[\'Sr.No.|||Exception & Description&&&1|||Warning|||Used for non-fatal issues. Must subclass StandardError.&&&2|||Error|||Base class for errors. Must subclass StandardError.&&&3|||InterfaceError|||Used for errors in the database module, not the database itself. Must subclass Error.&&&4|||DatabaseError|||Used for errors in the database. Must subclass Error.&&&5|||DataError|||Subclass of DatabaseError that refers to errors in the data.&&&6|||OperationalError|||Subclass of DatabaseError that refers to errors such as the loss of a connection to the database. These errors are generally outside of the control of the Python scripter.&&&7|||IntegrityError|||Subclass of DatabaseError for situations that would damage the relational integrity, such as uniqueness constraints or foreign keys.&&&8|||InternalError|||Subclass of DatabaseError that refers to errors internal to the database module, such as a cursor no longer being active.&&&9|||ProgrammingError|||Subclass of DatabaseError that refers to errors such as a bad table name and other things that can safely be blamed on you.&&&10|||NotSupportedError|||Subclass of DatabaseError that refers to trying to call unsupported functionality.\']','[\'GadFly|||mSQL|||MySQL|||PostgreSQL|||Microsoft SQL Server 2000|||Informix|||Interbase|||Oracle|||Sybase|||SQLite|||Importing the API module.|||Acquiring a connection with the database.|||Issuing SQL statements and stored procedures.|||Closing the connection|||You have created a database TESTDB.|||You have created a table EMPLOYEE in TESTDB.|||This table has fields FIRST_NAME, LAST_NAME, AGE, SEX and INCOME.|||User ID \"testuser\" and password \"test123\" are set to access TESTDB.|||Python module PyMySQL is installed properly on your machine.|||You have gone through MySQL tutorial to understand MySQL Basics.|||fetchone() − It fetches the next row of a query result set. A result set is an object that is returned when a cursor object is used to query a table.|||fetchall() − It fetches all the rows in a result set. If some rows have already been extracted from the result set, then it retrieves|||the remaining rows from the result set.|||rowcount − This is a read-only attribute and returns the number of rows that were affected by an execute() method.|||Atomicity − Either a transaction completes or nothing happens at all.|||Consistency − A transaction must start in a consistent state and leave the system in a consistent state.|||Isolation − Intermediate results of a transaction are not visible outside the current transaction.|||Durability − Once a transaction was committed, the effects are persistent, even after a system failure.|||\']'),(23,'[\'Python 3 - Network Programming\']','[\'What is Sockets?\', \'The socket Module\', \'Server Socket Methods\', \'Client Socket Methods\', \'General Socket Methods\', \'A Simple Server\', \'A Simple Client\', \'Python Internet Modules\', \'Further Readings\', \'Useful Video Courses\']','[\'Example\', \'Output\']','[\'https://www.tutorialspoint.com/python3/python_database_access.htm\', \'https://www.tutorialspoint.com/python3/python_sending_email.htm\', \'https://www.tutorialspoint.com/unix_sockets/index.htm\', \'http://docs.python.org/3.0/library/socket.html\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_database_access.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_sending_email.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'The identifier of a network interface −\', \'A string \"<broadcast>\", which specifies an INADDR_BROADCAST address.\', \'A zero-length string, which specifies INADDR_ANY, or\', \'An Integer, interpreted as a binary address in host byte order.\', \'Here is the description of the parameters −\', \'socket_family − This is either AF_UNIX or AF_INET, as explained earlier.\', \'socket_type − This is either SOCK_STREAM or SOCK_DGRAM.\', \'protocol − This is usually left out, defaulting to 0.\', \'This method binds address (hostname, port number pair) to socket.\', \'This method sets up and start TCP listener.\', \'This method actively initiates TCP server connection.\', \'This would produce following result −\']','[\'This chapter gives you an understanding on the most famous concept in Networking - Socket Programming.\', \'Typically zero, this may be used to identify a variant of a protocol within a domain and type.\', \'A string, which can be a host name, a dotted-quad address, or an IPV6 address in colon (and possibly dot) notation\', \'This passively accept TCP client connection, waiting until connection arrives (blocking).\', \'Now call the bind(hostname, port) function to specify a port for your service on the given host.\', \'Now run this server.py in the background and then run the above client.py to see the result.\', \'A list of some important modules in Python Network/Internet programming are given below −\', \'Please check all the libraries  mentioned above to work with FTP, SMTP, POP, and IMAP protocols.\']','[\'Python provides two levels of access to the network services. At a low level, you can access the basic socket support in the underlying operating system, which allows you to implement clients and servers for both connection-oriented and connectionless protocols.\', \'Python also has libraries that provide higher-level access to specific application-level network protocols, such as FTP, HTTP, and so on.\', \'Sockets are the endpoints of a bidirectional communications channel. Sockets may communicate within a process, between processes on the same machine, or between processes on different continents.\', \'Sockets may be implemented over a number of different channel types: Unix domain sockets, TCP, UDP, and so on. The socket library provides specific classes for handling the common transports as well as a generic interface for handling the rest.\', \'The family of protocols that is used as the transport mechanism. These values are constants such as AF_INET, PF_INET, PF_UNIX, PF_X25, and so on.\', \'The type of communications between the two endpoints, typically SOCK_STREAM for connection-oriented protocols and SOCK_DGRAM for connectionless protocols.\', \'Each server listens for clients calling on one or more ports. A port may be a Fixnum port number, a string containing a port number, or the name of a service.\', \'To create a socket, you must use the socket.socket() function available in the socket module, which has the general syntax −\', \'Once you have socket object, then you can use the required functions to create your client or server program. Following is the list of functions required −\', \'To write Internet servers, we use the socket function available in socket module to create a socket object. A socket object is then used to call other functions to setup a socket server.\', \'Next, call the accept method of the returned object. This method waits until a client connects to the port you specified, and then returns a connection object that represents the connection to that client.\', \"Let us write a very simple client program which opens a connection to a given port 12345 and a given host. It is very simple to create a socket client using the Python\'s socket module function.\", \'The socket.connect(hosname, port ) opens a TCP connection to hostname on the port. Once you have a socket open, you can read from it like any IO object. When done, remember to close it, as you would close a file.\', \'The following code is a very simple client that connects to a given host and port, reads any available data from the socket, and then exits −\', \'This was a quick start with the Socket Programming. It is a vast subject. It is recommended to go through the following link to find more detail −\']','[\'\ns = socket.socket (socket_family, socket_type, protocol = 0)\n\', \'\n#!/usr/bin/python3           # This is server.py file\nimport socket                                         \n\n# create a socket object\nserversocket = socket.socket(\n	        socket.AF_INET, socket.SOCK_STREAM) \n\n# get local machine name\nhost = socket.gethostname()                           \n\nport = 9999                                           \n\n# bind to the port\nserversocket.bind((host, port))                                  \n\n# queue up to 5 requests\nserversocket.listen(5)                                           \n\nwhile True:\n   # establish a connection\n   clientsocket,addr = serversocket.accept()      \n\n   print(\"Got a connection from %s\" % str(addr))\n    \n   msg = \'Thank you for connecting\'+ \"\\r\\n\"\n   clientsocket.send(msg.encode(\'ascii\'))\n   clientsocket.close()\n\', \"\n#!/usr/bin/python3           # This is client.py file\n\nimport socket\n\n# create a socket object\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \n\n# get local machine name\nhost = socket.gethostname()                           \n\nport = 9999\n\n# connection to hostname on the port.\ns.connect((host, port))                               \n\n# Receive no more than 1024 bytes\nmsg = s.recv(1024)                                     \n\ns.close()\nprint (msg.decode(\'ascii\'))\n\", \'\n# Following would start a server in background.\n$ python server.py & \n\n# Once server is started run client as follows:\n$ python client.py\n\', \"\non server terminal\nGot a connection from (\'192.168.1.10\', 3747)\nOn client terminal\nThank you for connecting\n\"]','[\'\ns = socket.socket (socket_family, socket_type, protocol = 0)\n\', \"\non server terminal\nGot a connection from (\'192.168.1.10\', 3747)\nOn client terminal\nThank you for connecting\n\"]','[\'Sr.No.|||Term & Description&&&1|||domain|||The family of protocols that is used as the transport mechanism. These values are constants such as AF_INET, PF_INET, PF_UNIX, PF_X25, and so on.&&&2|||type|||The type of communications between the two endpoints, typically SOCK_STREAM for connection-oriented protocols and SOCK_DGRAM for connectionless protocols.&&&3|||protocol|||Typically zero, this may be used to identify a variant of a protocol within a domain and type.&&&4|||hostname|||The identifier of a network interface −||||||A string, which can be a host name, a dotted-quad address, or an IPV6 address in colon (and possibly dot) notation|||A string \"<broadcast>\", which specifies an INADDR_BROADCAST address.|||A zero-length string, which specifies INADDR_ANY, or|||An Integer, interpreted as a binary address in host byte order.||||||&&&5|||port|||Each server listens for clients calling on one or more ports. A port may be a Fixnum port number, a string containing a port number, or the name of a service.\', \'Sr.No.|||Method & Description&&&1|||s.bind()|||This method binds address (hostname, port number pair) to socket.&&&2|||s.listen()|||This method sets up and start TCP listener&&&3|||s.accept()|||This passively accept TCP client connection, waiting until connection arrives (blocking).\', \'Sr.No.|||Method & Description&&&1|||s.connect()|||This method actively initiates TCP server connection.\', \'Sr.No.|||Method & Description&&&1|||s.recv()|||This method receives TCP message&&&2|||s.send()|||This method transmits TCP message&&&3|||s.recvfrom()|||This method receives UDP message&&&4|||s.sendto()|||This method transmits UDP message&&&5|||s.close()|||This method closes socket&&&6|||socket.gethostname()|||Returns the hostname.\', \'Protocol|||Common function|||Port No|||Python module&&&HTTP|||Web pages|||80|||httplib, urllib, xmlrpclib&&&NNTP|||Usenet news|||119|||nntplib&&&FTP|||File transfers|||20|||ftplib, urllib&&&SMTP|||Sending email|||25|||smtplib&&&POP3|||Fetching email|||110|||poplib&&&IMAP4|||Fetching email|||143|||imaplib&&&Telnet|||Command lines|||23|||telnetlib&&&Gopher|||Document transfers|||70|||gopherlib, urllib\']','[\'A string, which can be a host name, a dotted-quad address, or an IPV6 address in colon (and possibly dot) notation|||A string \"<broadcast>\", which specifies an INADDR_BROADCAST address.|||A zero-length string, which specifies INADDR_ANY, or|||An Integer, interpreted as a binary address in host byte order.|||socket_family − This is either AF_UNIX or AF_INET, as explained earlier.|||socket_type − This is either SOCK_STREAM or SOCK_DGRAM.|||protocol − This is usually left out, defaulting to 0.|||Unix Socket Programming.|||Python Socket Library and Modules.|||\']'),(24,'[\'Python 3 - Sending Email using SMTP\']','[\'Sending an HTML e-mail using Python\', \'Sending Attachments as an E-mail\', \'Useful Video Courses\']','[\'Example\', \'Example\', \'Example\']','[\'https://www.tutorialspoint.com/python3/python_networking.htm\', \'https://www.tutorialspoint.com/python3/python_multithreading.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_networking.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_multithreading.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'Here is the detail of the parameters −\', \'The sender − A string with the address of the sender.\', \'The receivers − A list of strings, one for each recipient.\', \'The message − A message as a string formatted as specified in the various RFCs.\', \'Here is a simple way to send one e-mail using Python script. Try it once −\', \'Following is an example to send the HTML content as an e-mail. Try it once −\']','[\'Here is a simple syntax to create one SMTP object, which can later be used to send an e-mail −\', \'local_hostname − If your SMTP server is running on your local machine, then you can specify just localhost the option.\', \'The attached files should be encoded with the pack(\"m\") function to have base 64 encoding before transmission.\', \'Following is an example, which sends  a file /tmp/test.txt as an attachment. Try it once −\']','[\'Simple Mail Transfer Protocol (SMTP) is a protocol, which handles sending an e-mail and routing e-mail between mail servers. \', \'Python provides smtplib module, which defines an SMTP client session object that can be used to send mails to any Internet machine with an SMTP or ESMTP listener daemon.\', \'host − This is the host running your SMTP server. You can specifiy IP address of the host or a domain name like tutorialspoint.com. This is an optional argument.\', \'port − If you are providing host argument, then you need to specify a port, where SMTP server is listening. Usually this port would be 25.\', \'An SMTP object has an instance method called sendmail, which is typically used to do the work of mailing a message. It takes three parameters −\', \'Here, you have placed a basic e-mail in message, using a triple quote, taking care to format the headers correctly. An e-mail requires a From, To, and a Subject header, separated from the body of the e-mail with a blank line.\', \'To send the mail you use smtpObj to connect to the SMTP server on the local machine. Then use the sendmail method along with the message, the from address, and the destination address as parameters (even though the from and to addresses are within the e-mail itself, these are not always used to route the mail).\', \'If you are not running an SMTP server on your local machine, you can the use smtplib client to communicate with a remote SMTP server. Unless you are using a webmail service (such as gmail or Yahoo! Mail), your e-mail provider must have provided you with the outgoing mail server details that you can supply them, as follows −\', \'When you send a text message using Python, then all the content is treated as simple text. Even if you include HTML tags in a text message, it is displayed as simple text and HTML tags will not be formatted according to the HTML syntax. However, Python provides an option to send an HTML message as actual HTML message.\', \'While sending an e-mail message, you can specify a Mime version, content type  and the character set to send an HTML e-mail.\', \'To send an e-mail with mixed content requires setting the Content-type header to multipart/mixed. Then, the text and the attachment sections can be specified within boundaries.\', \"A boundary is started with two hyphens followed by a unique number, which cannot appear in the message part of the e-mail. A final boundary denoting the e-mail\'s final section must also end with two hyphens.\"]','[\'\nimport smtplib\n\nsmtpObj = smtplib.SMTP( [host [, port [, local_hostname]]] )\n\', \'\n#!/usr/bin/python3\n\nimport smtplib\n\nsender = \'from@fromdomain.com\'\nreceivers = [\'to@todomain.com\']\n\nmessage = \"\"\"From: From Person <from@fromdomain.com>\nTo: To Person <to@todomain.com>\nSubject: SMTP e-mail test\n\nThis is a test e-mail message.\n\"\"\"\n\ntry:\n   smtpObj = smtplib.SMTP(\'localhost\')\n   smtpObj.sendmail(sender, receivers, message)         \n   print \"Successfully sent email\"\nexcept SMTPException:\n   print \"Error: unable to send email\"\n\', \"\nmail = smtplib.SMTP(\'smtp.gmail.com\', 587)\n\", \'\n#!/usr/bin/python3\n\nimport smtplib\n\nmessage = \"\"\"From: From Person <from@fromdomain.com>\nTo: To Person <to@todomain.com>\nMIME-Version: 1.0\nContent-type: text/html\nSubject: SMTP HTML e-mail test\n\nThis is an e-mail message to be sent in HTML format\n\n<b>This is HTML message.</b>\n<h1>This is headline.</h1>\n\"\"\"\n\ntry:\n   smtpObj = smtplib.SMTP(\'localhost\')\n   smtpObj.sendmail(sender, receivers, message)         \n   print \"Successfully sent email\"\nexcept SMTPException:\n   print \"Error: unable to send email\"\n\', \'\n#!/usr/bin/python3\n\nimport smtplib\nimport base64\n\nfilename = \"/tmp/test.txt\"\n\n# Read a file and encode it into base64 format\nfo = open(filename, \"rb\")\nfilecontent = fo.read()\nencodedcontent = base64.b64encode(filecontent)  # base64\n\nsender = \'webmaster@tutorialpoint.com\'\nreciever = \'amrood.admin@gmail.com\'\n\nmarker = \"AUNIQUEMARKER\"\n\nbody =\"\"\"\nThis is a test email to send an attachement.\n\"\"\"\n# Define the main headers.\npart1 = \"\"\"From: From Person <me@fromdomain.net>\nTo: To Person <amrood.admin@gmail.com>\nSubject: Sending Attachement\nMIME-Version: 1.0\nContent-Type: multipart/mixed; boundary=%s\n--%s\n\"\"\" % (marker, marker)\n\n# Define the message action\npart2 = \"\"\"Content-Type: text/plain\nContent-Transfer-Encoding:8bit\n\n%s\n--%s\n\"\"\" % (body,marker)\n\n# Define the attachment section\npart3 = \"\"\"Content-Type: multipart/mixed; name=\\\"%s\\\"\nContent-Transfer-Encoding:base64\nContent-Disposition: attachment; filename=%s\n\n%s\n--%s--\n\"\"\" %(filename, filename, encodedcontent, marker)\nmessage = part1 + part2 + part3\n\ntry:\n   smtpObj = smtplib.SMTP(\'localhost\')\n   smtpObj.sendmail(sender, reciever, message)\n   print \"Successfully sent email\"\nexcept Exception:\n   print (\"Error: unable to send email\")\n\']','[]','[]','[\'host − This is the host running your SMTP server. You can specifiy IP address of the host or a domain name like tutorialspoint.com. This is an optional argument.|||port − If you are providing host argument, then you need to specify a port, where SMTP server is listening. Usually this port would be 25.|||local_hostname − If your SMTP server is running on your local machine, then you can specify just localhost the option.|||The sender − A string with the address of the sender.|||The receivers − A list of strings, one for each recipient.|||The message − A message as a string formatted as specified in the various RFCs.|||\']'),(25,'[\'Python 3 - Multithreaded Programming\']','[\'Starting a New Thread\', \'The Threading Module\', \'Creating Thread Using Threading Module\', \'Synchronizing Threads\', \'Multithreaded Priority Queue\', \'Useful Video Courses\']','[\'Example\', \'Output\', \'Example\', \'Result\', \'Example\', \'Output\', \'Example\', \'Output\']','[\'https://www.tutorialspoint.com/python3/python_sending_email.htm\', \'https://www.tutorialspoint.com/python3/python_xml_processing.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_sending_email.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_xml_processing.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'There are two different kind of threads −\', \'There are two modules which support the usage of threads in Python3 −\', \'When the above code is  executed, it produces the following result −\', \'Program goes in an infinite loop. You will have to press ctrl-c to stop\', \'threading.activeCount() − Returns the number of thread objects that are active.\', \'run() − The run() method is the entry point for a thread.\', \'start() − The start() method starts a thread by calling the run method.\', \' join([time]) − The join() waits for threads to terminate.\', \' isAlive() − The isAlive() method checks whether a thread is still executing.\', \' getName() − The getName() method returns the name of a thread.\', \' setName() − The setName() method sets the name of a thread.\', \'Define a new subclass of the Thread class.\', \'Override the __init__(self [,args]) method to add additional arguments.\', \'When we run the above program, it produces the following result −\', \'When the above code is  executed, it produces the following result −\', \'get() − The get() removes and returns an item from the queue.\', \'put() − The put adds item to a queue.\', \'empty() − The empty( ) returns True if queue is empty; otherwise, False.\', \'full() − the full() returns True if queue is full; otherwise, False.\', \'When the above code is  executed, it produces the following result −\']','[\'It can temporarily be put on hold (also known as sleeping) while other threads are running - this is called yielding.\', \'Kernel Threads are a part of the operating system, while the User-space threads are not implemented in the kernel. \', \'To spawn another thread, you need to call the following method available in the thread module −\', \'This method call enables a fast and efficient way to create new threads in both Linux and Windows.\', \'The threading module exposes all the methods of the thread module and provides some additional methods −\', \"threading.currentThread() − Returns the number of thread objects in the caller\'s thread control.\", \'threading.enumerate() − Returns a list of all thread objects that are currently active.\', \'To implement a new thread using the threading module, you have to do the following −\', \'Then, override the run(self [,args]) method to implement what the thread should do when started.\', \'The release() method of the new lock object is used to release the lock when it is no longer required.\', \'qsize()  − The qsize() returns the number of items that are currently in the queue.\']','[\'Running several threads is similar to running several different programs concurrently, but with the following benefits −\', \'Multiple threads within a process share the same data space with the main thread and can therefore share information or communicate with each other more easily than if they were separate processes.\', \'Threads are sometimes called light-weight processes and they do not require much memory overhead; they are cheaper than processes.\', \'A thread has a beginning, an execution sequence, and a conclusion. It has an instruction pointer that keeps track of where within its context is it currently running.\', \'The thread module has been \"deprecated\" for quite a long time. Users are encouraged to use the threading module instead. Hence, in Python 3, the module \"thread\" is not available anymore. However, it has been renamed to \"_thread\" for backwards compatibilities in Python3. \', \'The method call returns immediately and the child thread starts and calls function with the passed list of args. When the function returns, the thread terminates.\', \'Here, args is a tuple of arguments; use an empty tuple to call function without passing any arguments. kwargs is an optional dictionary of keyword arguments.\', \'Although it is very effective for low-level threading, the thread module is very limited compared to the newer threading module.\', \'The newer threading module included with Python 2.4 provides much more powerful, high-level support for threads than the thread module discussed in the previous section.\', \'In addition to the methods, the threading module has the Thread class that implements threading. The methods provided by the Thread class are as follows −\', \'Once you have created the new Thread subclass, you can create an instance of it and then start a new thread by invoking the start(), which in turn calls the run() method.\', \'The threading module provided with Python includes a simple-to-implement locking mechanism that allows you to synchronize threads. A new lock is created by calling the Lock() method, which returns the new lock.\', \'The acquire(blocking) method of the new lock object is used to force the threads to run synchronously. The optional blocking parameter enables you to control whether the thread waits to acquire the lock.\', \'If blocking is set to 0, the thread returns immediately with a 0 value if the lock cannot be acquired and with a 1 if the lock was acquired. If blocking is set to 1, the thread blocks and wait for the lock to be released.\', \'The Queue module allows you to create a new queue object that can hold a specific number of items. There are following methods to control the Queue −\']','[\'\n_thread.start_new_thread ( function, args[, kwargs] )\n\', \'\n#!/usr/bin/python3\n\nimport _thread\nimport time\n\n# Define a function for the thread\ndef print_time( threadName, delay):\n   count = 0\n   while count < 5:\n      time.sleep(delay)\n      count += 1\n      print (\"%s: %s\" % ( threadName, time.ctime(time.time()) ))\n\n# Create two threads as follows\ntry:\n   _thread.start_new_thread( print_time, (\"Thread-1\", 2, ) )\n   _thread.start_new_thread( print_time, (\"Thread-2\", 4, ) )\nexcept:\n   print (\"Error: unable to start thread\")\n\nwhile 1:\n   pass\n\', \'\nThread-1: Fri Feb 19 09:41:39 2016\nThread-2: Fri Feb 19 09:41:41 2016\nThread-1: Fri Feb 19 09:41:41 2016\nThread-1: Fri Feb 19 09:41:43 2016\nThread-2: Fri Feb 19 09:41:45 2016\nThread-1: Fri Feb 19 09:41:45 2016\nThread-1: Fri Feb 19 09:41:47 2016\nThread-2: Fri Feb 19 09:41:49 2016\nThread-2: Fri Feb 19 09:41:53 2016\n\', \'\n#!/usr/bin/python3\n\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, counter):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.counter = counter\n   def run(self):\n      print (\"Starting \" + self.name)\n      print_time(self.name, self.counter, 5)\n      print (\"Exiting \" + self.name)\n\ndef print_time(threadName, delay, counter):\n   while counter:\n      if exitFlag:\n         threadName.exit()\n      time.sleep(delay)\n      print (\"%s: %s\" % (threadName, time.ctime(time.time())))\n      counter -= 1\n\n# Create new threads\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# Start new Threads\nthread1.start()\nthread2.start()\nthread1.join()\nthread2.join()\nprint (\"Exiting Main Thread\")\n\', \'\nStarting Thread-1\nStarting Thread-2\nThread-1: Fri Feb 19 10:00:21 2016\nThread-2: Fri Feb 19 10:00:22 2016\nThread-1: Fri Feb 19 10:00:22 2016\nThread-1: Fri Feb 19 10:00:23 2016\nThread-2: Fri Feb 19 10:00:24 2016\nThread-1: Fri Feb 19 10:00:24 2016\nThread-1: Fri Feb 19 10:00:25 2016\nExiting Thread-1\nThread-2: Fri Feb 19 10:00:26 2016\nThread-2: Fri Feb 19 10:00:28 2016\nThread-2: Fri Feb 19 10:00:30 2016\nExiting Thread-2\nExiting Main Thread\n\', \'\n#!/usr/bin/python3\n\nimport threading\nimport time\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, counter):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.counter = counter\n   def run(self):\n      print (\"Starting \" + self.name)\n      # Get lock to synchronize threads\n      threadLock.acquire()\n      print_time(self.name, self.counter, 3)\n      # Free lock to release next thread\n      threadLock.release()\n\ndef print_time(threadName, delay, counter):\n   while counter:\n      time.sleep(delay)\n      print (\"%s: %s\" % (threadName, time.ctime(time.time())))\n      counter -= 1\n\nthreadLock = threading.Lock()\nthreads = []\n\n# Create new threads\nthread1 = myThread(1, \"Thread-1\", 1)\nthread2 = myThread(2, \"Thread-2\", 2)\n\n# Start new Threads\nthread1.start()\nthread2.start()\n\n# Add threads to thread list\nthreads.append(thread1)\nthreads.append(thread2)\n\n# Wait for all threads to complete\nfor t in threads:\n   t.join()\nprint (\"Exiting Main Thread\")\n\', \'\nStarting Thread-1\nStarting Thread-2\nThread-1: Fri Feb 19 10:04:14 2016\nThread-1: Fri Feb 19 10:04:15 2016\nThread-1: Fri Feb 19 10:04:16 2016\nThread-2: Fri Feb 19 10:04:18 2016\nThread-2: Fri Feb 19 10:04:20 2016\nThread-2: Fri Feb 19 10:04:22 2016\nExiting Main Thread\n\', \'\n#!/usr/bin/python3\n\nimport queue\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, q):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.q = q\n   def run(self):\n      print (\"Starting \" + self.name)\n      process_data(self.name, self.q)\n      print (\"Exiting \" + self.name)\n\ndef process_data(threadName, q):\n   while not exitFlag:\n      queueLock.acquire()\n      if not workQueue.empty():\n         data = q.get()\n         queueLock.release()\n         print (\"%s processing %s\" % (threadName, data))\n      else:\n         queueLock.release()\n         time.sleep(1)\n\nthreadList = [\"Thread-1\", \"Thread-2\", \"Thread-3\"]\nnameList = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\"]\nqueueLock = threading.Lock()\nworkQueue = queue.Queue(10)\nthreads = []\nthreadID = 1\n\n# Create new threads\nfor tName in threadList:\n   thread = myThread(threadID, tName, workQueue)\n   thread.start()\n   threads.append(thread)\n   threadID += 1\n\n# Fill the queue\nqueueLock.acquire()\nfor word in nameList:\n   workQueue.put(word)\nqueueLock.release()\n\n# Wait for queue to empty\nwhile not workQueue.empty():\n   pass\n\n# Notify threads it\'s time to exit\nexitFlag = 1\n\n# Wait for all threads to complete\nfor t in threads:\n   t.join()\nprint (\"Exiting Main Thread\")\n\', \'\nStarting Thread-1\nStarting Thread-2\nStarting Thread-3\nThread-1 processing One\nThread-2 processing Two\nThread-3 processing Three\nThread-1 processing Four\nThread-2 processing Five\nExiting Thread-3\nExiting Thread-1\nExiting Thread-2\nExiting Main Thread\n\']','[\'\nThread-1: Fri Feb 19 09:41:39 2016\nThread-2: Fri Feb 19 09:41:41 2016\nThread-1: Fri Feb 19 09:41:41 2016\nThread-1: Fri Feb 19 09:41:43 2016\nThread-2: Fri Feb 19 09:41:45 2016\nThread-1: Fri Feb 19 09:41:45 2016\nThread-1: Fri Feb 19 09:41:47 2016\nThread-2: Fri Feb 19 09:41:49 2016\nThread-2: Fri Feb 19 09:41:53 2016\n\', \'\nStarting Thread-1\nStarting Thread-2\nThread-1: Fri Feb 19 10:00:21 2016\nThread-2: Fri Feb 19 10:00:22 2016\nThread-1: Fri Feb 19 10:00:22 2016\nThread-1: Fri Feb 19 10:00:23 2016\nThread-2: Fri Feb 19 10:00:24 2016\nThread-1: Fri Feb 19 10:00:24 2016\nThread-1: Fri Feb 19 10:00:25 2016\nExiting Thread-1\nThread-2: Fri Feb 19 10:00:26 2016\nThread-2: Fri Feb 19 10:00:28 2016\nThread-2: Fri Feb 19 10:00:30 2016\nExiting Thread-2\nExiting Main Thread\n\', \'\nStarting Thread-1\nStarting Thread-2\nStarting Thread-3\nThread-1 processing One\nThread-2 processing Two\nThread-3 processing Three\nThread-1 processing Four\nThread-2 processing Five\nExiting Thread-3\nExiting Thread-1\nExiting Thread-2\nExiting Main Thread\n\']','[]','[\"Multiple threads within a process share the same data space with the main thread and can therefore share information or communicate with each other more easily than if they were separate processes.|||Threads are sometimes called light-weight processes and they do not require much memory overhead; they are cheaper than processes.|||It can be pre-empted (interrupted).|||It can temporarily be put on hold (also known as sleeping) while other threads are running - this is called yielding.|||kernel thread|||user thread|||_thread|||threading|||threading.activeCount() − Returns the number of thread objects that are active.|||threading.currentThread() − Returns the number of thread objects in the caller\'s thread control.|||threading.enumerate() − Returns a list of all thread objects that are currently active.|||run() − The run() method is the entry point for a thread.|||start() − The start() method starts a thread by calling the run method.||| join([time]) − The join() waits for threads to terminate.||| isAlive() − The isAlive() method checks whether a thread is still executing.||| getName() − The getName() method returns the name of a thread.||| setName() − The setName() method sets the name of a thread.|||Define a new subclass of the Thread class.|||Override the __init__(self [,args]) method to add additional arguments.|||Then, override the run(self [,args]) method to implement what the thread should do when started.|||get() − The get() removes and returns an item from the queue.|||put() − The put adds item to a queue.|||qsize()  − The qsize() returns the number of items that are currently in the queue.|||empty() − The empty( ) returns True if queue is empty; otherwise, False.|||full() − the full() returns True if queue is full; otherwise, False.|||\"]'),(26,'[\'Python 3 - XML Processing\']','[\'What is XML?\', \'XML Parser Architectures and APIs\', \'Parsing XML with SAX APIs\', \'The make_parser Method\', \'The parse Method\', \'The parseString Method\', \'Parsing XML with DOM APIs\', \'Useful Video Courses\']','[\'Example\', \'Output\', \'Example\', \'Output\']','[\'https://www.tutorialspoint.com/python3/python_multithreading.htm\', \'https://www.tutorialspoint.com/python3/python_gui_programming.htm\', \'https://docs.python.org/library/xml.sax.html\', \'https://docs.python.org/library/xml.dom.html\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_multithreading.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_gui_programming.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'Here are other important methods to understand before proceeding −\', \'Here are the details of the parameters −\', \'The following method creates a SAX parser and uses it to parse a document.\', \'Here are the details of the parameters −\', \'xmlfile − This is the name of the XML file to read from.\', \'contenthandler − This must be a ContentHandler object.\', \'errorhandler − If specified, errorhandler must be a SAX ErrorHandler object.\', \'Here are the details of the parameters −\', \'xmlstring − This is the name of the XML string to read from.\', \'contenthandler − This must be a ContentHandler object.\', \'errorhandler − If specified, errorhandler must be a SAX ErrorHandler object.\', \'This would produce the following result −\', \'This would produce the following result −\']','[\'XML is extremely useful for keeping track of small to medium amounts of data without requiring an SQL-based backbone.\', \'The Python standard library provides a minimal but useful set of interfaces to work with XML.\', \'The two most basic and broadly used APIs to XML data are the SAX and DOM interfaces.\', \'For all our XML code examples, let us use a simple XML file movies.xml as an input −\', \'There is one more method to create a SAX parser and to parse the specified XML string.\', \'For a complete detail on SAX API documentation, please refer to the standard Python SAX APIs.\', \'For a complete detail on DOM API documentation, please refer to the standard Python DOM APIs.\']','[\'XML is a portable, open source language that allows programmers to develop applications that can be read by other applications, regardless of operating system and/or developmental language.\', \'The Extensible Markup Language (XML) is a markup language much like HTML or SGML. This is recommended by the World Wide Web Consortium and available as an open standard.\', \'Simple API for XML (SAX) − Here, you register callbacks for events of interest and then let the parser proceed through the document. This is useful when your documents are large or you have memory limitations, it parses the file as it reads it from the disk and the entire file is never stored in the memory.\', \'Document Object Model (DOM) API − This is a World Wide Web Consortium recommendation wherein the entire file is read into the memory and stored in a hierarchical (tree-based) form to represent all the features of an XML document.\', \'SAX obviously cannot process information as fast as DOM, when working with large files. On the other hand, using DOM exclusively can really kill your resources, especially if used on many small files.\', \'SAX is read-only, while DOM allows changes to the XML file. Since these two different APIs literally complement each other, there is no reason why you cannot use them both for large projects.\', \'SAX is a standard interface for event-driven XML parsing. Parsing XML with SAX generally requires you to create your own ContentHandler by subclassing xml.sax.ContentHandler.\', \'Your ContentHandler handles the particular tags and attributes of your flavor(s) of XML. A ContentHandler object provides methods to handle various parsing events. Its owning parser calls ContentHandler methods as it parses the XML file.\', \'The methods startDocument and endDocument are called at the start and the end of the XML file. The method characters(text) is passed the character data of the XML file via the parameter text.\', \'The ContentHandler is called at the start and end of each element. If the parser is not in namespace mode, the methods startElement(tag, attributes) and endElement(tag) are called; otherwise, the corresponding methods startElementNS and endElementNS are called. Here, tag is the element tag, and attributes is an Attributes object.\', \'The following method creates a new parser object and returns it. The parser object created will be of the first parser type, the system finds.\', \'parser_list − The optional argument consisting of a list of parsers to use which must all implement the make_parser method.\', \'The Document Object Model (\"DOM\") is a cross-language API from the World Wide Web Consortium (W3C) for accessing and modifying the XML documents.\', \'The DOM is extremely useful for random-access applications. SAX only allows you a view of one bit of the document at a time. If you are looking at one SAX element, you have no access to another.\', \'Here is the easiest way to load an XML document quickly and to create a minidom object using the xml.dom module. The minidom object provides a simple parser method that quickly creates a DOM tree from the XML file.\', \'The sample phrase calls the parse( file [,parser] ) function of the minidom object to parse the XML file, designated by file into a DOM tree object.\']','[\'\n<collection shelf = \"New Arrivals\">\n<movie title = \"Enemy Behind\">\n   <type>War, Thriller</type>\n   <format>DVD</format>\n   <year>2003</year>\n   <rating>PG</rating>\n   <stars>10</stars>\n   <description>Talk about a US-Japan war</description>\n</movie>\n<movie title = \"Transformers\">\n   <type>Anime, Science Fiction</type>\n   <format>DVD</format>\n   <year>1989</year>\n   <rating>R</rating>\n   <stars>8</stars>\n   <description>A schientific fiction</description>\n</movie>\n   <movie title = \"Trigun\">\n   <type>Anime, Action</type>\n   <format>DVD</format>\n   <episodes>4</episodes>\n   <rating>PG</rating>\n   <stars>10</stars>\n   <description>Vash the Stampede!</description>\n</movie>\n<movie title = \"Ishtar\">\n   <type>Comedy</type>\n   <format>VHS</format>\n   <rating>PG</rating>\n   <stars>2</stars>\n   <description>Viewable boredom</description>\n</movie>\n</collection>\n\', \'\nxml.sax.make_parser( [parser_list] )\n\', \'\nxml.sax.parse( xmlfile, contenthandler[, errorhandler])\n\', \'\nxml.sax.parseString(xmlstring, contenthandler[, errorhandler])\n\', \'\n#!/usr/bin/python3\n\nimport xml.sax\n\nclass MovieHandler( xml.sax.ContentHandler ):\n   def __init__(self):\n      self.CurrentData = \"\"\n      self.type = \"\"\n      self.format = \"\"\n      self.year = \"\"\n      self.rating = \"\"\n      self.stars = \"\"\n      self.description = \"\"\n\n   # Call when an element starts\n   def startElement(self, tag, attributes):\n      self.CurrentData = tag\n      if tag == \"movie\":\n         print (\"*****Movie*****\")\n         title = attributes[\"title\"]\n         print (\"Title:\", title)\n\n   # Call when an elements ends\n   def endElement(self, tag):\n      if self.CurrentData == \"type\":\n         print (\"Type:\", self.type)\n      elif self.CurrentData == \"format\":\n         print (\"Format:\", self.format)\n      elif self.CurrentData == \"year\":\n         print (\"Year:\", self.year)\n      elif self.CurrentData == \"rating\":\n         print (\"Rating:\", self.rating)\n      elif self.CurrentData == \"stars\":\n         print (\"Stars:\", self.stars)\n      elif self.CurrentData == \"description\":\n         print (\"Description:\", self.description)\n      self.CurrentData = \"\"\n\n   # Call when a character is read\n   def characters(self, content):\n      if self.CurrentData == \"type\":\n         self.type = content\n      elif self.CurrentData == \"format\":\n         self.format = content\n      elif self.CurrentData == \"year\":\n         self.year = content\n      elif self.CurrentData == \"rating\":\n         self.rating = content\n      elif self.CurrentData == \"stars\":\n         self.stars = content\n      elif self.CurrentData == \"description\":\n         self.description = content\n  \nif ( __name__ == \"__main__\"):\n   \n   # create an XMLReader\n   parser = xml.sax.make_parser()\n   # turn off namepsaces\n   parser.setFeature(xml.sax.handler.feature_namespaces, 0)\n\n   # override the default ContextHandler\n   Handler = MovieHandler()\n   parser.setContentHandler( Handler )\n   \n   parser.parse(\"movies.xml\")\n\', \'\n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nYear: 2003\nRating: PG\nStars: 10\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nYear: 1989\nRating: R\nStars: 8\nDescription: A scientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nStars: 10\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nStars: 2\nDescription: Viewable boredom\n\', \'\n#!/usr/bin/python3\n\nfrom xml.dom.minidom import parse\nimport xml.dom.minidom\n\n# Open XML document using minidom parser\nDOMTree = xml.dom.minidom.parse(\"movies.xml\")\ncollection = DOMTree.documentElement\nif collection.hasAttribute(\"shelf\"):\n   print (\"Root element : %s\" % collection.getAttribute(\"shelf\"))\n\n# Get all the movies in the collection\nmovies = collection.getElementsByTagName(\"movie\")\n\n# Print detail of each movie.\nfor movie in movies:\n   print (\"*****Movie*****\")\n   if movie.hasAttribute(\"title\"):\n      print (\"Title: %s\" % movie.getAttribute(\"title\"))\n\n   type = movie.getElementsByTagName(\'type\')[0]\n   print (\"Type: %s\" % type.childNodes[0].data)\n   format = movie.getElementsByTagName(\'format\')[0]\n   print (\"Format: %s\" % format.childNodes[0].data)\n   rating = movie.getElementsByTagName(\'rating\')[0]\n   print (\"Rating: %s\" % rating.childNodes[0].data)\n   description = movie.getElementsByTagName(\'description\')[0]\n   print (\"Description: %s\" % description.childNodes[0].data)\n\', \'\nRoot element : New Arrivals\n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nRating: PG\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nRating: R\nDescription: A scientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nDescription: Viewable boredom\n\']','[\'\n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nYear: 2003\nRating: PG\nStars: 10\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nYear: 1989\nRating: R\nStars: 8\nDescription: A scientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nStars: 10\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nStars: 2\nDescription: Viewable boredom\n\', \'\nRoot element : New Arrivals\n*****Movie*****\nTitle: Enemy Behind\nType: War, Thriller\nFormat: DVD\nRating: PG\nDescription: Talk about a US-Japan war\n*****Movie*****\nTitle: Transformers\nType: Anime, Science Fiction\nFormat: DVD\nRating: R\nDescription: A scientific fiction\n*****Movie*****\nTitle: Trigun\nType: Anime, Action\nFormat: DVD\nRating: PG\nDescription: Vash the Stampede!\n*****Movie*****\nTitle: Ishtar\nType: Comedy\nFormat: VHS\nRating: PG\nDescription: Viewable boredom\n\']','[]','[\'Simple API for XML (SAX) − Here, you register callbacks for events of interest and then let the parser proceed through the document. This is useful when your documents are large or you have memory limitations, it parses the file as it reads it from the disk and the entire file is never stored in the memory.|||Document Object Model (DOM) API − This is a World Wide Web Consortium recommendation wherein the entire file is read into the memory and stored in a hierarchical (tree-based) form to represent all the features of an XML document.||||||parser_list − The optional argument consisting of a list of parsers to use which must all implement the make_parser method.|||xmlfile − This is the name of the XML file to read from.|||contenthandler − This must be a ContentHandler object.|||errorhandler − If specified, errorhandler must be a SAX ErrorHandler object.|||xmlstring − This is the name of the XML string to read from.|||contenthandler − This must be a ContentHandler object.|||errorhandler − If specified, errorhandler must be a SAX ErrorHandler object.|||\']'),(27,'[\'Python 3  - GUI Programming (Tkinter)\']','[\'Tkinter Programming\', \'Example\', \'Tkinter Widgets\', \'Standard attributes\', \'Geometry Management\', \'Useful Video Courses\']','[]','[\'https://www.tutorialspoint.com/python3/python_xml_processing.htm\', \'https://www.tutorialspoint.com/python3/python_further_extensions.htm\', \'https://www.tutorialspoint.com/wxpython/index.htm\', \'https://www.tutorialspoint.com/pyqt/index.htm\', \'http://www.jython.org\', \'https://www.tutorialspoint.com/python3/tk_button.htm\', \'https://www.tutorialspoint.com/python3/tk_canvas.htm\', \'https://www.tutorialspoint.com/python3/tk_checkbutton.htm\', \'https://www.tutorialspoint.com/python3/tk_entry.htm\', \'https://www.tutorialspoint.com/python3/tk_frame.htm\', \'https://www.tutorialspoint.com/python3/tk_label.htm\', \'https://www.tutorialspoint.com/python3/tk_listbox.htm\', \'https://www.tutorialspoint.com/python3/tk_menubutton.htm\', \'https://www.tutorialspoint.com/python3/tk_menu.htm\', \'https://www.tutorialspoint.com/python3/tk_message.htm\', \'https://www.tutorialspoint.com/python3/tk_radiobutton.htm\', \'https://www.tutorialspoint.com/python3/tk_scale.htm\', \'https://www.tutorialspoint.com/python3/tk_scrollbar.htm\', \'https://www.tutorialspoint.com/python3/tk_text.htm\', \'https://www.tutorialspoint.com/python3/tk_toplevel.htm\', \'https://www.tutorialspoint.com/python3/tk_spinbox.htm\', \'https://www.tutorialspoint.com/python3/tk_panedwindow.htm\', \'https://www.tutorialspoint.com/python3/tk_labelframe.htm\', \'https://www.tutorialspoint.com/python3/tk_messagebox.htm\', \'https://www.tutorialspoint.com/python3/tk_dimensions.htm\', \'https://www.tutorialspoint.com/python3/tk_colors.htm\', \'https://www.tutorialspoint.com/python3/tk_fonts.htm\', \'https://www.tutorialspoint.com/python3/tk_anchors.htm\', \'https://www.tutorialspoint.com/python3/tk_relief.htm\', \'https://www.tutorialspoint.com/python3/tk_bitmaps.htm\', \'https://www.tutorialspoint.com/python3/tk_cursors.htm\', \'https://www.tutorialspoint.com/python3/tk_pack.htm\', \'https://www.tutorialspoint.com/python3/tk_grid.htm\', \'https://www.tutorialspoint.com/python3/tk_place.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_xml_processing.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_further_extensions.htm\']','[\'https://www.tutorialspoint.com/python3/images/tkwindow.jpg\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'There are many other interfaces available, which you can find them on the net.\', \'Create the GUI application main window.\', \'Add one or more of the above-mentioned widgets to the GUI application.\', \'This would create a following window −\', \'The Button widget is used to display the buttons in your application.\', \'The Frame widget is used as a container widget to organize other widgets.\', \'The Listbox widget is used to provide a list of options to a user.\', \'The Menubutton widget is used to display menus in your application.\', \'The Scale widget is used to provide a slider widget.\', \'The Text widget is used to display text in multiple lines.\', \'The Toplevel widget is used to provide a separate window container.\', \'This module is used to display message boxes in your applications.\']','[\'Creating a GUI application using Tkinter is an easy task. All you need to do is perform the following steps −\', \'Enter the main event loop to take action against each event triggered by the user.\', \'The Canvas widget is used to draw shapes, such as lines, ovals, polygons and rectangles, in your application.\', \'The Entry widget is used to display a single-line text field for accepting values from a user.\', \'The Label widget is used to provide a single-line caption for other widgets. It can also contain images.\', \'The Menu widget is used to provide various commands to a user. These commands are contained inside Menubutton.\', \'The Message widget is used to display multiline text fields for accepting values from a user.\', \'The Scrollbar widget is used to add scrolling capability to various widgets, such as list boxes.\', \'A PanedWindow is a container widget that may contain any number of panes, arranged horizontally or vertically.\', \'Let us look at how some of their common attributes, such as sizes, colors and fonts are specified.\', \'The pack() Method − This geometry manager organizes widgets in blocks before placing them in the parent widget.\', \'The grid() Method − This geometry manager organizes widgets in a table-like structure in the parent widget.\']','[\'Python provides various options for developing graphical user interfaces (GUIs). The most important features are listed below.\', \'Tkinter − Tkinter is the Python interface to the Tk GUI toolkit shipped with Python. We would look this option in this chapter.\', \'wxPython − This is an open-source Python interface for wxWidgets GUI toolkit. You can find a complete tutorial on WxPython here.\', \'PyQt −This is also a Python interface for a popular cross-platform Qt GUI library. TutorialsPoint has a very good tutorial on PyQt here.\', \'JPython − JPython is a Python port for Java, which gives Python scripts seamless access to the Java class libraries on the local machine http://www.jython.org.\', \'Tkinter is the standard GUI library for Python. Python when combined with Tkinter provides a fast and easy way to create GUI applications. Tkinter provides a powerful object-oriented interface to the Tk GUI toolkit.\', \'Tkinter provides various controls, such as buttons, labels and text boxes used in a GUI application. These controls are commonly called widgets.\', \'There are currently 15 types of widgets in Tkinter. We present these widgets as well as a brief description in the following table −\', \'The Checkbutton widget is used to display a number of options as checkboxes. The user can select multiple options at a time.\', \'The Radiobutton widget is used to display a number of options as radio buttons. The user can select only one option at a time.\', \'The Spinbox widget is a variant of the standard Tkinter Entry widget, which can be used to select from a fixed number of values.\', \'A labelframe is a simple container widget. Its primary purpose is to act as a spacer or container for complex window layouts.\', \'All Tkinter widgets have access to the specific geometry management methods, which have the purpose of organizing widgets throughout the parent widget area. Tkinter exposes the following geometry manager classes: pack, grid, and place.\', \'The place() Method − This geometry manager organizes widgets by placing them in a specific position in the parent widget.\']','[\'\n#!/usr/bin/python3\n\nimport tkinter # note that module name has changed from Tkinter in Python 2 to tkinter in Python 3\ntop = tkinter.Tk()\n# Code to add widgets will go here...\ntop.mainloop()\n\']','[]','[\'Sr.No.Operator & Descriptio&&&||||||Button|||The Button widget is used to display the buttons in your application&&&||||||Canvas|||The Canvas widget is used to draw shapes, such as lines, ovals, polygons and rectangles, in your application.&&&3||||||Checkbutton|||The Checkbutton widget is used to display a number of options as checkboxes. The user can select multiple options at a time.&&&4||||||Entry|||The Entry widget is used to display a single-line text field for accepting values from a user.&&&5||||||Frame|||The Frame widget is used as a container widget to organize other widgets.&&&6||||||Label|||The Label widget is used to provide a single-line caption for other widgets. It can also contain images.&&&7||||||Listbox|||The Listbox widget is used to provide a list of options to a user.&&&8||||||Menubutton|||The Menubutton widget is used to display menus in your application.&&&9||||||Menu|||The Menu widget is used to provide various commands to a user. These commands are contained inside Menubutton.&&&10||||||Message|||The Message widget is used to display multiline text fields for accepting values from a user.&&&11||||||Radiobutton|||The Radiobutton widget is used to display a number of options as radio buttons. The user can select only one option at a time.&&&12||||||Scale|||The Scale widget is used to provide a slider widget&&&13||||||Scrollbar|||The Scrollbar widget is used to add scrolling capability to various widgets, such as list boxes&&&14||||||Text|||The Text widget is used to display text in multiple lines&&&15||||||Toplevel|||The Toplevel widget is used to provide a separate window container&&&16||||||Spinbox|||The Spinbox widget is a variant of the standard Tkinter Entry widget, which can be used to select from a fixed number of values&&&17||||||PanedWindow|||A PanedWindow is a container widget that may contain any number of panes, arranged horizontally or vertically&&&18||||||LabelFrame|||A labelframe is a simple container widget. Its primary purpose is to act as a spacer or container for complex window layouts&&&19||||||tkMessageBox|||This module is used to display message boxes in your applications\']','[\'Tkinter − Tkinter is the Python interface to the Tk GUI toolkit shipped with Python. We would look this option in this chapter.|||wxPython − This is an open-source Python interface for wxWidgets GUI toolkit. You can find a complete tutorial on WxPython here.||||||PyQt −This is also a Python interface for a popular cross-platform Qt GUI library. TutorialsPoint has a very good tutorial on PyQt here.||||||JPython − JPython is a Python port for Java, which gives Python scripts seamless access to the Java class libraries on the local machine http://www.jython.org.|||Import the Tkinter module.|||Create the GUI application main window.|||Add one or more of the above-mentioned widgets to the GUI application.|||Enter the main event loop to take action against each event triggered by the user.|||Dimensions|||Colors|||Fonts|||Anchors|||Relief styles|||Bitmaps|||Cursors|||The pack() Method − This geometry manager organizes widgets in blocks before placing them in the parent widget.|||The grid() Method − This geometry manager organizes widgets in a table-like structure in the parent widget.|||The place() Method − This geometry manager organizes widgets by placing them in a specific position in the parent widget.|||\']'),(28,'[\'Python 3 - Extension Programming with C\']','[\'Pre-Requisites for Writing Extensions\', \'First look at a Python Extension\', \'The Header File Python.h\', \'The C Functions\', \'The Method Mapping Table\', \'The Initialization Function\', \'Building and Installing Extensions\', \'Importing Extensions\', \'Passing Function Parameters\', \'The PyArg_ParseTuple Function\', \'Returning Values\', \'The Py_BuildValue Function\', \'Useful Video Courses\']','[\'Example\', \'Example\', \'Example\', \'Output\', \'Output\']','[\'https://www.tutorialspoint.com/python3/python_gui_programming.htm\', \'https://www.tutorialspoint.com/python3/python_questions_answers.htm\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/malhar_lathkar\', \'https://www.tutorialspoint.com/python_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/profile/Arnab-Chakraborty\', \'https://www.tutorialspoint.com/python_essentials_online_training/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/profile/in28minutes_official\', \'https://www.tutorialspoint.com/learn_python_programming_in_100_easy_steps/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/profile/eduonix_learning_solutions\', \'https://www.tutorialspoint.com/python_with_data_science/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/profile/lets_kode_it\', \'https://www.tutorialspoint.com/python_3_from_scratch_to_become_a_developer_in_demand/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/profile/abhilash_nelson\', \'https://www.tutorialspoint.com/python_data_science_basics_with_numpy_pandas_and_matplotlib/index.asp\', \'https://www.tutorialspoint.com/python3/python_gui_programming.htm\', \'https://www.tutorialspoint.comjavascript:printPage();\', \'https://www.tutorialspoint.com/python3/python_questions_answers.htm\']','[\'https://d3mxt5v3yxgcsr.cloudfront.net/courses/1955/course_1955_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2027/course_2027_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2202/course_2202_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2236/course_2236_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2270/course_2270_image.png\', \'https://d3mxt5v3yxgcsr.cloudfront.net/courses/2325/course_2325_image.jpg\']','[\'To start writing your extension, you are going to need the Python header files.\', \'The C functions you want to expose as the interface from your module.\', \'Here is the description of the members of this structure −\', \'This flag usually has a value of METH_VARARGS.\', \'For the above-defined function, we have the following method mapping table −\', \'Your C initialization function generally has the following overall structure −\', \'Here is the description of Py_InitModule3 function −\', \'func − This is the function to be exported.\', \'module_methods − This is the mapping table name defined above.\', \'docstring − This is the comment you want to give in your extension.\', \'Putting all this together, it looks like the following −\', \'A simple example that makes use of all the above concepts −\', \'For the above module, you need to prepare the following setup.py script −\', \'This would produce the following result −\', \'You can probably come up with even more variations.\', \'Here is the standard signature for the PyArg_ParseTuple function −\', \'Here is a list of format codes for the PyArg_ParseTuple function −\', \'This is what it would look like if implemented in Python −\', \'This is what it would look like if implemented in Python −\', \'Here is the standard signature for Py_BuildValue function −\']','[\'On Unix machines, this usually requires installing a developer-specific package such as python2.5-dev.\', \'Windows users get these headers as part of the package when they use the binary Python installer.\', \'For your first look at a Python extension module, you need to group your code into four part −\', \'A table mapping the names of your functions as Python developers see them as C functions inside the extension module.\', \'The signatures of the C implementation of your functions always takes one of the following three forms −\', \'Your C functions usually are named by combining the Python module and function names together, as shown here −\', \'This method table is a simple array of PyMethodDef structures. That structure looks something like this −\', \'ml_name − This is the name of the function as the Python interpreter presents when it is used in Python programs.\', \'ml_meth − This is the address of a function that has any one of the signatures described in the previous section.\', \'ml_flags − This tells the interpreter which of the three signatures ml_meth is using.\', \"This flag can be bitwise OR\'ed with METH_KEYWORDS if you want to allow keyword arguments into your function.\", \'This can also have a value of METH_NOARGS that indicates you do not want to accept any arguments.\', \'ml_doc − This is the docstring for the function, which could be NULL if you do not feel like writing one.\', \'This table needs to be terminated with a sentinel that consists of NULL and 0 values for the appropriate members.\', \'The method table containing an entry for the new function would look like this −\', \'You can return two values from your function as follows. This would be captured using a list in Python.\', \'The following table lists the commonly used code strings, of which zero or more are joined into a string format.\']','[\'Any code that you write using any compiled language like C, C++, or Java can be integrated or imported into another Python script. This code is considered as an \"extension.\"\', \'A Python extension module is nothing more than a normal C library. On Unix machines, these libraries usually end in .so (for shared object). On Windows machines, you typically see .dll (for dynamically linked library).\', \'Additionally, it is assumed that you have a good knowledge of C or C++ to write any Python Extension using C programming.\', \'You need to include Python.h header file in your C source file, which gives you the access to the internal Python API used to hook your module into the interpreter.\', \'Make sure to include Python.h before any other headers you might need. You need to follow the includes with the functions you want to call from Python.\', \"Each one of the preceding declarations returns a Python object. There is no such thing as a void  function in Python as there is in C. If you do not want your functions to return a value, return the C equivalent of Python\'s None value. The Python headers define a macro, Py_RETURN_NONE, that does this for us.\", \'The names of your C functions can be whatever you like as they are never seen outside of the extension module. They are defined as static function.\', \'This is a Python function called func inside the module module. You will be putting pointers to your C functions into the method table for the module that usually comes next in your source code.\', \'The last part of your extension module is the initialization function. This function is called by the Python interpreter when the module is loaded. It is required that the function be named initModule, where Module is the name of the module.\', \'The initialization function needs to be exported from the library you will be building. The Python headers define PyMODINIT_FUNC to include the appropriate incantations for that to happen for the particular environment in which we are compiling. All you have to do is use it when defining the function.\', \'Here the Py_BuildValue function is used to build a Python value. Save above code in hello.c file. We would see how to compile and install this module to be called from Python script.\', \'The distutils package makes it very easy to distribute Python modules, both pure Python and extension modules, in a standard way. Modules are distributed in the source form, built and installed via a setup script usually called setup.py as.\', \'Now, use the following command, which would perform all needed compilation and linking steps, with the right compiler and linker commands and flags, and copies the resulting dynamic library into an appropriate directory −\', \'On Unix-based systems, you will most likely need to run this command as root in order to have permissions to write to the site-packages directory. This usually is not a problem on Windows.\', \'Once you install your extensions, you would be able to import and call that extension in your Python script as follows −\', \'As you will most likely want to define functions that accept arguments, you can use one of the other signatures for your C functions. For example, the following function, that accepts some number of parameters, would be defined like this −\', \'You can use the API PyArg_ParseTuple function to extract the arguments from the one PyObject pointer passed into your C function.\', \'The first argument to PyArg_ParseTuple is the args argument. This is the object you will be parsing. The second argument is a format string describing the arguments as you expect them to appear. Each argument is represented by one or more characters in the format string as follows.\', \'Compiling the new version of your module and importing it enables you to invoke the new function with any number of arguments of any type −\', \"This function returns 0 for errors, and a value not equal to 0 for success. Tuple is the PyObject* that was the C function\'s second argument. Here format is a C string that describes mandatory and optional arguments.\", \'Py_BuildValue takes in a format string much like PyArg_ParseTuple does. Instead of passing in the addresses of the values you are building, you pass in the actual values. Here is an example showing how to implement an add function −\', \'Here format is a C string that describes the Python object to build. The following arguments of Py_BuildValue are C values from which the result is built. The PyObject* result is a new reference.\', \'Code {...} builds dictionaries from an even number of C values, alternately keys and values. For example, Py_BuildValue(\"{issi}\",23,\"zig\",\"zag\",42) returns a dictionary like Python\'s {23:\'zig\',\'zag\':42}.\']','[\'\nstatic PyObject *MyFunction( PyObject *self, PyObject *args );\n\nstatic PyObject *MyFunctionWithKeywords(PyObject *self, PyObject *args, PyObject *kw);\n\nstatic PyObject *MyFunctionWithNoArgs( PyObject *self );\n\', \'\nstatic PyObject *module_func(PyObject *self, PyObject *args) {\n   /* Do your stuff here. */\n   Py_RETURN_NONE;\n}\n\', \'\nstruct PyMethodDef {\n   char *ml_name;\n   PyCFunction ml_meth;\n   int ml_flags;\n   char *ml_doc;\n};\n\', \'\nstatic PyMethodDef module_methods[] = {\n   { \"func\", (PyCFunction)module_func, METH_NOARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n\', \'\nPyMODINIT_FUNC initModule() {\n   Py_InitModule3(func, module_methods, \"docstring...\");\n}\n\', \'\n#include <Python.h>\n\nstatic PyObject *module_func(PyObject *self, PyObject *args) {\n   /* Do your stuff here. */\n   Py_RETURN_NONE;\n}\n\nstatic PyMethodDef module_methods[] = {\n   { \"func\", (PyCFunction)module_func, METH_NOARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n\nPyMODINIT_FUNC initModule() {\n   Py_InitModule3(func, module_methods, \"docstring...\");\n}\n\', \'\n#include <Python.h>\n\nstatic PyObject* helloworld(PyObject* self)\n{\n   return Py_BuildValue(\"s\", \"Hello, Python extensions!!\");\n}\n\nstatic char helloworld_docs[] =\n   \"helloworld( ): Any message you want to put here!!\\n\";\n\nstatic PyMethodDef helloworld_funcs[] = {\n   {\"helloworld\", (PyCFunction)helloworld, \n   METH_NOARGS, helloworld_docs},\n   {NULL}\n};\n\nvoid inithelloworld(void)\n{\n   Py_InitModule3(\"helloworld\", helloworld_funcs, \"Extension module example!\");\n}\n\', \"\nfrom distutils.core import setup, Extension\nsetup(name = \'helloworld\', version = \'1.0\',  \\\n   ext_modules = [Extension(\'helloworld\', [\'hello.c\'])])\n\", \'\n$ python setup.py install\n\', \'\n#!/usr/bin/python3\nimport helloworld\n\nprint helloworld.helloworld()\n\', \'\nHello, Python extensions!!\n\', \'\nstatic PyObject *module_func(PyObject *self, PyObject *args) {\n   /* Parse args and do something interesting here. */\n   Py_RETURN_NONE;\n}\n\', \'\nstatic PyMethodDef module_methods[] = {\n   { \"func\", (PyCFunction)module_func, METH_NOARGS, NULL },\n   { \"func\", module_func, METH_VARARGS, NULL },\n   { NULL, NULL, 0, NULL }\n};\n\', \'\nstatic PyObject *module_func(PyObject *self, PyObject *args) {\n   int i;\n   double d;\n   char *s;\n\n   if (!PyArg_ParseTuple(args, \"ids\", &i, &d, &s)) {\n      return NULL;\n   }\n   \n   /* Do something interesting here. */\n   Py_RETURN_NONE;\n}\n\', \'\nmodule.func(1, s = \"three\", d = 2.0)\nmodule.func(i = 1, d = 2.0, s = \"three\")\nmodule.func(s = \"three\", d = 2.0, i = 1)\n\', \'\nint PyArg_ParseTuple(PyObject* tuple,char* format,...)\n\', \'\nstatic PyObject *foo_add(PyObject *self, PyObject *args) {\n   int a;\n   int b;\n\n   if (!PyArg_ParseTuple(args, \"ii\", &a, &b)) {\n      return NULL;\n   }\n   return Py_BuildValue(\"i\", a + b);\n}\n\', \'\ndef add(a, b):\n   return (a + b)\n\', \'\nstatic PyObject *foo_add_subtract(PyObject *self, PyObject *args) {\n   int a;\n   int b;\n\n   if (!PyArg_ParseTuple(args, \"ii\", &a, &b)) {\n      return NULL;\n   }\n   return Py_BuildValue(\"ii\", a + b, a - b);\n}\n\', \'\ndef add_subtract(a, b):\n   return (a + b, a - b)\n\', \'\nPyObject* Py_BuildValue(char* format,...)\n\']','[\'\n$ python setup.py install\n\', \'\nHello, Python extensions!!\n\', \'\nmodule.func(1, s = \"three\", d = 2.0)\nmodule.func(i = 1, d = 2.0, s = \"three\")\nmodule.func(s = \"three\", d = 2.0, i = 1)\n\', \'\nint PyArg_ParseTuple(PyObject* tuple,char* format,...)\n\', \'\nPyObject* Py_BuildValue(char* format,...)\n\']','[\'CodeC typeMeaning&&&charA Python string of length 1 becomes a C char&&&doubleA Python float becomes a C double&&&floatA Python float becomes a C float&&&intA Python int becomes a C int&&&longA Python int becomes a C long&&&long longA Python int becomes a C long lon&&&PyObject*Gets non-NULL borrowed reference to Python argument&&&char*Python string without embedded nulls to C char*&&&#char*+intAny Python string to C address and length&&&#char*+intRead-only single-segment buffer to C address and length&&&Py_UNICODE*Python Unicode without embedded nulls to C&&&#Py_UNICODE*+intAny Python Unicode C address and length&&&#char*+intRead/write single-segment buffer to C address and length&&&char*Like s, also accepts None (sets C char* to NULL)&&&#char*+intLike s#, also accepts None (sets C char* to NULL)&&&...)as per ...A Python sequence is treated as one argument per item&&&The following arguments are optional&&&Format end, followed by function name for error messages&&&Format end, followed by entire error message text\', \'CodeC typeMeaning&&&charA C char becomes a Python string of length 1&&&doubleA C double becomes a Python float&&&floatA C float becomes a Python float&&&intA C int becomes a Python int&&&longA C long becomes a Python int&&&PyObject*Passes a Python object and steals a reference&&&PyObject*Passes a Python object and INCREFs it as normal&&&&convert+void*Arbitrary conversio&&&char*C 0-terminated char* to Python string, or NULL to None&&&#char*+intC char* and length to Python string, or NULL to None&&&Py_UNICODE*C-wide, null-terminated string to Python Unicode, or NULL to None&&&#Py_UNICODE*+intC-wide string and length to Python Unicode, or NULL to None&&&#char*+intRead/write single-segment buffer to C address and length&&&char*Like s, also accepts None (sets C char* to NULL)&&&#char*+intLike s#, also accepts None (sets C char* to NULL)&&&...)as per ...Builds Python tuple from C values&&&...]as per ...Builds Python list from C values&&&...}as per ...Builds Python dictionary from C values, alternating keys and values\']','[\"On Unix machines, this usually requires installing a developer-specific package such as python2.5-dev.|||Windows users get these headers as part of the package when they use the binary Python installer.|||The header file Python.h.|||The C functions you want to expose as the interface from your module.|||A table mapping the names of your functions as Python developers see them as C functions inside the extension module.|||An initialization function.|||ml_name − This is the name of the function as the Python interpreter presents when it is used in Python programs.|||ml_meth − This is the address of a function that has any one of the signatures described in the previous section.|||ml_flags − This tells the interpreter which of the three signatures ml_meth is using.||||||This flag usually has a value of METH_VARARGS.|||This flag can be bitwise OR\'ed with METH_KEYWORDS if you want to allow keyword arguments into your function.|||This can also have a value of METH_NOARGS that indicates you do not want to accept any arguments.|||||||||ml_doc − This is the docstring for the function, which could be NULL if you do not feel like writing one.|||This flag usually has a value of METH_VARARGS.|||This flag can be bitwise OR\'ed with METH_KEYWORDS if you want to allow keyword arguments into your function.|||This can also have a value of METH_NOARGS that indicates you do not want to accept any arguments.|||func − This is the function to be exported.|||module_methods − This is the mapping table name defined above.|||docstring − This is the comment you want to give in your extension.|||\"]');
/*!40000 ALTER TABLE `tutorialspoint_python_data` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-01-31 23:13:54
